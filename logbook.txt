9-12-24 ----------------------------------------------------------------------------------------------------------------

First day of work. Got the XM125 set up using STM32CubeIDE. Followed the Software User Guide on their documents page 
(https://developer.acconeer.com/home/a121-docs-software/xm125-xe125/). Set up one of the basic examples, the "presence
detection" example. Tuned the example for my particular environment (testing 0.2m-0.6m away, tuned for a faster 
detection dropoff time).

Also, set up the ESP32 with a PlatformIO project. It's basically acting like a repeater, reading the messages from the
STM32 UART and printing them to the USB COM port.

Wrote (with the help of Claude AI) a GUI for visualizing the results from the example. Works pretty well!

Also: did prep work (reviewing documents, datasheets, etc.) yesterday.


9-17-24 ----------------------------------------------------------------------------------------------------------------

Looked through some more documentation (mainly the handbook and the presence / distance example documents), and got the
distance example running. It can see through objects!

Going to try and set it up with the Fo-SHIP so that I can automate testing (and actually verify the measurements to 
ground-truth).


9-18-24 ----------------------------------------------------------------------------------------------------------------

Set up the Fo-SHIP to move in the Z-axis only, and cleaned up the wiring harness (no more IMUs). Calibrated and verified
the Z-axis movement - it's accurate to within 1.34mm of its setpoint. Also, it can follow a set waveform (sum of sines)
to mimic the motion of waves.

I have a thick textbook (DSP book, actually) that is attached to the end effector. I can attach other objects (aluminum
foil, water containers, etc.) to change the end effector material.


9-19-24 ----------------------------------------------------------------------------------------------------------------

Thought I burned the radar board, but it was just a power supply issue. All is good! The STM32 won't run unless the 
debugger (ST-LINK) is powered and attached, though - need to fix this later.

Tuned the distance example a bit more, and ran some automated tests. The radar is pretty accurate with the book alone!
Also, modified the Fo-SHIP motion so that the top end effector sets its roll angle according to the derivative of the
Z-axis function - this makes it look like it's rolling with the waves!


9-22-24 ----------------------------------------------------------------------------------------------------------------

Read through the distance detector documentation, as well as various other XM125 docs. I have a good feel for how the
system works now, and what I need to change based on the final use case. Also sent JRR an email to clarify that final
use case a bit more.


9-23-24 ----------------------------------------------------------------------------------------------------------------

Got the Bluetooth module on the ESP32 working - I can now communicate with the STM32 through the ESP32's BT serial
(requires a laptop with a PuTTY terminal open for the BT COM port). 

Started to modify the STM32 code so that I can change the configuration of the radar through the BT serial connection. 
This means I can tweak the settings without needing to flash new code to the STM32, and for the final use case, the user
can modify the configuration without needing STM32CubeIDE. Working on a menu dialog to facilitate changing the configs.

Currently, the general menu is made, along with functions to change the start and end distance of the measurement range,
the update rate, and to toggle low power mode (powers off between measurements). I also added a function to test the
actual update rate (may be slightly different than set rate).

Next steps: 
- Finish the switch(case) functions for the other settings, make sure they all work reliably.
- Send the saved configuration back to the ESP32
- Set up the Adalogger to save the configuration and the measured data, and to read the saved configuration on startup
- Find a way to turn on/off the Bluetooth (maybe turn on automatically, turn off if the STM enters low power mode?)
- (future problem) Make sure that the STM32 can start logging data without needing the BT connection first? (like if it
  loses power from solar, then turns on a few minutes later)

Also, started to look at the Adalogger Feather. It seems to use I2C with the ESP32. I'd like to store the configuration
settings for the STM32 on the Adalogger SD card, so that it persists when the system powers down.


9-24-24 ----------------------------------------------------------------------------------------------------------------

Finished the switch(case) functions and the dang STM32 didn't have enough FLASH memory. Not sure why STM is so stingy
with it. Had to port the CLI to the ESP32 side, which took most of the day, but it's finally (mostly) working. Need to
test some bug cases to make sure it all works:
- STM loses power during menu config
- STM loses power during update rate test
- STM loses power during normal operation
- STM loses power during "stop radar"
- ESP loses power during menu config
- ESP loses power during update rate test
- ESP loses power during normal operation
- ESP loses power during "stop radar"

After that, need to read through the code and clean everything up (and document!!).

Then, I can start on the next steps from above:
- Add an auto range finder function
- Save the configuration settings using the Adalogger, read after power cycling
- Save output data to a file in the Adalogger
- Test power cycling and bug cases above, see how files are affected


9-28-24 ----------------------------------------------------------------------------------------------------------------

Decided that following MISRA C guidelines would be a good idea (for safety/reliability, and as a learning experience),
and it quickly devolved into MISERY C. Took me a few days, but the ESP code now (mostly) follows the MISRA guidelines,
uses a finite-state machine model, and is overall a lot cleaner.

Next steps:
- Add Adalogger and SD card functionality (filenames based on timestamps)
  - Debug .txt file that writes everything (make a new one every million lines, or when ESP restarts)
  - Data .csv file that saves valid floats between DATA_START and DATA_END (new one for each DATA_START)
    - Need a way to parse valid floats from the M115 string...
  - Config .txt string to save and load config settings
- Test the bug cases from above, squash any bugs that appear
- Document (and clean) the ESP32 code
- Document (and clean) the STM32 code
- Make the FSM diagram(s) pretty
- Do more tests
  - Salt water tupperware (radar, then tupperware on Fo-SHIP end effector)
  - Ceiling test (with aluminum foil?)
  - Car test
- Add GPS functionality
  - Save data in CSV, or in filename?
- Figure out how to put ESP in deep sleep mode between measurements (listening state)
- Measure power consumption for different radar configs


9-30-24 ----------------------------------------------------------------------------------------------------------------

After blood, sweat, and many tears, I am able to interface with the SD card using the ESP. A couple of hours of
debugging and web-sleuthing led to the discovery that the current espressif32 platform version breaks the SD card
library; I manually set it to a version that works (3.5.0). Doesn't seem to be causing issues with anything else, but
kind of a bummer for future PlatformIO projects.

Tomorrow, I'll add the functions into the main code - all messages will be saved to debug.txt, all data will be saved to
data.csv, and the config will be saved to config.csv. Then, I'll get a way to name the debug and data files based on the
current timestamp. After that, I'll find a way to load the config from config.csv. 

Then comes a decision: test bug cases or add GPS functionality? My vote is for GPS, since it can be used for the RTC.

I'll be leaving on Thursday early afternoon for SLO, so I should make sure I have everything tidied up by Wednesday
night at the latest.


10-1-24 ----------------------------------------------------------------------------------------------------------------

Added the SD card saving functions. Now, a new debug file is created every time the ESP32 resets, and a new data file is
made when the data collection restarts (on powerup and between config menu settings). Also, got a radar_config.txt file
to save the current config in.

Changed the print settings a bit to read better on Bluetooth. Now, I can control the text width output on the BT UART,
which makes using it on mobile much more user-friendly.

Next steps:
- Finish the menu option for setting the text width
- Make sure no_data doesn't print during update rate test
- Make the time increment for data based on millis(), not rtc
	- use rtc for initial time


10-2-24 ----------------------------------------------------------------------------------------------------------------

Finished the above steps! It's in a good place for an in-person demo - excited to show it off.

My next steps, when I return, are:
- Modify the config menu so that if BT_on turns off, it exits to the listening state and restarts the radar
	- maybe add a timeout to the read_uart_bt function?
- Add GPS support
	- Add lat/long/elev to config struct
	- Add lat/long/elev to file naming
	- Update time on RTC every 5 mins using GPS, print in datalog if it changes
	- Update lat/long/elev every 5 mins
	- Modify configuration for low power mode (https://content.u-blox.com/sites/default/files/products/documents/u-blox6_ReceiverDescrProtSpec_%28GPS.G6-SW-10018%29_Public.pdf)
- Add ESP32 low-power mode


10-23-24 ----------------------------------------------------------------------------------------------------------------

Long break over! Designed a mount for the radar unit so I can hold it over the edge of a pier without it falling off. 
Also did some testing in my bathtub, raising and lowering the water level, and making waves to measure. Tested out a
variety of settings for the config to see how they affect the accuracy. Finally, updated the ESP32 code to print the
config to the datalogs and fixed a few small bugs. Oh, and also make some new Python scripts for visualizing the data
straight from the SD card.

Tomorrow's goals:
- Figure out how to get the mount printed
- Do tests to figure out the cone angle for the different lens distances
- Get the GPS working, add to log data
- Prep for travel


10-24-24 ----------------------------------------------------------------------------------------------------------------

Did some angle testing, confirmed that the LH132 + XE125, Hyperbolic lens, D2 plot is accurate for this system. Can be
found in Getting-Started-Guide-A121-Lenses.pdf. The lens has a roughly 20 degree (circular) viewing angle at maximum 
(where the radar returns any measurements for metal/water), and 10 degree circle for the majority of measurements.

Got the GPS working. It now saves the lat/long to the config (and prints it for each data file), and updates the time
(only noticable for new data logs, to avoid breaking time consistency). I also put a limit on the number of lines a .txt
file could be (1 million, about 40MB or roughly 11.5 days at 1Hz) for practical purposes. 

Potential features for future:
- Low power mode for ESP!
- Wait until GPS fix to start data collection?
- If power cycling occurs after sunset (say 5pm), wait until morning to try powering again? maybe track last power-loss?
- Make sure debug log isn't as long as data log

Current power draw:
- With BT: 140mA avg
- Without BT: 125mA avg?


10-30-24 ----------------------------------------------------------------------------------------------------------------

Findings from MBYC testing:
- Too high of a profile makes a lot of noise, profile=1 seems to be best for this environment
- Step length doesn't appear to have a large impact on results between 5mm-15mm
  - Need to do more Fo-SHIP tests to reliably test step length (and need another radar unit!)
- Tide change is noticable (but looks weird because settings changed between runs)

Next steps:
- Fix GPS issue (W/E discrepancy)
- Figure out why timestamps (data) weren't matching timestamps (filename)
- Add more info to debug logs (denote start of data collection, timestamp)
- Add more info to data log header (if restart due to power loss or config menu setting)
- Look at current sonar implementation, see how they do low-power and GPS elevation
- Account for GPS elevation, add to data log header and add config option to auto-account for elevation in data
- Email testing findings to Talke, Lee, and Ridgely
...
- Design 3D-printed insert for waterproof box, get printed at Marin Library Lab
- Assemble and test waterproofed unit on Fo-SHIP
...
- Rework the code to use multitasking, multiple code files
- Improve the communication protocol between STM and ESP?
- Improve the SD card writing (use interrupts?)
- Implement low-power mode on the ESP32
- Characterize power draw from components (ESP32, STM32/radar, GPS), account for update rate
...
- Implement auto-ranging mode?


12-3-24 ----------------------------------------------------------------------------------------------------------------

MBARI testing went well. Job hunt has been brutal and taxing, but I finally signed an offer. Here's hoping everything
goes through.

Done today:
- Created a new ESP32 project (for implementing multitasking and multiple files) and defined file structure
- Created BluetoothManager, can now connect to BT using phone (like before) and send/receive data (with delay)
- Created GPSManager, can now enable/disable GPS, can read and parse messages, and set up the timer module
- Started SDCardManager

For tomorrow:
- Finish SDCardManager, be able to save GPS messages to data log and everything else to debug (make a dummy DIR!)
- Implement power-saving measures, entering sleep when possible after BT disables
  - First use a timer, then use the RX pin (TX of STM32)
  - When powered on, write the current state of the lat/long/elev/time to data, then sleep again
- Implement ConfigManager, which handles the config menu and setting/reading/saving configs
- Rework M-codes into a more standard byte pattern?
- Update power-saving to work from STM32 UART pings
  - Will require sending the data more than once... perhaps save a buffer?
  - Save N-1 readings on STM32, send wake-up, take one more radar measurement, then send buffer (N data)?
  - Possibly send all "detected distances" instead of just top pick?
  
12-3-24 ----------------------------------------------------------------------------------------------------------------

Done today:
- Finished SDCardManager, can save to data and debug logs
- Drew some preliminary FSMs for the ESP and STM
- Re-worked the M-codes to use bytes instead on the STM
  - For example, a message might look like "O:?\0", where O: are header bytes, ? is cmd byte, and \0 is null terminator

For tomorrow:
- Prep for and go to interview at White Industries
- Finish the FSMs and determine tasks, shares, and queues (task diagram..?)
- Review existing managers and add/remove to fit FSMs/tasks