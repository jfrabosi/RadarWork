
xm125.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012608  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005cd8  08012798  08012798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018470  08018470  0001a208  2**0
                  CONTENTS
  4 .ARM          00000008  08018470  08018470  00019470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018478  08018478  0001a208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018478  08018478  00019478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801847c  0801847c  0001947c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  08018480  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000208  08018688  0001a208  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  200006b4  08018688  0001a6b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000559b8  00000000  00000000  0001a238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bf93  00000000  00000000  0006fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002620  00000000  00000000  0007bb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee3  00000000  00000000  0007e1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233fe  00000000  00000000  0007f08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fc11  00000000  00000000  000a2489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de464  00000000  00000000  000d209a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000008f  00000000  00000000  001b04fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009998  00000000  00000000  001b0590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001b9f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0002329c  00000000  00000000  001b9f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00005818  00000000  00000000  001dd216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012780 	.word	0x08012780

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08012780 	.word	0x08012780

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b98a 	b.w	8000d78 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f826 	bl	8000abc <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_f2ulz>:
 8000a7c:	b5d0      	push	{r4, r6, r7, lr}
 8000a7e:	f7ff fd5b 	bl	8000538 <__aeabi_f2d>
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <__aeabi_f2ulz+0x38>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	4606      	mov	r6, r0
 8000a88:	460f      	mov	r7, r1
 8000a8a:	f7ff fdad 	bl	80005e8 <__aeabi_dmul>
 8000a8e:	f7ff ffbd 	bl	8000a0c <__aeabi_d2uiz>
 8000a92:	4604      	mov	r4, r0
 8000a94:	f7ff fd2e 	bl	80004f4 <__aeabi_ui2d>
 8000a98:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <__aeabi_f2ulz+0x3c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f7ff fda4 	bl	80005e8 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	4639      	mov	r1, r7
 8000aa8:	f7ff fbe6 	bl	8000278 <__aeabi_dsub>
 8000aac:	f7ff ffae 	bl	8000a0c <__aeabi_d2uiz>
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ab4:	3df00000 	.word	0x3df00000
 8000ab8:	41f00000 	.word	0x41f00000

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d86:	2003      	movs	r0, #3
 8000d88:	f000 f93c 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8c:	200f      	movs	r0, #15
 8000d8e:	f000 f80d 	bl	8000dac <HAL_InitTick>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	e001      	b.n	8000da2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d9e:	f005 feb1 	bl	8006b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000db8:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <HAL_InitTick+0x6c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d023      	beq.n	8000e08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dc0:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <HAL_InitTick+0x70>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <HAL_InitTick+0x6c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f949 	bl	800106e <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10f      	bne.n	8000e02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d809      	bhi.n	8000dfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 f913 	bl	800101a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <HAL_InitTick+0x74>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e007      	b.n	8000e0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	e004      	b.n	8000e0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e001      	b.n	8000e0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000004 	.word	0x20000004
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000000 	.word	0x20000000

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000004 	.word	0x20000004
 8000e48:	20000224 	.word	0x20000224

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000224 	.word	0x20000224

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff29 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff3e 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff8e 	bl	8000f58 <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff31 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa2 	bl	8000fc0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e098      	b.n	80011cc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b4d      	ldr	r3, [pc, #308]	@ (80011d8 <HAL_DMA_Init+0x150>)
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d80f      	bhi.n	80010c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b4b      	ldr	r3, [pc, #300]	@ (80011dc <HAL_DMA_Init+0x154>)
 80010ae:	4413      	add	r3, r2
 80010b0:	4a4b      	ldr	r2, [pc, #300]	@ (80011e0 <HAL_DMA_Init+0x158>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	091b      	lsrs	r3, r3, #4
 80010b8:	009a      	lsls	r2, r3, #2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a48      	ldr	r2, [pc, #288]	@ (80011e4 <HAL_DMA_Init+0x15c>)
 80010c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80010c4:	e00e      	b.n	80010e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b46      	ldr	r3, [pc, #280]	@ (80011e8 <HAL_DMA_Init+0x160>)
 80010ce:	4413      	add	r3, r2
 80010d0:	4a43      	ldr	r2, [pc, #268]	@ (80011e0 <HAL_DMA_Init+0x158>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	009a      	lsls	r2, r3, #2
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a42      	ldr	r2, [pc, #264]	@ (80011ec <HAL_DMA_Init+0x164>)
 80010e2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2202      	movs	r2, #2
 80010e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80010fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80010fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800113e:	d039      	beq.n	80011b4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	4a27      	ldr	r2, [pc, #156]	@ (80011e4 <HAL_DMA_Init+0x15c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d11a      	bne.n	8001180 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800114a:	4b29      	ldr	r3, [pc, #164]	@ (80011f0 <HAL_DMA_Init+0x168>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	f003 031c 	and.w	r3, r3, #28
 8001156:	210f      	movs	r1, #15
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	4924      	ldr	r1, [pc, #144]	@ (80011f0 <HAL_DMA_Init+0x168>)
 8001160:	4013      	ands	r3, r2
 8001162:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001164:	4b22      	ldr	r3, [pc, #136]	@ (80011f0 <HAL_DMA_Init+0x168>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6859      	ldr	r1, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001170:	f003 031c 	and.w	r3, r3, #28
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	491d      	ldr	r1, [pc, #116]	@ (80011f0 <HAL_DMA_Init+0x168>)
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]
 800117e:	e019      	b.n	80011b4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <HAL_DMA_Init+0x16c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001188:	f003 031c 	and.w	r3, r3, #28
 800118c:	210f      	movs	r1, #15
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	4917      	ldr	r1, [pc, #92]	@ (80011f4 <HAL_DMA_Init+0x16c>)
 8001196:	4013      	ands	r3, r2
 8001198:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800119a:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <HAL_DMA_Init+0x16c>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6859      	ldr	r1, [r3, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	f003 031c 	and.w	r3, r3, #28
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	4911      	ldr	r1, [pc, #68]	@ (80011f4 <HAL_DMA_Init+0x16c>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	40020407 	.word	0x40020407
 80011dc:	bffdfff8 	.word	0xbffdfff8
 80011e0:	cccccccd 	.word	0xcccccccd
 80011e4:	40020000 	.word	0x40020000
 80011e8:	bffdfbf8 	.word	0xbffdfbf8
 80011ec:	40020400 	.word	0x40020400
 80011f0:	400200a8 	.word	0x400200a8
 80011f4:	400204a8 	.word	0x400204a8

080011f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d008      	beq.n	8001222 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2204      	movs	r2, #4
 8001214:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e022      	b.n	8001268 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 020e 	bic.w	r2, r2, #14
 8001230:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0201 	bic.w	r2, r2, #1
 8001240:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f003 021c 	and.w	r2, r3, #28
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d005      	beq.n	8001298 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2204      	movs	r2, #4
 8001290:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	e029      	b.n	80012ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 020e 	bic.w	r2, r2, #14
 80012a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012bc:	f003 021c 	and.w	r2, r3, #28
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	4798      	blx	r3
    }
  }
  return status;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	f003 031c 	and.w	r3, r3, #28
 8001316:	2204      	movs	r2, #4
 8001318:	409a      	lsls	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d026      	beq.n	8001370 <HAL_DMA_IRQHandler+0x7a>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	d021      	beq.n	8001370 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	2b00      	cmp	r3, #0
 8001338:	d107      	bne.n	800134a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0204 	bic.w	r2, r2, #4
 8001348:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	f003 021c 	and.w	r2, r3, #28
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	2104      	movs	r1, #4
 8001358:	fa01 f202 	lsl.w	r2, r1, r2
 800135c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	2b00      	cmp	r3, #0
 8001364:	d071      	beq.n	800144a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800136e:	e06c      	b.n	800144a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001374:	f003 031c 	and.w	r3, r3, #28
 8001378:	2202      	movs	r2, #2
 800137a:	409a      	lsls	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4013      	ands	r3, r2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d02e      	beq.n	80013e2 <HAL_DMA_IRQHandler+0xec>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d029      	beq.n	80013e2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0320 	and.w	r3, r3, #32
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10b      	bne.n	80013b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 020a 	bic.w	r2, r2, #10
 80013aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b8:	f003 021c 	and.w	r2, r3, #28
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	2102      	movs	r1, #2
 80013c2:	fa01 f202 	lsl.w	r2, r1, r2
 80013c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d038      	beq.n	800144a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80013e0:	e033      	b.n	800144a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f003 031c 	and.w	r3, r3, #28
 80013ea:	2208      	movs	r2, #8
 80013ec:	409a      	lsls	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d02a      	beq.n	800144c <HAL_DMA_IRQHandler+0x156>
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d025      	beq.n	800144c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 020e 	bic.w	r2, r2, #14
 800140e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001414:	f003 021c 	and.w	r2, r3, #28
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	2101      	movs	r1, #1
 800141e:	fa01 f202 	lsl.w	r2, r1, r2
 8001422:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800144a:	bf00      	nop
 800144c:	bf00      	nop
}
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	e154      	b.n	800170e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2101      	movs	r1, #1
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8146 	beq.w	8001708 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d005      	beq.n	8001494 <HAL_GPIO_Init+0x40>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d130      	bne.n	80014f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ca:	2201      	movs	r2, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	091b      	lsrs	r3, r3, #4
 80014e0:	f003 0201 	and.w	r2, r3, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d017      	beq.n	8001532 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d123      	bne.n	8001586 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	6939      	ldr	r1, [r7, #16]
 8001582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0203 	and.w	r2, r3, #3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80a0 	beq.w	8001708 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c8:	4b58      	ldr	r3, [pc, #352]	@ (800172c <HAL_GPIO_Init+0x2d8>)
 80015ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015cc:	4a57      	ldr	r2, [pc, #348]	@ (800172c <HAL_GPIO_Init+0x2d8>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80015d4:	4b55      	ldr	r3, [pc, #340]	@ (800172c <HAL_GPIO_Init+0x2d8>)
 80015d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015e0:	4a53      	ldr	r2, [pc, #332]	@ (8001730 <HAL_GPIO_Init+0x2dc>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	220f      	movs	r2, #15
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800160a:	d019      	beq.n	8001640 <HAL_GPIO_Init+0x1ec>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a49      	ldr	r2, [pc, #292]	@ (8001734 <HAL_GPIO_Init+0x2e0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d013      	beq.n	800163c <HAL_GPIO_Init+0x1e8>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a48      	ldr	r2, [pc, #288]	@ (8001738 <HAL_GPIO_Init+0x2e4>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d00d      	beq.n	8001638 <HAL_GPIO_Init+0x1e4>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a47      	ldr	r2, [pc, #284]	@ (800173c <HAL_GPIO_Init+0x2e8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d007      	beq.n	8001634 <HAL_GPIO_Init+0x1e0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a46      	ldr	r2, [pc, #280]	@ (8001740 <HAL_GPIO_Init+0x2ec>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_Init+0x1dc>
 800162c:	2304      	movs	r3, #4
 800162e:	e008      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001630:	2307      	movs	r3, #7
 8001632:	e006      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001634:	2303      	movs	r3, #3
 8001636:	e004      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001638:	2302      	movs	r3, #2
 800163a:	e002      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001640:	2300      	movs	r3, #0
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	f002 0203 	and.w	r2, r2, #3
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	4093      	lsls	r3, r2
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001652:	4937      	ldr	r1, [pc, #220]	@ (8001730 <HAL_GPIO_Init+0x2dc>)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001660:	4b38      	ldr	r3, [pc, #224]	@ (8001744 <HAL_GPIO_Init+0x2f0>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001684:	4a2f      	ldr	r2, [pc, #188]	@ (8001744 <HAL_GPIO_Init+0x2f0>)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800168a:	4b2e      	ldr	r3, [pc, #184]	@ (8001744 <HAL_GPIO_Init+0x2f0>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ae:	4a25      	ldr	r2, [pc, #148]	@ (8001744 <HAL_GPIO_Init+0x2f0>)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016b4:	4b23      	ldr	r3, [pc, #140]	@ (8001744 <HAL_GPIO_Init+0x2f0>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001744 <HAL_GPIO_Init+0x2f0>)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_GPIO_Init+0x2f0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001702:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_GPIO_Init+0x2f0>)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	f47f aea3 	bne.w	8001464 <HAL_GPIO_Init+0x10>
  }
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40021000 	.word	0x40021000
 8001730:	40010000 	.word	0x40010000
 8001734:	48000400 	.word	0x48000400
 8001738:	48000800 	.word	0x48000800
 800173c:	48000c00 	.word	0x48000c00
 8001740:	48001000 	.word	0x48001000
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e001      	b.n	800176a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001794:	e002      	b.n	800179c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f806 	bl	80017d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40010400 	.word	0x40010400

080017d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e08d      	b.n	800191c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d106      	bne.n	800181a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f005 f999 	bl	8006b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2224      	movs	r2, #36	@ 0x24
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0201 	bic.w	r2, r2, #1
 8001830:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800183e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800184e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d107      	bne.n	8001868 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	e006      	b.n	8001876 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001874:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d108      	bne.n	8001890 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	e007      	b.n	80018a0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800189e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018b2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018c2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69d9      	ldr	r1, [r3, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1a      	ldr	r2, [r3, #32]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0201 	orr.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2220      	movs	r2, #32
 8001908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	68f9      	ldr	r1, [r7, #12]
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	4798      	blx	r3
  }
}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b20      	cmp	r3, #32
 800196c:	d138      	bne.n	80019e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001978:	2302      	movs	r3, #2
 800197a:	e032      	b.n	80019e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2224      	movs	r2, #36	@ 0x24
 8001988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80019aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6819      	ldr	r1, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e000      	b.n	80019e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019e0:	2302      	movs	r3, #2
  }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b20      	cmp	r3, #32
 8001a02:	d139      	bne.n	8001a78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e033      	b.n	8001a7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2224      	movs	r2, #36	@ 0x24
 8001a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0201 	bic.w	r2, r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e000      	b.n	8001a7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a78:	2302      	movs	r3, #2
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40007000 	.word	0x40007000

08001aa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ab2:	d130      	bne.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ab4:	4b23      	ldr	r3, [pc, #140]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ac0:	d038      	beq.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aca:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001acc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ad0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2232      	movs	r2, #50	@ 0x32
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0c9b      	lsrs	r3, r3, #18
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae8:	e002      	b.n	8001af0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001afc:	d102      	bne.n	8001b04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f2      	bne.n	8001aea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b04:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b10:	d110      	bne.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e00f      	b.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b16:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b22:	d007      	beq.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b24:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b2c:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40007000 	.word	0x40007000
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	431bde83 	.word	0x431bde83

08001b50 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f000 bc02 	b.w	8002368 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b64:	4b96      	ldr	r3, [pc, #600]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b6e:	4b94      	ldr	r3, [pc, #592]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80e4 	beq.w	8001d4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4c>
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	f040 808b 	bne.w	8001caa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	f040 8087 	bne.w	8001caa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b9c:	4b88      	ldr	r3, [pc, #544]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x64>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e3d9      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1a      	ldr	r2, [r3, #32]
 8001bb8:	4b81      	ldr	r3, [pc, #516]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <HAL_RCC_OscConfig+0x7e>
 8001bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bcc:	e005      	b.n	8001bda <HAL_RCC_OscConfig+0x8a>
 8001bce:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d223      	bcs.n	8001c26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fd8c 	bl	8002700 <RCC_SetFlashLatencyFromMSIRange>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e3ba      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf2:	4b73      	ldr	r3, [pc, #460]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a72      	ldr	r2, [pc, #456]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b70      	ldr	r3, [pc, #448]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	496d      	ldr	r1, [pc, #436]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c10:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	4968      	ldr	r1, [pc, #416]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
 8001c24:	e025      	b.n	8001c72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c26:	4b66      	ldr	r3, [pc, #408]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a65      	ldr	r2, [pc, #404]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b63      	ldr	r3, [pc, #396]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4960      	ldr	r1, [pc, #384]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c44:	4b5e      	ldr	r3, [pc, #376]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	495b      	ldr	r1, [pc, #364]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fd4c 	bl	8002700 <RCC_SetFlashLatencyFromMSIRange>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e37a      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c72:	f000 fc81 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b51      	ldr	r3, [pc, #324]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	4950      	ldr	r1, [pc, #320]	@ (8001dc4 <HAL_RCC_OscConfig+0x274>)
 8001c84:	5ccb      	ldrb	r3, [r1, r3]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8e:	4a4e      	ldr	r2, [pc, #312]	@ (8001dc8 <HAL_RCC_OscConfig+0x278>)
 8001c90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c92:	4b4e      	ldr	r3, [pc, #312]	@ (8001dcc <HAL_RCC_OscConfig+0x27c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f888 	bl	8000dac <HAL_InitTick>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d052      	beq.n	8001d4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	e35e      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d032      	beq.n	8001d18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cb2:	4b43      	ldr	r3, [pc, #268]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a42      	ldr	r2, [pc, #264]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f8c5 	bl	8000e4c <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cc6:	f7ff f8c1 	bl	8000e4c <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e347      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd8:	4b39      	ldr	r3, [pc, #228]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce4:	4b36      	ldr	r3, [pc, #216]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a35      	ldr	r2, [pc, #212]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b33      	ldr	r3, [pc, #204]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4930      	ldr	r1, [pc, #192]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d02:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	492b      	ldr	r1, [pc, #172]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
 8001d16:	e01a      	b.n	8001d4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d18:	4b29      	ldr	r3, [pc, #164]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a28      	ldr	r2, [pc, #160]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d24:	f7ff f892 	bl	8000e4c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f88e 	bl	8000e4c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e314      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d3e:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x1dc>
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d073      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_OscConfig+0x21c>
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d10e      	bne.n	8001d84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d10b      	bne.n	8001d84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d063      	beq.n	8001e40 <HAL_RCC_OscConfig+0x2f0>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d15f      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e2f1      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0x24c>
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e025      	b.n	8001de8 <HAL_RCC_OscConfig+0x298>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001da4:	d114      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x280>
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b03      	ldr	r3, [pc, #12]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a02      	ldr	r2, [pc, #8]	@ (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e013      	b.n	8001de8 <HAL_RCC_OscConfig+0x298>
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08012b20 	.word	0x08012b20
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	4ba0      	ldr	r3, [pc, #640]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a9f      	ldr	r2, [pc, #636]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b9d      	ldr	r3, [pc, #628]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a9c      	ldr	r2, [pc, #624]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff f82c 	bl	8000e4c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff f828 	bl	8000e4c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	@ 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e2ae      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0a:	4b92      	ldr	r3, [pc, #584]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x2a8>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f818 	bl	8000e4c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff f814 	bl	8000e4c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	@ 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e29a      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e32:	4b88      	ldr	r3, [pc, #544]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2d0>
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d060      	beq.n	8001f10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_OscConfig+0x310>
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2b0c      	cmp	r3, #12
 8001e58:	d119      	bne.n	8001e8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d116      	bne.n	8001e8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e60:	4b7c      	ldr	r3, [pc, #496]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_OscConfig+0x328>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e277      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b76      	ldr	r3, [pc, #472]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	4973      	ldr	r1, [pc, #460]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8c:	e040      	b.n	8001f10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d023      	beq.n	8001ede <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e96:	4b6f      	ldr	r3, [pc, #444]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea2:	f7fe ffd3 	bl	8000e4c <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eaa:	f7fe ffcf 	bl	8000e4c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e255      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ebc:	4b65      	ldr	r3, [pc, #404]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec8:	4b62      	ldr	r3, [pc, #392]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	061b      	lsls	r3, r3, #24
 8001ed6:	495f      	ldr	r1, [pc, #380]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
 8001edc:	e018      	b.n	8001f10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ede:	4b5d      	ldr	r3, [pc, #372]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a5c      	ldr	r2, [pc, #368]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7fe ffaf 	bl	8000e4c <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7fe ffab 	bl	8000e4c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e231      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f04:	4b53      	ldr	r3, [pc, #332]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d03c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01c      	beq.n	8001f5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f24:	4b4b      	ldr	r3, [pc, #300]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f2a:	4a4a      	ldr	r2, [pc, #296]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7fe ff8a 	bl	8000e4c <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7fe ff86 	bl	8000e4c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e20c      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f4e:	4b41      	ldr	r3, [pc, #260]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ef      	beq.n	8001f3c <HAL_RCC_OscConfig+0x3ec>
 8001f5c:	e01b      	b.n	8001f96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f64:	4a3b      	ldr	r2, [pc, #236]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7fe ff6d 	bl	8000e4c <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f76:	f7fe ff69 	bl	8000e4c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e1ef      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f88:	4b32      	ldr	r3, [pc, #200]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1ef      	bne.n	8001f76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80a6 	beq.w	80020f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb4:	4b27      	ldr	r3, [pc, #156]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb8:	4a26      	ldr	r2, [pc, #152]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc0:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd0:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <HAL_RCC_OscConfig+0x508>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d118      	bne.n	800200e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <HAL_RCC_OscConfig+0x508>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8002058 <HAL_RCC_OscConfig+0x508>)
 8001fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe8:	f7fe ff30 	bl	8000e4c <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff0:	f7fe ff2c 	bl	8000e4c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1b2      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_RCC_OscConfig+0x508>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d108      	bne.n	8002028 <HAL_RCC_OscConfig+0x4d8>
 8002016:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201c:	4a0d      	ldr	r2, [pc, #52]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002026:	e029      	b.n	800207c <HAL_RCC_OscConfig+0x52c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b05      	cmp	r3, #5
 800202e:	d115      	bne.n	800205c <HAL_RCC_OscConfig+0x50c>
 8002030:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002036:	4a07      	ldr	r2, [pc, #28]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002046:	4a03      	ldr	r2, [pc, #12]	@ (8002054 <HAL_RCC_OscConfig+0x504>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x52c>
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
 800205c:	4b9a      	ldr	r3, [pc, #616]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002062:	4a99      	ldr	r2, [pc, #612]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800206c:	4b96      	ldr	r3, [pc, #600]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002072:	4a95      	ldr	r2, [pc, #596]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d016      	beq.n	80020b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7fe fee2 	bl	8000e4c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7fe fede 	bl	8000e4c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e162      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a2:	4b89      	ldr	r3, [pc, #548]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ed      	beq.n	800208c <HAL_RCC_OscConfig+0x53c>
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7fe fecb 	bl	8000e4c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fec7 	bl	8000e4c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e14b      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d0:	4b7d      	ldr	r3, [pc, #500]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1ed      	bne.n	80020ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020de:	7ffb      	ldrb	r3, [r7, #31]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d105      	bne.n	80020f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e4:	4b78      	ldr	r3, [pc, #480]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e8:	4a77      	ldr	r2, [pc, #476]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 80020ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d03c      	beq.n	8002176 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01c      	beq.n	800213e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002104:	4b70      	ldr	r3, [pc, #448]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002106:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800210a:	4a6f      	ldr	r2, [pc, #444]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe fe9a 	bl	8000e4c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211c:	f7fe fe96 	bl	8000e4c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e11c      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800212e:	4b66      	ldr	r3, [pc, #408]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002130:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ef      	beq.n	800211c <HAL_RCC_OscConfig+0x5cc>
 800213c:	e01b      	b.n	8002176 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800213e:	4b62      	ldr	r3, [pc, #392]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002140:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002144:	4a60      	ldr	r2, [pc, #384]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214e:	f7fe fe7d 	bl	8000e4c <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002156:	f7fe fe79 	bl	8000e4c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0ff      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002168:	4b57      	ldr	r3, [pc, #348]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 800216a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ef      	bne.n	8002156 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80f3 	beq.w	8002366 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002184:	2b02      	cmp	r3, #2
 8002186:	f040 80c9 	bne.w	800231c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800218a:	4b4f      	ldr	r3, [pc, #316]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 0203 	and.w	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	429a      	cmp	r2, r3
 800219c:	d12c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a8:	3b01      	subs	r3, #1
 80021aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d123      	bne.n	80021f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d11b      	bne.n	80021f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d113      	bne.n	80021f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	3b01      	subs	r3, #1
 80021de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d109      	bne.n	80021f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	3b01      	subs	r3, #1
 80021f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d06b      	beq.n	80022d0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d062      	beq.n	80022c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021fe:	4b32      	ldr	r3, [pc, #200]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0ac      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800220e:	4b2e      	ldr	r3, [pc, #184]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a2d      	ldr	r2, [pc, #180]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002214:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002218:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800221a:	f7fe fe17 	bl	8000e4c <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7fe fe13 	bl	8000e4c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e099      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002234:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f0      	bne.n	8002222 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002240:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	4b21      	ldr	r3, [pc, #132]	@ (80022cc <HAL_RCC_OscConfig+0x77c>)
 8002246:	4013      	ands	r3, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002250:	3a01      	subs	r2, #1
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	4311      	orrs	r1, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800225a:	0212      	lsls	r2, r2, #8
 800225c:	4311      	orrs	r1, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002262:	0852      	lsrs	r2, r2, #1
 8002264:	3a01      	subs	r2, #1
 8002266:	0552      	lsls	r2, r2, #21
 8002268:	4311      	orrs	r1, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800226e:	0852      	lsrs	r2, r2, #1
 8002270:	3a01      	subs	r2, #1
 8002272:	0652      	lsls	r2, r2, #25
 8002274:	4311      	orrs	r1, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800227a:	06d2      	lsls	r2, r2, #27
 800227c:	430a      	orrs	r2, r1
 800227e:	4912      	ldr	r1, [pc, #72]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002280:	4313      	orrs	r3, r2
 8002282:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002284:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 800228a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800228e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002290:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a0c      	ldr	r2, [pc, #48]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800229a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800229c:	f7fe fdd6 	bl	8000e4c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe fdd2 	bl	8000e4c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e058      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	4b04      	ldr	r3, [pc, #16]	@ (80022c8 <HAL_RCC_OscConfig+0x778>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c2:	e050      	b.n	8002366 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e04f      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
 80022c8:	40021000 	.word	0x40021000
 80022cc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d0:	4b27      	ldr	r3, [pc, #156]	@ (8002370 <HAL_RCC_OscConfig+0x820>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d144      	bne.n	8002366 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022dc:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <HAL_RCC_OscConfig+0x820>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a23      	ldr	r2, [pc, #140]	@ (8002370 <HAL_RCC_OscConfig+0x820>)
 80022e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e8:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <HAL_RCC_OscConfig+0x820>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a20      	ldr	r2, [pc, #128]	@ (8002370 <HAL_RCC_OscConfig+0x820>)
 80022ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022f4:	f7fe fdaa 	bl	8000e4c <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fc:	f7fe fda6 	bl	8000e4c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e02c      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230e:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <HAL_RCC_OscConfig+0x820>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x7ac>
 800231a:	e024      	b.n	8002366 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b0c      	cmp	r3, #12
 8002320:	d01f      	beq.n	8002362 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b13      	ldr	r3, [pc, #76]	@ (8002370 <HAL_RCC_OscConfig+0x820>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a12      	ldr	r2, [pc, #72]	@ (8002370 <HAL_RCC_OscConfig+0x820>)
 8002328:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800232c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7fe fd8d 	bl	8000e4c <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe fd89 	bl	8000e4c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e00f      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002348:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <HAL_RCC_OscConfig+0x820>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_RCC_OscConfig+0x820>)
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	4905      	ldr	r1, [pc, #20]	@ (8002370 <HAL_RCC_OscConfig+0x820>)
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_RCC_OscConfig+0x824>)
 800235c:	4013      	ands	r3, r2
 800235e:	60cb      	str	r3, [r1, #12]
 8002360:	e001      	b.n	8002366 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3720      	adds	r7, #32
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	feeefffc 	.word	0xfeeefffc

08002378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0e7      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b75      	ldr	r3, [pc, #468]	@ (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d910      	bls.n	80023bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b72      	ldr	r3, [pc, #456]	@ (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 0207 	bic.w	r2, r3, #7
 80023a2:	4970      	ldr	r1, [pc, #448]	@ (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0cf      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d010      	beq.n	80023ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	4b66      	ldr	r3, [pc, #408]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d908      	bls.n	80023ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b63      	ldr	r3, [pc, #396]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4960      	ldr	r1, [pc, #384]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d04c      	beq.n	8002490 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d121      	bne.n	800244e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0a6      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002416:	4b54      	ldr	r3, [pc, #336]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d115      	bne.n	800244e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e09a      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800242e:	4b4e      	ldr	r3, [pc, #312]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e08e      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800243e:	4b4a      	ldr	r3, [pc, #296]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e086      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b46      	ldr	r3, [pc, #280]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4943      	ldr	r1, [pc, #268]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002460:	f7fe fcf4 	bl	8000e4c <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe fcf0 	bl	8000e4c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e06e      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b3a      	ldr	r3, [pc, #232]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d010      	beq.n	80024be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	4b31      	ldr	r3, [pc, #196]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d208      	bcs.n	80024be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	492b      	ldr	r1, [pc, #172]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024be:	4b29      	ldr	r3, [pc, #164]	@ (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d210      	bcs.n	80024ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024cc:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 0207 	bic.w	r2, r3, #7
 80024d4:	4923      	ldr	r1, [pc, #140]	@ (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024dc:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <HAL_RCC_ClockConfig+0x1ec>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e036      	b.n	800255c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d008      	beq.n	800250c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	4918      	ldr	r1, [pc, #96]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002518:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4910      	ldr	r1, [pc, #64]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800252c:	f000 f824 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <HAL_RCC_ClockConfig+0x1f0>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	490b      	ldr	r1, [pc, #44]	@ (800256c <HAL_RCC_ClockConfig+0x1f4>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
 8002548:	4a09      	ldr	r2, [pc, #36]	@ (8002570 <HAL_RCC_ClockConfig+0x1f8>)
 800254a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800254c:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <HAL_RCC_ClockConfig+0x1fc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fc2b 	bl	8000dac <HAL_InitTick>
 8002556:	4603      	mov	r3, r0
 8002558:	72fb      	strb	r3, [r7, #11]

  return status;
 800255a:	7afb      	ldrb	r3, [r7, #11]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40022000 	.word	0x40022000
 8002568:	40021000 	.word	0x40021000
 800256c:	08012b20 	.word	0x08012b20
 8002570:	20000008 	.word	0x20000008
 8002574:	20000000 	.word	0x20000000

08002578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	@ 0x24
 800257c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002586:	4b3e      	ldr	r3, [pc, #248]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002590:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x34>
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d121      	bne.n	80025ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d11e      	bne.n	80025ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025ac:	4b34      	ldr	r3, [pc, #208]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025b8:	4b31      	ldr	r3, [pc, #196]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	e005      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10d      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025f0:	4b25      	ldr	r3, [pc, #148]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x110>)
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	e004      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025fc:	4b23      	ldr	r3, [pc, #140]	@ (800268c <HAL_RCC_GetSysClockFreq+0x114>)
 80025fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d134      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002606:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d003      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0xa6>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d003      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0xac>
 800261c:	e005      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x110>)
 8002620:	617b      	str	r3, [r7, #20]
      break;
 8002622:	e005      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002624:	4b19      	ldr	r3, [pc, #100]	@ (800268c <HAL_RCC_GetSysClockFreq+0x114>)
 8002626:	617b      	str	r3, [r7, #20]
      break;
 8002628:	e002      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	617b      	str	r3, [r7, #20]
      break;
 800262e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002630:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	3301      	adds	r3, #1
 800263c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800263e:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	0a1b      	lsrs	r3, r3, #8
 8002644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	fb03 f202 	mul.w	r2, r3, r2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002656:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x108>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	0e5b      	lsrs	r3, r3, #25
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	3301      	adds	r3, #1
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	fbb2 f3f3 	udiv	r3, r2, r3
 800266e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002670:	69bb      	ldr	r3, [r7, #24]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	@ 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	08012b38 	.word	0x08012b38
 8002688:	00f42400 	.word	0x00f42400
 800268c:	007a1200 	.word	0x007a1200

08002690 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002694:	4b03      	ldr	r3, [pc, #12]	@ (80026a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002696:	681b      	ldr	r3, [r3, #0]
}
 8002698:	4618      	mov	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000008 	.word	0x20000008

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026ac:	f7ff fff0 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4904      	ldr	r1, [pc, #16]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08012b30 	.word	0x08012b30

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026d8:	f7ff ffda 	bl	8002690 <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0adb      	lsrs	r3, r3, #11
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4904      	ldr	r1, [pc, #16]	@ (80026fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08012b30 	.word	0x08012b30

08002700 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800270c:	4b2a      	ldr	r3, [pc, #168]	@ (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800270e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002718:	f7ff f9b6 	bl	8001a88 <HAL_PWREx_GetVoltageRange>
 800271c:	6178      	str	r0, [r7, #20]
 800271e:	e014      	b.n	800274a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002720:	4b25      	ldr	r3, [pc, #148]	@ (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002724:	4a24      	ldr	r2, [pc, #144]	@ (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272a:	6593      	str	r3, [r2, #88]	@ 0x58
 800272c:	4b22      	ldr	r3, [pc, #136]	@ (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002738:	f7ff f9a6 	bl	8001a88 <HAL_PWREx_GetVoltageRange>
 800273c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800273e:	4b1e      	ldr	r3, [pc, #120]	@ (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	4a1d      	ldr	r2, [pc, #116]	@ (80027b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002748:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002750:	d10b      	bne.n	800276a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b80      	cmp	r3, #128	@ 0x80
 8002756:	d919      	bls.n	800278c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2ba0      	cmp	r3, #160	@ 0xa0
 800275c:	d902      	bls.n	8002764 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800275e:	2302      	movs	r3, #2
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	e013      	b.n	800278c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002764:	2301      	movs	r3, #1
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	e010      	b.n	800278c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b80      	cmp	r3, #128	@ 0x80
 800276e:	d902      	bls.n	8002776 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002770:	2303      	movs	r3, #3
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	e00a      	b.n	800278c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b80      	cmp	r3, #128	@ 0x80
 800277a:	d102      	bne.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800277c:	2302      	movs	r3, #2
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	e004      	b.n	800278c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b70      	cmp	r3, #112	@ 0x70
 8002786:	d101      	bne.n	800278c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002788:	2301      	movs	r3, #1
 800278a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 0207 	bic.w	r2, r3, #7
 8002794:	4909      	ldr	r1, [pc, #36]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800279c:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d001      	beq.n	80027ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40022000 	.word	0x40022000

080027c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c8:	2300      	movs	r3, #0
 80027ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027cc:	2300      	movs	r3, #0
 80027ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d031      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027e4:	d01a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80027e6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027ea:	d814      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027f4:	d10f      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80027f6:	4b5d      	ldr	r3, [pc, #372]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4a5c      	ldr	r2, [pc, #368]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002800:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002802:	e00c      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3304      	adds	r3, #4
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f9f0 	bl	8002bf0 <RCCEx_PLLSAI1_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002814:	e003      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	74fb      	strb	r3, [r7, #19]
      break;
 800281a:	e000      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800281c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002824:	4b51      	ldr	r3, [pc, #324]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	494e      	ldr	r1, [pc, #312]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800283a:	e001      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 809e 	beq.w	800298a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002852:	4b46      	ldr	r3, [pc, #280]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002862:	2300      	movs	r3, #0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00d      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002868:	4b40      	ldr	r3, [pc, #256]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286c:	4a3f      	ldr	r2, [pc, #252]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002872:	6593      	str	r3, [r2, #88]	@ 0x58
 8002874:	4b3d      	ldr	r3, [pc, #244]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002880:	2301      	movs	r3, #1
 8002882:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002884:	4b3a      	ldr	r3, [pc, #232]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a39      	ldr	r2, [pc, #228]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002890:	f7fe fadc 	bl	8000e4c <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002896:	e009      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7fe fad8 	bl	8000e4c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	74fb      	strb	r3, [r7, #19]
        break;
 80028aa:	e005      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028ac:	4b30      	ldr	r3, [pc, #192]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ef      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d15a      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028be:	4b2b      	ldr	r3, [pc, #172]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01e      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d019      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028da:	4b24      	ldr	r3, [pc, #144]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028e6:	4b21      	ldr	r3, [pc, #132]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ec:	4a1f      	ldr	r2, [pc, #124]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028f6:	4b1d      	ldr	r3, [pc, #116]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fc:	4a1b      	ldr	r2, [pc, #108]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002902:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002906:	4a19      	ldr	r2, [pc, #100]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d016      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fa98 	bl	8000e4c <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291e:	e00b      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002920:	f7fe fa94 	bl	8000e4c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d902      	bls.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	74fb      	strb	r3, [r7, #19]
            break;
 8002936:	e006      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002938:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800293a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0ec      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800294c:	4b07      	ldr	r3, [pc, #28]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002952:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	4904      	ldr	r1, [pc, #16]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002962:	e009      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	74bb      	strb	r3, [r7, #18]
 8002968:	e006      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002978:	7c7b      	ldrb	r3, [r7, #17]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d105      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297e:	4b9b      	ldr	r3, [pc, #620]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002982:	4a9a      	ldr	r2, [pc, #616]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002984:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002988:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002996:	4b95      	ldr	r3, [pc, #596]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299c:	f023 0203 	bic.w	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4991      	ldr	r1, [pc, #580]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029b8:	4b8c      	ldr	r3, [pc, #560]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029be:	f023 020c 	bic.w	r2, r3, #12
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	4989      	ldr	r1, [pc, #548]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029da:	4b84      	ldr	r3, [pc, #528]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	4980      	ldr	r1, [pc, #512]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029fc:	4b7b      	ldr	r3, [pc, #492]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0a:	4978      	ldr	r1, [pc, #480]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a1e:	4b73      	ldr	r3, [pc, #460]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2c:	496f      	ldr	r1, [pc, #444]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a40:	4b6a      	ldr	r3, [pc, #424]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	4967      	ldr	r1, [pc, #412]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a62:	4b62      	ldr	r3, [pc, #392]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a68:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	495e      	ldr	r1, [pc, #376]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a84:	4b59      	ldr	r3, [pc, #356]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a92:	4956      	ldr	r1, [pc, #344]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aa6:	4b51      	ldr	r3, [pc, #324]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	494d      	ldr	r1, [pc, #308]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d028      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ac8:	4b48      	ldr	r3, [pc, #288]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ace:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad6:	4945      	ldr	r1, [pc, #276]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae8:	4b40      	ldr	r3, [pc, #256]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a3f      	ldr	r2, [pc, #252]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002af2:	60d3      	str	r3, [r2, #12]
 8002af4:	e011      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002afe:	d10c      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	2101      	movs	r1, #1
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f872 	bl	8002bf0 <RCCEx_PLLSAI1_Config>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8002b16:	7cfb      	ldrb	r3, [r7, #19]
 8002b18:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d028      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b26:	4b31      	ldr	r3, [pc, #196]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b34:	492d      	ldr	r1, [pc, #180]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b44:	d106      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b46:	4b29      	ldr	r3, [pc, #164]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4a28      	ldr	r2, [pc, #160]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b50:	60d3      	str	r3, [r2, #12]
 8002b52:	e011      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f843 	bl	8002bf0 <RCCEx_PLLSAI1_Config>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b6e:	7cfb      	ldrb	r3, [r7, #19]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01c      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b84:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b92:	4916      	ldr	r1, [pc, #88]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ba2:	d10c      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	2102      	movs	r1, #2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f820 	bl	8002bf0 <RCCEx_PLLSAI1_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8002bba:	7cfb      	ldrb	r3, [r7, #19]
 8002bbc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bca:	4b08      	ldr	r3, [pc, #32]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd8:	4904      	ldr	r1, [pc, #16]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002be0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000

08002bf0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bfe:	4b74      	ldr	r3, [pc, #464]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d018      	beq.n	8002c3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c0a:	4b71      	ldr	r3, [pc, #452]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0203 	and.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d10d      	bne.n	8002c36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c22:	4b6b      	ldr	r3, [pc, #428]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
       ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d047      	beq.n	8002cc6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	e044      	b.n	8002cc6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d018      	beq.n	8002c76 <RCCEx_PLLSAI1_Config+0x86>
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d825      	bhi.n	8002c94 <RCCEx_PLLSAI1_Config+0xa4>
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d002      	beq.n	8002c52 <RCCEx_PLLSAI1_Config+0x62>
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d009      	beq.n	8002c64 <RCCEx_PLLSAI1_Config+0x74>
 8002c50:	e020      	b.n	8002c94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c52:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11d      	bne.n	8002c9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c62:	e01a      	b.n	8002c9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c64:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d116      	bne.n	8002c9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c74:	e013      	b.n	8002c9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c76:	4b56      	ldr	r3, [pc, #344]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10f      	bne.n	8002ca2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c82:	4b53      	ldr	r3, [pc, #332]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c92:	e006      	b.n	8002ca2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      break;
 8002c98:	e004      	b.n	8002ca4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e002      	b.n	8002ca4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e000      	b.n	8002ca4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ca2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10d      	bne.n	8002cc6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002caa:	4b49      	ldr	r3, [pc, #292]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6819      	ldr	r1, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	4943      	ldr	r1, [pc, #268]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d17c      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ccc:	4b40      	ldr	r3, [pc, #256]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a3f      	ldr	r2, [pc, #252]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd8:	f7fe f8b8 	bl	8000e4c <HAL_GetTick>
 8002cdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cde:	e009      	b.n	8002cf4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ce0:	f7fe f8b4 	bl	8000e4c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d902      	bls.n	8002cf4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	73fb      	strb	r3, [r7, #15]
        break;
 8002cf2:	e005      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cf4:	4b36      	ldr	r3, [pc, #216]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1ef      	bne.n	8002ce0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d15f      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d110      	bne.n	8002d2e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d0c:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002d14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6892      	ldr	r2, [r2, #8]
 8002d1c:	0211      	lsls	r1, r2, #8
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68d2      	ldr	r2, [r2, #12]
 8002d22:	06d2      	lsls	r2, r2, #27
 8002d24:	430a      	orrs	r2, r1
 8002d26:	492a      	ldr	r1, [pc, #168]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	610b      	str	r3, [r1, #16]
 8002d2c:	e027      	b.n	8002d7e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d112      	bne.n	8002d5a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d34:	4b26      	ldr	r3, [pc, #152]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6892      	ldr	r2, [r2, #8]
 8002d44:	0211      	lsls	r1, r2, #8
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6912      	ldr	r2, [r2, #16]
 8002d4a:	0852      	lsrs	r2, r2, #1
 8002d4c:	3a01      	subs	r2, #1
 8002d4e:	0552      	lsls	r2, r2, #21
 8002d50:	430a      	orrs	r2, r1
 8002d52:	491f      	ldr	r1, [pc, #124]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	610b      	str	r3, [r1, #16]
 8002d58:	e011      	b.n	8002d7e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d62:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6892      	ldr	r2, [r2, #8]
 8002d6a:	0211      	lsls	r1, r2, #8
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6952      	ldr	r2, [r2, #20]
 8002d70:	0852      	lsrs	r2, r2, #1
 8002d72:	3a01      	subs	r2, #1
 8002d74:	0652      	lsls	r2, r2, #25
 8002d76:	430a      	orrs	r2, r1
 8002d78:	4915      	ldr	r1, [pc, #84]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d7e:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a13      	ldr	r2, [pc, #76]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8a:	f7fe f85f 	bl	8000e4c <HAL_GetTick>
 8002d8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d90:	e009      	b.n	8002da6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d92:	f7fe f85b 	bl	8000e4c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d902      	bls.n	8002da6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	73fb      	strb	r3, [r7, #15]
          break;
 8002da4:	e005      	b.n	8002db2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002da6:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0ef      	beq.n	8002d92 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d106      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	4903      	ldr	r1, [pc, #12]	@ (8002dd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d079      	beq.n	8002eda <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d106      	bne.n	8002e00 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f003 ff08 	bl	8006c10 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d058      	beq.n	8002ec8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	22ca      	movs	r2, #202	@ 0xca
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2253      	movs	r2, #83	@ 0x53
 8002e24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fc64 	bl	80036f4 <RTC_EnterInitMode>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d127      	bne.n	8002e86 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e48:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68d2      	ldr	r2, [r2, #12]
 8002e70:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6919      	ldr	r1, [r3, #16]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	041a      	lsls	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fc68 	bl	800375c <RTC_ExitInitMode>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d113      	bne.n	8002ebe <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0203 	bic.w	r2, r2, #3
 8002ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	22ff      	movs	r2, #255	@ 0xff
 8002ec4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ec6:	e001      	b.n	8002ecc <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d103      	bne.n	8002eda <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_RTC_SetTime+0x1a>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e08b      	b.n	8003016 <HAL_RTC_SetTime+0x132>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	22ca      	movs	r2, #202	@ 0xca
 8002f14:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2253      	movs	r2, #83	@ 0x53
 8002f1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fbe8 	bl	80036f4 <RTC_EnterInitMode>
 8002f24:	4603      	mov	r3, r0
 8002f26:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d163      	bne.n	8002ff6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d126      	bne.n	8002f82 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fc43 	bl	80037d8 <RTC_ByteToBcd2>
 8002f52:	4603      	mov	r3, r0
 8002f54:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fc3c 	bl	80037d8 <RTC_ByteToBcd2>
 8002f60:	4603      	mov	r3, r0
 8002f62:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f64:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	789b      	ldrb	r3, [r3, #2]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fc34 	bl	80037d8 <RTC_ByteToBcd2>
 8002f70:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f72:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	78db      	ldrb	r3, [r3, #3]
 8002f7a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	e018      	b.n	8002fb4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d102      	bne.n	8002f96 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2200      	movs	r2, #0
 8002f94:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	785b      	ldrb	r3, [r3, #1]
 8002fa0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fa2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fa8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	78db      	ldrb	r3, [r3, #3]
 8002fae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002fbe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002fc2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6899      	ldr	r1, [r3, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fbb5 	bl	800375c <RTC_ExitInitMode>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	22ff      	movs	r2, #255	@ 0xff
 8002ffc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d103      	bne.n	800300c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003014:	7cfb      	ldrb	r3, [r7, #19]
}
 8003016:	4618      	mov	r0, r3
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd90      	pop	{r4, r7, pc}

0800301e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800304c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003050:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800305c:	b2da      	uxtb	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800306c:	b2da      	uxtb	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800307a:	b2da      	uxtb	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	0d9b      	lsrs	r3, r3, #22
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	b2da      	uxtb	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d11a      	bne.n	80030cc <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fbbc 	bl	8003818 <RTC_Bcd2ToByte>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	785b      	ldrb	r3, [r3, #1]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fbb3 	bl	8003818 <RTC_Bcd2ToByte>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	789b      	ldrb	r3, [r3, #2]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fbaa 	bl	8003818 <RTC_Bcd2ToByte>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030d6:	b590      	push	{r4, r7, lr}
 80030d8:	b087      	sub	sp, #28
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_RTC_SetDate+0x1a>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e075      	b.n	80031dc <HAL_RTC_SetDate+0x106>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10e      	bne.n	8003124 <HAL_RTC_SetDate+0x4e>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	785b      	ldrb	r3, [r3, #1]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	785b      	ldrb	r3, [r3, #1]
 8003116:	f023 0310 	bic.w	r3, r3, #16
 800311a:	b2db      	uxtb	r3, r3
 800311c:	330a      	adds	r3, #10
 800311e:	b2da      	uxtb	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d11c      	bne.n	8003164 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	78db      	ldrb	r3, [r3, #3]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fb52 	bl	80037d8 <RTC_ByteToBcd2>
 8003134:	4603      	mov	r3, r0
 8003136:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	785b      	ldrb	r3, [r3, #1]
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fb4b 	bl	80037d8 <RTC_ByteToBcd2>
 8003142:	4603      	mov	r3, r0
 8003144:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003146:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	789b      	ldrb	r3, [r3, #2]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fb43 	bl	80037d8 <RTC_ByteToBcd2>
 8003152:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003154:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	e00e      	b.n	8003182 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	78db      	ldrb	r3, [r3, #3]
 8003168:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003170:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003176:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	22ca      	movs	r2, #202	@ 0xca
 8003188:	625a      	str	r2, [r3, #36]	@ 0x24
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2253      	movs	r2, #83	@ 0x53
 8003190:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 faae 	bl	80036f4 <RTC_EnterInitMode>
 8003198:	4603      	mov	r3, r0
 800319a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10c      	bne.n	80031bc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80031b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fad2 	bl	800375c <RTC_ExitInitMode>
 80031b8:	4603      	mov	r3, r0
 80031ba:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	22ff      	movs	r2, #255	@ 0xff
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80031da:	7cfb      	ldrb	r3, [r7, #19]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd90      	pop	{r4, r7, pc}

080031e4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031fa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80031fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	0c1b      	lsrs	r3, r3, #16
 8003204:	b2da      	uxtb	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	0a1b      	lsrs	r3, r3, #8
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	b2da      	uxtb	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	0b5b      	lsrs	r3, r3, #13
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d11a      	bne.n	8003274 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	78db      	ldrb	r3, [r3, #3]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fae8 	bl	8003818 <RTC_Bcd2ToByte>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fadf 	bl	8003818 <RTC_Bcd2ToByte>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	789b      	ldrb	r3, [r3, #2]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fad6 	bl	8003818 <RTC_Bcd2ToByte>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b089      	sub	sp, #36	@ 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_RTC_SetAlarm_IT+0x1a>
 8003296:	2302      	movs	r3, #2
 8003298:	e127      	b.n	80034ea <HAL_RTC_SetAlarm_IT+0x26a>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d137      	bne.n	8003320 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2200      	movs	r2, #0
 80032c2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fa85 	bl	80037d8 <RTC_ByteToBcd2>
 80032ce:	4603      	mov	r3, r0
 80032d0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	785b      	ldrb	r3, [r3, #1]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fa7e 	bl	80037d8 <RTC_ByteToBcd2>
 80032dc:	4603      	mov	r3, r0
 80032de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80032e0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	789b      	ldrb	r3, [r3, #2]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fa76 	bl	80037d8 <RTC_ByteToBcd2>
 80032ec:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80032ee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	78db      	ldrb	r3, [r3, #3]
 80032f6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80032f8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fa68 	bl	80037d8 <RTC_ByteToBcd2>
 8003308:	4603      	mov	r3, r0
 800330a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800330c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003314:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800331a:	4313      	orrs	r3, r2
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	e023      	b.n	8003368 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2200      	movs	r2, #0
 8003332:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	785b      	ldrb	r3, [r3, #1]
 800333e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003340:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003346:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	78db      	ldrb	r3, [r3, #3]
 800334c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800334e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003356:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003358:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800335e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003364:	4313      	orrs	r3, r2
 8003366:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	22ca      	movs	r2, #202	@ 0xca
 800337a:	625a      	str	r2, [r3, #36]	@ 0x24
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2253      	movs	r2, #83	@ 0x53
 8003382:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800338c:	d14a      	bne.n	8003424 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800339c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80033ae:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80033b0:	f7fd fd4c 	bl	8000e4c <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80033b6:	e015      	b.n	80033e4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033b8:	f7fd fd48 	bl	8000e4c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033c6:	d90d      	bls.n	80033e4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	22ff      	movs	r2, #255	@ 0xff
 80033ce:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2203      	movs	r2, #3
 80033d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e082      	b.n	80034ea <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0e2      	beq.n	80033b8 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003410:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	e049      	b.n	80034b8 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003432:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003444:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8003446:	f7fd fd01 	bl	8000e4c <HAL_GetTick>
 800344a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800344c:	e015      	b.n	800347a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800344e:	f7fd fcfd 	bl	8000e4c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800345c:	d90d      	bls.n	800347a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	22ff      	movs	r2, #255	@ 0xff
 8003464:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2203      	movs	r2, #3
 800346a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e037      	b.n	80034ea <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0e2      	beq.n	800344e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034b6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80034b8:	4b0e      	ldr	r3, [pc, #56]	@ (80034f4 <HAL_RTC_SetAlarm_IT+0x274>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0d      	ldr	r2, [pc, #52]	@ (80034f4 <HAL_RTC_SetAlarm_IT+0x274>)
 80034be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034c2:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80034c4:	4b0b      	ldr	r3, [pc, #44]	@ (80034f4 <HAL_RTC_SetAlarm_IT+0x274>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a0a      	ldr	r2, [pc, #40]	@ (80034f4 <HAL_RTC_SetAlarm_IT+0x274>)
 80034ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034ce:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	22ff      	movs	r2, #255	@ 0xff
 80034d6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3724      	adds	r7, #36	@ 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd90      	pop	{r4, r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40010400 	.word	0x40010400

080034f8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_RTC_DeactivateAlarm+0x18>
 800350c:	2302      	movs	r3, #2
 800350e:	e083      	b.n	8003618 <HAL_RTC_DeactivateAlarm+0x120>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	22ca      	movs	r2, #202	@ 0xca
 8003526:	625a      	str	r2, [r3, #36]	@ 0x24
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2253      	movs	r2, #83	@ 0x53
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003536:	d131      	bne.n	800359c <HAL_RTC_DeactivateAlarm+0xa4>
    /* AlarmA */
#if defined (RTC_ALRMASSR_SSCLR)
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003546:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003556:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8003558:	f7fd fc78 	bl	8000e4c <HAL_GetTick>
 800355c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800355e:	e015      	b.n	800358c <HAL_RTC_DeactivateAlarm+0x94>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003560:	f7fd fc74 	bl	8000e4c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800356e:	d90d      	bls.n	800358c <HAL_RTC_DeactivateAlarm+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	22ff      	movs	r2, #255	@ 0xff
 8003576:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2203      	movs	r2, #3
 800357c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e045      	b.n	8003618 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0e2      	beq.n	8003560 <HAL_RTC_DeactivateAlarm+0x68>
 800359a:	e030      	b.n	80035fe <HAL_RTC_DeactivateAlarm+0x106>
    /* AlarmB */
#if defined (RTC_ALRMBSSR_SSCLR)
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80035aa:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ba:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80035bc:	f7fd fc46 	bl	8000e4c <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80035c2:	e015      	b.n	80035f0 <HAL_RTC_DeactivateAlarm+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035c4:	f7fd fc42 	bl	8000e4c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035d2:	d90d      	bls.n	80035f0 <HAL_RTC_DeactivateAlarm+0xf8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	22ff      	movs	r2, #255	@ 0xff
 80035da:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2203      	movs	r2, #3
 80035e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e013      	b.n	8003618 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0e2      	beq.n	80035c4 <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	22ff      	movs	r2, #255	@ 0xff
 8003604:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003628:	4b1f      	ldr	r3, [pc, #124]	@ (80036a8 <HAL_RTC_AlarmIRQHandler+0x88>)
 800362a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800362e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d012      	beq.n	8003664 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800365c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f002 feb0 	bl	80063c4 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d012      	beq.n	8003698 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00b      	beq.n	8003698 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003690:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f9f2 	bl	8003a7c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40010400 	.word	0x40010400

080036ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a0d      	ldr	r2, [pc, #52]	@ (80036f0 <HAL_RTC_WaitForSynchro+0x44>)
 80036ba:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80036bc:	f7fd fbc6 	bl	8000e4c <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036c2:	e009      	b.n	80036d8 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036c4:	f7fd fbc2 	bl	8000e4c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036d2:	d901      	bls.n	80036d8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e007      	b.n	80036e8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ee      	beq.n	80036c4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	0003ff5f 	.word	0x0003ff5f

080036f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d120      	bne.n	8003750 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f04f 32ff 	mov.w	r2, #4294967295
 8003716:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003718:	f7fd fb98 	bl	8000e4c <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800371e:	e00d      	b.n	800373c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003720:	f7fd fb94 	bl	8000e4c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800372e:	d905      	bls.n	800373c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2203      	movs	r2, #3
 8003738:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <RTC_EnterInitMode+0x5c>
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d1e7      	bne.n	8003720 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003768:	4b1a      	ldr	r3, [pc, #104]	@ (80037d4 <RTC_ExitInitMode+0x78>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a19      	ldr	r2, [pc, #100]	@ (80037d4 <RTC_ExitInitMode+0x78>)
 800376e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003772:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003774:	4b17      	ldr	r3, [pc, #92]	@ (80037d4 <RTC_ExitInitMode+0x78>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10c      	bne.n	800379a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff ff93 	bl	80036ac <HAL_RTC_WaitForSynchro>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01e      	beq.n	80037ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2203      	movs	r2, #3
 8003790:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	73fb      	strb	r3, [r7, #15]
 8003798:	e017      	b.n	80037ca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800379a:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <RTC_ExitInitMode+0x78>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	4a0d      	ldr	r2, [pc, #52]	@ (80037d4 <RTC_ExitInitMode+0x78>)
 80037a0:	f023 0320 	bic.w	r3, r3, #32
 80037a4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ff80 	bl	80036ac <HAL_RTC_WaitForSynchro>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2203      	movs	r2, #3
 80037b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80037be:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <RTC_ExitInitMode+0x78>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	4a04      	ldr	r2, [pc, #16]	@ (80037d4 <RTC_ExitInitMode+0x78>)
 80037c4:	f043 0320 	orr.w	r3, r3, #32
 80037c8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40002800 	.word	0x40002800

080037d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80037ea:	e005      	b.n	80037f8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3301      	adds	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80037f2:	7afb      	ldrb	r3, [r7, #11]
 80037f4:	3b0a      	subs	r3, #10
 80037f6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80037f8:	7afb      	ldrb	r3, [r7, #11]
 80037fa:	2b09      	cmp	r3, #9
 80037fc:	d8f6      	bhi.n	80037ec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	b2da      	uxtb	r2, r3
 8003806:	7afb      	ldrb	r3, [r7, #11]
 8003808:	4313      	orrs	r3, r2
 800380a:	b2db      	uxtb	r3, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	b2db      	uxtb	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	0092      	lsls	r2, r2, #2
 800382c:	4413      	add	r3, r2
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	b2da      	uxtb	r2, r3
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	4413      	add	r3, r2
 800383e:	b2db      	uxtb	r3, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003862:	2302      	movs	r3, #2
 8003864:	e07f      	b.n	8003966 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	22ca      	movs	r2, #202	@ 0xca
 800387c:	625a      	str	r2, [r3, #36]	@ 0x24
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2253      	movs	r2, #83	@ 0x53
 8003884:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003894:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80038a6:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d120      	bne.n	80038f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80038b6:	f7fd fac9 	bl	8000e4c <HAL_GetTick>
 80038ba:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80038bc:	e015      	b.n	80038ea <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038be:	f7fd fac5 	bl	8000e4c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038cc:	d90d      	bls.n	80038ea <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	22ff      	movs	r2, #255	@ 0xff
 80038d4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2203      	movs	r2, #3
 80038da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e03d      	b.n	8003966 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0e2      	beq.n	80038be <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 0107 	bic.w	r1, r3, #7
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	430a      	orrs	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003914:	4b16      	ldr	r3, [pc, #88]	@ (8003970 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a15      	ldr	r2, [pc, #84]	@ (8003970 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800391a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800391e:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003920:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4a12      	ldr	r2, [pc, #72]	@ (8003970 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800392a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800393a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800394a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	22ff      	movs	r2, #255	@ 0xff
 8003952:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40010400 	.word	0x40010400

08003974 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8003986:	2302      	movs	r3, #2
 8003988:	e04d      	b.n	8003a26 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	22ca      	movs	r2, #202	@ 0xca
 80039a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2253      	movs	r2, #83	@ 0x53
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b8:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039c8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80039ca:	f7fd fa3f 	bl	8000e4c <HAL_GetTick>
 80039ce:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80039d0:	e015      	b.n	80039fe <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039d2:	f7fd fa3b 	bl	8000e4c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039e0:	d90d      	bls.n	80039fe <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	22ff      	movs	r2, #255	@ 0xff
 80039e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2203      	movs	r2, #3
 80039ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e013      	b.n	8003a26 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0e2      	beq.n	80039d2 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	22ff      	movs	r2, #255	@ 0xff
 8003a12:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003a38:	4b0f      	ldr	r3, [pc, #60]	@ (8003a78 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003a3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a3e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003a5e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f002 fcbf 	bl	80063e4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40010400 	.word	0x40010400

08003a7c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e095      	b.n	8003bce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d108      	bne.n	8003abc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ab2:	d009      	beq.n	8003ac8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	61da      	str	r2, [r3, #28]
 8003aba:	e005      	b.n	8003ac8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f003 f8d4 	bl	8006c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003afe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b08:	d902      	bls.n	8003b10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	e002      	b.n	8003b16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b1e:	d007      	beq.n	8003b30 <HAL_SPI_Init+0xa0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b28:	d002      	beq.n	8003b30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b72:	ea42 0103 	orr.w	r1, r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	0c1b      	lsrs	r3, r3, #16
 8003b8c:	f003 0204 	and.w	r2, r3, #4
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003bac:	ea42 0103 	orr.w	r1, r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b08a      	sub	sp, #40	@ 0x28
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
 8003be2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003be4:	2301      	movs	r3, #1
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be8:	f7fd f930 	bl	8000e4c <HAL_GetTick>
 8003bec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bf4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003c00:	887b      	ldrh	r3, [r7, #2]
 8003c02:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c04:	7ffb      	ldrb	r3, [r7, #31]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d00c      	beq.n	8003c24 <HAL_SPI_TransmitReceive+0x4e>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c10:	d106      	bne.n	8003c20 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <HAL_SPI_TransmitReceive+0x4a>
 8003c1a:	7ffb      	ldrb	r3, [r7, #31]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d001      	beq.n	8003c24 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
 8003c22:	e1f3      	b.n	800400c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_SPI_TransmitReceive+0x60>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_SPI_TransmitReceive+0x60>
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e1e8      	b.n	800400c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_SPI_TransmitReceive+0x72>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e1e1      	b.n	800400c <HAL_SPI_TransmitReceive+0x436>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d003      	beq.n	8003c64 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2205      	movs	r2, #5
 8003c60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	887a      	ldrh	r2, [r7, #2]
 8003c74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	887a      	ldrh	r2, [r7, #2]
 8003c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ca6:	d802      	bhi.n	8003cae <HAL_SPI_TransmitReceive+0xd8>
 8003ca8:	8abb      	ldrh	r3, [r7, #20]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d908      	bls.n	8003cc0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	e007      	b.n	8003cd0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cda:	2b40      	cmp	r3, #64	@ 0x40
 8003cdc:	d007      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cf6:	f240 8083 	bls.w	8003e00 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x132>
 8003d02:	8afb      	ldrh	r3, [r7, #22]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d16f      	bne.n	8003de8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0c:	881a      	ldrh	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d18:	1c9a      	adds	r2, r3, #2
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d2c:	e05c      	b.n	8003de8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d11b      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x19e>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <HAL_SPI_TransmitReceive+0x19e>
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d113      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	881a      	ldrh	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5c:	1c9a      	adds	r2, r3, #2
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d11c      	bne.n	8003dbc <HAL_SPI_TransmitReceive+0x1e6>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	b292      	uxth	r2, r2
 8003d9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	1c9a      	adds	r2, r3, #2
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003db8:	2301      	movs	r3, #1
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dbc:	f7fd f846 	bl	8000e4c <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d80d      	bhi.n	8003de8 <HAL_SPI_TransmitReceive+0x212>
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d009      	beq.n	8003de8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e111      	b.n	800400c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d19d      	bne.n	8003d2e <HAL_SPI_TransmitReceive+0x158>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d197      	bne.n	8003d2e <HAL_SPI_TransmitReceive+0x158>
 8003dfe:	e0e5      	b.n	8003fcc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_SPI_TransmitReceive+0x23a>
 8003e08:	8afb      	ldrh	r3, [r7, #22]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	f040 80d1 	bne.w	8003fb2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d912      	bls.n	8003e40 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1e:	881a      	ldrh	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2a:	1c9a      	adds	r2, r3, #2
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b02      	subs	r3, #2
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e3e:	e0b8      	b.n	8003fb2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	7812      	ldrb	r2, [r2, #0]
 8003e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e66:	e0a4      	b.n	8003fb2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d134      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x30a>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d02f      	beq.n	8003ee0 <HAL_SPI_TransmitReceive+0x30a>
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d12c      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d912      	bls.n	8003eb6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e94:	881a      	ldrh	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea0:	1c9a      	adds	r2, r3, #2
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b02      	subs	r3, #2
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003eb4:	e012      	b.n	8003edc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	7812      	ldrb	r2, [r2, #0]
 8003ec2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d148      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x3aa>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d042      	beq.n	8003f80 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d923      	bls.n	8003f4e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f10:	b292      	uxth	r2, r2
 8003f12:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f18:	1c9a      	adds	r2, r3, #2
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b02      	subs	r3, #2
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d81f      	bhi.n	8003f7c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f4a:	605a      	str	r2, [r3, #4]
 8003f4c:	e016      	b.n	8003f7c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f103 020c 	add.w	r2, r3, #12
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	7812      	ldrb	r2, [r2, #0]
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f80:	f7fc ff64 	bl	8000e4c <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d803      	bhi.n	8003f98 <HAL_SPI_TransmitReceive+0x3c2>
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d102      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x3c8>
 8003f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e02c      	b.n	800400c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f47f af55 	bne.w	8003e68 <HAL_SPI_TransmitReceive+0x292>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f47f af4e 	bne.w	8003e68 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fcc:	6a3a      	ldr	r2, [r7, #32]
 8003fce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f93d 	bl	8004250 <SPI_EndRxTxTransaction>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00e      	b.n	800400c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800400a:	2300      	movs	r3, #0
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3728      	adds	r7, #40	@ 0x28
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004024:	f7fc ff12 	bl	8000e4c <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	4413      	add	r3, r2
 8004032:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004034:	f7fc ff0a 	bl	8000e4c <HAL_GetTick>
 8004038:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800403a:	4b39      	ldr	r3, [pc, #228]	@ (8004120 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	015b      	lsls	r3, r3, #5
 8004040:	0d1b      	lsrs	r3, r3, #20
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800404a:	e054      	b.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d050      	beq.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004054:	f7fc fefa 	bl	8000e4c <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	429a      	cmp	r2, r3
 8004062:	d902      	bls.n	800406a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d13d      	bne.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004078:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004082:	d111      	bne.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800408c:	d004      	beq.n	8004098 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004096:	d107      	bne.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040b0:	d10f      	bne.n	80040d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e017      	b.n	8004116 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	429a      	cmp	r2, r3
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	429a      	cmp	r2, r3
 8004112:	d19b      	bne.n	800404c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000008 	.word	0x20000008

08004124 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08a      	sub	sp, #40	@ 0x28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004136:	f7fc fe89 	bl	8000e4c <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	4413      	add	r3, r2
 8004144:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004146:	f7fc fe81 	bl	8000e4c <HAL_GetTick>
 800414a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004154:	4b3d      	ldr	r3, [pc, #244]	@ (800424c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	00da      	lsls	r2, r3, #3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	0d1b      	lsrs	r3, r3, #20
 8004164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004166:	fb02 f303 	mul.w	r3, r2, r3
 800416a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800416c:	e060      	b.n	8004230 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004174:	d107      	bne.n	8004186 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004184:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d050      	beq.n	8004230 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800418e:	f7fc fe5d 	bl	8000e4c <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419a:	429a      	cmp	r2, r3
 800419c:	d902      	bls.n	80041a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d13d      	bne.n	8004220 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80041b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041bc:	d111      	bne.n	80041e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041c6:	d004      	beq.n	80041d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041d0:	d107      	bne.n	80041e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ea:	d10f      	bne.n	800420c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800420a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e010      	b.n	8004242 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	3b01      	subs	r3, #1
 800422e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4013      	ands	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	429a      	cmp	r2, r3
 800423e:	d196      	bne.n	800416e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3728      	adds	r7, #40	@ 0x28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000008 	.word	0x20000008

08004250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2200      	movs	r2, #0
 8004264:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff ff5b 	bl	8004124 <SPI_WaitFifoStateUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e027      	b.n	80042d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2200      	movs	r2, #0
 800428c:	2180      	movs	r1, #128	@ 0x80
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7ff fec0 	bl	8004014 <SPI_WaitFlagStateUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e014      	b.n	80042d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7ff ff34 	bl	8004124 <SPI_WaitFifoStateUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c6:	f043 0220 	orr.w	r2, r3, #32
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e000      	b.n	80042d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e040      	b.n	8004370 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f002 fd66 	bl	8006dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2224      	movs	r2, #36	@ 0x24
 8004308:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0201 	bic.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fe32 	bl	8004f8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fbd5 	bl	8004ad8 <UART_SetConfig>
 800432e:	4603      	mov	r3, r0
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e01b      	b.n	8004370 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004346:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004356:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 feb1 	bl	80050d0 <UART_CheckIdleState>
 800436e:	4603      	mov	r3, r0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	@ 0x28
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800438c:	2b20      	cmp	r3, #32
 800438e:	d177      	bne.n	8004480 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_UART_Transmit+0x24>
 8004396:	88fb      	ldrh	r3, [r7, #6]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e070      	b.n	8004482 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2221      	movs	r2, #33	@ 0x21
 80043ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ae:	f7fc fd4d 	bl	8000e4c <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	88fa      	ldrh	r2, [r7, #6]
 80043b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043cc:	d108      	bne.n	80043e0 <HAL_UART_Transmit+0x68>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d104      	bne.n	80043e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	e003      	b.n	80043e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043e8:	e02f      	b.n	800444a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2180      	movs	r1, #128	@ 0x80
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 ff13 	bl	8005220 <UART_WaitOnFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e03b      	b.n	8004482 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800441c:	b292      	uxth	r2, r2
 800441e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	3302      	adds	r3, #2
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	e007      	b.n	8004438 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	781a      	ldrb	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	3301      	adds	r3, #1
 8004436:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1c9      	bne.n	80043ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2200      	movs	r2, #0
 800445e:	2140      	movs	r1, #64	@ 0x40
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fedd 	bl	8005220 <UART_WaitOnFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d004      	beq.n	8004476 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e005      	b.n	8004482 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b0ba      	sub	sp, #232	@ 0xe8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80044b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80044ba:	4013      	ands	r3, r2
 80044bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80044c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d115      	bne.n	80044f4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00f      	beq.n	80044f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 82ca 	beq.w	8004a7e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
      }
      return;
 80044f2:	e2c4      	b.n	8004a7e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80044f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8117 	beq.w	800472c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800450a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800450e:	4b85      	ldr	r3, [pc, #532]	@ (8004724 <HAL_UART_IRQHandler+0x298>)
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 810a 	beq.w	800472c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d011      	beq.n	8004548 <HAL_UART_IRQHandler+0xbc>
 8004524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800453e:	f043 0201 	orr.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d011      	beq.n	8004578 <HAL_UART_IRQHandler+0xec>
 8004554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2202      	movs	r2, #2
 8004566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456e:	f043 0204 	orr.w	r2, r3, #4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d011      	beq.n	80045a8 <HAL_UART_IRQHandler+0x11c>
 8004584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2204      	movs	r2, #4
 8004596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800459e:	f043 0202 	orr.w	r2, r3, #2
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d017      	beq.n	80045e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2208      	movs	r2, #8
 80045d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045da:	f043 0208 	orr.w	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d012      	beq.n	8004616 <HAL_UART_IRQHandler+0x18a>
 80045f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00c      	beq.n	8004616 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8230 	beq.w	8004a82 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800462e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004650:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465e:	2b40      	cmp	r3, #64	@ 0x40
 8004660:	d005      	beq.n	800466e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004666:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800466a:	2b00      	cmp	r3, #0
 800466c:	d04f      	beq.n	800470e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fe43 	bl	80052fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467e:	2b40      	cmp	r3, #64	@ 0x40
 8004680:	d141      	bne.n	8004706 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3308      	adds	r3, #8
 8004688:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004698:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800469c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3308      	adds	r3, #8
 80046aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1d9      	bne.n	8004682 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d013      	beq.n	80046fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046da:	4a13      	ldr	r2, [pc, #76]	@ (8004728 <HAL_UART_IRQHandler+0x29c>)
 80046dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fc fdc6 	bl	8001274 <HAL_DMA_Abort_IT>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d017      	beq.n	800471e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046f8:	4610      	mov	r0, r2
 80046fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	e00f      	b.n	800471e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f9d4 	bl	8004aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004704:	e00b      	b.n	800471e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f9d0 	bl	8004aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	e007      	b.n	800471e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f9cc 	bl	8004aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800471c:	e1b1      	b.n	8004a82 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471e:	bf00      	nop
    return;
 8004720:	e1af      	b.n	8004a82 <HAL_UART_IRQHandler+0x5f6>
 8004722:	bf00      	nop
 8004724:	04000120 	.word	0x04000120
 8004728:	080053c3 	.word	0x080053c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004730:	2b01      	cmp	r3, #1
 8004732:	f040 816a 	bne.w	8004a0a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8163 	beq.w	8004a0a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 815c 	beq.w	8004a0a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2210      	movs	r2, #16
 8004758:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004764:	2b40      	cmp	r3, #64	@ 0x40
 8004766:	f040 80d4 	bne.w	8004912 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004776:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80ad 	beq.w	80048da <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800478a:	429a      	cmp	r2, r3
 800478c:	f080 80a5 	bcs.w	80048da <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004796:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f040 8086 	bne.w	80048b8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1da      	bne.n	80047ac <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3308      	adds	r3, #8
 80047fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004806:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3308      	adds	r3, #8
 8004816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800481a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800481e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004822:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800482c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e1      	bne.n	80047f6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3308      	adds	r3, #8
 8004838:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004848:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004856:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004858:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800485c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e3      	bne.n	8004832 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004888:	f023 0310 	bic.w	r3, r3, #16
 800488c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800489a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800489c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e4      	bne.n	8004878 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc fca0 	bl	80011f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8f4 	bl	8004ac0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80048d8:	e0d5      	b.n	8004a86 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80048e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048e4:	429a      	cmp	r2, r3
 80048e6:	f040 80ce 	bne.w	8004a86 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	f040 80c5 	bne.w	8004a86 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8d8 	bl	8004ac0 <HAL_UARTEx_RxEventCallback>
      return;
 8004910:	e0b9      	b.n	8004a86 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800491e:	b29b      	uxth	r3, r3
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80ab 	beq.w	8004a8a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80a6 	beq.w	8004a8a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800494c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800494e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004952:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004960:	647b      	str	r3, [r7, #68]	@ 0x44
 8004962:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800496e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e4      	bne.n	800493e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	623b      	str	r3, [r7, #32]
   return(result);
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004998:	633a      	str	r2, [r7, #48]	@ 0x30
 800499a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800499e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e3      	bne.n	8004974 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f023 0310 	bic.w	r3, r3, #16
 80049d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	69b9      	ldr	r1, [r7, #24]
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	617b      	str	r3, [r7, #20]
   return(result);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e4      	bne.n	80049c0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f85c 	bl	8004ac0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a08:	e03f      	b.n	8004a8a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00e      	beq.n	8004a34 <HAL_UART_IRQHandler+0x5a8>
 8004a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fd08 	bl	8005442 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a32:	e02d      	b.n	8004a90 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00e      	beq.n	8004a5e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01c      	beq.n	8004a8e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	4798      	blx	r3
    }
    return;
 8004a5c:	e017      	b.n	8004a8e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d012      	beq.n	8004a90 <HAL_UART_IRQHandler+0x604>
 8004a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00c      	beq.n	8004a90 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fcb9 	bl	80053ee <UART_EndTransmit_IT>
    return;
 8004a7c:	e008      	b.n	8004a90 <HAL_UART_IRQHandler+0x604>
      return;
 8004a7e:	bf00      	nop
 8004a80:	e006      	b.n	8004a90 <HAL_UART_IRQHandler+0x604>
    return;
 8004a82:	bf00      	nop
 8004a84:	e004      	b.n	8004a90 <HAL_UART_IRQHandler+0x604>
      return;
 8004a86:	bf00      	nop
 8004a88:	e002      	b.n	8004a90 <HAL_UART_IRQHandler+0x604>
      return;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <HAL_UART_IRQHandler+0x604>
    return;
 8004a8e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a90:	37e8      	adds	r7, #232	@ 0xe8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop

08004a98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b08a      	sub	sp, #40	@ 0x28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4b9e      	ldr	r3, [pc, #632]	@ (8004d80 <UART_SetConfig+0x2a8>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a93      	ldr	r2, [pc, #588]	@ (8004d84 <UART_SetConfig+0x2ac>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b40:	4313      	orrs	r3, r2
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b54:	430a      	orrs	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a8a      	ldr	r2, [pc, #552]	@ (8004d88 <UART_SetConfig+0x2b0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d126      	bne.n	8004bb0 <UART_SetConfig+0xd8>
 8004b62:	4b8a      	ldr	r3, [pc, #552]	@ (8004d8c <UART_SetConfig+0x2b4>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d81b      	bhi.n	8004ba8 <UART_SetConfig+0xd0>
 8004b70:	a201      	add	r2, pc, #4	@ (adr r2, 8004b78 <UART_SetConfig+0xa0>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004b89 	.word	0x08004b89
 8004b7c:	08004b99 	.word	0x08004b99
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004ba1 	.word	0x08004ba1
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8e:	e0ab      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004b90:	2302      	movs	r3, #2
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b96:	e0a7      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9e:	e0a3      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba6:	e09f      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bae:	e09b      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a76      	ldr	r2, [pc, #472]	@ (8004d90 <UART_SetConfig+0x2b8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d138      	bne.n	8004c2c <UART_SetConfig+0x154>
 8004bba:	4b74      	ldr	r3, [pc, #464]	@ (8004d8c <UART_SetConfig+0x2b4>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d82d      	bhi.n	8004c24 <UART_SetConfig+0x14c>
 8004bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd0 <UART_SetConfig+0xf8>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004c05 	.word	0x08004c05
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	08004c25 	.word	0x08004c25
 8004bdc:	08004c25 	.word	0x08004c25
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c25 	.word	0x08004c25
 8004be8:	08004c25 	.word	0x08004c25
 8004bec:	08004c25 	.word	0x08004c25
 8004bf0:	08004c0d 	.word	0x08004c0d
 8004bf4:	08004c25 	.word	0x08004c25
 8004bf8:	08004c25 	.word	0x08004c25
 8004bfc:	08004c25 	.word	0x08004c25
 8004c00:	08004c1d 	.word	0x08004c1d
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0a:	e06d      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c12:	e069      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c14:	2304      	movs	r3, #4
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1a:	e065      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c22:	e061      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c24:	2310      	movs	r3, #16
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2a:	e05d      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a58      	ldr	r2, [pc, #352]	@ (8004d94 <UART_SetConfig+0x2bc>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d125      	bne.n	8004c82 <UART_SetConfig+0x1aa>
 8004c36:	4b55      	ldr	r3, [pc, #340]	@ (8004d8c <UART_SetConfig+0x2b4>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c40:	2b30      	cmp	r3, #48	@ 0x30
 8004c42:	d016      	beq.n	8004c72 <UART_SetConfig+0x19a>
 8004c44:	2b30      	cmp	r3, #48	@ 0x30
 8004c46:	d818      	bhi.n	8004c7a <UART_SetConfig+0x1a2>
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d00a      	beq.n	8004c62 <UART_SetConfig+0x18a>
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d814      	bhi.n	8004c7a <UART_SetConfig+0x1a2>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <UART_SetConfig+0x182>
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d008      	beq.n	8004c6a <UART_SetConfig+0x192>
 8004c58:	e00f      	b.n	8004c7a <UART_SetConfig+0x1a2>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c60:	e042      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c62:	2302      	movs	r3, #2
 8004c64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c68:	e03e      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c70:	e03a      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c72:	2308      	movs	r3, #8
 8004c74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c78:	e036      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c80:	e032      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a3f      	ldr	r2, [pc, #252]	@ (8004d84 <UART_SetConfig+0x2ac>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d12a      	bne.n	8004ce2 <UART_SetConfig+0x20a>
 8004c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8004d8c <UART_SetConfig+0x2b4>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c9a:	d01a      	beq.n	8004cd2 <UART_SetConfig+0x1fa>
 8004c9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ca0:	d81b      	bhi.n	8004cda <UART_SetConfig+0x202>
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca6:	d00c      	beq.n	8004cc2 <UART_SetConfig+0x1ea>
 8004ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cac:	d815      	bhi.n	8004cda <UART_SetConfig+0x202>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <UART_SetConfig+0x1e2>
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb6:	d008      	beq.n	8004cca <UART_SetConfig+0x1f2>
 8004cb8:	e00f      	b.n	8004cda <UART_SetConfig+0x202>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc0:	e012      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc8:	e00e      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cca:	2304      	movs	r3, #4
 8004ccc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd0:	e00a      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd8:	e006      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cda:	2310      	movs	r3, #16
 8004cdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ce0:	e002      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004ce2:	2310      	movs	r3, #16
 8004ce4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a25      	ldr	r2, [pc, #148]	@ (8004d84 <UART_SetConfig+0x2ac>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	f040 808a 	bne.w	8004e08 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d824      	bhi.n	8004d46 <UART_SetConfig+0x26e>
 8004cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004d04 <UART_SetConfig+0x22c>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d47 	.word	0x08004d47
 8004d0c:	08004d31 	.word	0x08004d31
 8004d10:	08004d47 	.word	0x08004d47
 8004d14:	08004d37 	.word	0x08004d37
 8004d18:	08004d47 	.word	0x08004d47
 8004d1c:	08004d47 	.word	0x08004d47
 8004d20:	08004d47 	.word	0x08004d47
 8004d24:	08004d3f 	.word	0x08004d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d28:	f7fd fcbe 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8004d2c:	61f8      	str	r0, [r7, #28]
        break;
 8004d2e:	e010      	b.n	8004d52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d30:	4b19      	ldr	r3, [pc, #100]	@ (8004d98 <UART_SetConfig+0x2c0>)
 8004d32:	61fb      	str	r3, [r7, #28]
        break;
 8004d34:	e00d      	b.n	8004d52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d36:	f7fd fc1f 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8004d3a:	61f8      	str	r0, [r7, #28]
        break;
 8004d3c:	e009      	b.n	8004d52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d42:	61fb      	str	r3, [r7, #28]
        break;
 8004d44:	e005      	b.n	8004d52 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8109 	beq.w	8004f6c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	4413      	add	r3, r2
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d305      	bcc.n	8004d76 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d912      	bls.n	8004d9c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d7c:	e0f6      	b.n	8004f6c <UART_SetConfig+0x494>
 8004d7e:	bf00      	nop
 8004d80:	efff69f3 	.word	0xefff69f3
 8004d84:	40008000 	.word	0x40008000
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40004400 	.word	0x40004400
 8004d94:	40004800 	.word	0x40004800
 8004d98:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	461c      	mov	r4, r3
 8004da2:	4615      	mov	r5, r2
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	022b      	lsls	r3, r5, #8
 8004dae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004db2:	0222      	lsls	r2, r4, #8
 8004db4:	68f9      	ldr	r1, [r7, #12]
 8004db6:	6849      	ldr	r1, [r1, #4]
 8004db8:	0849      	lsrs	r1, r1, #1
 8004dba:	2000      	movs	r0, #0
 8004dbc:	4688      	mov	r8, r1
 8004dbe:	4681      	mov	r9, r0
 8004dc0:	eb12 0a08 	adds.w	sl, r2, r8
 8004dc4:	eb43 0b09 	adc.w	fp, r3, r9
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	607a      	str	r2, [r7, #4]
 8004dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd6:	4650      	mov	r0, sl
 8004dd8:	4659      	mov	r1, fp
 8004dda:	f7fb fe37 	bl	8000a4c <__aeabi_uldivmod>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4613      	mov	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dec:	d308      	bcc.n	8004e00 <UART_SetConfig+0x328>
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004df4:	d204      	bcs.n	8004e00 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	e0b5      	b.n	8004f6c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e06:	e0b1      	b.n	8004f6c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e10:	d15d      	bne.n	8004ece <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004e12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d827      	bhi.n	8004e6a <UART_SetConfig+0x392>
 8004e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e20 <UART_SetConfig+0x348>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e4d 	.word	0x08004e4d
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	08004e6b 	.word	0x08004e6b
 8004e30:	08004e5b 	.word	0x08004e5b
 8004e34:	08004e6b 	.word	0x08004e6b
 8004e38:	08004e6b 	.word	0x08004e6b
 8004e3c:	08004e6b 	.word	0x08004e6b
 8004e40:	08004e63 	.word	0x08004e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e44:	f7fd fc30 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8004e48:	61f8      	str	r0, [r7, #28]
        break;
 8004e4a:	e014      	b.n	8004e76 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e4c:	f7fd fc42 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8004e50:	61f8      	str	r0, [r7, #28]
        break;
 8004e52:	e010      	b.n	8004e76 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e54:	4b4c      	ldr	r3, [pc, #304]	@ (8004f88 <UART_SetConfig+0x4b0>)
 8004e56:	61fb      	str	r3, [r7, #28]
        break;
 8004e58:	e00d      	b.n	8004e76 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e5a:	f7fd fb8d 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8004e5e:	61f8      	str	r0, [r7, #28]
        break;
 8004e60:	e009      	b.n	8004e76 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e66:	61fb      	str	r3, [r7, #28]
        break;
 8004e68:	e005      	b.n	8004e76 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d077      	beq.n	8004f6c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	005a      	lsls	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	441a      	add	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b0f      	cmp	r3, #15
 8004e96:	d916      	bls.n	8004ec6 <UART_SetConfig+0x3ee>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e9e:	d212      	bcs.n	8004ec6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f023 030f 	bic.w	r3, r3, #15
 8004ea8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	085b      	lsrs	r3, r3, #1
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	8afb      	ldrh	r3, [r7, #22]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	8afa      	ldrh	r2, [r7, #22]
 8004ec2:	60da      	str	r2, [r3, #12]
 8004ec4:	e052      	b.n	8004f6c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ecc:	e04e      	b.n	8004f6c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ece:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d827      	bhi.n	8004f26 <UART_SetConfig+0x44e>
 8004ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <UART_SetConfig+0x404>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004f01 	.word	0x08004f01
 8004ee0:	08004f09 	.word	0x08004f09
 8004ee4:	08004f11 	.word	0x08004f11
 8004ee8:	08004f27 	.word	0x08004f27
 8004eec:	08004f17 	.word	0x08004f17
 8004ef0:	08004f27 	.word	0x08004f27
 8004ef4:	08004f27 	.word	0x08004f27
 8004ef8:	08004f27 	.word	0x08004f27
 8004efc:	08004f1f 	.word	0x08004f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f00:	f7fd fbd2 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8004f04:	61f8      	str	r0, [r7, #28]
        break;
 8004f06:	e014      	b.n	8004f32 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f08:	f7fd fbe4 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8004f0c:	61f8      	str	r0, [r7, #28]
        break;
 8004f0e:	e010      	b.n	8004f32 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f10:	4b1d      	ldr	r3, [pc, #116]	@ (8004f88 <UART_SetConfig+0x4b0>)
 8004f12:	61fb      	str	r3, [r7, #28]
        break;
 8004f14:	e00d      	b.n	8004f32 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f16:	f7fd fb2f 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8004f1a:	61f8      	str	r0, [r7, #28]
        break;
 8004f1c:	e009      	b.n	8004f32 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f22:	61fb      	str	r3, [r7, #28]
        break;
 8004f24:	e005      	b.n	8004f32 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f30:	bf00      	nop
    }

    if (pclk != 0U)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d019      	beq.n	8004f6c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	085a      	lsrs	r2, r3, #1
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	441a      	add	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b0f      	cmp	r3, #15
 8004f50:	d909      	bls.n	8004f66 <UART_SetConfig+0x48e>
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f58:	d205      	bcs.n	8004f66 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60da      	str	r2, [r3, #12]
 8004f64:	e002      	b.n	8004f6c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3728      	adds	r7, #40	@ 0x28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f86:	bf00      	nop
 8004f88:	00f42400 	.word	0x00f42400

08004f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01a      	beq.n	80050a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800508a:	d10a      	bne.n	80050a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  }
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b098      	sub	sp, #96	@ 0x60
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050e0:	f7fb feb4 	bl	8000e4c <HAL_GetTick>
 80050e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d12e      	bne.n	8005152 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fc:	2200      	movs	r2, #0
 80050fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f88c 	bl	8005220 <UART_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d021      	beq.n	8005152 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800511c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005122:	653b      	str	r3, [r7, #80]	@ 0x50
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800512c:	647b      	str	r3, [r7, #68]	@ 0x44
 800512e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800513a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e6      	bne.n	800510e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e062      	b.n	8005218 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b04      	cmp	r3, #4
 800515e:	d149      	bne.n	80051f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005160:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005168:	2200      	movs	r2, #0
 800516a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f856 	bl	8005220 <UART_WaitOnFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d03c      	beq.n	80051f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	e853 3f00 	ldrex	r3, [r3]
 8005186:	623b      	str	r3, [r7, #32]
   return(result);
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800518e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005198:	633b      	str	r3, [r7, #48]	@ 0x30
 800519a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800519e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a0:	e841 2300 	strex	r3, r2, [r1]
 80051a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1e6      	bne.n	800517a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3308      	adds	r3, #8
 80051b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0301 	bic.w	r3, r3, #1
 80051c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051cc:	61fa      	str	r2, [r7, #28]
 80051ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	69b9      	ldr	r1, [r7, #24]
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	617b      	str	r3, [r7, #20]
   return(result);
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e5      	bne.n	80051ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e011      	b.n	8005218 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3758      	adds	r7, #88	@ 0x58
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	4613      	mov	r3, r2
 800522e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005230:	e04f      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d04b      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523a:	f7fb fe07 	bl	8000e4c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	429a      	cmp	r2, r3
 8005248:	d302      	bcc.n	8005250 <UART_WaitOnFlagUntilTimeout+0x30>
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e04e      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d037      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b80      	cmp	r3, #128	@ 0x80
 8005266:	d034      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b40      	cmp	r3, #64	@ 0x40
 800526c:	d031      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b08      	cmp	r3, #8
 800527a:	d110      	bne.n	800529e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2208      	movs	r2, #8
 8005282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f838 	bl	80052fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2208      	movs	r2, #8
 800528e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e029      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052ac:	d111      	bne.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f81e 	bl	80052fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e00f      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4013      	ands	r3, r2
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	429a      	cmp	r2, r3
 80052e0:	bf0c      	ite	eq
 80052e2:	2301      	moveq	r3, #1
 80052e4:	2300      	movne	r3, #0
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d0a0      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b095      	sub	sp, #84	@ 0x54
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005320:	643b      	str	r3, [r7, #64]	@ 0x40
 8005322:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005326:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800532e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e6      	bne.n	8005302 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	61fb      	str	r3, [r7, #28]
   return(result);
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005354:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800535a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e5      	bne.n	8005334 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800536c:	2b01      	cmp	r3, #1
 800536e:	d118      	bne.n	80053a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	60bb      	str	r3, [r7, #8]
   return(result);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f023 0310 	bic.w	r3, r3, #16
 8005384:	647b      	str	r3, [r7, #68]	@ 0x44
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800538e:	61bb      	str	r3, [r7, #24]
 8005390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6979      	ldr	r1, [r7, #20]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	613b      	str	r3, [r7, #16]
   return(result);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e6      	bne.n	8005370 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053b6:	bf00      	nop
 80053b8:	3754      	adds	r7, #84	@ 0x54
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f7ff fb63 	bl	8004aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053e6:	bf00      	nop
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b088      	sub	sp, #32
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	60bb      	str	r3, [r7, #8]
   return(result);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	6979      	ldr	r1, [r7, #20]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	613b      	str	r3, [r7, #16]
   return(result);
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e6      	bne.n	80053f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff fb2f 	bl	8004a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800543a:	bf00      	nop
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <acconeer_main>:

int acconeer_main(int argc, char *argv[]);


int acconeer_main(int argc, char *argv[])
{
 8005458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545a:	b0cd      	sub	sp, #308	@ 0x134
 800545c:	af06      	add	r7, sp, #24
 800545e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005462:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005466:	6018      	str	r0, [r3, #0]
 8005468:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800546c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005470:	6019      	str	r1, [r3, #0]
	(void)argc;
	(void)argv;
	acc_detector_presence_config_t   *presence_config = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	acc_detector_presence_handle_t   *presence_handle = NULL;
 8005478:	2300      	movs	r3, #0
 800547a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	acc_detector_presence_metadata_t metadata;
	acc_sensor_t                     *sensor     = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	void                             *buffer     = NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t                         buffer_size = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0

	printf("Acconeer software version %s\n", acc_version_get());
 8005490:	f008 ff86 	bl	800e3a0 <acc_version_get>
 8005494:	4603      	mov	r3, r0
 8005496:	4619      	mov	r1, r3
 8005498:	48d4      	ldr	r0, [pc, #848]	@ (80057ec <acconeer_main+0x394>)
 800549a:	f00a fb29 	bl	800faf0 <iprintf>

	const acc_hal_a121_t *hal = acc_hal_rss_integration_get_implementation();
 800549e:	f000 fd83 	bl	8005fa8 <acc_hal_rss_integration_get_implementation>
 80054a2:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

	if (!acc_rss_hal_register(hal))
 80054a6:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80054aa:	f004 f899 	bl	80095e0 <acc_rss_hal_register>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f083 0301 	eor.w	r3, r3, #1
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <acconeer_main+0x66>
	{
		return EXIT_FAILURE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e1df      	b.n	800587e <acconeer_main+0x426>
	}

	presence_config = acc_detector_presence_config_create();
 80054be:	f001 fef7 	bl	80072b0 <acc_detector_presence_config_create>
 80054c2:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
	if (presence_config == NULL)
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10e      	bne.n	80054ec <acconeer_main+0x94>
	{
		printf("acc_detector_presence_config_create() failed\n");
 80054ce:	48c8      	ldr	r0, [pc, #800]	@ (80057f0 <acconeer_main+0x398>)
 80054d0:	f00a fb76 	bl	800fbc0 <puts>
		cleanup(presence_handle, presence_config, sensor, buffer);
 80054d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80054d8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80054dc:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80054e0:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80054e4:	f000 f9d4 	bl	8005890 <cleanup>
		return EXIT_FAILURE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e1c8      	b.n	800587e <acconeer_main+0x426>
	}

	set_config(presence_config, PRESENCE_PRESET_CONFIG_JJH);
 80054ec:	2100      	movs	r1, #0
 80054ee:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80054f2:	f000 fa8b 	bl	8005a0c <set_config>

	// Print the configuration
	acc_detector_presence_config_log(presence_config);
 80054f6:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80054fa:	f001 ff63 	bl	80073c4 <acc_detector_presence_config_log>

	presence_handle = acc_detector_presence_create(presence_config, &metadata);
 80054fe:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8005502:	4619      	mov	r1, r3
 8005504:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8005508:	f002 fc8c 	bl	8007e24 <acc_detector_presence_create>
 800550c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	if (presence_handle == NULL)
 8005510:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10e      	bne.n	8005536 <acconeer_main+0xde>
	{
		printf("acc_detector_presence_create() failed\n");
 8005518:	48b6      	ldr	r0, [pc, #728]	@ (80057f4 <acconeer_main+0x39c>)
 800551a:	f00a fb51 	bl	800fbc0 <puts>
		cleanup(presence_handle, presence_config, sensor, buffer);
 800551e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005522:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8005526:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800552a:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800552e:	f000 f9af 	bl	8005890 <cleanup>
		return EXIT_FAILURE;
 8005532:	2301      	movs	r3, #1
 8005534:	e1a3      	b.n	800587e <acconeer_main+0x426>
	}

	if (!acc_detector_presence_get_buffer_size(presence_handle, &buffer_size))
 8005536:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800553a:	4619      	mov	r1, r3
 800553c:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8005540:	f002 fc2e 	bl	8007da0 <acc_detector_presence_get_buffer_size>
 8005544:	4603      	mov	r3, r0
 8005546:	f083 0301 	eor.w	r3, r3, #1
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <acconeer_main+0x116>
	{
		printf("acc_detector_presence_get_buffer_size() failed\n");
 8005550:	48a9      	ldr	r0, [pc, #676]	@ (80057f8 <acconeer_main+0x3a0>)
 8005552:	f00a fb35 	bl	800fbc0 <puts>
		cleanup(presence_handle, presence_config, sensor, buffer);
 8005556:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800555a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800555e:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005562:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8005566:	f000 f993 	bl	8005890 <cleanup>
		return EXIT_FAILURE;
 800556a:	2301      	movs	r3, #1
 800556c:	e187      	b.n	800587e <acconeer_main+0x426>
	}

	buffer = acc_integration_mem_alloc(buffer_size);
 800556e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005572:	4618      	mov	r0, r3
 8005574:	f000 ffdb 	bl	800652e <acc_integration_mem_alloc>
 8005578:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
	if (buffer == NULL)
 800557c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10e      	bne.n	80055a2 <acconeer_main+0x14a>
	{
		printf("buffer allocation failed\n");
 8005584:	489d      	ldr	r0, [pc, #628]	@ (80057fc <acconeer_main+0x3a4>)
 8005586:	f00a fb1b 	bl	800fbc0 <puts>
		cleanup(presence_handle, presence_config, sensor, buffer);
 800558a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800558e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8005592:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005596:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800559a:	f000 f979 	bl	8005890 <cleanup>
		return EXIT_FAILURE;
 800559e:	2301      	movs	r3, #1
 80055a0:	e16d      	b.n	800587e <acconeer_main+0x426>
	}

	acc_hal_integration_sensor_supply_on(SENSOR_ID);
 80055a2:	2001      	movs	r0, #1
 80055a4:	f000 fc90 	bl	8005ec8 <acc_hal_integration_sensor_supply_on>
	acc_hal_integration_sensor_enable(SENSOR_ID);
 80055a8:	2001      	movs	r0, #1
 80055aa:	f000 fca1 	bl	8005ef0 <acc_hal_integration_sensor_enable>

	sensor = acc_sensor_create(SENSOR_ID);
 80055ae:	2001      	movs	r0, #1
 80055b0:	f004 fd44 	bl	800a03c <acc_sensor_create>
 80055b4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	if (sensor == NULL)
 80055b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10e      	bne.n	80055de <acconeer_main+0x186>
	{
		printf("acc_sensor_create() failed\n");
 80055c0:	488f      	ldr	r0, [pc, #572]	@ (8005800 <acconeer_main+0x3a8>)
 80055c2:	f00a fafd 	bl	800fbc0 <puts>
		cleanup(presence_handle, presence_config, sensor, buffer);
 80055c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80055ca:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80055ce:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80055d2:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80055d6:	f000 f95b 	bl	8005890 <cleanup>
		return EXIT_FAILURE;
 80055da:	2301      	movs	r3, #1
 80055dc:	e14f      	b.n	800587e <acconeer_main+0x426>
	}

	acc_cal_result_t cal_result;

	if (!do_sensor_calibration(sensor, &cal_result, buffer, buffer_size))
 80055de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80055e2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80055e6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80055ea:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80055ee:	f000 f978 	bl	80058e2 <do_sensor_calibration>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f083 0301 	eor.w	r3, r3, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00e      	beq.n	800561c <acconeer_main+0x1c4>
	{
		printf("do_sensor_calibration() failed\n");
 80055fe:	4881      	ldr	r0, [pc, #516]	@ (8005804 <acconeer_main+0x3ac>)
 8005600:	f00a fade 	bl	800fbc0 <puts>
		cleanup(presence_handle, presence_config, sensor, buffer);
 8005604:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005608:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800560c:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005610:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8005614:	f000 f93c 	bl	8005890 <cleanup>
		return EXIT_FAILURE;
 8005618:	2301      	movs	r3, #1
 800561a:	e130      	b.n	800587e <acconeer_main+0x426>
	}

	if (!acc_detector_presence_prepare(presence_handle, presence_config, sensor, &cal_result,
 800561c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005620:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	4613      	mov	r3, r2
 800562e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8005632:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005636:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800563a:	f002 fc95 	bl	8007f68 <acc_detector_presence_prepare>
 800563e:	4603      	mov	r3, r0
 8005640:	f083 0301 	eor.w	r3, r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00e      	beq.n	8005668 <acconeer_main+0x210>
	                                   buffer, buffer_size))
	{
		printf("acc_detector_presence_prepare() failed\n");
 800564a:	486f      	ldr	r0, [pc, #444]	@ (8005808 <acconeer_main+0x3b0>)
 800564c:	f00a fab8 	bl	800fbc0 <puts>
		cleanup(presence_handle, presence_config, sensor, buffer);
 8005650:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005654:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8005658:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800565c:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8005660:	f000 f916 	bl	8005890 <cleanup>
		return EXIT_FAILURE;
 8005664:	2301      	movs	r3, #1
 8005666:	e10a      	b.n	800587e <acconeer_main+0x426>

	while (true)
	{
		acc_detector_presence_result_t result;

		if (!acc_sensor_measure(sensor))
 8005668:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800566c:	f004 fdb8 	bl	800a1e0 <acc_sensor_measure>
 8005670:	4603      	mov	r3, r0
 8005672:	f083 0301 	eor.w	r3, r3, #1
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00e      	beq.n	800569a <acconeer_main+0x242>
		{
			printf("acc_sensor_measure failed\n");
 800567c:	4863      	ldr	r0, [pc, #396]	@ (800580c <acconeer_main+0x3b4>)
 800567e:	f00a fa9f 	bl	800fbc0 <puts>
			cleanup(presence_handle, presence_config, sensor, buffer);
 8005682:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005686:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800568a:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800568e:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8005692:	f000 f8fd 	bl	8005890 <cleanup>
			return EXIT_FAILURE;
 8005696:	2301      	movs	r3, #1
 8005698:	e0f1      	b.n	800587e <acconeer_main+0x426>
		}

		if (!acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS))
 800569a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800569e:	2001      	movs	r0, #1
 80056a0:	f000 fc4e 	bl	8005f40 <acc_hal_integration_wait_for_sensor_interrupt>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f083 0301 	eor.w	r3, r3, #1
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00e      	beq.n	80056ce <acconeer_main+0x276>
		{
			printf("Sensor interrupt timeout\n");
 80056b0:	4857      	ldr	r0, [pc, #348]	@ (8005810 <acconeer_main+0x3b8>)
 80056b2:	f00a fa85 	bl	800fbc0 <puts>
			cleanup(presence_handle, presence_config, sensor, buffer);
 80056b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80056ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80056be:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80056c2:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80056c6:	f000 f8e3 	bl	8005890 <cleanup>
			return EXIT_FAILURE;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e0d7      	b.n	800587e <acconeer_main+0x426>
		}

		if (!acc_sensor_read(sensor, buffer, buffer_size))
 80056ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056d2:	461a      	mov	r2, r3
 80056d4:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 80056d8:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80056dc:	f004 fda8 	bl	800a230 <acc_sensor_read>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f083 0301 	eor.w	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00e      	beq.n	800570a <acconeer_main+0x2b2>
		{
			printf("acc_sensor_read failed\n");
 80056ec:	4849      	ldr	r0, [pc, #292]	@ (8005814 <acconeer_main+0x3bc>)
 80056ee:	f00a fa67 	bl	800fbc0 <puts>
			cleanup(presence_handle, presence_config, sensor, buffer);
 80056f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80056f6:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80056fa:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80056fe:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8005702:	f000 f8c5 	bl	8005890 <cleanup>
			return EXIT_FAILURE;
 8005706:	2301      	movs	r3, #1
 8005708:	e0b9      	b.n	800587e <acconeer_main+0x426>
		}

		if (!acc_detector_presence_process(presence_handle, buffer, &result))
 800570a:	f107 0308 	add.w	r3, r7, #8
 800570e:	461a      	mov	r2, r3
 8005710:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8005714:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8005718:	f002 fc56 	bl	8007fc8 <acc_detector_presence_process>
 800571c:	4603      	mov	r3, r0
 800571e:	f083 0301 	eor.w	r3, r3, #1
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00e      	beq.n	8005746 <acconeer_main+0x2ee>
		{
			printf("acc_detector_presence_process failed\n");
 8005728:	483b      	ldr	r0, [pc, #236]	@ (8005818 <acconeer_main+0x3c0>)
 800572a:	f00a fa49 	bl	800fbc0 <puts>
			cleanup(presence_handle, presence_config, sensor, buffer);
 800572e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005732:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8005736:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800573a:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 800573e:	f000 f8a7 	bl	8005890 <cleanup>
			return EXIT_FAILURE;
 8005742:	2301      	movs	r3, #1
 8005744:	e09b      	b.n	800587e <acconeer_main+0x426>
		}

		print_result(result);
 8005746:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800574a:	f5a3 7688 	sub.w	r6, r3, #272	@ 0x110
 800574e:	466d      	mov	r5, sp
 8005750:	f106 0410 	add.w	r4, r6, #16
 8005754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005758:	e894 0003 	ldmia.w	r4, {r0, r1}
 800575c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005760:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005764:	f000 f912 	bl	800598c <print_result>

		if (result.processing_result.data_saturated)
 8005768:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800576c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005770:	7f1b      	ldrb	r3, [r3, #28]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <acconeer_main+0x324>
		{
			printf("Data saturated. The detector result is not reliable.\n");
 8005776:	4829      	ldr	r0, [pc, #164]	@ (800581c <acconeer_main+0x3c4>)
 8005778:	f00a fa22 	bl	800fbc0 <puts>
		}

		if (result.processing_result.frame_delayed)
 800577c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005780:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8005784:	7f5b      	ldrb	r3, [r3, #29]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <acconeer_main+0x33e>
		{
			printf("Frame delayed. Could not read data fast enough.\n");
 800578a:	4825      	ldr	r0, [pc, #148]	@ (8005820 <acconeer_main+0x3c8>)
 800578c:	f00a fa18 	bl	800fbc0 <puts>
			printf("Try lowering the frame rate or call 'acc_sensor_read' more frequently.\n");
 8005790:	4824      	ldr	r0, [pc, #144]	@ (8005824 <acconeer_main+0x3cc>)
 8005792:	f00a fa15 	bl	800fbc0 <puts>
		}

		/* If "calibration_needed" is indicated, the sensor needs to be recalibrated. */
		if (result.processing_result.calibration_needed)
 8005796:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800579a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800579e:	7f9b      	ldrb	r3, [r3, #30]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f43f af61 	beq.w	8005668 <acconeer_main+0x210>
		{
			printf("Sensor recalibration needed ... \n");
 80057a6:	4820      	ldr	r0, [pc, #128]	@ (8005828 <acconeer_main+0x3d0>)
 80057a8:	f00a fa0a 	bl	800fbc0 <puts>

			if (!do_sensor_calibration(sensor, &cal_result, buffer, buffer_size))
 80057ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80057b0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80057b4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80057b8:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80057bc:	f000 f891 	bl	80058e2 <do_sensor_calibration>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f083 0301 	eor.w	r3, r3, #1
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d02f      	beq.n	800582c <acconeer_main+0x3d4>
			{
				printf("do_sensor_calibration() failed\n");
 80057cc:	480d      	ldr	r0, [pc, #52]	@ (8005804 <acconeer_main+0x3ac>)
 80057ce:	f00a f9f7 	bl	800fbc0 <puts>
				cleanup(presence_handle, presence_config, sensor, buffer);
 80057d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80057d6:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80057da:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80057de:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80057e2:	f000 f855 	bl	8005890 <cleanup>
				return EXIT_FAILURE;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e049      	b.n	800587e <acconeer_main+0x426>
 80057ea:	bf00      	nop
 80057ec:	08012798 	.word	0x08012798
 80057f0:	080127b8 	.word	0x080127b8
 80057f4:	080127e8 	.word	0x080127e8
 80057f8:	08012810 	.word	0x08012810
 80057fc:	08012840 	.word	0x08012840
 8005800:	0801285c 	.word	0x0801285c
 8005804:	08012878 	.word	0x08012878
 8005808:	08012898 	.word	0x08012898
 800580c:	080128c0 	.word	0x080128c0
 8005810:	080128dc 	.word	0x080128dc
 8005814:	080128f8 	.word	0x080128f8
 8005818:	08012910 	.word	0x08012910
 800581c:	08012938 	.word	0x08012938
 8005820:	08012970 	.word	0x08012970
 8005824:	080129a0 	.word	0x080129a0
 8005828:	080129e8 	.word	0x080129e8
			}

			printf("Sensor recalibration done!\n");
 800582c:	4816      	ldr	r0, [pc, #88]	@ (8005888 <acconeer_main+0x430>)
 800582e:	f00a f9c7 	bl	800fbc0 <puts>

			/* Before measuring again, the sensor needs to be prepared through the detector. */
			if (!acc_detector_presence_prepare(presence_handle, presence_config, sensor, &cal_result,
 8005832:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005836:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	4613      	mov	r3, r2
 8005844:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8005848:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800584c:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8005850:	f002 fb8a 	bl	8007f68 <acc_detector_presence_prepare>
 8005854:	4603      	mov	r3, r0
 8005856:	f083 0301 	eor.w	r3, r3, #1
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	f43f af03 	beq.w	8005668 <acconeer_main+0x210>
			                                   buffer, buffer_size))
			{
				printf("acc_detector_presence_prepare() failed\n");
 8005862:	480a      	ldr	r0, [pc, #40]	@ (800588c <acconeer_main+0x434>)
 8005864:	f00a f9ac 	bl	800fbc0 <puts>
				cleanup(presence_handle, presence_config, sensor, buffer);
 8005868:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800586c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8005870:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005874:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8005878:	f000 f80a 	bl	8005890 <cleanup>
				return EXIT_FAILURE;
 800587c:	2301      	movs	r3, #1
	cleanup(presence_handle, presence_config, sensor, buffer);

	printf("Application finished OK\n");

	return EXIT_SUCCESS;
}
 800587e:	4618      	mov	r0, r3
 8005880:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8005884:	46bd      	mov	sp, r7
 8005886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005888:	08012a0c 	.word	0x08012a0c
 800588c:	08012898 	.word	0x08012898

08005890 <cleanup>:

static void cleanup(acc_detector_presence_handle_t *presence_handle,
                    acc_detector_presence_config_t *presence_config,
                    acc_sensor_t                   *sensor,
                    void                           *buffer)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
	acc_hal_integration_sensor_disable(SENSOR_ID);
 800589e:	2001      	movs	r0, #1
 80058a0:	f000 fb3a 	bl	8005f18 <acc_hal_integration_sensor_disable>
	acc_hal_integration_sensor_supply_off(SENSOR_ID);
 80058a4:	2001      	movs	r0, #1
 80058a6:	f000 fb19 	bl	8005edc <acc_hal_integration_sensor_supply_off>

	if (presence_config != NULL)
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <cleanup+0x26>
	{
		acc_detector_presence_config_destroy(presence_config);
 80058b0:	68b8      	ldr	r0, [r7, #8]
 80058b2:	f001 fd6d 	bl	8007390 <acc_detector_presence_config_destroy>
	}

	if (presence_handle != NULL)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <cleanup+0x32>
	{
		acc_detector_presence_destroy(presence_handle);
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f002 fa95 	bl	8007dec <acc_detector_presence_destroy>
	}

	if (sensor != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <cleanup+0x3e>
	{
		acc_sensor_destroy(sensor);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f004 fb95 	bl	8009ff8 <acc_sensor_destroy>
	}

	if (buffer != NULL)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <cleanup+0x4a>
	{
		acc_integration_mem_free(buffer);
 80058d4:	6838      	ldr	r0, [r7, #0]
 80058d6:	f000 fe36 	bl	8006546 <acc_integration_mem_free>
	}
}
 80058da:	bf00      	nop
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <do_sensor_calibration>:


static bool do_sensor_calibration(acc_sensor_t *sensor, acc_cal_result_t *cal_result, void *buffer, uint32_t buffer_size)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b088      	sub	sp, #32
 80058e6:	af02      	add	r7, sp, #8
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	603b      	str	r3, [r7, #0]
	bool           status              = false;
 80058f0:	2300      	movs	r3, #0
 80058f2:	75fb      	strb	r3, [r7, #23]
	bool           cal_complete        = false;
 80058f4:	2300      	movs	r3, #0
 80058f6:	747b      	strb	r3, [r7, #17]
	const uint16_t calibration_retries = 1U;
 80058f8:	2301      	movs	r3, #1
 80058fa:	827b      	strh	r3, [r7, #18]

	// Random disturbances may cause the calibration to fail. At failure, retry at least once.
	for (uint16_t i = 0; !status && (i <= calibration_retries); i++)
 80058fc:	2300      	movs	r3, #0
 80058fe:	82bb      	strh	r3, [r7, #20]
 8005900:	e02c      	b.n	800595c <do_sensor_calibration+0x7a>
	{
		// Reset sensor before calibration by disabling/enabling it
		acc_hal_integration_sensor_disable(SENSOR_ID);
 8005902:	2001      	movs	r0, #1
 8005904:	f000 fb08 	bl	8005f18 <acc_hal_integration_sensor_disable>
		acc_hal_integration_sensor_enable(SENSOR_ID);
 8005908:	2001      	movs	r0, #1
 800590a:	f000 faf1 	bl	8005ef0 <acc_hal_integration_sensor_enable>

		do
		{
			status = acc_sensor_calibrate(sensor, &cal_complete, cal_result, buffer, buffer_size);
 800590e:	f107 0111 	add.w	r1, r7, #17
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f004 fbd8 	bl	800a0d0 <acc_sensor_calibrate>
 8005920:	4603      	mov	r3, r0
 8005922:	75fb      	strb	r3, [r7, #23]

			if (status && !cal_complete)
 8005924:	7dfb      	ldrb	r3, [r7, #23]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00c      	beq.n	8005944 <do_sensor_calibration+0x62>
 800592a:	7c7b      	ldrb	r3, [r7, #17]
 800592c:	f083 0301 	eor.w	r3, r3, #1
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d006      	beq.n	8005944 <do_sensor_calibration+0x62>
			{
				status = acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS);
 8005936:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800593a:	2001      	movs	r0, #1
 800593c:	f000 fb00 	bl	8005f40 <acc_hal_integration_wait_for_sensor_interrupt>
 8005940:	4603      	mov	r3, r0
 8005942:	75fb      	strb	r3, [r7, #23]
			}
		} while (status && !cal_complete);
 8005944:	7dfb      	ldrb	r3, [r7, #23]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <do_sensor_calibration+0x74>
 800594a:	7c7b      	ldrb	r3, [r7, #17]
 800594c:	f083 0301 	eor.w	r3, r3, #1
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1db      	bne.n	800590e <do_sensor_calibration+0x2c>
	for (uint16_t i = 0; !status && (i <= calibration_retries); i++)
 8005956:	8abb      	ldrh	r3, [r7, #20]
 8005958:	3301      	adds	r3, #1
 800595a:	82bb      	strh	r3, [r7, #20]
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	f083 0301 	eor.w	r3, r3, #1
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <do_sensor_calibration+0x8e>
 8005968:	8aba      	ldrh	r2, [r7, #20]
 800596a:	8a7b      	ldrh	r3, [r7, #18]
 800596c:	429a      	cmp	r2, r3
 800596e:	d9c8      	bls.n	8005902 <do_sensor_calibration+0x20>
	}

	if (status)
 8005970:	7dfb      	ldrb	r3, [r7, #23]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <do_sensor_calibration+0xa0>
	{
		/* Reset sensor after calibration by disabling/enabling it */
		acc_hal_integration_sensor_disable(SENSOR_ID);
 8005976:	2001      	movs	r0, #1
 8005978:	f000 face 	bl	8005f18 <acc_hal_integration_sensor_disable>
		acc_hal_integration_sensor_enable(SENSOR_ID);
 800597c:	2001      	movs	r0, #1
 800597e:	f000 fab7 	bl	8005ef0 <acc_hal_integration_sensor_enable>
	}

	return status;
 8005982:	7dfb      	ldrb	r3, [r7, #23]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <print_result>:


static void print_result(acc_detector_presence_result_t result)
{
 800598c:	b084      	sub	sp, #16
 800598e:	b580      	push	{r7, lr}
 8005990:	af00      	add	r7, sp, #0
 8005992:	f107 0c08 	add.w	ip, r7, #8
 8005996:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (result.presence_detected)
 800599a:	7a3b      	ldrb	r3, [r7, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <print_result+0x1c>
	{
		printf("Motion\n");
 80059a0:	4816      	ldr	r0, [pc, #88]	@ (80059fc <print_result+0x70>)
 80059a2:	f00a f90d 	bl	800fbc0 <puts>
 80059a6:	e002      	b.n	80059ae <print_result+0x22>
	}
	else
	{
		printf("No motion\n");
 80059a8:	4815      	ldr	r0, [pc, #84]	@ (8005a00 <print_result+0x74>)
 80059aa:	f00a f909 	bl	800fbc0 <puts>
	}

	// Score and distance are multiplied by 1000 to avoid printing floats
	printf("Intra presence score: %d, Inter presence score: %d, Distance (mm): %d\n",
	       (int)(result.intra_presence_score * 1000.0f),
 80059ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80059b2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005a04 <print_result+0x78>
 80059b6:	ee67 7a87 	vmul.f32	s15, s15, s14
	printf("Intra presence score: %d, Inter presence score: %d, Distance (mm): %d\n",
 80059ba:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	       (int)(result.inter_presence_score * 1000.0f),
 80059be:	edd7 7a04 	vldr	s15, [r7, #16]
 80059c2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005a04 <print_result+0x78>
 80059c6:	ee67 7a87 	vmul.f32	s15, s15, s14
	printf("Intra presence score: %d, Inter presence score: %d, Distance (mm): %d\n",
 80059ca:	eebd 6ae7 	vcvt.s32.f32	s12, s15
	       (int)(result.presence_distance * 1000.0f));
 80059ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80059d2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8005a04 <print_result+0x78>
 80059d6:	ee67 7a87 	vmul.f32	s15, s15, s14
	printf("Intra presence score: %d, Inter presence score: %d, Distance (mm): %d\n",
 80059da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059de:	ee17 3a90 	vmov	r3, s15
 80059e2:	ee16 2a10 	vmov	r2, s12
 80059e6:	ee16 1a90 	vmov	r1, s13
 80059ea:	4807      	ldr	r0, [pc, #28]	@ (8005a08 <print_result+0x7c>)
 80059ec:	f00a f880 	bl	800faf0 <iprintf>
}
 80059f0:	bf00      	nop
 80059f2:	46bd      	mov	sp, r7
 80059f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059f8:	b004      	add	sp, #16
 80059fa:	4770      	bx	lr
 80059fc:	08012a28 	.word	0x08012a28
 8005a00:	08012a30 	.word	0x08012a30
 8005a04:	447a0000 	.word	0x447a0000
 8005a08:	08012a3c 	.word	0x08012a3c

08005a0c <set_config>:


static void set_config(acc_detector_presence_config_t *presence_config, presence_preset_config_t preset)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
	switch (preset)
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	f200 821f 	bhi.w	8005e5e <set_config+0x452>
 8005a20:	a201      	add	r2, pc, #4	@ (adr r2, 8005a28 <set_config+0x1c>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a3d 	.word	0x08005a3d
 8005a2c:	08005aff 	.word	0x08005aff
 8005a30:	08005bc1 	.word	0x08005bc1
 8005a34:	08005c83 	.word	0x08005c83
 8005a38:	08005d7d 	.word	0x08005d7d
	{
		case PRESENCE_PRESET_CONFIG_JJH:
		  acc_detector_presence_config_start_set(presence_config, 0.40f);
 8005a3c:	ed9f 0ac1 	vldr	s0, [pc, #772]	@ 8005d44 <set_config+0x338>
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f002 fb03 	bl	800804c <acc_detector_presence_config_start_set>
      acc_detector_presence_config_end_set(presence_config, 0.60f);
 8005a46:	ed9f 0ac0 	vldr	s0, [pc, #768]	@ 8005d48 <set_config+0x33c>
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f002 fb0a 	bl	8008064 <acc_detector_presence_config_end_set>
      acc_detector_presence_config_automatic_subsweeps_set(presence_config, true);
 8005a50:	2101      	movs	r1, #1
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f002 fc0e 	bl	8008274 <acc_detector_presence_config_automatic_subsweeps_set>
      acc_detector_presence_config_signal_quality_set(presence_config, 30.0f);
 8005a58:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f002 fc15 	bl	800828c <acc_detector_presence_config_signal_quality_set>
      acc_detector_presence_config_inter_frame_idle_state_set(presence_config, ACC_CONFIG_IDLE_STATE_DEEP_SLEEP);
 8005a62:	2100      	movs	r1, #0
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f002 fb2d 	bl	80080c4 <acc_detector_presence_config_inter_frame_idle_state_set>
      acc_detector_presence_config_sweeps_per_frame_set(presence_config, 16);
 8005a6a:	2110      	movs	r1, #16
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f002 fb41 	bl	80080f4 <acc_detector_presence_config_sweeps_per_frame_set>
      acc_detector_presence_config_frame_rate_set(presence_config, 1.0f);
 8005a72:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f002 fb48 	bl	800810c <acc_detector_presence_config_frame_rate_set>
      acc_detector_presence_config_frame_rate_app_driven_set(presence_config, false);
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f002 fb50 	bl	8008124 <acc_detector_presence_config_frame_rate_app_driven_set>
      acc_detector_presence_config_reset_filters_on_prepare_set(presence_config, true);
 8005a84:	2101      	movs	r1, #1
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f002 fb58 	bl	800813c <acc_detector_presence_config_reset_filters_on_prepare_set>
      acc_detector_presence_config_intra_detection_set(presence_config, true);
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f002 fb78 	bl	8008184 <acc_detector_presence_config_intra_detection_set>
      acc_detector_presence_config_intra_detection_threshold_set(presence_config, 1.4f);
 8005a94:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8005d4c <set_config+0x340>
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f002 fb7f 	bl	800819c <acc_detector_presence_config_intra_detection_threshold_set>
      acc_detector_presence_config_intra_frame_time_const_set(presence_config, 0.15f);
 8005a9e:	ed9f 0aac 	vldr	s0, [pc, #688]	@ 8005d50 <set_config+0x344>
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f002 fbc2 	bl	800822c <acc_detector_presence_config_intra_frame_time_const_set>
      acc_detector_presence_config_intra_output_time_const_set(presence_config, 0.3f);
 8005aa8:	ed9f 0ab1 	vldr	s0, [pc, #708]	@ 8005d70 <set_config+0x364>
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f002 fbc9 	bl	8008244 <acc_detector_presence_config_intra_output_time_const_set>
      acc_detector_presence_config_inter_detection_set(presence_config, true);
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f002 fb7d 	bl	80081b4 <acc_detector_presence_config_inter_detection_set>
      acc_detector_presence_config_inter_detection_threshold_set(presence_config, 2.0f);
 8005aba:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f002 fb84 	bl	80081cc <acc_detector_presence_config_inter_detection_threshold_set>
      acc_detector_presence_config_inter_frame_deviation_time_const_set(presence_config, 0.5f);
 8005ac4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f002 fb8b 	bl	80081e4 <acc_detector_presence_config_inter_frame_deviation_time_const_set>
      acc_detector_presence_config_inter_frame_fast_cutoff_set(presence_config, 5.0f);
 8005ace:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f002 fb92 	bl	80081fc <acc_detector_presence_config_inter_frame_fast_cutoff_set>
      acc_detector_presence_config_inter_frame_slow_cutoff_set(presence_config, 0.20f);
 8005ad8:	ed9f 0aa7 	vldr	s0, [pc, #668]	@ 8005d78 <set_config+0x36c>
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f002 fb99 	bl	8008214 <acc_detector_presence_config_inter_frame_slow_cutoff_set>
      acc_detector_presence_config_inter_output_time_const_set(presence_config, 2.0f);
 8005ae2:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f002 fbb8 	bl	800825c <acc_detector_presence_config_inter_output_time_const_set>
      acc_detector_presence_config_inter_frame_presence_timeout_set(presence_config, 3);
 8005aec:	2103      	movs	r1, #3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f002 fb30 	bl	8008154 <acc_detector_presence_config_inter_frame_presence_timeout_set>
      acc_detector_presence_config_inter_phase_boost_set(presence_config, false);
 8005af4:	2100      	movs	r1, #0
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f002 fb38 	bl	800816c <acc_detector_presence_config_inter_phase_boost_set>
			break;
 8005afc:	e1af      	b.n	8005e5e <set_config+0x452>

		case PRESENCE_PRESET_CONFIG_SHORT_RANGE:
			acc_detector_presence_config_start_set(presence_config, 0.06f);
 8005afe:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8005d54 <set_config+0x348>
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f002 faa2 	bl	800804c <acc_detector_presence_config_start_set>
			acc_detector_presence_config_end_set(presence_config, 1.0f);
 8005b08:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f002 faa9 	bl	8008064 <acc_detector_presence_config_end_set>
			acc_detector_presence_config_automatic_subsweeps_set(presence_config, true);
 8005b12:	2101      	movs	r1, #1
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f002 fbad 	bl	8008274 <acc_detector_presence_config_automatic_subsweeps_set>
			acc_detector_presence_config_signal_quality_set(presence_config, 30.0f);
 8005b1a:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f002 fbb4 	bl	800828c <acc_detector_presence_config_signal_quality_set>
			acc_detector_presence_config_inter_frame_idle_state_set(presence_config, ACC_CONFIG_IDLE_STATE_DEEP_SLEEP);
 8005b24:	2100      	movs	r1, #0
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f002 facc 	bl	80080c4 <acc_detector_presence_config_inter_frame_idle_state_set>
			acc_detector_presence_config_sweeps_per_frame_set(presence_config, 16);
 8005b2c:	2110      	movs	r1, #16
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f002 fae0 	bl	80080f4 <acc_detector_presence_config_sweeps_per_frame_set>
			acc_detector_presence_config_frame_rate_set(presence_config, 10.0f);
 8005b34:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f002 fae7 	bl	800810c <acc_detector_presence_config_frame_rate_set>
			acc_detector_presence_config_frame_rate_app_driven_set(presence_config, false);
 8005b3e:	2100      	movs	r1, #0
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f002 faef 	bl	8008124 <acc_detector_presence_config_frame_rate_app_driven_set>
			acc_detector_presence_config_reset_filters_on_prepare_set(presence_config, true);
 8005b46:	2101      	movs	r1, #1
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f002 faf7 	bl	800813c <acc_detector_presence_config_reset_filters_on_prepare_set>
			acc_detector_presence_config_intra_detection_set(presence_config, true);
 8005b4e:	2101      	movs	r1, #1
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f002 fb17 	bl	8008184 <acc_detector_presence_config_intra_detection_set>
			acc_detector_presence_config_intra_detection_threshold_set(presence_config, 1.4f);
 8005b56:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 8005d4c <set_config+0x340>
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f002 fb1e 	bl	800819c <acc_detector_presence_config_intra_detection_threshold_set>
			acc_detector_presence_config_intra_frame_time_const_set(presence_config, 0.15f);
 8005b60:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 8005d50 <set_config+0x344>
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f002 fb61 	bl	800822c <acc_detector_presence_config_intra_frame_time_const_set>
			acc_detector_presence_config_intra_output_time_const_set(presence_config, 0.3f);
 8005b6a:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 8005d70 <set_config+0x364>
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f002 fb68 	bl	8008244 <acc_detector_presence_config_intra_output_time_const_set>
			acc_detector_presence_config_inter_detection_set(presence_config, true);
 8005b74:	2101      	movs	r1, #1
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f002 fb1c 	bl	80081b4 <acc_detector_presence_config_inter_detection_set>
			acc_detector_presence_config_inter_detection_threshold_set(presence_config, 1.0f);
 8005b7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f002 fb23 	bl	80081cc <acc_detector_presence_config_inter_detection_threshold_set>
			acc_detector_presence_config_inter_frame_deviation_time_const_set(presence_config, 0.5f);
 8005b86:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f002 fb2a 	bl	80081e4 <acc_detector_presence_config_inter_frame_deviation_time_const_set>
			acc_detector_presence_config_inter_frame_fast_cutoff_set(presence_config, 5.0f);
 8005b90:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f002 fb31 	bl	80081fc <acc_detector_presence_config_inter_frame_fast_cutoff_set>
			acc_detector_presence_config_inter_frame_slow_cutoff_set(presence_config, 0.20f);
 8005b9a:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 8005d78 <set_config+0x36c>
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f002 fb38 	bl	8008214 <acc_detector_presence_config_inter_frame_slow_cutoff_set>
			acc_detector_presence_config_inter_output_time_const_set(presence_config, 2.0f);
 8005ba4:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f002 fb57 	bl	800825c <acc_detector_presence_config_inter_output_time_const_set>
			acc_detector_presence_config_inter_frame_presence_timeout_set(presence_config, 3);
 8005bae:	2103      	movs	r1, #3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f002 facf 	bl	8008154 <acc_detector_presence_config_inter_frame_presence_timeout_set>
			acc_detector_presence_config_inter_phase_boost_set(presence_config, false);
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f002 fad7 	bl	800816c <acc_detector_presence_config_inter_phase_boost_set>

			break;
 8005bbe:	e14e      	b.n	8005e5e <set_config+0x452>

		case PRESENCE_PRESET_CONFIG_MEDIUM_RANGE:
			acc_detector_presence_config_start_set(presence_config, 0.3f);
 8005bc0:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8005d70 <set_config+0x364>
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f002 fa41 	bl	800804c <acc_detector_presence_config_start_set>
			acc_detector_presence_config_end_set(presence_config, 2.5f);
 8005bca:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f002 fa48 	bl	8008064 <acc_detector_presence_config_end_set>
			acc_detector_presence_config_automatic_subsweeps_set(presence_config, true);
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f002 fb4c 	bl	8008274 <acc_detector_presence_config_automatic_subsweeps_set>
			acc_detector_presence_config_signal_quality_set(presence_config, 20.0f);
 8005bdc:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f002 fb53 	bl	800828c <acc_detector_presence_config_signal_quality_set>
			acc_detector_presence_config_inter_frame_idle_state_set(presence_config, ACC_CONFIG_IDLE_STATE_DEEP_SLEEP);
 8005be6:	2100      	movs	r1, #0
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f002 fa6b 	bl	80080c4 <acc_detector_presence_config_inter_frame_idle_state_set>
			acc_detector_presence_config_sweeps_per_frame_set(presence_config, 16);
 8005bee:	2110      	movs	r1, #16
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f002 fa7f 	bl	80080f4 <acc_detector_presence_config_sweeps_per_frame_set>
			acc_detector_presence_config_frame_rate_set(presence_config, 12.0f);
 8005bf6:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f002 fa86 	bl	800810c <acc_detector_presence_config_frame_rate_set>
			acc_detector_presence_config_frame_rate_app_driven_set(presence_config, false);
 8005c00:	2100      	movs	r1, #0
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f002 fa8e 	bl	8008124 <acc_detector_presence_config_frame_rate_app_driven_set>
			acc_detector_presence_config_reset_filters_on_prepare_set(presence_config, true);
 8005c08:	2101      	movs	r1, #1
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f002 fa96 	bl	800813c <acc_detector_presence_config_reset_filters_on_prepare_set>
			acc_detector_presence_config_intra_detection_set(presence_config, true);
 8005c10:	2101      	movs	r1, #1
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f002 fab6 	bl	8008184 <acc_detector_presence_config_intra_detection_set>
			acc_detector_presence_config_intra_detection_threshold_set(presence_config, 1.3f);
 8005c18:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8005d58 <set_config+0x34c>
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f002 fabd 	bl	800819c <acc_detector_presence_config_intra_detection_threshold_set>
			acc_detector_presence_config_intra_frame_time_const_set(presence_config, 0.15f);
 8005c22:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8005d50 <set_config+0x344>
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f002 fb00 	bl	800822c <acc_detector_presence_config_intra_frame_time_const_set>
			acc_detector_presence_config_intra_output_time_const_set(presence_config, 0.3f);
 8005c2c:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8005d70 <set_config+0x364>
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f002 fb07 	bl	8008244 <acc_detector_presence_config_intra_output_time_const_set>
			acc_detector_presence_config_inter_detection_set(presence_config, true);
 8005c36:	2101      	movs	r1, #1
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f002 fabb 	bl	80081b4 <acc_detector_presence_config_inter_detection_set>
			acc_detector_presence_config_inter_detection_threshold_set(presence_config, 1.0f);
 8005c3e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f002 fac2 	bl	80081cc <acc_detector_presence_config_inter_detection_threshold_set>
			acc_detector_presence_config_inter_frame_deviation_time_const_set(presence_config, 0.5f);
 8005c48:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f002 fac9 	bl	80081e4 <acc_detector_presence_config_inter_frame_deviation_time_const_set>
			acc_detector_presence_config_inter_frame_fast_cutoff_set(presence_config, 6.0f);
 8005c52:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f002 fad0 	bl	80081fc <acc_detector_presence_config_inter_frame_fast_cutoff_set>
			acc_detector_presence_config_inter_frame_slow_cutoff_set(presence_config, 0.20f);
 8005c5c:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8005d78 <set_config+0x36c>
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f002 fad7 	bl	8008214 <acc_detector_presence_config_inter_frame_slow_cutoff_set>
			acc_detector_presence_config_inter_output_time_const_set(presence_config, 2.0f);
 8005c66:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f002 faf6 	bl	800825c <acc_detector_presence_config_inter_output_time_const_set>
			acc_detector_presence_config_inter_frame_presence_timeout_set(presence_config, 3);
 8005c70:	2103      	movs	r1, #3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f002 fa6e 	bl	8008154 <acc_detector_presence_config_inter_frame_presence_timeout_set>
			acc_detector_presence_config_inter_phase_boost_set(presence_config, false);
 8005c78:	2100      	movs	r1, #0
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f002 fa76 	bl	800816c <acc_detector_presence_config_inter_phase_boost_set>

			break;
 8005c80:	e0ed      	b.n	8005e5e <set_config+0x452>

		case PRESENCE_PRESET_CONFIG_LONG_RANGE:
			acc_detector_presence_config_start_set(presence_config, 5.0f);
 8005c82:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f002 f9e0 	bl	800804c <acc_detector_presence_config_start_set>
			acc_detector_presence_config_end_set(presence_config, 7.5f);
 8005c8c:	eeb1 0a0e 	vmov.f32	s0, #30	@ 0x40f00000  7.5
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f002 f9e7 	bl	8008064 <acc_detector_presence_config_end_set>
			acc_detector_presence_config_automatic_subsweeps_set(presence_config, true);
 8005c96:	2101      	movs	r1, #1
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f002 faeb 	bl	8008274 <acc_detector_presence_config_automatic_subsweeps_set>
			acc_detector_presence_config_signal_quality_set(presence_config, 10.0f);
 8005c9e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f002 faf2 	bl	800828c <acc_detector_presence_config_signal_quality_set>
			acc_detector_presence_config_inter_frame_idle_state_set(presence_config, ACC_CONFIG_IDLE_STATE_DEEP_SLEEP);
 8005ca8:	2100      	movs	r1, #0
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f002 fa0a 	bl	80080c4 <acc_detector_presence_config_inter_frame_idle_state_set>
			acc_detector_presence_config_sweeps_per_frame_set(presence_config, 16);
 8005cb0:	2110      	movs	r1, #16
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f002 fa1e 	bl	80080f4 <acc_detector_presence_config_sweeps_per_frame_set>
			acc_detector_presence_config_frame_rate_set(presence_config, 12.0f);
 8005cb8:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f002 fa25 	bl	800810c <acc_detector_presence_config_frame_rate_set>
			acc_detector_presence_config_frame_rate_app_driven_set(presence_config, false);
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f002 fa2d 	bl	8008124 <acc_detector_presence_config_frame_rate_app_driven_set>
			acc_detector_presence_config_reset_filters_on_prepare_set(presence_config, true);
 8005cca:	2101      	movs	r1, #1
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f002 fa35 	bl	800813c <acc_detector_presence_config_reset_filters_on_prepare_set>
			acc_detector_presence_config_intra_detection_set(presence_config, true);
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f002 fa55 	bl	8008184 <acc_detector_presence_config_intra_detection_set>
			acc_detector_presence_config_intra_detection_threshold_set(presence_config, 1.2f);
 8005cda:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8005d74 <set_config+0x368>
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f002 fa5c 	bl	800819c <acc_detector_presence_config_intra_detection_threshold_set>
			acc_detector_presence_config_intra_frame_time_const_set(presence_config, 0.15f);
 8005ce4:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8005d50 <set_config+0x344>
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f002 fa9f 	bl	800822c <acc_detector_presence_config_intra_frame_time_const_set>
			acc_detector_presence_config_intra_output_time_const_set(presence_config, 0.3f);
 8005cee:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8005d70 <set_config+0x364>
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f002 faa6 	bl	8008244 <acc_detector_presence_config_intra_output_time_const_set>
			acc_detector_presence_config_inter_detection_set(presence_config, true);
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f002 fa5a 	bl	80081b4 <acc_detector_presence_config_inter_detection_set>
			acc_detector_presence_config_inter_detection_threshold_set(presence_config, 0.8f);
 8005d00:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8005d5c <set_config+0x350>
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f002 fa61 	bl	80081cc <acc_detector_presence_config_inter_detection_threshold_set>
			acc_detector_presence_config_inter_frame_deviation_time_const_set(presence_config, 0.5f);
 8005d0a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f002 fa68 	bl	80081e4 <acc_detector_presence_config_inter_frame_deviation_time_const_set>
			acc_detector_presence_config_inter_frame_fast_cutoff_set(presence_config, 6.0f);
 8005d14:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f002 fa6f 	bl	80081fc <acc_detector_presence_config_inter_frame_fast_cutoff_set>
			acc_detector_presence_config_inter_frame_slow_cutoff_set(presence_config, 0.20f);
 8005d1e:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8005d78 <set_config+0x36c>
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f002 fa76 	bl	8008214 <acc_detector_presence_config_inter_frame_slow_cutoff_set>
			acc_detector_presence_config_inter_output_time_const_set(presence_config, 2.0f);
 8005d28:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f002 fa95 	bl	800825c <acc_detector_presence_config_inter_output_time_const_set>
			acc_detector_presence_config_inter_frame_presence_timeout_set(presence_config, 3);
 8005d32:	2103      	movs	r1, #3
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f002 fa0d 	bl	8008154 <acc_detector_presence_config_inter_frame_presence_timeout_set>
			acc_detector_presence_config_inter_phase_boost_set(presence_config, false);
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f002 fa15 	bl	800816c <acc_detector_presence_config_inter_phase_boost_set>

			break;
 8005d42:	e08c      	b.n	8005e5e <set_config+0x452>
 8005d44:	3ecccccd 	.word	0x3ecccccd
 8005d48:	3f19999a 	.word	0x3f19999a
 8005d4c:	3fb33333 	.word	0x3fb33333
 8005d50:	3e19999a 	.word	0x3e19999a
 8005d54:	3d75c28f 	.word	0x3d75c28f
 8005d58:	3fa66666 	.word	0x3fa66666
 8005d5c:	3f4ccccd 	.word	0x3f4ccccd
 8005d60:	3ec28f5c 	.word	0x3ec28f5c
 8005d64:	3f2b851f 	.word	0x3f2b851f
 8005d68:	3f333333 	.word	0x3f333333
 8005d6c:	3fd9999a 	.word	0x3fd9999a
 8005d70:	3e99999a 	.word	0x3e99999a
 8005d74:	3f99999a 	.word	0x3f99999a
 8005d78:	3e4ccccd 	.word	0x3e4ccccd

		case PRESENCE_PRESET_CONFIG_LOW_POWER_WAKEUP:
			acc_detector_presence_config_start_set(presence_config, 0.38f);
 8005d7c:	ed1f 0a08 	vldr	s0, [pc, #-32]	@ 8005d60 <set_config+0x354>
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f002 f963 	bl	800804c <acc_detector_presence_config_start_set>
			acc_detector_presence_config_end_set(presence_config, 0.67f);
 8005d86:	ed1f 0a09 	vldr	s0, [pc, #-36]	@ 8005d64 <set_config+0x358>
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f002 f96a 	bl	8008064 <acc_detector_presence_config_end_set>
			acc_detector_presence_config_automatic_subsweeps_set(presence_config, false);
 8005d90:	2100      	movs	r1, #0
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f002 fa6e 	bl	8008274 <acc_detector_presence_config_automatic_subsweeps_set>
			acc_detector_presence_config_signal_quality_set(presence_config, 20.0f);
 8005d98:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f002 fa75 	bl	800828c <acc_detector_presence_config_signal_quality_set>
			acc_detector_presence_config_auto_step_length_set(presence_config, true);
 8005da2:	2101      	movs	r1, #1
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f002 f969 	bl	800807c <acc_detector_presence_config_auto_step_length_set>
			acc_detector_presence_config_auto_profile_set(presence_config, false);
 8005daa:	2100      	movs	r1, #0
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f002 f97d 	bl	80080ac <acc_detector_presence_config_auto_profile_set>
			acc_detector_presence_config_profile_set(presence_config, ACC_CONFIG_PROFILE_5);
 8005db2:	2105      	movs	r1, #5
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f002 f96d 	bl	8008094 <acc_detector_presence_config_profile_set>
			acc_detector_presence_config_inter_frame_idle_state_set(presence_config, ACC_CONFIG_IDLE_STATE_DEEP_SLEEP);
 8005dba:	2100      	movs	r1, #0
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f002 f981 	bl	80080c4 <acc_detector_presence_config_inter_frame_idle_state_set>
			acc_detector_presence_config_hwaas_set(presence_config, 8);
 8005dc2:	2108      	movs	r1, #8
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f002 f989 	bl	80080dc <acc_detector_presence_config_hwaas_set>
			acc_detector_presence_config_sweeps_per_frame_set(presence_config, 8);
 8005dca:	2108      	movs	r1, #8
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f002 f991 	bl	80080f4 <acc_detector_presence_config_sweeps_per_frame_set>
			acc_detector_presence_config_frame_rate_set(presence_config, 0.7f);
 8005dd2:	ed1f 0a1b 	vldr	s0, [pc, #-108]	@ 8005d68 <set_config+0x35c>
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f002 f998 	bl	800810c <acc_detector_presence_config_frame_rate_set>
			acc_detector_presence_config_frame_rate_app_driven_set(presence_config, false);
 8005ddc:	2100      	movs	r1, #0
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f002 f9a0 	bl	8008124 <acc_detector_presence_config_frame_rate_app_driven_set>
			acc_detector_presence_config_reset_filters_on_prepare_set(presence_config, true);
 8005de4:	2101      	movs	r1, #1
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f002 f9a8 	bl	800813c <acc_detector_presence_config_reset_filters_on_prepare_set>
			acc_detector_presence_config_intra_detection_set(presence_config, true);
 8005dec:	2101      	movs	r1, #1
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f002 f9c8 	bl	8008184 <acc_detector_presence_config_intra_detection_set>
			acc_detector_presence_config_intra_detection_threshold_set(presence_config, 1.7f);
 8005df4:	ed1f 0a23 	vldr	s0, [pc, #-140]	@ 8005d6c <set_config+0x360>
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f002 f9cf 	bl	800819c <acc_detector_presence_config_intra_detection_threshold_set>
			acc_detector_presence_config_intra_frame_time_const_set(presence_config, 0.3f);
 8005dfe:	ed1f 0a24 	vldr	s0, [pc, #-144]	@ 8005d70 <set_config+0x364>
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f002 fa12 	bl	800822c <acc_detector_presence_config_intra_frame_time_const_set>
			acc_detector_presence_config_intra_output_time_const_set(presence_config, 0.3f);
 8005e08:	ed1f 0a27 	vldr	s0, [pc, #-156]	@ 8005d70 <set_config+0x364>
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f002 fa19 	bl	8008244 <acc_detector_presence_config_intra_output_time_const_set>
			acc_detector_presence_config_inter_detection_set(presence_config, true);
 8005e12:	2101      	movs	r1, #1
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f002 f9cd 	bl	80081b4 <acc_detector_presence_config_inter_detection_set>
			acc_detector_presence_config_inter_detection_threshold_set(presence_config, 1.2f);
 8005e1a:	ed1f 0a2a 	vldr	s0, [pc, #-168]	@ 8005d74 <set_config+0x368>
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f002 f9d4 	bl	80081cc <acc_detector_presence_config_inter_detection_threshold_set>
			acc_detector_presence_config_inter_frame_deviation_time_const_set(presence_config, 0.5f);
 8005e24:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f002 f9db 	bl	80081e4 <acc_detector_presence_config_inter_frame_deviation_time_const_set>
			acc_detector_presence_config_inter_frame_fast_cutoff_set(presence_config, 5.0f);
 8005e2e:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f002 f9e2 	bl	80081fc <acc_detector_presence_config_inter_frame_fast_cutoff_set>
			acc_detector_presence_config_inter_frame_slow_cutoff_set(presence_config, 0.20f);
 8005e38:	ed1f 0a31 	vldr	s0, [pc, #-196]	@ 8005d78 <set_config+0x36c>
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f002 f9e9 	bl	8008214 <acc_detector_presence_config_inter_frame_slow_cutoff_set>
			acc_detector_presence_config_inter_output_time_const_set(presence_config, 0.5f);
 8005e42:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f002 fa08 	bl	800825c <acc_detector_presence_config_inter_output_time_const_set>
			acc_detector_presence_config_inter_frame_presence_timeout_set(presence_config, 2);
 8005e4c:	2102      	movs	r1, #2
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f002 f980 	bl	8008154 <acc_detector_presence_config_inter_frame_presence_timeout_set>
			acc_detector_presence_config_inter_phase_boost_set(presence_config, false);
 8005e54:	2100      	movs	r1, #0
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f002 f988 	bl	800816c <acc_detector_presence_config_inter_phase_boost_set>

			break;
 8005e5c:	bf00      	nop
	}
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop

08005e68 <disable_interrupts>:
#define STM32_MAX_TRANSFER_SIZE 65535
#endif


static inline void disable_interrupts(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005e6c:	b672      	cpsid	i
}
 8005e6e:	bf00      	nop
	__disable_irq();
}
 8005e70:	bf00      	nop
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8005e7e:	b662      	cpsie	i
}
 8005e80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e82:	f3bf 8f6f 	isb	sy
}
 8005e86:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8005e88:	bf00      	nop
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
	...

08005e94 <acc_hal_integration_sensor_transfer16>:


static void acc_hal_integration_sensor_transfer16(acc_sensor_id_t sensor_id, uint16_t *buffer, size_t buffer_length)


{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 8005ea0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ea4:	617b      	str	r3, [r7, #20]

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A121_SPI_HANDLE, (uint8_t *)buffer, (uint8_t *)buffer, buffer_length, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	4803      	ldr	r0, [pc, #12]	@ (8005ec4 <acc_hal_integration_sensor_transfer16+0x30>)
 8005eb6:	f7fd fe8e 	bl	8003bd6 <HAL_SPI_TransmitReceive>

#endif
}
 8005eba:	bf00      	nop
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	200002a8 	.word	0x200002a8

08005ec8 <acc_hal_integration_sensor_supply_on>:


void acc_hal_integration_sensor_supply_on(acc_sensor_id_t sensor_id)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <acc_hal_integration_sensor_supply_off>:


void acc_hal_integration_sensor_supply_off(acc_sensor_id_t sensor_id)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <acc_hal_integration_sensor_enable>:


void acc_hal_integration_sensor_enable(acc_sensor_id_t sensor_id)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005efe:	4805      	ldr	r0, [pc, #20]	@ (8005f14 <acc_hal_integration_sensor_enable+0x24>)
 8005f00:	f7fb fc3a 	bl	8001778 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	acc_integration_sleep_ms(2);
 8005f04:	2002      	movs	r0, #2
 8005f06:	f000 fad3 	bl	80064b0 <acc_integration_sleep_ms>
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	48000400 	.word	0x48000400

08005f18 <acc_hal_integration_sensor_disable>:


void acc_hal_integration_sensor_disable(acc_sensor_id_t sensor_id)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8005f20:	2200      	movs	r2, #0
 8005f22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f26:	4805      	ldr	r0, [pc, #20]	@ (8005f3c <acc_hal_integration_sensor_disable+0x24>)
 8005f28:	f7fb fc26 	bl	8001778 <HAL_GPIO_WritePin>

	// Wait after disable to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	acc_integration_sleep_ms(2);
 8005f2c:	2002      	movs	r0, #2
 8005f2e:	f000 fabf 	bl	80064b0 <acc_integration_sleep_ms>
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	48000400 	.word	0x48000400

08005f40 <acc_hal_integration_wait_for_sensor_interrupt>:


bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 8005f4a:	f7fa ff7f 	bl	8000e4c <HAL_GetTick>
 8005f4e:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(INTERRUPT_GPIO_Port, INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8005f50:	e00b      	b.n	8005f6a <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 8005f52:	f7ff ff89 	bl	8005e68 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(INTERRUPT_GPIO_Port, INTERRUPT_Pin) != GPIO_PIN_SET)
 8005f56:	2108      	movs	r1, #8
 8005f58:	4812      	ldr	r0, [pc, #72]	@ (8005fa4 <acc_hal_integration_wait_for_sensor_interrupt+0x64>)
 8005f5a:	f7fb fbf5 	bl	8001748 <HAL_GPIO_ReadPin>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d000      	beq.n	8005f66 <acc_hal_integration_wait_for_sensor_interrupt+0x26>
		{
			__WFI();
 8005f64:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 8005f66:	f7ff ff88 	bl	8005e7a <enable_interrupts>
	while ((HAL_GPIO_ReadPin(INTERRUPT_GPIO_Port, INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8005f6a:	2108      	movs	r1, #8
 8005f6c:	480d      	ldr	r0, [pc, #52]	@ (8005fa4 <acc_hal_integration_wait_for_sensor_interrupt+0x64>)
 8005f6e:	f7fb fbeb 	bl	8001748 <HAL_GPIO_ReadPin>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d007      	beq.n	8005f88 <acc_hal_integration_wait_for_sensor_interrupt+0x48>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8005f78:	f7fa ff68 	bl	8000e4c <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(INTERRUPT_GPIO_Port, INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d8e4      	bhi.n	8005f52 <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(INTERRUPT_GPIO_Port, INTERRUPT_Pin) == GPIO_PIN_SET;
 8005f88:	2108      	movs	r1, #8
 8005f8a:	4806      	ldr	r0, [pc, #24]	@ (8005fa4 <acc_hal_integration_wait_for_sensor_interrupt+0x64>)
 8005f8c:	f7fb fbdc 	bl	8001748 <HAL_GPIO_ReadPin>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	bf0c      	ite	eq
 8005f96:	2301      	moveq	r3, #1
 8005f98:	2300      	movne	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	48000400 	.word	0x48000400

08005fa8 <acc_hal_rss_integration_get_implementation>:


const acc_hal_a121_t *acc_hal_rss_integration_get_implementation(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
		.log      = acc_integration_log,

		.optimization.transfer16 = acc_hal_integration_sensor_transfer16,
	};

	return &val;
 8005fac:	4b02      	ldr	r3, [pc, #8]	@ (8005fb8 <acc_hal_rss_integration_get_implementation+0x10>)
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	08012b08 	.word	0x08012b08

08005fbc <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8005fbc:	b40c      	push	{r2, r3}
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b0b4      	sub	sp, #208	@ 0xd0
 8005fc2:	af04      	add	r7, sp, #16
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	6039      	str	r1, [r7, #0]
 8005fc8:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 8005fca:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8005fce:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8005fd0:	f107 000c 	add.w	r0, r7, #12
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005fda:	2196      	movs	r1, #150	@ 0x96
 8005fdc:	f009 fe66 	bl	800fcac <vsniprintf>
 8005fe0:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8005fe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005fe8:	2b95      	cmp	r3, #149	@ 0x95
 8005fea:	dd0b      	ble.n	8006004 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8005fec:	232e      	movs	r3, #46	@ 0x2e
 8005fee:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8005ff2:	232e      	movs	r3, #46	@ 0x2e
 8005ff4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 8005ff8:	232e      	movs	r3, #46	@ 0x2e
 8005ffa:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 8006004:	f000 fa8c 	bl	8006520 <acc_integration_get_time>
 8006008:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 800600c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006010:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8006014:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006018:	4a2c      	ldr	r2, [pc, #176]	@ (80060cc <acc_integration_log+0x110>)
 800601a:	fba2 2303 	umull	r2, r3, r2, r3
 800601e:	0d5b      	lsrs	r3, r3, #21
 8006020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8006024:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006028:	4a29      	ldr	r2, [pc, #164]	@ (80060d0 <acc_integration_log+0x114>)
 800602a:	fba2 2303 	umull	r2, r3, r2, r3
 800602e:	0b9a      	lsrs	r2, r3, #14
 8006030:	4b28      	ldr	r3, [pc, #160]	@ (80060d4 <acc_integration_log+0x118>)
 8006032:	fba3 1302 	umull	r1, r3, r3, r2
 8006036:	0959      	lsrs	r1, r3, #5
 8006038:	460b      	mov	r3, r1
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	1a5b      	subs	r3, r3, r1
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 8006046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800604a:	4a23      	ldr	r2, [pc, #140]	@ (80060d8 <acc_integration_log+0x11c>)
 800604c:	fba2 2303 	umull	r2, r3, r2, r3
 8006050:	099a      	lsrs	r2, r3, #6
 8006052:	4b20      	ldr	r3, [pc, #128]	@ (80060d4 <acc_integration_log+0x118>)
 8006054:	fba3 1302 	umull	r1, r3, r3, r2
 8006058:	0959      	lsrs	r1, r3, #5
 800605a:	460b      	mov	r3, r1
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	1a5b      	subs	r3, r3, r1
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	unsigned int milliseconds = timestamp % 1000;
 8006068:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800606c:	4a1a      	ldr	r2, [pc, #104]	@ (80060d8 <acc_integration_log+0x11c>)
 800606e:	fba2 1203 	umull	r1, r2, r2, r3
 8006072:	0992      	lsrs	r2, r2, #6
 8006074:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006078:	fb01 f202 	mul.w	r2, r1, r2
 800607c:	1a9b      	subs	r3, r3, r2
 800607e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	2b04      	cmp	r3, #4
 8006086:	d803      	bhi.n	8006090 <acc_integration_log+0xd4>
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	4a14      	ldr	r2, [pc, #80]	@ (80060dc <acc_integration_log+0x120>)
 800608c:	5cd3      	ldrb	r3, [r2, r3]
 800608e:	e000      	b.n	8006092 <acc_integration_log+0xd6>
 8006090:	233f      	movs	r3, #63	@ 0x3f
 8006092:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8006096:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800609a:	f107 020c 	add.w	r2, r7, #12
 800609e:	9203      	str	r2, [sp, #12]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	9202      	str	r2, [sp, #8]
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80060b4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80060b8:	4809      	ldr	r0, [pc, #36]	@ (80060e0 <acc_integration_log+0x124>)
 80060ba:	f009 fd19 	bl	800faf0 <iprintf>

	va_end(ap);
}
 80060be:	bf00      	nop
 80060c0:	37c0      	adds	r7, #192	@ 0xc0
 80060c2:	46bd      	mov	sp, r7
 80060c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060c8:	b002      	add	sp, #8
 80060ca:	4770      	bx	lr
 80060cc:	95217cb1 	.word	0x95217cb1
 80060d0:	45e7b273 	.word	0x45e7b273
 80060d4:	88888889 	.word	0x88888889
 80060d8:	10624dd3 	.word	0x10624dd3
 80060dc:	08012aa8 	.word	0x08012aa8
 80060e0:	08012a84 	.word	0x08012a84

080060e4 <disable_interrupts>:
	uint32_t RCC_GPIO_CLK_ENABLE; /*!< GPIO Port Clock Enable               */
} gpio_config_t;


static inline void disable_interrupts(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80060e8:	b672      	cpsid	i
}
 80060ea:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80060ec:	f3bf 8f4f 	dsb	sy
}
 80060f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060f2:	f3bf 8f6f 	isb	sy
}
 80060f6:	bf00      	nop
	__disable_irq();
	__DSB();
	__ISB();
}
 80060f8:	bf00      	nop
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8006102:	b480      	push	{r7}
 8006104:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8006106:	b662      	cpsie	i
}
 8006108:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800610a:	f3bf 8f4f 	dsb	sy
}
 800610e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006110:	f3bf 8f6f 	isb	sy
}
 8006114:	bf00      	nop
	__enable_irq();
	__DSB();
	__ISB();
}
 8006116:	bf00      	nop
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <rtc_time_to_tick>:
 *
 * @param[in] time RTC time
 * @return rtc ticks in ms
 */
static uint32_t rtc_time_to_tick(RTC_TimeTypeDef *time)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
	uint32_t rtc_ticks_ms = 0;
 8006128:	2300      	movs	r3, #0
 800612a:	60fb      	str	r3, [r7, #12]

	if (time->Hours)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <rtc_time_to_tick+0x28>
	{
		rtc_ticks_ms += time->Hours * 60 * 60 * 1000;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	4b1e      	ldr	r3, [pc, #120]	@ (80061b4 <rtc_time_to_tick+0x94>)
 800613c:	fb02 f303 	mul.w	r3, r2, r3
 8006140:	461a      	mov	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
	}

	if (time->Minutes)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <rtc_time_to_tick+0x46>
	{
		rtc_ticks_ms += time->Minutes * 60 * 1000;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	461a      	mov	r2, r3
 8006156:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800615a:	fb02 f303 	mul.w	r3, r2, r3
 800615e:	461a      	mov	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
	}

	if (time->Seconds)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	789b      	ldrb	r3, [r3, #2]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <rtc_time_to_tick+0x64>
	{
		rtc_ticks_ms += time->Seconds * 1000;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	789b      	ldrb	r3, [r3, #2]
 8006172:	461a      	mov	r2, r3
 8006174:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006178:	fb02 f303 	mul.w	r3, r2, r3
 800617c:	461a      	mov	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
	}

	rtc_ticks_ms += ((time->SecondFraction - time->SubSeconds) * 1000) / (time->SecondFraction + 1);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006192:	fb03 f202 	mul.w	r2, r3, r2
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	3301      	adds	r3, #1
 800619c:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]

	return rtc_ticks_ms;
 80061a6:	68fb      	ldr	r3, [r7, #12]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	0036ee80 	.word	0x0036ee80

080061b8 <rtc_tick_to_time>:
 *
 * @param[in] tick rtc ticks in ms
 * @param[out] time RTC time
 */
static void rtc_tick_to_time(uint32_t tick, RTC_TimeTypeDef *time)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
	uint32_t rtc_ticks_ms = tick;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]

	time->SecondFraction = MODULE_RTC_HANDLE.Init.SynchPrediv;
 80061c6:	4b36      	ldr	r3, [pc, #216]	@ (80062a0 <rtc_tick_to_time+0xe8>)
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	609a      	str	r2, [r3, #8]

	time->Hours = (rtc_ticks_ms / (60 * 60 * 1000)) % 24;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4a34      	ldr	r2, [pc, #208]	@ (80062a4 <rtc_tick_to_time+0xec>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	0d59      	lsrs	r1, r3, #21
 80061d8:	4b33      	ldr	r3, [pc, #204]	@ (80062a8 <rtc_tick_to_time+0xf0>)
 80061da:	fba3 2301 	umull	r2, r3, r3, r1
 80061de:	091a      	lsrs	r2, r3, #4
 80061e0:	4613      	mov	r3, r2
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	4413      	add	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	1aca      	subs	r2, r1, r3
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	701a      	strb	r2, [r3, #0]

	rtc_ticks_ms = rtc_ticks_ms % (60 * 60 * 1000);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4a2c      	ldr	r2, [pc, #176]	@ (80062a4 <rtc_tick_to_time+0xec>)
 80061f4:	fba2 1203 	umull	r1, r2, r2, r3
 80061f8:	0d52      	lsrs	r2, r2, #21
 80061fa:	492c      	ldr	r1, [pc, #176]	@ (80062ac <rtc_tick_to_time+0xf4>)
 80061fc:	fb01 f202 	mul.w	r2, r1, r2
 8006200:	1a9b      	subs	r3, r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

	time->Minutes = (rtc_ticks_ms / (60 * 1000)) % 60;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4a2a      	ldr	r2, [pc, #168]	@ (80062b0 <rtc_tick_to_time+0xf8>)
 8006208:	fba2 2303 	umull	r2, r3, r2, r3
 800620c:	0b99      	lsrs	r1, r3, #14
 800620e:	4b29      	ldr	r3, [pc, #164]	@ (80062b4 <rtc_tick_to_time+0xfc>)
 8006210:	fba3 2301 	umull	r2, r3, r3, r1
 8006214:	095a      	lsrs	r2, r3, #5
 8006216:	4613      	mov	r3, r2
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	1aca      	subs	r2, r1, r3
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	705a      	strb	r2, [r3, #1]

	rtc_ticks_ms = rtc_ticks_ms % (60 * 1000);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4a21      	ldr	r2, [pc, #132]	@ (80062b0 <rtc_tick_to_time+0xf8>)
 800622a:	fba2 1203 	umull	r1, r2, r2, r3
 800622e:	0b92      	lsrs	r2, r2, #14
 8006230:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8006234:	fb01 f202 	mul.w	r2, r1, r2
 8006238:	1a9b      	subs	r3, r3, r2
 800623a:	60fb      	str	r3, [r7, #12]

	time->Seconds = (rtc_ticks_ms / 1000) % 60;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4a1e      	ldr	r2, [pc, #120]	@ (80062b8 <rtc_tick_to_time+0x100>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	0999      	lsrs	r1, r3, #6
 8006246:	4b1b      	ldr	r3, [pc, #108]	@ (80062b4 <rtc_tick_to_time+0xfc>)
 8006248:	fba3 2301 	umull	r2, r3, r3, r1
 800624c:	095a      	lsrs	r2, r3, #5
 800624e:	4613      	mov	r3, r2
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	1a9b      	subs	r3, r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	1aca      	subs	r2, r1, r3
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	709a      	strb	r2, [r3, #2]

	rtc_ticks_ms = rtc_ticks_ms % 1000;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4a15      	ldr	r2, [pc, #84]	@ (80062b8 <rtc_tick_to_time+0x100>)
 8006262:	fba2 1203 	umull	r1, r2, r2, r3
 8006266:	0992      	lsrs	r2, r2, #6
 8006268:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800626c:	fb01 f202 	mul.w	r2, r1, r2
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	60fb      	str	r3, [r7, #12]

	time->SubSeconds = time->SecondFraction - (rtc_ticks_ms * (time->SecondFraction + 1)) / 1000;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	3301      	adds	r3, #1
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	490c      	ldr	r1, [pc, #48]	@ (80062b8 <rtc_tick_to_time+0x100>)
 8006286:	fba1 1303 	umull	r1, r3, r1, r3
 800628a:	099b      	lsrs	r3, r3, #6
 800628c:	1ad2      	subs	r2, r2, r3
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	605a      	str	r2, [r3, #4]
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20000284 	.word	0x20000284
 80062a4:	95217cb1 	.word	0x95217cb1
 80062a8:	aaaaaaab 	.word	0xaaaaaaab
 80062ac:	0036ee80 	.word	0x0036ee80
 80062b0:	45e7b273 	.word	0x45e7b273
 80062b4:	88888889 	.word	0x88888889
 80062b8:	10624dd3 	.word	0x10624dd3

080062bc <get_rtc_tick>:
 * @brief Get RTC ticks based on current RTC time
 *
 * @return The current RTC ticks in ms
 */
static uint32_t get_rtc_tick(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
	RTC_DateTypeDef rtc_date = { 0 };
 80062c2:	2300      	movs	r3, #0
 80062c4:	617b      	str	r3, [r7, #20]
	RTC_TimeTypeDef rtc_time = { 0 };
 80062c6:	463b      	mov	r3, r7
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	605a      	str	r2, [r3, #4]
 80062ce:	609a      	str	r2, [r3, #8]
 80062d0:	60da      	str	r2, [r3, #12]
 80062d2:	611a      	str	r2, [r3, #16]

	/*  Wait until any pending shift operation is completed */
	while ((MODULE_RTC_HANDLE.Instance->ISR & RTC_ISR_SHPF) != RESET)
 80062d4:	bf00      	nop
 80062d6:	4b13      	ldr	r3, [pc, #76]	@ (8006324 <get_rtc_tick+0x68>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1f8      	bne.n	80062d6 <get_rtc_tick+0x1a>
	{
		;
	}

	if (HAL_RTC_GetTime(&MODULE_RTC_HANDLE, &rtc_time, RTC_FORMAT_BIN) != HAL_OK)
 80062e4:	463b      	mov	r3, r7
 80062e6:	2200      	movs	r2, #0
 80062e8:	4619      	mov	r1, r3
 80062ea:	480e      	ldr	r0, [pc, #56]	@ (8006324 <get_rtc_tick+0x68>)
 80062ec:	f7fc fe97 	bl	800301e <HAL_RTC_GetTime>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <get_rtc_tick+0x3e>
	{
		Error_Handler();
 80062f6:	f000 fc01 	bl	8006afc <Error_Handler>
	}

	if (HAL_RTC_GetDate(&MODULE_RTC_HANDLE, &rtc_date, RTC_FORMAT_BIN) != HAL_OK)
 80062fa:	f107 0314 	add.w	r3, r7, #20
 80062fe:	2200      	movs	r2, #0
 8006300:	4619      	mov	r1, r3
 8006302:	4808      	ldr	r0, [pc, #32]	@ (8006324 <get_rtc_tick+0x68>)
 8006304:	f7fc ff6e 	bl	80031e4 <HAL_RTC_GetDate>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <get_rtc_tick+0x56>
	{
		Error_Handler();
 800630e:	f000 fbf5 	bl	8006afc <Error_Handler>
	}

	return rtc_time_to_tick(&rtc_time);
 8006312:	463b      	mov	r3, r7
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff ff03 	bl	8006120 <rtc_time_to_tick>
 800631a:	4603      	mov	r3, r0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20000284 	.word	0x20000284

08006328 <rtc_set_next_wakeup_time>:

/**
 * @brief Function for setting the next wakeup time from the RTC interrupt.
 */
static void rtc_set_next_wakeup_time(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08c      	sub	sp, #48	@ 0x30
 800632c:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef alarm = { {0}, 0, 0, 0, 0, 0, 0};
 800632e:	1d3b      	adds	r3, r7, #4
 8006330:	222c      	movs	r2, #44	@ 0x2c
 8006332:	2100      	movs	r1, #0
 8006334:	4618      	mov	r0, r3
 8006336:	f009 fd75 	bl	800fe24 <memset>

	if (periodic_sleep_time_ms != 0)
 800633a:	4b1f      	ldr	r3, [pc, #124]	@ (80063b8 <rtc_set_next_wakeup_time+0x90>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d029      	beq.n	8006396 <rtc_set_next_wakeup_time+0x6e>
	{
		rtc_tick_to_time(get_rtc_tick() + periodic_sleep_time_ms, &alarm.AlarmTime);
 8006342:	f7ff ffbb 	bl	80062bc <get_rtc_tick>
 8006346:	4602      	mov	r2, r0
 8006348:	4b1b      	ldr	r3, [pc, #108]	@ (80063b8 <rtc_set_next_wakeup_time+0x90>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4413      	add	r3, r2
 800634e:	1d3a      	adds	r2, r7, #4
 8006350:	4611      	mov	r1, r2
 8006352:	4618      	mov	r0, r3
 8006354:	f7ff ff30 	bl	80061b8 <rtc_tick_to_time>

		alarm.Alarm              = RTC_ALARM_A;
 8006358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800635c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		alarm.AlarmMask          = RTC_ALARMMASK_DATEWEEKDAY;
 800635e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006362:	61bb      	str	r3, [r7, #24]
		alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14;
 8006364:	f04f 6360 	mov.w	r3, #234881024	@ 0xe000000
 8006368:	623b      	str	r3, [r7, #32]

		if (HAL_RTC_DeactivateAlarm(&MODULE_RTC_HANDLE, RTC_ALARM_A) != HAL_OK)
 800636a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800636e:	4813      	ldr	r0, [pc, #76]	@ (80063bc <rtc_set_next_wakeup_time+0x94>)
 8006370:	f7fd f8c2 	bl	80034f8 <HAL_RTC_DeactivateAlarm>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <rtc_set_next_wakeup_time+0x56>
		{
			Error_Handler();
 800637a:	f000 fbbf 	bl	8006afc <Error_Handler>
		}

		if (HAL_RTC_SetAlarm_IT(&MODULE_RTC_HANDLE, &alarm, RTC_FORMAT_BIN) != HAL_OK)
 800637e:	1d3b      	adds	r3, r7, #4
 8006380:	2200      	movs	r2, #0
 8006382:	4619      	mov	r1, r3
 8006384:	480d      	ldr	r0, [pc, #52]	@ (80063bc <rtc_set_next_wakeup_time+0x94>)
 8006386:	f7fc ff7b 	bl	8003280 <HAL_RTC_SetAlarm_IT>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00f      	beq.n	80063b0 <rtc_set_next_wakeup_time+0x88>
		{
			Error_Handler();
 8006390:	f000 fbb4 	bl	8006afc <Error_Handler>
			Error_Handler();
		}

		rtc_alarm_triggered = false;
	}
}
 8006394:	e00c      	b.n	80063b0 <rtc_set_next_wakeup_time+0x88>
		if (HAL_RTC_DeactivateAlarm(&MODULE_RTC_HANDLE, RTC_ALARM_A) != HAL_OK)
 8006396:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800639a:	4808      	ldr	r0, [pc, #32]	@ (80063bc <rtc_set_next_wakeup_time+0x94>)
 800639c:	f7fd f8ac 	bl	80034f8 <HAL_RTC_DeactivateAlarm>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <rtc_set_next_wakeup_time+0x82>
			Error_Handler();
 80063a6:	f000 fba9 	bl	8006afc <Error_Handler>
		rtc_alarm_triggered = false;
 80063aa:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <rtc_set_next_wakeup_time+0x98>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
}
 80063b0:	bf00      	nop
 80063b2:	3730      	adds	r7, #48	@ 0x30
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	2000022c 	.word	0x2000022c
 80063bc:	20000284 	.word	0x20000284
 80063c0:	20000228 	.word	0x20000228

080063c4 <HAL_RTC_AlarmAEventCallback>:

/**
 * @brief IRQ Handler for RTC Alarm
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *rtc)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
	(void)rtc;

	rtc_alarm_triggered = true;
 80063cc:	4b04      	ldr	r3, [pc, #16]	@ (80063e0 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	701a      	strb	r2, [r3, #0]
	rtc_set_next_wakeup_time();
 80063d2:	f7ff ffa9 	bl	8006328 <rtc_set_next_wakeup_time>
}
 80063d6:	bf00      	nop
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000228 	.word	0x20000228

080063e4 <HAL_RTCEx_WakeUpTimerEventCallback>:

/**
 * @brief IRQ Handler for RTC Wakeup
 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *rtc)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
	(void)rtc;

	rtc_wakeup_triggered = true;
 80063ec:	4b04      	ldr	r3, [pc, #16]	@ (8006400 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	701a      	strb	r2, [r3, #0]
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	20000229 	.word	0x20000229

08006404 <acc_integration_enable_wake_up>:


static void acc_integration_enable_wake_up(uint32_t time_usec)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
	uint32_t wakeup_clock;
	uint32_t wakeup_counter;

	rtc_wakeup_triggered = false;
 800640c:	4b1b      	ldr	r3, [pc, #108]	@ (800647c <acc_integration_enable_wake_up+0x78>)
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
	// RTC_WAKEUPCLOCK_RTCCLK_DIV16 gives 1÷32000×16 = 500  us resolution and max 32s
	// RTC_WAKEUPCLOCK_RTCCLK_DIV8  gives 1÷32000×8  = 250  us resolution and max 16s
	// RTC_WAKEUPCLOCK_RTCCLK_DIV4  gives 1÷32000×4  = 125  us resolution and max 8s
	// RTC_WAKEUPCLOCK_RTCCLK_DIV2  gives 1÷32000×2  = 62.5 us resolution and max 4s
	// RTC_WAKEUPCLOCK_CK_SPRE_16BITS gives            1000 ms resolution and max 18h
	if (time_usec > 30000000)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a1a      	ldr	r2, [pc, #104]	@ (8006480 <acc_integration_enable_wake_up+0x7c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d909      	bls.n	800642e <acc_integration_enable_wake_up+0x2a>
	{
		wakeup_clock   = RTC_WAKEUPCLOCK_CK_SPRE_16BITS;
 800641a:	2304      	movs	r3, #4
 800641c:	60fb      	str	r3, [r7, #12]
		wakeup_counter = (time_usec / 1000000) - 1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a18      	ldr	r2, [pc, #96]	@ (8006484 <acc_integration_enable_wake_up+0x80>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	0c9b      	lsrs	r3, r3, #18
 8006428:	3b01      	subs	r3, #1
 800642a:	60bb      	str	r3, [r7, #8]
 800642c:	e018      	b.n	8006460 <acc_integration_enable_wake_up+0x5c>
	}
	else if (time_usec > 100000)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a15      	ldr	r2, [pc, #84]	@ (8006488 <acc_integration_enable_wake_up+0x84>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d90a      	bls.n	800644c <acc_integration_enable_wake_up+0x48>
	{
		wakeup_clock   = RTC_WAKEUPCLOCK_RTCCLK_DIV16;
 8006436:	2300      	movs	r3, #0
 8006438:	60fb      	str	r3, [r7, #12]
		wakeup_counter = (time_usec * 2 / 1000) - 1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	4a13      	ldr	r2, [pc, #76]	@ (800648c <acc_integration_enable_wake_up+0x88>)
 8006440:	fba2 2303 	umull	r2, r3, r2, r3
 8006444:	099b      	lsrs	r3, r3, #6
 8006446:	3b01      	subs	r3, #1
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	e009      	b.n	8006460 <acc_integration_enable_wake_up+0x5c>
	}
	else
	{
		wakeup_clock   = RTC_WAKEUPCLOCK_RTCCLK_DIV2;
 800644c:	2303      	movs	r3, #3
 800644e:	60fb      	str	r3, [r7, #12]
		wakeup_counter = (time_usec * 16 / 1000) - 1;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	4a0d      	ldr	r2, [pc, #52]	@ (800648c <acc_integration_enable_wake_up+0x88>)
 8006456:	fba2 2303 	umull	r2, r3, r2, r3
 800645a:	099b      	lsrs	r3, r3, #6
 800645c:	3b01      	subs	r3, #1
 800645e:	60bb      	str	r3, [r7, #8]
	}

	if (HAL_RTCEx_SetWakeUpTimer_IT(&MODULE_RTC_HANDLE, wakeup_counter, wakeup_clock) != HAL_OK)
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	68b9      	ldr	r1, [r7, #8]
 8006464:	480a      	ldr	r0, [pc, #40]	@ (8006490 <acc_integration_enable_wake_up+0x8c>)
 8006466:	f7fd f9f1 	bl	800384c <HAL_RTCEx_SetWakeUpTimer_IT>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <acc_integration_enable_wake_up+0x70>
	{
		Error_Handler();
 8006470:	f000 fb44 	bl	8006afc <Error_Handler>
	}
}
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20000229 	.word	0x20000229
 8006480:	01c9c380 	.word	0x01c9c380
 8006484:	431bde83 	.word	0x431bde83
 8006488:	000186a0 	.word	0x000186a0
 800648c:	10624dd3 	.word	0x10624dd3
 8006490:	20000284 	.word	0x20000284

08006494 <acc_integration_disable_wake_up>:


static void acc_integration_disable_wake_up(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_DeactivateWakeUpTimer(&MODULE_RTC_HANDLE) != HAL_OK)
 8006498:	4804      	ldr	r0, [pc, #16]	@ (80064ac <acc_integration_disable_wake_up+0x18>)
 800649a:	f7fd fa6b 	bl	8003974 <HAL_RTCEx_DeactivateWakeUpTimer>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <acc_integration_disable_wake_up+0x14>
	{
		Error_Handler();
 80064a4:	f000 fb2a 	bl	8006afc <Error_Handler>
	}
}
 80064a8:	bf00      	nop
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20000284 	.word	0x20000284

080064b0 <acc_integration_sleep_ms>:


void acc_integration_sleep_ms(uint32_t time_msec)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	acc_integration_sleep_us(time_msec * 1000);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064be:	fb02 f303 	mul.w	r3, r2, r3
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f804 	bl	80064d0 <acc_integration_sleep_us>
}
 80064c8:	bf00      	nop
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <acc_integration_sleep_us>:


void acc_integration_sleep_us(uint32_t time_usec)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
	acc_integration_enable_wake_up(time_usec);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ff93 	bl	8006404 <acc_integration_enable_wake_up>

	while (!rtc_wakeup_triggered)
 80064de:	e00c      	b.n	80064fa <acc_integration_sleep_us+0x2a>
	{
		// Turn off interrupts
		disable_interrupts();
 80064e0:	f7ff fe00 	bl	80060e4 <disable_interrupts>

		if (!rtc_wakeup_triggered)
 80064e4:	4b0d      	ldr	r3, [pc, #52]	@ (800651c <acc_integration_sleep_us+0x4c>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f083 0301 	eor.w	r3, r3, #1
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d000      	beq.n	80064f6 <acc_integration_sleep_us+0x26>
		{
			__WFI();
 80064f4:	bf30      	wfi
		}

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
 80064f6:	f7ff fe04 	bl	8006102 <enable_interrupts>
	while (!rtc_wakeup_triggered)
 80064fa:	4b08      	ldr	r3, [pc, #32]	@ (800651c <acc_integration_sleep_us+0x4c>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f083 0301 	eor.w	r3, r3, #1
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1ea      	bne.n	80064e0 <acc_integration_sleep_us+0x10>
	}

	rtc_wakeup_triggered = false;
 800650a:	4b04      	ldr	r3, [pc, #16]	@ (800651c <acc_integration_sleep_us+0x4c>)
 800650c:	2200      	movs	r2, #0
 800650e:	701a      	strb	r2, [r3, #0]

	acc_integration_disable_wake_up();
 8006510:	f7ff ffc0 	bl	8006494 <acc_integration_disable_wake_up>
}
 8006514:	bf00      	nop
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20000229 	.word	0x20000229

08006520 <acc_integration_get_time>:
	}
}


uint32_t acc_integration_get_time(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8006524:	f7fa fc92 	bl	8000e4c <HAL_GetTick>
 8006528:	4603      	mov	r3, r0
}
 800652a:	4618      	mov	r0, r3
 800652c:	bd80      	pop	{r7, pc}

0800652e <acc_integration_mem_alloc>:


void *acc_integration_mem_alloc(size_t size)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
	return malloc(size);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f009 f95a 	bl	800f7f0 <malloc>
 800653c:	4603      	mov	r3, r0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <acc_integration_mem_free>:
	return calloc(nmemb, size);
}


void acc_integration_mem_free(void *ptr)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
	free(ptr);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f009 f956 	bl	800f800 <free>
}
 8006554:	bf00      	nop
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <__NVIC_SystemReset>:
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006560:	f3bf 8f4f 	dsb	sy
}
 8006564:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006566:	4b06      	ldr	r3, [pc, #24]	@ (8006580 <__NVIC_SystemReset+0x24>)
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800656e:	4904      	ldr	r1, [pc, #16]	@ (8006580 <__NVIC_SystemReset+0x24>)
 8006570:	4b04      	ldr	r3, [pc, #16]	@ (8006584 <__NVIC_SystemReset+0x28>)
 8006572:	4313      	orrs	r3, r2
 8006574:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006576:	f3bf 8f4f 	dsb	sy
}
 800657a:	bf00      	nop
    __NOP();
 800657c:	bf00      	nop
 800657e:	e7fd      	b.n	800657c <__NVIC_SystemReset+0x20>
 8006580:	e000ed00 	.word	0xe000ed00
 8006584:	05fa0004 	.word	0x05fa0004

08006588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800658c:	f7fa fbf6 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006590:	f000 f814 	bl	80065bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006594:	f000 fa0a 	bl	80069ac <MX_GPIO_Init>
  MX_DMA_Init();
 8006598:	f000 f9d2 	bl	8006940 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800659c:	f000 f9a0 	bl	80068e0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80065a0:	f000 f930 	bl	8006804 <MX_SPI1_Init>
  MX_I2C2_Init();
 80065a4:	f000 f85e 	bl	8006664 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80065a8:	f000 f96a 	bl	8006880 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80065ac:	f000 f89a 	bl	80066e4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	acconeer_main(0, NULL);
 80065b0:	2100      	movs	r1, #0
 80065b2:	2000      	movs	r0, #0
 80065b4:	f7fe ff50 	bl	8005458 <acconeer_main>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80065b8:	bf00      	nop
 80065ba:	e7fd      	b.n	80065b8 <main+0x30>

080065bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b096      	sub	sp, #88	@ 0x58
 80065c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065c2:	f107 0314 	add.w	r3, r7, #20
 80065c6:	2244      	movs	r2, #68	@ 0x44
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f009 fc2a 	bl	800fe24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065d0:	463b      	mov	r3, r7
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	605a      	str	r2, [r3, #4]
 80065d8:	609a      	str	r2, [r3, #8]
 80065da:	60da      	str	r2, [r3, #12]
 80065dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80065de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80065e2:	f7fb fa5f 	bl	8001aa4 <HAL_PWREx_ControlVoltageScaling>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80065ec:	f000 fa86 	bl	8006afc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80065f0:	230a      	movs	r3, #10
 80065f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80065f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80065f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80065fa:	2310      	movs	r3, #16
 80065fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80065fe:	2301      	movs	r3, #1
 8006600:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006602:	2302      	movs	r3, #2
 8006604:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006606:	2302      	movs	r3, #2
 8006608:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800660a:	2301      	movs	r3, #1
 800660c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800660e:	230a      	movs	r3, #10
 8006610:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006612:	2307      	movs	r3, #7
 8006614:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006616:	2302      	movs	r3, #2
 8006618:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800661a:	2302      	movs	r3, #2
 800661c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800661e:	f107 0314 	add.w	r3, r7, #20
 8006622:	4618      	mov	r0, r3
 8006624:	f7fb fa94 	bl	8001b50 <HAL_RCC_OscConfig>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800662e:	f000 fa65 	bl	8006afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006632:	230f      	movs	r3, #15
 8006634:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006636:	2303      	movs	r3, #3
 8006638:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800663a:	2300      	movs	r3, #0
 800663c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006642:	2300      	movs	r3, #0
 8006644:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006646:	463b      	mov	r3, r7
 8006648:	2104      	movs	r1, #4
 800664a:	4618      	mov	r0, r3
 800664c:	f7fb fe94 	bl	8002378 <HAL_RCC_ClockConfig>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8006656:	f000 fa51 	bl	8006afc <Error_Handler>
  }
}
 800665a:	bf00      	nop
 800665c:	3758      	adds	r7, #88	@ 0x58
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006668:	4b1b      	ldr	r3, [pc, #108]	@ (80066d8 <MX_I2C2_Init+0x74>)
 800666a:	4a1c      	ldr	r2, [pc, #112]	@ (80066dc <MX_I2C2_Init+0x78>)
 800666c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800666e:	4b1a      	ldr	r3, [pc, #104]	@ (80066d8 <MX_I2C2_Init+0x74>)
 8006670:	4a1b      	ldr	r2, [pc, #108]	@ (80066e0 <MX_I2C2_Init+0x7c>)
 8006672:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 164;
 8006674:	4b18      	ldr	r3, [pc, #96]	@ (80066d8 <MX_I2C2_Init+0x74>)
 8006676:	22a4      	movs	r2, #164	@ 0xa4
 8006678:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800667a:	4b17      	ldr	r3, [pc, #92]	@ (80066d8 <MX_I2C2_Init+0x74>)
 800667c:	2201      	movs	r2, #1
 800667e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006680:	4b15      	ldr	r3, [pc, #84]	@ (80066d8 <MX_I2C2_Init+0x74>)
 8006682:	2200      	movs	r2, #0
 8006684:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006686:	4b14      	ldr	r3, [pc, #80]	@ (80066d8 <MX_I2C2_Init+0x74>)
 8006688:	2200      	movs	r2, #0
 800668a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800668c:	4b12      	ldr	r3, [pc, #72]	@ (80066d8 <MX_I2C2_Init+0x74>)
 800668e:	2200      	movs	r2, #0
 8006690:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006692:	4b11      	ldr	r3, [pc, #68]	@ (80066d8 <MX_I2C2_Init+0x74>)
 8006694:	2200      	movs	r2, #0
 8006696:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006698:	4b0f      	ldr	r3, [pc, #60]	@ (80066d8 <MX_I2C2_Init+0x74>)
 800669a:	2200      	movs	r2, #0
 800669c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800669e:	480e      	ldr	r0, [pc, #56]	@ (80066d8 <MX_I2C2_Init+0x74>)
 80066a0:	f7fb f8a5 	bl	80017ee <HAL_I2C_Init>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80066aa:	f000 fa27 	bl	8006afc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80066ae:	2100      	movs	r1, #0
 80066b0:	4809      	ldr	r0, [pc, #36]	@ (80066d8 <MX_I2C2_Init+0x74>)
 80066b2:	f7fb f951 	bl	8001958 <HAL_I2CEx_ConfigAnalogFilter>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80066bc:	f000 fa1e 	bl	8006afc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80066c0:	2100      	movs	r1, #0
 80066c2:	4805      	ldr	r0, [pc, #20]	@ (80066d8 <MX_I2C2_Init+0x74>)
 80066c4:	f7fb f993 	bl	80019ee <HAL_I2CEx_ConfigDigitalFilter>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80066ce:	f000 fa15 	bl	8006afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80066d2:	bf00      	nop
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20000230 	.word	0x20000230
 80066dc:	40005800 	.word	0x40005800
 80066e0:	10d19ce4 	.word	0x10d19ce4

080066e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b092      	sub	sp, #72	@ 0x48
 80066e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80066ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	605a      	str	r2, [r3, #4]
 80066f4:	609a      	str	r2, [r3, #8]
 80066f6:	60da      	str	r2, [r3, #12]
 80066f8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80066fa:	2300      	movs	r3, #0
 80066fc:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80066fe:	1d3b      	adds	r3, r7, #4
 8006700:	222c      	movs	r2, #44	@ 0x2c
 8006702:	2100      	movs	r1, #0
 8006704:	4618      	mov	r0, r3
 8006706:	f009 fb8d 	bl	800fe24 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800670a:	4b3c      	ldr	r3, [pc, #240]	@ (80067fc <MX_RTC_Init+0x118>)
 800670c:	4a3c      	ldr	r2, [pc, #240]	@ (8006800 <MX_RTC_Init+0x11c>)
 800670e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006710:	4b3a      	ldr	r3, [pc, #232]	@ (80067fc <MX_RTC_Init+0x118>)
 8006712:	2200      	movs	r2, #0
 8006714:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8006716:	4b39      	ldr	r3, [pc, #228]	@ (80067fc <MX_RTC_Init+0x118>)
 8006718:	221f      	movs	r2, #31
 800671a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 800671c:	4b37      	ldr	r3, [pc, #220]	@ (80067fc <MX_RTC_Init+0x118>)
 800671e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006722:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006724:	4b35      	ldr	r3, [pc, #212]	@ (80067fc <MX_RTC_Init+0x118>)
 8006726:	2200      	movs	r2, #0
 8006728:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800672a:	4b34      	ldr	r3, [pc, #208]	@ (80067fc <MX_RTC_Init+0x118>)
 800672c:	2200      	movs	r2, #0
 800672e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006730:	4b32      	ldr	r3, [pc, #200]	@ (80067fc <MX_RTC_Init+0x118>)
 8006732:	2200      	movs	r2, #0
 8006734:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006736:	4b31      	ldr	r3, [pc, #196]	@ (80067fc <MX_RTC_Init+0x118>)
 8006738:	2200      	movs	r2, #0
 800673a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800673c:	482f      	ldr	r0, [pc, #188]	@ (80067fc <MX_RTC_Init+0x118>)
 800673e:	f7fc fb49 	bl	8002dd4 <HAL_RTC_Init>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8006748:	f000 f9d8 	bl	8006afc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 8006758:	2300      	movs	r3, #0
 800675a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800675e:	2300      	movs	r3, #0
 8006760:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006762:	2300      	movs	r3, #0
 8006764:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8006766:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800676a:	2200      	movs	r2, #0
 800676c:	4619      	mov	r1, r3
 800676e:	4823      	ldr	r0, [pc, #140]	@ (80067fc <MX_RTC_Init+0x118>)
 8006770:	f7fc fbb8 	bl	8002ee4 <HAL_RTC_SetTime>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800677a:	f000 f9bf 	bl	8006afc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800677e:	2301      	movs	r3, #1
 8006780:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8006784:	2301      	movs	r3, #1
 8006786:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 800678a:	2301      	movs	r3, #1
 800678c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8006796:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800679a:	2200      	movs	r2, #0
 800679c:	4619      	mov	r1, r3
 800679e:	4817      	ldr	r0, [pc, #92]	@ (80067fc <MX_RTC_Init+0x118>)
 80067a0:	f7fc fc99 	bl	80030d6 <HAL_RTC_SetDate>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <MX_RTC_Init+0xca>
  {
    Error_Handler();
 80067aa:	f000 f9a7 	bl	8006afc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80067be:	2300      	movs	r3, #0
 80067c0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80067d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80067dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80067de:	1d3b      	adds	r3, r7, #4
 80067e0:	2200      	movs	r2, #0
 80067e2:	4619      	mov	r1, r3
 80067e4:	4805      	ldr	r0, [pc, #20]	@ (80067fc <MX_RTC_Init+0x118>)
 80067e6:	f7fc fd4b 	bl	8003280 <HAL_RTC_SetAlarm_IT>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d001      	beq.n	80067f4 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 80067f0:	f000 f984 	bl	8006afc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80067f4:	bf00      	nop
 80067f6:	3748      	adds	r7, #72	@ 0x48
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	20000284 	.word	0x20000284
 8006800:	40002800 	.word	0x40002800

08006804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006808:	4b1b      	ldr	r3, [pc, #108]	@ (8006878 <MX_SPI1_Init+0x74>)
 800680a:	4a1c      	ldr	r2, [pc, #112]	@ (800687c <MX_SPI1_Init+0x78>)
 800680c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800680e:	4b1a      	ldr	r3, [pc, #104]	@ (8006878 <MX_SPI1_Init+0x74>)
 8006810:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006816:	4b18      	ldr	r3, [pc, #96]	@ (8006878 <MX_SPI1_Init+0x74>)
 8006818:	2200      	movs	r2, #0
 800681a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800681c:	4b16      	ldr	r3, [pc, #88]	@ (8006878 <MX_SPI1_Init+0x74>)
 800681e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8006822:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006824:	4b14      	ldr	r3, [pc, #80]	@ (8006878 <MX_SPI1_Init+0x74>)
 8006826:	2200      	movs	r2, #0
 8006828:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800682a:	4b13      	ldr	r3, [pc, #76]	@ (8006878 <MX_SPI1_Init+0x74>)
 800682c:	2200      	movs	r2, #0
 800682e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006830:	4b11      	ldr	r3, [pc, #68]	@ (8006878 <MX_SPI1_Init+0x74>)
 8006832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006836:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006838:	4b0f      	ldr	r3, [pc, #60]	@ (8006878 <MX_SPI1_Init+0x74>)
 800683a:	2200      	movs	r2, #0
 800683c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800683e:	4b0e      	ldr	r3, [pc, #56]	@ (8006878 <MX_SPI1_Init+0x74>)
 8006840:	2200      	movs	r2, #0
 8006842:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006844:	4b0c      	ldr	r3, [pc, #48]	@ (8006878 <MX_SPI1_Init+0x74>)
 8006846:	2200      	movs	r2, #0
 8006848:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800684a:	4b0b      	ldr	r3, [pc, #44]	@ (8006878 <MX_SPI1_Init+0x74>)
 800684c:	2200      	movs	r2, #0
 800684e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006850:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <MX_SPI1_Init+0x74>)
 8006852:	2207      	movs	r2, #7
 8006854:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006856:	4b08      	ldr	r3, [pc, #32]	@ (8006878 <MX_SPI1_Init+0x74>)
 8006858:	2200      	movs	r2, #0
 800685a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800685c:	4b06      	ldr	r3, [pc, #24]	@ (8006878 <MX_SPI1_Init+0x74>)
 800685e:	2208      	movs	r2, #8
 8006860:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006862:	4805      	ldr	r0, [pc, #20]	@ (8006878 <MX_SPI1_Init+0x74>)
 8006864:	f7fd f914 	bl	8003a90 <HAL_SPI_Init>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800686e:	f000 f945 	bl	8006afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006872:	bf00      	nop
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	200002a8 	.word	0x200002a8
 800687c:	40013000 	.word	0x40013000

08006880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006884:	4b14      	ldr	r3, [pc, #80]	@ (80068d8 <MX_USART1_UART_Init+0x58>)
 8006886:	4a15      	ldr	r2, [pc, #84]	@ (80068dc <MX_USART1_UART_Init+0x5c>)
 8006888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800688a:	4b13      	ldr	r3, [pc, #76]	@ (80068d8 <MX_USART1_UART_Init+0x58>)
 800688c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8006890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006892:	4b11      	ldr	r3, [pc, #68]	@ (80068d8 <MX_USART1_UART_Init+0x58>)
 8006894:	2200      	movs	r2, #0
 8006896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006898:	4b0f      	ldr	r3, [pc, #60]	@ (80068d8 <MX_USART1_UART_Init+0x58>)
 800689a:	2200      	movs	r2, #0
 800689c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800689e:	4b0e      	ldr	r3, [pc, #56]	@ (80068d8 <MX_USART1_UART_Init+0x58>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80068a4:	4b0c      	ldr	r3, [pc, #48]	@ (80068d8 <MX_USART1_UART_Init+0x58>)
 80068a6:	220c      	movs	r2, #12
 80068a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068aa:	4b0b      	ldr	r3, [pc, #44]	@ (80068d8 <MX_USART1_UART_Init+0x58>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80068b0:	4b09      	ldr	r3, [pc, #36]	@ (80068d8 <MX_USART1_UART_Init+0x58>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068b6:	4b08      	ldr	r3, [pc, #32]	@ (80068d8 <MX_USART1_UART_Init+0x58>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068bc:	4b06      	ldr	r3, [pc, #24]	@ (80068d8 <MX_USART1_UART_Init+0x58>)
 80068be:	2200      	movs	r2, #0
 80068c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80068c2:	4805      	ldr	r0, [pc, #20]	@ (80068d8 <MX_USART1_UART_Init+0x58>)
 80068c4:	f7fd fd0a 	bl	80042dc <HAL_UART_Init>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80068ce:	f000 f915 	bl	8006afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80068d2:	bf00      	nop
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	2000039c 	.word	0x2000039c
 80068dc:	40013800 	.word	0x40013800

080068e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80068e4:	4b14      	ldr	r3, [pc, #80]	@ (8006938 <MX_USART2_UART_Init+0x58>)
 80068e6:	4a15      	ldr	r2, [pc, #84]	@ (800693c <MX_USART2_UART_Init+0x5c>)
 80068e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80068ea:	4b13      	ldr	r3, [pc, #76]	@ (8006938 <MX_USART2_UART_Init+0x58>)
 80068ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80068f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80068f2:	4b11      	ldr	r3, [pc, #68]	@ (8006938 <MX_USART2_UART_Init+0x58>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80068f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006938 <MX_USART2_UART_Init+0x58>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80068fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006938 <MX_USART2_UART_Init+0x58>)
 8006900:	2200      	movs	r2, #0
 8006902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006904:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <MX_USART2_UART_Init+0x58>)
 8006906:	220c      	movs	r2, #12
 8006908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800690a:	4b0b      	ldr	r3, [pc, #44]	@ (8006938 <MX_USART2_UART_Init+0x58>)
 800690c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006910:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006912:	4b09      	ldr	r3, [pc, #36]	@ (8006938 <MX_USART2_UART_Init+0x58>)
 8006914:	2200      	movs	r2, #0
 8006916:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006918:	4b07      	ldr	r3, [pc, #28]	@ (8006938 <MX_USART2_UART_Init+0x58>)
 800691a:	2200      	movs	r2, #0
 800691c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800691e:	4b06      	ldr	r3, [pc, #24]	@ (8006938 <MX_USART2_UART_Init+0x58>)
 8006920:	2200      	movs	r2, #0
 8006922:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006924:	4804      	ldr	r0, [pc, #16]	@ (8006938 <MX_USART2_UART_Init+0x58>)
 8006926:	f7fd fcd9 	bl	80042dc <HAL_UART_Init>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8006930:	f000 f8e4 	bl	8006afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006934:	bf00      	nop
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000424 	.word	0x20000424
 800693c:	40004400 	.word	0x40004400

08006940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006946:	4b18      	ldr	r3, [pc, #96]	@ (80069a8 <MX_DMA_Init+0x68>)
 8006948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800694a:	4a17      	ldr	r2, [pc, #92]	@ (80069a8 <MX_DMA_Init+0x68>)
 800694c:	f043 0301 	orr.w	r3, r3, #1
 8006950:	6493      	str	r3, [r2, #72]	@ 0x48
 8006952:	4b15      	ldr	r3, [pc, #84]	@ (80069a8 <MX_DMA_Init+0x68>)
 8006954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	607b      	str	r3, [r7, #4]
 800695c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800695e:	2200      	movs	r2, #0
 8006960:	2100      	movs	r1, #0
 8006962:	200c      	movs	r0, #12
 8006964:	f7fa fb59 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006968:	200c      	movs	r0, #12
 800696a:	f7fa fb72 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800696e:	2200      	movs	r2, #0
 8006970:	2100      	movs	r1, #0
 8006972:	200d      	movs	r0, #13
 8006974:	f7fa fb51 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006978:	200d      	movs	r0, #13
 800697a:	f7fa fb6a 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800697e:	2200      	movs	r2, #0
 8006980:	2100      	movs	r1, #0
 8006982:	2010      	movs	r0, #16
 8006984:	f7fa fb49 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8006988:	2010      	movs	r0, #16
 800698a:	f7fa fb62 	bl	8001052 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800698e:	2200      	movs	r2, #0
 8006990:	2100      	movs	r1, #0
 8006992:	2011      	movs	r0, #17
 8006994:	f7fa fb41 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8006998:	2011      	movs	r0, #17
 800699a:	f7fa fb5a 	bl	8001052 <HAL_NVIC_EnableIRQ>

}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	40021000 	.word	0x40021000

080069ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069b2:	f107 030c 	add.w	r3, r7, #12
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	605a      	str	r2, [r3, #4]
 80069bc:	609a      	str	r2, [r3, #8]
 80069be:	60da      	str	r2, [r3, #12]
 80069c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80069c2:	4b4b      	ldr	r3, [pc, #300]	@ (8006af0 <MX_GPIO_Init+0x144>)
 80069c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069c6:	4a4a      	ldr	r2, [pc, #296]	@ (8006af0 <MX_GPIO_Init+0x144>)
 80069c8:	f043 0302 	orr.w	r3, r3, #2
 80069cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069ce:	4b48      	ldr	r3, [pc, #288]	@ (8006af0 <MX_GPIO_Init+0x144>)
 80069d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	60bb      	str	r3, [r7, #8]
 80069d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80069da:	4b45      	ldr	r3, [pc, #276]	@ (8006af0 <MX_GPIO_Init+0x144>)
 80069dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069de:	4a44      	ldr	r2, [pc, #272]	@ (8006af0 <MX_GPIO_Init+0x144>)
 80069e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069e6:	4b42      	ldr	r3, [pc, #264]	@ (8006af0 <MX_GPIO_Init+0x144>)
 80069e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80069f2:	4b3f      	ldr	r3, [pc, #252]	@ (8006af0 <MX_GPIO_Init+0x144>)
 80069f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069f6:	4a3e      	ldr	r2, [pc, #248]	@ (8006af0 <MX_GPIO_Init+0x144>)
 80069f8:	f043 0301 	orr.w	r3, r3, #1
 80069fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069fe:	4b3c      	ldr	r3, [pc, #240]	@ (8006af0 <MX_GPIO_Init+0x144>)
 8006a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_INT_Pin|ENABLE_Pin|SPI_SS_Pin, GPIO_PIN_RESET);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f241 2101 	movw	r1, #4609	@ 0x1201
 8006a10:	4838      	ldr	r0, [pc, #224]	@ (8006af4 <MX_GPIO_Init+0x148>)
 8006a12:	f7fa feb1 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MISC_GPIO1_GPIO_Port, MISC_GPIO1_Pin, GPIO_PIN_RESET);
 8006a16:	2200      	movs	r2, #0
 8006a18:	2110      	movs	r1, #16
 8006a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a1e:	f7fa feab 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTERRUPT_Pin */
  GPIO_InitStruct.Pin = INTERRUPT_Pin;
 8006a22:	2308      	movs	r3, #8
 8006a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006a26:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8006a30:	f107 030c 	add.w	r3, r7, #12
 8006a34:	4619      	mov	r1, r3
 8006a36:	482f      	ldr	r0, [pc, #188]	@ (8006af4 <MX_GPIO_Init+0x148>)
 8006a38:	f7fa fd0c 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : MISC_GPIO2_Pin I2C_ADDRESS_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|I2C_ADDRESS_Pin;
 8006a3c:	2309      	movs	r3, #9
 8006a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a40:	2300      	movs	r3, #0
 8006a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a44:	2302      	movs	r3, #2
 8006a46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006a48:	f107 030c 	add.w	r3, r7, #12
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	482a      	ldr	r0, [pc, #168]	@ (8006af8 <MX_GPIO_Init+0x14c>)
 8006a50:	f7fa fd00 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKE_UP_Pin */
  GPIO_InitStruct.Pin = WAKE_UP_Pin;
 8006a54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a5a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a60:	2302      	movs	r3, #2
 8006a62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 8006a64:	f107 030c 	add.w	r3, r7, #12
 8006a68:	4619      	mov	r1, r3
 8006a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a6e:	f7fa fcf1 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_INT_Pin ENABLE_Pin SPI_SS_Pin */
  GPIO_InitStruct.Pin = MCU_INT_Pin|ENABLE_Pin|SPI_SS_Pin;
 8006a72:	f241 2301 	movw	r3, #4609	@ 0x1201
 8006a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a80:	2303      	movs	r3, #3
 8006a82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a84:	f107 030c 	add.w	r3, r7, #12
 8006a88:	4619      	mov	r1, r3
 8006a8a:	481a      	ldr	r0, [pc, #104]	@ (8006af4 <MX_GPIO_Init+0x148>)
 8006a8c:	f7fa fce2 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISC_GPIO0_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO0_Pin;
 8006a90:	2302      	movs	r3, #2
 8006a92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a94:	2300      	movs	r3, #0
 8006a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MISC_GPIO0_GPIO_Port, &GPIO_InitStruct);
 8006a9c:	f107 030c 	add.w	r3, r7, #12
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4814      	ldr	r0, [pc, #80]	@ (8006af4 <MX_GPIO_Init+0x148>)
 8006aa4:	f7fa fcd6 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISC_GPIO1_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO1_Pin;
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006aac:	2301      	movs	r3, #1
 8006aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MISC_GPIO1_GPIO_Port, &GPIO_InitStruct);
 8006ab8:	f107 030c 	add.w	r3, r7, #12
 8006abc:	4619      	mov	r1, r3
 8006abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006ac2:	f7fa fcc7 	bl	8001454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2100      	movs	r1, #0
 8006aca:	2009      	movs	r0, #9
 8006acc:	f7fa faa5 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006ad0:	2009      	movs	r0, #9
 8006ad2:	f7fa fabe 	bl	8001052 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2100      	movs	r1, #0
 8006ada:	2028      	movs	r0, #40	@ 0x28
 8006adc:	f7fa fa9d 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006ae0:	2028      	movs	r0, #40	@ 0x28
 8006ae2:	f7fa fab6 	bl	8001052 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006ae6:	bf00      	nop
 8006ae8:	3720      	adds	r7, #32
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	40021000 	.word	0x40021000
 8006af4:	48000400 	.word	0x48000400
 8006af8:	48001c00 	.word	0x48001c00

08006afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	NVIC_SystemReset();
 8006b00:	f7ff fd2c 	bl	800655c <__NVIC_SystemReset>

08006b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b48 <HAL_MspInit+0x44>)
 8006b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8006b48 <HAL_MspInit+0x44>)
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	6613      	str	r3, [r2, #96]	@ 0x60
 8006b16:	4b0c      	ldr	r3, [pc, #48]	@ (8006b48 <HAL_MspInit+0x44>)
 8006b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	607b      	str	r3, [r7, #4]
 8006b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b22:	4b09      	ldr	r3, [pc, #36]	@ (8006b48 <HAL_MspInit+0x44>)
 8006b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b26:	4a08      	ldr	r2, [pc, #32]	@ (8006b48 <HAL_MspInit+0x44>)
 8006b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b2e:	4b06      	ldr	r3, [pc, #24]	@ (8006b48 <HAL_MspInit+0x44>)
 8006b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40021000 	.word	0x40021000

08006b4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b0a0      	sub	sp, #128	@ 0x80
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b54:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	605a      	str	r2, [r3, #4]
 8006b5e:	609a      	str	r2, [r3, #8]
 8006b60:	60da      	str	r2, [r3, #12]
 8006b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006b64:	f107 0310 	add.w	r3, r7, #16
 8006b68:	225c      	movs	r2, #92	@ 0x5c
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f009 f959 	bl	800fe24 <memset>
  if(hi2c->Instance==I2C2)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a23      	ldr	r2, [pc, #140]	@ (8006c04 <HAL_I2C_MspInit+0xb8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d13e      	bne.n	8006bfa <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006b7c:	2380      	movs	r3, #128	@ 0x80
 8006b7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006b80:	2300      	movs	r3, #0
 8006b82:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b84:	f107 0310 	add.w	r3, r7, #16
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fb fe19 	bl	80027c0 <HAL_RCCEx_PeriphCLKConfig>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006b94:	f7ff ffb2 	bl	8006afc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b98:	4b1b      	ldr	r3, [pc, #108]	@ (8006c08 <HAL_I2C_MspInit+0xbc>)
 8006b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8006c08 <HAL_I2C_MspInit+0xbc>)
 8006b9e:	f043 0302 	orr.w	r3, r3, #2
 8006ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ba4:	4b18      	ldr	r3, [pc, #96]	@ (8006c08 <HAL_I2C_MspInit+0xbc>)
 8006ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8006bb0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006bb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bb6:	2312      	movs	r3, #18
 8006bb8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006bc2:	2304      	movs	r3, #4
 8006bc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006bca:	4619      	mov	r1, r3
 8006bcc:	480f      	ldr	r0, [pc, #60]	@ (8006c0c <HAL_I2C_MspInit+0xc0>)
 8006bce:	f7fa fc41 	bl	8001454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <HAL_I2C_MspInit+0xbc>)
 8006bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006c08 <HAL_I2C_MspInit+0xbc>)
 8006bd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bde:	4b0a      	ldr	r3, [pc, #40]	@ (8006c08 <HAL_I2C_MspInit+0xbc>)
 8006be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006be6:	60bb      	str	r3, [r7, #8]
 8006be8:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8006bea:	2200      	movs	r2, #0
 8006bec:	2100      	movs	r1, #0
 8006bee:	2021      	movs	r0, #33	@ 0x21
 8006bf0:	f7fa fa13 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006bf4:	2021      	movs	r0, #33	@ 0x21
 8006bf6:	f7fa fa2c 	bl	8001052 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8006bfa:	bf00      	nop
 8006bfc:	3780      	adds	r7, #128	@ 0x80
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40005800 	.word	0x40005800
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	48000400 	.word	0x48000400

08006c10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b09a      	sub	sp, #104	@ 0x68
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006c18:	f107 030c 	add.w	r3, r7, #12
 8006c1c:	225c      	movs	r2, #92	@ 0x5c
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f009 f8ff 	bl	800fe24 <memset>
  if(hrtc->Instance==RTC)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a17      	ldr	r2, [pc, #92]	@ (8006c88 <HAL_RTC_MspInit+0x78>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d127      	bne.n	8006c80 <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006c30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006c34:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8006c36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c3a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c3c:	f107 030c 	add.w	r3, r7, #12
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fb fdbd 	bl	80027c0 <HAL_RCCEx_PeriphCLKConfig>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8006c4c:	f7ff ff56 	bl	8006afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006c50:	4b0e      	ldr	r3, [pc, #56]	@ (8006c8c <HAL_RTC_MspInit+0x7c>)
 8006c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c56:	4a0d      	ldr	r2, [pc, #52]	@ (8006c8c <HAL_RTC_MspInit+0x7c>)
 8006c58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8006c60:	2200      	movs	r2, #0
 8006c62:	2100      	movs	r1, #0
 8006c64:	2003      	movs	r0, #3
 8006c66:	f7fa f9d8 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8006c6a:	2003      	movs	r0, #3
 8006c6c:	f7fa f9f1 	bl	8001052 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8006c70:	2200      	movs	r2, #0
 8006c72:	2100      	movs	r1, #0
 8006c74:	2029      	movs	r0, #41	@ 0x29
 8006c76:	f7fa f9d0 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8006c7a:	2029      	movs	r0, #41	@ 0x29
 8006c7c:	f7fa f9e9 	bl	8001052 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8006c80:	bf00      	nop
 8006c82:	3768      	adds	r7, #104	@ 0x68
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40002800 	.word	0x40002800
 8006c8c:	40021000 	.word	0x40021000

08006c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08a      	sub	sp, #40	@ 0x28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c98:	f107 0314 	add.w	r3, r7, #20
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
 8006ca4:	60da      	str	r2, [r3, #12]
 8006ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a42      	ldr	r2, [pc, #264]	@ (8006db8 <HAL_SPI_MspInit+0x128>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d17e      	bne.n	8006db0 <HAL_SPI_MspInit+0x120>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006cb2:	4b42      	ldr	r3, [pc, #264]	@ (8006dbc <HAL_SPI_MspInit+0x12c>)
 8006cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb6:	4a41      	ldr	r2, [pc, #260]	@ (8006dbc <HAL_SPI_MspInit+0x12c>)
 8006cb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006cbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8006cbe:	4b3f      	ldr	r3, [pc, #252]	@ (8006dbc <HAL_SPI_MspInit+0x12c>)
 8006cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cca:	4b3c      	ldr	r3, [pc, #240]	@ (8006dbc <HAL_SPI_MspInit+0x12c>)
 8006ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cce:	4a3b      	ldr	r2, [pc, #236]	@ (8006dbc <HAL_SPI_MspInit+0x12c>)
 8006cd0:	f043 0301 	orr.w	r3, r3, #1
 8006cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006cd6:	4b39      	ldr	r3, [pc, #228]	@ (8006dbc <HAL_SPI_MspInit+0x12c>)
 8006cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI_MISO_Pin|SPI_SCK_Pin;
 8006ce2:	23e0      	movs	r3, #224	@ 0xe0
 8006ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006cf2:	2305      	movs	r3, #5
 8006cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cf6:	f107 0314 	add.w	r3, r7, #20
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d00:	f7fa fba8 	bl	8001454 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8006d04:	4b2e      	ldr	r3, [pc, #184]	@ (8006dc0 <HAL_SPI_MspInit+0x130>)
 8006d06:	4a2f      	ldr	r2, [pc, #188]	@ (8006dc4 <HAL_SPI_MspInit+0x134>)
 8006d08:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8006d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8006dc0 <HAL_SPI_MspInit+0x130>)
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d10:	4b2b      	ldr	r3, [pc, #172]	@ (8006dc0 <HAL_SPI_MspInit+0x130>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d16:	4b2a      	ldr	r3, [pc, #168]	@ (8006dc0 <HAL_SPI_MspInit+0x130>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d1c:	4b28      	ldr	r3, [pc, #160]	@ (8006dc0 <HAL_SPI_MspInit+0x130>)
 8006d1e:	2280      	movs	r2, #128	@ 0x80
 8006d20:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006d22:	4b27      	ldr	r3, [pc, #156]	@ (8006dc0 <HAL_SPI_MspInit+0x130>)
 8006d24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d28:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d2a:	4b25      	ldr	r3, [pc, #148]	@ (8006dc0 <HAL_SPI_MspInit+0x130>)
 8006d2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d30:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8006d32:	4b23      	ldr	r3, [pc, #140]	@ (8006dc0 <HAL_SPI_MspInit+0x130>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006d38:	4b21      	ldr	r3, [pc, #132]	@ (8006dc0 <HAL_SPI_MspInit+0x130>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8006d3e:	4820      	ldr	r0, [pc, #128]	@ (8006dc0 <HAL_SPI_MspInit+0x130>)
 8006d40:	f7fa f9a2 	bl	8001088 <HAL_DMA_Init>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8006d4a:	f7ff fed7 	bl	8006afc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a1b      	ldr	r2, [pc, #108]	@ (8006dc0 <HAL_SPI_MspInit+0x130>)
 8006d52:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d54:	4a1a      	ldr	r2, [pc, #104]	@ (8006dc0 <HAL_SPI_MspInit+0x130>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8006d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc8 <HAL_SPI_MspInit+0x138>)
 8006d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006dcc <HAL_SPI_MspInit+0x13c>)
 8006d5e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8006d60:	4b19      	ldr	r3, [pc, #100]	@ (8006dc8 <HAL_SPI_MspInit+0x138>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d66:	4b18      	ldr	r3, [pc, #96]	@ (8006dc8 <HAL_SPI_MspInit+0x138>)
 8006d68:	2210      	movs	r2, #16
 8006d6a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d6c:	4b16      	ldr	r3, [pc, #88]	@ (8006dc8 <HAL_SPI_MspInit+0x138>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d72:	4b15      	ldr	r3, [pc, #84]	@ (8006dc8 <HAL_SPI_MspInit+0x138>)
 8006d74:	2280      	movs	r2, #128	@ 0x80
 8006d76:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006d78:	4b13      	ldr	r3, [pc, #76]	@ (8006dc8 <HAL_SPI_MspInit+0x138>)
 8006d7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d7e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d80:	4b11      	ldr	r3, [pc, #68]	@ (8006dc8 <HAL_SPI_MspInit+0x138>)
 8006d82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d86:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006d88:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc8 <HAL_SPI_MspInit+0x138>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc8 <HAL_SPI_MspInit+0x138>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006d94:	480c      	ldr	r0, [pc, #48]	@ (8006dc8 <HAL_SPI_MspInit+0x138>)
 8006d96:	f7fa f977 	bl	8001088 <HAL_DMA_Init>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8006da0:	f7ff feac 	bl	8006afc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a08      	ldr	r2, [pc, #32]	@ (8006dc8 <HAL_SPI_MspInit+0x138>)
 8006da8:	655a      	str	r2, [r3, #84]	@ 0x54
 8006daa:	4a07      	ldr	r2, [pc, #28]	@ (8006dc8 <HAL_SPI_MspInit+0x138>)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8006db0:	bf00      	nop
 8006db2:	3728      	adds	r7, #40	@ 0x28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40013000 	.word	0x40013000
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	2000030c 	.word	0x2000030c
 8006dc4:	4002001c 	.word	0x4002001c
 8006dc8:	20000354 	.word	0x20000354
 8006dcc:	40020030 	.word	0x40020030

08006dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b0a2      	sub	sp, #136	@ 0x88
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dd8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	609a      	str	r2, [r3, #8]
 8006de4:	60da      	str	r2, [r3, #12]
 8006de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006de8:	f107 0318 	add.w	r3, r7, #24
 8006dec:	225c      	movs	r2, #92	@ 0x5c
 8006dee:	2100      	movs	r1, #0
 8006df0:	4618      	mov	r0, r3
 8006df2:	f009 f817 	bl	800fe24 <memset>
  if(huart->Instance==USART1)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a6d      	ldr	r2, [pc, #436]	@ (8006fb0 <HAL_UART_MspInit+0x1e0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d13a      	bne.n	8006e76 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006e00:	2301      	movs	r3, #1
 8006e02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006e04:	2300      	movs	r3, #0
 8006e06:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e08:	f107 0318 	add.w	r3, r7, #24
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fb fcd7 	bl	80027c0 <HAL_RCCEx_PeriphCLKConfig>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006e18:	f7ff fe70 	bl	8006afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006e1c:	4b65      	ldr	r3, [pc, #404]	@ (8006fb4 <HAL_UART_MspInit+0x1e4>)
 8006e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e20:	4a64      	ldr	r2, [pc, #400]	@ (8006fb4 <HAL_UART_MspInit+0x1e4>)
 8006e22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e26:	6613      	str	r3, [r2, #96]	@ 0x60
 8006e28:	4b62      	ldr	r3, [pc, #392]	@ (8006fb4 <HAL_UART_MspInit+0x1e4>)
 8006e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e34:	4b5f      	ldr	r3, [pc, #380]	@ (8006fb4 <HAL_UART_MspInit+0x1e4>)
 8006e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e38:	4a5e      	ldr	r2, [pc, #376]	@ (8006fb4 <HAL_UART_MspInit+0x1e4>)
 8006e3a:	f043 0301 	orr.w	r3, r3, #1
 8006e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e40:	4b5c      	ldr	r3, [pc, #368]	@ (8006fb4 <HAL_UART_MspInit+0x1e4>)
 8006e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_RX_Pin|DEBUG_UART_TX_Pin;
 8006e4c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006e50:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e52:	2302      	movs	r3, #2
 8006e54:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e60:	2307      	movs	r3, #7
 8006e62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e66:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006e70:	f7fa faf0 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006e74:	e098      	b.n	8006fa8 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART2)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a4f      	ldr	r2, [pc, #316]	@ (8006fb8 <HAL_UART_MspInit+0x1e8>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	f040 8093 	bne.w	8006fa8 <HAL_UART_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006e82:	2302      	movs	r3, #2
 8006e84:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006e86:	2300      	movs	r3, #0
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e8a:	f107 0318 	add.w	r3, r7, #24
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fb fc96 	bl	80027c0 <HAL_RCCEx_PeriphCLKConfig>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <HAL_UART_MspInit+0xce>
      Error_Handler();
 8006e9a:	f7ff fe2f 	bl	8006afc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006e9e:	4b45      	ldr	r3, [pc, #276]	@ (8006fb4 <HAL_UART_MspInit+0x1e4>)
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea2:	4a44      	ldr	r2, [pc, #272]	@ (8006fb4 <HAL_UART_MspInit+0x1e4>)
 8006ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006eaa:	4b42      	ldr	r3, [pc, #264]	@ (8006fb4 <HAL_UART_MspInit+0x1e4>)
 8006eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8006fb4 <HAL_UART_MspInit+0x1e4>)
 8006eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eba:	4a3e      	ldr	r2, [pc, #248]	@ (8006fb4 <HAL_UART_MspInit+0x1e4>)
 8006ebc:	f043 0301 	orr.w	r3, r3, #1
 8006ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8006fb4 <HAL_UART_MspInit+0x1e4>)
 8006ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	60bb      	str	r3, [r7, #8]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin|UART_CTS_Pin|UART_RTS_Pin;
 8006ece:	230f      	movs	r3, #15
 8006ed0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eda:	2303      	movs	r3, #3
 8006edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006ee0:	2307      	movs	r3, #7
 8006ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ee6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8006eea:	4619      	mov	r1, r3
 8006eec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006ef0:	f7fa fab0 	bl	8001454 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006ef4:	4b31      	ldr	r3, [pc, #196]	@ (8006fbc <HAL_UART_MspInit+0x1ec>)
 8006ef6:	4a32      	ldr	r2, [pc, #200]	@ (8006fc0 <HAL_UART_MspInit+0x1f0>)
 8006ef8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8006efa:	4b30      	ldr	r3, [pc, #192]	@ (8006fbc <HAL_UART_MspInit+0x1ec>)
 8006efc:	2202      	movs	r2, #2
 8006efe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f00:	4b2e      	ldr	r3, [pc, #184]	@ (8006fbc <HAL_UART_MspInit+0x1ec>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f06:	4b2d      	ldr	r3, [pc, #180]	@ (8006fbc <HAL_UART_MspInit+0x1ec>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006fbc <HAL_UART_MspInit+0x1ec>)
 8006f0e:	2280      	movs	r2, #128	@ 0x80
 8006f10:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f12:	4b2a      	ldr	r3, [pc, #168]	@ (8006fbc <HAL_UART_MspInit+0x1ec>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f18:	4b28      	ldr	r3, [pc, #160]	@ (8006fbc <HAL_UART_MspInit+0x1ec>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006f1e:	4b27      	ldr	r3, [pc, #156]	@ (8006fbc <HAL_UART_MspInit+0x1ec>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f24:	4b25      	ldr	r3, [pc, #148]	@ (8006fbc <HAL_UART_MspInit+0x1ec>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006f2a:	4824      	ldr	r0, [pc, #144]	@ (8006fbc <HAL_UART_MspInit+0x1ec>)
 8006f2c:	f7fa f8ac 	bl	8001088 <HAL_DMA_Init>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <HAL_UART_MspInit+0x16a>
      Error_Handler();
 8006f36:	f7ff fde1 	bl	8006afc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8006fbc <HAL_UART_MspInit+0x1ec>)
 8006f3e:	675a      	str	r2, [r3, #116]	@ 0x74
 8006f40:	4a1e      	ldr	r2, [pc, #120]	@ (8006fbc <HAL_UART_MspInit+0x1ec>)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8006f46:	4b1f      	ldr	r3, [pc, #124]	@ (8006fc4 <HAL_UART_MspInit+0x1f4>)
 8006f48:	4a1f      	ldr	r2, [pc, #124]	@ (8006fc8 <HAL_UART_MspInit+0x1f8>)
 8006f4a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8006f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc4 <HAL_UART_MspInit+0x1f4>)
 8006f4e:	2202      	movs	r2, #2
 8006f50:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f52:	4b1c      	ldr	r3, [pc, #112]	@ (8006fc4 <HAL_UART_MspInit+0x1f4>)
 8006f54:	2210      	movs	r2, #16
 8006f56:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f58:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc4 <HAL_UART_MspInit+0x1f4>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f5e:	4b19      	ldr	r3, [pc, #100]	@ (8006fc4 <HAL_UART_MspInit+0x1f4>)
 8006f60:	2280      	movs	r2, #128	@ 0x80
 8006f62:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f64:	4b17      	ldr	r3, [pc, #92]	@ (8006fc4 <HAL_UART_MspInit+0x1f4>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f6a:	4b16      	ldr	r3, [pc, #88]	@ (8006fc4 <HAL_UART_MspInit+0x1f4>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006f70:	4b14      	ldr	r3, [pc, #80]	@ (8006fc4 <HAL_UART_MspInit+0x1f4>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006f76:	4b13      	ldr	r3, [pc, #76]	@ (8006fc4 <HAL_UART_MspInit+0x1f4>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006f7c:	4811      	ldr	r0, [pc, #68]	@ (8006fc4 <HAL_UART_MspInit+0x1f4>)
 8006f7e:	f7fa f883 	bl	8001088 <HAL_DMA_Init>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8006f88:	f7ff fdb8 	bl	8006afc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8006fc4 <HAL_UART_MspInit+0x1f4>)
 8006f90:	671a      	str	r2, [r3, #112]	@ 0x70
 8006f92:	4a0c      	ldr	r2, [pc, #48]	@ (8006fc4 <HAL_UART_MspInit+0x1f4>)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	2026      	movs	r0, #38	@ 0x26
 8006f9e:	f7fa f83c 	bl	800101a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006fa2:	2026      	movs	r0, #38	@ 0x26
 8006fa4:	f7fa f855 	bl	8001052 <HAL_NVIC_EnableIRQ>
}
 8006fa8:	bf00      	nop
 8006faa:	3788      	adds	r7, #136	@ 0x88
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40013800 	.word	0x40013800
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	40004400 	.word	0x40004400
 8006fbc:	200004ac 	.word	0x200004ac
 8006fc0:	4002006c 	.word	0x4002006c
 8006fc4:	200004f4 	.word	0x200004f4
 8006fc8:	40020080 	.word	0x40020080

08006fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8006fd0:	bf00      	nop
 8006fd2:	e7fd      	b.n	8006fd0 <NMI_Handler+0x4>

08006fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006fd8:	bf00      	nop
 8006fda:	e7fd      	b.n	8006fd8 <HardFault_Handler+0x4>

08006fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006fe0:	bf00      	nop
 8006fe2:	e7fd      	b.n	8006fe0 <MemManage_Handler+0x4>

08006fe4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006fe8:	bf00      	nop
 8006fea:	e7fd      	b.n	8006fe8 <BusFault_Handler+0x4>

08006fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <UsageFault_Handler+0x4>

08006ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006ff8:	bf00      	nop
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007002:	b480      	push	{r7}
 8007004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007006:	bf00      	nop
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007014:	bf00      	nop
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007022:	f7f9 feff 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8007026:	bf00      	nop
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8007030:	4802      	ldr	r0, [pc, #8]	@ (800703c <RTC_WKUP_IRQHandler+0x10>)
 8007032:	f7fc fcfd 	bl	8003a30 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8007036:	bf00      	nop
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20000284 	.word	0x20000284

08007040 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERRUPT_Pin);
 8007044:	2008      	movs	r0, #8
 8007046:	f7fa fbaf 	bl	80017a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800704a:	bf00      	nop
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8007054:	4802      	ldr	r0, [pc, #8]	@ (8007060 <DMA1_Channel2_IRQHandler+0x10>)
 8007056:	f7fa f94e 	bl	80012f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800705a:	bf00      	nop
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	2000030c 	.word	0x2000030c

08007064 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007068:	4802      	ldr	r0, [pc, #8]	@ (8007074 <DMA1_Channel3_IRQHandler+0x10>)
 800706a:	f7fa f944 	bl	80012f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800706e:	bf00      	nop
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000354 	.word	0x20000354

08007078 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800707c:	4802      	ldr	r0, [pc, #8]	@ (8007088 <DMA1_Channel6_IRQHandler+0x10>)
 800707e:	f7fa f93a 	bl	80012f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8007082:	bf00      	nop
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	200004ac 	.word	0x200004ac

0800708c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007090:	4802      	ldr	r0, [pc, #8]	@ (800709c <DMA1_Channel7_IRQHandler+0x10>)
 8007092:	f7fa f930 	bl	80012f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8007096:	bf00      	nop
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	200004f4 	.word	0x200004f4

080070a0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80070a4:	4802      	ldr	r0, [pc, #8]	@ (80070b0 <I2C2_EV_IRQHandler+0x10>)
 80070a6:	f7fa fc3d 	bl	8001924 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80070aa:	bf00      	nop
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	20000230 	.word	0x20000230

080070b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80070b8:	4802      	ldr	r0, [pc, #8]	@ (80070c4 <USART2_IRQHandler+0x10>)
 80070ba:	f7fd f9e7 	bl	800448c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80070be:	bf00      	nop
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000424 	.word	0x20000424

080070c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WAKE_UP_Pin);
 80070cc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80070d0:	f7fa fb6a 	bl	80017a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80070d4:	bf00      	nop
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80070dc:	4802      	ldr	r0, [pc, #8]	@ (80070e8 <RTC_Alarm_IRQHandler+0x10>)
 80070de:	f7fc fa9f 	bl	8003620 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80070e2:	bf00      	nop
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000284 	.word	0x20000284

080070ec <_fstat>:

extern UART_HandleTypeDef DEBUG_UART_HANDLE;


int _fstat(int file, struct stat *st)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
	(void)file;

	st->st_mode = S_IFCHR;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80070fc:	605a      	str	r2, [r3, #4]
	return 0;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <_close>:


int _close(int file)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
	(void)file;

	return -1;
 8007114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007118:	4618      	mov	r0, r3
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <_isatty>:
	return 1;
}


int _isatty(int file)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
	(void)file;

	return 1;
 800712c:	2301      	movs	r3, #1
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <_lseek>:


int _lseek(int file, int ptr, int dir)
{
 800713a:	b480      	push	{r7}
 800713c:	b085      	sub	sp, #20
 800713e:	af00      	add	r7, sp, #0
 8007140:	60f8      	str	r0, [r7, #12]
 8007142:	60b9      	str	r1, [r7, #8]
 8007144:	607a      	str	r2, [r7, #4]
	(void)file;
	(void)ptr;
	(void)dir;

	return 0;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <_read>:
	return -1;
}


int _read(int file, char *ptr, int len)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
	(void)file;
	(void)ptr;
	(void)len;

	return -1;
 8007160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <_write>:


int _write(int file, char *ptr, int len)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t *)ptr, len, 0xFFFF);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	b29a      	uxth	r2, r3
 8007180:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	4804      	ldr	r0, [pc, #16]	@ (8007198 <_write+0x28>)
 8007188:	f7fd f8f6 	bl	8004378 <HAL_UART_Transmit>
	return len;
 800718c:	687b      	ldr	r3, [r7, #4]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	2000039c 	.word	0x2000039c

0800719c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80071a4:	4a14      	ldr	r2, [pc, #80]	@ (80071f8 <_sbrk+0x5c>)
 80071a6:	4b15      	ldr	r3, [pc, #84]	@ (80071fc <_sbrk+0x60>)
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80071b0:	4b13      	ldr	r3, [pc, #76]	@ (8007200 <_sbrk+0x64>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80071b8:	4b11      	ldr	r3, [pc, #68]	@ (8007200 <_sbrk+0x64>)
 80071ba:	4a12      	ldr	r2, [pc, #72]	@ (8007204 <_sbrk+0x68>)
 80071bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80071be:	4b10      	ldr	r3, [pc, #64]	@ (8007200 <_sbrk+0x64>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4413      	add	r3, r2
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d207      	bcs.n	80071dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80071cc:	f008 fe88 	bl	800fee0 <__errno>
 80071d0:	4603      	mov	r3, r0
 80071d2:	220c      	movs	r2, #12
 80071d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295
 80071da:	e009      	b.n	80071f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071dc:	4b08      	ldr	r3, [pc, #32]	@ (8007200 <_sbrk+0x64>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071e2:	4b07      	ldr	r3, [pc, #28]	@ (8007200 <_sbrk+0x64>)
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4413      	add	r3, r2
 80071ea:	4a05      	ldr	r2, [pc, #20]	@ (8007200 <_sbrk+0x64>)
 80071ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80071ee:	68fb      	ldr	r3, [r7, #12]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20010000 	.word	0x20010000
 80071fc:	00001400 	.word	0x00001400
 8007200:	2000053c 	.word	0x2000053c
 8007204:	200006b8 	.word	0x200006b8

08007208 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800720c:	4b06      	ldr	r3, [pc, #24]	@ (8007228 <SystemInit+0x20>)
 800720e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007212:	4a05      	ldr	r2, [pc, #20]	@ (8007228 <SystemInit+0x20>)
 8007214:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800721c:	bf00      	nop
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	e000ed00 	.word	0xe000ed00

0800722c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800722c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007264 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007230:	f7ff ffea 	bl	8007208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007234:	480c      	ldr	r0, [pc, #48]	@ (8007268 <LoopForever+0x6>)
  ldr r1, =_edata
 8007236:	490d      	ldr	r1, [pc, #52]	@ (800726c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007238:	4a0d      	ldr	r2, [pc, #52]	@ (8007270 <LoopForever+0xe>)
  movs r3, #0
 800723a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800723c:	e002      	b.n	8007244 <LoopCopyDataInit>

0800723e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800723e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007242:	3304      	adds	r3, #4

08007244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007248:	d3f9      	bcc.n	800723e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800724a:	4a0a      	ldr	r2, [pc, #40]	@ (8007274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800724c:	4c0a      	ldr	r4, [pc, #40]	@ (8007278 <LoopForever+0x16>)
  movs r3, #0
 800724e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007250:	e001      	b.n	8007256 <LoopFillZerobss>

08007252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007254:	3204      	adds	r2, #4

08007256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007258:	d3fb      	bcc.n	8007252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800725a:	f008 fe47 	bl	800feec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800725e:	f7ff f993 	bl	8006588 <main>

08007262 <LoopForever>:

LoopForever:
    b LoopForever
 8007262:	e7fe      	b.n	8007262 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007264:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8007268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800726c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8007270:	08018480 	.word	0x08018480
  ldr r2, =_sbss
 8007274:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8007278:	200006b4 	.word	0x200006b4

0800727c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800727c:	e7fe      	b.n	800727c <ADC1_IRQHandler>
	...

08007280 <validate_presence_config.part.0>:
 8007280:	4b02      	ldr	r3, [pc, #8]	@ (800728c <validate_presence_config.part.0+0xc>)
 8007282:	4a03      	ldr	r2, [pc, #12]	@ (8007290 <validate_presence_config.part.0+0x10>)
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	4903      	ldr	r1, [pc, #12]	@ (8007294 <validate_presence_config.part.0+0x14>)
 8007288:	2000      	movs	r0, #0
 800728a:	4718      	bx	r3
 800728c:	2000069c 	.word	0x2000069c
 8007290:	08012b68 	.word	0x08012b68
 8007294:	08012b80 	.word	0x08012b80

08007298 <validate_presence_handle.part.0>:
 8007298:	4b02      	ldr	r3, [pc, #8]	@ (80072a4 <validate_presence_handle.part.0+0xc>)
 800729a:	4a03      	ldr	r2, [pc, #12]	@ (80072a8 <validate_presence_handle.part.0+0x10>)
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	4903      	ldr	r1, [pc, #12]	@ (80072ac <validate_presence_handle.part.0+0x14>)
 80072a0:	2000      	movs	r0, #0
 80072a2:	4718      	bx	r3
 80072a4:	2000069c 	.word	0x2000069c
 80072a8:	08012b94 	.word	0x08012b94
 80072ac:	08012b80 	.word	0x08012b80

080072b0 <acc_detector_presence_config_create>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	4a27      	ldr	r2, [pc, #156]	@ (8007350 <acc_detector_presence_config_create+0xa0>)
 80072b4:	23a3      	movs	r3, #163	@ 0xa3
 80072b6:	2168      	movs	r1, #104	@ 0x68
 80072b8:	2001      	movs	r0, #1
 80072ba:	f004 fead 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 80072be:	4604      	mov	r4, r0
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d03d      	beq.n	8007340 <acc_detector_presence_config_create+0x90>
 80072c4:	4b23      	ldr	r3, [pc, #140]	@ (8007354 <acc_detector_presence_config_create+0xa4>)
 80072c6:	4e24      	ldr	r6, [pc, #144]	@ (8007358 <acc_detector_presence_config_create+0xa8>)
 80072c8:	2501      	movs	r5, #1
 80072ca:	e9c0 3500 	strd	r3, r5, [r0]
 80072ce:	f002 fb6f 	bl	80099b0 <acc_config_create>
 80072d2:	4b22      	ldr	r3, [pc, #136]	@ (800735c <acc_detector_presence_config_create+0xac>)
 80072d4:	4922      	ldr	r1, [pc, #136]	@ (8007360 <acc_detector_presence_config_create+0xb0>)
 80072d6:	4a23      	ldr	r2, [pc, #140]	@ (8007364 <acc_detector_presence_config_create+0xb4>)
 80072d8:	f884 5046 	strb.w	r5, [r4, #70]	@ 0x46
 80072dc:	f884 5062 	strb.w	r5, [r4, #98]	@ 0x62
 80072e0:	7525      	strb	r5, [r4, #20]
 80072e2:	6420      	str	r0, [r4, #64]	@ 0x40
 80072e4:	f240 1501 	movw	r5, #257	@ 0x101
 80072e8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80072ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80072ec:	2018      	movs	r0, #24
 80072ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007368 <acc_detector_presence_config_create+0xb8>)
 80072f0:	61a1      	str	r1, [r4, #24]
 80072f2:	62a2      	str	r2, [r4, #40]	@ 0x28
 80072f4:	491d      	ldr	r1, [pc, #116]	@ (800736c <acc_detector_presence_config_create+0xbc>)
 80072f6:	4a1e      	ldr	r2, [pc, #120]	@ (8007370 <acc_detector_presence_config_create+0xc0>)
 80072f8:	f8a4 5044 	strh.w	r5, [r4, #68]	@ 0x44
 80072fc:	f8a4 0048 	strh.w	r0, [r4, #72]	@ 0x48
 8007300:	2500      	movs	r5, #0
 8007302:	481c      	ldr	r0, [pc, #112]	@ (8007374 <acc_detector_presence_config_create+0xc4>)
 8007304:	6661      	str	r1, [r4, #100]	@ 0x64
 8007306:	6522      	str	r2, [r4, #80]	@ 0x50
 8007308:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800730c:	4a1a      	ldr	r2, [pc, #104]	@ (8007378 <acc_detector_presence_config_create+0xc8>)
 800730e:	6563      	str	r3, [r4, #84]	@ 0x54
 8007310:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007314:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8007318:	65e0      	str	r0, [r4, #92]	@ 0x5c
 800731a:	f04f 557c 	mov.w	r5, #1056964608	@ 0x3f000000
 800731e:	4817      	ldr	r0, [pc, #92]	@ (800737c <acc_detector_presence_config_create+0xcc>)
 8007320:	f8a4 1060 	strh.w	r1, [r4, #96]	@ 0x60
 8007324:	6122      	str	r2, [r4, #16]
 8007326:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800732a:	4a15      	ldr	r2, [pc, #84]	@ (8007380 <acc_detector_presence_config_create+0xd0>)
 800732c:	61e3      	str	r3, [r4, #28]
 800732e:	4b15      	ldr	r3, [pc, #84]	@ (8007384 <acc_detector_presence_config_create+0xd4>)
 8007330:	6260      	str	r0, [r4, #36]	@ 0x24
 8007332:	62e6      	str	r6, [r4, #44]	@ 0x2c
 8007334:	6225      	str	r5, [r4, #32]
 8007336:	63a1      	str	r1, [r4, #56]	@ 0x38
 8007338:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800733a:	6323      	str	r3, [r4, #48]	@ 0x30
 800733c:	4620      	mov	r0, r4
 800733e:	bd70      	pop	{r4, r5, r6, pc}
 8007340:	4b11      	ldr	r3, [pc, #68]	@ (8007388 <acc_detector_presence_config_create+0xd8>)
 8007342:	4a12      	ldr	r2, [pc, #72]	@ (800738c <acc_detector_presence_config_create+0xdc>)
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	4902      	ldr	r1, [pc, #8]	@ (8007350 <acc_detector_presence_config_create+0xa0>)
 8007348:	4798      	blx	r3
 800734a:	4620      	mov	r0, r4
 800734c:	bd70      	pop	{r4, r5, r6, pc}
 800734e:	bf00      	nop
 8007350:	08012b80 	.word	0x08012b80
 8007354:	1337b102 	.word	0x1337b102
 8007358:	3e19999a 	.word	0x3e19999a
 800735c:	3e99999a 	.word	0x3e99999a
 8007360:	3fa66666 	.word	0x3fa66666
 8007364:	3e4ccccd 	.word	0x3e4ccccd
 8007368:	00200010 	.word	0x00200010
 800736c:	41a00000 	.word	0x41a00000
 8007370:	40200000 	.word	0x40200000
 8007374:	41400000 	.word	0x41400000
 8007378:	01000003 	.word	0x01000003
 800737c:	40c00000 	.word	0x40c00000
 8007380:	40a00000 	.word	0x40a00000
 8007384:	41200000 	.word	0x41200000
 8007388:	2000069c 	.word	0x2000069c
 800738c:	08012ba4 	.word	0x08012ba4

08007390 <acc_detector_presence_config_destroy>:
 8007390:	b198      	cbz	r0, 80073ba <acc_detector_presence_config_destroy+0x2a>
 8007392:	4b0b      	ldr	r3, [pc, #44]	@ (80073c0 <acc_detector_presence_config_destroy+0x30>)
 8007394:	6802      	ldr	r2, [r0, #0]
 8007396:	429a      	cmp	r2, r3
 8007398:	b510      	push	{r4, lr}
 800739a:	4604      	mov	r4, r0
 800739c:	d003      	beq.n	80073a6 <acc_detector_presence_config_destroy+0x16>
 800739e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073a2:	f7ff bf6d 	b.w	8007280 <validate_presence_config.part.0>
 80073a6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80073a8:	f002 fb1a 	bl	80099e0 <acc_config_destroy>
 80073ac:	2300      	movs	r3, #0
 80073ae:	6023      	str	r3, [r4, #0]
 80073b0:	4620      	mov	r0, r4
 80073b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b6:	f004 be4b 	b.w	800c050 <acc_rss_integration_mem_free>
 80073ba:	f7ff bf61 	b.w	8007280 <validate_presence_config.part.0>
 80073be:	bf00      	nop
 80073c0:	1337b102 	.word	0x1337b102

080073c4 <acc_detector_presence_config_log>:
 80073c4:	b530      	push	{r4, r5, lr}
 80073c6:	b083      	sub	sp, #12
 80073c8:	b120      	cbz	r0, 80073d4 <acc_detector_presence_config_log+0x10>
 80073ca:	4b08      	ldr	r3, [pc, #32]	@ (80073ec <acc_detector_presence_config_log+0x28>)
 80073cc:	6802      	ldr	r2, [r0, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	4604      	mov	r4, r0
 80073d2:	d013      	beq.n	80073fc <acc_detector_presence_config_log+0x38>
 80073d4:	f7ff ff54 	bl	8007280 <validate_presence_config.part.0>
 80073d8:	4b05      	ldr	r3, [pc, #20]	@ (80073f0 <acc_detector_presence_config_log+0x2c>)
 80073da:	4a06      	ldr	r2, [pc, #24]	@ (80073f4 <acc_detector_presence_config_log+0x30>)
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	4906      	ldr	r1, [pc, #24]	@ (80073f8 <acc_detector_presence_config_log+0x34>)
 80073e0:	2000      	movs	r0, #0
 80073e2:	b003      	add	sp, #12
 80073e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073e8:	4718      	bx	r3
 80073ea:	bf00      	nop
 80073ec:	1337b102 	.word	0x1337b102
 80073f0:	2000069c 	.word	0x2000069c
 80073f4:	08012f90 	.word	0x08012f90
 80073f8:	08012b80 	.word	0x08012b80
 80073fc:	f001 fd94 	bl	8008f28 <acc_detector_presence_translation_translate_config>
 8007400:	f004 fe3a 	bl	800c078 <acc_rss_integration_log_level>
 8007404:	2801      	cmp	r0, #1
 8007406:	d905      	bls.n	8007414 <acc_detector_presence_config_log+0x50>
 8007408:	4bcd      	ldr	r3, [pc, #820]	@ (8007740 <acc_detector_presence_config_log+0x37c>)
 800740a:	4ace      	ldr	r2, [pc, #824]	@ (8007744 <acc_detector_presence_config_log+0x380>)
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	49ce      	ldr	r1, [pc, #824]	@ (8007748 <acc_detector_presence_config_log+0x384>)
 8007410:	2002      	movs	r0, #2
 8007412:	4798      	blx	r3
 8007414:	f004 fe30 	bl	800c078 <acc_rss_integration_log_level>
 8007418:	2801      	cmp	r0, #1
 800741a:	d906      	bls.n	800742a <acc_detector_presence_config_log+0x66>
 800741c:	4ac8      	ldr	r2, [pc, #800]	@ (8007740 <acc_detector_presence_config_log+0x37c>)
 800741e:	6863      	ldr	r3, [r4, #4]
 8007420:	6915      	ldr	r5, [r2, #16]
 8007422:	49c9      	ldr	r1, [pc, #804]	@ (8007748 <acc_detector_presence_config_log+0x384>)
 8007424:	4ac9      	ldr	r2, [pc, #804]	@ (800774c <acc_detector_presence_config_log+0x388>)
 8007426:	2002      	movs	r0, #2
 8007428:	47a8      	blx	r5
 800742a:	f004 fe25 	bl	800c078 <acc_rss_integration_log_level>
 800742e:	2801      	cmp	r0, #1
 8007430:	f200 847e 	bhi.w	8007d30 <acc_detector_presence_config_log+0x96c>
 8007434:	f004 fe20 	bl	800c078 <acc_rss_integration_log_level>
 8007438:	2801      	cmp	r0, #1
 800743a:	f200 8468 	bhi.w	8007d0e <acc_detector_presence_config_log+0x94a>
 800743e:	f004 fe1b 	bl	800c078 <acc_rss_integration_log_level>
 8007442:	2801      	cmp	r0, #1
 8007444:	f200 8451 	bhi.w	8007cea <acc_detector_presence_config_log+0x926>
 8007448:	f004 fe16 	bl	800c078 <acc_rss_integration_log_level>
 800744c:	2801      	cmp	r0, #1
 800744e:	d907      	bls.n	8007460 <acc_detector_presence_config_log+0x9c>
 8007450:	4abb      	ldr	r2, [pc, #748]	@ (8007740 <acc_detector_presence_config_log+0x37c>)
 8007452:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
 8007456:	6915      	ldr	r5, [r2, #16]
 8007458:	49bb      	ldr	r1, [pc, #748]	@ (8007748 <acc_detector_presence_config_log+0x384>)
 800745a:	4abd      	ldr	r2, [pc, #756]	@ (8007750 <acc_detector_presence_config_log+0x38c>)
 800745c:	2002      	movs	r0, #2
 800745e:	47a8      	blx	r5
 8007460:	f004 fe0a 	bl	800c078 <acc_rss_integration_log_level>
 8007464:	2801      	cmp	r0, #1
 8007466:	d935      	bls.n	80074d4 <acc_detector_presence_config_log+0x110>
 8007468:	edd4 7a13 	vldr	s15, [r4, #76]	@ 0x4c
 800746c:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 8007784 <acc_detector_presence_config_log+0x3c0>
 8007470:	4bb3      	ldr	r3, [pc, #716]	@ (8007740 <acc_detector_presence_config_log+0x37c>)
 8007472:	ed9f 6ac4 	vldr	s12, [pc, #784]	@ 8007784 <acc_detector_presence_config_log+0x3c0>
 8007476:	691d      	ldr	r5, [r3, #16]
 8007478:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8007754 <acc_detector_presence_config_log+0x390>
 800747c:	49b2      	ldr	r1, [pc, #712]	@ (8007748 <acc_detector_presence_config_log+0x384>)
 800747e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007486:	bf48      	it	mi
 8007488:	eef1 7a67 	vnegmi.f32	s15, s15
 800748c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007490:	bf4c      	ite	mi
 8007492:	4bb1      	ldrmi	r3, [pc, #708]	@ (8007758 <acc_detector_presence_config_log+0x394>)
 8007494:	4bb1      	ldrpl	r3, [pc, #708]	@ (800775c <acc_detector_presence_config_log+0x398>)
 8007496:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800749a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800749e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a2:	ee17 2a10 	vmov	r2, s14
 80074a6:	bf4c      	ite	mi
 80074a8:	eeb1 7a67 	vnegmi.f32	s14, s15
 80074ac:	eeb0 7a67 	vmovpl.f32	s14, s15
 80074b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80074b4:	9200      	str	r2, [sp, #0]
 80074b6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80074ba:	4aa9      	ldr	r2, [pc, #676]	@ (8007760 <acc_detector_presence_config_log+0x39c>)
 80074bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80074c0:	2002      	movs	r0, #2
 80074c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80074ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ce:	edcd 7a01 	vstr	s15, [sp, #4]
 80074d2:	47a8      	blx	r5
 80074d4:	f004 fdd0 	bl	800c078 <acc_rss_integration_log_level>
 80074d8:	2801      	cmp	r0, #1
 80074da:	d935      	bls.n	8007548 <acc_detector_presence_config_log+0x184>
 80074dc:	edd4 7a14 	vldr	s15, [r4, #80]	@ 0x50
 80074e0:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8007784 <acc_detector_presence_config_log+0x3c0>
 80074e4:	4b96      	ldr	r3, [pc, #600]	@ (8007740 <acc_detector_presence_config_log+0x37c>)
 80074e6:	ed9f 6aa7 	vldr	s12, [pc, #668]	@ 8007784 <acc_detector_presence_config_log+0x3c0>
 80074ea:	691d      	ldr	r5, [r3, #16]
 80074ec:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8007754 <acc_detector_presence_config_log+0x390>
 80074f0:	4995      	ldr	r1, [pc, #596]	@ (8007748 <acc_detector_presence_config_log+0x384>)
 80074f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fa:	bf48      	it	mi
 80074fc:	eef1 7a67 	vnegmi.f32	s15, s15
 8007500:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007504:	bf4c      	ite	mi
 8007506:	4b94      	ldrmi	r3, [pc, #592]	@ (8007758 <acc_detector_presence_config_log+0x394>)
 8007508:	4b94      	ldrpl	r3, [pc, #592]	@ (800775c <acc_detector_presence_config_log+0x398>)
 800750a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800750e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007516:	ee17 2a10 	vmov	r2, s14
 800751a:	bf4c      	ite	mi
 800751c:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007520:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007524:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007528:	9200      	str	r2, [sp, #0]
 800752a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800752e:	4a8d      	ldr	r2, [pc, #564]	@ (8007764 <acc_detector_presence_config_log+0x3a0>)
 8007530:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007534:	2002      	movs	r0, #2
 8007536:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800753a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800753e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007542:	edcd 7a01 	vstr	s15, [sp, #4]
 8007546:	47a8      	blx	r5
 8007548:	f004 fd96 	bl	800c078 <acc_rss_integration_log_level>
 800754c:	2801      	cmp	r0, #1
 800754e:	d907      	bls.n	8007560 <acc_detector_presence_config_log+0x19c>
 8007550:	4a7b      	ldr	r2, [pc, #492]	@ (8007740 <acc_detector_presence_config_log+0x37c>)
 8007552:	f8b4 3054 	ldrh.w	r3, [r4, #84]	@ 0x54
 8007556:	6915      	ldr	r5, [r2, #16]
 8007558:	497b      	ldr	r1, [pc, #492]	@ (8007748 <acc_detector_presence_config_log+0x384>)
 800755a:	4a83      	ldr	r2, [pc, #524]	@ (8007768 <acc_detector_presence_config_log+0x3a4>)
 800755c:	2002      	movs	r0, #2
 800755e:	47a8      	blx	r5
 8007560:	f004 fd8a 	bl	800c078 <acc_rss_integration_log_level>
 8007564:	2801      	cmp	r0, #1
 8007566:	d907      	bls.n	8007578 <acc_detector_presence_config_log+0x1b4>
 8007568:	4a75      	ldr	r2, [pc, #468]	@ (8007740 <acc_detector_presence_config_log+0x37c>)
 800756a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 800756e:	6915      	ldr	r5, [r2, #16]
 8007570:	4975      	ldr	r1, [pc, #468]	@ (8007748 <acc_detector_presence_config_log+0x384>)
 8007572:	4a7e      	ldr	r2, [pc, #504]	@ (800776c <acc_detector_presence_config_log+0x3a8>)
 8007574:	2002      	movs	r0, #2
 8007576:	47a8      	blx	r5
 8007578:	f004 fd7e 	bl	800c078 <acc_rss_integration_log_level>
 800757c:	2801      	cmp	r0, #1
 800757e:	f200 83a3 	bhi.w	8007cc8 <acc_detector_presence_config_log+0x904>
 8007582:	f004 fd79 	bl	800c078 <acc_rss_integration_log_level>
 8007586:	2801      	cmp	r0, #1
 8007588:	d935      	bls.n	80075f6 <acc_detector_presence_config_log+0x232>
 800758a:	edd4 7a17 	vldr	s15, [r4, #92]	@ 0x5c
 800758e:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8007784 <acc_detector_presence_config_log+0x3c0>
 8007592:	4b6b      	ldr	r3, [pc, #428]	@ (8007740 <acc_detector_presence_config_log+0x37c>)
 8007594:	ed9f 6a7b 	vldr	s12, [pc, #492]	@ 8007784 <acc_detector_presence_config_log+0x3c0>
 8007598:	691d      	ldr	r5, [r3, #16]
 800759a:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007754 <acc_detector_presence_config_log+0x390>
 800759e:	496a      	ldr	r1, [pc, #424]	@ (8007748 <acc_detector_presence_config_log+0x384>)
 80075a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a8:	bf48      	it	mi
 80075aa:	eef1 7a67 	vnegmi.f32	s15, s15
 80075ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075b2:	bf4c      	ite	mi
 80075b4:	4b68      	ldrmi	r3, [pc, #416]	@ (8007758 <acc_detector_presence_config_log+0x394>)
 80075b6:	4b69      	ldrpl	r3, [pc, #420]	@ (800775c <acc_detector_presence_config_log+0x398>)
 80075b8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80075bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c4:	ee17 2a10 	vmov	r2, s14
 80075c8:	bf4c      	ite	mi
 80075ca:	eeb1 7a67 	vnegmi.f32	s14, s15
 80075ce:	eeb0 7a67 	vmovpl.f32	s14, s15
 80075d2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80075d6:	9200      	str	r2, [sp, #0]
 80075d8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80075dc:	4a64      	ldr	r2, [pc, #400]	@ (8007770 <acc_detector_presence_config_log+0x3ac>)
 80075de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80075e2:	2002      	movs	r0, #2
 80075e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80075ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f0:	edcd 7a01 	vstr	s15, [sp, #4]
 80075f4:	47a8      	blx	r5
 80075f6:	f004 fd3f 	bl	800c078 <acc_rss_integration_log_level>
 80075fa:	2801      	cmp	r0, #1
 80075fc:	f200 8312 	bhi.w	8007c24 <acc_detector_presence_config_log+0x860>
 8007600:	f004 fd3a 	bl	800c078 <acc_rss_integration_log_level>
 8007604:	2801      	cmp	r0, #1
 8007606:	f200 82fc 	bhi.w	8007c02 <acc_detector_presence_config_log+0x83e>
 800760a:	f004 fd35 	bl	800c078 <acc_rss_integration_log_level>
 800760e:	2801      	cmp	r0, #1
 8007610:	f200 8329 	bhi.w	8007c66 <acc_detector_presence_config_log+0x8a2>
 8007614:	f004 fd30 	bl	800c078 <acc_rss_integration_log_level>
 8007618:	2801      	cmp	r0, #1
 800761a:	d935      	bls.n	8007688 <acc_detector_presence_config_log+0x2c4>
 800761c:	edd4 7a19 	vldr	s15, [r4, #100]	@ 0x64
 8007620:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8007784 <acc_detector_presence_config_log+0x3c0>
 8007624:	4b46      	ldr	r3, [pc, #280]	@ (8007740 <acc_detector_presence_config_log+0x37c>)
 8007626:	ed9f 6a57 	vldr	s12, [pc, #348]	@ 8007784 <acc_detector_presence_config_log+0x3c0>
 800762a:	691d      	ldr	r5, [r3, #16]
 800762c:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8007754 <acc_detector_presence_config_log+0x390>
 8007630:	4945      	ldr	r1, [pc, #276]	@ (8007748 <acc_detector_presence_config_log+0x384>)
 8007632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763a:	bf48      	it	mi
 800763c:	eef1 7a67 	vnegmi.f32	s15, s15
 8007640:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007644:	bf4c      	ite	mi
 8007646:	4b44      	ldrmi	r3, [pc, #272]	@ (8007758 <acc_detector_presence_config_log+0x394>)
 8007648:	4b44      	ldrpl	r3, [pc, #272]	@ (800775c <acc_detector_presence_config_log+0x398>)
 800764a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800764e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007656:	ee17 2a10 	vmov	r2, s14
 800765a:	bf4c      	ite	mi
 800765c:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007660:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007664:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007668:	9200      	str	r2, [sp, #0]
 800766a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800766e:	4a41      	ldr	r2, [pc, #260]	@ (8007774 <acc_detector_presence_config_log+0x3b0>)
 8007670:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007674:	2002      	movs	r0, #2
 8007676:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800767a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800767e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007682:	edcd 7a01 	vstr	s15, [sp, #4]
 8007686:	47a8      	blx	r5
 8007688:	f004 fcf6 	bl	800c078 <acc_rss_integration_log_level>
 800768c:	2801      	cmp	r0, #1
 800768e:	d905      	bls.n	800769c <acc_detector_presence_config_log+0x2d8>
 8007690:	4b2b      	ldr	r3, [pc, #172]	@ (8007740 <acc_detector_presence_config_log+0x37c>)
 8007692:	4a39      	ldr	r2, [pc, #228]	@ (8007778 <acc_detector_presence_config_log+0x3b4>)
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	492c      	ldr	r1, [pc, #176]	@ (8007748 <acc_detector_presence_config_log+0x384>)
 8007698:	2002      	movs	r0, #2
 800769a:	4798      	blx	r3
 800769c:	f004 fcec 	bl	800c078 <acc_rss_integration_log_level>
 80076a0:	2801      	cmp	r0, #1
 80076a2:	d906      	bls.n	80076b2 <acc_detector_presence_config_log+0x2ee>
 80076a4:	4a26      	ldr	r2, [pc, #152]	@ (8007740 <acc_detector_presence_config_log+0x37c>)
 80076a6:	8a23      	ldrh	r3, [r4, #16]
 80076a8:	6915      	ldr	r5, [r2, #16]
 80076aa:	4927      	ldr	r1, [pc, #156]	@ (8007748 <acc_detector_presence_config_log+0x384>)
 80076ac:	4a33      	ldr	r2, [pc, #204]	@ (800777c <acc_detector_presence_config_log+0x3b8>)
 80076ae:	2002      	movs	r0, #2
 80076b0:	47a8      	blx	r5
 80076b2:	f004 fce1 	bl	800c078 <acc_rss_integration_log_level>
 80076b6:	2801      	cmp	r0, #1
 80076b8:	f200 82f6 	bhi.w	8007ca8 <acc_detector_presence_config_log+0x8e4>
 80076bc:	f004 fcdc 	bl	800c078 <acc_rss_integration_log_level>
 80076c0:	2801      	cmp	r0, #1
 80076c2:	f200 82e1 	bhi.w	8007c88 <acc_detector_presence_config_log+0x8c4>
 80076c6:	f004 fcd7 	bl	800c078 <acc_rss_integration_log_level>
 80076ca:	2801      	cmp	r0, #1
 80076cc:	f200 82bb 	bhi.w	8007c46 <acc_detector_presence_config_log+0x882>
 80076d0:	f004 fcd2 	bl	800c078 <acc_rss_integration_log_level>
 80076d4:	2801      	cmp	r0, #1
 80076d6:	d95a      	bls.n	800778e <acc_detector_presence_config_log+0x3ca>
 80076d8:	edd4 7a06 	vldr	s15, [r4, #24]
 80076dc:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8007784 <acc_detector_presence_config_log+0x3c0>
 80076e0:	4b17      	ldr	r3, [pc, #92]	@ (8007740 <acc_detector_presence_config_log+0x37c>)
 80076e2:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8007784 <acc_detector_presence_config_log+0x3c0>
 80076e6:	691d      	ldr	r5, [r3, #16]
 80076e8:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8007754 <acc_detector_presence_config_log+0x390>
 80076ec:	4916      	ldr	r1, [pc, #88]	@ (8007748 <acc_detector_presence_config_log+0x384>)
 80076ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f6:	bf48      	it	mi
 80076f8:	eef1 7a67 	vnegmi.f32	s15, s15
 80076fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007700:	bf4c      	ite	mi
 8007702:	4b15      	ldrmi	r3, [pc, #84]	@ (8007758 <acc_detector_presence_config_log+0x394>)
 8007704:	4b15      	ldrpl	r3, [pc, #84]	@ (800775c <acc_detector_presence_config_log+0x398>)
 8007706:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800770a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800770e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007712:	ee17 2a10 	vmov	r2, s14
 8007716:	bf4c      	ite	mi
 8007718:	eeb1 7a67 	vnegmi.f32	s14, s15
 800771c:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007720:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007724:	9200      	str	r2, [sp, #0]
 8007726:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800772a:	4a15      	ldr	r2, [pc, #84]	@ (8007780 <acc_detector_presence_config_log+0x3bc>)
 800772c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007730:	2002      	movs	r0, #2
 8007732:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007736:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800773a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800773e:	e023      	b.n	8007788 <acc_detector_presence_config_log+0x3c4>
 8007740:	2000069c 	.word	0x2000069c
 8007744:	08012bc8 	.word	0x08012bc8
 8007748:	08012b80 	.word	0x08012b80
 800774c:	08012be4 	.word	0x08012be4
 8007750:	08012c40 	.word	0x08012c40
 8007754:	49742400 	.word	0x49742400
 8007758:	08012bc4 	.word	0x08012bc4
 800775c:	08013be0 	.word	0x08013be0
 8007760:	08012c58 	.word	0x08012c58
 8007764:	08012c70 	.word	0x08012c70
 8007768:	08012c84 	.word	0x08012c84
 800776c:	08012c9c 	.word	0x08012c9c
 8007770:	08012cc4 	.word	0x08012cc4
 8007774:	08012d30 	.word	0x08012d30
 8007778:	08012d4c 	.word	0x08012d4c
 800777c:	08012d70 	.word	0x08012d70
 8007780:	08012dec 	.word	0x08012dec
 8007784:	350637bd 	.word	0x350637bd
 8007788:	edcd 7a01 	vstr	s15, [sp, #4]
 800778c:	47a8      	blx	r5
 800778e:	f004 fc73 	bl	800c078 <acc_rss_integration_log_level>
 8007792:	2801      	cmp	r0, #1
 8007794:	d935      	bls.n	8007802 <acc_detector_presence_config_log+0x43e>
 8007796:	edd4 7a07 	vldr	s15, [r4, #28]
 800779a:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8007784 <acc_detector_presence_config_log+0x3c0>
 800779e:	4bd4      	ldr	r3, [pc, #848]	@ (8007af0 <acc_detector_presence_config_log+0x72c>)
 80077a0:	ed9f 6ad4 	vldr	s12, [pc, #848]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 80077a4:	691d      	ldr	r5, [r3, #16]
 80077a6:	eddf 6ad4 	vldr	s13, [pc, #848]	@ 8007af8 <acc_detector_presence_config_log+0x734>
 80077aa:	49d4      	ldr	r1, [pc, #848]	@ (8007afc <acc_detector_presence_config_log+0x738>)
 80077ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b4:	bf48      	it	mi
 80077b6:	eef1 7a67 	vnegmi.f32	s15, s15
 80077ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077be:	bf4c      	ite	mi
 80077c0:	4bcf      	ldrmi	r3, [pc, #828]	@ (8007b00 <acc_detector_presence_config_log+0x73c>)
 80077c2:	4bd0      	ldrpl	r3, [pc, #832]	@ (8007b04 <acc_detector_presence_config_log+0x740>)
 80077c4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80077c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d0:	ee17 2a10 	vmov	r2, s14
 80077d4:	bf4c      	ite	mi
 80077d6:	eeb1 7a67 	vnegmi.f32	s14, s15
 80077da:	eeb0 7a67 	vmovpl.f32	s14, s15
 80077de:	ee37 7a06 	vadd.f32	s14, s14, s12
 80077e2:	9200      	str	r2, [sp, #0]
 80077e4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80077e8:	4ac7      	ldr	r2, [pc, #796]	@ (8007b08 <acc_detector_presence_config_log+0x744>)
 80077ea:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80077ee:	2002      	movs	r0, #2
 80077f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80077f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80077f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077fc:	edcd 7a01 	vstr	s15, [sp, #4]
 8007800:	47a8      	blx	r5
 8007802:	f004 fc39 	bl	800c078 <acc_rss_integration_log_level>
 8007806:	2801      	cmp	r0, #1
 8007808:	d935      	bls.n	8007876 <acc_detector_presence_config_log+0x4b2>
 800780a:	edd4 7a08 	vldr	s15, [r4, #32]
 800780e:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 8007812:	4bb7      	ldr	r3, [pc, #732]	@ (8007af0 <acc_detector_presence_config_log+0x72c>)
 8007814:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 8007818:	691d      	ldr	r5, [r3, #16]
 800781a:	eddf 6ab7 	vldr	s13, [pc, #732]	@ 8007af8 <acc_detector_presence_config_log+0x734>
 800781e:	49b7      	ldr	r1, [pc, #732]	@ (8007afc <acc_detector_presence_config_log+0x738>)
 8007820:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007828:	bf48      	it	mi
 800782a:	eef1 7a67 	vnegmi.f32	s15, s15
 800782e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007832:	bf4c      	ite	mi
 8007834:	4bb2      	ldrmi	r3, [pc, #712]	@ (8007b00 <acc_detector_presence_config_log+0x73c>)
 8007836:	4bb3      	ldrpl	r3, [pc, #716]	@ (8007b04 <acc_detector_presence_config_log+0x740>)
 8007838:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800783c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007844:	ee17 2a10 	vmov	r2, s14
 8007848:	bf4c      	ite	mi
 800784a:	eeb1 7a67 	vnegmi.f32	s14, s15
 800784e:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007852:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007856:	9200      	str	r2, [sp, #0]
 8007858:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800785c:	4aab      	ldr	r2, [pc, #684]	@ (8007b0c <acc_detector_presence_config_log+0x748>)
 800785e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007862:	2002      	movs	r0, #2
 8007864:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007868:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800786c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007870:	edcd 7a01 	vstr	s15, [sp, #4]
 8007874:	47a8      	blx	r5
 8007876:	f004 fbff 	bl	800c078 <acc_rss_integration_log_level>
 800787a:	2801      	cmp	r0, #1
 800787c:	d935      	bls.n	80078ea <acc_detector_presence_config_log+0x526>
 800787e:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 8007882:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 8007886:	4b9a      	ldr	r3, [pc, #616]	@ (8007af0 <acc_detector_presence_config_log+0x72c>)
 8007888:	ed9f 6a9a 	vldr	s12, [pc, #616]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 800788c:	691d      	ldr	r5, [r3, #16]
 800788e:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8007af8 <acc_detector_presence_config_log+0x734>
 8007892:	499a      	ldr	r1, [pc, #616]	@ (8007afc <acc_detector_presence_config_log+0x738>)
 8007894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789c:	bf48      	it	mi
 800789e:	eef1 7a67 	vnegmi.f32	s15, s15
 80078a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078a6:	bf4c      	ite	mi
 80078a8:	4b95      	ldrmi	r3, [pc, #596]	@ (8007b00 <acc_detector_presence_config_log+0x73c>)
 80078aa:	4b96      	ldrpl	r3, [pc, #600]	@ (8007b04 <acc_detector_presence_config_log+0x740>)
 80078ac:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80078b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b8:	ee17 2a10 	vmov	r2, s14
 80078bc:	bf4c      	ite	mi
 80078be:	eeb1 7a67 	vnegmi.f32	s14, s15
 80078c2:	eeb0 7a67 	vmovpl.f32	s14, s15
 80078c6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80078ca:	9200      	str	r2, [sp, #0]
 80078cc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80078d0:	4a8f      	ldr	r2, [pc, #572]	@ (8007b10 <acc_detector_presence_config_log+0x74c>)
 80078d2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80078d6:	2002      	movs	r0, #2
 80078d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80078e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078e4:	edcd 7a01 	vstr	s15, [sp, #4]
 80078e8:	47a8      	blx	r5
 80078ea:	f004 fbc5 	bl	800c078 <acc_rss_integration_log_level>
 80078ee:	2801      	cmp	r0, #1
 80078f0:	d935      	bls.n	800795e <acc_detector_presence_config_log+0x59a>
 80078f2:	edd4 7a0a 	vldr	s15, [r4, #40]	@ 0x28
 80078f6:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 80078fa:	4b7d      	ldr	r3, [pc, #500]	@ (8007af0 <acc_detector_presence_config_log+0x72c>)
 80078fc:	ed9f 6a7d 	vldr	s12, [pc, #500]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 8007900:	691d      	ldr	r5, [r3, #16]
 8007902:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8007af8 <acc_detector_presence_config_log+0x734>
 8007906:	497d      	ldr	r1, [pc, #500]	@ (8007afc <acc_detector_presence_config_log+0x738>)
 8007908:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800790c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007910:	bf48      	it	mi
 8007912:	eef1 7a67 	vnegmi.f32	s15, s15
 8007916:	ee77 7a87 	vadd.f32	s15, s15, s14
 800791a:	bf4c      	ite	mi
 800791c:	4b78      	ldrmi	r3, [pc, #480]	@ (8007b00 <acc_detector_presence_config_log+0x73c>)
 800791e:	4b79      	ldrpl	r3, [pc, #484]	@ (8007b04 <acc_detector_presence_config_log+0x740>)
 8007920:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8007924:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800792c:	ee17 2a10 	vmov	r2, s14
 8007930:	bf4c      	ite	mi
 8007932:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007936:	eeb0 7a67 	vmovpl.f32	s14, s15
 800793a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800793e:	9200      	str	r2, [sp, #0]
 8007940:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007944:	4a73      	ldr	r2, [pc, #460]	@ (8007b14 <acc_detector_presence_config_log+0x750>)
 8007946:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800794a:	2002      	movs	r0, #2
 800794c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007950:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007958:	edcd 7a01 	vstr	s15, [sp, #4]
 800795c:	47a8      	blx	r5
 800795e:	f004 fb8b 	bl	800c078 <acc_rss_integration_log_level>
 8007962:	2801      	cmp	r0, #1
 8007964:	d935      	bls.n	80079d2 <acc_detector_presence_config_log+0x60e>
 8007966:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800796a:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 800796e:	4b60      	ldr	r3, [pc, #384]	@ (8007af0 <acc_detector_presence_config_log+0x72c>)
 8007970:	ed9f 6a60 	vldr	s12, [pc, #384]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 8007974:	691d      	ldr	r5, [r3, #16]
 8007976:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8007af8 <acc_detector_presence_config_log+0x734>
 800797a:	4960      	ldr	r1, [pc, #384]	@ (8007afc <acc_detector_presence_config_log+0x738>)
 800797c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007984:	bf48      	it	mi
 8007986:	eef1 7a67 	vnegmi.f32	s15, s15
 800798a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800798e:	bf4c      	ite	mi
 8007990:	4b5b      	ldrmi	r3, [pc, #364]	@ (8007b00 <acc_detector_presence_config_log+0x73c>)
 8007992:	4b5c      	ldrpl	r3, [pc, #368]	@ (8007b04 <acc_detector_presence_config_log+0x740>)
 8007994:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8007998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800799c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a0:	ee17 2a10 	vmov	r2, s14
 80079a4:	bf4c      	ite	mi
 80079a6:	eeb1 7a67 	vnegmi.f32	s14, s15
 80079aa:	eeb0 7a67 	vmovpl.f32	s14, s15
 80079ae:	ee37 7a06 	vadd.f32	s14, s14, s12
 80079b2:	9200      	str	r2, [sp, #0]
 80079b4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80079b8:	4a57      	ldr	r2, [pc, #348]	@ (8007b18 <acc_detector_presence_config_log+0x754>)
 80079ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80079be:	2002      	movs	r0, #2
 80079c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80079c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079cc:	edcd 7a01 	vstr	s15, [sp, #4]
 80079d0:	47a8      	blx	r5
 80079d2:	f004 fb51 	bl	800c078 <acc_rss_integration_log_level>
 80079d6:	2801      	cmp	r0, #1
 80079d8:	d935      	bls.n	8007a46 <acc_detector_presence_config_log+0x682>
 80079da:	edd4 7a0c 	vldr	s15, [r4, #48]	@ 0x30
 80079de:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 80079e2:	4b43      	ldr	r3, [pc, #268]	@ (8007af0 <acc_detector_presence_config_log+0x72c>)
 80079e4:	ed9f 6a43 	vldr	s12, [pc, #268]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 80079e8:	691d      	ldr	r5, [r3, #16]
 80079ea:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007af8 <acc_detector_presence_config_log+0x734>
 80079ee:	4943      	ldr	r1, [pc, #268]	@ (8007afc <acc_detector_presence_config_log+0x738>)
 80079f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80079f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f8:	bf48      	it	mi
 80079fa:	eef1 7a67 	vnegmi.f32	s15, s15
 80079fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a02:	bf4c      	ite	mi
 8007a04:	4b3e      	ldrmi	r3, [pc, #248]	@ (8007b00 <acc_detector_presence_config_log+0x73c>)
 8007a06:	4b3f      	ldrpl	r3, [pc, #252]	@ (8007b04 <acc_detector_presence_config_log+0x740>)
 8007a08:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8007a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a14:	ee17 2a10 	vmov	r2, s14
 8007a18:	bf4c      	ite	mi
 8007a1a:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007a1e:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007a22:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007a26:	9200      	str	r2, [sp, #0]
 8007a28:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007a2c:	4a3b      	ldr	r2, [pc, #236]	@ (8007b1c <acc_detector_presence_config_log+0x758>)
 8007a2e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007a32:	2002      	movs	r0, #2
 8007a34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a40:	edcd 7a01 	vstr	s15, [sp, #4]
 8007a44:	47a8      	blx	r5
 8007a46:	f004 fb17 	bl	800c078 <acc_rss_integration_log_level>
 8007a4a:	2801      	cmp	r0, #1
 8007a4c:	d935      	bls.n	8007aba <acc_detector_presence_config_log+0x6f6>
 8007a4e:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8007a52:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 8007a56:	4b26      	ldr	r3, [pc, #152]	@ (8007af0 <acc_detector_presence_config_log+0x72c>)
 8007a58:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 8007a5c:	691d      	ldr	r5, [r3, #16]
 8007a5e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007af8 <acc_detector_presence_config_log+0x734>
 8007a62:	4926      	ldr	r1, [pc, #152]	@ (8007afc <acc_detector_presence_config_log+0x738>)
 8007a64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a6c:	bf48      	it	mi
 8007a6e:	eef1 7a67 	vnegmi.f32	s15, s15
 8007a72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a76:	bf4c      	ite	mi
 8007a78:	4b21      	ldrmi	r3, [pc, #132]	@ (8007b00 <acc_detector_presence_config_log+0x73c>)
 8007a7a:	4b22      	ldrpl	r3, [pc, #136]	@ (8007b04 <acc_detector_presence_config_log+0x740>)
 8007a7c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8007a80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a88:	ee17 2a10 	vmov	r2, s14
 8007a8c:	bf4c      	ite	mi
 8007a8e:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007a92:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007a96:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007a9a:	9200      	str	r2, [sp, #0]
 8007a9c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8007b20 <acc_detector_presence_config_log+0x75c>)
 8007aa2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007aa6:	2002      	movs	r0, #2
 8007aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007aac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab4:	edcd 7a01 	vstr	s15, [sp, #4]
 8007ab8:	47a8      	blx	r5
 8007aba:	f004 fadd 	bl	800c078 <acc_rss_integration_log_level>
 8007abe:	2801      	cmp	r0, #1
 8007ac0:	d951      	bls.n	8007b66 <acc_detector_presence_config_log+0x7a2>
 8007ac2:	edd4 7a0e 	vldr	s15, [r4, #56]	@ 0x38
 8007ac6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 8007aca:	4b09      	ldr	r3, [pc, #36]	@ (8007af0 <acc_detector_presence_config_log+0x72c>)
 8007acc:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8007af4 <acc_detector_presence_config_log+0x730>
 8007ad0:	691d      	ldr	r5, [r3, #16]
 8007ad2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007af8 <acc_detector_presence_config_log+0x734>
 8007ad6:	4909      	ldr	r1, [pc, #36]	@ (8007afc <acc_detector_presence_config_log+0x738>)
 8007ad8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ae0:	bf48      	it	mi
 8007ae2:	eef1 7a67 	vnegmi.f32	s15, s15
 8007ae6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007aea:	bf48      	it	mi
 8007aec:	4b04      	ldrmi	r3, [pc, #16]	@ (8007b00 <acc_detector_presence_config_log+0x73c>)
 8007aee:	e019      	b.n	8007b24 <acc_detector_presence_config_log+0x760>
 8007af0:	2000069c 	.word	0x2000069c
 8007af4:	350637bd 	.word	0x350637bd
 8007af8:	49742400 	.word	0x49742400
 8007afc:	08012b80 	.word	0x08012b80
 8007b00:	08012bc4 	.word	0x08012bc4
 8007b04:	08013be0 	.word	0x08013be0
 8007b08:	08012e14 	.word	0x08012e14
 8007b0c:	08012e3c 	.word	0x08012e3c
 8007b10:	08012e6c 	.word	0x08012e6c
 8007b14:	08012e94 	.word	0x08012e94
 8007b18:	08012ebc 	.word	0x08012ebc
 8007b1c:	08012ee0 	.word	0x08012ee0
 8007b20:	08012f00 	.word	0x08012f00
 8007b24:	bf58      	it	pl
 8007b26:	4b8b      	ldrpl	r3, [pc, #556]	@ (8007d54 <acc_detector_presence_config_log+0x990>)
 8007b28:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8007b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b34:	ee17 2a10 	vmov	r2, s14
 8007b38:	bf4c      	ite	mi
 8007b3a:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007b3e:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007b42:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007b46:	9200      	str	r2, [sp, #0]
 8007b48:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007b4c:	4a82      	ldr	r2, [pc, #520]	@ (8007d58 <acc_detector_presence_config_log+0x994>)
 8007b4e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007b52:	2002      	movs	r0, #2
 8007b54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b60:	edcd 7a01 	vstr	s15, [sp, #4]
 8007b64:	47a8      	blx	r5
 8007b66:	f004 fa87 	bl	800c078 <acc_rss_integration_log_level>
 8007b6a:	2801      	cmp	r0, #1
 8007b6c:	d935      	bls.n	8007bda <acc_detector_presence_config_log+0x816>
 8007b6e:	edd4 7a0f 	vldr	s15, [r4, #60]	@ 0x3c
 8007b72:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8007d5c <acc_detector_presence_config_log+0x998>
 8007b76:	4b7a      	ldr	r3, [pc, #488]	@ (8007d60 <acc_detector_presence_config_log+0x99c>)
 8007b78:	ed9f 6a78 	vldr	s12, [pc, #480]	@ 8007d5c <acc_detector_presence_config_log+0x998>
 8007b7c:	691d      	ldr	r5, [r3, #16]
 8007b7e:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8007d64 <acc_detector_presence_config_log+0x9a0>
 8007b82:	4979      	ldr	r1, [pc, #484]	@ (8007d68 <acc_detector_presence_config_log+0x9a4>)
 8007b84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b8c:	bf48      	it	mi
 8007b8e:	eef1 7a67 	vnegmi.f32	s15, s15
 8007b92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b96:	bf4c      	ite	mi
 8007b98:	4b74      	ldrmi	r3, [pc, #464]	@ (8007d6c <acc_detector_presence_config_log+0x9a8>)
 8007b9a:	4b6e      	ldrpl	r3, [pc, #440]	@ (8007d54 <acc_detector_presence_config_log+0x990>)
 8007b9c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8007ba0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba8:	ee17 2a10 	vmov	r2, s14
 8007bac:	bf4c      	ite	mi
 8007bae:	eeb1 7a67 	vnegmi.f32	s14, s15
 8007bb2:	eeb0 7a67 	vmovpl.f32	s14, s15
 8007bb6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007bba:	9200      	str	r2, [sp, #0]
 8007bbc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007bc0:	4a6b      	ldr	r2, [pc, #428]	@ (8007d70 <acc_detector_presence_config_log+0x9ac>)
 8007bc2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007bc6:	2002      	movs	r0, #2
 8007bc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bd4:	edcd 7a01 	vstr	s15, [sp, #4]
 8007bd8:	47a8      	blx	r5
 8007bda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bdc:	b17b      	cbz	r3, 8007bfe <acc_detector_presence_config_log+0x83a>
 8007bde:	f004 fa4b 	bl	800c078 <acc_rss_integration_log_level>
 8007be2:	2801      	cmp	r0, #1
 8007be4:	d905      	bls.n	8007bf2 <acc_detector_presence_config_log+0x82e>
 8007be6:	4b5e      	ldr	r3, [pc, #376]	@ (8007d60 <acc_detector_presence_config_log+0x99c>)
 8007be8:	4a62      	ldr	r2, [pc, #392]	@ (8007d74 <acc_detector_presence_config_log+0x9b0>)
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	495e      	ldr	r1, [pc, #376]	@ (8007d68 <acc_detector_presence_config_log+0x9a4>)
 8007bee:	2002      	movs	r0, #2
 8007bf0:	4798      	blx	r3
 8007bf2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007bf4:	b003      	add	sp, #12
 8007bf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bfa:	f001 bd1f 	b.w	800963c <acc_config_log>
 8007bfe:	b003      	add	sp, #12
 8007c00:	bd30      	pop	{r4, r5, pc}
 8007c02:	4b57      	ldr	r3, [pc, #348]	@ (8007d60 <acc_detector_presence_config_log+0x99c>)
 8007c04:	f894 0061 	ldrb.w	r0, [r4, #97]	@ 0x61
 8007c08:	691d      	ldr	r5, [r3, #16]
 8007c0a:	f006 fb97 	bl	800e33c <acc_utils_bool_to_str>
 8007c0e:	4a5a      	ldr	r2, [pc, #360]	@ (8007d78 <acc_detector_presence_config_log+0x9b4>)
 8007c10:	4955      	ldr	r1, [pc, #340]	@ (8007d68 <acc_detector_presence_config_log+0x9a4>)
 8007c12:	4603      	mov	r3, r0
 8007c14:	2002      	movs	r0, #2
 8007c16:	47a8      	blx	r5
 8007c18:	f004 fa2e 	bl	800c078 <acc_rss_integration_log_level>
 8007c1c:	2801      	cmp	r0, #1
 8007c1e:	f67f acf9 	bls.w	8007614 <acc_detector_presence_config_log+0x250>
 8007c22:	e020      	b.n	8007c66 <acc_detector_presence_config_log+0x8a2>
 8007c24:	4b4e      	ldr	r3, [pc, #312]	@ (8007d60 <acc_detector_presence_config_log+0x99c>)
 8007c26:	f894 0060 	ldrb.w	r0, [r4, #96]	@ 0x60
 8007c2a:	691d      	ldr	r5, [r3, #16]
 8007c2c:	f006 fb86 	bl	800e33c <acc_utils_bool_to_str>
 8007c30:	4a52      	ldr	r2, [pc, #328]	@ (8007d7c <acc_detector_presence_config_log+0x9b8>)
 8007c32:	494d      	ldr	r1, [pc, #308]	@ (8007d68 <acc_detector_presence_config_log+0x9a4>)
 8007c34:	4603      	mov	r3, r0
 8007c36:	2002      	movs	r0, #2
 8007c38:	47a8      	blx	r5
 8007c3a:	f004 fa1d 	bl	800c078 <acc_rss_integration_log_level>
 8007c3e:	2801      	cmp	r0, #1
 8007c40:	f67f ace3 	bls.w	800760a <acc_detector_presence_config_log+0x246>
 8007c44:	e7dd      	b.n	8007c02 <acc_detector_presence_config_log+0x83e>
 8007c46:	4b46      	ldr	r3, [pc, #280]	@ (8007d60 <acc_detector_presence_config_log+0x99c>)
 8007c48:	7d20      	ldrb	r0, [r4, #20]
 8007c4a:	691d      	ldr	r5, [r3, #16]
 8007c4c:	f006 fb76 	bl	800e33c <acc_utils_bool_to_str>
 8007c50:	4a4b      	ldr	r2, [pc, #300]	@ (8007d80 <acc_detector_presence_config_log+0x9bc>)
 8007c52:	4945      	ldr	r1, [pc, #276]	@ (8007d68 <acc_detector_presence_config_log+0x9a4>)
 8007c54:	4603      	mov	r3, r0
 8007c56:	2002      	movs	r0, #2
 8007c58:	47a8      	blx	r5
 8007c5a:	f004 fa0d 	bl	800c078 <acc_rss_integration_log_level>
 8007c5e:	2801      	cmp	r0, #1
 8007c60:	f63f ad3a 	bhi.w	80076d8 <acc_detector_presence_config_log+0x314>
 8007c64:	e593      	b.n	800778e <acc_detector_presence_config_log+0x3ca>
 8007c66:	4b3e      	ldr	r3, [pc, #248]	@ (8007d60 <acc_detector_presence_config_log+0x99c>)
 8007c68:	f894 0062 	ldrb.w	r0, [r4, #98]	@ 0x62
 8007c6c:	691d      	ldr	r5, [r3, #16]
 8007c6e:	f006 fb65 	bl	800e33c <acc_utils_bool_to_str>
 8007c72:	4a44      	ldr	r2, [pc, #272]	@ (8007d84 <acc_detector_presence_config_log+0x9c0>)
 8007c74:	493c      	ldr	r1, [pc, #240]	@ (8007d68 <acc_detector_presence_config_log+0x9a4>)
 8007c76:	4603      	mov	r3, r0
 8007c78:	2002      	movs	r0, #2
 8007c7a:	47a8      	blx	r5
 8007c7c:	f004 f9fc 	bl	800c078 <acc_rss_integration_log_level>
 8007c80:	2801      	cmp	r0, #1
 8007c82:	f63f accb 	bhi.w	800761c <acc_detector_presence_config_log+0x258>
 8007c86:	e4ff      	b.n	8007688 <acc_detector_presence_config_log+0x2c4>
 8007c88:	4b35      	ldr	r3, [pc, #212]	@ (8007d60 <acc_detector_presence_config_log+0x99c>)
 8007c8a:	7ce0      	ldrb	r0, [r4, #19]
 8007c8c:	691d      	ldr	r5, [r3, #16]
 8007c8e:	f006 fb55 	bl	800e33c <acc_utils_bool_to_str>
 8007c92:	4a3d      	ldr	r2, [pc, #244]	@ (8007d88 <acc_detector_presence_config_log+0x9c4>)
 8007c94:	4934      	ldr	r1, [pc, #208]	@ (8007d68 <acc_detector_presence_config_log+0x9a4>)
 8007c96:	4603      	mov	r3, r0
 8007c98:	2002      	movs	r0, #2
 8007c9a:	47a8      	blx	r5
 8007c9c:	f004 f9ec 	bl	800c078 <acc_rss_integration_log_level>
 8007ca0:	2801      	cmp	r0, #1
 8007ca2:	f67f ad15 	bls.w	80076d0 <acc_detector_presence_config_log+0x30c>
 8007ca6:	e7ce      	b.n	8007c46 <acc_detector_presence_config_log+0x882>
 8007ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8007d60 <acc_detector_presence_config_log+0x99c>)
 8007caa:	7ca0      	ldrb	r0, [r4, #18]
 8007cac:	691d      	ldr	r5, [r3, #16]
 8007cae:	f006 fb45 	bl	800e33c <acc_utils_bool_to_str>
 8007cb2:	4a36      	ldr	r2, [pc, #216]	@ (8007d8c <acc_detector_presence_config_log+0x9c8>)
 8007cb4:	492c      	ldr	r1, [pc, #176]	@ (8007d68 <acc_detector_presence_config_log+0x9a4>)
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2002      	movs	r0, #2
 8007cba:	47a8      	blx	r5
 8007cbc:	f004 f9dc 	bl	800c078 <acc_rss_integration_log_level>
 8007cc0:	2801      	cmp	r0, #1
 8007cc2:	f67f ad00 	bls.w	80076c6 <acc_detector_presence_config_log+0x302>
 8007cc6:	e7df      	b.n	8007c88 <acc_detector_presence_config_log+0x8c4>
 8007cc8:	4b25      	ldr	r3, [pc, #148]	@ (8007d60 <acc_detector_presence_config_log+0x99c>)
 8007cca:	f894 0058 	ldrb.w	r0, [r4, #88]	@ 0x58
 8007cce:	691d      	ldr	r5, [r3, #16]
 8007cd0:	f006 fb40 	bl	800e354 <acc_utils_idle_state_to_str>
 8007cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8007d90 <acc_detector_presence_config_log+0x9cc>)
 8007cd6:	4924      	ldr	r1, [pc, #144]	@ (8007d68 <acc_detector_presence_config_log+0x9a4>)
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2002      	movs	r0, #2
 8007cdc:	47a8      	blx	r5
 8007cde:	f004 f9cb 	bl	800c078 <acc_rss_integration_log_level>
 8007ce2:	2801      	cmp	r0, #1
 8007ce4:	f63f ac51 	bhi.w	800758a <acc_detector_presence_config_log+0x1c6>
 8007ce8:	e485      	b.n	80075f6 <acc_detector_presence_config_log+0x232>
 8007cea:	4b1d      	ldr	r3, [pc, #116]	@ (8007d60 <acc_detector_presence_config_log+0x99c>)
 8007cec:	f894 0046 	ldrb.w	r0, [r4, #70]	@ 0x46
 8007cf0:	691d      	ldr	r5, [r3, #16]
 8007cf2:	f006 fb3b 	bl	800e36c <acc_utils_profile_to_str>
 8007cf6:	4a27      	ldr	r2, [pc, #156]	@ (8007d94 <acc_detector_presence_config_log+0x9d0>)
 8007cf8:	491b      	ldr	r1, [pc, #108]	@ (8007d68 <acc_detector_presence_config_log+0x9a4>)
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2002      	movs	r0, #2
 8007cfe:	47a8      	blx	r5
 8007d00:	f004 f9ba 	bl	800c078 <acc_rss_integration_log_level>
 8007d04:	2801      	cmp	r0, #1
 8007d06:	f63f aba3 	bhi.w	8007450 <acc_detector_presence_config_log+0x8c>
 8007d0a:	f7ff bba9 	b.w	8007460 <acc_detector_presence_config_log+0x9c>
 8007d0e:	4b14      	ldr	r3, [pc, #80]	@ (8007d60 <acc_detector_presence_config_log+0x99c>)
 8007d10:	f894 0045 	ldrb.w	r0, [r4, #69]	@ 0x45
 8007d14:	691d      	ldr	r5, [r3, #16]
 8007d16:	f006 fb11 	bl	800e33c <acc_utils_bool_to_str>
 8007d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8007d98 <acc_detector_presence_config_log+0x9d4>)
 8007d1c:	4912      	ldr	r1, [pc, #72]	@ (8007d68 <acc_detector_presence_config_log+0x9a4>)
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2002      	movs	r0, #2
 8007d22:	47a8      	blx	r5
 8007d24:	f004 f9a8 	bl	800c078 <acc_rss_integration_log_level>
 8007d28:	2801      	cmp	r0, #1
 8007d2a:	f67f ab8d 	bls.w	8007448 <acc_detector_presence_config_log+0x84>
 8007d2e:	e7dc      	b.n	8007cea <acc_detector_presence_config_log+0x926>
 8007d30:	4b0b      	ldr	r3, [pc, #44]	@ (8007d60 <acc_detector_presence_config_log+0x99c>)
 8007d32:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8007d36:	691d      	ldr	r5, [r3, #16]
 8007d38:	f006 fb00 	bl	800e33c <acc_utils_bool_to_str>
 8007d3c:	4a17      	ldr	r2, [pc, #92]	@ (8007d9c <acc_detector_presence_config_log+0x9d8>)
 8007d3e:	490a      	ldr	r1, [pc, #40]	@ (8007d68 <acc_detector_presence_config_log+0x9a4>)
 8007d40:	4603      	mov	r3, r0
 8007d42:	2002      	movs	r0, #2
 8007d44:	47a8      	blx	r5
 8007d46:	f004 f997 	bl	800c078 <acc_rss_integration_log_level>
 8007d4a:	2801      	cmp	r0, #1
 8007d4c:	f67f ab77 	bls.w	800743e <acc_detector_presence_config_log+0x7a>
 8007d50:	e7dd      	b.n	8007d0e <acc_detector_presence_config_log+0x94a>
 8007d52:	bf00      	nop
 8007d54:	08013be0 	.word	0x08013be0
 8007d58:	08012f28 	.word	0x08012f28
 8007d5c:	350637bd 	.word	0x350637bd
 8007d60:	2000069c 	.word	0x2000069c
 8007d64:	49742400 	.word	0x49742400
 8007d68:	08012b80 	.word	0x08012b80
 8007d6c:	08012bc4 	.word	0x08012bc4
 8007d70:	08012f50 	.word	0x08012f50
 8007d74:	08012f7c 	.word	0x08012f7c
 8007d78:	08012cf8 	.word	0x08012cf8
 8007d7c:	08012cdc 	.word	0x08012cdc
 8007d80:	08012dd0 	.word	0x08012dd0
 8007d84:	08012d18 	.word	0x08012d18
 8007d88:	08012db4 	.word	0x08012db4
 8007d8c:	08012d94 	.word	0x08012d94
 8007d90:	08012ca8 	.word	0x08012ca8
 8007d94:	08012c2c 	.word	0x08012c2c
 8007d98:	08012c0c 	.word	0x08012c0c
 8007d9c:	08012bf0 	.word	0x08012bf0

08007da0 <acc_detector_presence_get_buffer_size>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	b120      	cbz	r0, 8007dae <acc_detector_presence_get_buffer_size+0xe>
 8007da4:	4b10      	ldr	r3, [pc, #64]	@ (8007de8 <acc_detector_presence_get_buffer_size+0x48>)
 8007da6:	6802      	ldr	r2, [r0, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	4604      	mov	r4, r0
 8007dac:	d004      	beq.n	8007db8 <acc_detector_presence_get_buffer_size+0x18>
 8007dae:	f7ff fa73 	bl	8007298 <validate_presence_handle.part.0>
 8007db2:	2600      	movs	r6, #0
 8007db4:	4630      	mov	r0, r6
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	460d      	mov	r5, r1
 8007dba:	2900      	cmp	r1, #0
 8007dbc:	d0f9      	beq.n	8007db2 <acc_detector_presence_get_buffer_size+0x12>
 8007dbe:	6a23      	ldr	r3, [r4, #32]
 8007dc0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007dc2:	f001 fc11 	bl	80095e8 <acc_rss_get_buffer_size>
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d0f2      	beq.n	8007db2 <acc_detector_presence_get_buffer_size+0x12>
 8007dcc:	6828      	ldr	r0, [r5, #0]
 8007dce:	f003 ff77 	bl	800bcc0 <acc_detector_utils_align_size_32bit>
 8007dd2:	6a23      	ldr	r3, [r4, #32]
 8007dd4:	6028      	str	r0, [r5, #0]
 8007dd6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007dd8:	f000 faa6 	bl	8008328 <acc_detector_presence_processing_get_buffer_size>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	4418      	add	r0, r3
 8007de0:	6028      	str	r0, [r5, #0]
 8007de2:	4630      	mov	r0, r6
 8007de4:	bd70      	pop	{r4, r5, r6, pc}
 8007de6:	bf00      	nop
 8007de8:	1337b101 	.word	0x1337b101

08007dec <acc_detector_presence_destroy>:
 8007dec:	b1b0      	cbz	r0, 8007e1c <acc_detector_presence_destroy+0x30>
 8007dee:	4b0c      	ldr	r3, [pc, #48]	@ (8007e20 <acc_detector_presence_destroy+0x34>)
 8007df0:	6802      	ldr	r2, [r0, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	b510      	push	{r4, lr}
 8007df6:	4604      	mov	r4, r0
 8007df8:	d003      	beq.n	8007e02 <acc_detector_presence_destroy+0x16>
 8007dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dfe:	f7ff ba4b 	b.w	8007298 <validate_presence_handle.part.0>
 8007e02:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8007e04:	f000 fbf8 	bl	80085f8 <acc_detector_presence_processing_destroy>
 8007e08:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8007e0a:	f002 f85d 	bl	8009ec8 <acc_processing_destroy>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	4620      	mov	r0, r4
 8007e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e18:	f004 b91a 	b.w	800c050 <acc_rss_integration_mem_free>
 8007e1c:	f7ff ba3c 	b.w	8007298 <validate_presence_handle.part.0>
 8007e20:	1337b101 	.word	0x1337b101

08007e24 <acc_detector_presence_create>:
 8007e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	b120      	cbz	r0, 8007e36 <acc_detector_presence_create+0x12>
 8007e2c:	4b49      	ldr	r3, [pc, #292]	@ (8007f54 <acc_detector_presence_create+0x130>)
 8007e2e:	6802      	ldr	r2, [r0, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	4604      	mov	r4, r0
 8007e34:	d00a      	beq.n	8007e4c <acc_detector_presence_create+0x28>
 8007e36:	f7ff fa23 	bl	8007280 <validate_presence_config.part.0>
 8007e3a:	2500      	movs	r5, #0
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f7ff ffd5 	bl	8007dec <acc_detector_presence_destroy>
 8007e42:	2700      	movs	r7, #0
 8007e44:	4638      	mov	r0, r7
 8007e46:	b004      	add	sp, #16
 8007e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e4c:	460d      	mov	r5, r1
 8007e4e:	2900      	cmp	r1, #0
 8007e50:	d0f4      	beq.n	8007e3c <acc_detector_presence_create+0x18>
 8007e52:	4a41      	ldr	r2, [pc, #260]	@ (8007f58 <acc_detector_presence_create+0x134>)
 8007e54:	f44f 73a1 	mov.w	r3, #322	@ 0x142
 8007e58:	2138      	movs	r1, #56	@ 0x38
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	f004 f8dc 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 8007e60:	4607      	mov	r7, r0
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d06c      	beq.n	8007f40 <acc_detector_presence_create+0x11c>
 8007e66:	4b3d      	ldr	r3, [pc, #244]	@ (8007f5c <acc_detector_presence_create+0x138>)
 8007e68:	623c      	str	r4, [r7, #32]
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	603b      	str	r3, [r7, #0]
 8007e6e:	f001 f85b 	bl	8008f28 <acc_detector_presence_translation_translate_config>
 8007e72:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007e74:	a903      	add	r1, sp, #12
 8007e76:	f001 fbb7 	bl	80095e8 <acc_rss_get_buffer_size>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d067      	beq.n	8007f4e <acc_detector_presence_create+0x12a>
 8007e7e:	9803      	ldr	r0, [sp, #12]
 8007e80:	f003 ff1e 	bl	800bcc0 <acc_detector_utils_align_size_32bit>
 8007e84:	1d39      	adds	r1, r7, #4
 8007e86:	6338      	str	r0, [r7, #48]	@ 0x30
 8007e88:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007e8a:	f002 f841 	bl	8009f10 <acc_processing_create>
 8007e8e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d05c      	beq.n	8007f4e <acc_detector_presence_create+0x12a>
 8007e94:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8007e96:	f104 0008 	add.w	r0, r4, #8
 8007e9a:	f000 fa59 	bl	8008350 <acc_detector_presence_processing_create>
 8007e9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d054      	beq.n	8007f4e <acc_detector_presence_create+0x12a>
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007ea8:	f001 fe04 	bl	8009ab4 <acc_config_subsweep_start_point_get>
 8007eac:	f002 f8a2 	bl	8009ff4 <acc_processing_points_to_meter>
 8007eb0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007eb2:	ed85 0a00 	vstr	s0, [r5]
 8007eb6:	f001 fdc1 	bl	8009a3c <acc_config_num_subsweeps_get>
 8007eba:	3801      	subs	r0, #1
 8007ebc:	b2c1      	uxtb	r1, r0
 8007ebe:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007ec0:	9101      	str	r1, [sp, #4]
 8007ec2:	f001 fdf7 	bl	8009ab4 <acc_config_subsweep_start_point_get>
 8007ec6:	9901      	ldr	r1, [sp, #4]
 8007ec8:	4680      	mov	r8, r0
 8007eca:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007ecc:	f001 fe36 	bl	8009b3c <acc_config_subsweep_num_points_get>
 8007ed0:	9901      	ldr	r1, [sp, #4]
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007ed6:	f001 fe75 	bl	8009bc4 <acc_config_subsweep_step_length_get>
 8007eda:	3e01      	subs	r6, #1
 8007edc:	fb00 8006 	mla	r0, r0, r6, r8
 8007ee0:	f002 f888 	bl	8009ff4 <acc_processing_points_to_meter>
 8007ee4:	2600      	movs	r6, #0
 8007ee6:	ed85 0a01 	vstr	s0, [r5, #4]
 8007eea:	81ae      	strh	r6, [r5, #12]
 8007eec:	e006      	b.n	8007efc <acc_detector_presence_create+0xd8>
 8007eee:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007ef0:	f001 fe24 	bl	8009b3c <acc_config_subsweep_num_points_get>
 8007ef4:	89ab      	ldrh	r3, [r5, #12]
 8007ef6:	4418      	add	r0, r3
 8007ef8:	3601      	adds	r6, #1
 8007efa:	81a8      	strh	r0, [r5, #12]
 8007efc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007efe:	f001 fd9d 	bl	8009a3c <acc_config_num_subsweeps_get>
 8007f02:	b2f1      	uxtb	r1, r6
 8007f04:	4288      	cmp	r0, r1
 8007f06:	d8f2      	bhi.n	8007eee <acc_detector_presence_create+0xca>
 8007f08:	f894 6062 	ldrb.w	r6, [r4, #98]	@ 0x62
 8007f0c:	b13e      	cbz	r6, 8007f1e <acc_detector_presence_create+0xfa>
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2301      	movs	r3, #1
 8007f12:	4638      	mov	r0, r7
 8007f14:	60aa      	str	r2, [r5, #8]
 8007f16:	73ab      	strb	r3, [r5, #14]
 8007f18:	b004      	add	sp, #16
 8007f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f1e:	4631      	mov	r1, r6
 8007f20:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007f22:	f001 fe4f 	bl	8009bc4 <acc_config_subsweep_step_length_get>
 8007f26:	f002 f865 	bl	8009ff4 <acc_processing_points_to_meter>
 8007f2a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8007f2c:	ed85 0a02 	vstr	s0, [r5, #8]
 8007f30:	4631      	mov	r1, r6
 8007f32:	f001 fe8b 	bl	8009c4c <acc_config_subsweep_profile_get>
 8007f36:	73a8      	strb	r0, [r5, #14]
 8007f38:	4638      	mov	r0, r7
 8007f3a:	b004      	add	sp, #16
 8007f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f40:	4b07      	ldr	r3, [pc, #28]	@ (8007f60 <acc_detector_presence_create+0x13c>)
 8007f42:	4a08      	ldr	r2, [pc, #32]	@ (8007f64 <acc_detector_presence_create+0x140>)
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	4904      	ldr	r1, [pc, #16]	@ (8007f58 <acc_detector_presence_create+0x134>)
 8007f48:	463d      	mov	r5, r7
 8007f4a:	4798      	blx	r3
 8007f4c:	e776      	b.n	8007e3c <acc_detector_presence_create+0x18>
 8007f4e:	463d      	mov	r5, r7
 8007f50:	e774      	b.n	8007e3c <acc_detector_presence_create+0x18>
 8007f52:	bf00      	nop
 8007f54:	1337b102 	.word	0x1337b102
 8007f58:	08012b80 	.word	0x08012b80
 8007f5c:	1337b101 	.word	0x1337b101
 8007f60:	2000069c 	.word	0x2000069c
 8007f64:	08012fa8 	.word	0x08012fa8

08007f68 <acc_detector_presence_prepare>:
 8007f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6c:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
 8007f70:	b128      	cbz	r0, 8007f7e <acc_detector_presence_prepare+0x16>
 8007f72:	4615      	mov	r5, r2
 8007f74:	461c      	mov	r4, r3
 8007f76:	4a12      	ldr	r2, [pc, #72]	@ (8007fc0 <acc_detector_presence_prepare+0x58>)
 8007f78:	6803      	ldr	r3, [r0, #0]
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d004      	beq.n	8007f88 <acc_detector_presence_prepare+0x20>
 8007f7e:	f7ff f98b 	bl	8007298 <validate_presence_handle.part.0>
 8007f82:	2000      	movs	r0, #0
 8007f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f88:	460e      	mov	r6, r1
 8007f8a:	b119      	cbz	r1, 8007f94 <acc_detector_presence_prepare+0x2c>
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <acc_detector_presence_prepare+0x5c>)
 8007f8e:	6832      	ldr	r2, [r6, #0]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d004      	beq.n	8007f9e <acc_detector_presence_prepare+0x36>
 8007f94:	f7ff f974 	bl	8007280 <validate_presence_config.part.0>
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f9e:	f896 3061 	ldrb.w	r3, [r6, #97]	@ 0x61
 8007fa2:	b94b      	cbnz	r3, 8007fb8 <acc_detector_presence_prepare+0x50>
 8007fa4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fa8:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8007faa:	463b      	mov	r3, r7
 8007fac:	4622      	mov	r2, r4
 8007fae:	4628      	mov	r0, r5
 8007fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb4:	f002 b8be 	b.w	800a134 <acc_sensor_prepare>
 8007fb8:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8007fba:	f000 fb3d 	bl	8008638 <acc_detector_presence_processing_reset>
 8007fbe:	e7f1      	b.n	8007fa4 <acc_detector_presence_prepare+0x3c>
 8007fc0:	1337b101 	.word	0x1337b101
 8007fc4:	1337b102 	.word	0x1337b102

08007fc8 <acc_detector_presence_process>:
 8007fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fca:	b089      	sub	sp, #36	@ 0x24
 8007fcc:	b128      	cbz	r0, 8007fda <acc_detector_presence_process+0x12>
 8007fce:	4b1e      	ldr	r3, [pc, #120]	@ (8008048 <acc_detector_presence_process+0x80>)
 8007fd0:	4616      	mov	r6, r2
 8007fd2:	6802      	ldr	r2, [r0, #0]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	d004      	beq.n	8007fe4 <acc_detector_presence_process+0x1c>
 8007fda:	f7ff f95d 	bl	8007298 <validate_presence_handle.part.0>
 8007fde:	2000      	movs	r0, #0
 8007fe0:	b009      	add	sp, #36	@ 0x24
 8007fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	2900      	cmp	r1, #0
 8007fe8:	d0f9      	beq.n	8007fde <acc_detector_presence_process+0x16>
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	d0f7      	beq.n	8007fde <acc_detector_presence_process+0x16>
 8007fee:	f106 071c 	add.w	r7, r6, #28
 8007ff2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8007ff4:	463a      	mov	r2, r7
 8007ff6:	f001 ff2b 	bl	8009e50 <acc_processing_execute>
 8007ffa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8007ffc:	b113      	cbz	r3, 8008004 <acc_detector_presence_process+0x3c>
 8007ffe:	4638      	mov	r0, r7
 8008000:	1d29      	adds	r1, r5, #4
 8008002:	4798      	blx	r3
 8008004:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8008006:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8008008:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 800800a:	2300      	movs	r3, #0
 800800c:	9302      	str	r3, [sp, #8]
 800800e:	4421      	add	r1, r4
 8008010:	9303      	str	r3, [sp, #12]
 8008012:	2400      	movs	r4, #0
 8008014:	9304      	str	r3, [sp, #16]
 8008016:	ab01      	add	r3, sp, #4
 8008018:	f88d 4004 	strb.w	r4, [sp, #4]
 800801c:	f000 fb44 	bl	80086a8 <acc_detector_presence_processing_process>
 8008020:	2800      	cmp	r0, #0
 8008022:	d0dd      	beq.n	8007fe0 <acc_detector_presence_process+0x18>
 8008024:	9902      	ldr	r1, [sp, #8]
 8008026:	9a03      	ldr	r2, [sp, #12]
 8008028:	9b04      	ldr	r3, [sp, #16]
 800802a:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800802e:	6071      	str	r1, [r6, #4]
 8008030:	60b2      	str	r2, [r6, #8]
 8008032:	9905      	ldr	r1, [sp, #20]
 8008034:	9a06      	ldr	r2, [sp, #24]
 8008036:	60f3      	str	r3, [r6, #12]
 8008038:	9b07      	ldr	r3, [sp, #28]
 800803a:	7034      	strb	r4, [r6, #0]
 800803c:	e9c6 1204 	strd	r1, r2, [r6, #16]
 8008040:	61b3      	str	r3, [r6, #24]
 8008042:	b009      	add	sp, #36	@ 0x24
 8008044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008046:	bf00      	nop
 8008048:	1337b101 	.word	0x1337b101

0800804c <acc_detector_presence_config_start_set>:
 800804c:	b118      	cbz	r0, 8008056 <acc_detector_presence_config_start_set+0xa>
 800804e:	4b04      	ldr	r3, [pc, #16]	@ (8008060 <acc_detector_presence_config_start_set+0x14>)
 8008050:	6802      	ldr	r2, [r0, #0]
 8008052:	429a      	cmp	r2, r3
 8008054:	d001      	beq.n	800805a <acc_detector_presence_config_start_set+0xe>
 8008056:	f7ff b913 	b.w	8007280 <validate_presence_config.part.0>
 800805a:	ed80 0a13 	vstr	s0, [r0, #76]	@ 0x4c
 800805e:	4770      	bx	lr
 8008060:	1337b102 	.word	0x1337b102

08008064 <acc_detector_presence_config_end_set>:
 8008064:	b118      	cbz	r0, 800806e <acc_detector_presence_config_end_set+0xa>
 8008066:	4b04      	ldr	r3, [pc, #16]	@ (8008078 <acc_detector_presence_config_end_set+0x14>)
 8008068:	6802      	ldr	r2, [r0, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d001      	beq.n	8008072 <acc_detector_presence_config_end_set+0xe>
 800806e:	f7ff b907 	b.w	8007280 <validate_presence_config.part.0>
 8008072:	ed80 0a14 	vstr	s0, [r0, #80]	@ 0x50
 8008076:	4770      	bx	lr
 8008078:	1337b102 	.word	0x1337b102

0800807c <acc_detector_presence_config_auto_step_length_set>:
 800807c:	b118      	cbz	r0, 8008086 <acc_detector_presence_config_auto_step_length_set+0xa>
 800807e:	4b04      	ldr	r3, [pc, #16]	@ (8008090 <acc_detector_presence_config_auto_step_length_set+0x14>)
 8008080:	6802      	ldr	r2, [r0, #0]
 8008082:	429a      	cmp	r2, r3
 8008084:	d001      	beq.n	800808a <acc_detector_presence_config_auto_step_length_set+0xe>
 8008086:	f7ff b8fb 	b.w	8007280 <validate_presence_config.part.0>
 800808a:	f880 1045 	strb.w	r1, [r0, #69]	@ 0x45
 800808e:	4770      	bx	lr
 8008090:	1337b102 	.word	0x1337b102

08008094 <acc_detector_presence_config_profile_set>:
 8008094:	b118      	cbz	r0, 800809e <acc_detector_presence_config_profile_set+0xa>
 8008096:	4b04      	ldr	r3, [pc, #16]	@ (80080a8 <acc_detector_presence_config_profile_set+0x14>)
 8008098:	6802      	ldr	r2, [r0, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d001      	beq.n	80080a2 <acc_detector_presence_config_profile_set+0xe>
 800809e:	f7ff b8ef 	b.w	8007280 <validate_presence_config.part.0>
 80080a2:	f880 1046 	strb.w	r1, [r0, #70]	@ 0x46
 80080a6:	4770      	bx	lr
 80080a8:	1337b102 	.word	0x1337b102

080080ac <acc_detector_presence_config_auto_profile_set>:
 80080ac:	b118      	cbz	r0, 80080b6 <acc_detector_presence_config_auto_profile_set+0xa>
 80080ae:	4b04      	ldr	r3, [pc, #16]	@ (80080c0 <acc_detector_presence_config_auto_profile_set+0x14>)
 80080b0:	6802      	ldr	r2, [r0, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d001      	beq.n	80080ba <acc_detector_presence_config_auto_profile_set+0xe>
 80080b6:	f7ff b8e3 	b.w	8007280 <validate_presence_config.part.0>
 80080ba:	f880 1044 	strb.w	r1, [r0, #68]	@ 0x44
 80080be:	4770      	bx	lr
 80080c0:	1337b102 	.word	0x1337b102

080080c4 <acc_detector_presence_config_inter_frame_idle_state_set>:
 80080c4:	b118      	cbz	r0, 80080ce <acc_detector_presence_config_inter_frame_idle_state_set+0xa>
 80080c6:	4b04      	ldr	r3, [pc, #16]	@ (80080d8 <acc_detector_presence_config_inter_frame_idle_state_set+0x14>)
 80080c8:	6802      	ldr	r2, [r0, #0]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d001      	beq.n	80080d2 <acc_detector_presence_config_inter_frame_idle_state_set+0xe>
 80080ce:	f7ff b8d7 	b.w	8007280 <validate_presence_config.part.0>
 80080d2:	f880 1058 	strb.w	r1, [r0, #88]	@ 0x58
 80080d6:	4770      	bx	lr
 80080d8:	1337b102 	.word	0x1337b102

080080dc <acc_detector_presence_config_hwaas_set>:
 80080dc:	b118      	cbz	r0, 80080e6 <acc_detector_presence_config_hwaas_set+0xa>
 80080de:	4b04      	ldr	r3, [pc, #16]	@ (80080f0 <acc_detector_presence_config_hwaas_set+0x14>)
 80080e0:	6802      	ldr	r2, [r0, #0]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d001      	beq.n	80080ea <acc_detector_presence_config_hwaas_set+0xe>
 80080e6:	f7ff b8cb 	b.w	8007280 <validate_presence_config.part.0>
 80080ea:	f8a0 1056 	strh.w	r1, [r0, #86]	@ 0x56
 80080ee:	4770      	bx	lr
 80080f0:	1337b102 	.word	0x1337b102

080080f4 <acc_detector_presence_config_sweeps_per_frame_set>:
 80080f4:	b118      	cbz	r0, 80080fe <acc_detector_presence_config_sweeps_per_frame_set+0xa>
 80080f6:	4b04      	ldr	r3, [pc, #16]	@ (8008108 <acc_detector_presence_config_sweeps_per_frame_set+0x14>)
 80080f8:	6802      	ldr	r2, [r0, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d001      	beq.n	8008102 <acc_detector_presence_config_sweeps_per_frame_set+0xe>
 80080fe:	f7ff b8bf 	b.w	8007280 <validate_presence_config.part.0>
 8008102:	f8a0 1054 	strh.w	r1, [r0, #84]	@ 0x54
 8008106:	4770      	bx	lr
 8008108:	1337b102 	.word	0x1337b102

0800810c <acc_detector_presence_config_frame_rate_set>:
 800810c:	b118      	cbz	r0, 8008116 <acc_detector_presence_config_frame_rate_set+0xa>
 800810e:	4b04      	ldr	r3, [pc, #16]	@ (8008120 <acc_detector_presence_config_frame_rate_set+0x14>)
 8008110:	6802      	ldr	r2, [r0, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	d001      	beq.n	800811a <acc_detector_presence_config_frame_rate_set+0xe>
 8008116:	f7ff b8b3 	b.w	8007280 <validate_presence_config.part.0>
 800811a:	ed80 0a17 	vstr	s0, [r0, #92]	@ 0x5c
 800811e:	4770      	bx	lr
 8008120:	1337b102 	.word	0x1337b102

08008124 <acc_detector_presence_config_frame_rate_app_driven_set>:
 8008124:	b118      	cbz	r0, 800812e <acc_detector_presence_config_frame_rate_app_driven_set+0xa>
 8008126:	4b04      	ldr	r3, [pc, #16]	@ (8008138 <acc_detector_presence_config_frame_rate_app_driven_set+0x14>)
 8008128:	6802      	ldr	r2, [r0, #0]
 800812a:	429a      	cmp	r2, r3
 800812c:	d001      	beq.n	8008132 <acc_detector_presence_config_frame_rate_app_driven_set+0xe>
 800812e:	f7ff b8a7 	b.w	8007280 <validate_presence_config.part.0>
 8008132:	f880 1060 	strb.w	r1, [r0, #96]	@ 0x60
 8008136:	4770      	bx	lr
 8008138:	1337b102 	.word	0x1337b102

0800813c <acc_detector_presence_config_reset_filters_on_prepare_set>:
 800813c:	b118      	cbz	r0, 8008146 <acc_detector_presence_config_reset_filters_on_prepare_set+0xa>
 800813e:	4b04      	ldr	r3, [pc, #16]	@ (8008150 <acc_detector_presence_config_reset_filters_on_prepare_set+0x14>)
 8008140:	6802      	ldr	r2, [r0, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d001      	beq.n	800814a <acc_detector_presence_config_reset_filters_on_prepare_set+0xe>
 8008146:	f7ff b89b 	b.w	8007280 <validate_presence_config.part.0>
 800814a:	f880 1061 	strb.w	r1, [r0, #97]	@ 0x61
 800814e:	4770      	bx	lr
 8008150:	1337b102 	.word	0x1337b102

08008154 <acc_detector_presence_config_inter_frame_presence_timeout_set>:
 8008154:	b118      	cbz	r0, 800815e <acc_detector_presence_config_inter_frame_presence_timeout_set+0xa>
 8008156:	4b04      	ldr	r3, [pc, #16]	@ (8008168 <acc_detector_presence_config_inter_frame_presence_timeout_set+0x14>)
 8008158:	6802      	ldr	r2, [r0, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d001      	beq.n	8008162 <acc_detector_presence_config_inter_frame_presence_timeout_set+0xe>
 800815e:	f7ff b88f 	b.w	8007280 <validate_presence_config.part.0>
 8008162:	8201      	strh	r1, [r0, #16]
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	1337b102 	.word	0x1337b102

0800816c <acc_detector_presence_config_inter_phase_boost_set>:
 800816c:	b118      	cbz	r0, 8008176 <acc_detector_presence_config_inter_phase_boost_set+0xa>
 800816e:	4b04      	ldr	r3, [pc, #16]	@ (8008180 <acc_detector_presence_config_inter_phase_boost_set+0x14>)
 8008170:	6802      	ldr	r2, [r0, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	d001      	beq.n	800817a <acc_detector_presence_config_inter_phase_boost_set+0xe>
 8008176:	f7ff b883 	b.w	8007280 <validate_presence_config.part.0>
 800817a:	7481      	strb	r1, [r0, #18]
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	1337b102 	.word	0x1337b102

08008184 <acc_detector_presence_config_intra_detection_set>:
 8008184:	b118      	cbz	r0, 800818e <acc_detector_presence_config_intra_detection_set+0xa>
 8008186:	4b04      	ldr	r3, [pc, #16]	@ (8008198 <acc_detector_presence_config_intra_detection_set+0x14>)
 8008188:	6802      	ldr	r2, [r0, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d001      	beq.n	8008192 <acc_detector_presence_config_intra_detection_set+0xe>
 800818e:	f7ff b877 	b.w	8007280 <validate_presence_config.part.0>
 8008192:	74c1      	strb	r1, [r0, #19]
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	1337b102 	.word	0x1337b102

0800819c <acc_detector_presence_config_intra_detection_threshold_set>:
 800819c:	b118      	cbz	r0, 80081a6 <acc_detector_presence_config_intra_detection_threshold_set+0xa>
 800819e:	4b04      	ldr	r3, [pc, #16]	@ (80081b0 <acc_detector_presence_config_intra_detection_threshold_set+0x14>)
 80081a0:	6802      	ldr	r2, [r0, #0]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d001      	beq.n	80081aa <acc_detector_presence_config_intra_detection_threshold_set+0xe>
 80081a6:	f7ff b86b 	b.w	8007280 <validate_presence_config.part.0>
 80081aa:	ed80 0a06 	vstr	s0, [r0, #24]
 80081ae:	4770      	bx	lr
 80081b0:	1337b102 	.word	0x1337b102

080081b4 <acc_detector_presence_config_inter_detection_set>:
 80081b4:	b118      	cbz	r0, 80081be <acc_detector_presence_config_inter_detection_set+0xa>
 80081b6:	4b04      	ldr	r3, [pc, #16]	@ (80081c8 <acc_detector_presence_config_inter_detection_set+0x14>)
 80081b8:	6802      	ldr	r2, [r0, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d001      	beq.n	80081c2 <acc_detector_presence_config_inter_detection_set+0xe>
 80081be:	f7ff b85f 	b.w	8007280 <validate_presence_config.part.0>
 80081c2:	7501      	strb	r1, [r0, #20]
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	1337b102 	.word	0x1337b102

080081cc <acc_detector_presence_config_inter_detection_threshold_set>:
 80081cc:	b118      	cbz	r0, 80081d6 <acc_detector_presence_config_inter_detection_threshold_set+0xa>
 80081ce:	4b04      	ldr	r3, [pc, #16]	@ (80081e0 <acc_detector_presence_config_inter_detection_threshold_set+0x14>)
 80081d0:	6802      	ldr	r2, [r0, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d001      	beq.n	80081da <acc_detector_presence_config_inter_detection_threshold_set+0xe>
 80081d6:	f7ff b853 	b.w	8007280 <validate_presence_config.part.0>
 80081da:	ed80 0a07 	vstr	s0, [r0, #28]
 80081de:	4770      	bx	lr
 80081e0:	1337b102 	.word	0x1337b102

080081e4 <acc_detector_presence_config_inter_frame_deviation_time_const_set>:
 80081e4:	b118      	cbz	r0, 80081ee <acc_detector_presence_config_inter_frame_deviation_time_const_set+0xa>
 80081e6:	4b04      	ldr	r3, [pc, #16]	@ (80081f8 <acc_detector_presence_config_inter_frame_deviation_time_const_set+0x14>)
 80081e8:	6802      	ldr	r2, [r0, #0]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d001      	beq.n	80081f2 <acc_detector_presence_config_inter_frame_deviation_time_const_set+0xe>
 80081ee:	f7ff b847 	b.w	8007280 <validate_presence_config.part.0>
 80081f2:	ed80 0a08 	vstr	s0, [r0, #32]
 80081f6:	4770      	bx	lr
 80081f8:	1337b102 	.word	0x1337b102

080081fc <acc_detector_presence_config_inter_frame_fast_cutoff_set>:
 80081fc:	b118      	cbz	r0, 8008206 <acc_detector_presence_config_inter_frame_fast_cutoff_set+0xa>
 80081fe:	4b04      	ldr	r3, [pc, #16]	@ (8008210 <acc_detector_presence_config_inter_frame_fast_cutoff_set+0x14>)
 8008200:	6802      	ldr	r2, [r0, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d001      	beq.n	800820a <acc_detector_presence_config_inter_frame_fast_cutoff_set+0xe>
 8008206:	f7ff b83b 	b.w	8007280 <validate_presence_config.part.0>
 800820a:	ed80 0a09 	vstr	s0, [r0, #36]	@ 0x24
 800820e:	4770      	bx	lr
 8008210:	1337b102 	.word	0x1337b102

08008214 <acc_detector_presence_config_inter_frame_slow_cutoff_set>:
 8008214:	b118      	cbz	r0, 800821e <acc_detector_presence_config_inter_frame_slow_cutoff_set+0xa>
 8008216:	4b04      	ldr	r3, [pc, #16]	@ (8008228 <acc_detector_presence_config_inter_frame_slow_cutoff_set+0x14>)
 8008218:	6802      	ldr	r2, [r0, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d001      	beq.n	8008222 <acc_detector_presence_config_inter_frame_slow_cutoff_set+0xe>
 800821e:	f7ff b82f 	b.w	8007280 <validate_presence_config.part.0>
 8008222:	ed80 0a0a 	vstr	s0, [r0, #40]	@ 0x28
 8008226:	4770      	bx	lr
 8008228:	1337b102 	.word	0x1337b102

0800822c <acc_detector_presence_config_intra_frame_time_const_set>:
 800822c:	b118      	cbz	r0, 8008236 <acc_detector_presence_config_intra_frame_time_const_set+0xa>
 800822e:	4b04      	ldr	r3, [pc, #16]	@ (8008240 <acc_detector_presence_config_intra_frame_time_const_set+0x14>)
 8008230:	6802      	ldr	r2, [r0, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d001      	beq.n	800823a <acc_detector_presence_config_intra_frame_time_const_set+0xe>
 8008236:	f7ff b823 	b.w	8007280 <validate_presence_config.part.0>
 800823a:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
 800823e:	4770      	bx	lr
 8008240:	1337b102 	.word	0x1337b102

08008244 <acc_detector_presence_config_intra_output_time_const_set>:
 8008244:	b118      	cbz	r0, 800824e <acc_detector_presence_config_intra_output_time_const_set+0xa>
 8008246:	4b04      	ldr	r3, [pc, #16]	@ (8008258 <acc_detector_presence_config_intra_output_time_const_set+0x14>)
 8008248:	6802      	ldr	r2, [r0, #0]
 800824a:	429a      	cmp	r2, r3
 800824c:	d001      	beq.n	8008252 <acc_detector_presence_config_intra_output_time_const_set+0xe>
 800824e:	f7ff b817 	b.w	8007280 <validate_presence_config.part.0>
 8008252:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
 8008256:	4770      	bx	lr
 8008258:	1337b102 	.word	0x1337b102

0800825c <acc_detector_presence_config_inter_output_time_const_set>:
 800825c:	b118      	cbz	r0, 8008266 <acc_detector_presence_config_inter_output_time_const_set+0xa>
 800825e:	4b04      	ldr	r3, [pc, #16]	@ (8008270 <acc_detector_presence_config_inter_output_time_const_set+0x14>)
 8008260:	6802      	ldr	r2, [r0, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d001      	beq.n	800826a <acc_detector_presence_config_inter_output_time_const_set+0xe>
 8008266:	f7ff b80b 	b.w	8007280 <validate_presence_config.part.0>
 800826a:	ed80 0a0e 	vstr	s0, [r0, #56]	@ 0x38
 800826e:	4770      	bx	lr
 8008270:	1337b102 	.word	0x1337b102

08008274 <acc_detector_presence_config_automatic_subsweeps_set>:
 8008274:	b118      	cbz	r0, 800827e <acc_detector_presence_config_automatic_subsweeps_set+0xa>
 8008276:	4b04      	ldr	r3, [pc, #16]	@ (8008288 <acc_detector_presence_config_automatic_subsweeps_set+0x14>)
 8008278:	6802      	ldr	r2, [r0, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d001      	beq.n	8008282 <acc_detector_presence_config_automatic_subsweeps_set+0xe>
 800827e:	f7fe bfff 	b.w	8007280 <validate_presence_config.part.0>
 8008282:	f880 1062 	strb.w	r1, [r0, #98]	@ 0x62
 8008286:	4770      	bx	lr
 8008288:	1337b102 	.word	0x1337b102

0800828c <acc_detector_presence_config_signal_quality_set>:
 800828c:	b118      	cbz	r0, 8008296 <acc_detector_presence_config_signal_quality_set+0xa>
 800828e:	4b04      	ldr	r3, [pc, #16]	@ (80082a0 <acc_detector_presence_config_signal_quality_set+0x14>)
 8008290:	6802      	ldr	r2, [r0, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d001      	beq.n	800829a <acc_detector_presence_config_signal_quality_set+0xe>
 8008296:	f7fe bff3 	b.w	8007280 <validate_presence_config.part.0>
 800829a:	ed80 0a19 	vstr	s0, [r0, #100]	@ 0x64
 800829e:	4770      	bx	lr
 80082a0:	1337b102 	.word	0x1337b102

080082a4 <processing_buffers_teardown>:
 80082a4:	b1a0      	cbz	r0, 80082d0 <processing_buffers_teardown+0x2c>
 80082a6:	b510      	push	{r4, lr}
 80082a8:	4604      	mov	r4, r0
 80082aa:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 80082ac:	b118      	cbz	r0, 80082b6 <processing_buffers_teardown+0x12>
 80082ae:	f003 fecf 	bl	800c050 <acc_rss_integration_mem_free>
 80082b2:	2300      	movs	r3, #0
 80082b4:	6563      	str	r3, [r4, #84]	@ 0x54
 80082b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082b8:	b118      	cbz	r0, 80082c2 <processing_buffers_teardown+0x1e>
 80082ba:	f003 fec9 	bl	800c050 <acc_rss_integration_mem_free>
 80082be:	2300      	movs	r3, #0
 80082c0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80082c2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80082c4:	b118      	cbz	r0, 80082ce <processing_buffers_teardown+0x2a>
 80082c6:	f003 fec3 	bl	800c050 <acc_rss_integration_mem_free>
 80082ca:	2300      	movs	r3, #0
 80082cc:	65e3      	str	r3, [r4, #92]	@ 0x5c
 80082ce:	bd10      	pop	{r4, pc}
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop

080082d4 <smoothing_factor_from_low_pass_cutoff>:
 80082d4:	eec0 7a20 	vdiv.f32	s15, s0, s1
 80082d8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800831c <smoothing_factor_from_low_pass_cutoff+0x48>
 80082dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e4:	d817      	bhi.n	8008316 <smoothing_factor_from_low_pass_cutoff+0x42>
 80082e6:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8008320 <smoothing_factor_from_low_pass_cutoff+0x4c>
 80082ea:	b508      	push	{r3, lr}
 80082ec:	ee27 0a80 	vmul.f32	s0, s15, s0
 80082f0:	f008 fde6 	bl	8010ec0 <sinf>
 80082f4:	ee20 6a00 	vmul.f32	s12, s0, s0
 80082f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80082fc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8008300:	ee30 7a00 	vadd.f32	s14, s0, s0
 8008304:	eef1 6ac6 	vsqrt.f32	s13, s12
 8008308:	ee36 0ac0 	vsub.f32	s0, s13, s0
 800830c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8008310:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008314:	bd08      	pop	{r3, pc}
 8008316:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8008324 <smoothing_factor_from_low_pass_cutoff+0x50>
 800831a:	4770      	bx	lr
 800831c:	3f0000a8 	.word	0x3f0000a8
 8008320:	40490fdb 	.word	0x40490fdb
 8008324:	00000000 	.word	0x00000000

08008328 <acc_detector_presence_processing_get_buffer_size>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	2500      	movs	r5, #0
 800832c:	4606      	mov	r6, r0
 800832e:	462c      	mov	r4, r5
 8008330:	e004      	b.n	800833c <acc_detector_presence_processing_get_buffer_size+0x14>
 8008332:	f001 fc03 	bl	8009b3c <acc_config_subsweep_num_points_get>
 8008336:	4404      	add	r4, r0
 8008338:	b2a4      	uxth	r4, r4
 800833a:	3501      	adds	r5, #1
 800833c:	4630      	mov	r0, r6
 800833e:	f001 fb7d 	bl	8009a3c <acc_config_num_subsweeps_get>
 8008342:	b2e9      	uxtb	r1, r5
 8008344:	4288      	cmp	r0, r1
 8008346:	4630      	mov	r0, r6
 8008348:	d8f3      	bhi.n	8008332 <acc_detector_presence_processing_get_buffer_size+0xa>
 800834a:	00e0      	lsls	r0, r4, #3
 800834c:	bd70      	pop	{r4, r5, r6, pc}
 800834e:	bf00      	nop

08008350 <acc_detector_presence_processing_create>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	4aa0      	ldr	r2, [pc, #640]	@ (80085d4 <acc_detector_presence_processing_create+0x284>)
 8008354:	ed2d 8b06 	vpush	{d8-d10}
 8008358:	4607      	mov	r7, r0
 800835a:	460e      	mov	r6, r1
 800835c:	f240 1337 	movw	r3, #311	@ 0x137
 8008360:	2160      	movs	r1, #96	@ 0x60
 8008362:	2001      	movs	r0, #1
 8008364:	f003 fe58 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 8008368:	4604      	mov	r4, r0
 800836a:	2800      	cmp	r0, #0
 800836c:	f000 8109 	beq.w	8008582 <acc_detector_presence_processing_create+0x232>
 8008370:	2500      	movs	r5, #0
 8008372:	6046      	str	r6, [r0, #4]
 8008374:	8105      	strh	r5, [r0, #8]
 8008376:	e005      	b.n	8008384 <acc_detector_presence_processing_create+0x34>
 8008378:	f001 fbe0 	bl	8009b3c <acc_config_subsweep_num_points_get>
 800837c:	8923      	ldrh	r3, [r4, #8]
 800837e:	4403      	add	r3, r0
 8008380:	3501      	adds	r5, #1
 8008382:	8123      	strh	r3, [r4, #8]
 8008384:	4630      	mov	r0, r6
 8008386:	f001 fb59 	bl	8009a3c <acc_config_num_subsweeps_get>
 800838a:	b2e9      	uxtb	r1, r5
 800838c:	4603      	mov	r3, r0
 800838e:	428b      	cmp	r3, r1
 8008390:	4630      	mov	r0, r6
 8008392:	d8f1      	bhi.n	8008378 <acc_detector_presence_processing_create+0x28>
 8008394:	2f00      	cmp	r7, #0
 8008396:	f000 80fd 	beq.w	8008594 <acc_detector_presence_processing_create+0x244>
 800839a:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800839e:	893b      	ldrh	r3, [r7, #8]
 80083a0:	7ab9      	ldrb	r1, [r7, #10]
 80083a2:	ed97 8a01 	vldr	s16, [r7, #4]
 80083a6:	6938      	ldr	r0, [r7, #16]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	edd7 8a0d 	vldr	s17, [r7, #52]	@ 0x34
 80083ae:	8163      	strh	r3, [r4, #10]
 80083b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083b4:	7afb      	ldrb	r3, [r7, #11]
 80083b6:	7321      	strb	r1, [r4, #12]
 80083b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083bc:	7b39      	ldrb	r1, [r7, #12]
 80083be:	7363      	strb	r3, [r4, #13]
 80083c0:	4b85      	ldr	r3, [pc, #532]	@ (80085d8 <acc_detector_presence_processing_create+0x288>)
 80083c2:	ed84 8a04 	vstr	s16, [r4, #16]
 80083c6:	6160      	str	r0, [r4, #20]
 80083c8:	73a1      	strb	r1, [r4, #14]
 80083ca:	61a2      	str	r2, [r4, #24]
 80083cc:	edc4 8a09 	vstr	s17, [r4, #36]	@ 0x24
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	f340 80e4 	ble.w	800859e <acc_detector_presence_processing_create+0x24e>
 80083d6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80083da:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80083de:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80083e2:	f008 fb91 	bl	8010b08 <expf>
 80083e6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80083ea:	ed84 0a07 	vstr	s0, [r4, #28]
 80083ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80083f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f6:	f340 80cf 	ble.w	8008598 <acc_detector_presence_processing_create+0x248>
 80083fa:	ee68 7a27 	vmul.f32	s15, s16, s15
 80083fe:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8008402:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8008406:	f008 fb7f 	bl	8010b08 <expf>
 800840a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800840e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008412:	ed84 0a08 	vstr	s0, [r4, #32]
 8008416:	f240 80a1 	bls.w	800855c <acc_detector_presence_processing_create+0x20c>
 800841a:	ed97 0a07 	vldr	s0, [r7, #28]
 800841e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008426:	f100 8099 	bmi.w	800855c <acc_detector_presence_processing_create+0x20c>
 800842a:	ed97 9a08 	vldr	s18, [r7, #32]
 800842e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8008432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008436:	f100 8091 	bmi.w	800855c <acc_detector_presence_processing_create+0x20c>
 800843a:	edd7 9a06 	vldr	s19, [r7, #24]
 800843e:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8008442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008446:	f100 8089 	bmi.w	800855c <acc_detector_presence_processing_create+0x20c>
 800844a:	ed97 aa09 	vldr	s20, [r7, #36]	@ 0x24
 800844e:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8008452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008456:	f100 8081 	bmi.w	800855c <acc_detector_presence_processing_create+0x20c>
 800845a:	edd7 aa0a 	vldr	s21, [r7, #40]	@ 0x28
 800845e:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8008462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008466:	d479      	bmi.n	800855c <acc_detector_presence_processing_create+0x20c>
 8008468:	eef0 0a48 	vmov.f32	s1, s16
 800846c:	f7ff ff32 	bl	80082d4 <smoothing_factor_from_low_pass_cutoff>
 8008470:	eef0 0a48 	vmov.f32	s1, s16
 8008474:	ed84 0a0a 	vstr	s0, [r4, #40]	@ 0x28
 8008478:	eeb0 0a49 	vmov.f32	s0, s18
 800847c:	f7ff ff2a 	bl	80082d4 <smoothing_factor_from_low_pass_cutoff>
 8008480:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8008484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008488:	ed84 0a0b 	vstr	s0, [r4, #44]	@ 0x2c
 800848c:	f340 809f 	ble.w	80085ce <acc_detector_presence_processing_create+0x27e>
 8008490:	ee68 9a29 	vmul.f32	s19, s16, s19
 8008494:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8008498:	ee80 0a29 	vdiv.f32	s0, s0, s19
 800849c:	f008 fb34 	bl	8010b08 <expf>
 80084a0:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 80084a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a8:	ed84 0a0c 	vstr	s0, [r4, #48]	@ 0x30
 80084ac:	f340 808c 	ble.w	80085c8 <acc_detector_presence_processing_create+0x278>
 80084b0:	ee28 aa0a 	vmul.f32	s20, s16, s20
 80084b4:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80084b8:	ee80 0a0a 	vdiv.f32	s0, s0, s20
 80084bc:	f008 fb24 	bl	8010b08 <expf>
 80084c0:	eef5 aac0 	vcmpe.f32	s21, #0.0
 80084c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c8:	ed84 0a0d 	vstr	s0, [r4, #52]	@ 0x34
 80084cc:	dd79      	ble.n	80085c2 <acc_detector_presence_processing_create+0x272>
 80084ce:	ee68 aa2a 	vmul.f32	s21, s16, s21
 80084d2:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80084d6:	ee80 0a2a 	vdiv.f32	s0, s0, s21
 80084da:	f008 fb15 	bl	8010b08 <expf>
 80084de:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80084e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084e6:	ed84 0a0e 	vstr	s0, [r4, #56]	@ 0x38
 80084ea:	dd67      	ble.n	80085bc <acc_detector_presence_processing_create+0x26c>
 80084ec:	ee28 8a28 	vmul.f32	s16, s16, s17
 80084f0:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80084f4:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80084f8:	f008 fb06 	bl	8010b08 <expf>
 80084fc:	8923      	ldrh	r3, [r4, #8]
 80084fe:	4a35      	ldr	r2, [pc, #212]	@ (80085d4 <acc_detector_presence_processing_create+0x284>)
 8008500:	212c      	movs	r1, #44	@ 0x2c
 8008502:	fb01 f103 	mul.w	r1, r1, r3
 8008506:	2001      	movs	r0, #1
 8008508:	2370      	movs	r3, #112	@ 0x70
 800850a:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 800850e:	f003 fd83 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 8008512:	8921      	ldrh	r1, [r4, #8]
 8008514:	4a2f      	ldr	r2, [pc, #188]	@ (80085d4 <acc_detector_presence_processing_create+0x284>)
 8008516:	6560      	str	r0, [r4, #84]	@ 0x54
 8008518:	0089      	lsls	r1, r1, #2
 800851a:	2371      	movs	r3, #113	@ 0x71
 800851c:	2001      	movs	r0, #1
 800851e:	f003 fd7b 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 8008522:	8921      	ldrh	r1, [r4, #8]
 8008524:	65a0      	str	r0, [r4, #88]	@ 0x58
 8008526:	2372      	movs	r3, #114	@ 0x72
 8008528:	4a2a      	ldr	r2, [pc, #168]	@ (80085d4 <acc_detector_presence_processing_create+0x284>)
 800852a:	0089      	lsls	r1, r1, #2
 800852c:	2001      	movs	r0, #1
 800852e:	f003 fd73 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 8008532:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008534:	65e0      	str	r0, [r4, #92]	@ 0x5c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d034      	beq.n	80085a4 <acc_detector_presence_processing_create+0x254>
 800853a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800853c:	2b00      	cmp	r3, #0
 800853e:	d031      	beq.n	80085a4 <acc_detector_presence_processing_create+0x254>
 8008540:	2800      	cmp	r0, #0
 8008542:	d02f      	beq.n	80085a4 <acc_detector_presence_processing_create+0x254>
 8008544:	ecbd 8b06 	vpop	{d8-d10}
 8008548:	2300      	movs	r3, #0
 800854a:	2200      	movs	r2, #0
 800854c:	4620      	mov	r0, r4
 800854e:	6423      	str	r3, [r4, #64]	@ 0x40
 8008550:	6463      	str	r3, [r4, #68]	@ 0x44
 8008552:	64a3      	str	r3, [r4, #72]	@ 0x48
 8008554:	6522      	str	r2, [r4, #80]	@ 0x50
 8008556:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 800855a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800855c:	4d1f      	ldr	r5, [pc, #124]	@ (80085dc <acc_detector_presence_processing_create+0x28c>)
 800855e:	4a20      	ldr	r2, [pc, #128]	@ (80085e0 <acc_detector_presence_processing_create+0x290>)
 8008560:	692b      	ldr	r3, [r5, #16]
 8008562:	491c      	ldr	r1, [pc, #112]	@ (80085d4 <acc_detector_presence_processing_create+0x284>)
 8008564:	2000      	movs	r0, #0
 8008566:	4798      	blx	r3
 8008568:	692b      	ldr	r3, [r5, #16]
 800856a:	4a1e      	ldr	r2, [pc, #120]	@ (80085e4 <acc_detector_presence_processing_create+0x294>)
 800856c:	4919      	ldr	r1, [pc, #100]	@ (80085d4 <acc_detector_presence_processing_create+0x284>)
 800856e:	2000      	movs	r0, #0
 8008570:	4798      	blx	r3
 8008572:	4620      	mov	r0, r4
 8008574:	f003 fd6c 	bl	800c050 <acc_rss_integration_mem_free>
 8008578:	ecbd 8b06 	vpop	{d8-d10}
 800857c:	2400      	movs	r4, #0
 800857e:	4620      	mov	r0, r4
 8008580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008582:	4b16      	ldr	r3, [pc, #88]	@ (80085dc <acc_detector_presence_processing_create+0x28c>)
 8008584:	4a18      	ldr	r2, [pc, #96]	@ (80085e8 <acc_detector_presence_processing_create+0x298>)
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	4912      	ldr	r1, [pc, #72]	@ (80085d4 <acc_detector_presence_processing_create+0x284>)
 800858a:	4798      	blx	r3
 800858c:	ecbd 8b06 	vpop	{d8-d10}
 8008590:	4620      	mov	r0, r4
 8008592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008594:	4d11      	ldr	r5, [pc, #68]	@ (80085dc <acc_detector_presence_processing_create+0x28c>)
 8008596:	e7e7      	b.n	8008568 <acc_detector_presence_processing_create+0x218>
 8008598:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 80085ec <acc_detector_presence_processing_create+0x29c>
 800859c:	e735      	b.n	800840a <acc_detector_presence_processing_create+0xba>
 800859e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80085ec <acc_detector_presence_processing_create+0x29c>
 80085a2:	e720      	b.n	80083e6 <acc_detector_presence_processing_create+0x96>
 80085a4:	4d0d      	ldr	r5, [pc, #52]	@ (80085dc <acc_detector_presence_processing_create+0x28c>)
 80085a6:	4a12      	ldr	r2, [pc, #72]	@ (80085f0 <acc_detector_presence_processing_create+0x2a0>)
 80085a8:	692b      	ldr	r3, [r5, #16]
 80085aa:	490a      	ldr	r1, [pc, #40]	@ (80085d4 <acc_detector_presence_processing_create+0x284>)
 80085ac:	2000      	movs	r0, #0
 80085ae:	4798      	blx	r3
 80085b0:	4620      	mov	r0, r4
 80085b2:	f7ff fe77 	bl	80082a4 <processing_buffers_teardown>
 80085b6:	692b      	ldr	r3, [r5, #16]
 80085b8:	4a0e      	ldr	r2, [pc, #56]	@ (80085f4 <acc_detector_presence_processing_create+0x2a4>)
 80085ba:	e7d7      	b.n	800856c <acc_detector_presence_processing_create+0x21c>
 80085bc:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80085ec <acc_detector_presence_processing_create+0x29c>
 80085c0:	e79c      	b.n	80084fc <acc_detector_presence_processing_create+0x1ac>
 80085c2:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80085ec <acc_detector_presence_processing_create+0x29c>
 80085c6:	e78a      	b.n	80084de <acc_detector_presence_processing_create+0x18e>
 80085c8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80085ec <acc_detector_presence_processing_create+0x29c>
 80085cc:	e778      	b.n	80084c0 <acc_detector_presence_processing_create+0x170>
 80085ce:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80085ec <acc_detector_presence_processing_create+0x29c>
 80085d2:	e765      	b.n	80084a0 <acc_detector_presence_processing_create+0x150>
 80085d4:	08012fc8 	.word	0x08012fc8
 80085d8:	1337b103 	.word	0x1337b103
 80085dc:	2000069c 	.word	0x2000069c
 80085e0:	08013008 	.word	0x08013008
 80085e4:	0801302c 	.word	0x0801302c
 80085e8:	08012fe8 	.word	0x08012fe8
 80085ec:	00000000 	.word	0x00000000
 80085f0:	08013050 	.word	0x08013050
 80085f4:	08013068 	.word	0x08013068

080085f8 <acc_detector_presence_processing_destroy>:
 80085f8:	b510      	push	{r4, lr}
 80085fa:	b120      	cbz	r0, 8008606 <acc_detector_presence_processing_destroy+0xe>
 80085fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008628 <acc_detector_presence_processing_destroy+0x30>)
 80085fe:	6802      	ldr	r2, [r0, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	4604      	mov	r4, r0
 8008604:	d007      	beq.n	8008616 <acc_detector_presence_processing_destroy+0x1e>
 8008606:	4b09      	ldr	r3, [pc, #36]	@ (800862c <acc_detector_presence_processing_destroy+0x34>)
 8008608:	4a09      	ldr	r2, [pc, #36]	@ (8008630 <acc_detector_presence_processing_destroy+0x38>)
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	4909      	ldr	r1, [pc, #36]	@ (8008634 <acc_detector_presence_processing_destroy+0x3c>)
 800860e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008612:	2000      	movs	r0, #0
 8008614:	4718      	bx	r3
 8008616:	f7ff fe45 	bl	80082a4 <processing_buffers_teardown>
 800861a:	2300      	movs	r3, #0
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	4620      	mov	r0, r4
 8008620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008624:	f003 bd14 	b.w	800c050 <acc_rss_integration_mem_free>
 8008628:	1337b103 	.word	0x1337b103
 800862c:	2000069c 	.word	0x2000069c
 8008630:	08013088 	.word	0x08013088
 8008634:	08012fc8 	.word	0x08012fc8

08008638 <acc_detector_presence_processing_reset>:
 8008638:	b510      	push	{r4, lr}
 800863a:	4604      	mov	r4, r0
 800863c:	b308      	cbz	r0, 8008682 <acc_detector_presence_processing_reset+0x4a>
 800863e:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 8008640:	b300      	cbz	r0, 8008684 <acc_detector_presence_processing_reset+0x4c>
 8008642:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008644:	b1f3      	cbz	r3, 8008684 <acc_detector_presence_processing_reset+0x4c>
 8008646:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8008648:	b1e3      	cbz	r3, 8008684 <acc_detector_presence_processing_reset+0x4c>
 800864a:	8923      	ldrh	r3, [r4, #8]
 800864c:	222c      	movs	r2, #44	@ 0x2c
 800864e:	fb02 f203 	mul.w	r2, r2, r3
 8008652:	2100      	movs	r1, #0
 8008654:	f007 fbe6 	bl	800fe24 <memset>
 8008658:	8922      	ldrh	r2, [r4, #8]
 800865a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800865c:	0092      	lsls	r2, r2, #2
 800865e:	2100      	movs	r1, #0
 8008660:	f007 fbe0 	bl	800fe24 <memset>
 8008664:	8922      	ldrh	r2, [r4, #8]
 8008666:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8008668:	0092      	lsls	r2, r2, #2
 800866a:	2100      	movs	r1, #0
 800866c:	f007 fbda 	bl	800fe24 <memset>
 8008670:	2300      	movs	r3, #0
 8008672:	2200      	movs	r2, #0
 8008674:	6423      	str	r3, [r4, #64]	@ 0x40
 8008676:	6463      	str	r3, [r4, #68]	@ 0x44
 8008678:	64a3      	str	r3, [r4, #72]	@ 0x48
 800867a:	6522      	str	r2, [r4, #80]	@ 0x50
 800867c:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 8008680:	2001      	movs	r0, #1
 8008682:	bd10      	pop	{r4, pc}
 8008684:	4b05      	ldr	r3, [pc, #20]	@ (800869c <acc_detector_presence_processing_reset+0x64>)
 8008686:	4a06      	ldr	r2, [pc, #24]	@ (80086a0 <acc_detector_presence_processing_reset+0x68>)
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	4906      	ldr	r1, [pc, #24]	@ (80086a4 <acc_detector_presence_processing_reset+0x6c>)
 800868c:	2000      	movs	r0, #0
 800868e:	4798      	blx	r3
 8008690:	4620      	mov	r0, r4
 8008692:	f7ff fe07 	bl	80082a4 <processing_buffers_teardown>
 8008696:	2000      	movs	r0, #0
 8008698:	bd10      	pop	{r4, pc}
 800869a:	bf00      	nop
 800869c:	2000069c 	.word	0x2000069c
 80086a0:	080130a4 	.word	0x080130a4
 80086a4:	08012fc8 	.word	0x08012fc8

080086a8 <acc_detector_presence_processing_process>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	ed2d 8b06 	vpush	{d8-d10}
 80086b0:	b08d      	sub	sp, #52	@ 0x34
 80086b2:	b130      	cbz	r0, 80086c2 <acc_detector_presence_processing_process+0x1a>
 80086b4:	4616      	mov	r6, r2
 80086b6:	4698      	mov	r8, r3
 80086b8:	6802      	ldr	r2, [r0, #0]
 80086ba:	4bb6      	ldr	r3, [pc, #728]	@ (8008994 <acc_detector_presence_processing_process+0x2ec>)
 80086bc:	429a      	cmp	r2, r3
 80086be:	4604      	mov	r4, r0
 80086c0:	d012      	beq.n	80086e8 <acc_detector_presence_processing_process+0x40>
 80086c2:	4cb5      	ldr	r4, [pc, #724]	@ (8008998 <acc_detector_presence_processing_process+0x2f0>)
 80086c4:	4ab5      	ldr	r2, [pc, #724]	@ (800899c <acc_detector_presence_processing_process+0x2f4>)
 80086c6:	6923      	ldr	r3, [r4, #16]
 80086c8:	49b5      	ldr	r1, [pc, #724]	@ (80089a0 <acc_detector_presence_processing_process+0x2f8>)
 80086ca:	2000      	movs	r0, #0
 80086cc:	4798      	blx	r3
 80086ce:	6923      	ldr	r3, [r4, #16]
 80086d0:	4ab4      	ldr	r2, [pc, #720]	@ (80089a4 <acc_detector_presence_processing_process+0x2fc>)
 80086d2:	49b3      	ldr	r1, [pc, #716]	@ (80089a0 <acc_detector_presence_processing_process+0x2f8>)
 80086d4:	2000      	movs	r0, #0
 80086d6:	4798      	blx	r3
 80086d8:	f04f 0900 	mov.w	r9, #0
 80086dc:	4648      	mov	r0, r9
 80086de:	b00d      	add	sp, #52	@ 0x34
 80086e0:	ecbd 8b06 	vpop	{d8-d10}
 80086e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e8:	edd0 7a14 	vldr	s15, [r0, #80]	@ 0x50
 80086ec:	8903      	ldrh	r3, [r0, #8]
 80086ee:	ed90 0a0a 	vldr	s0, [r0, #40]	@ 0x28
 80086f2:	f8c8 1010 	str.w	r1, [r8, #16]
 80086f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fa:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80086fe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008702:	eb01 0583 	add.w	r5, r1, r3, lsl #2
 8008706:	ee80 7aa7 	vdiv.f32	s14, s1, s15
 800870a:	e9c8 5305 	strd	r5, r3, [r8, #20]
 800870e:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8008712:	edcd 0a05 	vstr	s1, [sp, #20]
 8008716:	f008 fc46 	bl	8010fa6 <fminf>
 800871a:	eddd 0a05 	vldr	s1, [sp, #20]
 800871e:	eeb0 aa40 	vmov.f32	s20, s0
 8008722:	ed94 0a0b 	vldr	s0, [r4, #44]	@ 0x2c
 8008726:	f008 fc3e 	bl	8010fa6 <fminf>
 800872a:	eddd 0a05 	vldr	s1, [sp, #20]
 800872e:	eef0 9a40 	vmov.f32	s19, s0
 8008732:	ed94 0a0c 	vldr	s0, [r4, #48]	@ 0x30
 8008736:	f008 fc36 	bl	8010fa6 <fminf>
 800873a:	eddd 0a05 	vldr	s1, [sp, #20]
 800873e:	eeb0 9a40 	vmov.f32	s18, s0
 8008742:	ed94 0a0d 	vldr	s0, [r4, #52]	@ 0x34
 8008746:	f008 fc2e 	bl	8010fa6 <fminf>
 800874a:	eddd 0a05 	vldr	s1, [sp, #20]
 800874e:	eef0 8a40 	vmov.f32	s17, s0
 8008752:	ed94 0a0e 	vldr	s0, [r4, #56]	@ 0x38
 8008756:	f008 fc26 	bl	8010fa6 <fminf>
 800875a:	eddd 0a05 	vldr	s1, [sp, #20]
 800875e:	eeb0 8a40 	vmov.f32	s16, s0
 8008762:	ed94 0a0f 	vldr	s0, [r4, #60]	@ 0x3c
 8008766:	f008 fc1e 	bl	8010fa6 <fminf>
 800876a:	eddd 0a05 	vldr	s1, [sp, #20]
 800876e:	ed8d 9a08 	vstr	s18, [sp, #32]
 8008772:	eef0 7a40 	vmov.f32	s15, s0
 8008776:	ed94 0a08 	vldr	s0, [r4, #32]
 800877a:	ed8d 8a0a 	vstr	s16, [sp, #40]	@ 0x28
 800877e:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 8008782:	ed8d aa06 	vstr	s20, [sp, #24]
 8008786:	edcd 9a07 	vstr	s19, [sp, #28]
 800878a:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 800878e:	f008 fc0a 	bl	8010fa6 <fminf>
 8008792:	6860      	ldr	r0, [r4, #4]
 8008794:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 8008796:	ed94 9a07 	vldr	s18, [r4, #28]
 800879a:	eeb0 8a40 	vmov.f32	s16, s0
 800879e:	f001 fac3 	bl	8009d28 <acc_config_sweeps_per_frame_get>
 80087a2:	ab06      	add	r3, sp, #24
 80087a4:	7b21      	ldrb	r1, [r4, #12]
 80087a6:	9302      	str	r3, [sp, #8]
 80087a8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	9101      	str	r1, [sp, #4]
 80087ae:	4602      	mov	r2, r0
 80087b0:	8923      	ldrh	r3, [r4, #8]
 80087b2:	4628      	mov	r0, r5
 80087b4:	4631      	mov	r1, r6
 80087b6:	f000 fcd3 	bl	8009160 <acc_detector_presence_alg_frame_abs_dev_accumulate>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f000 80c0 	beq.w	8008940 <acc_detector_presence_processing_process+0x298>
 80087c0:	e9d4 3216 	ldrd	r3, r2, [r4, #88]	@ 0x58
 80087c4:	8921      	ldrh	r1, [r4, #8]
 80087c6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80087c8:	f000 fec8 	bl	800955c <acc_detector_presence_alg_frame_abs_dev_to_noise_ratio>
 80087cc:	4681      	mov	r9, r0
 80087ce:	2800      	cmp	r0, #0
 80087d0:	f000 80dd 	beq.w	800898e <acc_detector_presence_processing_process+0x2e6>
 80087d4:	8923      	ldrh	r3, [r4, #8]
 80087d6:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80089a8 <acc_detector_presence_processing_process+0x300>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 80d2 	beq.w	8008984 <acc_detector_presence_processing_process+0x2dc>
 80087e0:	e9d8 7104 	ldrd	r7, r1, [r8, #16]
 80087e4:	2200      	movs	r2, #0
 80087e6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80087e8:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 80087ea:	eef0 6a47 	vmov.f32	s13, s14
 80087ee:	4692      	mov	sl, r2
 80087f0:	4693      	mov	fp, r2
 80087f2:	4615      	mov	r5, r2
 80087f4:	ecf0 7a01 	vldmia	r0!, {s15}
 80087f8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80087fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008800:	ece7 7a01 	vstmia	r7!, {s15}
 8008804:	bf48      	it	mi
 8008806:	eef0 6a67 	vmovmi.f32	s13, s15
 800880a:	ecf6 7a01 	vldmia	r6!, {s15}
 800880e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008812:	bf48      	it	mi
 8008814:	46ab      	movmi	fp, r5
 8008816:	3201      	adds	r2, #1
 8008818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800881c:	bfc8      	it	gt
 800881e:	46aa      	movgt	sl, r5
 8008820:	b295      	uxth	r5, r2
 8008822:	bfc8      	it	gt
 8008824:	eeb0 7a67 	vmovgt.f32	s14, s15
 8008828:	429d      	cmp	r5, r3
 800882a:	ece1 7a01 	vstmia	r1!, {s15}
 800882e:	d3e1      	bcc.n	80087f4 <acc_detector_presence_processing_process+0x14c>
 8008830:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008834:	ee77 8ac9 	vsub.f32	s17, s15, s18
 8008838:	ed94 6a10 	vldr	s12, [r4, #64]	@ 0x40
 800883c:	ed94 0a11 	vldr	s0, [r4, #68]	@ 0x44
 8008840:	8963      	ldrh	r3, [r4, #10]
 8008842:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8008846:	ee68 6aa6 	vmul.f32	s13, s17, s13
 800884a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800884e:	ee69 8a06 	vmul.f32	s17, s18, s12
 8008852:	ee28 8a00 	vmul.f32	s16, s16, s0
 8008856:	ee78 8aa6 	vadd.f32	s17, s17, s13
 800885a:	ee38 8a07 	vadd.f32	s16, s16, s14
 800885e:	edc4 8a10 	vstr	s17, [r4, #64]	@ 0x40
 8008862:	ed84 8a11 	vstr	s16, [r4, #68]	@ 0x44
 8008866:	2b00      	cmp	r3, #0
 8008868:	d040      	beq.n	80088ec <acc_detector_presence_processing_process+0x244>
 800886a:	edd4 7a12 	vldr	s15, [r4, #72]	@ 0x48
 800886e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8008872:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887a:	d467      	bmi.n	800894c <acc_detector_presence_processing_process+0x2a4>
 800887c:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 80089a8 <acc_detector_presence_processing_process+0x300>
 8008880:	2200      	movs	r2, #0
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	ed94 aa04 	vldr	s20, [r4, #16]
 800888a:	eddf 0a47 	vldr	s1, [pc, #284]	@ 80089a8 <acc_detector_presence_processing_process+0x300>
 800888e:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 8008892:	eeb8 9a67 	vcvt.f32.u32	s18, s15
 8008896:	ee69 aa0a 	vmul.f32	s21, s18, s20
 800889a:	ee30 0a6a 	vsub.f32	s0, s0, s21
 800889e:	f008 fb65 	bl	8010f6c <fmaxf>
 80088a2:	eef0 9a40 	vmov.f32	s19, s0
 80088a6:	ee89 0aaa 	vdiv.f32	s0, s19, s21
 80088aa:	f008 f92d 	bl	8010b08 <expf>
 80088ae:	eec8 aa00 	vdiv.f32	s21, s16, s0
 80088b2:	ed94 8a09 	vldr	s16, [r4, #36]	@ 0x24
 80088b6:	edc4 aa11 	vstr	s21, [r4, #68]	@ 0x44
 80088ba:	ee28 0a29 	vmul.f32	s0, s16, s19
 80088be:	ee80 0a09 	vdiv.f32	s0, s0, s18
 80088c2:	f008 f921 	bl	8010b08 <expf>
 80088c6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80088ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d2:	dd54      	ble.n	800897e <acc_detector_presence_processing_process+0x2d6>
 80088d4:	ee2a aa27 	vmul.f32	s20, s20, s15
 80088d8:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80088dc:	ee80 0a0a 	vdiv.f32	s0, s0, s20
 80088e0:	f008 f912 	bl	8010b08 <expf>
 80088e4:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 80088e8:	edc4 aa12 	vstr	s21, [r4, #72]	@ 0x48
 80088ec:	7b63      	ldrb	r3, [r4, #13]
 80088ee:	b133      	cbz	r3, 80088fe <acc_detector_presence_processing_process+0x256>
 80088f0:	edd4 7a05 	vldr	s15, [r4, #20]
 80088f4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80088f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088fc:	dc2f      	bgt.n	800895e <acc_detector_presence_processing_process+0x2b6>
 80088fe:	7ba3      	ldrb	r3, [r4, #14]
 8008900:	edd4 7a11 	vldr	s15, [r4, #68]	@ 0x44
 8008904:	b133      	cbz	r3, 8008914 <acc_detector_presence_processing_process+0x26c>
 8008906:	ed94 7a06 	vldr	s14, [r4, #24]
 800890a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800890e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008912:	dc32      	bgt.n	800897a <acc_detector_presence_processing_process+0x2d2>
 8008914:	2200      	movs	r2, #0
 8008916:	2300      	movs	r3, #0
 8008918:	f8c8 200c 	str.w	r2, [r8, #12]
 800891c:	f888 3000 	strb.w	r3, [r8]
 8008920:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008922:	edc8 8a01 	vstr	s17, [r8, #4]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	bf14      	ite	ne
 800892a:	3301      	addne	r3, #1
 800892c:	2300      	moveq	r3, #0
 800892e:	4648      	mov	r0, r9
 8008930:	edc8 7a02 	vstr	s15, [r8, #8]
 8008934:	6523      	str	r3, [r4, #80]	@ 0x50
 8008936:	b00d      	add	sp, #52	@ 0x34
 8008938:	ecbd 8b06 	vpop	{d8-d10}
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	4c15      	ldr	r4, [pc, #84]	@ (8008998 <acc_detector_presence_processing_process+0x2f0>)
 8008942:	4a1a      	ldr	r2, [pc, #104]	@ (80089ac <acc_detector_presence_processing_process+0x304>)
 8008944:	6923      	ldr	r3, [r4, #16]
 8008946:	4916      	ldr	r1, [pc, #88]	@ (80089a0 <acc_detector_presence_processing_process+0x2f8>)
 8008948:	4798      	blx	r3
 800894a:	e6c0      	b.n	80086ce <acc_detector_presence_processing_process+0x26>
 800894c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	@ 0x4c
 8008950:	3201      	adds	r2, #1
 8008952:	b292      	uxth	r2, r2
 8008954:	ee07 2a90 	vmov	s15, r2
 8008958:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 800895c:	e791      	b.n	8008882 <acc_detector_presence_processing_process+0x1da>
 800895e:	4659      	mov	r1, fp
 8008960:	6860      	ldr	r0, [r4, #4]
 8008962:	f003 fa7d 	bl	800be60 <acc_detector_utils_get_distance_m>
 8008966:	2301      	movs	r3, #1
 8008968:	edd4 8a10 	vldr	s17, [r4, #64]	@ 0x40
 800896c:	edd4 7a11 	vldr	s15, [r4, #68]	@ 0x44
 8008970:	ed88 0a03 	vstr	s0, [r8, #12]
 8008974:	f888 3000 	strb.w	r3, [r8]
 8008978:	e7d2      	b.n	8008920 <acc_detector_presence_processing_process+0x278>
 800897a:	4651      	mov	r1, sl
 800897c:	e7f0      	b.n	8008960 <acc_detector_presence_processing_process+0x2b8>
 800897e:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80089a8 <acc_detector_presence_processing_process+0x300>
 8008982:	e7af      	b.n	80088e4 <acc_detector_presence_processing_process+0x23c>
 8008984:	469a      	mov	sl, r3
 8008986:	469b      	mov	fp, r3
 8008988:	eef0 6a47 	vmov.f32	s13, s14
 800898c:	e750      	b.n	8008830 <acc_detector_presence_processing_process+0x188>
 800898e:	4c02      	ldr	r4, [pc, #8]	@ (8008998 <acc_detector_presence_processing_process+0x2f0>)
 8008990:	e69d      	b.n	80086ce <acc_detector_presence_processing_process+0x26>
 8008992:	bf00      	nop
 8008994:	1337b103 	.word	0x1337b103
 8008998:	2000069c 	.word	0x2000069c
 800899c:	08013088 	.word	0x08013088
 80089a0:	08012fc8 	.word	0x08012fc8
 80089a4:	08013110 	.word	0x08013110
 80089a8:	00000000 	.word	0x00000000
 80089ac:	080130d4 	.word	0x080130d4

080089b0 <highest_possible_profile>:
 80089b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089b2:	ed2d 8b02 	vpush	{d8}
 80089b6:	b083      	sub	sp, #12
 80089b8:	4b0e      	ldr	r3, [pc, #56]	@ (80089f4 <highest_possible_profile+0x44>)
 80089ba:	9301      	str	r3, [sp, #4]
 80089bc:	eeb0 8a40 	vmov.f32	s16, s0
 80089c0:	f10d 0505 	add.w	r5, sp, #5
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	2402      	movs	r4, #2
 80089c8:	2601      	movs	r6, #1
 80089ca:	4620      	mov	r0, r4
 80089cc:	f003 f916 	bl	800bbfc <acc_detector_utils_get_fwhm>
 80089d0:	ee70 7a00 	vadd.f32	s15, s0, s0
 80089d4:	eef4 7a48 	vcmp.f32	s15, s16
 80089d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089dc:	bf98      	it	ls
 80089de:	4626      	movls	r6, r4
 80089e0:	42bd      	cmp	r5, r7
 80089e2:	d002      	beq.n	80089ea <highest_possible_profile+0x3a>
 80089e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089e8:	e7ef      	b.n	80089ca <highest_possible_profile+0x1a>
 80089ea:	4630      	mov	r0, r6
 80089ec:	b003      	add	sp, #12
 80089ee:	ecbd 8b02 	vpop	{d8}
 80089f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089f4:	05040302 	.word	0x05040302

080089f8 <select_hwaas>:
 80089f8:	b508      	push	{r3, lr}
 80089fa:	ed2d 8b02 	vpush	{d8}
 80089fe:	eeb0 8a60 	vmov.f32	s16, s1
 8008a02:	eef0 8a40 	vmov.f32	s17, s0
 8008a06:	f003 f909 	bl	800bc1c <acc_detector_utils_radar_loop_gain_per_hwaas>
 8008a0a:	eef0 7a40 	vmov.f32	s15, s0
 8008a0e:	eeb0 0a48 	vmov.f32	s0, s16
 8008a12:	eeb0 8a67 	vmov.f32	s16, s15
 8008a16:	f008 f8ad 	bl	8010b74 <log10f>
 8008a1a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8008a60 <select_hwaas+0x68>
 8008a1e:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008a22:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8008a26:	ee36 7aa8 	vadd.f32	s14, s13, s17
 8008a2a:	ee37 7a48 	vsub.f32	s14, s14, s16
 8008a2e:	eec7 0a00 	vdiv.f32	s1, s14, s0
 8008a32:	f008 f8cd 	bl	8010bd0 <powf>
 8008a36:	f008 fb71 	bl	801111c <roundf>
 8008a3a:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8008a64 <select_hwaas+0x6c>
 8008a3e:	f008 fab2 	bl	8010fa6 <fminf>
 8008a42:	eef0 0a40 	vmov.f32	s1, s0
 8008a46:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008a4a:	f008 fa8f 	bl	8010f6c <fmaxf>
 8008a4e:	ecbd 8b02 	vpop	{d8}
 8008a52:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8008a56:	ee10 3a10 	vmov	r3, s0
 8008a5a:	b298      	uxth	r0, r3
 8008a5c:	bd08      	pop	{r3, pc}
 8008a5e:	bf00      	nop
 8008a60:	42200000 	.word	0x42200000
 8008a64:	43ff8000 	.word	0x43ff8000

08008a68 <get_hwaas_subsweeps_config.isra.0.constprop.0>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	ed2d 8b06 	vpush	{d8-d10}
 8008a70:	b089      	sub	sp, #36	@ 0x24
 8008a72:	4606      	mov	r6, r0
 8008a74:	4688      	mov	r8, r1
 8008a76:	4617      	mov	r7, r2
 8008a78:	461d      	mov	r5, r3
 8008a7a:	eef0 8a40 	vmov.f32	s17, s0
 8008a7e:	eeb0 8a60 	vmov.f32	s16, s1
 8008a82:	f003 f9cf 	bl	800be24 <acc_detector_utils_equal_f32>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	f000 80a4 	beq.w	8008bd4 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x16c>
 8008a8c:	eddf 7a70 	vldr	s15, [pc, #448]	@ 8008c50 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x1e8>
 8008a90:	2005      	movs	r0, #5
 8008a92:	ee38 8a27 	vadd.f32	s16, s16, s15
 8008a96:	f003 f95b 	bl	800bd50 <acc_detector_utils_get_max_step_length>
 8008a9a:	2d03      	cmp	r5, #3
 8008a9c:	ee09 0a90 	vmov	s19, r0
 8008aa0:	f04f 0900 	mov.w	r9, #0
 8008aa4:	f000 80a0 	beq.w	8008be8 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x180>
 8008aa8:	2d04      	cmp	r5, #4
 8008aaa:	f000 80c4 	beq.w	8008c36 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x1ce>
 8008aae:	2d02      	cmp	r5, #2
 8008ab0:	f000 80b9 	beq.w	8008c26 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x1be>
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008aba:	9203      	str	r2, [sp, #12]
 8008abc:	9304      	str	r3, [sp, #16]
 8008abe:	f10d 0a10 	add.w	sl, sp, #16
 8008ac2:	ee38 7a68 	vsub.f32	s14, s16, s17
 8008ac6:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8008c54 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x1ec>
 8008aca:	eb0a 0285 	add.w	r2, sl, r5, lsl #2
 8008ace:	4654      	mov	r4, sl
 8008ad0:	e001      	b.n	8008ad6 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x6e>
 8008ad2:	ecf4 7a01 	vldmia	r4!, {s15}
 8008ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ada:	4294      	cmp	r4, r2
 8008adc:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8008ae0:	ed44 7a01 	vstr	s15, [r4, #-4]
 8008ae4:	d1f5      	bne.n	8008ad2 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x6a>
 8008ae6:	b345      	cbz	r5, 8008b3a <get_hwaas_subsweeps_config.isra.0.constprop.0+0xd2>
 8008ae8:	f105 3bff 	add.w	fp, r5, #4294967295
 8008aec:	fa5f f38b 	uxtb.w	r3, fp
 8008af0:	ed9f aa59 	vldr	s20, [pc, #356]	@ 8008c58 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x1f0>
 8008af4:	eddf aa59 	vldr	s21, [pc, #356]	@ 8008c5c <get_hwaas_subsweeps_config.isra.0.constprop.0+0x1f4>
 8008af8:	f10d 0b14 	add.w	fp, sp, #20
 8008afc:	eb0b 0b83 	add.w	fp, fp, r3, lsl #2
 8008b00:	2500      	movs	r5, #0
 8008b02:	ecba 7a01 	vldmia	sl!, {s14}
 8008b06:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8008b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b0e:	dd12      	ble.n	8008b36 <get_hwaas_subsweeps_config.isra.0.constprop.0+0xce>
 8008b10:	eef8 7a69 	vcvt.f32.u32	s15, s19
 8008b14:	eeb0 8a68 	vmov.f32	s16, s17
 8008b18:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8008b1c:	2400      	movs	r4, #0
 8008b1e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8008b22:	3401      	adds	r4, #1
 8008b24:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8008b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b2c:	b2a4      	uxth	r4, r4
 8008b2e:	d4f6      	bmi.n	8008b1e <get_hwaas_subsweeps_config.isra.0.constprop.0+0xb6>
 8008b30:	b964      	cbnz	r4, 8008b4c <get_hwaas_subsweeps_config.isra.0.constprop.0+0xe4>
 8008b32:	eef0 8a48 	vmov.f32	s17, s16
 8008b36:	45d3      	cmp	fp, sl
 8008b38:	d1e3      	bne.n	8008b02 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x9a>
 8008b3a:	f1b9 0f00 	cmp.w	r9, #0
 8008b3e:	d15d      	bne.n	8008bfc <get_hwaas_subsweeps_config.isra.0.constprop.0+0x194>
 8008b40:	4628      	mov	r0, r5
 8008b42:	b009      	add	sp, #36	@ 0x24
 8008b44:	ecbd 8b06 	vpop	{d8-d10}
 8008b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4c:	ee88 0a0a 	vdiv.f32	s0, s16, s20
 8008b50:	f008 fae4 	bl	801111c <roundf>
 8008b54:	197a      	adds	r2, r7, r5
 8008b56:	b2d2      	uxtb	r2, r2
 8008b58:	6830      	ldr	r0, [r6, #0]
 8008b5a:	9201      	str	r2, [sp, #4]
 8008b5c:	2105      	movs	r1, #5
 8008b5e:	3501      	adds	r5, #1
 8008b60:	b2ed      	uxtb	r5, r5
 8008b62:	eeb0 9a40 	vmov.f32	s18, s0
 8008b66:	f001 f84f 	bl	8009c08 <acc_config_subsweep_profile_set>
 8008b6a:	eec8 7a8a 	vdiv.f32	s15, s17, s20
 8008b6e:	9a01      	ldr	r2, [sp, #4]
 8008b70:	6830      	ldr	r0, [r6, #0]
 8008b72:	eef0 8a48 	vmov.f32	s17, s16
 8008b76:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8008b7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b7e:	ee17 1a90 	vmov	r1, s15
 8008b82:	f000 ff75 	bl	8009a70 <acc_config_subsweep_start_point_set>
 8008b86:	9a01      	ldr	r2, [sp, #4]
 8008b88:	6830      	ldr	r0, [r6, #0]
 8008b8a:	ee19 1a90 	vmov	r1, s19
 8008b8e:	f000 fff7 	bl	8009b80 <acc_config_subsweep_step_length_set>
 8008b92:	4621      	mov	r1, r4
 8008b94:	9a01      	ldr	r2, [sp, #4]
 8008b96:	6830      	ldr	r0, [r6, #0]
 8008b98:	f000 ffae 	bl	8009af8 <acc_config_subsweep_num_points_set>
 8008b9c:	ed98 0a00 	vldr	s0, [r8]
 8008ba0:	6834      	ldr	r4, [r6, #0]
 8008ba2:	eef0 0a48 	vmov.f32	s1, s16
 8008ba6:	2005      	movs	r0, #5
 8008ba8:	f7ff ff26 	bl	80089f8 <select_hwaas>
 8008bac:	9a01      	ldr	r2, [sp, #4]
 8008bae:	4601      	mov	r1, r0
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f001 f86d 	bl	8009c90 <acc_config_subsweep_hwaas_set>
 8008bb6:	eebd 9ac9 	vcvt.s32.f32	s18, s18
 8008bba:	2105      	movs	r1, #5
 8008bbc:	ee19 3a10 	vmov	r3, s18
 8008bc0:	b218      	sxth	r0, r3
 8008bc2:	6834      	ldr	r4, [r6, #0]
 8008bc4:	f003 f83a 	bl	800bc3c <acc_detector_utils_select_prf>
 8008bc8:	9a01      	ldr	r2, [sp, #4]
 8008bca:	4601      	mov	r1, r0
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f001 f909 	bl	8009de4 <acc_config_subsweep_prf_set>
 8008bd2:	e7b0      	b.n	8008b36 <get_hwaas_subsweeps_config.isra.0.constprop.0+0xce>
 8008bd4:	2005      	movs	r0, #5
 8008bd6:	f003 f8bb 	bl	800bd50 <acc_detector_utils_get_max_step_length>
 8008bda:	2d03      	cmp	r5, #3
 8008bdc:	ee09 0a90 	vmov	s19, r0
 8008be0:	f04f 0901 	mov.w	r9, #1
 8008be4:	f47f af60 	bne.w	8008aa8 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x40>
 8008be8:	4b1d      	ldr	r3, [pc, #116]	@ (8008c60 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x1f8>)
 8008bea:	9304      	str	r3, [sp, #16]
 8008bec:	2200      	movs	r2, #0
 8008bee:	9203      	str	r2, [sp, #12]
 8008bf0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8008c64 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x1fc>)
 8008bf6:	9205      	str	r2, [sp, #20]
 8008bf8:	9306      	str	r3, [sp, #24]
 8008bfa:	e760      	b.n	8008abe <get_hwaas_subsweeps_config.isra.0.constprop.0+0x56>
 8008bfc:	1e7a      	subs	r2, r7, #1
 8008bfe:	6834      	ldr	r4, [r6, #0]
 8008c00:	442a      	add	r2, r5
 8008c02:	b2d2      	uxtb	r2, r2
 8008c04:	4611      	mov	r1, r2
 8008c06:	4620      	mov	r0, r4
 8008c08:	9201      	str	r2, [sp, #4]
 8008c0a:	f000 ff97 	bl	8009b3c <acc_config_subsweep_num_points_get>
 8008c0e:	3001      	adds	r0, #1
 8008c10:	b281      	uxth	r1, r0
 8008c12:	9a01      	ldr	r2, [sp, #4]
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 ff6f 	bl	8009af8 <acc_config_subsweep_num_points_set>
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	b009      	add	sp, #36	@ 0x24
 8008c1e:	ecbd 8b06 	vpop	{d8-d10}
 8008c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c26:	2300      	movs	r3, #0
 8008c28:	4a0f      	ldr	r2, [pc, #60]	@ (8008c68 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x200>)
 8008c2a:	9303      	str	r3, [sp, #12]
 8008c2c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008c30:	9204      	str	r2, [sp, #16]
 8008c32:	9305      	str	r3, [sp, #20]
 8008c34:	e743      	b.n	8008abe <get_hwaas_subsweeps_config.isra.0.constprop.0+0x56>
 8008c36:	2300      	movs	r3, #0
 8008c38:	4a0c      	ldr	r2, [pc, #48]	@ (8008c6c <get_hwaas_subsweeps_config.isra.0.constprop.0+0x204>)
 8008c3a:	9303      	str	r3, [sp, #12]
 8008c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c70 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x208>)
 8008c3e:	9204      	str	r2, [sp, #16]
 8008c40:	9305      	str	r3, [sp, #20]
 8008c42:	4a0c      	ldr	r2, [pc, #48]	@ (8008c74 <get_hwaas_subsweeps_config.isra.0.constprop.0+0x20c>)
 8008c44:	9206      	str	r2, [sp, #24]
 8008c46:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008c4a:	9307      	str	r3, [sp, #28]
 8008c4c:	e737      	b.n	8008abe <get_hwaas_subsweeps_config.isra.0.constprop.0+0x56>
 8008c4e:	bf00      	nop
 8008c50:	3c23d70a 	.word	0x3c23d70a
 8008c54:	00000000 	.word	0x00000000
 8008c58:	3b23d70a 	.word	0x3b23d70a
 8008c5c:	38d1b717 	.word	0x38d1b717
 8008c60:	3f0a3d71 	.word	0x3f0a3d71
 8008c64:	3f4f5c29 	.word	0x3f4f5c29
 8008c68:	3f3d70a4 	.word	0x3f3d70a4
 8008c6c:	3ef0a3d7 	.word	0x3ef0a3d7
 8008c70:	3f333333 	.word	0x3f333333
 8008c74:	3f5eb852 	.word	0x3f5eb852

08008c78 <get_profile_subsweeps_config.isra.0.constprop.0>:
 8008c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	ed2d 8b06 	vpush	{d8-d10}
 8008c80:	b087      	sub	sp, #28
 8008c82:	4605      	mov	r5, r0
 8008c84:	9101      	str	r1, [sp, #4]
 8008c86:	4691      	mov	r9, r2
 8008c88:	9303      	str	r3, [sp, #12]
 8008c8a:	eeb0 9a40 	vmov.f32	s18, s0
 8008c8e:	eef0 aa60 	vmov.f32	s21, s1
 8008c92:	f003 f8c7 	bl	800be24 <acc_detector_utils_equal_f32>
 8008c96:	b128      	cbz	r0, 8008ca4 <get_profile_subsweeps_config.isra.0.constprop.0+0x2c>
 8008c98:	eddf 7a9f 	vldr	s15, [pc, #636]	@ 8008f18 <get_profile_subsweeps_config.isra.0.constprop.0+0x2a0>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	ee7a aaa7 	vadd.f32	s21, s21, s15
 8008ca2:	9303      	str	r3, [sp, #12]
 8008ca4:	eeb0 0a49 	vmov.f32	s0, s18
 8008ca8:	f7ff fe82 	bl	80089b0 <highest_possible_profile>
 8008cac:	eeb0 0a6a 	vmov.f32	s0, s21
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	f7ff fe7d 	bl	80089b0 <highest_possible_profile>
 8008cb6:	2c05      	cmp	r4, #5
 8008cb8:	4606      	mov	r6, r0
 8008cba:	f000 80fa 	beq.w	8008eb2 <get_profile_subsweeps_config.isra.0.constprop.0+0x23a>
 8008cbe:	4b97      	ldr	r3, [pc, #604]	@ (8008f1c <get_profile_subsweeps_config.isra.0.constprop.0+0x2a4>)
 8008cc0:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8008cc4:	2805      	cmp	r0, #5
 8008cc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cca:	f000 80d4 	beq.w	8008e76 <get_profile_subsweeps_config.isra.0.constprop.0+0x1fe>
 8008cce:	2c01      	cmp	r4, #1
 8008cd0:	f000 8113 	beq.w	8008efa <get_profile_subsweeps_config.isra.0.constprop.0+0x282>
 8008cd4:	2c02      	cmp	r4, #2
 8008cd6:	f000 80d5 	beq.w	8008e84 <get_profile_subsweeps_config.isra.0.constprop.0+0x20c>
 8008cda:	f89d 8016 	ldrb.w	r8, [sp, #22]
 8008cde:	45a0      	cmp	r8, r4
 8008ce0:	bf14      	ite	ne
 8008ce2:	f04f 0803 	movne.w	r8, #3
 8008ce6:	f04f 0802 	moveq.w	r8, #2
 8008cea:	f1c8 0401 	rsb	r4, r8, #1
 8008cee:	b2e4      	uxtb	r4, r4
 8008cf0:	2e01      	cmp	r6, #1
 8008cf2:	f000 80fc 	beq.w	8008eee <get_profile_subsweeps_config.isra.0.constprop.0+0x276>
 8008cf6:	2e02      	cmp	r6, #2
 8008cf8:	f000 8102 	beq.w	8008f00 <get_profile_subsweeps_config.isra.0.constprop.0+0x288>
 8008cfc:	f89d 7016 	ldrb.w	r7, [sp, #22]
 8008d00:	42b7      	cmp	r7, r6
 8008d02:	bf14      	ite	ne
 8008d04:	2703      	movne	r7, #3
 8008d06:	2702      	moveq	r7, #2
 8008d08:	1939      	adds	r1, r7, r4
 8008d0a:	b2c9      	uxtb	r1, r1
 8008d0c:	4648      	mov	r0, r9
 8008d0e:	f003 f881 	bl	800be14 <acc_detector_utils_min_u8>
 8008d12:	4641      	mov	r1, r8
 8008d14:	43cb      	mvns	r3, r1
 8008d16:	441f      	add	r7, r3
 8008d18:	ab05      	add	r3, sp, #20
 8008d1a:	eb03 0408 	add.w	r4, r3, r8
 8008d1e:	4681      	mov	r9, r0
 8008d20:	2300      	movs	r3, #0
 8008d22:	e009      	b.n	8008d38 <get_profile_subsweeps_config.isra.0.constprop.0+0xc0>
 8008d24:	aa06      	add	r2, sp, #24
 8008d26:	441a      	add	r2, r3
 8008d28:	3301      	adds	r3, #1
 8008d2a:	f802 0c08 	strb.w	r0, [r2, #-8]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	1c4a      	adds	r2, r1, #1
 8008d32:	b2d1      	uxtb	r1, r2
 8008d34:	2904      	cmp	r1, #4
 8008d36:	d01f      	beq.n	8008d78 <get_profile_subsweeps_config.isra.0.constprop.0+0x100>
 8008d38:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008d3c:	42b0      	cmp	r0, r6
 8008d3e:	f000 02fd 	and.w	r2, r0, #253	@ 0xfd
 8008d42:	d819      	bhi.n	8008d78 <get_profile_subsweeps_config.isra.0.constprop.0+0x100>
 8008d44:	4599      	cmp	r9, r3
 8008d46:	d917      	bls.n	8008d78 <get_profile_subsweeps_config.isra.0.constprop.0+0x100>
 8008d48:	2a01      	cmp	r2, #1
 8008d4a:	d0eb      	beq.n	8008d24 <get_profile_subsweeps_config.isra.0.constprop.0+0xac>
 8008d4c:	2802      	cmp	r0, #2
 8008d4e:	d1e9      	bne.n	8008d24 <get_profile_subsweeps_config.isra.0.constprop.0+0xac>
 8008d50:	eba9 0c03 	sub.w	ip, r9, r3
 8008d54:	19ca      	adds	r2, r1, r7
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	fa5f fc8c 	uxtb.w	ip, ip
 8008d5c:	f10d 0e18 	add.w	lr, sp, #24
 8008d60:	4594      	cmp	ip, r2
 8008d62:	449e      	add	lr, r3
 8008d64:	f103 0201 	add.w	r2, r3, #1
 8008d68:	d3e2      	bcc.n	8008d30 <get_profile_subsweeps_config.isra.0.constprop.0+0xb8>
 8008d6a:	b2d3      	uxtb	r3, r2
 8008d6c:	1c4a      	adds	r2, r1, #1
 8008d6e:	b2d1      	uxtb	r1, r2
 8008d70:	2904      	cmp	r1, #4
 8008d72:	f80e 0c08 	strb.w	r0, [lr, #-8]
 8008d76:	d1df      	bne.n	8008d38 <get_profile_subsweeps_config.isra.0.constprop.0+0xc0>
 8008d78:	f1b9 0f00 	cmp.w	r9, #0
 8008d7c:	f000 8091 	beq.w	8008ea2 <get_profile_subsweeps_config.isra.0.constprop.0+0x22a>
 8008d80:	f04f 0800 	mov.w	r8, #0
 8008d84:	f109 33ff 	add.w	r3, r9, #4294967295
 8008d88:	eddf 9a65 	vldr	s19, [pc, #404]	@ 8008f20 <get_profile_subsweeps_config.isra.0.constprop.0+0x2a8>
 8008d8c:	ed9f aa65 	vldr	s20, [pc, #404]	@ 8008f24 <get_profile_subsweeps_config.isra.0.constprop.0+0x2ac>
 8008d90:	9302      	str	r3, [sp, #8]
 8008d92:	4644      	mov	r4, r8
 8008d94:	f10d 0a10 	add.w	sl, sp, #16
 8008d98:	f81a 6b01 	ldrb.w	r6, [sl], #1
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f002 ffd7 	bl	800bd50 <acc_detector_utils_get_max_step_length>
 8008da2:	9b02      	ldr	r3, [sp, #8]
 8008da4:	4543      	cmp	r3, r8
 8008da6:	4607      	mov	r7, r0
 8008da8:	d06f      	beq.n	8008e8a <get_profile_subsweeps_config.isra.0.constprop.0+0x212>
 8008daa:	f89a 0000 	ldrb.w	r0, [sl]
 8008dae:	f002 ff25 	bl	800bbfc <acc_detector_utils_get_fwhm>
 8008db2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008db6:	eef4 7ac9 	vcmpe.f32	s15, s18
 8008dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dbe:	dd6b      	ble.n	8008e98 <get_profile_subsweeps_config.isra.0.constprop.0+0x220>
 8008dc0:	ee07 7a10 	vmov	s14, r7
 8008dc4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008dc8:	eeb0 8a49 	vmov.f32	s16, s18
 8008dcc:	ee27 7a29 	vmul.f32	s14, s14, s19
 8008dd0:	f04f 0b00 	mov.w	fp, #0
 8008dd4:	ee38 8a07 	vadd.f32	s16, s16, s14
 8008dd8:	f10b 0b01 	add.w	fp, fp, #1
 8008ddc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de4:	fa1f fb8b 	uxth.w	fp, fp
 8008de8:	d4f4      	bmi.n	8008dd4 <get_profile_subsweeps_config.isra.0.constprop.0+0x15c>
 8008dea:	ee88 0a29 	vdiv.f32	s0, s16, s19
 8008dee:	f008 f995 	bl	801111c <roundf>
 8008df2:	4622      	mov	r2, r4
 8008df4:	4631      	mov	r1, r6
 8008df6:	6828      	ldr	r0, [r5, #0]
 8008df8:	f108 0801 	add.w	r8, r8, #1
 8008dfc:	eef0 8a40 	vmov.f32	s17, s0
 8008e00:	f000 ff02 	bl	8009c08 <acc_config_subsweep_profile_set>
 8008e04:	eec9 7a29 	vdiv.f32	s15, s18, s19
 8008e08:	4622      	mov	r2, r4
 8008e0a:	6828      	ldr	r0, [r5, #0]
 8008e0c:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8008e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e14:	ee17 1a90 	vmov	r1, s15
 8008e18:	f000 fe2a 	bl	8009a70 <acc_config_subsweep_start_point_set>
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	4639      	mov	r1, r7
 8008e20:	6828      	ldr	r0, [r5, #0]
 8008e22:	f000 fead 	bl	8009b80 <acc_config_subsweep_step_length_set>
 8008e26:	4622      	mov	r2, r4
 8008e28:	4659      	mov	r1, fp
 8008e2a:	6828      	ldr	r0, [r5, #0]
 8008e2c:	f000 fe64 	bl	8009af8 <acc_config_subsweep_num_points_set>
 8008e30:	9b01      	ldr	r3, [sp, #4]
 8008e32:	682f      	ldr	r7, [r5, #0]
 8008e34:	ed93 0a00 	vldr	s0, [r3]
 8008e38:	eef0 0a48 	vmov.f32	s1, s16
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	f7ff fddb 	bl	80089f8 <select_hwaas>
 8008e42:	4622      	mov	r2, r4
 8008e44:	4601      	mov	r1, r0
 8008e46:	4638      	mov	r0, r7
 8008e48:	f000 ff22 	bl	8009c90 <acc_config_subsweep_hwaas_set>
 8008e4c:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8008e50:	4631      	mov	r1, r6
 8008e52:	ee18 3a90 	vmov	r3, s17
 8008e56:	b218      	sxth	r0, r3
 8008e58:	682e      	ldr	r6, [r5, #0]
 8008e5a:	f002 feef 	bl	800bc3c <acc_detector_utils_select_prf>
 8008e5e:	4622      	mov	r2, r4
 8008e60:	4601      	mov	r1, r0
 8008e62:	fa5f f488 	uxtb.w	r4, r8
 8008e66:	4630      	mov	r0, r6
 8008e68:	f000 ffbc 	bl	8009de4 <acc_config_subsweep_prf_set>
 8008e6c:	45a1      	cmp	r9, r4
 8008e6e:	d918      	bls.n	8008ea2 <get_profile_subsweeps_config.isra.0.constprop.0+0x22a>
 8008e70:	eeb0 9a48 	vmov.f32	s18, s16
 8008e74:	e790      	b.n	8008d98 <get_profile_subsweeps_config.isra.0.constprop.0+0x120>
 8008e76:	2c01      	cmp	r4, #1
 8008e78:	d03b      	beq.n	8008ef2 <get_profile_subsweeps_config.isra.0.constprop.0+0x27a>
 8008e7a:	2c02      	cmp	r4, #2
 8008e7c:	f04f 0604 	mov.w	r6, #4
 8008e80:	f47f af2b 	bne.w	8008cda <get_profile_subsweeps_config.isra.0.constprop.0+0x62>
 8008e84:	f04f 0801 	mov.w	r8, #1
 8008e88:	e72f      	b.n	8008cea <get_profile_subsweeps_config.isra.0.constprop.0+0x72>
 8008e8a:	eef0 7a6a 	vmov.f32	s15, s21
 8008e8e:	eef4 7ac9 	vcmpe.f32	s15, s18
 8008e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e96:	dc93      	bgt.n	8008dc0 <get_profile_subsweeps_config.isra.0.constprop.0+0x148>
 8008e98:	eeb0 8a49 	vmov.f32	s16, s18
 8008e9c:	f04f 0b00 	mov.w	fp, #0
 8008ea0:	e7a3      	b.n	8008dea <get_profile_subsweeps_config.isra.0.constprop.0+0x172>
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	b973      	cbnz	r3, 8008ec4 <get_profile_subsweeps_config.isra.0.constprop.0+0x24c>
 8008ea6:	4648      	mov	r0, r9
 8008ea8:	b007      	add	sp, #28
 8008eaa:	ecbd 8b06 	vpop	{d8-d10}
 8008eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb2:	2805      	cmp	r0, #5
 8008eb4:	d026      	beq.n	8008f04 <get_profile_subsweeps_config.isra.0.constprop.0+0x28c>
 8008eb6:	4b19      	ldr	r3, [pc, #100]	@ (8008f1c <get_profile_subsweeps_config.isra.0.constprop.0+0x2a4>)
 8008eb8:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8008ebc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ec0:	2404      	movs	r4, #4
 8008ec2:	e70a      	b.n	8008cda <get_profile_subsweeps_config.isra.0.constprop.0+0x62>
 8008ec4:	682c      	ldr	r4, [r5, #0]
 8008ec6:	f109 32ff 	add.w	r2, r9, #4294967295
 8008eca:	b2d2      	uxtb	r2, r2
 8008ecc:	4611      	mov	r1, r2
 8008ece:	4620      	mov	r0, r4
 8008ed0:	9201      	str	r2, [sp, #4]
 8008ed2:	f000 fe33 	bl	8009b3c <acc_config_subsweep_num_points_get>
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	b281      	uxth	r1, r0
 8008eda:	9a01      	ldr	r2, [sp, #4]
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 fe0b 	bl	8009af8 <acc_config_subsweep_num_points_set>
 8008ee2:	4648      	mov	r0, r9
 8008ee4:	b007      	add	sp, #28
 8008ee6:	ecbd 8b06 	vpop	{d8-d10}
 8008eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eee:	2700      	movs	r7, #0
 8008ef0:	e70a      	b.n	8008d08 <get_profile_subsweeps_config.isra.0.constprop.0+0x90>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	2604      	movs	r6, #4
 8008ef8:	e700      	b.n	8008cfc <get_profile_subsweeps_config.isra.0.constprop.0+0x84>
 8008efa:	f04f 0800 	mov.w	r8, #0
 8008efe:	e6f7      	b.n	8008cf0 <get_profile_subsweeps_config.isra.0.constprop.0+0x78>
 8008f00:	2701      	movs	r7, #1
 8008f02:	e701      	b.n	8008d08 <get_profile_subsweeps_config.isra.0.constprop.0+0x90>
 8008f04:	4b05      	ldr	r3, [pc, #20]	@ (8008f1c <get_profile_subsweeps_config.isra.0.constprop.0+0x2a4>)
 8008f06:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8008f0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f0e:	24fe      	movs	r4, #254	@ 0xfe
 8008f10:	f04f 0803 	mov.w	r8, #3
 8008f14:	e7ef      	b.n	8008ef6 <get_profile_subsweeps_config.isra.0.constprop.0+0x27e>
 8008f16:	bf00      	nop
 8008f18:	3c23d70a 	.word	0x3c23d70a
 8008f1c:	04030201 	.word	0x04030201
 8008f20:	3b23d70a 	.word	0x3b23d70a
 8008f24:	38d1b717 	.word	0x38d1b717

08008f28 <acc_detector_presence_translation_translate_config>:
 8008f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f2c:	ed2d 8b04 	vpush	{d8-d9}
 8008f30:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8008f34:	b082      	sub	sp, #8
 8008f36:	4604      	mov	r4, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d05e      	beq.n	8008ffa <acc_detector_presence_translation_translate_config+0xd2>
 8008f3c:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 8008f40:	eddf 8a7e 	vldr	s17, [pc, #504]	@ 800913c <acc_detector_presence_translation_translate_config+0x214>
 8008f44:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8009140 <acc_detector_presence_translation_translate_config+0x218>
 8008f48:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8008f4c:	f002 febc 	bl	800bcc8 <acc_detector_utils_relaxed_ceil>
 8008f50:	eeb0 9a40 	vmov.f32	s18, s0
 8008f54:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 8008f58:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8009140 <acc_detector_presence_translation_translate_config+0x218>
 8008f5c:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8008f60:	f002 feb2 	bl	800bcc8 <acc_detector_utils_relaxed_ceil>
 8008f64:	2005      	movs	r0, #5
 8008f66:	ee29 9a28 	vmul.f32	s18, s18, s17
 8008f6a:	ee60 8a28 	vmul.f32	s17, s0, s17
 8008f6e:	f002 fe45 	bl	800bbfc <acc_detector_utils_get_fwhm>
 8008f72:	ee30 8a00 	vadd.f32	s16, s0, s0
 8008f76:	eef4 8ac8 	vcmpe.f32	s17, s16
 8008f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7e:	f240 80c0 	bls.w	8009102 <acc_detector_presence_translation_translate_config+0x1da>
 8008f82:	eeb4 9ac8 	vcmpe.f32	s18, s16
 8008f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8a:	f300 80ac 	bgt.w	80090e6 <acc_detector_presence_translation_translate_config+0x1be>
 8008f8e:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8009140 <acc_detector_presence_translation_translate_config+0x218>
 8008f92:	ee88 0a88 	vdiv.f32	s0, s17, s16
 8008f96:	f002 fe97 	bl	800bcc8 <acc_detector_utils_relaxed_ceil>
 8008f9a:	f008 f8bf 	bl	801111c <roundf>
 8008f9e:	2003      	movs	r0, #3
 8008fa0:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 8008fa4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008fa8:	ee17 1a90 	vmov	r1, s15
 8008fac:	3901      	subs	r1, #1
 8008fae:	b2c9      	uxtb	r1, r1
 8008fb0:	f002 ff30 	bl	800be14 <acc_detector_utils_min_u8>
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	f002 ff31 	bl	800be1c <acc_detector_utils_max_u8>
 8008fba:	f1c0 0204 	rsb	r2, r0, #4
 8008fbe:	f104 0164 	add.w	r1, r4, #100	@ 0x64
 8008fc2:	4607      	mov	r7, r0
 8008fc4:	eeb0 0a49 	vmov.f32	s0, s18
 8008fc8:	b2d2      	uxtb	r2, r2
 8008fca:	2300      	movs	r3, #0
 8008fcc:	eef0 0a48 	vmov.f32	s1, s16
 8008fd0:	4630      	mov	r0, r6
 8008fd2:	9101      	str	r1, [sp, #4]
 8008fd4:	f7ff fe50 	bl	8008c78 <get_profile_subsweeps_config.isra.0.constprop.0>
 8008fd8:	4605      	mov	r5, r0
 8008fda:	9901      	ldr	r1, [sp, #4]
 8008fdc:	463b      	mov	r3, r7
 8008fde:	4630      	mov	r0, r6
 8008fe0:	eef0 0a68 	vmov.f32	s1, s17
 8008fe4:	eeb0 0a48 	vmov.f32	s0, s16
 8008fe8:	462a      	mov	r2, r5
 8008fea:	f7ff fd3d 	bl	8008a68 <get_hwaas_subsweeps_config.isra.0.constprop.0>
 8008fee:	4428      	add	r0, r5
 8008ff0:	b2c1      	uxtb	r1, r0
 8008ff2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8008ff4:	f000 fd0c 	bl	8009a10 <acc_config_num_subsweeps_set>
 8008ff8:	e05a      	b.n	80090b0 <acc_detector_presence_translation_translate_config+0x188>
 8008ffa:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f040 808d 	bne.w	800911e <acc_detector_presence_translation_translate_config+0x1f6>
 8009004:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009008:	f890 8046 	ldrb.w	r8, [r0, #70]	@ 0x46
 800900c:	2b00      	cmp	r3, #0
 800900e:	f040 8090 	bne.w	8009132 <acc_detector_presence_translation_translate_config+0x20a>
 8009012:	f8b4 7048 	ldrh.w	r7, [r4, #72]	@ 0x48
 8009016:	edd4 8a13 	vldr	s17, [r4, #76]	@ 0x4c
 800901a:	ed9f 8a48 	vldr	s16, [pc, #288]	@ 800913c <acc_detector_presence_translation_translate_config+0x214>
 800901e:	ee88 0a88 	vdiv.f32	s0, s17, s16
 8009022:	f008 f837 	bl	8011094 <floorf>
 8009026:	ee07 7a90 	vmov	s15, r7
 800902a:	ed94 7a14 	vldr	s14, [r4, #80]	@ 0x50
 800902e:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8009140 <acc_detector_presence_translation_translate_config+0x218>
 8009032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009036:	ee37 7a68 	vsub.f32	s14, s14, s17
 800903a:	ee67 7a88 	vmul.f32	s15, s15, s16
 800903e:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8009042:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009046:	ee16 6a90 	vmov	r6, s13
 800904a:	f002 fe3d 	bl	800bcc8 <acc_detector_utils_relaxed_ceil>
 800904e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009052:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009056:	f008 f861 	bl	801111c <roundf>
 800905a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800905e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009060:	ee10 3a10 	vmov	r3, s0
 8009064:	2101      	movs	r1, #1
 8009066:	b29d      	uxth	r5, r3
 8009068:	f000 fcd2 	bl	8009a10 <acc_config_num_subsweeps_set>
 800906c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800906e:	4641      	mov	r1, r8
 8009070:	f000 fe3c 	bl	8009cec <acc_config_profile_set>
 8009074:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009076:	4631      	mov	r1, r6
 8009078:	f000 fe2c 	bl	8009cd4 <acc_config_start_point_set>
 800907c:	4629      	mov	r1, r5
 800907e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009080:	f000 fe2c 	bl	8009cdc <acc_config_num_points_set>
 8009084:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009086:	4639      	mov	r1, r7
 8009088:	f000 fe2c 	bl	8009ce4 <acc_config_step_length_set>
 800908c:	b229      	sxth	r1, r5
 800908e:	3901      	subs	r1, #1
 8009090:	fb11 6107 	smlabb	r1, r1, r7, r6
 8009094:	b208      	sxth	r0, r1
 8009096:	4641      	mov	r1, r8
 8009098:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800909a:	f002 fdcf 	bl	800bc3c <acc_detector_utils_select_prf>
 800909e:	4601      	mov	r1, r0
 80090a0:	4628      	mov	r0, r5
 80090a2:	f000 fec1 	bl	8009e28 <acc_config_prf_set>
 80090a6:	f8b4 1056 	ldrh.w	r1, [r4, #86]	@ 0x56
 80090aa:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80090ac:	f000 fe22 	bl	8009cf4 <acc_config_hwaas_set>
 80090b0:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 80090b4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80090b6:	f000 fe67 	bl	8009d88 <acc_config_inter_frame_idle_state_set>
 80090ba:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80090bc:	f8b4 1054 	ldrh.w	r1, [r4, #84]	@ 0x54
 80090c0:	f000 fe1c 	bl	8009cfc <acc_config_sweeps_per_frame_set>
 80090c4:	ed94 0a17 	vldr	s0, [r4, #92]	@ 0x5c
 80090c8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80090cc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80090ce:	ed84 0a03 	vstr	s0, [r4, #12]
 80090d2:	b10b      	cbz	r3, 80090d8 <acc_detector_presence_translation_translate_config+0x1b0>
 80090d4:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8009144 <acc_detector_presence_translation_translate_config+0x21c>
 80090d8:	b002      	add	sp, #8
 80090da:	ecbd 8b04 	vpop	{d8-d9}
 80090de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090e2:	f000 be3b 	b.w	8009d5c <acc_config_frame_rate_set>
 80090e6:	f104 0164 	add.w	r1, r4, #100	@ 0x64
 80090ea:	eef0 0a68 	vmov.f32	s1, s17
 80090ee:	eeb0 0a49 	vmov.f32	s0, s18
 80090f2:	2304      	movs	r3, #4
 80090f4:	2200      	movs	r2, #0
 80090f6:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 80090fa:	f7ff fcb5 	bl	8008a68 <get_hwaas_subsweeps_config.isra.0.constprop.0>
 80090fe:	4601      	mov	r1, r0
 8009100:	e777      	b.n	8008ff2 <acc_detector_presence_translation_translate_config+0xca>
 8009102:	f104 0164 	add.w	r1, r4, #100	@ 0x64
 8009106:	eef0 0a68 	vmov.f32	s1, s17
 800910a:	eeb0 0a49 	vmov.f32	s0, s18
 800910e:	2301      	movs	r3, #1
 8009110:	2204      	movs	r2, #4
 8009112:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8009116:	f7ff fdaf 	bl	8008c78 <get_profile_subsweeps_config.isra.0.constprop.0>
 800911a:	4601      	mov	r1, r0
 800911c:	e769      	b.n	8008ff2 <acc_detector_presence_translation_translate_config+0xca>
 800911e:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 8009122:	f002 fde9 	bl	800bcf8 <acc_detector_utils_get_max_profile_without_direct_leakage>
 8009126:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800912a:	4680      	mov	r8, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	f43f af70 	beq.w	8009012 <acc_detector_presence_translation_translate_config+0xea>
 8009132:	4640      	mov	r0, r8
 8009134:	f000 f808 	bl	8009148 <acc_detector_presence_alg_get_step_length>
 8009138:	4607      	mov	r7, r0
 800913a:	e76c      	b.n	8009016 <acc_detector_presence_translation_translate_config+0xee>
 800913c:	3b23d70a 	.word	0x3b23d70a
 8009140:	3727c5ac 	.word	0x3727c5ac
 8009144:	00000000 	.word	0x00000000

08009148 <acc_detector_presence_alg_get_step_length>:
 8009148:	3801      	subs	r0, #1
 800914a:	b2c0      	uxtb	r0, r0
 800914c:	2804      	cmp	r0, #4
 800914e:	bf9a      	itte	ls
 8009150:	4b02      	ldrls	r3, [pc, #8]	@ (800915c <acc_detector_presence_alg_get_step_length+0x14>)
 8009152:	f833 0010 	ldrhls.w	r0, [r3, r0, lsl #1]
 8009156:	2001      	movhi	r0, #1
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	08013150 	.word	0x08013150

08009160 <acc_detector_presence_alg_frame_abs_dev_accumulate>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	ed2d 8b10 	vpush	{d8-d15}
 8009168:	b097      	sub	sp, #92	@ 0x5c
 800916a:	f89d 40c4 	ldrb.w	r4, [sp, #196]	@ 0xc4
 800916e:	9107      	str	r1, [sp, #28]
 8009170:	9203      	str	r2, [sp, #12]
 8009172:	9408      	str	r4, [sp, #32]
 8009174:	2800      	cmp	r0, #0
 8009176:	f000 81c9 	beq.w	800950c <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3ac>
 800917a:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 800917c:	2c00      	cmp	r4, #0
 800917e:	f000 81c4 	beq.w	800950a <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3aa>
 8009182:	2900      	cmp	r1, #0
 8009184:	f000 81c1 	beq.w	800950a <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3aa>
 8009188:	2a05      	cmp	r2, #5
 800918a:	f240 81be 	bls.w	800950a <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3aa>
 800918e:	9903      	ldr	r1, [sp, #12]
 8009190:	1e4a      	subs	r2, r1, #1
 8009192:	fb12 f201 	smulbb	r2, r2, r1
 8009196:	b292      	uxth	r2, r2
 8009198:	ee07 2a90 	vmov	s15, r2
 800919c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a0:	1eca      	subs	r2, r1, #3
 80091a2:	eef1 6ae7 	vsqrt.f32	s13, s15
 80091a6:	b292      	uxth	r2, r2
 80091a8:	ee07 1a10 	vmov	s14, r1
 80091ac:	ee07 2a90 	vmov	s15, r2
 80091b0:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 80091b2:	eef8 ba47 	vcvt.f32.u32	s23, s14
 80091b6:	ed92 da04 	vldr	s26, [r2, #16]
 80091ba:	ed9f 7ae5 	vldr	s14, [pc, #916]	@ 8009550 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3f0>
 80091be:	edd2 da03 	vldr	s27, [r2, #12]
 80091c2:	ed92 aa02 	vldr	s20, [r2, #8]
 80091c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ca:	eeb7 ba00 	vmov.f32	s22, #112	@ 0x3f800000  1.0
 80091ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091d2:	ee3b 7a4d 	vsub.f32	s14, s22, s26
 80091d6:	eef1 5aeb 	vsqrt.f32	s11, s23
 80091da:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80091de:	ee3b 6a6d 	vsub.f32	s12, s22, s27
 80091e2:	ee3b ca4a 	vsub.f32	s24, s22, s20
 80091e6:	eec6 6a26 	vdiv.f32	s13, s12, s13
 80091ea:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 80091ee:	ee6c 7a25 	vmul.f32	s15, s24, s11
 80091f2:	edcd 5a0f 	vstr	s11, [sp, #60]	@ 0x3c
 80091f6:	edcd 6a0a 	vstr	s13, [sp, #40]	@ 0x28
 80091fa:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 819c 	beq.w	800953c <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3dc>
 8009204:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8009206:	ed9f 8ad3 	vldr	s16, [pc, #844]	@ 8009554 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3f4>
 800920a:	edd2 ea00 	vldr	s29, [r2]
 800920e:	ed92 ea01 	vldr	s28, [r2, #4]
 8009212:	eddf aad1 	vldr	s21, [pc, #836]	@ 8009558 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3f8>
 8009216:	ee7b 7a6e 	vsub.f32	s15, s22, s29
 800921a:	1e5a      	subs	r2, r3, #1
 800921c:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8009220:	ee7b 7a4e 	vsub.f32	s15, s22, s28
 8009224:	2100      	movs	r1, #0
 8009226:	b292      	uxth	r2, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	9104      	str	r1, [sp, #16]
 800922c:	edcd 7a0e 	vstr	s15, [sp, #56]	@ 0x38
 8009230:	920c      	str	r2, [sp, #48]	@ 0x30
 8009232:	9302      	str	r3, [sp, #8]
 8009234:	4681      	mov	r9, r0
 8009236:	9b07      	ldr	r3, [sp, #28]
 8009238:	9a04      	ldr	r2, [sp, #16]
 800923a:	f8cd 9018 	str.w	r9, [sp, #24]
 800923e:	2400      	movs	r4, #0
 8009240:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8009244:	462f      	mov	r7, r5
 8009246:	9505      	str	r5, [sp, #20]
 8009248:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
 800924c:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
 8009250:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
 8009254:	eddf 9abf 	vldr	s19, [pc, #764]	@ 8009554 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3f4>
 8009258:	4626      	mov	r6, r4
 800925a:	46a0      	mov	r8, r4
 800925c:	4620      	mov	r0, r4
 800925e:	4621      	mov	r1, r4
 8009260:	46a3      	mov	fp, r4
 8009262:	46a2      	mov	sl, r4
 8009264:	4625      	mov	r5, r4
 8009266:	46a1      	mov	r9, r4
 8009268:	e000      	b.n	800926c <acc_detector_presence_alg_frame_abs_dev_accumulate+0x10c>
 800926a:	4698      	mov	r8, r3
 800926c:	4632      	mov	r2, r6
 800926e:	f9b7 6000 	ldrsh.w	r6, [r7]
 8009272:	4623      	mov	r3, r4
 8009274:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8009278:	46ae      	mov	lr, r5
 800927a:	1ab5      	subs	r5, r6, r2
 800927c:	46cc      	mov	ip, r9
 800927e:	eba4 0903 	sub.w	r9, r4, r3
 8009282:	465b      	mov	r3, fp
 8009284:	eba5 0b0e 	sub.w	fp, r5, lr
 8009288:	4652      	mov	r2, sl
 800928a:	eba9 0a0c 	sub.w	sl, r9, ip
 800928e:	ebab 0c03 	sub.w	ip, fp, r3
 8009292:	9b02      	ldr	r3, [sp, #8]
 8009294:	f1b8 0f02 	cmp.w	r8, #2
 8009298:	4431      	add	r1, r6
 800929a:	ebaa 0202 	sub.w	r2, sl, r2
 800929e:	4420      	add	r0, r4
 80092a0:	441f      	add	r7, r3
 80092a2:	d913      	bls.n	80092cc <acc_detector_presence_alg_frame_abs_dev_accumulate+0x16c>
 80092a4:	ee07 2a90 	vmov	s15, r2
 80092a8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80092ac:	ee07 ca90 	vmov	s15, ip
 80092b0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80092b4:	ee60 7a88 	vmul.f32	s15, s1, s16
 80092b8:	e9cd 1000 	strd	r1, r0, [sp]
 80092bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80092c0:	f007 feaa 	bl	8011018 <cabsf>
 80092c4:	e9dd 1000 	ldrd	r1, r0, [sp]
 80092c8:	ee79 9a80 	vadd.f32	s19, s19, s0
 80092cc:	9a03      	ldr	r2, [sp, #12]
 80092ce:	f108 0301 	add.w	r3, r8, #1
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d1c8      	bne.n	800926a <acc_detector_presence_alg_frame_abs_dev_accumulate+0x10a>
 80092d8:	ee07 1a90 	vmov	s15, r1
 80092dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092e0:	ee07 0a90 	vmov	s15, r0
 80092e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092e8:	ee87 9a2b 	vdiv.f32	s18, s14, s23
 80092ec:	e9dd 5905 	ldrd	r5, r9, [sp, #20]
 80092f0:	9e02      	ldr	r6, [sp, #8]
 80092f2:	2400      	movs	r4, #0
 80092f4:	eec7 8aab 	vdiv.f32	s17, s15, s23
 80092f8:	eddf ca96 	vldr	s25, [pc, #600]	@ 8009554 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3f4>
 80092fc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8009300:	ee00 3a90 	vmov	s1, r3
 8009304:	f9b5 3000 	ldrsh.w	r3, [r5]
 8009308:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800930c:	ee07 3a90 	vmov	s15, r3
 8009310:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8009314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009318:	ee20 0a88 	vmul.f32	s0, s1, s16
 800931c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8009320:	4435      	add	r5, r6
 8009322:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009326:	f007 fe77 	bl	8011018 <cabsf>
 800932a:	4623      	mov	r3, r4
 800932c:	4598      	cmp	r8, r3
 800932e:	f104 0401 	add.w	r4, r4, #1
 8009332:	ee7c ca80 	vadd.f32	s25, s25, s0
 8009336:	b2a4      	uxth	r4, r4
 8009338:	d1e0      	bne.n	80092fc <acc_detector_presence_alg_frame_abs_dev_accumulate+0x19c>
 800933a:	ee68 5a88 	vmul.f32	s11, s17, s16
 800933e:	eef0 0a68 	vmov.f32	s1, s17
 8009342:	ee75 fa89 	vadd.f32	s31, s11, s18
 8009346:	eeb0 0a6f 	vmov.f32	s0, s31
 800934a:	f007 fe65 	bl	8011018 <cabsf>
 800934e:	ed99 6a00 	vldr	s12, [r9]
 8009352:	ed99 7a01 	vldr	s14, [r9, #4]
 8009356:	eddd 5a0e 	vldr	s11, [sp, #56]	@ 0x38
 800935a:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 800935e:	ed99 5a03 	vldr	s10, [r9, #12]
 8009362:	edd9 6a04 	vldr	s13, [r9, #16]
 8009366:	edd9 4a02 	vldr	s9, [r9, #8]
 800936a:	9b08      	ldr	r3, [sp, #32]
 800936c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009370:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8009374:	ee20 0a25 	vmul.f32	s0, s0, s11
 8009378:	ee2e 7a07 	vmul.f32	s14, s28, s14
 800937c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009380:	ee37 7a00 	vadd.f32	s14, s14, s0
 8009384:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8009388:	eddd 5a0b 	vldr	s11, [sp, #44]	@ 0x2c
 800938c:	ed89 6a00 	vstr	s12, [r9]
 8009390:	ee6c caa7 	vmul.f32	s25, s25, s15
 8009394:	ee76 7a47 	vsub.f32	s15, s12, s14
 8009398:	ee69 9aa5 	vmul.f32	s19, s19, s11
 800939c:	eddd 5a09 	vldr	s11, [sp, #36]	@ 0x24
 80093a0:	ed89 7a01 	vstr	s14, [r9, #4]
 80093a4:	eef0 7ae7 	vabs.f32	s15, s15
 80093a8:	ee2d 5a85 	vmul.f32	s10, s27, s10
 80093ac:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80093b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80093b4:	ee6a 4a24 	vmul.f32	s9, s20, s9
 80093b8:	ee75 ca2c 	vadd.f32	s25, s10, s25
 80093bc:	ee36 faa9 	vadd.f32	s30, s13, s19
 80093c0:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80093c4:	edc9 ca03 	vstr	s25, [r9, #12]
 80093c8:	ed89 fa04 	vstr	s30, [r9, #16]
 80093cc:	edc9 7a02 	vstr	s15, [r9, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80a0 	beq.w	8009516 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3b6>
 80093d6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 809f 	beq.w	800951c <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3bc>
 80093de:	edd9 ca06 	vldr	s25, [r9, #24]
 80093e2:	edd9 9a05 	vldr	s19, [r9, #20]
 80093e6:	ee2c 0a88 	vmul.f32	s0, s25, s16
 80093ea:	eef0 0a6c 	vmov.f32	s1, s25
 80093ee:	ee30 0a29 	vadd.f32	s0, s0, s19
 80093f2:	f007 fe30 	bl	8011056 <cargf>
 80093f6:	eef0 0a68 	vmov.f32	s1, s17
 80093fa:	eeb0 7a40 	vmov.f32	s14, s0
 80093fe:	eeb0 0a6f 	vmov.f32	s0, s31
 8009402:	ed8d 7a00 	vstr	s14, [sp]
 8009406:	f007 fe26 	bl	8011056 <cargf>
 800940a:	ed9d 7a00 	vldr	s14, [sp]
 800940e:	f04f 33ff 	mov.w	r3, #4294967295
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800941a:	3301      	adds	r3, #1
 800941c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009420:	b2da      	uxtb	r2, r3
 8009422:	ee67 7aaa 	vmul.f32	s15, s15, s21
 8009426:	b25b      	sxtb	r3, r3
 8009428:	ee77 7a80 	vadd.f32	s15, s15, s0
 800942c:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8009430:	eeb0 6ac6 	vabs.f32	s12, s12
 8009434:	eeb4 6aea 	vcmpe.f32	s12, s21
 8009438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943c:	f240 8084 	bls.w	8009548 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3e8>
 8009440:	2a02      	cmp	r2, #2
 8009442:	d1e6      	bne.n	8009412 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x2b2>
 8009444:	ee77 7a40 	vsub.f32	s15, s14, s0
 8009448:	ed99 6a07 	vldr	s12, [r9, #28]
 800944c:	ed99 5a09 	vldr	s10, [r9, #36]	@ 0x24
 8009450:	ed99 7a08 	vldr	s14, [r9, #32]
 8009454:	eef0 7ae7 	vabs.f32	s15, s15
 8009458:	ee6a 5a06 	vmul.f32	s11, s20, s12
 800945c:	ee67 7a8c 	vmul.f32	s15, s15, s24
 8009460:	ee2a 5a05 	vmul.f32	s10, s20, s10
 8009464:	ee2a 7a07 	vmul.f32	s14, s20, s14
 8009468:	ee29 6a0c 	vmul.f32	s12, s18, s24
 800946c:	ee68 0a8c 	vmul.f32	s1, s17, s24
 8009470:	ee77 7a85 	vadd.f32	s15, s15, s10
 8009474:	ee35 6a86 	vadd.f32	s12, s11, s12
 8009478:	ee77 0a20 	vadd.f32	s1, s14, s1
 800947c:	eeb4 facb 	vcmpe.f32	s30, s22
 8009480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009484:	edc9 7a09 	vstr	s15, [r9, #36]	@ 0x24
 8009488:	ed89 6a07 	vstr	s12, [r9, #28]
 800948c:	edc9 0a08 	vstr	s1, [r9, #32]
 8009490:	dd51      	ble.n	8009536 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3d6>
 8009492:	ee20 0a88 	vmul.f32	s0, s1, s16
 8009496:	edcd 7a00 	vstr	s15, [sp]
 800949a:	ee30 0a06 	vadd.f32	s0, s0, s12
 800949e:	f007 fdbb 	bl	8011018 <cabsf>
 80094a2:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 80094a6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80094aa:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 80094ae:	ee80 7a0f 	vdiv.f32	s14, s0, s30
 80094b2:	eeb4 7a67 	vcmp.f32	s14, s15
 80094b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ba:	bfc8      	it	gt
 80094bc:	eeb0 7a67 	vmovgt.f32	s14, s15
 80094c0:	eddd 7a00 	vldr	s15, [sp]
 80094c4:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80094c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094ca:	edc9 7a0a 	vstr	s15, [r9, #40]	@ 0x28
 80094ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80094d2:	ee3b 7a67 	vsub.f32	s14, s22, s15
 80094d6:	ee67 9aa9 	vmul.f32	s19, s15, s19
 80094da:	ee29 9a07 	vmul.f32	s18, s18, s14
 80094de:	ee67 7aac 	vmul.f32	s15, s15, s25
 80094e2:	ee68 8a87 	vmul.f32	s17, s17, s14
 80094e6:	ee39 9a89 	vadd.f32	s18, s19, s18
 80094ea:	ee77 8aa8 	vadd.f32	s17, s15, s17
 80094ee:	ed89 9a05 	vstr	s18, [r9, #20]
 80094f2:	edc9 8a06 	vstr	s17, [r9, #24]
 80094f6:	9a04      	ldr	r2, [sp, #16]
 80094f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80094fa:	4291      	cmp	r1, r2
 80094fc:	f109 092c 	add.w	r9, r9, #44	@ 0x2c
 8009500:	f102 0301 	add.w	r3, r2, #1
 8009504:	d01a      	beq.n	800953c <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3dc>
 8009506:	9304      	str	r3, [sp, #16]
 8009508:	e695      	b.n	8009236 <acc_detector_presence_alg_frame_abs_dev_accumulate+0xd6>
 800950a:	2000      	movs	r0, #0
 800950c:	b017      	add	sp, #92	@ 0x5c
 800950e:	ecbd 8b10 	vpop	{d8-d15}
 8009512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009516:	ed89 ba0a 	vstr	s22, [r9, #40]	@ 0x28
 800951a:	e7ec      	b.n	80094f6 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x396>
 800951c:	eeb0 0a6f 	vmov.f32	s0, s31
 8009520:	eef0 0a68 	vmov.f32	s1, s17
 8009524:	eef0 9a49 	vmov.f32	s19, s18
 8009528:	eef0 ca68 	vmov.f32	s25, s17
 800952c:	ed89 9a05 	vstr	s18, [r9, #20]
 8009530:	edc9 8a06 	vstr	s17, [r9, #24]
 8009534:	e75d      	b.n	80093f2 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x292>
 8009536:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8009554 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x3f4>
 800953a:	e7c3      	b.n	80094c4 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x364>
 800953c:	2001      	movs	r0, #1
 800953e:	b017      	add	sp, #92	@ 0x5c
 8009540:	ecbd 8b10 	vpop	{d8-d15}
 8009544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009548:	eeb0 0a67 	vmov.f32	s0, s15
 800954c:	e77a      	b.n	8009444 <acc_detector_presence_alg_frame_abs_dev_accumulate+0x2e4>
 800954e:	bf00      	nop
 8009550:	408f1bbd 	.word	0x408f1bbd
 8009554:	00000000 	.word	0x00000000
 8009558:	40490fdb 	.word	0x40490fdb

0800955c <acc_detector_presence_alg_frame_abs_dev_to_noise_ratio>:
 800955c:	b3d9      	cbz	r1, 80095d6 <acc_detector_presence_alg_frame_abs_dev_to_noise_ratio+0x7a>
 800955e:	3901      	subs	r1, #1
 8009560:	b4f0      	push	{r4, r5, r6, r7}
 8009562:	b289      	uxth	r1, r1
 8009564:	1d1f      	adds	r7, r3, #4
 8009566:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80095dc <acc_detector_presence_alg_frame_abs_dev_to_noise_ratio+0x80>
 800956a:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 800956e:	461d      	mov	r5, r3
 8009570:	4601      	mov	r1, r0
 8009572:	4616      	mov	r6, r2
 8009574:	461c      	mov	r4, r3
 8009576:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800957a:	ed91 7a04 	vldr	s14, [r1, #16]
 800957e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8009582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009586:	bfcc      	ite	gt
 8009588:	eec6 6a07 	vdivgt.f32	s13, s12, s14
 800958c:	eef0 6a65 	vmovle.f32	s13, s11
 8009590:	b12a      	cbz	r2, 800959e <acc_detector_presence_alg_frame_abs_dev_to_noise_ratio+0x42>
 8009592:	ed91 7a03 	vldr	s14, [r1, #12]
 8009596:	ee27 7a26 	vmul.f32	s14, s14, s13
 800959a:	ed86 7a00 	vstr	s14, [r6]
 800959e:	3604      	adds	r6, #4
 80095a0:	b12b      	cbz	r3, 80095ae <acc_detector_presence_alg_frame_abs_dev_to_noise_ratio+0x52>
 80095a2:	edd1 7a02 	vldr	s15, [r1, #8]
 80095a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80095aa:	edc4 7a00 	vstr	s15, [r4]
 80095ae:	3404      	adds	r4, #4
 80095b0:	42bc      	cmp	r4, r7
 80095b2:	f101 012c 	add.w	r1, r1, #44	@ 0x2c
 80095b6:	d1e0      	bne.n	800957a <acc_detector_presence_alg_frame_abs_dev_to_noise_ratio+0x1e>
 80095b8:	b153      	cbz	r3, 80095d0 <acc_detector_presence_alg_frame_abs_dev_to_noise_ratio+0x74>
 80095ba:	edd0 7a0a 	vldr	s15, [r0, #40]	@ 0x28
 80095be:	ed95 7a00 	vldr	s14, [r5]
 80095c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095c6:	302c      	adds	r0, #44	@ 0x2c
 80095c8:	ece5 7a01 	vstmia	r5!, {s15}
 80095cc:	42bd      	cmp	r5, r7
 80095ce:	d1f4      	bne.n	80095ba <acc_detector_presence_alg_frame_abs_dev_to_noise_ratio+0x5e>
 80095d0:	2001      	movs	r0, #1
 80095d2:	bcf0      	pop	{r4, r5, r6, r7}
 80095d4:	4770      	bx	lr
 80095d6:	2001      	movs	r0, #1
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	00000000 	.word	0x00000000

080095e0 <acc_rss_hal_register>:
 80095e0:	b108      	cbz	r0, 80095e6 <acc_rss_hal_register+0x6>
 80095e2:	f002 bc8d 	b.w	800bf00 <acc_rss_integration_register_a121>
 80095e6:	4770      	bx	lr

080095e8 <acc_rss_get_buffer_size>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	460c      	mov	r4, r1
 80095ec:	f000 fbe2 	bl	8009db4 <acc_config_get_settings>
 80095f0:	b158      	cbz	r0, 800960a <acc_rss_get_buffer_size+0x22>
 80095f2:	b124      	cbz	r4, 80095fe <acc_rss_get_buffer_size+0x16>
 80095f4:	4621      	mov	r1, r4
 80095f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095fa:	f002 bd63 	b.w	800c0c4 <acc_pipeline_get_buffer_size>
 80095fe:	4b04      	ldr	r3, [pc, #16]	@ (8009610 <acc_rss_get_buffer_size+0x28>)
 8009600:	4a04      	ldr	r2, [pc, #16]	@ (8009614 <acc_rss_get_buffer_size+0x2c>)
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	4904      	ldr	r1, [pc, #16]	@ (8009618 <acc_rss_get_buffer_size+0x30>)
 8009606:	4620      	mov	r0, r4
 8009608:	4798      	blx	r3
 800960a:	2000      	movs	r0, #0
 800960c:	bd10      	pop	{r4, pc}
 800960e:	bf00      	nop
 8009610:	2000069c 	.word	0x2000069c
 8009614:	0801315c 	.word	0x0801315c
 8009618:	08013178 	.word	0x08013178

0800961c <acc_config_subsweep_validate.part.0>:
 800961c:	b508      	push	{r3, lr}
 800961e:	4b04      	ldr	r3, [pc, #16]	@ (8009630 <acc_config_subsweep_validate.part.0+0x14>)
 8009620:	4a04      	ldr	r2, [pc, #16]	@ (8009634 <acc_config_subsweep_validate.part.0+0x18>)
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	4904      	ldr	r1, [pc, #16]	@ (8009638 <acc_config_subsweep_validate.part.0+0x1c>)
 8009626:	2000      	movs	r0, #0
 8009628:	4798      	blx	r3
 800962a:	2000      	movs	r0, #0
 800962c:	bd08      	pop	{r3, pc}
 800962e:	bf00      	nop
 8009630:	2000069c 	.word	0x2000069c
 8009634:	08013184 	.word	0x08013184
 8009638:	0801319c 	.word	0x0801319c

0800963c <acc_config_log>:
 800963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	b082      	sub	sp, #8
 8009642:	b120      	cbz	r0, 800964e <acc_config_log+0x12>
 8009644:	4bbf      	ldr	r3, [pc, #764]	@ (8009944 <acc_config_log+0x308>)
 8009646:	6802      	ldr	r2, [r0, #0]
 8009648:	429a      	cmp	r2, r3
 800964a:	4604      	mov	r4, r0
 800964c:	d008      	beq.n	8009660 <acc_config_log+0x24>
 800964e:	4bbe      	ldr	r3, [pc, #760]	@ (8009948 <acc_config_log+0x30c>)
 8009650:	4abe      	ldr	r2, [pc, #760]	@ (800994c <acc_config_log+0x310>)
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	49be      	ldr	r1, [pc, #760]	@ (8009950 <acc_config_log+0x314>)
 8009656:	2000      	movs	r0, #0
 8009658:	b002      	add	sp, #8
 800965a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800965e:	4718      	bx	r3
 8009660:	f002 fd0a 	bl	800c078 <acc_rss_integration_log_level>
 8009664:	2801      	cmp	r0, #1
 8009666:	d935      	bls.n	80096d4 <acc_config_log+0x98>
 8009668:	edd4 7a11 	vldr	s15, [r4, #68]	@ 0x44
 800966c:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8009954 <acc_config_log+0x318>
 8009670:	4bb5      	ldr	r3, [pc, #724]	@ (8009948 <acc_config_log+0x30c>)
 8009672:	ed9f 6ab8 	vldr	s12, [pc, #736]	@ 8009954 <acc_config_log+0x318>
 8009676:	691d      	ldr	r5, [r3, #16]
 8009678:	eddf 6ab7 	vldr	s13, [pc, #732]	@ 8009958 <acc_config_log+0x31c>
 800967c:	49b4      	ldr	r1, [pc, #720]	@ (8009950 <acc_config_log+0x314>)
 800967e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009686:	bf48      	it	mi
 8009688:	eef1 7a67 	vnegmi.f32	s15, s15
 800968c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009690:	bf4c      	ite	mi
 8009692:	4bb2      	ldrmi	r3, [pc, #712]	@ (800995c <acc_config_log+0x320>)
 8009694:	4bb2      	ldrpl	r3, [pc, #712]	@ (8009960 <acc_config_log+0x324>)
 8009696:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800969a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800969e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a2:	ee17 2a10 	vmov	r2, s14
 80096a6:	bf4c      	ite	mi
 80096a8:	eeb1 7a67 	vnegmi.f32	s14, s15
 80096ac:	eeb0 7a67 	vmovpl.f32	s14, s15
 80096b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80096b4:	9200      	str	r2, [sp, #0]
 80096b6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80096ba:	4aaa      	ldr	r2, [pc, #680]	@ (8009964 <acc_config_log+0x328>)
 80096bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80096c0:	2002      	movs	r0, #2
 80096c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80096c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80096ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ce:	edcd 7a01 	vstr	s15, [sp, #4]
 80096d2:	47a8      	blx	r5
 80096d4:	f002 fcd0 	bl	800c078 <acc_rss_integration_log_level>
 80096d8:	2801      	cmp	r0, #1
 80096da:	d935      	bls.n	8009748 <acc_config_log+0x10c>
 80096dc:	edd4 7a12 	vldr	s15, [r4, #72]	@ 0x48
 80096e0:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8009954 <acc_config_log+0x318>
 80096e4:	4b98      	ldr	r3, [pc, #608]	@ (8009948 <acc_config_log+0x30c>)
 80096e6:	ed9f 6a9b 	vldr	s12, [pc, #620]	@ 8009954 <acc_config_log+0x318>
 80096ea:	691d      	ldr	r5, [r3, #16]
 80096ec:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8009958 <acc_config_log+0x31c>
 80096f0:	4997      	ldr	r1, [pc, #604]	@ (8009950 <acc_config_log+0x314>)
 80096f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80096f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fa:	bf48      	it	mi
 80096fc:	eef1 7a67 	vnegmi.f32	s15, s15
 8009700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009704:	bf4c      	ite	mi
 8009706:	4b95      	ldrmi	r3, [pc, #596]	@ (800995c <acc_config_log+0x320>)
 8009708:	4b95      	ldrpl	r3, [pc, #596]	@ (8009960 <acc_config_log+0x324>)
 800970a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800970e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009716:	ee17 2a10 	vmov	r2, s14
 800971a:	bf4c      	ite	mi
 800971c:	eeb1 7a67 	vnegmi.f32	s14, s15
 8009720:	eeb0 7a67 	vmovpl.f32	s14, s15
 8009724:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009728:	9200      	str	r2, [sp, #0]
 800972a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800972e:	4a8e      	ldr	r2, [pc, #568]	@ (8009968 <acc_config_log+0x32c>)
 8009730:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009734:	2002      	movs	r0, #2
 8009736:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800973a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800973e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009742:	edcd 7a01 	vstr	s15, [sp, #4]
 8009746:	47a8      	blx	r5
 8009748:	f002 fc96 	bl	800c078 <acc_rss_integration_log_level>
 800974c:	2801      	cmp	r0, #1
 800974e:	d907      	bls.n	8009760 <acc_config_log+0x124>
 8009750:	4a7d      	ldr	r2, [pc, #500]	@ (8009948 <acc_config_log+0x30c>)
 8009752:	f8b4 304c 	ldrh.w	r3, [r4, #76]	@ 0x4c
 8009756:	6915      	ldr	r5, [r2, #16]
 8009758:	497d      	ldr	r1, [pc, #500]	@ (8009950 <acc_config_log+0x314>)
 800975a:	4a84      	ldr	r2, [pc, #528]	@ (800996c <acc_config_log+0x330>)
 800975c:	2002      	movs	r0, #2
 800975e:	47a8      	blx	r5
 8009760:	f002 fc8a 	bl	800c078 <acc_rss_integration_log_level>
 8009764:	2801      	cmp	r0, #1
 8009766:	f200 80e0 	bhi.w	800992a <acc_config_log+0x2ee>
 800976a:	f002 fc85 	bl	800c078 <acc_rss_integration_log_level>
 800976e:	2801      	cmp	r0, #1
 8009770:	f200 80c3 	bhi.w	80098fa <acc_config_log+0x2be>
 8009774:	f002 fc80 	bl	800c078 <acc_rss_integration_log_level>
 8009778:	2801      	cmp	r0, #1
 800977a:	f200 80b2 	bhi.w	80098e2 <acc_config_log+0x2a6>
 800977e:	f002 fc7b 	bl	800c078 <acc_rss_integration_log_level>
 8009782:	2801      	cmp	r0, #1
 8009784:	f200 80c5 	bhi.w	8009912 <acc_config_log+0x2d6>
 8009788:	f002 fc76 	bl	800c078 <acc_rss_integration_log_level>
 800978c:	2801      	cmp	r0, #1
 800978e:	d907      	bls.n	80097a0 <acc_config_log+0x164>
 8009790:	4a6d      	ldr	r2, [pc, #436]	@ (8009948 <acc_config_log+0x30c>)
 8009792:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 8009796:	6915      	ldr	r5, [r2, #16]
 8009798:	496d      	ldr	r1, [pc, #436]	@ (8009950 <acc_config_log+0x314>)
 800979a:	4a75      	ldr	r2, [pc, #468]	@ (8009970 <acc_config_log+0x334>)
 800979c:	2002      	movs	r0, #2
 800979e:	47a8      	blx	r5
 80097a0:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 8099 	beq.w	80098dc <acc_config_log+0x2a0>
 80097aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009948 <acc_config_log+0x30c>
 80097ae:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 80099ac <acc_config_log+0x370>
 80097b2:	4e67      	ldr	r6, [pc, #412]	@ (8009950 <acc_config_log+0x314>)
 80097b4:	4625      	mov	r5, r4
 80097b6:	f04f 0900 	mov.w	r9, #0
 80097ba:	f002 fc5d 	bl	800c078 <acc_rss_integration_log_level>
 80097be:	2801      	cmp	r0, #1
 80097c0:	d906      	bls.n	80097d0 <acc_config_log+0x194>
 80097c2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80097c6:	464b      	mov	r3, r9
 80097c8:	4652      	mov	r2, sl
 80097ca:	4631      	mov	r1, r6
 80097cc:	2002      	movs	r0, #2
 80097ce:	47b8      	blx	r7
 80097d0:	f002 fc52 	bl	800c078 <acc_rss_integration_log_level>
 80097d4:	2801      	cmp	r0, #1
 80097d6:	d906      	bls.n	80097e6 <acc_config_log+0x1aa>
 80097d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80097dc:	686b      	ldr	r3, [r5, #4]
 80097de:	4a65      	ldr	r2, [pc, #404]	@ (8009974 <acc_config_log+0x338>)
 80097e0:	4631      	mov	r1, r6
 80097e2:	2002      	movs	r0, #2
 80097e4:	47b8      	blx	r7
 80097e6:	f002 fc47 	bl	800c078 <acc_rss_integration_log_level>
 80097ea:	2801      	cmp	r0, #1
 80097ec:	d906      	bls.n	80097fc <acc_config_log+0x1c0>
 80097ee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80097f2:	892b      	ldrh	r3, [r5, #8]
 80097f4:	4a60      	ldr	r2, [pc, #384]	@ (8009978 <acc_config_log+0x33c>)
 80097f6:	4631      	mov	r1, r6
 80097f8:	2002      	movs	r0, #2
 80097fa:	47b8      	blx	r7
 80097fc:	f002 fc3c 	bl	800c078 <acc_rss_integration_log_level>
 8009800:	2801      	cmp	r0, #1
 8009802:	d906      	bls.n	8009812 <acc_config_log+0x1d6>
 8009804:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009808:	896b      	ldrh	r3, [r5, #10]
 800980a:	4a5c      	ldr	r2, [pc, #368]	@ (800997c <acc_config_log+0x340>)
 800980c:	4631      	mov	r1, r6
 800980e:	2002      	movs	r0, #2
 8009810:	47b8      	blx	r7
 8009812:	f002 fc31 	bl	800c078 <acc_rss_integration_log_level>
 8009816:	2801      	cmp	r0, #1
 8009818:	d906      	bls.n	8009828 <acc_config_log+0x1ec>
 800981a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800981e:	89ab      	ldrh	r3, [r5, #12]
 8009820:	4a57      	ldr	r2, [pc, #348]	@ (8009980 <acc_config_log+0x344>)
 8009822:	4631      	mov	r1, r6
 8009824:	2002      	movs	r0, #2
 8009826:	47b8      	blx	r7
 8009828:	f002 fc26 	bl	800c078 <acc_rss_integration_log_level>
 800982c:	2801      	cmp	r0, #1
 800982e:	d906      	bls.n	800983e <acc_config_log+0x202>
 8009830:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009834:	7bab      	ldrb	r3, [r5, #14]
 8009836:	4a53      	ldr	r2, [pc, #332]	@ (8009984 <acc_config_log+0x348>)
 8009838:	4631      	mov	r1, r6
 800983a:	2002      	movs	r0, #2
 800983c:	47b8      	blx	r7
 800983e:	f002 fc1b 	bl	800c078 <acc_rss_integration_log_level>
 8009842:	2801      	cmp	r0, #1
 8009844:	d909      	bls.n	800985a <acc_config_log+0x21e>
 8009846:	7be8      	ldrb	r0, [r5, #15]
 8009848:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800984c:	f004 fd76 	bl	800e33c <acc_utils_bool_to_str>
 8009850:	4a4d      	ldr	r2, [pc, #308]	@ (8009988 <acc_config_log+0x34c>)
 8009852:	4603      	mov	r3, r0
 8009854:	4631      	mov	r1, r6
 8009856:	2002      	movs	r0, #2
 8009858:	47b8      	blx	r7
 800985a:	f002 fc0d 	bl	800c078 <acc_rss_integration_log_level>
 800985e:	2801      	cmp	r0, #1
 8009860:	d909      	bls.n	8009876 <acc_config_log+0x23a>
 8009862:	7c28      	ldrb	r0, [r5, #16]
 8009864:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009868:	f004 fd68 	bl	800e33c <acc_utils_bool_to_str>
 800986c:	4a47      	ldr	r2, [pc, #284]	@ (800998c <acc_config_log+0x350>)
 800986e:	4603      	mov	r3, r0
 8009870:	4631      	mov	r1, r6
 8009872:	2002      	movs	r0, #2
 8009874:	47b8      	blx	r7
 8009876:	f002 fbff 	bl	800c078 <acc_rss_integration_log_level>
 800987a:	2801      	cmp	r0, #1
 800987c:	d909      	bls.n	8009892 <acc_config_log+0x256>
 800987e:	7c68      	ldrb	r0, [r5, #17]
 8009880:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009884:	f004 fd5a 	bl	800e33c <acc_utils_bool_to_str>
 8009888:	4a41      	ldr	r2, [pc, #260]	@ (8009990 <acc_config_log+0x354>)
 800988a:	4603      	mov	r3, r0
 800988c:	4631      	mov	r1, r6
 800988e:	2002      	movs	r0, #2
 8009890:	47b8      	blx	r7
 8009892:	f002 fbf1 	bl	800c078 <acc_rss_integration_log_level>
 8009896:	2801      	cmp	r0, #1
 8009898:	d909      	bls.n	80098ae <acc_config_log+0x272>
 800989a:	7ce8      	ldrb	r0, [r5, #19]
 800989c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098a0:	f004 fd64 	bl	800e36c <acc_utils_profile_to_str>
 80098a4:	4a3b      	ldr	r2, [pc, #236]	@ (8009994 <acc_config_log+0x358>)
 80098a6:	4603      	mov	r3, r0
 80098a8:	4631      	mov	r1, r6
 80098aa:	2002      	movs	r0, #2
 80098ac:	47b8      	blx	r7
 80098ae:	f002 fbe3 	bl	800c078 <acc_rss_integration_log_level>
 80098b2:	2801      	cmp	r0, #1
 80098b4:	d909      	bls.n	80098ca <acc_config_log+0x28e>
 80098b6:	7ca8      	ldrb	r0, [r5, #18]
 80098b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098bc:	f004 fd64 	bl	800e388 <acc_utils_prf_to_str>
 80098c0:	4a35      	ldr	r2, [pc, #212]	@ (8009998 <acc_config_log+0x35c>)
 80098c2:	4603      	mov	r3, r0
 80098c4:	4631      	mov	r1, r6
 80098c6:	2002      	movs	r0, #2
 80098c8:	47b8      	blx	r7
 80098ca:	f894 3052 	ldrb.w	r3, [r4, #82]	@ 0x52
 80098ce:	f109 0901 	add.w	r9, r9, #1
 80098d2:	4599      	cmp	r9, r3
 80098d4:	f105 0510 	add.w	r5, r5, #16
 80098d8:	f4ff af6f 	bcc.w	80097ba <acc_config_log+0x17e>
 80098dc:	b002      	add	sp, #8
 80098de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e2:	4b19      	ldr	r3, [pc, #100]	@ (8009948 <acc_config_log+0x30c>)
 80098e4:	f894 0053 	ldrb.w	r0, [r4, #83]	@ 0x53
 80098e8:	691d      	ldr	r5, [r3, #16]
 80098ea:	f004 fd33 	bl	800e354 <acc_utils_idle_state_to_str>
 80098ee:	4a2b      	ldr	r2, [pc, #172]	@ (800999c <acc_config_log+0x360>)
 80098f0:	4917      	ldr	r1, [pc, #92]	@ (8009950 <acc_config_log+0x314>)
 80098f2:	4603      	mov	r3, r0
 80098f4:	2002      	movs	r0, #2
 80098f6:	47a8      	blx	r5
 80098f8:	e741      	b.n	800977e <acc_config_log+0x142>
 80098fa:	4b13      	ldr	r3, [pc, #76]	@ (8009948 <acc_config_log+0x30c>)
 80098fc:	f894 004f 	ldrb.w	r0, [r4, #79]	@ 0x4f
 8009900:	691d      	ldr	r5, [r3, #16]
 8009902:	f004 fd1b 	bl	800e33c <acc_utils_bool_to_str>
 8009906:	4a26      	ldr	r2, [pc, #152]	@ (80099a0 <acc_config_log+0x364>)
 8009908:	4911      	ldr	r1, [pc, #68]	@ (8009950 <acc_config_log+0x314>)
 800990a:	4603      	mov	r3, r0
 800990c:	2002      	movs	r0, #2
 800990e:	47a8      	blx	r5
 8009910:	e730      	b.n	8009774 <acc_config_log+0x138>
 8009912:	4b0d      	ldr	r3, [pc, #52]	@ (8009948 <acc_config_log+0x30c>)
 8009914:	f894 0054 	ldrb.w	r0, [r4, #84]	@ 0x54
 8009918:	691d      	ldr	r5, [r3, #16]
 800991a:	f004 fd1b 	bl	800e354 <acc_utils_idle_state_to_str>
 800991e:	4a21      	ldr	r2, [pc, #132]	@ (80099a4 <acc_config_log+0x368>)
 8009920:	490b      	ldr	r1, [pc, #44]	@ (8009950 <acc_config_log+0x314>)
 8009922:	4603      	mov	r3, r0
 8009924:	2002      	movs	r0, #2
 8009926:	47a8      	blx	r5
 8009928:	e72e      	b.n	8009788 <acc_config_log+0x14c>
 800992a:	4b07      	ldr	r3, [pc, #28]	@ (8009948 <acc_config_log+0x30c>)
 800992c:	f894 004e 	ldrb.w	r0, [r4, #78]	@ 0x4e
 8009930:	691d      	ldr	r5, [r3, #16]
 8009932:	f004 fd03 	bl	800e33c <acc_utils_bool_to_str>
 8009936:	4a1c      	ldr	r2, [pc, #112]	@ (80099a8 <acc_config_log+0x36c>)
 8009938:	4905      	ldr	r1, [pc, #20]	@ (8009950 <acc_config_log+0x314>)
 800993a:	4603      	mov	r3, r0
 800993c:	2002      	movs	r0, #2
 800993e:	47a8      	blx	r5
 8009940:	e713      	b.n	800976a <acc_config_log+0x12e>
 8009942:	bf00      	nop
 8009944:	1337b00f 	.word	0x1337b00f
 8009948:	2000069c 	.word	0x2000069c
 800994c:	08013348 	.word	0x08013348
 8009950:	0801319c 	.word	0x0801319c
 8009954:	350637bd 	.word	0x350637bd
 8009958:	49742400 	.word	0x49742400
 800995c:	08012bc4 	.word	0x08012bc4
 8009960:	08013be0 	.word	0x08013be0
 8009964:	080131a4 	.word	0x080131a4
 8009968:	08012cc4 	.word	0x08012cc4
 800996c:	08012c84 	.word	0x08012c84
 8009970:	0801320c 	.word	0x0801320c
 8009974:	08013230 	.word	0x08013230
 8009978:	0801324c 	.word	0x0801324c
 800997c:	08013268 	.word	0x08013268
 8009980:	08013284 	.word	0x08013284
 8009984:	080132a0 	.word	0x080132a0
 8009988:	080132bc 	.word	0x080132bc
 800998c:	080132d8 	.word	0x080132d8
 8009990:	080132f4 	.word	0x080132f4
 8009994:	08013310 	.word	0x08013310
 8009998:	0801332c 	.word	0x0801332c
 800999c:	08012ca8 	.word	0x08012ca8
 80099a0:	080131d8 	.word	0x080131d8
 80099a4:	080131f0 	.word	0x080131f0
 80099a8:	080131bc 	.word	0x080131bc
 80099ac:	08013220 	.word	0x08013220

080099b0 <acc_config_create>:
 80099b0:	b510      	push	{r4, lr}
 80099b2:	4a08      	ldr	r2, [pc, #32]	@ (80099d4 <acc_config_create+0x24>)
 80099b4:	2356      	movs	r3, #86	@ 0x56
 80099b6:	215c      	movs	r1, #92	@ 0x5c
 80099b8:	2001      	movs	r0, #1
 80099ba:	f002 fb2d 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 80099be:	4604      	mov	r4, r0
 80099c0:	b130      	cbz	r0, 80099d0 <acc_config_create+0x20>
 80099c2:	4b05      	ldr	r3, [pc, #20]	@ (80099d8 <acc_config_create+0x28>)
 80099c4:	f840 3b04 	str.w	r3, [r0], #4
 80099c8:	4904      	ldr	r1, [pc, #16]	@ (80099dc <acc_config_create+0x2c>)
 80099ca:	2258      	movs	r2, #88	@ 0x58
 80099cc:	f006 fab5 	bl	800ff3a <memcpy>
 80099d0:	4620      	mov	r0, r4
 80099d2:	bd10      	pop	{r4, pc}
 80099d4:	0801319c 	.word	0x0801319c
 80099d8:	1337b00f 	.word	0x1337b00f
 80099dc:	08013360 	.word	0x08013360

080099e0 <acc_config_destroy>:
 80099e0:	b118      	cbz	r0, 80099ea <acc_config_destroy+0xa>
 80099e2:	4a07      	ldr	r2, [pc, #28]	@ (8009a00 <acc_config_destroy+0x20>)
 80099e4:	6801      	ldr	r1, [r0, #0]
 80099e6:	4291      	cmp	r1, r2
 80099e8:	d005      	beq.n	80099f6 <acc_config_destroy+0x16>
 80099ea:	4b06      	ldr	r3, [pc, #24]	@ (8009a04 <acc_config_destroy+0x24>)
 80099ec:	4a06      	ldr	r2, [pc, #24]	@ (8009a08 <acc_config_destroy+0x28>)
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	4906      	ldr	r1, [pc, #24]	@ (8009a0c <acc_config_destroy+0x2c>)
 80099f2:	2000      	movs	r0, #0
 80099f4:	4718      	bx	r3
 80099f6:	2200      	movs	r2, #0
 80099f8:	6002      	str	r2, [r0, #0]
 80099fa:	f002 bb29 	b.w	800c050 <acc_rss_integration_mem_free>
 80099fe:	bf00      	nop
 8009a00:	1337b00f 	.word	0x1337b00f
 8009a04:	2000069c 	.word	0x2000069c
 8009a08:	08013348 	.word	0x08013348
 8009a0c:	0801319c 	.word	0x0801319c

08009a10 <acc_config_num_subsweeps_set>:
 8009a10:	b118      	cbz	r0, 8009a1a <acc_config_num_subsweeps_set+0xa>
 8009a12:	4b06      	ldr	r3, [pc, #24]	@ (8009a2c <acc_config_num_subsweeps_set+0x1c>)
 8009a14:	6802      	ldr	r2, [r0, #0]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d005      	beq.n	8009a26 <acc_config_num_subsweeps_set+0x16>
 8009a1a:	4b05      	ldr	r3, [pc, #20]	@ (8009a30 <acc_config_num_subsweeps_set+0x20>)
 8009a1c:	4a05      	ldr	r2, [pc, #20]	@ (8009a34 <acc_config_num_subsweeps_set+0x24>)
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	4905      	ldr	r1, [pc, #20]	@ (8009a38 <acc_config_num_subsweeps_set+0x28>)
 8009a22:	2000      	movs	r0, #0
 8009a24:	4718      	bx	r3
 8009a26:	f880 1052 	strb.w	r1, [r0, #82]	@ 0x52
 8009a2a:	4770      	bx	lr
 8009a2c:	1337b00f 	.word	0x1337b00f
 8009a30:	2000069c 	.word	0x2000069c
 8009a34:	08013348 	.word	0x08013348
 8009a38:	0801319c 	.word	0x0801319c

08009a3c <acc_config_num_subsweeps_get>:
 8009a3c:	b508      	push	{r3, lr}
 8009a3e:	b118      	cbz	r0, 8009a48 <acc_config_num_subsweeps_get+0xc>
 8009a40:	4b07      	ldr	r3, [pc, #28]	@ (8009a60 <acc_config_num_subsweeps_get+0x24>)
 8009a42:	6802      	ldr	r2, [r0, #0]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d007      	beq.n	8009a58 <acc_config_num_subsweeps_get+0x1c>
 8009a48:	4b06      	ldr	r3, [pc, #24]	@ (8009a64 <acc_config_num_subsweeps_get+0x28>)
 8009a4a:	4a07      	ldr	r2, [pc, #28]	@ (8009a68 <acc_config_num_subsweeps_get+0x2c>)
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	4907      	ldr	r1, [pc, #28]	@ (8009a6c <acc_config_num_subsweeps_get+0x30>)
 8009a50:	2000      	movs	r0, #0
 8009a52:	4798      	blx	r3
 8009a54:	2001      	movs	r0, #1
 8009a56:	bd08      	pop	{r3, pc}
 8009a58:	f890 0052 	ldrb.w	r0, [r0, #82]	@ 0x52
 8009a5c:	bd08      	pop	{r3, pc}
 8009a5e:	bf00      	nop
 8009a60:	1337b00f 	.word	0x1337b00f
 8009a64:	2000069c 	.word	0x2000069c
 8009a68:	08013348 	.word	0x08013348
 8009a6c:	0801319c 	.word	0x0801319c

08009a70 <acc_config_subsweep_start_point_set>:
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	b120      	cbz	r0, 8009a7e <acc_config_subsweep_start_point_set+0xe>
 8009a74:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa4 <acc_config_subsweep_start_point_set+0x34>)
 8009a76:	4604      	mov	r4, r0
 8009a78:	6800      	ldr	r0, [r0, #0]
 8009a7a:	4298      	cmp	r0, r3
 8009a7c:	d007      	beq.n	8009a8e <acc_config_subsweep_start_point_set+0x1e>
 8009a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8009aa8 <acc_config_subsweep_start_point_set+0x38>)
 8009a80:	4a0a      	ldr	r2, [pc, #40]	@ (8009aac <acc_config_subsweep_start_point_set+0x3c>)
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	490a      	ldr	r1, [pc, #40]	@ (8009ab0 <acc_config_subsweep_start_point_set+0x40>)
 8009a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	4718      	bx	r3
 8009a8e:	2a03      	cmp	r2, #3
 8009a90:	460d      	mov	r5, r1
 8009a92:	4616      	mov	r6, r2
 8009a94:	d902      	bls.n	8009a9c <acc_config_subsweep_start_point_set+0x2c>
 8009a96:	f7ff fdc1 	bl	800961c <acc_config_subsweep_validate.part.0>
 8009a9a:	b110      	cbz	r0, 8009aa2 <acc_config_subsweep_start_point_set+0x32>
 8009a9c:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009aa0:	6065      	str	r5, [r4, #4]
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}
 8009aa4:	1337b00f 	.word	0x1337b00f
 8009aa8:	2000069c 	.word	0x2000069c
 8009aac:	08013348 	.word	0x08013348
 8009ab0:	0801319c 	.word	0x0801319c

08009ab4 <acc_config_subsweep_start_point_get>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	b120      	cbz	r0, 8009ac2 <acc_config_subsweep_start_point_get+0xe>
 8009ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8009ae8 <acc_config_subsweep_start_point_get+0x34>)
 8009aba:	6802      	ldr	r2, [r0, #0]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	4604      	mov	r4, r0
 8009ac0:	d007      	beq.n	8009ad2 <acc_config_subsweep_start_point_get+0x1e>
 8009ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8009aec <acc_config_subsweep_start_point_get+0x38>)
 8009ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8009af0 <acc_config_subsweep_start_point_get+0x3c>)
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	490a      	ldr	r1, [pc, #40]	@ (8009af4 <acc_config_subsweep_start_point_get+0x40>)
 8009aca:	2000      	movs	r0, #0
 8009acc:	4798      	blx	r3
 8009ace:	2000      	movs	r0, #0
 8009ad0:	bd38      	pop	{r3, r4, r5, pc}
 8009ad2:	2903      	cmp	r1, #3
 8009ad4:	460d      	mov	r5, r1
 8009ad6:	d903      	bls.n	8009ae0 <acc_config_subsweep_start_point_get+0x2c>
 8009ad8:	f7ff fda0 	bl	800961c <acc_config_subsweep_validate.part.0>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d0f7      	beq.n	8009ad0 <acc_config_subsweep_start_point_get+0x1c>
 8009ae0:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8009ae4:	6860      	ldr	r0, [r4, #4]
 8009ae6:	bd38      	pop	{r3, r4, r5, pc}
 8009ae8:	1337b00f 	.word	0x1337b00f
 8009aec:	2000069c 	.word	0x2000069c
 8009af0:	08013348 	.word	0x08013348
 8009af4:	0801319c 	.word	0x0801319c

08009af8 <acc_config_subsweep_num_points_set>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	b120      	cbz	r0, 8009b06 <acc_config_subsweep_num_points_set+0xe>
 8009afc:	4b0b      	ldr	r3, [pc, #44]	@ (8009b2c <acc_config_subsweep_num_points_set+0x34>)
 8009afe:	4604      	mov	r4, r0
 8009b00:	6800      	ldr	r0, [r0, #0]
 8009b02:	4298      	cmp	r0, r3
 8009b04:	d007      	beq.n	8009b16 <acc_config_subsweep_num_points_set+0x1e>
 8009b06:	4b0a      	ldr	r3, [pc, #40]	@ (8009b30 <acc_config_subsweep_num_points_set+0x38>)
 8009b08:	4a0a      	ldr	r2, [pc, #40]	@ (8009b34 <acc_config_subsweep_num_points_set+0x3c>)
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	490a      	ldr	r1, [pc, #40]	@ (8009b38 <acc_config_subsweep_num_points_set+0x40>)
 8009b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b12:	2000      	movs	r0, #0
 8009b14:	4718      	bx	r3
 8009b16:	2a03      	cmp	r2, #3
 8009b18:	460d      	mov	r5, r1
 8009b1a:	4616      	mov	r6, r2
 8009b1c:	d902      	bls.n	8009b24 <acc_config_subsweep_num_points_set+0x2c>
 8009b1e:	f7ff fd7d 	bl	800961c <acc_config_subsweep_validate.part.0>
 8009b22:	b110      	cbz	r0, 8009b2a <acc_config_subsweep_num_points_set+0x32>
 8009b24:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009b28:	8125      	strh	r5, [r4, #8]
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}
 8009b2c:	1337b00f 	.word	0x1337b00f
 8009b30:	2000069c 	.word	0x2000069c
 8009b34:	08013348 	.word	0x08013348
 8009b38:	0801319c 	.word	0x0801319c

08009b3c <acc_config_subsweep_num_points_get>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	b120      	cbz	r0, 8009b4a <acc_config_subsweep_num_points_get+0xe>
 8009b40:	4b0b      	ldr	r3, [pc, #44]	@ (8009b70 <acc_config_subsweep_num_points_get+0x34>)
 8009b42:	6802      	ldr	r2, [r0, #0]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	4604      	mov	r4, r0
 8009b48:	d007      	beq.n	8009b5a <acc_config_subsweep_num_points_get+0x1e>
 8009b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009b74 <acc_config_subsweep_num_points_get+0x38>)
 8009b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8009b78 <acc_config_subsweep_num_points_get+0x3c>)
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	490a      	ldr	r1, [pc, #40]	@ (8009b7c <acc_config_subsweep_num_points_get+0x40>)
 8009b52:	2000      	movs	r0, #0
 8009b54:	4798      	blx	r3
 8009b56:	2000      	movs	r0, #0
 8009b58:	bd38      	pop	{r3, r4, r5, pc}
 8009b5a:	2903      	cmp	r1, #3
 8009b5c:	460d      	mov	r5, r1
 8009b5e:	d903      	bls.n	8009b68 <acc_config_subsweep_num_points_get+0x2c>
 8009b60:	f7ff fd5c 	bl	800961c <acc_config_subsweep_validate.part.0>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d0f7      	beq.n	8009b58 <acc_config_subsweep_num_points_get+0x1c>
 8009b68:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8009b6c:	8920      	ldrh	r0, [r4, #8]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	1337b00f 	.word	0x1337b00f
 8009b74:	2000069c 	.word	0x2000069c
 8009b78:	08013348 	.word	0x08013348
 8009b7c:	0801319c 	.word	0x0801319c

08009b80 <acc_config_subsweep_step_length_set>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	b120      	cbz	r0, 8009b8e <acc_config_subsweep_step_length_set+0xe>
 8009b84:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb4 <acc_config_subsweep_step_length_set+0x34>)
 8009b86:	4604      	mov	r4, r0
 8009b88:	6800      	ldr	r0, [r0, #0]
 8009b8a:	4298      	cmp	r0, r3
 8009b8c:	d007      	beq.n	8009b9e <acc_config_subsweep_step_length_set+0x1e>
 8009b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb8 <acc_config_subsweep_step_length_set+0x38>)
 8009b90:	4a0a      	ldr	r2, [pc, #40]	@ (8009bbc <acc_config_subsweep_step_length_set+0x3c>)
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	490a      	ldr	r1, [pc, #40]	@ (8009bc0 <acc_config_subsweep_step_length_set+0x40>)
 8009b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	4718      	bx	r3
 8009b9e:	2a03      	cmp	r2, #3
 8009ba0:	460d      	mov	r5, r1
 8009ba2:	4616      	mov	r6, r2
 8009ba4:	d902      	bls.n	8009bac <acc_config_subsweep_step_length_set+0x2c>
 8009ba6:	f7ff fd39 	bl	800961c <acc_config_subsweep_validate.part.0>
 8009baa:	b110      	cbz	r0, 8009bb2 <acc_config_subsweep_step_length_set+0x32>
 8009bac:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009bb0:	8165      	strh	r5, [r4, #10]
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}
 8009bb4:	1337b00f 	.word	0x1337b00f
 8009bb8:	2000069c 	.word	0x2000069c
 8009bbc:	08013348 	.word	0x08013348
 8009bc0:	0801319c 	.word	0x0801319c

08009bc4 <acc_config_subsweep_step_length_get>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	b120      	cbz	r0, 8009bd2 <acc_config_subsweep_step_length_get+0xe>
 8009bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8009bf8 <acc_config_subsweep_step_length_get+0x34>)
 8009bca:	6802      	ldr	r2, [r0, #0]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	4604      	mov	r4, r0
 8009bd0:	d007      	beq.n	8009be2 <acc_config_subsweep_step_length_get+0x1e>
 8009bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8009bfc <acc_config_subsweep_step_length_get+0x38>)
 8009bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8009c00 <acc_config_subsweep_step_length_get+0x3c>)
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	490a      	ldr	r1, [pc, #40]	@ (8009c04 <acc_config_subsweep_step_length_get+0x40>)
 8009bda:	2000      	movs	r0, #0
 8009bdc:	4798      	blx	r3
 8009bde:	2000      	movs	r0, #0
 8009be0:	bd38      	pop	{r3, r4, r5, pc}
 8009be2:	2903      	cmp	r1, #3
 8009be4:	460d      	mov	r5, r1
 8009be6:	d903      	bls.n	8009bf0 <acc_config_subsweep_step_length_get+0x2c>
 8009be8:	f7ff fd18 	bl	800961c <acc_config_subsweep_validate.part.0>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d0f7      	beq.n	8009be0 <acc_config_subsweep_step_length_get+0x1c>
 8009bf0:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8009bf4:	8960      	ldrh	r0, [r4, #10]
 8009bf6:	bd38      	pop	{r3, r4, r5, pc}
 8009bf8:	1337b00f 	.word	0x1337b00f
 8009bfc:	2000069c 	.word	0x2000069c
 8009c00:	08013348 	.word	0x08013348
 8009c04:	0801319c 	.word	0x0801319c

08009c08 <acc_config_subsweep_profile_set>:
 8009c08:	b570      	push	{r4, r5, r6, lr}
 8009c0a:	b120      	cbz	r0, 8009c16 <acc_config_subsweep_profile_set+0xe>
 8009c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c3c <acc_config_subsweep_profile_set+0x34>)
 8009c0e:	4604      	mov	r4, r0
 8009c10:	6800      	ldr	r0, [r0, #0]
 8009c12:	4298      	cmp	r0, r3
 8009c14:	d007      	beq.n	8009c26 <acc_config_subsweep_profile_set+0x1e>
 8009c16:	4b0a      	ldr	r3, [pc, #40]	@ (8009c40 <acc_config_subsweep_profile_set+0x38>)
 8009c18:	4a0a      	ldr	r2, [pc, #40]	@ (8009c44 <acc_config_subsweep_profile_set+0x3c>)
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	490a      	ldr	r1, [pc, #40]	@ (8009c48 <acc_config_subsweep_profile_set+0x40>)
 8009c1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c22:	2000      	movs	r0, #0
 8009c24:	4718      	bx	r3
 8009c26:	2a03      	cmp	r2, #3
 8009c28:	460d      	mov	r5, r1
 8009c2a:	4616      	mov	r6, r2
 8009c2c:	d902      	bls.n	8009c34 <acc_config_subsweep_profile_set+0x2c>
 8009c2e:	f7ff fcf5 	bl	800961c <acc_config_subsweep_validate.part.0>
 8009c32:	b110      	cbz	r0, 8009c3a <acc_config_subsweep_profile_set+0x32>
 8009c34:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009c38:	74e5      	strb	r5, [r4, #19]
 8009c3a:	bd70      	pop	{r4, r5, r6, pc}
 8009c3c:	1337b00f 	.word	0x1337b00f
 8009c40:	2000069c 	.word	0x2000069c
 8009c44:	08013348 	.word	0x08013348
 8009c48:	0801319c 	.word	0x0801319c

08009c4c <acc_config_subsweep_profile_get>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	b120      	cbz	r0, 8009c5a <acc_config_subsweep_profile_get+0xe>
 8009c50:	4b0b      	ldr	r3, [pc, #44]	@ (8009c80 <acc_config_subsweep_profile_get+0x34>)
 8009c52:	6802      	ldr	r2, [r0, #0]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	4604      	mov	r4, r0
 8009c58:	d007      	beq.n	8009c6a <acc_config_subsweep_profile_get+0x1e>
 8009c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c84 <acc_config_subsweep_profile_get+0x38>)
 8009c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8009c88 <acc_config_subsweep_profile_get+0x3c>)
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	490a      	ldr	r1, [pc, #40]	@ (8009c8c <acc_config_subsweep_profile_get+0x40>)
 8009c62:	2000      	movs	r0, #0
 8009c64:	4798      	blx	r3
 8009c66:	2002      	movs	r0, #2
 8009c68:	bd38      	pop	{r3, r4, r5, pc}
 8009c6a:	2903      	cmp	r1, #3
 8009c6c:	460d      	mov	r5, r1
 8009c6e:	d903      	bls.n	8009c78 <acc_config_subsweep_profile_get+0x2c>
 8009c70:	f7ff fcd4 	bl	800961c <acc_config_subsweep_validate.part.0>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d0f6      	beq.n	8009c66 <acc_config_subsweep_profile_get+0x1a>
 8009c78:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8009c7c:	7ce0      	ldrb	r0, [r4, #19]
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	1337b00f 	.word	0x1337b00f
 8009c84:	2000069c 	.word	0x2000069c
 8009c88:	08013348 	.word	0x08013348
 8009c8c:	0801319c 	.word	0x0801319c

08009c90 <acc_config_subsweep_hwaas_set>:
 8009c90:	b570      	push	{r4, r5, r6, lr}
 8009c92:	b120      	cbz	r0, 8009c9e <acc_config_subsweep_hwaas_set+0xe>
 8009c94:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc4 <acc_config_subsweep_hwaas_set+0x34>)
 8009c96:	4604      	mov	r4, r0
 8009c98:	6800      	ldr	r0, [r0, #0]
 8009c9a:	4298      	cmp	r0, r3
 8009c9c:	d007      	beq.n	8009cae <acc_config_subsweep_hwaas_set+0x1e>
 8009c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc8 <acc_config_subsweep_hwaas_set+0x38>)
 8009ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8009ccc <acc_config_subsweep_hwaas_set+0x3c>)
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	490a      	ldr	r1, [pc, #40]	@ (8009cd0 <acc_config_subsweep_hwaas_set+0x40>)
 8009ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009caa:	2000      	movs	r0, #0
 8009cac:	4718      	bx	r3
 8009cae:	2a03      	cmp	r2, #3
 8009cb0:	460d      	mov	r5, r1
 8009cb2:	4616      	mov	r6, r2
 8009cb4:	d902      	bls.n	8009cbc <acc_config_subsweep_hwaas_set+0x2c>
 8009cb6:	f7ff fcb1 	bl	800961c <acc_config_subsweep_validate.part.0>
 8009cba:	b110      	cbz	r0, 8009cc2 <acc_config_subsweep_hwaas_set+0x32>
 8009cbc:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009cc0:	81a5      	strh	r5, [r4, #12]
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}
 8009cc4:	1337b00f 	.word	0x1337b00f
 8009cc8:	2000069c 	.word	0x2000069c
 8009ccc:	08013348 	.word	0x08013348
 8009cd0:	0801319c 	.word	0x0801319c

08009cd4 <acc_config_start_point_set>:
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f7ff becb 	b.w	8009a70 <acc_config_subsweep_start_point_set>
 8009cda:	bf00      	nop

08009cdc <acc_config_num_points_set>:
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f7ff bf0b 	b.w	8009af8 <acc_config_subsweep_num_points_set>
 8009ce2:	bf00      	nop

08009ce4 <acc_config_step_length_set>:
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f7ff bf4b 	b.w	8009b80 <acc_config_subsweep_step_length_set>
 8009cea:	bf00      	nop

08009cec <acc_config_profile_set>:
 8009cec:	2200      	movs	r2, #0
 8009cee:	f7ff bf8b 	b.w	8009c08 <acc_config_subsweep_profile_set>
 8009cf2:	bf00      	nop

08009cf4 <acc_config_hwaas_set>:
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f7ff bfcb 	b.w	8009c90 <acc_config_subsweep_hwaas_set>
 8009cfa:	bf00      	nop

08009cfc <acc_config_sweeps_per_frame_set>:
 8009cfc:	b118      	cbz	r0, 8009d06 <acc_config_sweeps_per_frame_set+0xa>
 8009cfe:	4b06      	ldr	r3, [pc, #24]	@ (8009d18 <acc_config_sweeps_per_frame_set+0x1c>)
 8009d00:	6802      	ldr	r2, [r0, #0]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d005      	beq.n	8009d12 <acc_config_sweeps_per_frame_set+0x16>
 8009d06:	4b05      	ldr	r3, [pc, #20]	@ (8009d1c <acc_config_sweeps_per_frame_set+0x20>)
 8009d08:	4a05      	ldr	r2, [pc, #20]	@ (8009d20 <acc_config_sweeps_per_frame_set+0x24>)
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	4905      	ldr	r1, [pc, #20]	@ (8009d24 <acc_config_sweeps_per_frame_set+0x28>)
 8009d0e:	2000      	movs	r0, #0
 8009d10:	4718      	bx	r3
 8009d12:	f8a0 104c 	strh.w	r1, [r0, #76]	@ 0x4c
 8009d16:	4770      	bx	lr
 8009d18:	1337b00f 	.word	0x1337b00f
 8009d1c:	2000069c 	.word	0x2000069c
 8009d20:	08013348 	.word	0x08013348
 8009d24:	0801319c 	.word	0x0801319c

08009d28 <acc_config_sweeps_per_frame_get>:
 8009d28:	b508      	push	{r3, lr}
 8009d2a:	b118      	cbz	r0, 8009d34 <acc_config_sweeps_per_frame_get+0xc>
 8009d2c:	4b07      	ldr	r3, [pc, #28]	@ (8009d4c <acc_config_sweeps_per_frame_get+0x24>)
 8009d2e:	6802      	ldr	r2, [r0, #0]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d007      	beq.n	8009d44 <acc_config_sweeps_per_frame_get+0x1c>
 8009d34:	4b06      	ldr	r3, [pc, #24]	@ (8009d50 <acc_config_sweeps_per_frame_get+0x28>)
 8009d36:	4a07      	ldr	r2, [pc, #28]	@ (8009d54 <acc_config_sweeps_per_frame_get+0x2c>)
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	4907      	ldr	r1, [pc, #28]	@ (8009d58 <acc_config_sweeps_per_frame_get+0x30>)
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	4798      	blx	r3
 8009d40:	2000      	movs	r0, #0
 8009d42:	bd08      	pop	{r3, pc}
 8009d44:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
 8009d48:	bd08      	pop	{r3, pc}
 8009d4a:	bf00      	nop
 8009d4c:	1337b00f 	.word	0x1337b00f
 8009d50:	2000069c 	.word	0x2000069c
 8009d54:	08013348 	.word	0x08013348
 8009d58:	0801319c 	.word	0x0801319c

08009d5c <acc_config_frame_rate_set>:
 8009d5c:	b118      	cbz	r0, 8009d66 <acc_config_frame_rate_set+0xa>
 8009d5e:	4b06      	ldr	r3, [pc, #24]	@ (8009d78 <acc_config_frame_rate_set+0x1c>)
 8009d60:	6802      	ldr	r2, [r0, #0]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d005      	beq.n	8009d72 <acc_config_frame_rate_set+0x16>
 8009d66:	4b05      	ldr	r3, [pc, #20]	@ (8009d7c <acc_config_frame_rate_set+0x20>)
 8009d68:	4a05      	ldr	r2, [pc, #20]	@ (8009d80 <acc_config_frame_rate_set+0x24>)
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	4905      	ldr	r1, [pc, #20]	@ (8009d84 <acc_config_frame_rate_set+0x28>)
 8009d6e:	2000      	movs	r0, #0
 8009d70:	4718      	bx	r3
 8009d72:	ed80 0a12 	vstr	s0, [r0, #72]	@ 0x48
 8009d76:	4770      	bx	lr
 8009d78:	1337b00f 	.word	0x1337b00f
 8009d7c:	2000069c 	.word	0x2000069c
 8009d80:	08013348 	.word	0x08013348
 8009d84:	0801319c 	.word	0x0801319c

08009d88 <acc_config_inter_frame_idle_state_set>:
 8009d88:	b118      	cbz	r0, 8009d92 <acc_config_inter_frame_idle_state_set+0xa>
 8009d8a:	4b06      	ldr	r3, [pc, #24]	@ (8009da4 <acc_config_inter_frame_idle_state_set+0x1c>)
 8009d8c:	6802      	ldr	r2, [r0, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d005      	beq.n	8009d9e <acc_config_inter_frame_idle_state_set+0x16>
 8009d92:	4b05      	ldr	r3, [pc, #20]	@ (8009da8 <acc_config_inter_frame_idle_state_set+0x20>)
 8009d94:	4a05      	ldr	r2, [pc, #20]	@ (8009dac <acc_config_inter_frame_idle_state_set+0x24>)
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	4905      	ldr	r1, [pc, #20]	@ (8009db0 <acc_config_inter_frame_idle_state_set+0x28>)
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	4718      	bx	r3
 8009d9e:	f880 1053 	strb.w	r1, [r0, #83]	@ 0x53
 8009da2:	4770      	bx	lr
 8009da4:	1337b00f 	.word	0x1337b00f
 8009da8:	2000069c 	.word	0x2000069c
 8009dac:	08013348 	.word	0x08013348
 8009db0:	0801319c 	.word	0x0801319c

08009db4 <acc_config_get_settings>:
 8009db4:	b508      	push	{r3, lr}
 8009db6:	b118      	cbz	r0, 8009dc0 <acc_config_get_settings+0xc>
 8009db8:	4b06      	ldr	r3, [pc, #24]	@ (8009dd4 <acc_config_get_settings+0x20>)
 8009dba:	6802      	ldr	r2, [r0, #0]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d007      	beq.n	8009dd0 <acc_config_get_settings+0x1c>
 8009dc0:	4b05      	ldr	r3, [pc, #20]	@ (8009dd8 <acc_config_get_settings+0x24>)
 8009dc2:	4a06      	ldr	r2, [pc, #24]	@ (8009ddc <acc_config_get_settings+0x28>)
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	4906      	ldr	r1, [pc, #24]	@ (8009de0 <acc_config_get_settings+0x2c>)
 8009dc8:	2000      	movs	r0, #0
 8009dca:	4798      	blx	r3
 8009dcc:	2000      	movs	r0, #0
 8009dce:	bd08      	pop	{r3, pc}
 8009dd0:	3004      	adds	r0, #4
 8009dd2:	bd08      	pop	{r3, pc}
 8009dd4:	1337b00f 	.word	0x1337b00f
 8009dd8:	2000069c 	.word	0x2000069c
 8009ddc:	08013348 	.word	0x08013348
 8009de0:	0801319c 	.word	0x0801319c

08009de4 <acc_config_subsweep_prf_set>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	b120      	cbz	r0, 8009df2 <acc_config_subsweep_prf_set+0xe>
 8009de8:	4b0b      	ldr	r3, [pc, #44]	@ (8009e18 <acc_config_subsweep_prf_set+0x34>)
 8009dea:	4604      	mov	r4, r0
 8009dec:	6800      	ldr	r0, [r0, #0]
 8009dee:	4298      	cmp	r0, r3
 8009df0:	d007      	beq.n	8009e02 <acc_config_subsweep_prf_set+0x1e>
 8009df2:	4b0a      	ldr	r3, [pc, #40]	@ (8009e1c <acc_config_subsweep_prf_set+0x38>)
 8009df4:	4a0a      	ldr	r2, [pc, #40]	@ (8009e20 <acc_config_subsweep_prf_set+0x3c>)
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	490a      	ldr	r1, [pc, #40]	@ (8009e24 <acc_config_subsweep_prf_set+0x40>)
 8009dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009dfe:	2000      	movs	r0, #0
 8009e00:	4718      	bx	r3
 8009e02:	2a03      	cmp	r2, #3
 8009e04:	460d      	mov	r5, r1
 8009e06:	4616      	mov	r6, r2
 8009e08:	d902      	bls.n	8009e10 <acc_config_subsweep_prf_set+0x2c>
 8009e0a:	f7ff fc07 	bl	800961c <acc_config_subsweep_validate.part.0>
 8009e0e:	b110      	cbz	r0, 8009e16 <acc_config_subsweep_prf_set+0x32>
 8009e10:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8009e14:	74a5      	strb	r5, [r4, #18]
 8009e16:	bd70      	pop	{r4, r5, r6, pc}
 8009e18:	1337b00f 	.word	0x1337b00f
 8009e1c:	2000069c 	.word	0x2000069c
 8009e20:	08013348 	.word	0x08013348
 8009e24:	0801319c 	.word	0x0801319c

08009e28 <acc_config_prf_set>:
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f7ff bfdb 	b.w	8009de4 <acc_config_subsweep_prf_set>
 8009e2e:	bf00      	nop

08009e30 <data_callback>:
 8009e30:	b470      	push	{r4, r5, r6}
 8009e32:	888c      	ldrh	r4, [r1, #4]
 8009e34:	6893      	ldr	r3, [r2, #8]
 8009e36:	890e      	ldrh	r6, [r1, #8]
 8009e38:	798d      	ldrb	r5, [r1, #6]
 8009e3a:	79ca      	ldrb	r2, [r1, #7]
 8009e3c:	709a      	strb	r2, [r3, #2]
 8009e3e:	3c00      	subs	r4, #0
 8009e40:	bf18      	it	ne
 8009e42:	2401      	movne	r4, #1
 8009e44:	809e      	strh	r6, [r3, #4]
 8009e46:	701c      	strb	r4, [r3, #0]
 8009e48:	705d      	strb	r5, [r3, #1]
 8009e4a:	6098      	str	r0, [r3, #8]
 8009e4c:	bc70      	pop	{r4, r5, r6}
 8009e4e:	4770      	bx	lr

08009e50 <acc_processing_execute>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	4615      	mov	r5, r2
 8009e54:	460e      	mov	r6, r1
 8009e56:	b120      	cbz	r0, 8009e62 <acc_processing_execute+0x12>
 8009e58:	4b15      	ldr	r3, [pc, #84]	@ (8009eb0 <acc_processing_execute+0x60>)
 8009e5a:	6802      	ldr	r2, [r0, #0]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	4604      	mov	r4, r0
 8009e60:	d008      	beq.n	8009e74 <acc_processing_execute+0x24>
 8009e62:	4c14      	ldr	r4, [pc, #80]	@ (8009eb4 <acc_processing_execute+0x64>)
 8009e64:	4a14      	ldr	r2, [pc, #80]	@ (8009eb8 <acc_processing_execute+0x68>)
 8009e66:	6923      	ldr	r3, [r4, #16]
 8009e68:	4914      	ldr	r1, [pc, #80]	@ (8009ebc <acc_processing_execute+0x6c>)
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	4798      	blx	r3
 8009e6e:	b176      	cbz	r6, 8009e8e <acc_processing_execute+0x3e>
 8009e70:	b1a5      	cbz	r5, 8009e9c <acc_processing_execute+0x4c>
 8009e72:	bd70      	pop	{r4, r5, r6, pc}
 8009e74:	b151      	cbz	r1, 8009e8c <acc_processing_execute+0x3c>
 8009e76:	b1c5      	cbz	r5, 8009eaa <acc_processing_execute+0x5a>
 8009e78:	6085      	str	r5, [r0, #8]
 8009e7a:	6840      	ldr	r0, [r0, #4]
 8009e7c:	f002 fa94 	bl	800c3a8 <acc_pipeline_a121_prepare_memory>
 8009e80:	6863      	ldr	r3, [r4, #4]
 8009e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e86:	e9d3 0200 	ldrd	r0, r2, [r3]
 8009e8a:	4710      	bx	r2
 8009e8c:	4c09      	ldr	r4, [pc, #36]	@ (8009eb4 <acc_processing_execute+0x64>)
 8009e8e:	6923      	ldr	r3, [r4, #16]
 8009e90:	4a0b      	ldr	r2, [pc, #44]	@ (8009ec0 <acc_processing_execute+0x70>)
 8009e92:	490a      	ldr	r1, [pc, #40]	@ (8009ebc <acc_processing_execute+0x6c>)
 8009e94:	2000      	movs	r0, #0
 8009e96:	4798      	blx	r3
 8009e98:	2d00      	cmp	r5, #0
 8009e9a:	d1ea      	bne.n	8009e72 <acc_processing_execute+0x22>
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	4a09      	ldr	r2, [pc, #36]	@ (8009ec4 <acc_processing_execute+0x74>)
 8009ea0:	4906      	ldr	r1, [pc, #24]	@ (8009ebc <acc_processing_execute+0x6c>)
 8009ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	4718      	bx	r3
 8009eaa:	4c02      	ldr	r4, [pc, #8]	@ (8009eb4 <acc_processing_execute+0x64>)
 8009eac:	e7f6      	b.n	8009e9c <acc_processing_execute+0x4c>
 8009eae:	bf00      	nop
 8009eb0:	1337b00d 	.word	0x1337b00d
 8009eb4:	2000069c 	.word	0x2000069c
 8009eb8:	08013088 	.word	0x08013088
 8009ebc:	080133d0 	.word	0x080133d0
 8009ec0:	080133dc 	.word	0x080133dc
 8009ec4:	080133b8 	.word	0x080133b8

08009ec8 <acc_processing_destroy>:
 8009ec8:	b510      	push	{r4, lr}
 8009eca:	b120      	cbz	r0, 8009ed6 <acc_processing_destroy+0xe>
 8009ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8009f00 <acc_processing_destroy+0x38>)
 8009ece:	6802      	ldr	r2, [r0, #0]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	d007      	beq.n	8009ee6 <acc_processing_destroy+0x1e>
 8009ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8009f04 <acc_processing_destroy+0x3c>)
 8009ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8009f08 <acc_processing_destroy+0x40>)
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	490b      	ldr	r1, [pc, #44]	@ (8009f0c <acc_processing_destroy+0x44>)
 8009ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	4718      	bx	r3
 8009ee6:	6840      	ldr	r0, [r0, #4]
 8009ee8:	b118      	cbz	r0, 8009ef2 <acc_processing_destroy+0x2a>
 8009eea:	68c3      	ldr	r3, [r0, #12]
 8009eec:	4798      	blx	r3
 8009eee:	2300      	movs	r3, #0
 8009ef0:	6063      	str	r3, [r4, #4]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009efc:	f002 b8a8 	b.w	800c050 <acc_rss_integration_mem_free>
 8009f00:	1337b00d 	.word	0x1337b00d
 8009f04:	2000069c 	.word	0x2000069c
 8009f08:	08013088 	.word	0x08013088
 8009f0c:	080133d0 	.word	0x080133d0

08009f10 <acc_processing_create>:
 8009f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f14:	b088      	sub	sp, #32
 8009f16:	460c      	mov	r4, r1
 8009f18:	f7ff ff4c 	bl	8009db4 <acc_config_get_settings>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d050      	beq.n	8009fc2 <acc_processing_create+0xb2>
 8009f20:	2c00      	cmp	r4, #0
 8009f22:	d043      	beq.n	8009fac <acc_processing_create+0x9c>
 8009f24:	4a2e      	ldr	r2, [pc, #184]	@ (8009fe0 <acc_processing_create+0xd0>)
 8009f26:	4606      	mov	r6, r0
 8009f28:	2367      	movs	r3, #103	@ 0x67
 8009f2a:	2110      	movs	r1, #16
 8009f2c:	2001      	movs	r0, #1
 8009f2e:	f002 f873 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 8009f32:	4605      	mov	r5, r0
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d044      	beq.n	8009fc2 <acc_processing_create+0xb2>
 8009f38:	4b2a      	ldr	r3, [pc, #168]	@ (8009fe4 <acc_processing_create+0xd4>)
 8009f3a:	6003      	str	r3, [r0, #0]
 8009f3c:	f10d 080c 	add.w	r8, sp, #12
 8009f40:	4b29      	ldr	r3, [pc, #164]	@ (8009fe8 <acc_processing_create+0xd8>)
 8009f42:	9600      	str	r6, [sp, #0]
 8009f44:	4641      	mov	r1, r8
 8009f46:	4668      	mov	r0, sp
 8009f48:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8009f4c:	f002 f8c6 	bl	800c0dc <acc_pipeline_a121_assemble>
 8009f50:	4607      	mov	r7, r0
 8009f52:	6068      	str	r0, [r5, #4]
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d03e      	beq.n	8009fd6 <acc_processing_create+0xc6>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	8063      	strh	r3, [r4, #2]
 8009f5c:	f896 104e 	ldrb.w	r1, [r6, #78]	@ 0x4e
 8009f60:	461a      	mov	r2, r3
 8009f62:	469c      	mov	ip, r3
 8009f64:	1d20      	adds	r0, r4, #4
 8009f66:	b2df      	uxtb	r7, r3
 8009f68:	42b9      	cmp	r1, r7
 8009f6a:	d92f      	bls.n	8009fcc <acc_processing_create+0xbc>
 8009f6c:	f838 7013 	ldrh.w	r7, [r8, r3, lsl #1]
 8009f70:	8002      	strh	r2, [r0, #0]
 8009f72:	443a      	add	r2, r7
 8009f74:	b292      	uxth	r2, r2
 8009f76:	8062      	strh	r2, [r4, #2]
 8009f78:	8107      	strh	r7, [r0, #8]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	2b04      	cmp	r3, #4
 8009f7e:	f100 0002 	add.w	r0, r0, #2
 8009f82:	d1f0      	bne.n	8009f66 <acc_processing_create+0x56>
 8009f84:	f8b6 3048 	ldrh.w	r3, [r6, #72]	@ 0x48
 8009f88:	9905      	ldr	r1, [sp, #20]
 8009f8a:	6161      	str	r1, [r4, #20]
 8009f8c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8009f90:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8009f94:	7620      	strb	r0, [r4, #24]
 8009f96:	fb13 f202 	smulbb	r2, r3, r2
 8009f9a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009f9e:	8022      	strh	r2, [r4, #0]
 8009fa0:	81a9      	strh	r1, [r5, #12]
 8009fa2:	81eb      	strh	r3, [r5, #14]
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	b008      	add	sp, #32
 8009fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fac:	4b0f      	ldr	r3, [pc, #60]	@ (8009fec <acc_processing_create+0xdc>)
 8009fae:	4a10      	ldr	r2, [pc, #64]	@ (8009ff0 <acc_processing_create+0xe0>)
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	490b      	ldr	r1, [pc, #44]	@ (8009fe0 <acc_processing_create+0xd0>)
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	4798      	blx	r3
 8009fb8:	4625      	mov	r5, r4
 8009fba:	4628      	mov	r0, r5
 8009fbc:	b008      	add	sp, #32
 8009fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc2:	2500      	movs	r5, #0
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	b008      	add	sp, #32
 8009fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fcc:	f8a0 c000 	strh.w	ip, [r0]
 8009fd0:	f8a0 c008 	strh.w	ip, [r0, #8]
 8009fd4:	e7d1      	b.n	8009f7a <acc_processing_create+0x6a>
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f7ff ff76 	bl	8009ec8 <acc_processing_destroy>
 8009fdc:	463d      	mov	r5, r7
 8009fde:	e7e1      	b.n	8009fa4 <acc_processing_create+0x94>
 8009fe0:	080133d0 	.word	0x080133d0
 8009fe4:	1337b00d 	.word	0x1337b00d
 8009fe8:	08009e31 	.word	0x08009e31
 8009fec:	2000069c 	.word	0x2000069c
 8009ff0:	080133f4 	.word	0x080133f4

08009ff4 <acc_processing_points_to_meter>:
 8009ff4:	f002 bc64 	b.w	800c8c0 <acc_radar_engine_a121_points_to_meter>

08009ff8 <acc_sensor_destroy>:
 8009ff8:	b510      	push	{r4, lr}
 8009ffa:	b120      	cbz	r0, 800a006 <acc_sensor_destroy+0xe>
 8009ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800a02c <acc_sensor_destroy+0x34>)
 8009ffe:	6802      	ldr	r2, [r0, #0]
 800a000:	429a      	cmp	r2, r3
 800a002:	4604      	mov	r4, r0
 800a004:	d007      	beq.n	800a016 <acc_sensor_destroy+0x1e>
 800a006:	4b0a      	ldr	r3, [pc, #40]	@ (800a030 <acc_sensor_destroy+0x38>)
 800a008:	4a0a      	ldr	r2, [pc, #40]	@ (800a034 <acc_sensor_destroy+0x3c>)
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	490a      	ldr	r1, [pc, #40]	@ (800a038 <acc_sensor_destroy+0x40>)
 800a00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a012:	2000      	movs	r0, #0
 800a014:	4718      	bx	r3
 800a016:	2300      	movs	r3, #0
 800a018:	6003      	str	r3, [r0, #0]
 800a01a:	6900      	ldr	r0, [r0, #16]
 800a01c:	f002 f9fc 	bl	800c418 <acc_radar_engine_a121_context_destroy>
 800a020:	4620      	mov	r0, r4
 800a022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a026:	f002 b813 	b.w	800c050 <acc_rss_integration_mem_free>
 800a02a:	bf00      	nop
 800a02c:	1337b00e 	.word	0x1337b00e
 800a030:	2000069c 	.word	0x2000069c
 800a034:	0801340c 	.word	0x0801340c
 800a038:	08013424 	.word	0x08013424

0800a03c <acc_sensor_create>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	4a20      	ldr	r2, [pc, #128]	@ (800a0c0 <acc_sensor_create+0x84>)
 800a040:	4606      	mov	r6, r0
 800a042:	233b      	movs	r3, #59	@ 0x3b
 800a044:	2114      	movs	r1, #20
 800a046:	2001      	movs	r0, #1
 800a048:	f001 ffe6 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 800a04c:	b378      	cbz	r0, 800a0ae <acc_sensor_create+0x72>
 800a04e:	4604      	mov	r4, r0
 800a050:	f002 f9d0 	bl	800c3f4 <acc_radar_engine_a121_context_create>
 800a054:	4605      	mov	r5, r0
 800a056:	6120      	str	r0, [r4, #16]
 800a058:	b360      	cbz	r0, 800a0b4 <acc_sensor_create+0x78>
 800a05a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0c4 <acc_sensor_create+0x88>)
 800a05c:	60a6      	str	r6, [r4, #8]
 800a05e:	2100      	movs	r1, #0
 800a060:	e9c4 3100 	strd	r3, r1, [r4]
 800a064:	7361      	strb	r1, [r4, #13]
 800a066:	4630      	mov	r0, r6
 800a068:	f002 fa80 	bl	800c56c <acc_radar_engine_a121_check_asic_id>
 800a06c:	4605      	mov	r5, r0
 800a06e:	b168      	cbz	r0, 800a08c <acc_sensor_create+0x50>
 800a070:	4630      	mov	r0, r6
 800a072:	f002 fa7d 	bl	800c570 <acc_radar_engine_a121_is_sensor_running>
 800a076:	4605      	mov	r5, r0
 800a078:	b980      	cbnz	r0, 800a09c <acc_sensor_create+0x60>
 800a07a:	68a0      	ldr	r0, [r4, #8]
 800a07c:	f002 fc22 	bl	800c8c4 <acc_radar_engine_a121_init_interrupts>
 800a080:	68a0      	ldr	r0, [r4, #8]
 800a082:	4629      	mov	r1, r5
 800a084:	f002 fc20 	bl	800c8c8 <acc_radar_engine_a121_hibernate_off>
 800a088:	4620      	mov	r0, r4
 800a08a:	bd70      	pop	{r4, r5, r6, pc}
 800a08c:	4620      	mov	r0, r4
 800a08e:	f7ff ffb3 	bl	8009ff8 <acc_sensor_destroy>
 800a092:	4630      	mov	r0, r6
 800a094:	f002 fa6c 	bl	800c570 <acc_radar_engine_a121_is_sensor_running>
 800a098:	b148      	cbz	r0, 800a0ae <acc_sensor_create+0x72>
 800a09a:	462c      	mov	r4, r5
 800a09c:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c8 <acc_sensor_create+0x8c>)
 800a09e:	4a0b      	ldr	r2, [pc, #44]	@ (800a0cc <acc_sensor_create+0x90>)
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	4907      	ldr	r1, [pc, #28]	@ (800a0c0 <acc_sensor_create+0x84>)
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	4798      	blx	r3
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f7ff ffa5 	bl	8009ff8 <acc_sensor_destroy>
 800a0ae:	2400      	movs	r4, #0
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f001 ffcb 	bl	800c050 <acc_rss_integration_mem_free>
 800a0ba:	462c      	mov	r4, r5
 800a0bc:	e7f8      	b.n	800a0b0 <acc_sensor_create+0x74>
 800a0be:	bf00      	nop
 800a0c0:	08013424 	.word	0x08013424
 800a0c4:	1337b00e 	.word	0x1337b00e
 800a0c8:	2000069c 	.word	0x2000069c
 800a0cc:	0801342c 	.word	0x0801342c

0800a0d0 <acc_sensor_calibrate>:
 800a0d0:	b530      	push	{r4, r5, lr}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	b128      	cbz	r0, 800a0e2 <acc_sensor_calibrate+0x12>
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	4604      	mov	r4, r0
 800a0da:	4912      	ldr	r1, [pc, #72]	@ (800a124 <acc_sensor_calibrate+0x54>)
 800a0dc:	6800      	ldr	r0, [r0, #0]
 800a0de:	4288      	cmp	r0, r1
 800a0e0:	d008      	beq.n	800a0f4 <acc_sensor_calibrate+0x24>
 800a0e2:	4b11      	ldr	r3, [pc, #68]	@ (800a128 <acc_sensor_calibrate+0x58>)
 800a0e4:	4a11      	ldr	r2, [pc, #68]	@ (800a12c <acc_sensor_calibrate+0x5c>)
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	4911      	ldr	r1, [pc, #68]	@ (800a130 <acc_sensor_calibrate+0x60>)
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	4798      	blx	r3
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	b003      	add	sp, #12
 800a0f2:	bd30      	pop	{r4, r5, pc}
 800a0f4:	2d00      	cmp	r5, #0
 800a0f6:	d0fa      	beq.n	800a0ee <acc_sensor_calibrate+0x1e>
 800a0f8:	2a00      	cmp	r2, #0
 800a0fa:	d0f8      	beq.n	800a0ee <acc_sensor_calibrate+0x1e>
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d0f6      	beq.n	800a0ee <acc_sensor_calibrate+0x1e>
 800a100:	9200      	str	r2, [sp, #0]
 800a102:	4619      	mov	r1, r3
 800a104:	9a06      	ldr	r2, [sp, #24]
 800a106:	68a0      	ldr	r0, [r4, #8]
 800a108:	f104 030d 	add.w	r3, r4, #13
 800a10c:	f000 f8d0 	bl	800a2b0 <acc_calibration_a121_calibrate>
 800a110:	2800      	cmp	r0, #0
 800a112:	d0ec      	beq.n	800a0ee <acc_sensor_calibrate+0x1e>
 800a114:	7b63      	ldrb	r3, [r4, #13]
 800a116:	2b0a      	cmp	r3, #10
 800a118:	bf0c      	ite	eq
 800a11a:	2301      	moveq	r3, #1
 800a11c:	2300      	movne	r3, #0
 800a11e:	702b      	strb	r3, [r5, #0]
 800a120:	e7e6      	b.n	800a0f0 <acc_sensor_calibrate+0x20>
 800a122:	bf00      	nop
 800a124:	1337b00e 	.word	0x1337b00e
 800a128:	2000069c 	.word	0x2000069c
 800a12c:	0801340c 	.word	0x0801340c
 800a130:	08013424 	.word	0x08013424

0800a134 <acc_sensor_prepare>:
 800a134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a136:	b085      	sub	sp, #20
 800a138:	b130      	cbz	r0, 800a148 <acc_sensor_prepare+0x14>
 800a13a:	4616      	mov	r6, r2
 800a13c:	461f      	mov	r7, r3
 800a13e:	6802      	ldr	r2, [r0, #0]
 800a140:	4b22      	ldr	r3, [pc, #136]	@ (800a1cc <acc_sensor_prepare+0x98>)
 800a142:	429a      	cmp	r2, r3
 800a144:	4604      	mov	r4, r0
 800a146:	d008      	beq.n	800a15a <acc_sensor_prepare+0x26>
 800a148:	4b21      	ldr	r3, [pc, #132]	@ (800a1d0 <acc_sensor_prepare+0x9c>)
 800a14a:	4a22      	ldr	r2, [pc, #136]	@ (800a1d4 <acc_sensor_prepare+0xa0>)
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	4922      	ldr	r1, [pc, #136]	@ (800a1d8 <acc_sensor_prepare+0xa4>)
 800a150:	2000      	movs	r0, #0
 800a152:	4798      	blx	r3
 800a154:	2000      	movs	r0, #0
 800a156:	b005      	add	sp, #20
 800a158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a15a:	b1f6      	cbz	r6, 800a19a <acc_sensor_prepare+0x66>
 800a15c:	4630      	mov	r0, r6
 800a15e:	460d      	mov	r5, r1
 800a160:	f000 fc42 	bl	800a9e8 <acc_calibration_a121_validate_calibration>
 800a164:	b1c8      	cbz	r0, 800a19a <acc_sensor_prepare+0x66>
 800a166:	4628      	mov	r0, r5
 800a168:	f7ff fe24 	bl	8009db4 <acc_config_get_settings>
 800a16c:	4605      	mov	r5, r0
 800a16e:	2800      	cmp	r0, #0
 800a170:	d0f1      	beq.n	800a156 <acc_sensor_prepare+0x22>
 800a172:	68a0      	ldr	r0, [r4, #8]
 800a174:	f002 f9fc 	bl	800c570 <acc_radar_engine_a121_is_sensor_running>
 800a178:	7320      	strb	r0, [r4, #12]
 800a17a:	b188      	cbz	r0, 800a1a0 <acc_sensor_prepare+0x6c>
 800a17c:	9700      	str	r7, [sp, #0]
 800a17e:	6923      	ldr	r3, [r4, #16]
 800a180:	1d20      	adds	r0, r4, #4
 800a182:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800a186:	1da2      	adds	r2, r4, #6
 800a188:	9203      	str	r2, [sp, #12]
 800a18a:	68a0      	ldr	r0, [r4, #8]
 800a18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a18e:	4632      	mov	r2, r6
 800a190:	4629      	mov	r1, r5
 800a192:	f002 fadb 	bl	800c74c <acc_radar_engine_a121_reconfigure>
 800a196:	b005      	add	sp, #20
 800a198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a19a:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d0 <acc_sensor_prepare+0x9c>)
 800a19c:	4a0f      	ldr	r2, [pc, #60]	@ (800a1dc <acc_sensor_prepare+0xa8>)
 800a19e:	e7d5      	b.n	800a14c <acc_sensor_prepare+0x18>
 800a1a0:	68a0      	ldr	r0, [r4, #8]
 800a1a2:	f002 fb93 	bl	800c8cc <acc_radar_engine_a121_is_hibernate>
 800a1a6:	7b23      	ldrb	r3, [r4, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e7      	bne.n	800a17c <acc_sensor_prepare+0x48>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	d1e5      	bne.n	800a17c <acc_sensor_prepare+0x48>
 800a1b0:	9700      	str	r7, [sp, #0]
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	1d20      	adds	r0, r4, #4
 800a1b6:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800a1ba:	1da2      	adds	r2, r4, #6
 800a1bc:	9203      	str	r2, [sp, #12]
 800a1be:	68a0      	ldr	r0, [r4, #8]
 800a1c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1c2:	4632      	mov	r2, r6
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	f002 fa21 	bl	800c60c <acc_radar_engine_a121_prepare>
 800a1ca:	e7c4      	b.n	800a156 <acc_sensor_prepare+0x22>
 800a1cc:	1337b00e 	.word	0x1337b00e
 800a1d0:	2000069c 	.word	0x2000069c
 800a1d4:	0801340c 	.word	0x0801340c
 800a1d8:	08013424 	.word	0x08013424
 800a1dc:	08013448 	.word	0x08013448

0800a1e0 <acc_sensor_measure>:
 800a1e0:	b510      	push	{r4, lr}
 800a1e2:	b120      	cbz	r0, 800a1ee <acc_sensor_measure+0xe>
 800a1e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a220 <acc_sensor_measure+0x40>)
 800a1e6:	6802      	ldr	r2, [r0, #0]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	d007      	beq.n	800a1fe <acc_sensor_measure+0x1e>
 800a1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a224 <acc_sensor_measure+0x44>)
 800a1f0:	4a0d      	ldr	r2, [pc, #52]	@ (800a228 <acc_sensor_measure+0x48>)
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	490d      	ldr	r1, [pc, #52]	@ (800a22c <acc_sensor_measure+0x4c>)
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	4798      	blx	r3
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	bd10      	pop	{r4, pc}
 800a1fe:	7b03      	ldrb	r3, [r0, #12]
 800a200:	b93b      	cbnz	r3, 800a212 <acc_sensor_measure+0x32>
 800a202:	6880      	ldr	r0, [r0, #8]
 800a204:	f002 f90c 	bl	800c420 <acc_radar_engine_a121_run_program>
 800a208:	2800      	cmp	r0, #0
 800a20a:	d0f7      	beq.n	800a1fc <acc_sensor_measure+0x1c>
 800a20c:	2301      	movs	r3, #1
 800a20e:	7323      	strb	r3, [r4, #12]
 800a210:	bd10      	pop	{r4, pc}
 800a212:	6901      	ldr	r1, [r0, #16]
 800a214:	6880      	ldr	r0, [r0, #8]
 800a216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a21a:	f002 b903 	b.w	800c424 <acc_radar_engine_a121_measure>
 800a21e:	bf00      	nop
 800a220:	1337b00e 	.word	0x1337b00e
 800a224:	2000069c 	.word	0x2000069c
 800a228:	0801340c 	.word	0x0801340c
 800a22c:	08013424 	.word	0x08013424

0800a230 <acc_sensor_read>:
 800a230:	b530      	push	{r4, r5, lr}
 800a232:	b085      	sub	sp, #20
 800a234:	b128      	cbz	r0, 800a242 <acc_sensor_read+0x12>
 800a236:	4b19      	ldr	r3, [pc, #100]	@ (800a29c <acc_sensor_read+0x6c>)
 800a238:	460d      	mov	r5, r1
 800a23a:	6801      	ldr	r1, [r0, #0]
 800a23c:	4299      	cmp	r1, r3
 800a23e:	4604      	mov	r4, r0
 800a240:	d008      	beq.n	800a254 <acc_sensor_read+0x24>
 800a242:	4b17      	ldr	r3, [pc, #92]	@ (800a2a0 <acc_sensor_read+0x70>)
 800a244:	4a17      	ldr	r2, [pc, #92]	@ (800a2a4 <acc_sensor_read+0x74>)
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	4917      	ldr	r1, [pc, #92]	@ (800a2a8 <acc_sensor_read+0x78>)
 800a24a:	2000      	movs	r0, #0
 800a24c:	4798      	blx	r3
 800a24e:	2000      	movs	r0, #0
 800a250:	b005      	add	sp, #20
 800a252:	bd30      	pop	{r4, r5, pc}
 800a254:	8883      	ldrh	r3, [r0, #4]
 800a256:	88c1      	ldrh	r1, [r0, #6]
 800a258:	440b      	add	r3, r1
 800a25a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800a25e:	d319      	bcc.n	800a294 <acc_sensor_read+0x64>
 800a260:	6901      	ldr	r1, [r0, #16]
 800a262:	6880      	ldr	r0, [r0, #8]
 800a264:	2300      	movs	r3, #0
 800a266:	f10d 020f 	add.w	r2, sp, #15
 800a26a:	f88d 300f 	strb.w	r3, [sp, #15]
 800a26e:	f002 f913 	bl	800c498 <acc_radar_engine_a121_verify_radar_data_ready>
 800a272:	2800      	cmp	r0, #0
 800a274:	d0ec      	beq.n	800a250 <acc_sensor_read+0x20>
 800a276:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800a27a:	6920      	ldr	r0, [r4, #16]
 800a27c:	462a      	mov	r2, r5
 800a27e:	f002 f94b 	bl	800c518 <acc_radar_engine_a121_update_buffer_header>
 800a282:	9500      	str	r5, [sp, #0]
 800a284:	88e3      	ldrh	r3, [r4, #6]
 800a286:	88a2      	ldrh	r2, [r4, #4]
 800a288:	6921      	ldr	r1, [r4, #16]
 800a28a:	68a0      	ldr	r0, [r4, #8]
 800a28c:	f002 f8e2 	bl	800c454 <acc_radar_engine_a121_transfer_data>
 800a290:	b005      	add	sp, #20
 800a292:	bd30      	pop	{r4, r5, pc}
 800a294:	4b02      	ldr	r3, [pc, #8]	@ (800a2a0 <acc_sensor_read+0x70>)
 800a296:	4a05      	ldr	r2, [pc, #20]	@ (800a2ac <acc_sensor_read+0x7c>)
 800a298:	e7d5      	b.n	800a246 <acc_sensor_read+0x16>
 800a29a:	bf00      	nop
 800a29c:	1337b00e 	.word	0x1337b00e
 800a2a0:	2000069c 	.word	0x2000069c
 800a2a4:	0801340c 	.word	0x0801340c
 800a2a8:	08013424 	.word	0x08013424
 800a2ac:	0801345c 	.word	0x0801345c

0800a2b0 <acc_calibration_a121_calibrate>:
 800a2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	461c      	mov	r4, r3
 800a2b6:	b091      	sub	sp, #68	@ 0x44
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800a2bc:	4605      	mov	r5, r0
 800a2be:	4688      	mov	r8, r1
 800a2c0:	4616      	mov	r6, r2
 800a2c2:	2b0a      	cmp	r3, #10
 800a2c4:	d859      	bhi.n	800a37a <acc_calibration_a121_calibrate+0xca>
 800a2c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a2ca:	0065      	.short	0x0065
 800a2cc:	00f2009d 	.word	0x00f2009d
 800a2d0:	000b015d 	.word	0x000b015d
 800a2d4:	020701d3 	.word	0x020701d3
 800a2d8:	029b0266 	.word	0x029b0266
 800a2dc:	006502d1 	.word	0x006502d1
 800a2e0:	f001 fc08 	bl	800baf4 <acc_a121_cal_session_ack_program>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	f000 808b 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a2ea:	aa08      	add	r2, sp, #32
 800a2ec:	4641      	mov	r1, r8
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	f001 fc52 	bl	800bb98 <acc_a121_cal_session_get_4_bba_vga_program_data>
 800a2f4:	48bd      	ldr	r0, [pc, #756]	@ (800a5ec <acc_calibration_a121_calibrate+0x33c>)
 800a2f6:	f8df b300 	ldr.w	fp, [pc, #768]	@ 800a5f8 <acc_calibration_a121_calibrate+0x348>
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	f004 fd22 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a300:	49bb      	ldr	r1, [pc, #748]	@ (800a5f0 <acc_calibration_a121_calibrate+0x340>)
 800a302:	48bc      	ldr	r0, [pc, #752]	@ (800a5f4 <acc_calibration_a121_calibrate+0x344>)
 800a304:	f004 fd16 	bl	800ed34 <acc_diagnostic_log_array>
 800a308:	9808      	ldr	r0, [sp, #32]
 800a30a:	2150      	movs	r1, #80	@ 0x50
 800a30c:	f004 fd2a 	bl	800ed64 <acc_diagnostic_log_data_i16>
 800a310:	f107 0a0a 	add.w	sl, r7, #10
 800a314:	f04f 0900 	mov.w	r9, #0
 800a318:	9808      	ldr	r0, [sp, #32]
 800a31a:	a905      	add	r1, sp, #20
 800a31c:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800a320:	f000 fcc8 	bl	800acb4 <acc_cal_algorithms_bba_cal_ctrl>
 800a324:	4603      	mov	r3, r0
 800a326:	f109 0230 	add.w	r2, r9, #48	@ 0x30
 800a32a:	48b3      	ldr	r0, [pc, #716]	@ (800a5f8 <acc_calibration_a121_calibrate+0x348>)
 800a32c:	f109 0901 	add.w	r9, r9, #1
 800a330:	2b00      	cmp	r3, #0
 800a332:	d065      	beq.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a334:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a338:	f88b 200d 	strb.w	r2, [fp, #13]
 800a33c:	f004 fd02 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a340:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a344:	f82a 3f02 	strh.w	r3, [sl, #2]!
 800a348:	f1b9 0f0a 	cmp.w	r9, #10
 800a34c:	d1e4      	bne.n	800a318 <acc_calibration_a121_calibrate+0x68>
 800a34e:	48ab      	ldr	r0, [pc, #684]	@ (800a5fc <acc_calibration_a121_calibrate+0x34c>)
 800a350:	f004 fce8 	bl	800ed24 <acc_diagnostic_log_set_scope>
 800a354:	4baa      	ldr	r3, [pc, #680]	@ (800a600 <acc_calibration_a121_calibrate+0x350>)
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	2260      	movs	r2, #96	@ 0x60
 800a35a:	9201      	str	r2, [sp, #4]
 800a35c:	4641      	mov	r1, r8
 800a35e:	4632      	mov	r2, r6
 800a360:	2300      	movs	r3, #0
 800a362:	4628      	mov	r0, r5
 800a364:	f002 fc64 	bl	800cc30 <acc_sensor_protocol_a121_load_lut>
 800a368:	2800      	cmp	r0, #0
 800a36a:	f040 82f7 	bne.w	800a95c <acc_calibration_a121_calibrate+0x6ac>
 800a36e:	4ba5      	ldr	r3, [pc, #660]	@ (800a604 <acc_calibration_a121_calibrate+0x354>)
 800a370:	4aa5      	ldr	r2, [pc, #660]	@ (800a608 <acc_calibration_a121_calibrate+0x358>)
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	49a5      	ldr	r1, [pc, #660]	@ (800a60c <acc_calibration_a121_calibrate+0x35c>)
 800a376:	4798      	blx	r3
 800a378:	7823      	ldrb	r3, [r4, #0]
 800a37a:	49a2      	ldr	r1, [pc, #648]	@ (800a604 <acc_calibration_a121_calibrate+0x354>)
 800a37c:	4aa4      	ldr	r2, [pc, #656]	@ (800a610 <acc_calibration_a121_calibrate+0x360>)
 800a37e:	690e      	ldr	r6, [r1, #16]
 800a380:	49a2      	ldr	r1, [pc, #648]	@ (800a60c <acc_calibration_a121_calibrate+0x35c>)
 800a382:	2000      	movs	r0, #0
 800a384:	4605      	mov	r5, r0
 800a386:	47b0      	blx	r6
 800a388:	462b      	mov	r3, r5
 800a38a:	4628      	mov	r0, r5
 800a38c:	7023      	strb	r3, [r4, #0]
 800a38e:	b011      	add	sp, #68	@ 0x44
 800a390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a394:	228c      	movs	r2, #140	@ 0x8c
 800a396:	2100      	movs	r1, #0
 800a398:	4638      	mov	r0, r7
 800a39a:	f005 fd43 	bl	800fe24 <memset>
 800a39e:	f001 fde5 	bl	800bf6c <acc_rss_integration_get_sensor_reference_frequency>
 800a3a2:	ee07 0a90 	vmov	s15, r0
 800a3a6:	f107 0a80 	add.w	sl, r7, #128	@ 0x80
 800a3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ae:	4651      	mov	r1, sl
 800a3b0:	a808      	add	r0, sp, #32
 800a3b2:	edcd 7a08 	vstr	s15, [sp, #32]
 800a3b6:	f004 fb6f 	bl	800ea98 <acc_cpd_pll_divisors_calculate>
 800a3ba:	4681      	mov	r9, r0
 800a3bc:	4895      	ldr	r0, [pc, #596]	@ (800a614 <acc_calibration_a121_calibrate+0x364>)
 800a3be:	f004 fcb1 	bl	800ed24 <acc_diagnostic_log_set_scope>
 800a3c2:	488a      	ldr	r0, [pc, #552]	@ (800a5ec <acc_calibration_a121_calibrate+0x33c>)
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	f004 fcbd 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a3ca:	f8b7 1082 	ldrh.w	r1, [r7, #130]	@ 0x82
 800a3ce:	4892      	ldr	r0, [pc, #584]	@ (800a618 <acc_calibration_a121_calibrate+0x368>)
 800a3d0:	f004 fcb8 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a3d4:	f8b7 1084 	ldrh.w	r1, [r7, #132]	@ 0x84
 800a3d8:	4890      	ldr	r0, [pc, #576]	@ (800a61c <acc_calibration_a121_calibrate+0x36c>)
 800a3da:	f004 fcb3 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a3de:	f8b7 1086 	ldrh.w	r1, [r7, #134]	@ 0x86
 800a3e2:	488f      	ldr	r0, [pc, #572]	@ (800a620 <acc_calibration_a121_calibrate+0x370>)
 800a3e4:	f004 fcae 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a3e8:	488e      	ldr	r0, [pc, #568]	@ (800a624 <acc_calibration_a121_calibrate+0x374>)
 800a3ea:	f8b7 1080 	ldrh.w	r1, [r7, #128]	@ 0x80
 800a3ee:	f004 fca9 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a3f2:	488d      	ldr	r0, [pc, #564]	@ (800a628 <acc_calibration_a121_calibrate+0x378>)
 800a3f4:	f004 fc96 	bl	800ed24 <acc_diagnostic_log_set_scope>
 800a3f8:	f1b9 0f00 	cmp.w	r9, #0
 800a3fc:	f040 82a2 	bne.w	800a944 <acc_calibration_a121_calibrate+0x694>
 800a400:	7823      	ldrb	r3, [r4, #0]
 800a402:	e7ba      	b.n	800a37a <acc_calibration_a121_calibrate+0xca>
 800a404:	f001 fb76 	bl	800baf4 <acc_a121_cal_session_ack_program>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d0f9      	beq.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a40c:	aa08      	add	r2, sp, #32
 800a40e:	ab05      	add	r3, sp, #20
 800a410:	e9cd 3200 	strd	r3, r2, [sp]
 800a414:	4641      	mov	r1, r8
 800a416:	ab03      	add	r3, sp, #12
 800a418:	f10d 020e 	add.w	r2, sp, #14
 800a41c:	4628      	mov	r0, r5
 800a41e:	f001 fb8b 	bl	800bb38 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>
 800a422:	4872      	ldr	r0, [pc, #456]	@ (800a5ec <acc_calibration_a121_calibrate+0x33c>)
 800a424:	4629      	mov	r1, r5
 800a426:	f004 fc8d 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a42a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a42e:	487f      	ldr	r0, [pc, #508]	@ (800a62c <acc_calibration_a121_calibrate+0x37c>)
 800a430:	f004 fc88 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a434:	496e      	ldr	r1, [pc, #440]	@ (800a5f0 <acc_calibration_a121_calibrate+0x340>)
 800a436:	487e      	ldr	r0, [pc, #504]	@ (800a630 <acc_calibration_a121_calibrate+0x380>)
 800a438:	f004 fc7c 	bl	800ed34 <acc_diagnostic_log_array>
 800a43c:	9808      	ldr	r0, [sp, #32]
 800a43e:	2110      	movs	r1, #16
 800a440:	f004 fc88 	bl	800ed54 <acc_diagnostic_log_data_u16>
 800a444:	9a08      	ldr	r2, [sp, #32]
 800a446:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a44a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800a44e:	ab04      	add	r3, sp, #16
 800a450:	f000 fad6 	bl	800aa00 <acc_cal_algorithms_pll_cbank>
 800a454:	2800      	cmp	r0, #0
 800a456:	d0d3      	beq.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a458:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800a45c:	f000 fe4e 	bl	800b0fc <acc_cal_algorithms_wavelet_duration_p1>
 800a460:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a464:	4606      	mov	r6, r0
 800a466:	4873      	ldr	r0, [pc, #460]	@ (800a634 <acc_calibration_a121_calibrate+0x384>)
 800a468:	f004 fc6c 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a46c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800a470:	4871      	ldr	r0, [pc, #452]	@ (800a638 <acc_calibration_a121_calibrate+0x388>)
 800a472:	f004 fc67 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a476:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800a47a:	4870      	ldr	r0, [pc, #448]	@ (800a63c <acc_calibration_a121_calibrate+0x38c>)
 800a47c:	f004 fc62 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a480:	486f      	ldr	r0, [pc, #444]	@ (800a640 <acc_calibration_a121_calibrate+0x390>)
 800a482:	4631      	mov	r1, r6
 800a484:	f004 fc5e 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a488:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a48c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800a490:	803b      	strh	r3, [r7, #0]
 800a492:	4628      	mov	r0, r5
 800a494:	84be      	strh	r6, [r7, #36]	@ 0x24
 800a496:	8079      	strh	r1, [r7, #2]
 800a498:	f001 f99c 	bl	800b7d4 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>
 800a49c:	4605      	mov	r5, r0
 800a49e:	2302      	movs	r3, #2
 800a4a0:	2d00      	cmp	r5, #0
 800a4a2:	d0ad      	beq.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	7023      	strb	r3, [r4, #0]
 800a4a8:	b011      	add	sp, #68	@ 0x44
 800a4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ae:	f001 fb21 	bl	800baf4 <acc_a121_cal_session_ack_program>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d0a4      	beq.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a4b6:	ab08      	add	r3, sp, #32
 800a4b8:	aa05      	add	r2, sp, #20
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	4641      	mov	r1, r8
 800a4be:	ab04      	add	r3, sp, #16
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	f001 fb51 	bl	800bb68 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>
 800a4c6:	494a      	ldr	r1, [pc, #296]	@ (800a5f0 <acc_calibration_a121_calibrate+0x340>)
 800a4c8:	485e      	ldr	r0, [pc, #376]	@ (800a644 <acc_calibration_a121_calibrate+0x394>)
 800a4ca:	f004 fc33 	bl	800ed34 <acc_diagnostic_log_array>
 800a4ce:	9805      	ldr	r0, [sp, #20]
 800a4d0:	2110      	movs	r1, #16
 800a4d2:	f004 fc47 	bl	800ed64 <acc_diagnostic_log_data_i16>
 800a4d6:	9805      	ldr	r0, [sp, #20]
 800a4d8:	a903      	add	r1, sp, #12
 800a4da:	f000 facb 	bl	800aa74 <acc_cal_algorithms_pll_ibias>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d08e      	beq.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a4e2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800a4e6:	4858      	ldr	r0, [pc, #352]	@ (800a648 <acc_calibration_a121_calibrate+0x398>)
 800a4e8:	f004 fc2c 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a4ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a4f0:	80bb      	strh	r3, [r7, #4]
 800a4f2:	4856      	ldr	r0, [pc, #344]	@ (800a64c <acc_calibration_a121_calibrate+0x39c>)
 800a4f4:	f004 fc16 	bl	800ed24 <acc_diagnostic_log_set_scope>
 800a4f8:	483c      	ldr	r0, [pc, #240]	@ (800a5ec <acc_calibration_a121_calibrate+0x33c>)
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	f004 fc22 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a500:	493b      	ldr	r1, [pc, #236]	@ (800a5f0 <acc_calibration_a121_calibrate+0x340>)
 800a502:	4853      	ldr	r0, [pc, #332]	@ (800a650 <acc_calibration_a121_calibrate+0x3a0>)
 800a504:	f004 fc16 	bl	800ed34 <acc_diagnostic_log_array>
 800a508:	9808      	ldr	r0, [sp, #32]
 800a50a:	2130      	movs	r1, #48	@ 0x30
 800a50c:	f004 fc22 	bl	800ed54 <acc_diagnostic_log_data_u16>
 800a510:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800a514:	484f      	ldr	r0, [pc, #316]	@ (800a654 <acc_calibration_a121_calibrate+0x3a4>)
 800a516:	f004 fc15 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a51a:	9908      	ldr	r1, [sp, #32]
 800a51c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800a520:	f10d 020e 	add.w	r2, sp, #14
 800a524:	f000 faf0 	bl	800ab08 <acc_cal_algorithms_vfast2_ldo>
 800a528:	2800      	cmp	r0, #0
 800a52a:	f43f af69 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a52e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800a532:	4849      	ldr	r0, [pc, #292]	@ (800a658 <acc_calibration_a121_calibrate+0x3a8>)
 800a534:	f004 fc06 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a538:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a53c:	4847      	ldr	r0, [pc, #284]	@ (800a65c <acc_calibration_a121_calibrate+0x3ac>)
 800a53e:	817b      	strh	r3, [r7, #10]
 800a540:	f004 fbf0 	bl	800ed24 <acc_diagnostic_log_set_scope>
 800a544:	2001      	movs	r0, #1
 800a546:	ab02      	add	r3, sp, #8
 800a548:	e9cd 3000 	strd	r3, r0, [sp]
 800a54c:	4632      	mov	r2, r6
 800a54e:	4641      	mov	r1, r8
 800a550:	f44f 567e 	mov.w	r6, #16256	@ 0x3f80
 800a554:	2300      	movs	r3, #0
 800a556:	4628      	mov	r0, r5
 800a558:	f8ad 6008 	strh.w	r6, [sp, #8]
 800a55c:	f002 fb68 	bl	800cc30 <acc_sensor_protocol_a121_load_lut>
 800a560:	b920      	cbnz	r0, 800a56c <acc_calibration_a121_calibrate+0x2bc>
 800a562:	4b28      	ldr	r3, [pc, #160]	@ (800a604 <acc_calibration_a121_calibrate+0x354>)
 800a564:	4a3e      	ldr	r2, [pc, #248]	@ (800a660 <acc_calibration_a121_calibrate+0x3b0>)
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	4928      	ldr	r1, [pc, #160]	@ (800a60c <acc_calibration_a121_calibrate+0x35c>)
 800a56a:	4798      	blx	r3
 800a56c:	4628      	mov	r0, r5
 800a56e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800a572:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800a576:	f001 f94b 	bl	800b810 <acc_a121_cal_session_start_3_delay_cbank_program>
 800a57a:	4605      	mov	r5, r0
 800a57c:	2303      	movs	r3, #3
 800a57e:	2d00      	cmp	r5, #0
 800a580:	d190      	bne.n	800a4a4 <acc_calibration_a121_calibrate+0x1f4>
 800a582:	e73d      	b.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a584:	2300      	movs	r3, #0
 800a586:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a58a:	f001 fab3 	bl	800baf4 <acc_a121_cal_session_ack_program>
 800a58e:	2800      	cmp	r0, #0
 800a590:	f43f af36 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a594:	aa08      	add	r2, sp, #32
 800a596:	4641      	mov	r1, r8
 800a598:	4628      	mov	r0, r5
 800a59a:	f001 faf5 	bl	800bb88 <acc_a121_cal_session_get_3_delay_cbank_program_data>
 800a59e:	4813      	ldr	r0, [pc, #76]	@ (800a5ec <acc_calibration_a121_calibrate+0x33c>)
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	f004 fbcf 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a5a6:	4912      	ldr	r1, [pc, #72]	@ (800a5f0 <acc_calibration_a121_calibrate+0x340>)
 800a5a8:	482e      	ldr	r0, [pc, #184]	@ (800a664 <acc_calibration_a121_calibrate+0x3b4>)
 800a5aa:	f004 fbc3 	bl	800ed34 <acc_diagnostic_log_array>
 800a5ae:	9808      	ldr	r0, [sp, #32]
 800a5b0:	2120      	movs	r1, #32
 800a5b2:	f004 fbd7 	bl	800ed64 <acc_diagnostic_log_data_i16>
 800a5b6:	9808      	ldr	r0, [sp, #32]
 800a5b8:	a905      	add	r1, sp, #20
 800a5ba:	f000 faf1 	bl	800aba0 <acc_cal_algorithms_delay_cbank>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	f43f af1e 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a5c4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a5c8:	4827      	ldr	r0, [pc, #156]	@ (800a668 <acc_calibration_a121_calibrate+0x3b8>)
 800a5ca:	f004 fbbb 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a5ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a5d2:	80fb      	strh	r3, [r7, #6]
 800a5d4:	4825      	ldr	r0, [pc, #148]	@ (800a66c <acc_calibration_a121_calibrate+0x3bc>)
 800a5d6:	f004 fba5 	bl	800ed24 <acc_diagnostic_log_set_scope>
 800a5da:	4628      	mov	r0, r5
 800a5dc:	f001 f946 	bl	800b86c <acc_a121_cal_session_start_4_bba_vga_program>
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	2304      	movs	r3, #4
 800a5e4:	2d00      	cmp	r5, #0
 800a5e6:	f47f af5d 	bne.w	800a4a4 <acc_calibration_a121_calibrate+0x1f4>
 800a5ea:	e709      	b.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a5ec:	08013474 	.word	0x08013474
 800a5f0:	08013be0 	.word	0x08013be0
 800a5f4:	08013620 	.word	0x08013620
 800a5f8:	2000000c 	.word	0x2000000c
 800a5fc:	08013638 	.word	0x08013638
 800a600:	08015bec 	.word	0x08015bec
 800a604:	2000069c 	.word	0x2000069c
 800a608:	08013650 	.word	0x08013650
 800a60c:	080135c8 	.word	0x080135c8
 800a610:	080138f0 	.word	0x080138f0
 800a614:	08014324 	.word	0x08014324
 800a618:	08013480 	.word	0x08013480
 800a61c:	08013490 	.word	0x08013490
 800a620:	0801349c 	.word	0x0801349c
 800a624:	080134a8 	.word	0x080134a8
 800a628:	080134b8 	.word	0x080134b8
 800a62c:	080134c8 	.word	0x080134c8
 800a630:	080134d4 	.word	0x080134d4
 800a634:	080134f0 	.word	0x080134f0
 800a638:	080134fc 	.word	0x080134fc
 800a63c:	08013504 	.word	0x08013504
 800a640:	08013510 	.word	0x08013510
 800a644:	0801351c 	.word	0x0801351c
 800a648:	0801353c 	.word	0x0801353c
 800a64c:	08013548 	.word	0x08013548
 800a650:	08013560 	.word	0x08013560
 800a654:	08013574 	.word	0x08013574
 800a658:	08013580 	.word	0x08013580
 800a65c:	0801358c 	.word	0x0801358c
 800a660:	080135a4 	.word	0x080135a4
 800a664:	080135dc 	.word	0x080135dc
 800a668:	08013600 	.word	0x08013600
 800a66c:	0801360c 	.word	0x0801360c
 800a670:	f001 fa40 	bl	800baf4 <acc_a121_cal_session_ack_program>
 800a674:	2800      	cmp	r0, #0
 800a676:	f43f aec3 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a67a:	aa08      	add	r2, sp, #32
 800a67c:	4641      	mov	r1, r8
 800a67e:	4628      	mov	r0, r5
 800a680:	f001 fa92 	bl	800bba8 <acc_a121_cal_session_get_5_area_index_program_data>
 800a684:	49bb      	ldr	r1, [pc, #748]	@ (800a974 <acc_calibration_a121_calibrate+0x6c4>)
 800a686:	48bc      	ldr	r0, [pc, #752]	@ (800a978 <acc_calibration_a121_calibrate+0x6c8>)
 800a688:	f004 fb54 	bl	800ed34 <acc_diagnostic_log_array>
 800a68c:	9808      	ldr	r0, [sp, #32]
 800a68e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800a692:	f004 fb67 	bl	800ed64 <acc_diagnostic_log_data_i16>
 800a696:	9808      	ldr	r0, [sp, #32]
 800a698:	a905      	add	r1, sp, #20
 800a69a:	f000 fb7b 	bl	800ad94 <acc_cal_algorithms_area_index>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	f43f aeae 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a6a4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a6a8:	48b4      	ldr	r0, [pc, #720]	@ (800a97c <acc_calibration_a121_calibrate+0x6cc>)
 800a6aa:	f004 fb4b 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a6ae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a6b2:	813b      	strh	r3, [r7, #8]
 800a6b4:	48b2      	ldr	r0, [pc, #712]	@ (800a980 <acc_calibration_a121_calibrate+0x6d0>)
 800a6b6:	f004 fb35 	bl	800ed24 <acc_diagnostic_log_set_scope>
 800a6ba:	8938      	ldrh	r0, [r7, #8]
 800a6bc:	aa08      	add	r2, sp, #32
 800a6be:	2160      	movs	r1, #96	@ 0x60
 800a6c0:	f004 fad0 	bl	800ec64 <acc_dll_calculate_area_settings>
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	a908      	add	r1, sp, #32
 800a6c8:	f001 f924 	bl	800b914 <acc_a121_cal_session_start_6_tx_freq_program>
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	2306      	movs	r3, #6
 800a6d0:	2d00      	cmp	r5, #0
 800a6d2:	f47f aee7 	bne.w	800a4a4 <acc_calibration_a121_calibrate+0x1f4>
 800a6d6:	e693      	b.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a6d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a6dc:	f8ad 3010 	strh.w	r3, [sp, #16]
 800a6e0:	f001 fa08 	bl	800baf4 <acc_a121_cal_session_ack_program>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	f43f ae8b 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a6ea:	f001 fc3f 	bl	800bf6c <acc_rss_integration_get_sensor_reference_frequency>
 800a6ee:	4ea5      	ldr	r6, [pc, #660]	@ (800a984 <acc_calibration_a121_calibrate+0x6d4>)
 800a6f0:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800a6f4:	f8df 92ec 	ldr.w	r9, [pc, #748]	@ 800a9e4 <acc_calibration_a121_calibrate+0x734>
 800a6f8:	fba6 2600 	umull	r2, r6, r6, r0
 800a6fc:	4641      	mov	r1, r8
 800a6fe:	aa05      	add	r2, sp, #20
 800a700:	4628      	mov	r0, r5
 800a702:	09b6      	lsrs	r6, r6, #6
 800a704:	fb06 f603 	mul.w	r6, r6, r3
 800a708:	f001 fa58 	bl	800bbbc <acc_a121_cal_session_get_6_tx_freq_program_data>
 800a70c:	4999      	ldr	r1, [pc, #612]	@ (800a974 <acc_calibration_a121_calibrate+0x6c4>)
 800a70e:	489e      	ldr	r0, [pc, #632]	@ (800a988 <acc_calibration_a121_calibrate+0x6d8>)
 800a710:	f004 fb10 	bl	800ed34 <acc_diagnostic_log_array>
 800a714:	9805      	ldr	r0, [sp, #20]
 800a716:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800a71a:	f004 fb23 	bl	800ed64 <acc_diagnostic_log_data_i16>
 800a71e:	ab04      	add	r3, sp, #16
 800a720:	4630      	mov	r0, r6
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	4a99      	ldr	r2, [pc, #612]	@ (800a98c <acc_calibration_a121_calibrate+0x6dc>)
 800a726:	9905      	ldr	r1, [sp, #20]
 800a728:	ab08      	add	r3, sp, #32
 800a72a:	f000 fd27 	bl	800b17c <acc_cal_algorithms_tx_freq_ctrl>
 800a72e:	46cb      	mov	fp, r9
 800a730:	4682      	mov	sl, r0
 800a732:	f10d 081c 	add.w	r8, sp, #28
 800a736:	2630      	movs	r6, #48	@ 0x30
 800a738:	f889 600c 	strb.w	r6, [r9, #12]
 800a73c:	3601      	adds	r6, #1
 800a73e:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800a742:	4658      	mov	r0, fp
 800a744:	b2f6      	uxtb	r6, r6
 800a746:	f004 fafd 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a74a:	2e38      	cmp	r6, #56	@ 0x38
 800a74c:	d1f4      	bne.n	800a738 <acc_calibration_a121_calibrate+0x488>
 800a74e:	f1ba 0f00 	cmp.w	sl, #0
 800a752:	f43f ae55 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a756:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800a75a:	488d      	ldr	r0, [pc, #564]	@ (800a990 <acc_calibration_a121_calibrate+0x6e0>)
 800a75c:	f004 faf2 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a760:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800a764:	488b      	ldr	r0, [pc, #556]	@ (800a994 <acc_calibration_a121_calibrate+0x6e4>)
 800a766:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a768:	f004 fadc 	bl	800ed24 <acc_diagnostic_log_set_scope>
 800a76c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800a770:	4628      	mov	r0, r5
 800a772:	f001 f95f 	bl	800ba34 <acc_a121_cal_session_start_7_rx_freq_program>
 800a776:	2800      	cmp	r0, #0
 800a778:	f43f ae42 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a77c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a780:	9805      	ldr	r0, [sp, #20]
 800a782:	2201      	movs	r2, #1
 800a784:	2100      	movs	r1, #0
 800a786:	f000 fbcd 	bl	800af24 <acc_cal_algorithms_iq_imbalance>
 800a78a:	4605      	mov	r5, r0
 800a78c:	2307      	movs	r3, #7
 800a78e:	2d00      	cmp	r5, #0
 800a790:	f47f ae88 	bne.w	800a4a4 <acc_calibration_a121_calibrate+0x1f4>
 800a794:	e634      	b.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a79a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a79e:	f001 f9a9 	bl	800baf4 <acc_a121_cal_session_ack_program>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	f43f ae2c 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a7a8:	aa08      	add	r2, sp, #32
 800a7aa:	4641      	mov	r1, r8
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	f001 fa07 	bl	800bbc0 <acc_a121_cal_session_get_7_rx_freq_program_data>
 800a7b2:	4970      	ldr	r1, [pc, #448]	@ (800a974 <acc_calibration_a121_calibrate+0x6c4>)
 800a7b4:	4878      	ldr	r0, [pc, #480]	@ (800a998 <acc_calibration_a121_calibrate+0x6e8>)
 800a7b6:	f004 fabd 	bl	800ed34 <acc_diagnostic_log_array>
 800a7ba:	9808      	ldr	r0, [sp, #32]
 800a7bc:	2110      	movs	r1, #16
 800a7be:	f004 fad1 	bl	800ed64 <acc_diagnostic_log_data_i16>
 800a7c2:	9808      	ldr	r0, [sp, #32]
 800a7c4:	aa05      	add	r2, sp, #20
 800a7c6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800a7ca:	f000 fc55 	bl	800b078 <acc_cal_algorithms_rx_freq_ctrl>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f43f ae16 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a7d4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a7d8:	4870      	ldr	r0, [pc, #448]	@ (800a99c <acc_calibration_a121_calibrate+0x6ec>)
 800a7da:	f004 fab3 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a7de:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a7e2:	843b      	strh	r3, [r7, #32]
 800a7e4:	486e      	ldr	r0, [pc, #440]	@ (800a9a0 <acc_calibration_a121_calibrate+0x6f0>)
 800a7e6:	f004 fa9d 	bl	800ed24 <acc_diagnostic_log_set_scope>
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800a7f0:	f001 f93e 	bl	800ba70 <acc_a121_cal_session_start_8_phase_enhancement_program>
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	2308      	movs	r3, #8
 800a7f8:	2d00      	cmp	r5, #0
 800a7fa:	f47f ae53 	bne.w	800a4a4 <acc_calibration_a121_calibrate+0x1f4>
 800a7fe:	e5ff      	b.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a800:	f001 f978 	bl	800baf4 <acc_a121_cal_session_ack_program>
 800a804:	2800      	cmp	r0, #0
 800a806:	f43f adfb 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a80a:	aa08      	add	r2, sp, #32
 800a80c:	4641      	mov	r1, r8
 800a80e:	4628      	mov	r0, r5
 800a810:	f001 f9de 	bl	800bbd0 <acc_a121_cal_session_get_8_phase_enhancement_program_data>
 800a814:	4957      	ldr	r1, [pc, #348]	@ (800a974 <acc_calibration_a121_calibrate+0x6c4>)
 800a816:	4863      	ldr	r0, [pc, #396]	@ (800a9a4 <acc_calibration_a121_calibrate+0x6f4>)
 800a818:	f004 fa8c 	bl	800ed34 <acc_diagnostic_log_array>
 800a81c:	f107 0626 	add.w	r6, r7, #38	@ 0x26
 800a820:	9808      	ldr	r0, [sp, #32]
 800a822:	2160      	movs	r1, #96	@ 0x60
 800a824:	f004 fa9e 	bl	800ed64 <acc_diagnostic_log_data_i16>
 800a828:	9808      	ldr	r0, [sp, #32]
 800a82a:	4631      	mov	r1, r6
 800a82c:	f107 0256 	add.w	r2, r7, #86	@ 0x56
 800a830:	f000 fd34 	bl	800b29c <acc_cal_algorithms_phase_enhancement>
 800a834:	2800      	cmp	r0, #0
 800a836:	f43f ade3 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a83a:	494e      	ldr	r1, [pc, #312]	@ (800a974 <acc_calibration_a121_calibrate+0x6c4>)
 800a83c:	485a      	ldr	r0, [pc, #360]	@ (800a9a8 <acc_calibration_a121_calibrate+0x6f8>)
 800a83e:	f004 fa79 	bl	800ed34 <acc_diagnostic_log_array>
 800a842:	4630      	mov	r0, r6
 800a844:	2118      	movs	r1, #24
 800a846:	f004 fa8d 	bl	800ed64 <acc_diagnostic_log_data_i16>
 800a84a:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	@ 0x56
 800a84e:	4857      	ldr	r0, [pc, #348]	@ (800a9ac <acc_calibration_a121_calibrate+0x6fc>)
 800a850:	f004 fa78 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a854:	4856      	ldr	r0, [pc, #344]	@ (800a9b0 <acc_calibration_a121_calibrate+0x700>)
 800a856:	f004 fa65 	bl	800ed24 <acc_diagnostic_log_set_scope>
 800a85a:	4628      	mov	r0, r5
 800a85c:	f001 f946 	bl	800baec <acc_a121_cal_session_start_9_pulseshaper_program>
 800a860:	4605      	mov	r5, r0
 800a862:	2309      	movs	r3, #9
 800a864:	2d00      	cmp	r5, #0
 800a866:	f47f ae1d 	bne.w	800a4a4 <acc_calibration_a121_calibrate+0x1f4>
 800a86a:	e5c9      	b.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a86c:	f001 f942 	bl	800baf4 <acc_a121_cal_session_ack_program>
 800a870:	2800      	cmp	r0, #0
 800a872:	f43f adc5 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a876:	aa08      	add	r2, sp, #32
 800a878:	ab04      	add	r3, sp, #16
 800a87a:	4641      	mov	r1, r8
 800a87c:	4628      	mov	r0, r5
 800a87e:	f001 f9af 	bl	800bbe0 <acc_a121_cal_session_get_9_pulseshaper_program_data>
 800a882:	493c      	ldr	r1, [pc, #240]	@ (800a974 <acc_calibration_a121_calibrate+0x6c4>)
 800a884:	484b      	ldr	r0, [pc, #300]	@ (800a9b4 <acc_calibration_a121_calibrate+0x704>)
 800a886:	f004 fa55 	bl	800ed34 <acc_diagnostic_log_array>
 800a88a:	9808      	ldr	r0, [sp, #32]
 800a88c:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800a890:	f004 fa60 	bl	800ed54 <acc_diagnostic_log_data_u16>
 800a894:	9808      	ldr	r0, [sp, #32]
 800a896:	a905      	add	r1, sp, #20
 800a898:	f000 fe58 	bl	800b54c <acc_cal_algorithms_pulseshaper_wavelet>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	f43f adaf 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a8a2:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 800a8a6:	9b07      	ldr	r3, [sp, #28]
 800a8a8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a8aa:	e9c7 2117 	strd	r2, r1, [r7, #92]	@ 0x5c
 800a8ae:	4842      	ldr	r0, [pc, #264]	@ (800a9b8 <acc_calibration_a121_calibrate+0x708>)
 800a8b0:	f004 fa48 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a8b4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800a8b6:	4841      	ldr	r0, [pc, #260]	@ (800a9bc <acc_calibration_a121_calibrate+0x70c>)
 800a8b8:	f004 fa44 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a8bc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a8be:	4840      	ldr	r0, [pc, #256]	@ (800a9c0 <acc_calibration_a121_calibrate+0x710>)
 800a8c0:	f004 fa40 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a8c4:	483f      	ldr	r0, [pc, #252]	@ (800a9c4 <acc_calibration_a121_calibrate+0x714>)
 800a8c6:	f004 fa2d 	bl	800ed24 <acc_diagnostic_log_set_scope>
 800a8ca:	492a      	ldr	r1, [pc, #168]	@ (800a974 <acc_calibration_a121_calibrate+0x6c4>)
 800a8cc:	483e      	ldr	r0, [pc, #248]	@ (800a9c8 <acc_calibration_a121_calibrate+0x718>)
 800a8ce:	f004 fa31 	bl	800ed34 <acc_diagnostic_log_array>
 800a8d2:	9804      	ldr	r0, [sp, #16]
 800a8d4:	f44f 7158 	mov.w	r1, #864	@ 0x360
 800a8d8:	f004 fa3c 	bl	800ed54 <acc_diagnostic_log_data_u16>
 800a8dc:	9804      	ldr	r0, [sp, #16]
 800a8de:	a908      	add	r1, sp, #32
 800a8e0:	f000 fe7c 	bl	800b5dc <acc_cal_algorithms_pulseshaper_supply>
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	f43f ad8a 	beq.w	800a400 <acc_calibration_a121_calibrate+0x150>
 800a8ec:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800a8f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8f2:	66b9      	str	r1, [r7, #104]	@ 0x68
 800a8f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a8f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a8fa:	673b      	str	r3, [r7, #112]	@ 0x70
 800a8fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a900:	e9c7 121d 	strd	r1, r2, [r7, #116]	@ 0x74
 800a904:	4638      	mov	r0, r7
 800a906:	218c      	movs	r1, #140	@ 0x8c
 800a908:	f003 fdbe 	bl	800e488 <acc_alg_basic_util_crc32>
 800a90c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a90e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800a912:	482e      	ldr	r0, [pc, #184]	@ (800a9cc <acc_calibration_a121_calibrate+0x71c>)
 800a914:	f004 fa16 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a918:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a91a:	482d      	ldr	r0, [pc, #180]	@ (800a9d0 <acc_calibration_a121_calibrate+0x720>)
 800a91c:	f004 fa12 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a920:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800a922:	482c      	ldr	r0, [pc, #176]	@ (800a9d4 <acc_calibration_a121_calibrate+0x724>)
 800a924:	f004 fa0e 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a928:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800a92a:	482b      	ldr	r0, [pc, #172]	@ (800a9d8 <acc_calibration_a121_calibrate+0x728>)
 800a92c:	f004 fa0a 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a930:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a932:	482a      	ldr	r0, [pc, #168]	@ (800a9dc <acc_calibration_a121_calibrate+0x72c>)
 800a934:	f004 fa06 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a938:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a93a:	4829      	ldr	r0, [pc, #164]	@ (800a9e0 <acc_calibration_a121_calibrate+0x730>)
 800a93c:	f004 fa02 	bl	800ed44 <acc_diagnostic_log_scalar>
 800a940:	230a      	movs	r3, #10
 800a942:	e522      	b.n	800a38a <acc_calibration_a121_calibrate+0xda>
 800a944:	4653      	mov	r3, sl
 800a946:	4628      	mov	r0, r5
 800a948:	4632      	mov	r2, r6
 800a94a:	4641      	mov	r1, r8
 800a94c:	f000 feca 	bl	800b6e4 <acc_a121_cal_session_start_1_pll_cbank_temp_program>
 800a950:	4605      	mov	r5, r0
 800a952:	2301      	movs	r3, #1
 800a954:	2d00      	cmp	r5, #0
 800a956:	f47f ada5 	bne.w	800a4a4 <acc_calibration_a121_calibrate+0x1f4>
 800a95a:	e551      	b.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a95c:	4628      	mov	r0, r5
 800a95e:	88fa      	ldrh	r2, [r7, #6]
 800a960:	f107 010c 	add.w	r1, r7, #12
 800a964:	f000 ff86 	bl	800b874 <acc_a121_cal_session_start_5_area_index_program>
 800a968:	4605      	mov	r5, r0
 800a96a:	2305      	movs	r3, #5
 800a96c:	2d00      	cmp	r5, #0
 800a96e:	f47f ad99 	bne.w	800a4a4 <acc_calibration_a121_calibrate+0x1f4>
 800a972:	e545      	b.n	800a400 <acc_calibration_a121_calibrate+0x150>
 800a974:	08013be0 	.word	0x08013be0
 800a978:	0801367c 	.word	0x0801367c
 800a97c:	080136a0 	.word	0x080136a0
 800a980:	080136ac 	.word	0x080136ac
 800a984:	10624dd3 	.word	0x10624dd3
 800a988:	080136c8 	.word	0x080136c8
 800a98c:	039b2820 	.word	0x039b2820
 800a990:	080136ec 	.word	0x080136ec
 800a994:	080136fc 	.word	0x080136fc
 800a998:	08013718 	.word	0x08013718
 800a99c:	0801373c 	.word	0x0801373c
 800a9a0:	0801374c 	.word	0x0801374c
 800a9a4:	0801376c 	.word	0x0801376c
 800a9a8:	08013798 	.word	0x08013798
 800a9ac:	080137c4 	.word	0x080137c4
 800a9b0:	080137e0 	.word	0x080137e0
 800a9b4:	080137f8 	.word	0x080137f8
 800a9b8:	0801380c 	.word	0x0801380c
 800a9bc:	08013820 	.word	0x08013820
 800a9c0:	08013834 	.word	0x08013834
 800a9c4:	08013844 	.word	0x08013844
 800a9c8:	0801385c 	.word	0x0801385c
 800a9cc:	08013870 	.word	0x08013870
 800a9d0:	08013884 	.word	0x08013884
 800a9d4:	08013898 	.word	0x08013898
 800a9d8:	080138ac 	.word	0x080138ac
 800a9dc:	080138c0 	.word	0x080138c0
 800a9e0:	080138d8 	.word	0x080138d8
 800a9e4:	2000001c 	.word	0x2000001c

0800a9e8 <acc_calibration_a121_validate_calibration>:
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	218c      	movs	r1, #140	@ 0x8c
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	f003 fd4b 	bl	800e488 <acc_alg_basic_util_crc32>
 800a9f2:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800a9f6:	1a18      	subs	r0, r3, r0
 800a9f8:	fab0 f080 	clz	r0, r0
 800a9fc:	0940      	lsrs	r0, r0, #5
 800a9fe:	bd10      	pop	{r4, pc}

0800aa00 <acc_cal_algorithms_pll_cbank>:
 800aa00:	b4f0      	push	{r4, r5, r6, r7}
 800aa02:	2400      	movs	r4, #0
 800aa04:	46a4      	mov	ip, r4
 800aa06:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800aa0a:	fa40 f504 	asr.w	r5, r0, r4
 800aa0e:	07ed      	lsls	r5, r5, #31
 800aa10:	b2a6      	uxth	r6, r4
 800aa12:	d50a      	bpl.n	800aa2a <acc_cal_algorithms_pll_cbank+0x2a>
 800aa14:	f832 5014 	ldrh.w	r5, [r2, r4, lsl #1]
 800aa18:	1a6d      	subs	r5, r5, r1
 800aa1a:	2d00      	cmp	r5, #0
 800aa1c:	bfb8      	it	lt
 800aa1e:	426d      	neglt	r5, r5
 800aa20:	b2ad      	uxth	r5, r5
 800aa22:	42bd      	cmp	r5, r7
 800aa24:	bf3c      	itt	cc
 800aa26:	462f      	movcc	r7, r5
 800aa28:	46b4      	movcc	ip, r6
 800aa2a:	3401      	adds	r4, #1
 800aa2c:	2c10      	cmp	r4, #16
 800aa2e:	d1ec      	bne.n	800aa0a <acc_cal_algorithms_pll_cbank+0xa>
 800aa30:	f10c 31ff 	add.w	r1, ip, #4294967295
 800aa34:	290d      	cmp	r1, #13
 800aa36:	d80c      	bhi.n	800aa52 <acc_cal_algorithms_pll_cbank+0x52>
 800aa38:	f10c 4100 	add.w	r1, ip, #2147483648	@ 0x80000000
 800aa3c:	3901      	subs	r1, #1
 800aa3e:	eb02 0541 	add.w	r5, r2, r1, lsl #1
 800aa42:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800aa46:	8869      	ldrh	r1, [r5, #2]
 800aa48:	f241 3487 	movw	r4, #4999	@ 0x1387
 800aa4c:	1a52      	subs	r2, r2, r1
 800aa4e:	42a2      	cmp	r2, r4
 800aa50:	dc02      	bgt.n	800aa58 <acc_cal_algorithms_pll_cbank+0x58>
 800aa52:	2000      	movs	r0, #0
 800aa54:	bcf0      	pop	{r4, r5, r6, r7}
 800aa56:	4770      	bx	lr
 800aa58:	88aa      	ldrh	r2, [r5, #4]
 800aa5a:	1a89      	subs	r1, r1, r2
 800aa5c:	42a1      	cmp	r1, r4
 800aa5e:	ddf8      	ble.n	800aa52 <acc_cal_algorithms_pll_cbank+0x52>
 800aa60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa64:	4290      	cmp	r0, r2
 800aa66:	d0f4      	beq.n	800aa52 <acc_cal_algorithms_pll_cbank+0x52>
 800aa68:	2001      	movs	r0, #1
 800aa6a:	bcf0      	pop	{r4, r5, r6, r7}
 800aa6c:	f8a3 c000 	strh.w	ip, [r3]
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop

0800aa74 <acc_cal_algorithms_pll_ibias>:
 800aa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa78:	2400      	movs	r4, #0
 800aa7a:	f1a0 0c02 	sub.w	ip, r0, #2
 800aa7e:	4625      	mov	r5, r4
 800aa80:	4627      	mov	r7, r4
 800aa82:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800aa86:	e01b      	b.n	800aac0 <acc_cal_algorithms_pll_ibias+0x4c>
 800aa88:	f930 8014 	ldrsh.w	r8, [r0, r4, lsl #1]
 800aa8c:	f93c a014 	ldrsh.w	sl, [ip, r4, lsl #1]
 800aa90:	f508 727a 	add.w	r2, r8, #1000	@ 0x3e8
 800aa94:	eba8 080a 	sub.w	r8, r8, sl
 800aa98:	4598      	cmp	r8, r3
 800aa9a:	db30      	blt.n	800aafe <acc_cal_algorithms_pll_ibias+0x8a>
 800aa9c:	45c8      	cmp	r8, r9
 800aa9e:	dc2e      	bgt.n	800aafe <acc_cal_algorithms_pll_ibias+0x8a>
 800aaa0:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800aaa4:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	42b3      	cmp	r3, r6
 800aaac:	d204      	bcs.n	800aab8 <acc_cal_algorithms_pll_ibias+0x44>
 800aaae:	ea4f 058e 	mov.w	r5, lr, lsl #2
 800aab2:	461e      	mov	r6, r3
 800aab4:	b2ad      	uxth	r5, r5
 800aab6:	2701      	movs	r7, #1
 800aab8:	f1be 0f0f 	cmp.w	lr, #15
 800aabc:	d018      	beq.n	800aaf0 <acc_cal_algorithms_pll_ibias+0x7c>
 800aabe:	3401      	adds	r4, #1
 800aac0:	1e63      	subs	r3, r4, #1
 800aac2:	fb03 f303 	mul.w	r3, r3, r3
 800aac6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800aaca:	005a      	lsls	r2, r3, #1
 800aacc:	f502 7916 	add.w	r9, r2, #600	@ 0x258
 800aad0:	3bc8      	subs	r3, #200	@ 0xc8
 800aad2:	fa1f fe84 	uxth.w	lr, r4
 800aad6:	2c00      	cmp	r4, #0
 800aad8:	d1d6      	bne.n	800aa88 <acc_cal_algorithms_pll_ibias+0x14>
 800aada:	f9b0 3000 	ldrsh.w	r3, [r0]
 800aade:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	bfb8      	it	lt
 800aae6:	425b      	neglt	r3, r3
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	42b3      	cmp	r3, r6
 800aaec:	d3df      	bcc.n	800aaae <acc_cal_algorithms_pll_ibias+0x3a>
 800aaee:	e7e6      	b.n	800aabe <acc_cal_algorithms_pll_ibias+0x4a>
 800aaf0:	b117      	cbz	r7, 800aaf8 <acc_cal_algorithms_pll_ibias+0x84>
 800aaf2:	f085 0530 	eor.w	r5, r5, #48	@ 0x30
 800aaf6:	800d      	strh	r5, [r1, #0]
 800aaf8:	4638      	mov	r0, r7
 800aafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafe:	2700      	movs	r7, #0
 800ab00:	4638      	mov	r0, r7
 800ab02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab06:	bf00      	nop

0800ab08 <acc_cal_algorithms_vfast2_ldo>:
 800ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab0c:	f8b1 305e 	ldrh.w	r3, [r1, #94]	@ 0x5e
 800ab10:	880c      	ldrh	r4, [r1, #0]
 800ab12:	b083      	sub	sp, #12
 800ab14:	1b1b      	subs	r3, r3, r4
 800ab16:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800ab1a:	9201      	str	r2, [sp, #4]
 800ab1c:	db3a      	blt.n	800ab94 <acc_cal_algorithms_vfast2_ldo+0x8c>
 800ab1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ab9c <acc_cal_algorithms_vfast2_ldo+0x94>)
 800ab20:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800ab24:	fba2 3808 	umull	r3, r8, r2, r8
 800ab28:	2500      	movs	r5, #0
 800ab2a:	4681      	mov	r9, r0
 800ab2c:	460e      	mov	r6, r1
 800ab2e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800ab32:	46ab      	mov	fp, r5
 800ab34:	46a2      	mov	sl, r4
 800ab36:	2210      	movs	r2, #16
 800ab38:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800ab3c:	2001      	movs	r0, #1
 800ab3e:	e009      	b.n	800ab54 <acc_cal_algorithms_vfast2_ldo+0x4c>
 800ab40:	3201      	adds	r2, #1
 800ab42:	b292      	uxth	r2, r2
 800ab44:	458e      	cmp	lr, r1
 800ab46:	bf38      	it	cc
 800ab48:	2000      	movcc	r0, #0
 800ab4a:	2a40      	cmp	r2, #64	@ 0x40
 800ab4c:	4445      	add	r5, r8
 800ab4e:	d01a      	beq.n	800ab86 <acc_cal_algorithms_vfast2_ldo+0x7e>
 800ab50:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 800ab54:	eba4 0309 	sub.w	r3, r4, r9
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bfb8      	it	lt
 800ab5c:	425b      	neglt	r3, r3
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	eb0a 4115 	add.w	r1, sl, r5, lsr #16
 800ab64:	4563      	cmp	r3, ip
 800ab66:	f501 7748 	add.w	r7, r1, #800	@ 0x320
 800ab6a:	bf3c      	itt	cc
 800ab6c:	469c      	movcc	ip, r3
 800ab6e:	4693      	movcc	fp, r2
 800ab70:	42bc      	cmp	r4, r7
 800ab72:	f504 7e48 	add.w	lr, r4, #800	@ 0x320
 800ab76:	d9e3      	bls.n	800ab40 <acc_cal_algorithms_vfast2_ldo+0x38>
 800ab78:	3201      	adds	r2, #1
 800ab7a:	b292      	uxth	r2, r2
 800ab7c:	2a40      	cmp	r2, #64	@ 0x40
 800ab7e:	f04f 0000 	mov.w	r0, #0
 800ab82:	4445      	add	r5, r8
 800ab84:	d1e4      	bne.n	800ab50 <acc_cal_algorithms_vfast2_ldo+0x48>
 800ab86:	b130      	cbz	r0, 800ab96 <acc_cal_algorithms_vfast2_ldo+0x8e>
 800ab88:	9b01      	ldr	r3, [sp, #4]
 800ab8a:	f8a3 b000 	strh.w	fp, [r3]
 800ab8e:	b003      	add	sp, #12
 800ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab94:	2000      	movs	r0, #0
 800ab96:	b003      	add	sp, #12
 800ab98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9c:	aaaaaaab 	.word	0xaaaaaaab

0800aba0 <acc_cal_algorithms_delay_cbank>:
 800aba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aba2:	f9b0 2000 	ldrsh.w	r2, [r0]
 800aba6:	460e      	mov	r6, r1
 800aba8:	b0b1      	sub	sp, #196	@ 0xc4
 800abaa:	4611      	mov	r1, r2
 800abac:	4605      	mov	r5, r0
 800abae:	2401      	movs	r4, #1
 800abb0:	2700      	movs	r7, #0
 800abb2:	e008      	b.n	800abc6 <acc_cal_algorithms_delay_cbank+0x26>
 800abb4:	428a      	cmp	r2, r1
 800abb6:	bfa8      	it	ge
 800abb8:	4627      	movge	r7, r4
 800abba:	f104 0401 	add.w	r4, r4, #1
 800abbe:	bfa8      	it	ge
 800abc0:	4611      	movge	r1, r2
 800abc2:	2c20      	cmp	r4, #32
 800abc4:	d00c      	beq.n	800abe0 <acc_cal_algorithms_delay_cbank+0x40>
 800abc6:	4613      	mov	r3, r2
 800abc8:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 800abcc:	f5c3 7348 	rsb	r3, r3, #800	@ 0x320
 800abd0:	4413      	add	r3, r2
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800abd8:	d9ec      	bls.n	800abb4 <acc_cal_algorithms_delay_cbank+0x14>
 800abda:	2000      	movs	r0, #0
 800abdc:	b031      	add	sp, #196	@ 0xc4
 800abde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe0:	2f07      	cmp	r7, #7
 800abe2:	d85f      	bhi.n	800aca4 <acc_cal_algorithms_delay_cbank+0x104>
 800abe4:	2300      	movs	r3, #0
 800abe6:	f107 0208 	add.w	r2, r7, #8
 800abea:	1ad2      	subs	r2, r2, r3
 800abec:	af03      	add	r7, sp, #12
 800abee:	b30a      	cbz	r2, 800ac34 <acc_cal_algorithms_delay_cbank+0x94>
 800abf0:	18d5      	adds	r5, r2, r3
 800abf2:	4639      	mov	r1, r7
 800abf4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800abf8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 800abfc:	f934 0b02 	ldrsh.w	r0, [r4], #2
 800ac00:	ee07 0a10 	vmov	s14, r0
 800ac04:	fb03 f003 	mul.w	r0, r3, r3
 800ac08:	ee06 3a90 	vmov	s13, r3
 800ac0c:	ee07 0a90 	vmov	s15, r0
 800ac10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ac14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac18:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800ac1c:	42a5      	cmp	r5, r4
 800ac1e:	ed81 7a00 	vstr	s14, [r1]
 800ac22:	edc1 7a01 	vstr	s15, [r1, #4]
 800ac26:	edc1 6a02 	vstr	s13, [r1, #8]
 800ac2a:	f103 0301 	add.w	r3, r3, #1
 800ac2e:	f101 010c 	add.w	r1, r1, #12
 800ac32:	d1e3      	bne.n	800abfc <acc_cal_algorithms_delay_cbank+0x5c>
 800ac34:	4638      	mov	r0, r7
 800ac36:	4669      	mov	r1, sp
 800ac38:	f003 fc42 	bl	800e4c0 <acc_alg_least_square_fit>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d0cc      	beq.n	800abda <acc_cal_algorithms_delay_cbank+0x3a>
 800ac40:	ed9d 6a00 	vldr	s12, [sp]
 800ac44:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ac48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac4c:	d0c5      	beq.n	800abda <acc_cal_algorithms_delay_cbank+0x3a>
 800ac4e:	eddd 6a01 	vldr	s13, [sp, #4]
 800ac52:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ac56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac5a:	d0be      	beq.n	800abda <acc_cal_algorithms_delay_cbank+0x3a>
 800ac5c:	eddd 7a02 	vldr	s15, [sp, #8]
 800ac60:	eef1 7a67 	vneg.f32	s15, s15
 800ac64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ac68:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ac6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac70:	dbb3      	blt.n	800abda <acc_cal_algorithms_delay_cbank+0x3a>
 800ac72:	eef1 6a66 	vneg.f32	s13, s13
 800ac76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800ac7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ac7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac82:	d5aa      	bpl.n	800abda <acc_cal_algorithms_delay_cbank+0x3a>
 800ac84:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ac88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac90:	ee17 3a90 	vmov	r3, s15
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	2b3f      	cmp	r3, #63	@ 0x3f
 800ac98:	d89f      	bhi.n	800abda <acc_cal_algorithms_delay_cbank+0x3a>
 800ac9a:	085b      	lsrs	r3, r3, #1
 800ac9c:	f083 0310 	eor.w	r3, r3, #16
 800aca0:	8033      	strh	r3, [r6, #0]
 800aca2:	e79b      	b.n	800abdc <acc_cal_algorithms_delay_cbank+0x3c>
 800aca4:	1ffb      	subs	r3, r7, #7
 800aca6:	2f17      	cmp	r7, #23
 800aca8:	bf88      	it	hi
 800acaa:	f1c3 0220 	rsbhi	r2, r3, #32
 800acae:	d89d      	bhi.n	800abec <acc_cal_algorithms_delay_cbank+0x4c>
 800acb0:	e799      	b.n	800abe6 <acc_cal_algorithms_delay_cbank+0x46>
 800acb2:	bf00      	nop

0800acb4 <acc_cal_algorithms_bba_cal_ctrl>:
 800acb4:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 800ad90 <acc_cal_algorithms_bba_cal_ctrl+0xdc>
 800acb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acbc:	f04f 0e00 	mov.w	lr, #0
 800acc0:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 800acc4:	f9b0 4000 	ldrsh.w	r4, [r0]
 800acc8:	4665      	mov	r5, ip
 800acca:	46f0      	mov	r8, lr
 800accc:	463e      	mov	r6, r7
 800acce:	f06f 021b 	mvn.w	r2, #27
 800acd2:	e014      	b.n	800acfe <acc_cal_algorithms_bba_cal_ctrl+0x4a>
 800acd4:	42a7      	cmp	r7, r4
 800acd6:	bfc4      	itt	gt
 800acd8:	4627      	movgt	r7, r4
 800acda:	4696      	movgt	lr, r2
 800acdc:	2a1c      	cmp	r2, #28
 800acde:	4603      	mov	r3, r0
 800ace0:	d016      	beq.n	800ad10 <acc_cal_algorithms_bba_cal_ctrl+0x5c>
 800ace2:	881b      	ldrh	r3, [r3, #0]
 800ace4:	f930 4f02 	ldrsh.w	r4, [r0, #2]!
 800ace8:	1ae3      	subs	r3, r4, r3
 800acea:	b21b      	sxth	r3, r3
 800acec:	429e      	cmp	r6, r3
 800acee:	f102 0208 	add.w	r2, r2, #8
 800acf2:	bfa8      	it	ge
 800acf4:	461e      	movge	r6, r3
 800acf6:	429d      	cmp	r5, r3
 800acf8:	b212      	sxth	r2, r2
 800acfa:	bfb8      	it	lt
 800acfc:	461d      	movlt	r5, r3
 800acfe:	2c00      	cmp	r4, #0
 800ad00:	dae8      	bge.n	800acd4 <acc_cal_algorithms_bba_cal_ctrl+0x20>
 800ad02:	45a4      	cmp	ip, r4
 800ad04:	daea      	bge.n	800acdc <acc_cal_algorithms_bba_cal_ctrl+0x28>
 800ad06:	2a1c      	cmp	r2, #28
 800ad08:	46a4      	mov	ip, r4
 800ad0a:	4690      	mov	r8, r2
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	d1e8      	bne.n	800ace2 <acc_cal_algorithms_bba_cal_ctrl+0x2e>
 800ad10:	f5a5 551c 	sub.w	r5, r5, #9984	@ 0x2700
 800ad14:	3d10      	subs	r5, #16
 800ad16:	b2ad      	uxth	r5, r5
 800ad18:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800ad1c:	429d      	cmp	r5, r3
 800ad1e:	d800      	bhi.n	800ad22 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800ad20:	b116      	cbz	r6, 800ad28 <acc_cal_algorithms_bba_cal_ctrl+0x74>
 800ad22:	2000      	movs	r0, #0
 800ad24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad28:	f51c 4f00 	cmn.w	ip, #32768	@ 0x8000
 800ad2c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800ad30:	d011      	beq.n	800ad56 <acc_cal_algorithms_bba_cal_ctrl+0xa2>
 800ad32:	429f      	cmp	r7, r3
 800ad34:	d029      	beq.n	800ad8a <acc_cal_algorithms_bba_cal_ctrl+0xd6>
 800ad36:	ebae 0e08 	sub.w	lr, lr, r8
 800ad3a:	f1be 0f08 	cmp.w	lr, #8
 800ad3e:	d1f0      	bne.n	800ad22 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800ad40:	eba7 070c 	sub.w	r7, r7, ip
 800ad44:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800ad48:	fb9c f7f7 	sdiv	r7, ip, r7
 800ad4c:	eba8 0e07 	sub.w	lr, r8, r7
 800ad50:	fa0f fe8e 	sxth.w	lr, lr
 800ad54:	e001      	b.n	800ad5a <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 800ad56:	429f      	cmp	r7, r3
 800ad58:	d0e3      	beq.n	800ad22 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800ad5a:	f1be 0f00 	cmp.w	lr, #0
 800ad5e:	db07      	blt.n	800ad70 <acc_cal_algorithms_bba_cal_ctrl+0xbc>
 800ad60:	f1be 0f1f 	cmp.w	lr, #31
 800ad64:	dcdd      	bgt.n	800ad22 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800ad66:	f8a1 e000 	strh.w	lr, [r1]
 800ad6a:	2001      	movs	r0, #1
 800ad6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad70:	f1ce 0e00 	rsb	lr, lr, #0
 800ad74:	fa1f fe8e 	uxth.w	lr, lr
 800ad78:	f1be 0f1f 	cmp.w	lr, #31
 800ad7c:	d8d1      	bhi.n	800ad22 <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 800ad7e:	f04e 0e20 	orr.w	lr, lr, #32
 800ad82:	f8a1 e000 	strh.w	lr, [r1]
 800ad86:	2001      	movs	r0, #1
 800ad88:	e7cc      	b.n	800ad24 <acc_cal_algorithms_bba_cal_ctrl+0x70>
 800ad8a:	46c6      	mov	lr, r8
 800ad8c:	e7e5      	b.n	800ad5a <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 800ad8e:	bf00      	nop
 800ad90:	ffff8000 	.word	0xffff8000

0800ad94 <acc_cal_algorithms_area_index>:
 800ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad98:	f5ad 7d7f 	sub.w	sp, sp, #1020	@ 0x3fc
 800ad9c:	ab05      	add	r3, sp, #20
 800ad9e:	f500 62c0 	add.w	r2, r0, #1536	@ 0x600
 800ada2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ada6:	9304      	str	r3, [sp, #16]
 800ada8:	4c5c      	ldr	r4, [pc, #368]	@ (800af1c <acc_cal_algorithms_area_index+0x188>)
 800adaa:	4d5d      	ldr	r5, [pc, #372]	@ (800af20 <acc_cal_algorithms_area_index+0x18c>)
 800adac:	9105      	str	r1, [sp, #20]
 800adae:	2300      	movs	r3, #0
 800adb0:	4681      	mov	r9, r0
 800adb2:	9301      	str	r3, [sp, #4]
 800adb4:	f10d 0898 	add.w	r8, sp, #152	@ 0x98
 800adb8:	af3d      	add	r7, sp, #244	@ 0xf4
 800adba:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800adbe:	464e      	mov	r6, r9
 800adc0:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 800adc4:	f936 0b04 	ldrsh.w	r0, [r6], #4
 800adc8:	f003 faee 	bl	800e3a8 <acc_alg_atan2_q16>
 800adcc:	f84a 0b04 	str.w	r0, [sl], #4
 800add0:	45c2      	cmp	sl, r8
 800add2:	d1f5      	bne.n	800adc0 <acc_cal_algorithms_area_index+0x2c>
 800add4:	f10d 0b94 	add.w	fp, sp, #148	@ 0x94
 800add8:	46da      	mov	sl, fp
 800adda:	464e      	mov	r6, r9
 800addc:	f9b6 1062 	ldrsh.w	r1, [r6, #98]	@ 0x62
 800ade0:	f9b6 0060 	ldrsh.w	r0, [r6, #96]	@ 0x60
 800ade4:	f003 fae0 	bl	800e3a8 <acc_alg_atan2_q16>
 800ade8:	f84a 0f04 	str.w	r0, [sl, #4]!
 800adec:	4557      	cmp	r7, sl
 800adee:	f106 0604 	add.w	r6, r6, #4
 800adf2:	d1f3      	bne.n	800addc <acc_cal_algorithms_area_index+0x48>
 800adf4:	9a01      	ldr	r2, [sp, #4]
 800adf6:	ab3e      	add	r3, sp, #248	@ 0xf8
 800adf8:	ae0d      	add	r6, sp, #52	@ 0x34
 800adfa:	1898      	adds	r0, r3, r2
 800adfc:	2100      	movs	r1, #0
 800adfe:	f85b 3f04 	ldr.w	r3, [fp, #4]!
 800ae02:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800ae06:	1a9b      	subs	r3, r3, r2
 800ae08:	42a3      	cmp	r3, r4
 800ae0a:	dd61      	ble.n	800aed0 <acc_cal_algorithms_area_index+0x13c>
 800ae0c:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 800ae10:	3b7e      	subs	r3, #126	@ 0x7e
 800ae12:	42a3      	cmp	r3, r4
 800ae14:	dcfa      	bgt.n	800ae0c <acc_cal_algorithms_area_index+0x78>
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	bfb8      	it	lt
 800ae1a:	425b      	neglt	r3, r3
 800ae1c:	4299      	cmp	r1, r3
 800ae1e:	bfb8      	it	lt
 800ae20:	4619      	movlt	r1, r3
 800ae22:	45bb      	cmp	fp, r7
 800ae24:	f840 3b04 	str.w	r3, [r0], #4
 800ae28:	d1e9      	bne.n	800adfe <acc_cal_algorithms_area_index+0x6a>
 800ae2a:	9b02      	ldr	r3, [sp, #8]
 800ae2c:	1049      	asrs	r1, r1, #1
 800ae2e:	f843 1f04 	str.w	r1, [r3, #4]!
 800ae32:	9302      	str	r3, [sp, #8]
 800ae34:	9b01      	ldr	r3, [sp, #4]
 800ae36:	3360      	adds	r3, #96	@ 0x60
 800ae38:	9301      	str	r3, [sp, #4]
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	f109 09c0 	add.w	r9, r9, #192	@ 0xc0
 800ae40:	4599      	cmp	r9, r3
 800ae42:	d1ba      	bne.n	800adba <acc_cal_algorithms_area_index+0x26>
 800ae44:	2300      	movs	r3, #0
 800ae46:	9c04      	ldr	r4, [sp, #16]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800ae50:	428a      	cmp	r2, r1
 800ae52:	bfc8      	it	gt
 800ae54:	4618      	movgt	r0, r3
 800ae56:	f103 0301 	add.w	r3, r3, #1
 800ae5a:	bfc8      	it	gt
 800ae5c:	4611      	movgt	r1, r2
 800ae5e:	2b08      	cmp	r3, #8
 800ae60:	d1f4      	bne.n	800ae4c <acc_cal_algorithms_area_index+0xb8>
 800ae62:	ab06      	add	r3, sp, #24
 800ae64:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800ae68:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800ae6c:	ab3e      	add	r3, sp, #248	@ 0xf8
 800ae6e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800ae72:	f10d 0297 	add.w	r2, sp, #151	@ 0x97
 800ae76:	f10d 00af 	add.w	r0, sp, #175	@ 0xaf
 800ae7a:	f851 3b04 	ldr.w	r3, [r1], #4
 800ae7e:	42a3      	cmp	r3, r4
 800ae80:	bfac      	ite	ge
 800ae82:	2300      	movge	r3, #0
 800ae84:	2301      	movlt	r3, #1
 800ae86:	f802 3f01 	strb.w	r3, [r2, #1]!
 800ae8a:	4290      	cmp	r0, r2
 800ae8c:	7613      	strb	r3, [r2, #24]
 800ae8e:	d1f4      	bne.n	800ae7a <acc_cal_algorithms_area_index+0xe6>
 800ae90:	2200      	movs	r2, #0
 800ae92:	4611      	mov	r1, r2
 800ae94:	2301      	movs	r3, #1
 800ae96:	b321      	cbz	r1, 800aee2 <acc_cal_algorithms_area_index+0x14e>
 800ae98:	f818 0003 	ldrb.w	r0, [r8, r3]
 800ae9c:	b1d8      	cbz	r0, 800aed6 <acc_cal_algorithms_area_index+0x142>
 800ae9e:	3201      	adds	r2, #1
 800aea0:	3301      	adds	r3, #1
 800aea2:	2b30      	cmp	r3, #48	@ 0x30
 800aea4:	d1f7      	bne.n	800ae96 <acc_cal_algorithms_area_index+0x102>
 800aea6:	f1a2 030c 	sub.w	r3, r2, #12
 800aeaa:	2b08      	cmp	r3, #8
 800aeac:	d82e      	bhi.n	800af0c <acc_cal_algorithms_area_index+0x178>
 800aeae:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 800aeb2:	2a17      	cmp	r2, #23
 800aeb4:	d902      	bls.n	800aebc <acc_cal_algorithms_area_index+0x128>
 800aeb6:	3a18      	subs	r2, #24
 800aeb8:	2a17      	cmp	r2, #23
 800aeba:	d8fc      	bhi.n	800aeb6 <acc_cal_algorithms_area_index+0x122>
 800aebc:	9b05      	ldr	r3, [sp, #20]
 800aebe:	2001      	movs	r0, #1
 800aec0:	801a      	strh	r2, [r3, #0]
 800aec2:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 800aec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeca:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 800aece:	337e      	adds	r3, #126	@ 0x7e
 800aed0:	42ab      	cmp	r3, r5
 800aed2:	dbfa      	blt.n	800aeca <acc_cal_algorithms_area_index+0x136>
 800aed4:	e79f      	b.n	800ae16 <acc_cal_algorithms_area_index+0x82>
 800aed6:	2a0b      	cmp	r2, #11
 800aed8:	d8e5      	bhi.n	800aea6 <acc_cal_algorithms_area_index+0x112>
 800aeda:	3301      	adds	r3, #1
 800aedc:	2b30      	cmp	r3, #48	@ 0x30
 800aede:	d0f0      	beq.n	800aec2 <acc_cal_algorithms_area_index+0x12e>
 800aee0:	4602      	mov	r2, r0
 800aee2:	1e58      	subs	r0, r3, #1
 800aee4:	4440      	add	r0, r8
 800aee6:	1c59      	adds	r1, r3, #1
 800aee8:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800aeec:	1e4b      	subs	r3, r1, #1
 800aeee:	b12c      	cbz	r4, 800aefc <acc_cal_algorithms_area_index+0x168>
 800aef0:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 800aef4:	b914      	cbnz	r4, 800aefc <acc_cal_algorithms_area_index+0x168>
 800aef6:	4619      	mov	r1, r3
 800aef8:	2201      	movs	r2, #1
 800aefa:	e7d1      	b.n	800aea0 <acc_cal_algorithms_area_index+0x10c>
 800aefc:	2930      	cmp	r1, #48	@ 0x30
 800aefe:	d001      	beq.n	800af04 <acc_cal_algorithms_area_index+0x170>
 800af00:	3101      	adds	r1, #1
 800af02:	e7f1      	b.n	800aee8 <acc_cal_algorithms_area_index+0x154>
 800af04:	f1a2 030c 	sub.w	r3, r2, #12
 800af08:	2b08      	cmp	r3, #8
 800af0a:	d904      	bls.n	800af16 <acc_cal_algorithms_area_index+0x182>
 800af0c:	2000      	movs	r0, #0
 800af0e:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 800af12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af16:	0852      	lsrs	r2, r2, #1
 800af18:	e7d0      	b.n	800aebc <acc_cal_algorithms_area_index+0x128>
 800af1a:	bf00      	nop
 800af1c:	0003243f 	.word	0x0003243f
 800af20:	fffcdbc1 	.word	0xfffcdbc1

0800af24 <acc_cal_algorithms_iq_imbalance>:
 800af24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af28:	ed2d 8b02 	vpush	{d8}
 800af2c:	eddf 5a51 	vldr	s11, [pc, #324]	@ 800b074 <acc_cal_algorithms_iq_imbalance+0x150>
 800af30:	b0bd      	sub	sp, #244	@ 0xf4
 800af32:	4680      	mov	r8, r0
 800af34:	4689      	mov	r9, r1
 800af36:	f500 6cd8 	add.w	ip, r0, #1728	@ 0x6c0
 800af3a:	f100 01c0 	add.w	r1, r0, #192	@ 0xc0
 800af3e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800af42:	a804      	add	r0, sp, #16
 800af44:	f1a1 04c0 	sub.w	r4, r1, #192	@ 0xc0
 800af48:	2700      	movs	r7, #0
 800af4a:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 800af4e:	f9b4 5000 	ldrsh.w	r5, [r4]
 800af52:	fb06 f606 	mul.w	r6, r6, r6
 800af56:	3404      	adds	r4, #4
 800af58:	fb05 6505 	mla	r5, r5, r5, r6
 800af5c:	42a1      	cmp	r1, r4
 800af5e:	442f      	add	r7, r5
 800af60:	d1f3      	bne.n	800af4a <acc_cal_algorithms_iq_imbalance+0x26>
 800af62:	ee07 7a90 	vmov	s15, r7
 800af66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6a:	31c0      	adds	r1, #192	@ 0xc0
 800af6c:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 800af70:	458c      	cmp	ip, r1
 800af72:	eeb1 7ae6 	vsqrt.f32	s14, s13
 800af76:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800af7a:	ece0 7a01 	vstmia	r0!, {s15}
 800af7e:	d1e1      	bne.n	800af44 <acc_cal_algorithms_iq_imbalance+0x20>
 800af80:	2a00      	cmp	r2, #0
 800af82:	d070      	beq.n	800b066 <acc_cal_algorithms_iq_imbalance+0x142>
 800af84:	461c      	mov	r4, r3
 800af86:	eb02 0509 	add.w	r5, r2, r9
 800af8a:	ae24      	add	r6, sp, #144	@ 0x90
 800af8c:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 800af90:	eeb1 8a00 	vmov.f32	s16, #16	@ 0x40800000  4.0
 800af94:	eb08 0289 	add.w	r2, r8, r9, lsl #2
 800af98:	ab0c      	add	r3, sp, #48	@ 0x30
 800af9a:	a904      	add	r1, sp, #16
 800af9c:	f9b2 0000 	ldrsh.w	r0, [r2]
 800afa0:	ecf1 5a01 	vldmia	r1!, {s11}
 800afa4:	ee06 0a10 	vmov	s12, r0
 800afa8:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800afac:	ee06 0a90 	vmov	s13, r0
 800afb0:	f9b2 0060 	ldrsh.w	r0, [r2, #96]	@ 0x60
 800afb4:	ee07 0a10 	vmov	s14, r0
 800afb8:	f9b2 0062 	ldrsh.w	r0, [r2, #98]	@ 0x62
 800afbc:	ee07 0a90 	vmov	s15, r0
 800afc0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800afc4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800afc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800afcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afd0:	ee26 6a25 	vmul.f32	s12, s12, s11
 800afd4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800afd8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800afdc:	ee27 7a25 	vmul.f32	s14, s14, s11
 800afe0:	ee26 5a06 	vmul.f32	s10, s12, s12
 800afe4:	ee67 5a07 	vmul.f32	s11, s14, s14
 800afe8:	ee26 6a26 	vmul.f32	s12, s12, s13
 800afec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aff0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800aff4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aff8:	ed83 5a00 	vstr	s10, [r3]
 800affc:	ed83 6a01 	vstr	s12, [r3, #4]
 800b000:	edc3 6a02 	vstr	s13, [r3, #8]
 800b004:	edc3 5a18 	vstr	s11, [r3, #96]	@ 0x60
 800b008:	ed83 7a19 	vstr	s14, [r3, #100]	@ 0x64
 800b00c:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
 800b010:	330c      	adds	r3, #12
 800b012:	429e      	cmp	r6, r3
 800b014:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 800b018:	d1c0      	bne.n	800af9c <acc_cal_algorithms_iq_imbalance+0x78>
 800b01a:	2210      	movs	r2, #16
 800b01c:	a901      	add	r1, sp, #4
 800b01e:	a80c      	add	r0, sp, #48	@ 0x30
 800b020:	f003 fa4e 	bl	800e4c0 <acc_alg_least_square_fit>
 800b024:	b300      	cbz	r0, 800b068 <acc_cal_algorithms_iq_imbalance+0x144>
 800b026:	eddd 7a01 	vldr	s15, [sp, #4]
 800b02a:	ed9d 7a03 	vldr	s14, [sp, #12]
 800b02e:	eddd 0a02 	vldr	s1, [sp, #8]
 800b032:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800b036:	4620      	mov	r0, r4
 800b038:	f109 0901 	add.w	r9, r9, #1
 800b03c:	3402      	adds	r4, #2
 800b03e:	ee67 7a88 	vmul.f32	s15, s15, s16
 800b042:	ee60 6aa0 	vmul.f32	s13, s1, s1
 800b046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b04a:	ee88 7a80 	vdiv.f32	s14, s17, s0
 800b04e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b052:	ee67 0a20 	vmul.f32	s1, s14, s1
 800b056:	eeb1 1ae7 	vsqrt.f32	s2, s15
 800b05a:	ee27 1a01 	vmul.f32	s2, s14, s2
 800b05e:	f003 feb5 	bl	800edcc <acc_alg_iq_imb_comp_to_fix_point>
 800b062:	454d      	cmp	r5, r9
 800b064:	d196      	bne.n	800af94 <acc_cal_algorithms_iq_imbalance+0x70>
 800b066:	2001      	movs	r0, #1
 800b068:	b03d      	add	sp, #244	@ 0xf4
 800b06a:	ecbd 8b02 	vpop	{d8}
 800b06e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b072:	bf00      	nop
 800b074:	42400000 	.word	0x42400000

0800b078 <acc_cal_algorithms_rx_freq_ctrl>:
 800b078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	b087      	sub	sp, #28
 800b07e:	2400      	movs	r4, #0
 800b080:	4606      	mov	r6, r0
 800b082:	468b      	mov	fp, r1
 800b084:	9203      	str	r2, [sp, #12]
 800b086:	f100 0902 	add.w	r9, r0, #2
 800b08a:	9402      	str	r4, [sp, #8]
 800b08c:	4625      	mov	r5, r4
 800b08e:	46a0      	mov	r8, r4
 800b090:	46a2      	mov	sl, r4
 800b092:	f10d 0716 	add.w	r7, sp, #22
 800b096:	e006      	b.n	800b0a6 <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 800b098:	4553      	cmp	r3, sl
 800b09a:	d82a      	bhi.n	800b0f2 <acc_cal_algorithms_rx_freq_ctrl+0x7a>
 800b09c:	4645      	mov	r5, r8
 800b09e:	4698      	mov	r8, r3
 800b0a0:	3401      	adds	r4, #1
 800b0a2:	2c08      	cmp	r4, #8
 800b0a4:	d019      	beq.n	800b0da <acc_cal_algorithms_rx_freq_ctrl+0x62>
 800b0a6:	9700      	str	r7, [sp, #0]
 800b0a8:	ab05      	add	r3, sp, #20
 800b0aa:	465a      	mov	r2, fp
 800b0ac:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800b0b0:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800b0b4:	f003 fe66 	bl	800ed84 <acc_alg_comp_iq_imb>
 800b0b8:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800b0bc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800b0c0:	fb02 f202 	mul.w	r2, r2, r2
 800b0c4:	fb03 2303 	mla	r3, r3, r3, r2
 800b0c8:	42ab      	cmp	r3, r5
 800b0ca:	b2a2      	uxth	r2, r4
 800b0cc:	d9e8      	bls.n	800b0a0 <acc_cal_algorithms_rx_freq_ctrl+0x28>
 800b0ce:	4543      	cmp	r3, r8
 800b0d0:	d8e2      	bhi.n	800b098 <acc_cal_algorithms_rx_freq_ctrl+0x20>
 800b0d2:	3401      	adds	r4, #1
 800b0d4:	2c08      	cmp	r4, #8
 800b0d6:	461d      	mov	r5, r3
 800b0d8:	d1e5      	bne.n	800b0a6 <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 800b0da:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800b0de:	45aa      	cmp	sl, r5
 800b0e0:	bf85      	ittet	hi
 800b0e2:	e9dd 2302 	ldrdhi	r2, r3, [sp, #8]
 800b0e6:	2001      	movhi	r0, #1
 800b0e8:	2000      	movls	r0, #0
 800b0ea:	801a      	strhhi	r2, [r3, #0]
 800b0ec:	b007      	add	sp, #28
 800b0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f2:	4645      	mov	r5, r8
 800b0f4:	9202      	str	r2, [sp, #8]
 800b0f6:	46d0      	mov	r8, sl
 800b0f8:	469a      	mov	sl, r3
 800b0fa:	e7d1      	b.n	800b0a0 <acc_cal_algorithms_rx_freq_ctrl+0x28>

0800b0fc <acc_cal_algorithms_wavelet_duration_p1>:
 800b0fc:	b508      	push	{r3, lr}
 800b0fe:	f003 fe09 	bl	800ed14 <acc_alg_temp>
 800b102:	f110 0f14 	cmn.w	r0, #20
 800b106:	db06      	blt.n	800b116 <acc_cal_algorithms_wavelet_duration_p1+0x1a>
 800b108:	282c      	cmp	r0, #44	@ 0x2c
 800b10a:	dd06      	ble.n	800b11a <acc_cal_algorithms_wavelet_duration_p1+0x1e>
 800b10c:	2850      	cmp	r0, #80	@ 0x50
 800b10e:	bfb4      	ite	lt
 800b110:	2003      	movlt	r0, #3
 800b112:	2004      	movge	r0, #4
 800b114:	bd08      	pop	{r3, pc}
 800b116:	2001      	movs	r0, #1
 800b118:	bd08      	pop	{r3, pc}
 800b11a:	2002      	movs	r0, #2
 800b11c:	bd08      	pop	{r3, pc}
 800b11e:	bf00      	nop

0800b120 <acc_cal_algorithms_phase_unwrap>:
 800b120:	2901      	cmp	r1, #1
 800b122:	d926      	bls.n	800b172 <acc_cal_algorithms_phase_unwrap+0x52>
 800b124:	b470      	push	{r4, r5, r6}
 800b126:	1f03      	subs	r3, r0, #4
 800b128:	4e12      	ldr	r6, [pc, #72]	@ (800b174 <acc_cal_algorithms_phase_unwrap+0x54>)
 800b12a:	4d13      	ldr	r5, [pc, #76]	@ (800b178 <acc_cal_algorithms_phase_unwrap+0x58>)
 800b12c:	eb03 0481 	add.w	r4, r3, r1, lsl #2
 800b130:	2100      	movs	r1, #0
 800b132:	6843      	ldr	r3, [r0, #4]
 800b134:	440b      	add	r3, r1
 800b136:	4602      	mov	r2, r0
 800b138:	f840 3f04 	str.w	r3, [r0, #4]!
 800b13c:	6812      	ldr	r2, [r2, #0]
 800b13e:	1a9a      	subs	r2, r3, r2
 800b140:	42b2      	cmp	r2, r6
 800b142:	dd09      	ble.n	800b158 <acc_cal_algorithms_phase_unwrap+0x38>
 800b144:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b148:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 800b14c:	3b7e      	subs	r3, #126	@ 0x7e
 800b14e:	f5a1 21c9 	sub.w	r1, r1, #411648	@ 0x64800
 800b152:	6003      	str	r3, [r0, #0]
 800b154:	397e      	subs	r1, #126	@ 0x7e
 800b156:	1a9a      	subs	r2, r3, r2
 800b158:	42aa      	cmp	r2, r5
 800b15a:	da06      	bge.n	800b16a <acc_cal_algorithms_phase_unwrap+0x4a>
 800b15c:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 800b160:	337e      	adds	r3, #126	@ 0x7e
 800b162:	f501 21c9 	add.w	r1, r1, #411648	@ 0x64800
 800b166:	6003      	str	r3, [r0, #0]
 800b168:	317e      	adds	r1, #126	@ 0x7e
 800b16a:	4284      	cmp	r4, r0
 800b16c:	d1e1      	bne.n	800b132 <acc_cal_algorithms_phase_unwrap+0x12>
 800b16e:	bc70      	pop	{r4, r5, r6}
 800b170:	4770      	bx	lr
 800b172:	4770      	bx	lr
 800b174:	0003243f 	.word	0x0003243f
 800b178:	fffcdbc1 	.word	0xfffcdbc1

0800b17c <acc_cal_algorithms_tx_freq_ctrl>:
 800b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	f2ad 6d0c 	subw	sp, sp, #1548	@ 0x60c
 800b184:	4606      	mov	r6, r0
 800b186:	1c8c      	adds	r4, r1, #2
 800b188:	4690      	mov	r8, r2
 800b18a:	4699      	mov	r9, r3
 800b18c:	ad01      	add	r5, sp, #4
 800b18e:	f20d 6704 	addw	r7, sp, #1540	@ 0x604
 800b192:	f9b4 1000 	ldrsh.w	r1, [r4]
 800b196:	f934 0c02 	ldrsh.w	r0, [r4, #-2]
 800b19a:	f003 f905 	bl	800e3a8 <acc_alg_atan2_q16>
 800b19e:	f845 0f04 	str.w	r0, [r5, #4]!
 800b1a2:	42bd      	cmp	r5, r7
 800b1a4:	f104 0404 	add.w	r4, r4, #4
 800b1a8:	d1f3      	bne.n	800b192 <acc_cal_algorithms_tx_freq_ctrl+0x16>
 800b1aa:	46ca      	mov	sl, r9
 800b1ac:	f1a9 0304 	sub.w	r3, r9, #4
 800b1b0:	f109 001c 	add.w	r0, r9, #28
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	f843 1f04 	str.w	r1, [r3, #4]!
 800b1ba:	4298      	cmp	r0, r3
 800b1bc:	d1fb      	bne.n	800b1b6 <acc_cal_algorithms_tx_freq_ctrl+0x3a>
 800b1be:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 800b1c2:	f04f 0b00 	mov.w	fp, #0
 800b1c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b1ca:	4f33      	ldr	r7, [pc, #204]	@ (800b298 <acc_cal_algorithms_tx_freq_ctrl+0x11c>)
 800b1cc:	f8cd b000 	str.w	fp, [sp]
 800b1d0:	ac19      	add	r4, sp, #100	@ 0x64
 800b1d2:	00ed      	lsls	r5, r5, #3
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	f640 5994 	movw	r9, #3476	@ 0xd94
 800b1da:	2130      	movs	r1, #48	@ 0x30
 800b1dc:	f1a4 005c 	sub.w	r0, r4, #92	@ 0x5c
 800b1e0:	f7ff ff9e 	bl	800b120 <acc_cal_algorithms_phase_unwrap>
 800b1e4:	f1a4 0160 	sub.w	r1, r4, #96	@ 0x60
 800b1e8:	f04f 0c00 	mov.w	ip, #0
 800b1ec:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800b1f0:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 800b1f2:	428c      	cmp	r4, r1
 800b1f4:	eba3 0000 	sub.w	r0, r3, r0
 800b1f8:	4484      	add	ip, r0
 800b1fa:	d1f7      	bne.n	800b1ec <acc_cal_algorithms_tx_freq_ctrl+0x70>
 800b1fc:	f1bc 0f00 	cmp.w	ip, #0
 800b200:	db35      	blt.n	800b26e <acc_cal_algorithms_tx_freq_ctrl+0xf2>
 800b202:	ea4f 119c 	mov.w	r1, ip, lsr #6
 800b206:	fb09 f101 	mul.w	r1, r9, r1
 800b20a:	0d49      	lsrs	r1, r1, #21
 800b20c:	fb06 f101 	mul.w	r1, r6, r1
 800b210:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 800b214:	f8ca 1000 	str.w	r1, [sl]
 800b218:	f1bb 0f00 	cmp.w	fp, #0
 800b21c:	d003      	beq.n	800b226 <acc_cal_algorithms_tx_freq_ctrl+0xaa>
 800b21e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b222:	4288      	cmp	r0, r1
 800b224:	d930      	bls.n	800b288 <acc_cal_algorithms_tx_freq_ctrl+0x10c>
 800b226:	f8da 1000 	ldr.w	r1, [sl]
 800b22a:	eba1 0108 	sub.w	r1, r1, r8
 800b22e:	2900      	cmp	r1, #0
 800b230:	bfb8      	it	lt
 800b232:	4249      	neglt	r1, r1
 800b234:	42b9      	cmp	r1, r7
 800b236:	d204      	bcs.n	800b242 <acc_cal_algorithms_tx_freq_ctrl+0xc6>
 800b238:	2301      	movs	r3, #1
 800b23a:	460f      	mov	r7, r1
 800b23c:	f8cd b004 	str.w	fp, [sp, #4]
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	f10b 0301 	add.w	r3, fp, #1
 800b246:	fa1f fb83 	uxth.w	fp, r3
 800b24a:	f1bb 0f08 	cmp.w	fp, #8
 800b24e:	f10a 0a04 	add.w	sl, sl, #4
 800b252:	f104 04c0 	add.w	r4, r4, #192	@ 0xc0
 800b256:	d1c0      	bne.n	800b1da <acc_cal_algorithms_tx_freq_ctrl+0x5e>
 800b258:	9b00      	ldr	r3, [sp, #0]
 800b25a:	b11b      	cbz	r3, 800b264 <acc_cal_algorithms_tx_freq_ctrl+0xe8>
 800b25c:	f8dd 3630 	ldr.w	r3, [sp, #1584]	@ 0x630
 800b260:	9a01      	ldr	r2, [sp, #4]
 800b262:	801a      	strh	r2, [r3, #0]
 800b264:	9800      	ldr	r0, [sp, #0]
 800b266:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800b26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b26e:	f1cc 0100 	rsb	r1, ip, #0
 800b272:	0989      	lsrs	r1, r1, #6
 800b274:	fb09 f101 	mul.w	r1, r9, r1
 800b278:	0d49      	lsrs	r1, r1, #21
 800b27a:	fb06 f101 	mul.w	r1, r6, r1
 800b27e:	eba5 2111 	sub.w	r1, r5, r1, lsr #8
 800b282:	f8ca 1000 	str.w	r1, [sl]
 800b286:	e7c7      	b.n	800b218 <acc_cal_algorithms_tx_freq_ctrl+0x9c>
 800b288:	2300      	movs	r3, #0
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	9800      	ldr	r0, [sp, #0]
 800b28e:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 800b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b296:	bf00      	nop
 800b298:	000f4240 	.word	0x000f4240

0800b29c <acc_cal_algorithms_phase_enhancement>:
 800b29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a0:	b0bc      	sub	sp, #240	@ 0xf0
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	460d      	mov	r5, r1
 800b2a6:	4617      	mov	r7, r2
 800b2a8:	f100 0902 	add.w	r9, r0, #2
 800b2ac:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 800b2b0:	2400      	movs	r4, #0
 800b2b2:	f640 38b7 	movw	r8, #2999	@ 0xbb7
 800b2b6:	e005      	b.n	800b2c4 <acc_cal_algorithms_phase_enhancement+0x28>
 800b2b8:	f003 f876 	bl	800e3a8 <acc_alg_atan2_q16>
 800b2bc:	2c30      	cmp	r4, #48	@ 0x30
 800b2be:	f84a 0b04 	str.w	r0, [sl], #4
 800b2c2:	d00f      	beq.n	800b2e4 <acc_cal_algorithms_phase_enhancement+0x48>
 800b2c4:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 800b2c8:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 800b2cc:	fb01 f301 	mul.w	r3, r1, r1
 800b2d0:	fb00 3300 	mla	r3, r0, r0, r3
 800b2d4:	4543      	cmp	r3, r8
 800b2d6:	f104 0401 	add.w	r4, r4, #1
 800b2da:	dced      	bgt.n	800b2b8 <acc_cal_algorithms_phase_enhancement+0x1c>
 800b2dc:	2000      	movs	r0, #0
 800b2de:	b03c      	add	sp, #240	@ 0xf0
 800b2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e4:	ac0b      	add	r4, sp, #44	@ 0x2c
 800b2e6:	f1ad 0602 	sub.w	r6, sp, #2
 800b2ea:	4621      	mov	r1, r4
 800b2ec:	4632      	mov	r2, r6
 800b2ee:	f10d 088c 	add.w	r8, sp, #140	@ 0x8c
 800b2f2:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bfb8      	it	lt
 800b2fa:	330f      	addlt	r3, #15
 800b2fc:	3202      	adds	r2, #2
 800b2fe:	111b      	asrs	r3, r3, #4
 800b300:	4541      	cmp	r1, r8
 800b302:	8013      	strh	r3, [r2, #0]
 800b304:	d1f5      	bne.n	800b2f2 <acc_cal_algorithms_phase_enhancement+0x56>
 800b306:	a80c      	add	r0, sp, #48	@ 0x30
 800b308:	2130      	movs	r1, #48	@ 0x30
 800b30a:	f7ff ff09 	bl	800b120 <acc_cal_algorithms_phase_unwrap>
 800b30e:	2200      	movs	r2, #0
 800b310:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800b314:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800b316:	4544      	cmp	r4, r8
 800b318:	eba3 0301 	sub.w	r3, r3, r1
 800b31c:	441a      	add	r2, r3
 800b31e:	d1f7      	bne.n	800b310 <acc_cal_algorithms_phase_enhancement+0x74>
 800b320:	490d      	ldr	r1, [pc, #52]	@ (800b358 <acc_cal_algorithms_phase_enhancement+0xbc>)
 800b322:	17d3      	asrs	r3, r2, #31
 800b324:	fb81 1202 	smull	r1, r2, r1, r2
 800b328:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 800b32c:	f502 4399 	add.w	r3, r2, #19584	@ 0x4c80
 800b330:	3330      	adds	r3, #48	@ 0x30
 800b332:	f64c 1162 	movw	r1, #51554	@ 0xc962
 800b336:	428b      	cmp	r3, r1
 800b338:	d8d0      	bhi.n	800b2dc <acc_cal_algorithms_phase_enhancement+0x40>
 800b33a:	3d02      	subs	r5, #2
 800b33c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800b340:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 800b344:	f825 3f02 	strh.w	r3, [r5, #2]!
 800b348:	42b1      	cmp	r1, r6
 800b34a:	d1f9      	bne.n	800b340 <acc_cal_algorithms_phase_enhancement+0xa4>
 800b34c:	2001      	movs	r0, #1
 800b34e:	803a      	strh	r2, [r7, #0]
 800b350:	b03c      	add	sp, #240	@ 0xf0
 800b352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b356:	bf00      	nop
 800b358:	2aaaaaab 	.word	0x2aaaaaab

0800b35c <acc_cal_algorithms_calc_pulse_params>:
 800b35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b360:	b085      	sub	sp, #20
 800b362:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 800b366:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800b36a:	9203      	str	r2, [sp, #12]
 800b36c:	d349      	bcc.n	800b402 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b36e:	9b02      	ldr	r3, [sp, #8]
 800b370:	2b08      	cmp	r3, #8
 800b372:	d046      	beq.n	800b402 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b374:	9a01      	ldr	r2, [sp, #4]
 800b376:	9c03      	ldr	r4, [sp, #12]
 800b378:	f1a2 0c12 	sub.w	ip, r2, #18
 800b37c:	2000      	movs	r0, #0
 800b37e:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 800b382:	f8cd c000 	str.w	ip, [sp]
 800b386:	4680      	mov	r8, r0
 800b388:	4682      	mov	sl, r0
 800b38a:	4683      	mov	fp, r0
 800b38c:	3a02      	subs	r2, #2
 800b38e:	2701      	movs	r7, #1
 800b390:	f240 29ee 	movw	r9, #750	@ 0x2ee
 800b394:	4684      	mov	ip, r0
 800b396:	e014      	b.n	800b3c2 <acc_cal_algorithms_calc_pulse_params+0x66>
 800b398:	2800      	cmp	r0, #0
 800b39a:	d136      	bne.n	800b40a <acc_cal_algorithms_calc_pulse_params+0xae>
 800b39c:	459b      	cmp	fp, r3
 800b39e:	da3a      	bge.n	800b416 <acc_cal_algorithms_calc_pulse_params+0xba>
 800b3a0:	469b      	mov	fp, r3
 800b3a2:	f04f 0801 	mov.w	r8, #1
 800b3a6:	f1cc 0600 	rsb	r6, ip, #0
 800b3aa:	429e      	cmp	r6, r3
 800b3ac:	9b00      	ldr	r3, [sp, #0]
 800b3ae:	bfc8      	it	gt
 800b3b0:	ebae 0c05 	subgt.w	ip, lr, r5
 800b3b4:	458a      	cmp	sl, r1
 800b3b6:	bf38      	it	cc
 800b3b8:	468a      	movcc	sl, r1
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	f104 0402 	add.w	r4, r4, #2
 800b3c0:	d01c      	beq.n	800b3fc <acc_cal_algorithms_calc_pulse_params+0xa0>
 800b3c2:	8a55      	ldrh	r5, [r2, #18]
 800b3c4:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 800b3c8:	1a6b      	subs	r3, r5, r1
 800b3ca:	f503 4600 	add.w	r6, r3, #32768	@ 0x8000
 800b3ce:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 800b3d2:	bf38      	it	cc
 800b3d4:	8023      	strhcc	r3, [r4, #0]
 800b3d6:	468e      	mov	lr, r1
 800b3d8:	bf2c      	ite	cs
 800b3da:	2700      	movcs	r7, #0
 800b3dc:	8811      	ldrhcc	r1, [r2, #0]
 800b3de:	454b      	cmp	r3, r9
 800b3e0:	dcda      	bgt.n	800b398 <acc_cal_algorithms_calc_pulse_params+0x3c>
 800b3e2:	4e58      	ldr	r6, [pc, #352]	@ (800b544 <acc_cal_algorithms_calc_pulse_params+0x1e8>)
 800b3e4:	459b      	cmp	fp, r3
 800b3e6:	bfb8      	it	lt
 800b3e8:	469b      	movlt	fp, r3
 800b3ea:	42b3      	cmp	r3, r6
 800b3ec:	dadb      	bge.n	800b3a6 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800b3ee:	f1b8 0f00 	cmp.w	r8, #0
 800b3f2:	bf0a      	itet	eq
 800b3f4:	2700      	moveq	r7, #0
 800b3f6:	4640      	movne	r0, r8
 800b3f8:	2001      	moveq	r0, #1
 800b3fa:	e7d4      	b.n	800b3a6 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800b3fc:	f8cd c000 	str.w	ip, [sp]
 800b400:	b977      	cbnz	r7, 800b420 <acc_cal_algorithms_calc_pulse_params+0xc4>
 800b402:	2000      	movs	r0, #0
 800b404:	b005      	add	sp, #20
 800b406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40a:	459b      	cmp	fp, r3
 800b40c:	4680      	mov	r8, r0
 800b40e:	da05      	bge.n	800b41c <acc_cal_algorithms_calc_pulse_params+0xc0>
 800b410:	469b      	mov	fp, r3
 800b412:	2700      	movs	r7, #0
 800b414:	e7c7      	b.n	800b3a6 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800b416:	f04f 0801 	mov.w	r8, #1
 800b41a:	e7c4      	b.n	800b3a6 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800b41c:	2700      	movs	r7, #0
 800b41e:	e7c2      	b.n	800b3a6 <acc_cal_algorithms_calc_pulse_params+0x4a>
 800b420:	f1b8 0f00 	cmp.w	r8, #0
 800b424:	d0ed      	beq.n	800b402 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b426:	2800      	cmp	r0, #0
 800b428:	d0eb      	beq.n	800b402 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b42a:	9b02      	ldr	r3, [sp, #8]
 800b42c:	f1b3 0e1c 	subs.w	lr, r3, #28
 800b430:	d0e7      	beq.n	800b402 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b432:	9f03      	ldr	r7, [sp, #12]
 800b434:	f8cd a008 	str.w	sl, [sp, #8]
 800b438:	f04f 0c00 	mov.w	ip, #0
 800b43c:	9003      	str	r0, [sp, #12]
 800b43e:	3712      	adds	r7, #18
 800b440:	46e1      	mov	r9, ip
 800b442:	46e0      	mov	r8, ip
 800b444:	46e2      	mov	sl, ip
 800b446:	4660      	mov	r0, ip
 800b448:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 800b44c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800b450:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800b454:	463d      	mov	r5, r7
 800b456:	463c      	mov	r4, r7
 800b458:	210a      	movs	r1, #10
 800b45a:	f934 6d02 	ldrsh.w	r6, [r4, #-2]!
 800b45e:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 800b462:	fb01 3306 	mla	r3, r1, r6, r3
 800b466:	fb01 3302 	mla	r3, r1, r2, r3
 800b46a:	3901      	subs	r1, #1
 800b46c:	d1f5      	bne.n	800b45a <acc_cal_algorithms_calc_pulse_params+0xfe>
 800b46e:	4543      	cmp	r3, r8
 800b470:	dc64      	bgt.n	800b53c <acc_cal_algorithms_calc_pulse_params+0x1e0>
 800b472:	454b      	cmp	r3, r9
 800b474:	bfa8      	it	ge
 800b476:	4643      	movge	r3, r8
 800b478:	da61      	bge.n	800b53e <acc_cal_algorithms_calc_pulse_params+0x1e2>
 800b47a:	4699      	mov	r9, r3
 800b47c:	46e2      	mov	sl, ip
 800b47e:	f10c 0c01 	add.w	ip, ip, #1
 800b482:	45f4      	cmp	ip, lr
 800b484:	d1e0      	bne.n	800b448 <acc_cal_algorithms_calc_pulse_params+0xec>
 800b486:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800b48a:	4598      	cmp	r8, r3
 800b48c:	4605      	mov	r5, r0
 800b48e:	4656      	mov	r6, sl
 800b490:	e9dd a002 	ldrd	sl, r0, [sp, #8]
 800b494:	ddb5      	ble.n	800b402 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b496:	4b2c      	ldr	r3, [pc, #176]	@ (800b548 <acc_cal_algorithms_calc_pulse_params+0x1ec>)
 800b498:	4599      	cmp	r9, r3
 800b49a:	dab2      	bge.n	800b402 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b49c:	f1bb 0f00 	cmp.w	fp, #0
 800b4a0:	d0af      	beq.n	800b402 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b4a2:	9b00      	ldr	r3, [sp, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d0ac      	beq.n	800b402 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b4a8:	9b01      	ldr	r3, [sp, #4]
 800b4aa:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800b4ac:	881b      	ldrh	r3, [r3, #0]
 800b4ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4b2:	00db      	lsls	r3, r3, #3
 800b4b4:	b144      	cbz	r4, 800b4c8 <acc_cal_algorithms_calc_pulse_params+0x16c>
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d204      	bcs.n	800b4c4 <acc_cal_algorithms_calc_pulse_params+0x168>
 800b4ba:	43d9      	mvns	r1, r3
 800b4bc:	4459      	add	r1, fp
 800b4be:	4411      	add	r1, r2
 800b4c0:	fbb1 f1fb 	udiv	r1, r1, fp
 800b4c4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800b4c6:	6021      	str	r1, [r4, #0]
 800b4c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b4ca:	2900      	cmp	r1, #0
 800b4cc:	d09a      	beq.n	800b404 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800b4ce:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b4d0:	2900      	cmp	r1, #0
 800b4d2:	d097      	beq.n	800b404 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	9c01      	ldr	r4, [sp, #4]
 800b4d8:	310e      	adds	r1, #14
 800b4da:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800b4de:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
 800b4e2:	ea4f 05c4 	mov.w	r5, r4, lsl #3
 800b4e6:	d205      	bcs.n	800b4f4 <acc_cal_algorithms_calc_pulse_params+0x198>
 800b4e8:	43db      	mvns	r3, r3
 800b4ea:	445b      	add	r3, fp
 800b4ec:	442b      	add	r3, r5
 800b4ee:	fbb3 f3fb 	udiv	r3, r3, fp
 800b4f2:	1ac9      	subs	r1, r1, r3
 800b4f4:	9b01      	ldr	r3, [sp, #4]
 800b4f6:	f106 0b0e 	add.w	fp, r6, #14
 800b4fa:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
 800b4fe:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
 800b502:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 800b506:	d907      	bls.n	800b518 <acc_cal_algorithms_calc_pulse_params+0x1bc>
 800b508:	9d00      	ldr	r5, [sp, #0]
 800b50a:	1e6b      	subs	r3, r5, #1
 800b50c:	4413      	add	r3, r2
 800b50e:	1b1b      	subs	r3, r3, r4
 800b510:	fbb3 f3f5 	udiv	r3, r3, r5
 800b514:	ebab 0b03 	sub.w	fp, fp, r3
 800b518:	2900      	cmp	r1, #0
 800b51a:	f6ff af72 	blt.w	800b402 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b51e:	f1bb 0f00 	cmp.w	fp, #0
 800b522:	f6ff af6e 	blt.w	800b402 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b526:	4559      	cmp	r1, fp
 800b528:	f73f af6b 	bgt.w	800b402 <acc_cal_algorithms_calc_pulse_params+0xa6>
 800b52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b52e:	ebab 0b01 	sub.w	fp, fp, r1
 800b532:	f8c3 b000 	str.w	fp, [r3]
 800b536:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b538:	6019      	str	r1, [r3, #0]
 800b53a:	e763      	b.n	800b404 <acc_cal_algorithms_calc_pulse_params+0xa8>
 800b53c:	4660      	mov	r0, ip
 800b53e:	4698      	mov	r8, r3
 800b540:	e79d      	b.n	800b47e <acc_cal_algorithms_calc_pulse_params+0x122>
 800b542:	bf00      	nop
 800b544:	fffffd12 	.word	0xfffffd12
 800b548:	ffff3cb0 	.word	0xffff3cb0

0800b54c <acc_cal_algorithms_pulseshaper_wavelet>:
 800b54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b550:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 800b554:	ae04      	add	r6, sp, #16
 800b556:	af05      	add	r7, sp, #20
 800b558:	2400      	movs	r4, #0
 800b55a:	e9cd 7401 	strd	r7, r4, [sp, #4]
 800b55e:	9600      	str	r6, [sp, #0]
 800b560:	460d      	mov	r5, r1
 800b562:	aa08      	add	r2, sp, #32
 800b564:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800b568:	2190      	movs	r1, #144	@ 0x90
 800b56a:	6034      	str	r4, [r6, #0]
 800b56c:	603c      	str	r4, [r7, #0]
 800b56e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800b572:	4680      	mov	r8, r0
 800b574:	f7ff fef2 	bl	800b35c <acc_cal_algorithms_calc_pulse_params>
 800b578:	b920      	cbnz	r0, 800b584 <acc_cal_algorithms_pulseshaper_wavelet+0x38>
 800b57a:	2000      	movs	r0, #0
 800b57c:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800b580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b584:	ab07      	add	r3, sp, #28
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	ab06      	add	r3, sp, #24
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	9402      	str	r4, [sp, #8]
 800b58e:	aa08      	add	r2, sp, #32
 800b590:	f508 7090 	add.w	r0, r8, #288	@ 0x120
 800b594:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800b598:	21f0      	movs	r1, #240	@ 0xf0
 800b59a:	f7ff fedf 	bl	800b35c <acc_cal_algorithms_calc_pulse_params>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d0eb      	beq.n	800b57a <acc_cal_algorithms_pulseshaper_wavelet+0x2e>
 800b5a2:	683f      	ldr	r7, [r7, #0]
 800b5a4:	9c07      	ldr	r4, [sp, #28]
 800b5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b5d4 <acc_cal_algorithms_pulseshaper_wavelet+0x88>)
 800b5a8:	490b      	ldr	r1, [pc, #44]	@ (800b5d8 <acc_cal_algorithms_pulseshaper_wavelet+0x8c>)
 800b5aa:	6832      	ldr	r2, [r6, #0]
 800b5ac:	1be4      	subs	r4, r4, r7
 800b5ae:	fb03 f304 	mul.w	r3, r3, r4
 800b5b2:	fb01 f707 	mul.w	r7, r1, r7
 800b5b6:	fb01 f202 	mul.w	r2, r1, r2
 800b5ba:	0c1b      	lsrs	r3, r3, #16
 800b5bc:	ebc3 3357 	rsb	r3, r3, r7, lsr #13
 800b5c0:	fb01 f104 	mul.w	r1, r1, r4
 800b5c4:	0b52      	lsrs	r2, r2, #13
 800b5c6:	e9c5 3100 	strd	r3, r1, [r5]
 800b5ca:	60aa      	str	r2, [r5, #8]
 800b5cc:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 800b5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d4:	00042aa8 	.word	0x00042aa8
 800b5d8:	00010aaa 	.word	0x00010aaa

0800b5dc <acc_cal_algorithms_pulseshaper_supply>:
 800b5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e0:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 800b5e4:	2600      	movs	r6, #0
 800b5e6:	af06      	add	r7, sp, #24
 800b5e8:	f10d 0814 	add.w	r8, sp, #20
 800b5ec:	4605      	mov	r5, r0
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	e9cd 7601 	strd	r7, r6, [sp, #4]
 800b5f4:	3002      	adds	r0, #2
 800b5f6:	aa0a      	add	r2, sp, #40	@ 0x28
 800b5f8:	f8cd 8000 	str.w	r8, [sp]
 800b5fc:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800b600:	f240 111f 	movw	r1, #287	@ 0x11f
 800b604:	f7ff feaa 	bl	800b35c <acc_cal_algorithms_calc_pulse_params>
 800b608:	b920      	cbnz	r0, 800b614 <acc_cal_algorithms_pulseshaper_supply+0x38>
 800b60a:	2000      	movs	r0, #0
 800b60c:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800b610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b614:	ab08      	add	r3, sp, #32
 800b616:	f10d 0a1c 	add.w	sl, sp, #28
 800b61a:	f10d 0b10 	add.w	fp, sp, #16
 800b61e:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b622:	f8cd b000 	str.w	fp, [sp]
 800b626:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800b62a:	aa0a      	add	r2, sp, #40	@ 0x28
 800b62c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800b630:	f505 7010 	add.w	r0, r5, #576	@ 0x240
 800b634:	f7ff fe92 	bl	800b35c <acc_cal_algorithms_calc_pulse_params>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d0e6      	beq.n	800b60a <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800b63c:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 800b640:	e9cd 6600 	strd	r6, r6, [sp]
 800b644:	aa0a      	add	r2, sp, #40	@ 0x28
 800b646:	f505 6090 	add.w	r0, r5, #1152	@ 0x480
 800b64a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b64e:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800b652:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800b656:	f7ff fe81 	bl	800b35c <acc_cal_algorithms_calc_pulse_params>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d0d5      	beq.n	800b60a <acc_cal_algorithms_pulseshaper_supply+0x2e>
 800b65e:	f8db c000 	ldr.w	ip, [fp]
 800b662:	f8d8 6000 	ldr.w	r6, [r8]
 800b666:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b66a:	f8d7 8000 	ldr.w	r8, [r7]
 800b66e:	f8da 2000 	ldr.w	r2, [sl]
 800b672:	f8d9 9000 	ldr.w	r9, [r9]
 800b676:	4f17      	ldr	r7, [pc, #92]	@ (800b6d4 <acc_cal_algorithms_pulseshaper_supply+0xf8>)
 800b678:	4d17      	ldr	r5, [pc, #92]	@ (800b6d8 <acc_cal_algorithms_pulseshaper_supply+0xfc>)
 800b67a:	4918      	ldr	r1, [pc, #96]	@ (800b6dc <acc_cal_algorithms_pulseshaper_supply+0x100>)
 800b67c:	4b18      	ldr	r3, [pc, #96]	@ (800b6e0 <acc_cal_algorithms_pulseshaper_supply+0x104>)
 800b67e:	eba9 090e 	sub.w	r9, r9, lr
 800b682:	eba6 060c 	sub.w	r6, r6, ip
 800b686:	eba2 0208 	sub.w	r2, r2, r8
 800b68a:	fb07 f706 	mul.w	r7, r7, r6
 800b68e:	fb05 f502 	mul.w	r5, r5, r2
 800b692:	fb01 f109 	mul.w	r1, r1, r9
 800b696:	fb03 fc0c 	mul.w	ip, r3, ip
 800b69a:	fb03 f808 	mul.w	r8, r3, r8
 800b69e:	fb03 fe0e 	mul.w	lr, r3, lr
 800b6a2:	0c3f      	lsrs	r7, r7, #16
 800b6a4:	0c2d      	lsrs	r5, r5, #16
 800b6a6:	0c09      	lsrs	r1, r1, #16
 800b6a8:	fb03 f606 	mul.w	r6, r3, r6
 800b6ac:	fb03 f202 	mul.w	r2, r3, r2
 800b6b0:	ebc7 375c 	rsb	r7, r7, ip, lsr #13
 800b6b4:	ebc5 3558 	rsb	r5, r5, r8, lsr #13
 800b6b8:	fb03 f309 	mul.w	r3, r3, r9
 800b6bc:	ebc1 315e 	rsb	r1, r1, lr, lsr #13
 800b6c0:	e9c4 7600 	strd	r7, r6, [r4]
 800b6c4:	e9c4 5202 	strd	r5, r2, [r4, #8]
 800b6c8:	e9c4 1304 	strd	r1, r3, [r4, #16]
 800b6cc:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 800b6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d4:	00021554 	.word	0x00021554
 800b6d8:	00074aa6 	.word	0x00074aa6
 800b6dc:	000b754e 	.word	0x000b754e
 800b6e0:	00010aaa 	.word	0x00010aaa

0800b6e4 <acc_a121_cal_session_start_1_pll_cbank_temp_program>:
 800b6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e8:	468a      	mov	sl, r1
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	4681      	mov	r9, r0
 800b6ee:	4611      	mov	r1, r2
 800b6f0:	4650      	mov	r0, sl
 800b6f2:	461f      	mov	r7, r3
 800b6f4:	2500      	movs	r5, #0
 800b6f6:	ab03      	add	r3, sp, #12
 800b6f8:	aa02      	add	r2, sp, #8
 800b6fa:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800b6fe:	f001 f959 	bl	800c9b4 <acc_sensor_a121_prepare_load_confmem>
 800b702:	4648      	mov	r0, r9
 800b704:	f001 fa00 	bl	800cb08 <acc_sensor_protocol_a121_prepare_load>
 800b708:	b300      	cbz	r0, 800b74c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	f640 3b4a 	movw	fp, #2890	@ 0xb4a
 800b710:	ebab 0405 	sub.w	r4, fp, r5
 800b714:	429c      	cmp	r4, r3
 800b716:	bf2c      	ite	cs
 800b718:	b29c      	uxthcs	r4, r3
 800b71a:	b2a4      	uxthcc	r4, r4
 800b71c:	9e02      	ldr	r6, [sp, #8]
 800b71e:	f003 fb29 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b722:	ea4f 0855 	mov.w	r8, r5, lsr #1
 800b726:	0862      	lsrs	r2, r4, #1
 800b728:	4631      	mov	r1, r6
 800b72a:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800b72e:	f003 f8e9 	bl	800e904 <acc_confprogram_copy>
 800b732:	f003 fb23 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b736:	887a      	ldrh	r2, [r7, #2]
 800b738:	211c      	movs	r1, #28
 800b73a:	e9cd 1200 	strd	r1, r2, [sp]
 800b73e:	4603      	mov	r3, r0
 800b740:	4622      	mov	r2, r4
 800b742:	4629      	mov	r1, r5
 800b744:	4630      	mov	r0, r6
 800b746:	f003 f813 	bl	800e770 <acc_confprogram_patch_offset>
 800b74a:	b918      	cbnz	r0, 800b754 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x70>
 800b74c:	2000      	movs	r0, #0
 800b74e:	b005      	add	sp, #20
 800b750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b754:	f003 fb12 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b758:	88ba      	ldrh	r2, [r7, #4]
 800b75a:	211a      	movs	r1, #26
 800b75c:	e9cd 1200 	strd	r1, r2, [sp]
 800b760:	4603      	mov	r3, r0
 800b762:	4622      	mov	r2, r4
 800b764:	4629      	mov	r1, r5
 800b766:	4630      	mov	r0, r6
 800b768:	f003 f802 	bl	800e770 <acc_confprogram_patch_offset>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d0ed      	beq.n	800b74c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800b770:	f003 fb04 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b774:	88fa      	ldrh	r2, [r7, #6]
 800b776:	9201      	str	r2, [sp, #4]
 800b778:	221b      	movs	r2, #27
 800b77a:	4603      	mov	r3, r0
 800b77c:	9200      	str	r2, [sp, #0]
 800b77e:	4629      	mov	r1, r5
 800b780:	4622      	mov	r2, r4
 800b782:	4630      	mov	r0, r6
 800b784:	f002 fff4 	bl	800e770 <acc_confprogram_patch_offset>
 800b788:	2800      	cmp	r0, #0
 800b78a:	d0df      	beq.n	800b74c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800b78c:	f003 faf6 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b790:	893a      	ldrh	r2, [r7, #8]
 800b792:	9201      	str	r2, [sp, #4]
 800b794:	2219      	movs	r2, #25
 800b796:	4603      	mov	r3, r0
 800b798:	9200      	str	r2, [sp, #0]
 800b79a:	4630      	mov	r0, r6
 800b79c:	4622      	mov	r2, r4
 800b79e:	4629      	mov	r1, r5
 800b7a0:	f002 ffe6 	bl	800e770 <acc_confprogram_patch_offset>
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	4623      	mov	r3, r4
 800b7a8:	4652      	mov	r2, sl
 800b7aa:	4641      	mov	r1, r8
 800b7ac:	4648      	mov	r0, r9
 800b7ae:	2e00      	cmp	r6, #0
 800b7b0:	d0cc      	beq.n	800b74c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 800b7b2:	f001 f917 	bl	800c9e4 <acc_sensor_a121_load_confmem>
 800b7b6:	9b03      	ldr	r3, [sp, #12]
 800b7b8:	441d      	add	r5, r3
 800b7ba:	b2ad      	uxth	r5, r5
 800b7bc:	f640 3249 	movw	r2, #2889	@ 0xb49
 800b7c0:	4295      	cmp	r5, r2
 800b7c2:	d9a5      	bls.n	800b710 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x2c>
 800b7c4:	4648      	mov	r0, r9
 800b7c6:	f240 115b 	movw	r1, #347	@ 0x15b
 800b7ca:	f001 f9f3 	bl	800cbb4 <acc_sensor_protocol_a121_run_program>
 800b7ce:	b005      	add	sp, #20
 800b7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7d4 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>:
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	b086      	sub	sp, #24
 800b7d8:	460d      	mov	r5, r1
 800b7da:	4604      	mov	r4, r0
 800b7dc:	f003 faca 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b7e0:	9005      	str	r0, [sp, #20]
 800b7e2:	f003 facb 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b7e6:	4e09      	ldr	r6, [pc, #36]	@ (800b80c <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program+0x38>)
 800b7e8:	9905      	ldr	r1, [sp, #20]
 800b7ea:	9501      	str	r5, [sp, #4]
 800b7ec:	2225      	movs	r2, #37	@ 0x25
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	9200      	str	r2, [sp, #0]
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	9602      	str	r6, [sp, #8]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f003 f81c 	bl	800e834 <acc_confprogram_live_patch>
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f240 2132 	movw	r1, #562	@ 0x232
 800b802:	b006      	add	sp, #24
 800b804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b808:	f001 b9d4 	b.w	800cbb4 <acc_sensor_protocol_a121_run_program>
 800b80c:	0800c981 	.word	0x0800c981

0800b810 <acc_a121_cal_session_start_3_delay_cbank_program>:
 800b810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b812:	b087      	sub	sp, #28
 800b814:	4604      	mov	r4, r0
 800b816:	460e      	mov	r6, r1
 800b818:	4615      	mov	r5, r2
 800b81a:	f003 faab 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b81e:	9005      	str	r0, [sp, #20]
 800b820:	f003 faac 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b824:	4f10      	ldr	r7, [pc, #64]	@ (800b868 <acc_a121_cal_session_start_3_delay_cbank_program+0x58>)
 800b826:	9905      	ldr	r1, [sp, #20]
 800b828:	9601      	str	r6, [sp, #4]
 800b82a:	2226      	movs	r2, #38	@ 0x26
 800b82c:	4603      	mov	r3, r0
 800b82e:	9200      	str	r2, [sp, #0]
 800b830:	4620      	mov	r0, r4
 800b832:	2200      	movs	r2, #0
 800b834:	9702      	str	r7, [sp, #8]
 800b836:	f002 fffd 	bl	800e834 <acc_confprogram_live_patch>
 800b83a:	f003 fa9b 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b83e:	9005      	str	r0, [sp, #20]
 800b840:	f003 fa9c 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b844:	2224      	movs	r2, #36	@ 0x24
 800b846:	9905      	ldr	r1, [sp, #20]
 800b848:	9200      	str	r2, [sp, #0]
 800b84a:	4603      	mov	r3, r0
 800b84c:	9501      	str	r5, [sp, #4]
 800b84e:	9702      	str	r7, [sp, #8]
 800b850:	4620      	mov	r0, r4
 800b852:	2200      	movs	r2, #0
 800b854:	f002 ffee 	bl	800e834 <acc_confprogram_live_patch>
 800b858:	4620      	mov	r0, r4
 800b85a:	f240 21c5 	movw	r1, #709	@ 0x2c5
 800b85e:	b007      	add	sp, #28
 800b860:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b864:	f001 b9a6 	b.w	800cbb4 <acc_sensor_protocol_a121_run_program>
 800b868:	0800c981 	.word	0x0800c981

0800b86c <acc_a121_cal_session_start_4_bba_vga_program>:
 800b86c:	f44f 7145 	mov.w	r1, #788	@ 0x314
 800b870:	f001 b9a0 	b.w	800cbb4 <acc_sensor_protocol_a121_run_program>

0800b874 <acc_a121_cal_session_start_5_area_index_program>:
 800b874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b876:	b087      	sub	sp, #28
 800b878:	4604      	mov	r4, r0
 800b87a:	460f      	mov	r7, r1
 800b87c:	4616      	mov	r6, r2
 800b87e:	f003 fa79 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b882:	9005      	str	r0, [sp, #20]
 800b884:	f003 fa7a 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b888:	883a      	ldrh	r2, [r7, #0]
 800b88a:	4d21      	ldr	r5, [pc, #132]	@ (800b910 <acc_a121_cal_session_start_5_area_index_program+0x9c>)
 800b88c:	9201      	str	r2, [sp, #4]
 800b88e:	2207      	movs	r2, #7
 800b890:	9905      	ldr	r1, [sp, #20]
 800b892:	9200      	str	r2, [sp, #0]
 800b894:	4603      	mov	r3, r0
 800b896:	2200      	movs	r2, #0
 800b898:	4620      	mov	r0, r4
 800b89a:	9502      	str	r5, [sp, #8]
 800b89c:	f002 ffca 	bl	800e834 <acc_confprogram_live_patch>
 800b8a0:	f003 fa68 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b8a4:	9005      	str	r0, [sp, #20]
 800b8a6:	f003 fa69 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b8aa:	2208      	movs	r2, #8
 800b8ac:	9905      	ldr	r1, [sp, #20]
 800b8ae:	9601      	str	r6, [sp, #4]
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	9200      	str	r2, [sp, #0]
 800b8b4:	9502      	str	r5, [sp, #8]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f002 ffbb 	bl	800e834 <acc_confprogram_live_patch>
 800b8be:	f003 fa59 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b8c2:	9005      	str	r0, [sp, #20]
 800b8c4:	f003 fa5a 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b8c8:	2603      	movs	r6, #3
 800b8ca:	2209      	movs	r2, #9
 800b8cc:	9905      	ldr	r1, [sp, #20]
 800b8ce:	9502      	str	r5, [sp, #8]
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	e9cd 2600 	strd	r2, r6, [sp]
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f002 ffab 	bl	800e834 <acc_confprogram_live_patch>
 800b8de:	f003 fa49 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b8e2:	9005      	str	r0, [sp, #20]
 800b8e4:	f003 fa4a 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b8e8:	2606      	movs	r6, #6
 800b8ea:	220a      	movs	r2, #10
 800b8ec:	e9cd 2600 	strd	r2, r6, [sp]
 800b8f0:	9905      	ldr	r1, [sp, #20]
 800b8f2:	9502      	str	r5, [sp, #8]
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f002 ff9b 	bl	800e834 <acc_confprogram_live_patch>
 800b8fe:	4620      	mov	r0, r4
 800b900:	f240 31d5 	movw	r1, #981	@ 0x3d5
 800b904:	b007      	add	sp, #28
 800b906:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b90a:	f001 b953 	b.w	800cbb4 <acc_sensor_protocol_a121_run_program>
 800b90e:	bf00      	nop
 800b910:	0800c981 	.word	0x0800c981

0800b914 <acc_a121_cal_session_start_6_tx_freq_program>:
 800b914:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b916:	b087      	sub	sp, #28
 800b918:	460d      	mov	r5, r1
 800b91a:	4604      	mov	r4, r0
 800b91c:	f003 fa2a 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b920:	9005      	str	r0, [sp, #20]
 800b922:	f003 fa2b 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b926:	882a      	ldrh	r2, [r5, #0]
 800b928:	4e41      	ldr	r6, [pc, #260]	@ (800ba30 <acc_a121_cal_session_start_6_tx_freq_program+0x11c>)
 800b92a:	9201      	str	r2, [sp, #4]
 800b92c:	2221      	movs	r2, #33	@ 0x21
 800b92e:	9905      	ldr	r1, [sp, #20]
 800b930:	9200      	str	r2, [sp, #0]
 800b932:	4603      	mov	r3, r0
 800b934:	2200      	movs	r2, #0
 800b936:	4620      	mov	r0, r4
 800b938:	9602      	str	r6, [sp, #8]
 800b93a:	f002 ff7b 	bl	800e834 <acc_confprogram_live_patch>
 800b93e:	f003 fa19 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b942:	9005      	str	r0, [sp, #20]
 800b944:	f003 fa1a 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b948:	886f      	ldrh	r7, [r5, #2]
 800b94a:	9905      	ldr	r1, [sp, #20]
 800b94c:	9701      	str	r7, [sp, #4]
 800b94e:	2222      	movs	r2, #34	@ 0x22
 800b950:	4603      	mov	r3, r0
 800b952:	9200      	str	r2, [sp, #0]
 800b954:	9602      	str	r6, [sp, #8]
 800b956:	2200      	movs	r2, #0
 800b958:	4620      	mov	r0, r4
 800b95a:	f002 ff6b 	bl	800e834 <acc_confprogram_live_patch>
 800b95e:	f003 fa09 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b962:	9005      	str	r0, [sp, #20]
 800b964:	f003 fa0a 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b968:	88ef      	ldrh	r7, [r5, #6]
 800b96a:	9905      	ldr	r1, [sp, #20]
 800b96c:	9701      	str	r7, [sp, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	4603      	mov	r3, r0
 800b972:	9200      	str	r2, [sp, #0]
 800b974:	9602      	str	r6, [sp, #8]
 800b976:	2200      	movs	r2, #0
 800b978:	4620      	mov	r0, r4
 800b97a:	f002 ff5b 	bl	800e834 <acc_confprogram_live_patch>
 800b97e:	f003 f9f9 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b982:	9005      	str	r0, [sp, #20]
 800b984:	f003 f9fa 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b988:	892f      	ldrh	r7, [r5, #8]
 800b98a:	9905      	ldr	r1, [sp, #20]
 800b98c:	9701      	str	r7, [sp, #4]
 800b98e:	2202      	movs	r2, #2
 800b990:	4603      	mov	r3, r0
 800b992:	9200      	str	r2, [sp, #0]
 800b994:	9602      	str	r6, [sp, #8]
 800b996:	2200      	movs	r2, #0
 800b998:	4620      	mov	r0, r4
 800b99a:	f002 ff4b 	bl	800e834 <acc_confprogram_live_patch>
 800b99e:	f003 f9e9 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b9a2:	9005      	str	r0, [sp, #20]
 800b9a4:	f003 f9ea 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b9a8:	89af      	ldrh	r7, [r5, #12]
 800b9aa:	9905      	ldr	r1, [sp, #20]
 800b9ac:	9701      	str	r7, [sp, #4]
 800b9ae:	2203      	movs	r2, #3
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	9200      	str	r2, [sp, #0]
 800b9b4:	9602      	str	r6, [sp, #8]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f002 ff3b 	bl	800e834 <acc_confprogram_live_patch>
 800b9be:	f003 f9d9 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b9c2:	9005      	str	r0, [sp, #20]
 800b9c4:	f003 f9da 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b9c8:	89ef      	ldrh	r7, [r5, #14]
 800b9ca:	9905      	ldr	r1, [sp, #20]
 800b9cc:	9701      	str	r7, [sp, #4]
 800b9ce:	2204      	movs	r2, #4
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	9200      	str	r2, [sp, #0]
 800b9d4:	9602      	str	r6, [sp, #8]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f002 ff2b 	bl	800e834 <acc_confprogram_live_patch>
 800b9de:	f003 f9c9 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800b9e2:	9005      	str	r0, [sp, #20]
 800b9e4:	f003 f9ca 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800b9e8:	8a6f      	ldrh	r7, [r5, #18]
 800b9ea:	9905      	ldr	r1, [sp, #20]
 800b9ec:	9602      	str	r6, [sp, #8]
 800b9ee:	2205      	movs	r2, #5
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	9200      	str	r2, [sp, #0]
 800b9f4:	9701      	str	r7, [sp, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f002 ff1b 	bl	800e834 <acc_confprogram_live_patch>
 800b9fe:	f003 f9b9 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800ba02:	9005      	str	r0, [sp, #20]
 800ba04:	f003 f9ba 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800ba08:	2206      	movs	r2, #6
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	8aa8      	ldrh	r0, [r5, #20]
 800ba0e:	9905      	ldr	r1, [sp, #20]
 800ba10:	9001      	str	r0, [sp, #4]
 800ba12:	9200      	str	r2, [sp, #0]
 800ba14:	9602      	str	r6, [sp, #8]
 800ba16:	4620      	mov	r0, r4
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f002 ff0b 	bl	800e834 <acc_confprogram_live_patch>
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f44f 717b 	mov.w	r1, #1004	@ 0x3ec
 800ba24:	b007      	add	sp, #28
 800ba26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ba2a:	f001 b8c3 	b.w	800cbb4 <acc_sensor_protocol_a121_run_program>
 800ba2e:	bf00      	nop
 800ba30:	0800c981 	.word	0x0800c981

0800ba34 <acc_a121_cal_session_start_7_rx_freq_program>:
 800ba34:	b570      	push	{r4, r5, r6, lr}
 800ba36:	b086      	sub	sp, #24
 800ba38:	460d      	mov	r5, r1
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	f003 f99a 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800ba40:	9005      	str	r0, [sp, #20]
 800ba42:	f003 f99b 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800ba46:	4e09      	ldr	r6, [pc, #36]	@ (800ba6c <acc_a121_cal_session_start_7_rx_freq_program+0x38>)
 800ba48:	9905      	ldr	r1, [sp, #20]
 800ba4a:	9501      	str	r5, [sp, #4]
 800ba4c:	220c      	movs	r2, #12
 800ba4e:	4603      	mov	r3, r0
 800ba50:	9200      	str	r2, [sp, #0]
 800ba52:	4620      	mov	r0, r4
 800ba54:	9602      	str	r6, [sp, #8]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f002 feec 	bl	800e834 <acc_confprogram_live_patch>
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f240 4116 	movw	r1, #1046	@ 0x416
 800ba62:	b006      	add	sp, #24
 800ba64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba68:	f001 b8a4 	b.w	800cbb4 <acc_sensor_protocol_a121_run_program>
 800ba6c:	0800c981 	.word	0x0800c981

0800ba70 <acc_a121_cal_session_start_8_phase_enhancement_program>:
 800ba70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba72:	b087      	sub	sp, #28
 800ba74:	4604      	mov	r4, r0
 800ba76:	460e      	mov	r6, r1
 800ba78:	f003 f97c 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800ba7c:	9005      	str	r0, [sp, #20]
 800ba7e:	f003 f97d 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800ba82:	4d19      	ldr	r5, [pc, #100]	@ (800bae8 <acc_a121_cal_session_start_8_phase_enhancement_program+0x78>)
 800ba84:	9905      	ldr	r1, [sp, #20]
 800ba86:	9601      	str	r6, [sp, #4]
 800ba88:	220b      	movs	r2, #11
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	9200      	str	r2, [sp, #0]
 800ba8e:	4620      	mov	r0, r4
 800ba90:	2200      	movs	r2, #0
 800ba92:	9502      	str	r5, [sp, #8]
 800ba94:	f002 fece 	bl	800e834 <acc_confprogram_live_patch>
 800ba98:	f003 f96c 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800ba9c:	9005      	str	r0, [sp, #20]
 800ba9e:	f003 f96d 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800baa2:	2609      	movs	r6, #9
 800baa4:	2200      	movs	r2, #0
 800baa6:	e9cd 6200 	strd	r6, r2, [sp]
 800baaa:	9905      	ldr	r1, [sp, #20]
 800baac:	9502      	str	r5, [sp, #8]
 800baae:	4603      	mov	r3, r0
 800bab0:	4620      	mov	r0, r4
 800bab2:	f002 febf 	bl	800e834 <acc_confprogram_live_patch>
 800bab6:	f003 f95d 	bl	800ed74 <acc_image_a121_r1a_cal_session_get>
 800baba:	9005      	str	r0, [sp, #20]
 800babc:	f003 f95e 	bl	800ed7c <acc_image_a121_r1a_cal_session_param_table_get>
 800bac0:	277e      	movs	r7, #126	@ 0x7e
 800bac2:	260a      	movs	r6, #10
 800bac4:	9905      	ldr	r1, [sp, #20]
 800bac6:	9502      	str	r5, [sp, #8]
 800bac8:	4603      	mov	r3, r0
 800baca:	e9cd 6700 	strd	r6, r7, [sp]
 800bace:	2200      	movs	r2, #0
 800bad0:	4620      	mov	r0, r4
 800bad2:	f002 feaf 	bl	800e834 <acc_confprogram_live_patch>
 800bad6:	4620      	mov	r0, r4
 800bad8:	f240 4152 	movw	r1, #1106	@ 0x452
 800badc:	b007      	add	sp, #28
 800bade:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bae2:	f001 b867 	b.w	800cbb4 <acc_sensor_protocol_a121_run_program>
 800bae6:	bf00      	nop
 800bae8:	0800c981 	.word	0x0800c981

0800baec <acc_a121_cal_session_start_9_pulseshaper_program>:
 800baec:	f240 417b 	movw	r1, #1147	@ 0x47b
 800baf0:	f001 b860 	b.w	800cbb4 <acc_sensor_protocol_a121_run_program>

0800baf4 <acc_a121_cal_session_ack_program>:
 800baf4:	b530      	push	{r4, r5, lr}
 800baf6:	b083      	sub	sp, #12
 800baf8:	4604      	mov	r4, r0
 800bafa:	aa01      	add	r2, sp, #4
 800bafc:	2101      	movs	r1, #1
 800bafe:	f001 f923 	bl	800cd48 <acc_sensor_protocol_a121_get_event>
 800bb02:	4620      	mov	r0, r4
 800bb04:	2200      	movs	r2, #0
 800bb06:	2101      	movs	r1, #1
 800bb08:	f001 f8d6 	bl	800ccb8 <acc_sensor_protocol_a121_ack_event>
 800bb0c:	a801      	add	r0, sp, #4
 800bb0e:	f001 f98d 	bl	800ce2c <acc_sensor_protocol_a121_is_done>
 800bb12:	4604      	mov	r4, r0
 800bb14:	b930      	cbnz	r0, 800bb24 <acc_a121_cal_session_ack_program+0x30>
 800bb16:	4a05      	ldr	r2, [pc, #20]	@ (800bb2c <acc_a121_cal_session_ack_program+0x38>)
 800bb18:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800bb1c:	6915      	ldr	r5, [r2, #16]
 800bb1e:	4904      	ldr	r1, [pc, #16]	@ (800bb30 <acc_a121_cal_session_ack_program+0x3c>)
 800bb20:	4a04      	ldr	r2, [pc, #16]	@ (800bb34 <acc_a121_cal_session_ack_program+0x40>)
 800bb22:	47a8      	blx	r5
 800bb24:	4620      	mov	r0, r4
 800bb26:	b003      	add	sp, #12
 800bb28:	bd30      	pop	{r4, r5, pc}
 800bb2a:	bf00      	nop
 800bb2c:	2000069c 	.word	0x2000069c
 800bb30:	0801395c 	.word	0x0801395c
 800bb34:	08013914 	.word	0x08013914

0800bb38 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>:
 800bb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb3c:	4688      	mov	r8, r1
 800bb3e:	4607      	mov	r7, r0
 800bb40:	2132      	movs	r1, #50	@ 0x32
 800bb42:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800bb46:	461e      	mov	r6, r3
 800bb48:	f002 ff36 	bl	800e9b8 <acc_sensor_reg_read>
 800bb4c:	2312      	movs	r3, #18
 800bb4e:	2200      	movs	r2, #0
 800bb50:	4641      	mov	r1, r8
 800bb52:	4638      	mov	r0, r7
 800bb54:	f000 ff70 	bl	800ca38 <acc_sensor_a121_buffer_processed_read>
 800bb58:	8802      	ldrh	r2, [r0, #0]
 800bb5a:	8032      	strh	r2, [r6, #0]
 800bb5c:	8842      	ldrh	r2, [r0, #2]
 800bb5e:	802a      	strh	r2, [r5, #0]
 800bb60:	1d03      	adds	r3, r0, #4
 800bb62:	6023      	str	r3, [r4, #0]
 800bb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bb68 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>:
 800bb68:	b570      	push	{r4, r5, r6, lr}
 800bb6a:	4616      	mov	r6, r2
 800bb6c:	461c      	mov	r4, r3
 800bb6e:	2200      	movs	r2, #0
 800bb70:	2341      	movs	r3, #65	@ 0x41
 800bb72:	9d04      	ldr	r5, [sp, #16]
 800bb74:	f000 ff60 	bl	800ca38 <acc_sensor_a121_buffer_processed_read>
 800bb78:	8c02      	ldrh	r2, [r0, #32]
 800bb7a:	6030      	str	r0, [r6, #0]
 800bb7c:	f100 0322 	add.w	r3, r0, #34	@ 0x22
 800bb80:	8022      	strh	r2, [r4, #0]
 800bb82:	602b      	str	r3, [r5, #0]
 800bb84:	bd70      	pop	{r4, r5, r6, pc}
 800bb86:	bf00      	nop

0800bb88 <acc_a121_cal_session_get_3_delay_cbank_program_data>:
 800bb88:	b510      	push	{r4, lr}
 800bb8a:	2320      	movs	r3, #32
 800bb8c:	4614      	mov	r4, r2
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f000 ff52 	bl	800ca38 <acc_sensor_a121_buffer_processed_read>
 800bb94:	6020      	str	r0, [r4, #0]
 800bb96:	bd10      	pop	{r4, pc}

0800bb98 <acc_a121_cal_session_get_4_bba_vga_program_data>:
 800bb98:	b510      	push	{r4, lr}
 800bb9a:	2350      	movs	r3, #80	@ 0x50
 800bb9c:	4614      	mov	r4, r2
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f000 ff4a 	bl	800ca38 <acc_sensor_a121_buffer_processed_read>
 800bba4:	6020      	str	r0, [r4, #0]
 800bba6:	bd10      	pop	{r4, pc}

0800bba8 <acc_a121_cal_session_get_5_area_index_program_data>:
 800bba8:	b510      	push	{r4, lr}
 800bbaa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800bbae:	4614      	mov	r4, r2
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f000 ff41 	bl	800ca38 <acc_sensor_a121_buffer_processed_read>
 800bbb6:	6020      	str	r0, [r4, #0]
 800bbb8:	bd10      	pop	{r4, pc}
 800bbba:	bf00      	nop

0800bbbc <acc_a121_cal_session_get_6_tx_freq_program_data>:
 800bbbc:	f7ff bff4 	b.w	800bba8 <acc_a121_cal_session_get_5_area_index_program_data>

0800bbc0 <acc_a121_cal_session_get_7_rx_freq_program_data>:
 800bbc0:	b510      	push	{r4, lr}
 800bbc2:	2310      	movs	r3, #16
 800bbc4:	4614      	mov	r4, r2
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f000 ff36 	bl	800ca38 <acc_sensor_a121_buffer_processed_read>
 800bbcc:	6020      	str	r0, [r4, #0]
 800bbce:	bd10      	pop	{r4, pc}

0800bbd0 <acc_a121_cal_session_get_8_phase_enhancement_program_data>:
 800bbd0:	b510      	push	{r4, lr}
 800bbd2:	2360      	movs	r3, #96	@ 0x60
 800bbd4:	4614      	mov	r4, r2
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f000 ff2e 	bl	800ca38 <acc_sensor_a121_buffer_processed_read>
 800bbdc:	6020      	str	r0, [r4, #0]
 800bbde:	bd10      	pop	{r4, pc}

0800bbe0 <acc_a121_cal_session_get_9_pulseshaper_program_data>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	4615      	mov	r5, r2
 800bbe4:	461c      	mov	r4, r3
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f44f 639c 	mov.w	r3, #1248	@ 0x4e0
 800bbec:	f000 ff24 	bl	800ca38 <acc_sensor_a121_buffer_processed_read>
 800bbf0:	f500 7340 	add.w	r3, r0, #768	@ 0x300
 800bbf4:	6028      	str	r0, [r5, #0]
 800bbf6:	6023      	str	r3, [r4, #0]
 800bbf8:	bd38      	pop	{r3, r4, r5, pc}
 800bbfa:	bf00      	nop

0800bbfc <acc_detector_utils_get_fwhm>:
 800bbfc:	3801      	subs	r0, #1
 800bbfe:	b2c0      	uxtb	r0, r0
 800bc00:	2804      	cmp	r0, #4
 800bc02:	bf9d      	ittte	ls
 800bc04:	4b03      	ldrls	r3, [pc, #12]	@ (800bc14 <acc_detector_utils_get_fwhm+0x18>)
 800bc06:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 800bc0a:	ed90 0a00 	vldrls	s0, [r0]
 800bc0e:	ed9f 0a02 	vldrhi	s0, [pc, #8]	@ 800bc18 <acc_detector_utils_get_fwhm+0x1c>
 800bc12:	4770      	bx	lr
 800bc14:	0801397c 	.word	0x0801397c
 800bc18:	00000000 	.word	0x00000000

0800bc1c <acc_detector_utils_radar_loop_gain_per_hwaas>:
 800bc1c:	3801      	subs	r0, #1
 800bc1e:	b2c0      	uxtb	r0, r0
 800bc20:	2804      	cmp	r0, #4
 800bc22:	bf9d      	ittte	ls
 800bc24:	4b03      	ldrls	r3, [pc, #12]	@ (800bc34 <acc_detector_utils_radar_loop_gain_per_hwaas+0x18>)
 800bc26:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 800bc2a:	ed90 0a00 	vldrls	s0, [r0]
 800bc2e:	ed9f 0a02 	vldrhi	s0, [pc, #8]	@ 800bc38 <acc_detector_utils_radar_loop_gain_per_hwaas+0x1c>
 800bc32:	4770      	bx	lr
 800bc34:	08013990 	.word	0x08013990
 800bc38:	00000000 	.word	0x00000000

0800bc3c <acc_detector_utils_select_prf>:
 800bc3c:	ee07 0a90 	vmov	s15, r0
 800bc40:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 800bcac <acc_detector_utils_select_prf+0x70>
 800bc44:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800bcb0 <acc_detector_utils_select_prf+0x74>
 800bc48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc50:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc58:	d501      	bpl.n	800bc5e <acc_detector_utils_select_prf+0x22>
 800bc5a:	2901      	cmp	r1, #1
 800bc5c:	d020      	beq.n	800bca0 <acc_detector_utils_select_prf+0x64>
 800bc5e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800bcb4 <acc_detector_utils_select_prf+0x78>
 800bc62:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc6a:	d417      	bmi.n	800bc9c <acc_detector_utils_select_prf+0x60>
 800bc6c:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800bc70:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc78:	d416      	bmi.n	800bca8 <acc_detector_utils_select_prf+0x6c>
 800bc7a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800bcb8 <acc_detector_utils_select_prf+0x7c>
 800bc7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc86:	d40d      	bmi.n	800bca4 <acc_detector_utils_select_prf+0x68>
 800bc88:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800bcbc <acc_detector_utils_select_prf+0x80>
 800bc8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc94:	bf4c      	ite	mi
 800bc96:	2004      	movmi	r0, #4
 800bc98:	2005      	movpl	r0, #5
 800bc9a:	4770      	bx	lr
 800bc9c:	2001      	movs	r0, #1
 800bc9e:	4770      	bx	lr
 800bca0:	2000      	movs	r0, #0
 800bca2:	4770      	bx	lr
 800bca4:	2003      	movs	r0, #3
 800bca6:	4770      	bx	lr
 800bca8:	2002      	movs	r0, #2
 800bcaa:	4770      	bx	lr
 800bcac:	3b23d70a 	.word	0x3b23d70a
 800bcb0:	40466666 	.word	0x40466666
 800bcb4:	40a33333 	.word	0x40a33333
 800bcb8:	414b3333 	.word	0x414b3333
 800bcbc:	41940000 	.word	0x41940000

0800bcc0 <acc_detector_utils_align_size_32bit>:
 800bcc0:	3003      	adds	r0, #3
 800bcc2:	f020 0003 	bic.w	r0, r0, #3
 800bcc6:	4770      	bx	lr

0800bcc8 <acc_detector_utils_relaxed_ceil>:
 800bcc8:	b508      	push	{r3, lr}
 800bcca:	ed2d 8b02 	vpush	{d8}
 800bcce:	eef0 8a40 	vmov.f32	s17, s0
 800bcd2:	eeb0 8a60 	vmov.f32	s16, s1
 800bcd6:	f005 fa21 	bl	801111c <roundf>
 800bcda:	ee30 8a08 	vadd.f32	s16, s0, s16
 800bcde:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bce2:	ecbd 8b02 	vpop	{d8}
 800bce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcea:	bf44      	itt	mi
 800bcec:	eef7 7a00 	vmovmi.f32	s15, #112	@ 0x3f800000  1.0
 800bcf0:	ee30 0a27 	vaddmi.f32	s0, s0, s15
 800bcf4:	bd08      	pop	{r3, pc}
 800bcf6:	bf00      	nop

0800bcf8 <acc_detector_utils_get_max_profile_without_direct_leakage>:
 800bcf8:	b430      	push	{r4, r5}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	4b11      	ldr	r3, [pc, #68]	@ (800bd44 <acc_detector_utils_get_max_profile_without_direct_leakage+0x4c>)
 800bcfe:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800bd48 <acc_detector_utils_get_max_profile_without_direct_leakage+0x50>
 800bd02:	4c12      	ldr	r4, [pc, #72]	@ (800bd4c <acc_detector_utils_get_max_profile_without_direct_leakage+0x54>)
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	f10d 0201 	add.w	r2, sp, #1
 800bd0a:	ad01      	add	r5, sp, #4
 800bd0c:	2005      	movs	r0, #5
 800bd0e:	1e43      	subs	r3, r0, #1
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b04      	cmp	r3, #4
 800bd14:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800bd18:	bf9a      	itte	ls
 800bd1a:	edd1 7a00 	vldrls	s15, [r1]
 800bd1e:	ee77 7aa7 	vaddls.f32	s15, s15, s15
 800bd22:	eef0 7a47 	vmovhi.f32	s15, s14
 800bd26:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd2e:	da05      	bge.n	800bd3c <acc_detector_utils_get_max_profile_without_direct_leakage+0x44>
 800bd30:	42aa      	cmp	r2, r5
 800bd32:	d002      	beq.n	800bd3a <acc_detector_utils_get_max_profile_without_direct_leakage+0x42>
 800bd34:	f812 0b01 	ldrb.w	r0, [r2], #1
 800bd38:	e7e9      	b.n	800bd0e <acc_detector_utils_get_max_profile_without_direct_leakage+0x16>
 800bd3a:	2001      	movs	r0, #1
 800bd3c:	b002      	add	sp, #8
 800bd3e:	bc30      	pop	{r4, r5}
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	02030405 	.word	0x02030405
 800bd48:	00000000 	.word	0x00000000
 800bd4c:	0801397c 	.word	0x0801397c

0800bd50 <acc_detector_utils_get_max_step_length>:
 800bd50:	3801      	subs	r0, #1
 800bd52:	b2c0      	uxtb	r0, r0
 800bd54:	2804      	cmp	r0, #4
 800bd56:	d901      	bls.n	800bd5c <acc_detector_utils_get_max_step_length+0xc>
 800bd58:	2000      	movs	r0, #0
 800bd5a:	4770      	bx	lr
 800bd5c:	b508      	push	{r3, lr}
 800bd5e:	4b29      	ldr	r3, [pc, #164]	@ (800be04 <acc_detector_utils_get_max_step_length+0xb4>)
 800bd60:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800be08 <acc_detector_utils_get_max_step_length+0xb8>
 800bd64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bd68:	edd0 6a00 	vldr	s13, [r0]
 800bd6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd70:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 800bd74:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7c:	ed2d 8b02 	vpush	{d8}
 800bd80:	d40f      	bmi.n	800bda2 <acc_detector_utils_get_max_step_length+0x52>
 800bd82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd86:	4b21      	ldr	r3, [pc, #132]	@ (800be0c <acc_detector_utils_get_max_step_length+0xbc>)
 800bd88:	ee17 2a90 	vmov	r2, s15
 800bd8c:	b290      	uxth	r0, r2
 800bd8e:	fba3 3000 	umull	r3, r0, r3, r0
 800bd92:	0900      	lsrs	r0, r0, #4
 800bd94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800bd98:	00c0      	lsls	r0, r0, #3
 800bd9a:	b280      	uxth	r0, r0
 800bd9c:	ecbd 8b02 	vpop	{d8}
 800bda0:	bd08      	pop	{r3, pc}
 800bda2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdaa:	dd1d      	ble.n	800bde8 <acc_detector_utils_get_max_step_length+0x98>
 800bdac:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800bdb0:	eeb0 0a48 	vmov.f32	s0, s16
 800bdb4:	f005 f9b2 	bl	801111c <roundf>
 800bdb8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800be10 <acc_detector_utils_get_max_step_length+0xc0>
 800bdbc:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bdc0:	2018      	movs	r0, #24
 800bdc2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bdc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdca:	bfc4      	itt	gt
 800bdcc:	eef7 7a00 	vmovgt.f32	s15, #112	@ 0x3f800000  1.0
 800bdd0:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 800bdd4:	ecbd 8b02 	vpop	{d8}
 800bdd8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800bddc:	ee10 3a10 	vmov	r3, s0
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	fbb0 f0f3 	udiv	r0, r0, r3
 800bde6:	bd08      	pop	{r3, pc}
 800bde8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdec:	2218      	movs	r2, #24
 800bdee:	ee17 3a90 	vmov	r3, s15
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bdfc:	00d8      	lsls	r0, r3, #3
 800bdfe:	b280      	uxth	r0, r0
 800be00:	e7cc      	b.n	800bd9c <acc_detector_utils_get_max_step_length+0x4c>
 800be02:	bf00      	nop
 800be04:	0801397c 	.word	0x0801397c
 800be08:	3b23d70a 	.word	0x3b23d70a
 800be0c:	aaaaaaab 	.word	0xaaaaaaab
 800be10:	3727c5ac 	.word	0x3727c5ac

0800be14 <acc_detector_utils_min_u8>:
 800be14:	4288      	cmp	r0, r1
 800be16:	bf28      	it	cs
 800be18:	4608      	movcs	r0, r1
 800be1a:	4770      	bx	lr

0800be1c <acc_detector_utils_max_u8>:
 800be1c:	4288      	cmp	r0, r1
 800be1e:	bf38      	it	cc
 800be20:	4608      	movcc	r0, r1
 800be22:	4770      	bx	lr

0800be24 <acc_detector_utils_equal_f32>:
 800be24:	eeb0 7ac0 	vabs.f32	s14, s0
 800be28:	eef0 7ae0 	vabs.f32	s15, s1
 800be2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be34:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800be5c <acc_detector_utils_equal_f32+0x38>
 800be38:	bf58      	it	pl
 800be3a:	eef0 7a47 	vmovpl.f32	s15, s14
 800be3e:	ee70 0a60 	vsub.f32	s1, s0, s1
 800be42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800be46:	eeb0 0ae0 	vabs.f32	s0, s1
 800be4a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800be4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be52:	bf94      	ite	ls
 800be54:	2001      	movls	r0, #1
 800be56:	2000      	movhi	r0, #0
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	34000000 	.word	0x34000000

0800be60 <acc_detector_utils_get_distance_m>:
 800be60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be64:	ed2d 8b02 	vpush	{d8}
 800be68:	460d      	mov	r5, r1
 800be6a:	4606      	mov	r6, r0
 800be6c:	f7fd fde6 	bl	8009a3c <acc_config_num_subsweeps_get>
 800be70:	4607      	mov	r7, r0
 800be72:	2800      	cmp	r0, #0
 800be74:	d040      	beq.n	800bef8 <acc_detector_utils_get_distance_m+0x98>
 800be76:	2400      	movs	r4, #0
 800be78:	46a0      	mov	r8, r4
 800be7a:	4621      	mov	r1, r4
 800be7c:	4630      	mov	r0, r6
 800be7e:	f7fd fe5d 	bl	8009b3c <acc_config_subsweep_num_points_get>
 800be82:	eb00 0308 	add.w	r3, r0, r8
 800be86:	b29b      	uxth	r3, r3
 800be88:	42ab      	cmp	r3, r5
 800be8a:	d928      	bls.n	800bede <acc_detector_utils_get_distance_m+0x7e>
 800be8c:	eba5 0508 	sub.w	r5, r5, r8
 800be90:	b2ad      	uxth	r5, r5
 800be92:	4621      	mov	r1, r4
 800be94:	4630      	mov	r0, r6
 800be96:	f7fd fe0d 	bl	8009ab4 <acc_config_subsweep_start_point_get>
 800be9a:	ee08 0a10 	vmov	s16, r0
 800be9e:	2001      	movs	r0, #1
 800bea0:	f7fe f8a8 	bl	8009ff4 <acc_processing_points_to_meter>
 800bea4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800bea8:	4621      	mov	r1, r4
 800beaa:	4630      	mov	r0, r6
 800beac:	ee68 8a00 	vmul.f32	s17, s16, s0
 800beb0:	f7fd fe88 	bl	8009bc4 <acc_config_subsweep_step_length_get>
 800beb4:	ee07 0a90 	vmov	s15, r0
 800beb8:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 800bebc:	ee07 5a90 	vmov	s15, r5
 800bec0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800bec4:	2001      	movs	r0, #1
 800bec6:	ee28 8a00 	vmul.f32	s16, s16, s0
 800beca:	f7fe f893 	bl	8009ff4 <acc_processing_points_to_meter>
 800bece:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bed2:	ee30 0a28 	vadd.f32	s0, s0, s17
 800bed6:	ecbd 8b02 	vpop	{d8}
 800beda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bede:	4621      	mov	r1, r4
 800bee0:	4630      	mov	r0, r6
 800bee2:	f7fd fe2b 	bl	8009b3c <acc_config_subsweep_num_points_get>
 800bee6:	3401      	adds	r4, #1
 800bee8:	b2e4      	uxtb	r4, r4
 800beea:	4440      	add	r0, r8
 800beec:	42a7      	cmp	r7, r4
 800beee:	fa1f f880 	uxth.w	r8, r0
 800bef2:	d1c2      	bne.n	800be7a <acc_detector_utils_get_distance_m+0x1a>
 800bef4:	2500      	movs	r5, #0
 800bef6:	e7cc      	b.n	800be92 <acc_detector_utils_get_distance_m+0x32>
 800bef8:	4604      	mov	r4, r0
 800befa:	4605      	mov	r5, r0
 800befc:	e7c9      	b.n	800be92 <acc_detector_utils_get_distance_m+0x32>
 800befe:	bf00      	nop

0800bf00 <acc_rss_integration_register_a121>:
 800bf00:	68c3      	ldr	r3, [r0, #12]
 800bf02:	b570      	push	{r4, r5, r6, lr}
 800bf04:	b1c3      	cbz	r3, 800bf38 <acc_rss_integration_register_a121+0x38>
 800bf06:	6843      	ldr	r3, [r0, #4]
 800bf08:	b1cb      	cbz	r3, 800bf3e <acc_rss_integration_register_a121+0x3e>
 800bf0a:	6883      	ldr	r3, [r0, #8]
 800bf0c:	b1bb      	cbz	r3, 800bf3e <acc_rss_integration_register_a121+0x3e>
 800bf0e:	6903      	ldr	r3, [r0, #16]
 800bf10:	b1eb      	cbz	r3, 800bf4e <acc_rss_integration_register_a121+0x4e>
 800bf12:	8802      	ldrh	r2, [r0, #0]
 800bf14:	2a0f      	cmp	r2, #15
 800bf16:	d914      	bls.n	800bf42 <acc_rss_integration_register_a121+0x42>
 800bf18:	4604      	mov	r4, r0
 800bf1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf1c:	4d0d      	ldr	r5, [pc, #52]	@ (800bf54 <acc_rss_integration_register_a121+0x54>)
 800bf1e:	4e0e      	ldr	r6, [pc, #56]	@ (800bf58 <acc_rss_integration_register_a121+0x58>)
 800bf20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf22:	4b0e      	ldr	r3, [pc, #56]	@ (800bf5c <acc_rss_integration_register_a121+0x5c>)
 800bf24:	4a0e      	ldr	r2, [pc, #56]	@ (800bf60 <acc_rss_integration_register_a121+0x60>)
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	e885 0003 	stmia.w	r5, {r0, r1}
 800bf32:	7033      	strb	r3, [r6, #0]
 800bf34:	2001      	movs	r0, #1
 800bf36:	bd70      	pop	{r4, r5, r6, pc}
 800bf38:	6943      	ldr	r3, [r0, #20]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1e3      	bne.n	800bf06 <acc_rss_integration_register_a121+0x6>
 800bf3e:	6903      	ldr	r3, [r0, #16]
 800bf40:	b12b      	cbz	r3, 800bf4e <acc_rss_integration_register_a121+0x4e>
 800bf42:	4a08      	ldr	r2, [pc, #32]	@ (800bf64 <acc_rss_integration_register_a121+0x64>)
 800bf44:	4908      	ldr	r1, [pc, #32]	@ (800bf68 <acc_rss_integration_register_a121+0x68>)
 800bf46:	2000      	movs	r0, #0
 800bf48:	4798      	blx	r3
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	bd70      	pop	{r4, r5, r6, pc}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	bd70      	pop	{r4, r5, r6, pc}
 800bf52:	bf00      	nop
 800bf54:	2000069c 	.word	0x2000069c
 800bf58:	20000544 	.word	0x20000544
 800bf5c:	20000548 	.word	0x20000548
 800bf60:	016e3600 	.word	0x016e3600
 800bf64:	080139a4 	.word	0x080139a4
 800bf68:	080139b8 	.word	0x080139b8

0800bf6c <acc_rss_integration_get_sensor_reference_frequency>:
 800bf6c:	4b01      	ldr	r3, [pc, #4]	@ (800bf74 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 800bf6e:	6818      	ldr	r0, [r3, #0]
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	20000548 	.word	0x20000548

0800bf78 <acc_rss_integration_get_max_spi_transfer_size>:
 800bf78:	4b01      	ldr	r3, [pc, #4]	@ (800bf80 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 800bf7a:	8818      	ldrh	r0, [r3, #0]
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	2000069c 	.word	0x2000069c

0800bf84 <acc_rss_integration_sensor_device_transfer>:
 800bf84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf88:	4f10      	ldr	r7, [pc, #64]	@ (800bfcc <acc_rss_integration_sensor_device_transfer+0x48>)
 800bf8a:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800bf8e:	f1be 0f00 	cmp.w	lr, #0
 800bf92:	d003      	beq.n	800bf9c <acc_rss_integration_sensor_device_transfer+0x18>
 800bf94:	4673      	mov	r3, lr
 800bf96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9a:	4718      	bx	r3
 800bf9c:	460c      	mov	r4, r1
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	4615      	mov	r5, r2
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	4698      	mov	r8, r3
 800bfa8:	f002 fe88 	bl	800ecbc <acc_utils_swap16_array>
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	4630      	mov	r0, r6
 800bfb0:	006a      	lsls	r2, r5, #1
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4798      	blx	r3
 800bfb6:	f1b8 0f00 	cmp.w	r8, #0
 800bfba:	d101      	bne.n	800bfc0 <acc_rss_integration_sensor_device_transfer+0x3c>
 800bfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc8:	f002 be78 	b.w	800ecbc <acc_utils_swap16_array>
 800bfcc:	2000069c 	.word	0x2000069c

0800bfd0 <acc_rss_integration_mem_alloc_debug>:
 800bfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd4:	4f0c      	ldr	r7, [pc, #48]	@ (800c008 <acc_rss_integration_mem_alloc_debug+0x38>)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4688      	mov	r8, r1
 800bfda:	4616      	mov	r6, r2
 800bfdc:	4605      	mov	r5, r0
 800bfde:	4798      	blx	r3
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	b150      	cbz	r0, 800bffa <acc_rss_integration_mem_alloc_debug+0x2a>
 800bfe4:	4b09      	ldr	r3, [pc, #36]	@ (800c00c <acc_rss_integration_mem_alloc_debug+0x3c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	b123      	cbz	r3, 800bff4 <acc_rss_integration_mem_alloc_debug+0x24>
 800bfea:	689f      	ldr	r7, [r3, #8]
 800bfec:	4642      	mov	r2, r8
 800bfee:	4633      	mov	r3, r6
 800bff0:	4629      	mov	r1, r5
 800bff2:	47b8      	blx	r7
 800bff4:	4620      	mov	r0, r4
 800bff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	4a04      	ldr	r2, [pc, #16]	@ (800c010 <acc_rss_integration_mem_alloc_debug+0x40>)
 800bffe:	4905      	ldr	r1, [pc, #20]	@ (800c014 <acc_rss_integration_mem_alloc_debug+0x44>)
 800c000:	4798      	blx	r3
 800c002:	4620      	mov	r0, r4
 800c004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c008:	2000069c 	.word	0x2000069c
 800c00c:	20000540 	.word	0x20000540
 800c010:	080139c8 	.word	0x080139c8
 800c014:	080139b8 	.word	0x080139b8

0800c018 <acc_rss_integration_mem_calloc_debug>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	b1a8      	cbz	r0, 800c048 <acc_rss_integration_mem_calloc_debug+0x30>
 800c01c:	4614      	mov	r4, r2
 800c01e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800c022:	fbb2 f2f0 	udiv	r2, r2, r0
 800c026:	428a      	cmp	r2, r1
 800c028:	d90e      	bls.n	800c048 <acc_rss_integration_mem_calloc_debug+0x30>
 800c02a:	fb01 f500 	mul.w	r5, r1, r0
 800c02e:	461a      	mov	r2, r3
 800c030:	4621      	mov	r1, r4
 800c032:	4628      	mov	r0, r5
 800c034:	f7ff ffcc 	bl	800bfd0 <acc_rss_integration_mem_alloc_debug>
 800c038:	4604      	mov	r4, r0
 800c03a:	b130      	cbz	r0, 800c04a <acc_rss_integration_mem_calloc_debug+0x32>
 800c03c:	462a      	mov	r2, r5
 800c03e:	2100      	movs	r1, #0
 800c040:	f003 fef0 	bl	800fe24 <memset>
 800c044:	4620      	mov	r0, r4
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	2400      	movs	r4, #0
 800c04a:	4620      	mov	r0, r4
 800c04c:	bd38      	pop	{r3, r4, r5, pc}
 800c04e:	bf00      	nop

0800c050 <acc_rss_integration_mem_free>:
 800c050:	4b07      	ldr	r3, [pc, #28]	@ (800c070 <acc_rss_integration_mem_free+0x20>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	b510      	push	{r4, lr}
 800c056:	4604      	mov	r4, r0
 800c058:	b10b      	cbz	r3, 800c05e <acc_rss_integration_mem_free+0xe>
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	4798      	blx	r3
 800c05e:	b12c      	cbz	r4, 800c06c <acc_rss_integration_mem_free+0x1c>
 800c060:	4b04      	ldr	r3, [pc, #16]	@ (800c074 <acc_rss_integration_mem_free+0x24>)
 800c062:	4620      	mov	r0, r4
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c06a:	4718      	bx	r3
 800c06c:	bd10      	pop	{r4, pc}
 800c06e:	bf00      	nop
 800c070:	20000540 	.word	0x20000540
 800c074:	2000069c 	.word	0x2000069c

0800c078 <acc_rss_integration_log_level>:
 800c078:	4b01      	ldr	r3, [pc, #4]	@ (800c080 <acc_rss_integration_log_level+0x8>)
 800c07a:	7818      	ldrb	r0, [r3, #0]
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	20000544 	.word	0x20000544

0800c084 <pipeline_a121_produce>:
 800c084:	6803      	ldr	r3, [r0, #0]
 800c086:	f8d0 20e8 	ldr.w	r2, [r0, #232]	@ 0xe8
 800c08a:	f8c0 20f0 	str.w	r2, [r0, #240]	@ 0xf0
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	4618      	mov	r0, r3
 800c092:	4710      	bx	r2

0800c094 <pipeline_a121_disassemble>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	6805      	ldr	r5, [r0, #0]
 800c098:	4604      	mov	r4, r0
 800c09a:	b175      	cbz	r5, 800c0ba <pipeline_a121_disassemble+0x26>
 800c09c:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800c0a0:	f002 fff4 	bl	800f08c <acc_element_frame_release>
 800c0a4:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 800c0a8:	f003 f874 	bl	800f194 <acc_element_frame_aux_release>
 800c0ac:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 800c0b0:	f7ff ffce 	bl	800c050 <acc_rss_integration_mem_free>
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f7ff ffcb 	bl	800c050 <acc_rss_integration_mem_free>
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0c0:	f7ff bfc6 	b.w	800c050 <acc_rss_integration_mem_free>

0800c0c4 <acc_pipeline_get_buffer_size>:
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	b08e      	sub	sp, #56	@ 0x38
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	4669      	mov	r1, sp
 800c0cc:	f000 fbda 	bl	800c884 <acc_radar_engine_a121_get_metadata>
 800c0d0:	b110      	cbz	r0, 800c0d8 <acc_pipeline_get_buffer_size+0x14>
 800c0d2:	f8bd 3000 	ldrh.w	r3, [sp]
 800c0d6:	6023      	str	r3, [r4, #0]
 800c0d8:	b00e      	add	sp, #56	@ 0x38
 800c0da:	bd10      	pop	{r4, pc}

0800c0dc <acc_pipeline_a121_assemble>:
 800c0dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0e0:	6803      	ldr	r3, [r0, #0]
 800c0e2:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 800c0e6:	b09b      	sub	sp, #108	@ 0x6c
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	460f      	mov	r7, r1
 800c0ec:	b122      	cbz	r2, 800c0f8 <acc_pipeline_a121_assemble+0x1c>
 800c0ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f040 810d 	bne.w	800c312 <acc_pipeline_a121_assemble+0x236>
 800c0f8:	4aa5      	ldr	r2, [pc, #660]	@ (800c390 <acc_pipeline_a121_assemble+0x2b4>)
 800c0fa:	233d      	movs	r3, #61	@ 0x3d
 800c0fc:	2110      	movs	r1, #16
 800c0fe:	2001      	movs	r0, #1
 800c100:	f7ff ff8a 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 800c104:	4aa2      	ldr	r2, [pc, #648]	@ (800c390 <acc_pipeline_a121_assemble+0x2b4>)
 800c106:	4605      	mov	r5, r0
 800c108:	233e      	movs	r3, #62	@ 0x3e
 800c10a:	21fc      	movs	r1, #252	@ 0xfc
 800c10c:	2001      	movs	r0, #1
 800c10e:	f7ff ff83 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 800c112:	4604      	mov	r4, r0
 800c114:	2d00      	cmp	r5, #0
 800c116:	f000 8134 	beq.w	800c382 <acc_pipeline_a121_assemble+0x2a6>
 800c11a:	2c00      	cmp	r4, #0
 800c11c:	f000 812f 	beq.w	800c37e <acc_pipeline_a121_assemble+0x2a2>
 800c120:	f04f 0800 	mov.w	r8, #0
 800c124:	f8d6 9000 	ldr.w	r9, [r6]
 800c128:	f8c4 8098 	str.w	r8, [r4, #152]	@ 0x98
 800c12c:	4648      	mov	r0, r9
 800c12e:	602c      	str	r4, [r5, #0]
 800c130:	a90c      	add	r1, sp, #48	@ 0x30
 800c132:	f000 fba7 	bl	800c884 <acc_radar_engine_a121_get_metadata>
 800c136:	2800      	cmp	r0, #0
 800c138:	f000 80de 	beq.w	800c2f8 <acc_pipeline_a121_assemble+0x21c>
 800c13c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800c140:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800c144:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800c148:	f8bd 004a 	ldrh.w	r0, [sp, #74]	@ 0x4a
 800c14c:	8723      	strh	r3, [r4, #56]	@ 0x38
 800c14e:	0049      	lsls	r1, r1, #1
 800c150:	f8c4 10e8 	str.w	r1, [r4, #232]	@ 0xe8
 800c154:	2100      	movs	r1, #0
 800c156:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
 800c15a:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 800c15e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800c162:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 800c166:	f104 01f4 	add.w	r1, r4, #244	@ 0xf4
 800c16a:	4403      	add	r3, r0
 800c16c:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
 800c170:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800c174:	f104 01f6 	add.w	r1, r4, #246	@ 0xf6
 800c178:	b29b      	uxth	r3, r3
 800c17a:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 800c17e:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
 800c182:	f104 01f7 	add.w	r1, r4, #247	@ 0xf7
 800c186:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 800c18a:	6260      	str	r0, [r4, #36]	@ 0x24
 800c18c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
 800c190:	b13a      	cbz	r2, 800c1a2 <acc_pipeline_a121_assemble+0xc6>
 800c192:	f104 0eec 	add.w	lr, r4, #236	@ 0xec
 800c196:	f104 01f5 	add.w	r1, r4, #245	@ 0xf5
 800c19a:	6250      	str	r0, [r2, #36]	@ 0x24
 800c19c:	f8c2 e018 	str.w	lr, [r2, #24]
 800c1a0:	65d1      	str	r1, [r2, #92]	@ 0x5c
 800c1a2:	e9c4 0c36 	strd	r0, ip, [r4, #216]	@ 0xd8
 800c1a6:	f8a4 30e4 	strh.w	r3, [r4, #228]	@ 0xe4
 800c1aa:	2008      	movs	r0, #8
 800c1ac:	f002 fbde 	bl	800e96c <acc_element_sizeof>
 800c1b0:	f899 304e 	ldrb.w	r3, [r9, #78]	@ 0x4e
 800c1b4:	f3c0 004f 	ubfx	r0, r0, #1, #16
 800c1b8:	b183      	cbz	r3, 800c1dc <acc_pipeline_a121_assemble+0x100>
 800c1ba:	f103 3cff 	add.w	ip, r3, #4294967295
 800c1be:	fa5f fc8c 	uxtb.w	ip, ip
 800c1c2:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
 800c1c6:	f10d 0156 	add.w	r1, sp, #86	@ 0x56
 800c1ca:	1eba      	subs	r2, r7, #2
 800c1cc:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c1d0:	fbb3 f3f0 	udiv	r3, r3, r0
 800c1d4:	f822 3f02 	strh.w	r3, [r2, #2]!
 800c1d8:	4562      	cmp	r2, ip
 800c1da:	d1f7      	bne.n	800c1cc <acc_pipeline_a121_assemble+0xf0>
 800c1dc:	f8d6 8000 	ldr.w	r8, [r6]
 800c1e0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800c1e4:	f8bd 2046 	ldrh.w	r2, [sp, #70]	@ 0x46
 800c1e8:	f8b8 9048 	ldrh.w	r9, [r8, #72]	@ 0x48
 800c1ec:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800c1ee:	f89d 1064 	ldrb.w	r1, [sp, #100]	@ 0x64
 800c1f2:	60b8      	str	r0, [r7, #8]
 800c1f4:	441a      	add	r2, r3
 800c1f6:	81fa      	strh	r2, [r7, #14]
 800c1f8:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 800c1fc:	7339      	strb	r1, [r7, #12]
 800c1fe:	823a      	strh	r2, [r7, #16]
 800c200:	f1b9 0f00 	cmp.w	r9, #0
 800c204:	d003      	beq.n	800c20e <acc_pipeline_a121_assemble+0x132>
 800c206:	f8bd 204c 	ldrh.w	r2, [sp, #76]	@ 0x4c
 800c20a:	fbb2 f9f9 	udiv	r9, r2, r9
 800c20e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 800c212:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800c216:	f8bd 0032 	ldrh.w	r0, [sp, #50]	@ 0x32
 800c21a:	f8ad 0000 	strh.w	r0, [sp]
 800c21e:	441a      	add	r2, r3
 800c220:	440b      	add	r3, r1
 800c222:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c226:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c22a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800c22e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 800c232:	f8ad 2002 	strh.w	r2, [sp, #2]
 800c236:	f104 073c 	add.w	r7, r4, #60	@ 0x3c
 800c23a:	220f      	movs	r2, #15
 800c23c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c240:	4638      	mov	r0, r7
 800c242:	2303      	movs	r3, #3
 800c244:	4669      	mov	r1, sp
 800c246:	f8ad 200a 	strh.w	r2, [sp, #10]
 800c24a:	f88d 300c 	strb.w	r3, [sp, #12]
 800c24e:	f002 ff7f 	bl	800f150 <acc_element_frame_aux_init>
 800c252:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800c256:	b370      	cbz	r0, 800c2b6 <acc_pipeline_a121_assemble+0x1da>
 800c258:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 800c25c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	@ 0x3e
 800c260:	f8b8 c048 	ldrh.w	ip, [r8, #72]	@ 0x48
 800c264:	f8ad 901a 	strh.w	r9, [sp, #26]
 800c268:	2200      	movs	r2, #0
 800c26a:	4419      	add	r1, r3
 800c26c:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 800c270:	9205      	str	r2, [sp, #20]
 800c272:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800c276:	9207      	str	r2, [sp, #28]
 800c278:	920a      	str	r2, [sp, #40]	@ 0x28
 800c27a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c27c:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800c280:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c284:	f88d 3016 	strb.w	r3, [sp, #22]
 800c288:	f8ad c018 	strh.w	ip, [sp, #24]
 800c28c:	9204      	str	r2, [sp, #16]
 800c28e:	b17b      	cbz	r3, 800c2b0 <acc_pipeline_a121_assemble+0x1d4>
 800c290:	3b01      	subs	r3, #1
 800c292:	b2db      	uxtb	r3, r3
 800c294:	aa14      	add	r2, sp, #80	@ 0x50
 800c296:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
 800c29a:	f10d 034e 	add.w	r3, sp, #78	@ 0x4e
 800c29e:	aa07      	add	r2, sp, #28
 800c2a0:	f833 1b02 	ldrh.w	r1, [r3], #2
 800c2a4:	f822 1b02 	strh.w	r1, [r2], #2
 800c2a8:	459c      	cmp	ip, r3
 800c2aa:	88d9      	ldrh	r1, [r3, #6]
 800c2ac:	80d1      	strh	r1, [r2, #6]
 800c2ae:	d1f7      	bne.n	800c2a0 <acc_pipeline_a121_assemble+0x1c4>
 800c2b0:	a904      	add	r1, sp, #16
 800c2b2:	f002 fe73 	bl	800ef9c <acc_element_frame_init>
 800c2b6:	f104 08a0 	add.w	r8, r4, #160	@ 0xa0
 800c2ba:	6871      	ldr	r1, [r6, #4]
 800c2bc:	4640      	mov	r0, r8
 800c2be:	f002 ff9b 	bl	800f1f8 <acc_element_sink_a121_callback_init>
 800c2c2:	4639      	mov	r1, r7
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f002 fb5d 	bl	800e984 <acc_element_connect>
 800c2ca:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800c2ce:	2900      	cmp	r1, #0
 800c2d0:	d059      	beq.n	800c386 <acc_pipeline_a121_assemble+0x2aa>
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	f002 fb56 	bl	800e984 <acc_element_connect>
 800c2d8:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800c2dc:	4641      	mov	r1, r8
 800c2de:	f002 fb51 	bl	800e984 <acc_element_connect>
 800c2e2:	6820      	ldr	r0, [r4, #0]
 800c2e4:	6883      	ldr	r3, [r0, #8]
 800c2e6:	4798      	blx	r3
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	d13b      	bne.n	800c364 <acc_pipeline_a121_assemble+0x288>
 800c2ec:	4b29      	ldr	r3, [pc, #164]	@ (800c394 <acc_pipeline_a121_assemble+0x2b8>)
 800c2ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c398 <acc_pipeline_a121_assemble+0x2bc>)
 800c2f0:	691b      	ldr	r3, [r3, #16]
 800c2f2:	4927      	ldr	r1, [pc, #156]	@ (800c390 <acc_pipeline_a121_assemble+0x2b4>)
 800c2f4:	4798      	blx	r3
 800c2f6:	e004      	b.n	800c302 <acc_pipeline_a121_assemble+0x226>
 800c2f8:	4b26      	ldr	r3, [pc, #152]	@ (800c394 <acc_pipeline_a121_assemble+0x2b8>)
 800c2fa:	4a28      	ldr	r2, [pc, #160]	@ (800c39c <acc_pipeline_a121_assemble+0x2c0>)
 800c2fc:	691b      	ldr	r3, [r3, #16]
 800c2fe:	4924      	ldr	r1, [pc, #144]	@ (800c390 <acc_pipeline_a121_assemble+0x2b4>)
 800c300:	4798      	blx	r3
 800c302:	4628      	mov	r0, r5
 800c304:	f7ff fec6 	bl	800c094 <pipeline_a121_disassemble>
 800c308:	2500      	movs	r5, #0
 800c30a:	4628      	mov	r0, r5
 800c30c:	b01b      	add	sp, #108	@ 0x6c
 800c30e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c312:	4a1f      	ldr	r2, [pc, #124]	@ (800c390 <acc_pipeline_a121_assemble+0x2b4>)
 800c314:	233d      	movs	r3, #61	@ 0x3d
 800c316:	2110      	movs	r1, #16
 800c318:	2001      	movs	r0, #1
 800c31a:	f7ff fe7d 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 800c31e:	4a1c      	ldr	r2, [pc, #112]	@ (800c390 <acc_pipeline_a121_assemble+0x2b4>)
 800c320:	233e      	movs	r3, #62	@ 0x3e
 800c322:	21fc      	movs	r1, #252	@ 0xfc
 800c324:	4605      	mov	r5, r0
 800c326:	2001      	movs	r0, #1
 800c328:	f7ff fe76 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 800c32c:	4a18      	ldr	r2, [pc, #96]	@ (800c390 <acc_pipeline_a121_assemble+0x2b4>)
 800c32e:	4604      	mov	r4, r0
 800c330:	2343      	movs	r3, #67	@ 0x43
 800c332:	2160      	movs	r1, #96	@ 0x60
 800c334:	2001      	movs	r0, #1
 800c336:	f7ff fe6f 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 800c33a:	4680      	mov	r8, r0
 800c33c:	b125      	cbz	r5, 800c348 <acc_pipeline_a121_assemble+0x26c>
 800c33e:	b11c      	cbz	r4, 800c348 <acc_pipeline_a121_assemble+0x26c>
 800c340:	f1b8 0f00 	cmp.w	r8, #0
 800c344:	f47f aeee 	bne.w	800c124 <acc_pipeline_a121_assemble+0x48>
 800c348:	4628      	mov	r0, r5
 800c34a:	f7ff fe81 	bl	800c050 <acc_rss_integration_mem_free>
 800c34e:	4620      	mov	r0, r4
 800c350:	f7ff fe7e 	bl	800c050 <acc_rss_integration_mem_free>
 800c354:	4640      	mov	r0, r8
 800c356:	f7ff fe7b 	bl	800c050 <acc_rss_integration_mem_free>
 800c35a:	2500      	movs	r5, #0
 800c35c:	4628      	mov	r0, r5
 800c35e:	b01b      	add	sp, #108	@ 0x6c
 800c360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c364:	6820      	ldr	r0, [r4, #0]
 800c366:	68c3      	ldr	r3, [r0, #12]
 800c368:	4798      	blx	r3
 800c36a:	4b0d      	ldr	r3, [pc, #52]	@ (800c3a0 <acc_pipeline_a121_assemble+0x2c4>)
 800c36c:	4a0d      	ldr	r2, [pc, #52]	@ (800c3a4 <acc_pipeline_a121_assemble+0x2c8>)
 800c36e:	606b      	str	r3, [r5, #4]
 800c370:	4628      	mov	r0, r5
 800c372:	2300      	movs	r3, #0
 800c374:	e9c5 3202 	strd	r3, r2, [r5, #8]
 800c378:	b01b      	add	sp, #108	@ 0x6c
 800c37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c37e:	46a0      	mov	r8, r4
 800c380:	e7e2      	b.n	800c348 <acc_pipeline_a121_assemble+0x26c>
 800c382:	46a8      	mov	r8, r5
 800c384:	e7e0      	b.n	800c348 <acc_pipeline_a121_assemble+0x26c>
 800c386:	4641      	mov	r1, r8
 800c388:	4638      	mov	r0, r7
 800c38a:	f002 fafb 	bl	800e984 <acc_element_connect>
 800c38e:	e7a8      	b.n	800c2e2 <acc_pipeline_a121_assemble+0x206>
 800c390:	080139fc 	.word	0x080139fc
 800c394:	2000069c 	.word	0x2000069c
 800c398:	08013a0c 	.word	0x08013a0c
 800c39c:	080139d8 	.word	0x080139d8
 800c3a0:	0800c085 	.word	0x0800c085
 800c3a4:	0800c095 	.word	0x0800c095

0800c3a8 <acc_pipeline_a121_prepare_memory>:
 800c3a8:	6803      	ldr	r3, [r0, #0]
 800c3aa:	b430      	push	{r4, r5}
 800c3ac:	f8b3 0094 	ldrh.w	r0, [r3, #148]	@ 0x94
 800c3b0:	8f1c      	ldrh	r4, [r3, #56]	@ 0x38
 800c3b2:	f8b3 2096 	ldrh.w	r2, [r3, #150]	@ 0x96
 800c3b6:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 800c3ba:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800c3be:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800c3c2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c3c6:	e9c3 0213 	strd	r0, r2, [r3, #76]	@ 0x4c
 800c3ca:	615c      	str	r4, [r3, #20]
 800c3cc:	b14d      	cbz	r5, 800c3e2 <acc_pipeline_a121_prepare_memory+0x3a>
 800c3ce:	f8b3 009c 	ldrh.w	r0, [r3, #156]	@ 0x9c
 800c3d2:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 800c3d6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800c3da:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c3de:	e9c5 0204 	strd	r0, r2, [r5, #16]
 800c3e2:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	@ 0xe4
 800c3e6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800c3ea:	bc30      	pop	{r4, r5}
 800c3ec:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop

0800c3f4 <acc_radar_engine_a121_context_create>:
 800c3f4:	b508      	push	{r3, lr}
 800c3f6:	4a07      	ldr	r2, [pc, #28]	@ (800c414 <acc_radar_engine_a121_context_create+0x20>)
 800c3f8:	2373      	movs	r3, #115	@ 0x73
 800c3fa:	f44f 71fe 	mov.w	r1, #508	@ 0x1fc
 800c3fe:	2001      	movs	r0, #1
 800c400:	f7ff fe0a 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 800c404:	b120      	cbz	r0, 800c410 <acc_radar_engine_a121_context_create+0x1c>
 800c406:	2301      	movs	r3, #1
 800c408:	f8a0 31c4 	strh.w	r3, [r0, #452]	@ 0x1c4
 800c40c:	f880 31c6 	strb.w	r3, [r0, #454]	@ 0x1c6
 800c410:	bd08      	pop	{r3, pc}
 800c412:	bf00      	nop
 800c414:	08013a2c 	.word	0x08013a2c

0800c418 <acc_radar_engine_a121_context_destroy>:
 800c418:	b108      	cbz	r0, 800c41e <acc_radar_engine_a121_context_destroy+0x6>
 800c41a:	f7ff be19 	b.w	800c050 <acc_rss_integration_mem_free>
 800c41e:	4770      	bx	lr

0800c420 <acc_radar_engine_a121_run_program>:
 800c420:	f002 bf9c 	b.w	800f35c <acc_cpd_a121_meas_session_run_program>

0800c424 <acc_radar_engine_a121_measure>:
 800c424:	b510      	push	{r4, lr}
 800c426:	460c      	mov	r4, r1
 800c428:	2201      	movs	r2, #1
 800c42a:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800c42e:	f000 fc43 	bl	800ccb8 <acc_sensor_protocol_a121_ack_event>
 800c432:	f894 31c5 	ldrb.w	r3, [r4, #453]	@ 0x1c5
 800c436:	b143      	cbz	r3, 800c44a <acc_radar_engine_a121_measure+0x26>
 800c438:	f894 31c6 	ldrb.w	r3, [r4, #454]	@ 0x1c6
 800c43c:	2b02      	cmp	r3, #2
 800c43e:	bf0c      	ite	eq
 800c440:	2301      	moveq	r3, #1
 800c442:	2302      	movne	r3, #2
 800c444:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800c448:	bd10      	pop	{r4, pc}
 800c44a:	2301      	movs	r3, #1
 800c44c:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 800c450:	bd10      	pop	{r4, pc}
 800c452:	bf00      	nop

0800c454 <acc_radar_engine_a121_transfer_data>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800c45a:	9c04      	ldr	r4, [sp, #16]
 800c45c:	2901      	cmp	r1, #1
 800c45e:	bf14      	ite	ne
 800c460:	f44f 5180 	movne.w	r1, #4096	@ 0x1000
 800c464:	2100      	moveq	r1, #0
 800c466:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800c46a:	461d      	mov	r5, r3
 800c46c:	f002 ffee 	bl	800f44c <acc_cpd_a121_meas_session_transfer_data>
 800c470:	b118      	cbz	r0, 800c47a <acc_radar_engine_a121_transfer_data+0x26>
 800c472:	1e28      	subs	r0, r5, #0
 800c474:	bf18      	it	ne
 800c476:	2001      	movne	r0, #1
 800c478:	bd38      	pop	{r3, r4, r5, pc}
 800c47a:	4b04      	ldr	r3, [pc, #16]	@ (800c48c <acc_radar_engine_a121_transfer_data+0x38>)
 800c47c:	4a04      	ldr	r2, [pc, #16]	@ (800c490 <acc_radar_engine_a121_transfer_data+0x3c>)
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	4904      	ldr	r1, [pc, #16]	@ (800c494 <acc_radar_engine_a121_transfer_data+0x40>)
 800c482:	4604      	mov	r4, r0
 800c484:	4798      	blx	r3
 800c486:	4620      	mov	r0, r4
 800c488:	bd38      	pop	{r3, r4, r5, pc}
 800c48a:	bf00      	nop
 800c48c:	2000069c 	.word	0x2000069c
 800c490:	08013a40 	.word	0x08013a40
 800c494:	08013a2c 	.word	0x08013a2c

0800c498 <acc_radar_engine_a121_verify_radar_data_ready>:
 800c498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c49c:	b084      	sub	sp, #16
 800c49e:	460d      	mov	r5, r1
 800c4a0:	2400      	movs	r4, #0
 800c4a2:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 800c4a6:	9403      	str	r4, [sp, #12]
 800c4a8:	4690      	mov	r8, r2
 800c4aa:	4607      	mov	r7, r0
 800c4ac:	f000 fbe8 	bl	800cc80 <acc_sensor_protocol_a121_is_event_pending>
 800c4b0:	b980      	cbnz	r0, 800c4d4 <acc_radar_engine_a121_verify_radar_data_ready+0x3c>
 800c4b2:	4b15      	ldr	r3, [pc, #84]	@ (800c508 <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 800c4b4:	4a15      	ldr	r2, [pc, #84]	@ (800c50c <acc_radar_engine_a121_verify_radar_data_ready+0x74>)
 800c4b6:	691d      	ldr	r5, [r3, #16]
 800c4b8:	4915      	ldr	r1, [pc, #84]	@ (800c510 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800c4ba:	463b      	mov	r3, r7
 800c4bc:	4604      	mov	r4, r0
 800c4be:	47a8      	blx	r5
 800c4c0:	ae03      	add	r6, sp, #12
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f000 fcba 	bl	800ce3c <acc_sensor_protocol_a121_get_frame_delayed_flag>
 800c4c8:	f888 0000 	strb.w	r0, [r8]
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	b004      	add	sp, #16
 800c4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4d4:	ae03      	add	r6, sp, #12
 800c4d6:	f895 11c6 	ldrb.w	r1, [r5, #454]	@ 0x1c6
 800c4da:	4632      	mov	r2, r6
 800c4dc:	4638      	mov	r0, r7
 800c4de:	f000 fc33 	bl	800cd48 <acc_sensor_protocol_a121_get_event>
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d0ec      	beq.n	800c4c2 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	f000 fc97 	bl	800ce1c <acc_sensor_protocol_a121_is_handshake>
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d1e6      	bne.n	800c4c2 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800c4f4:	4a04      	ldr	r2, [pc, #16]	@ (800c508 <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 800c4f6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c4fa:	6915      	ldr	r5, [r2, #16]
 800c4fc:	4904      	ldr	r1, [pc, #16]	@ (800c510 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 800c4fe:	9300      	str	r3, [sp, #0]
 800c500:	4a04      	ldr	r2, [pc, #16]	@ (800c514 <acc_radar_engine_a121_verify_radar_data_ready+0x7c>)
 800c502:	463b      	mov	r3, r7
 800c504:	47a8      	blx	r5
 800c506:	e7dc      	b.n	800c4c2 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 800c508:	2000069c 	.word	0x2000069c
 800c50c:	08013a6c 	.word	0x08013a6c
 800c510:	08013a2c 	.word	0x08013a2c
 800c514:	08013a8c 	.word	0x08013a8c

0800c518 <acc_radar_engine_a121_update_buffer_header>:
 800c518:	f890 31c4 	ldrb.w	r3, [r0, #452]	@ 0x1c4
 800c51c:	8011      	strh	r1, [r2, #0]
 800c51e:	b4f0      	push	{r4, r5, r6, r7}
 800c520:	b133      	cbz	r3, 800c530 <acc_radar_engine_a121_update_buffer_header+0x18>
 800c522:	f890 31c6 	ldrb.w	r3, [r0, #454]	@ 0x1c6
 800c526:	f1a3 0301 	sub.w	r3, r3, #1
 800c52a:	fab3 f383 	clz	r3, r3
 800c52e:	095b      	lsrs	r3, r3, #5
 800c530:	8053      	strh	r3, [r2, #2]
 800c532:	f8b0 31c8 	ldrh.w	r3, [r0, #456]	@ 0x1c8
 800c536:	8093      	strh	r3, [r2, #4]
 800c538:	1d91      	adds	r1, r2, #6
 800c53a:	f500 73e5 	add.w	r3, r0, #458	@ 0x1ca
 800c53e:	f500 74fd 	add.w	r4, r0, #506	@ 0x1fa
 800c542:	681f      	ldr	r7, [r3, #0]
 800c544:	685e      	ldr	r6, [r3, #4]
 800c546:	689d      	ldr	r5, [r3, #8]
 800c548:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800c54c:	f8c1 c00c 	str.w	ip, [r1, #12]
 800c550:	3310      	adds	r3, #16
 800c552:	42a3      	cmp	r3, r4
 800c554:	600f      	str	r7, [r1, #0]
 800c556:	604e      	str	r6, [r1, #4]
 800c558:	608d      	str	r5, [r1, #8]
 800c55a:	f101 0110 	add.w	r1, r1, #16
 800c55e:	d1f0      	bne.n	800c542 <acc_radar_engine_a121_update_buffer_header+0x2a>
 800c560:	f8b0 31fa 	ldrh.w	r3, [r0, #506]	@ 0x1fa
 800c564:	86d3      	strh	r3, [r2, #54]	@ 0x36
 800c566:	bcf0      	pop	{r4, r5, r6, r7}
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop

0800c56c <acc_radar_engine_a121_check_asic_id>:
 800c56c:	f000 bc6a 	b.w	800ce44 <acc_sensor_protocol_a121_check_asic_id>

0800c570 <acc_radar_engine_a121_is_sensor_running>:
 800c570:	f000 bb74 	b.w	800cc5c <acc_sensor_protocol_a121_is_sensor_running>

0800c574 <acc_radar_engine_121_populate_metadata>:
 800c574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c578:	8804      	ldrh	r4, [r0, #0]
 800c57a:	2a00      	cmp	r2, #0
 800c57c:	bf14      	ite	ne
 800c57e:	f44f 5280 	movne.w	r2, #4096	@ 0x1000
 800c582:	f44f 5200 	moveq.w	r2, #8192	@ 0x2000
 800c586:	f5b4 6f9c 	cmp.w	r4, #1248	@ 0x4e0
 800c58a:	bf38      	it	cc
 800c58c:	f44f 649c 	movcc.w	r4, #1248	@ 0x4e0
 800c590:	42a2      	cmp	r2, r4
 800c592:	4606      	mov	r6, r0
 800c594:	4688      	mov	r8, r1
 800c596:	461d      	mov	r5, r3
 800c598:	d22b      	bcs.n	800c5f2 <acc_radar_engine_121_populate_metadata+0x7e>
 800c59a:	4b17      	ldr	r3, [pc, #92]	@ (800c5f8 <acc_radar_engine_121_populate_metadata+0x84>)
 800c59c:	4a17      	ldr	r2, [pc, #92]	@ (800c5fc <acc_radar_engine_121_populate_metadata+0x88>)
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	4917      	ldr	r1, [pc, #92]	@ (800c600 <acc_radar_engine_121_populate_metadata+0x8c>)
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	4798      	blx	r3
 800c5a6:	2700      	movs	r7, #0
 800c5a8:	4916      	ldr	r1, [pc, #88]	@ (800c604 <acc_radar_engine_121_populate_metadata+0x90>)
 800c5aa:	4a17      	ldr	r2, [pc, #92]	@ (800c608 <acc_radar_engine_121_populate_metadata+0x94>)
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	806b      	strh	r3, [r5, #2]
 800c5b0:	231c      	movs	r3, #28
 800c5b2:	81ab      	strh	r3, [r5, #12]
 800c5b4:	e9c5 1201 	strd	r1, r2, [r5, #4]
 800c5b8:	f000 f9e0 	bl	800c97c <acc_sensor_a121_get_max_header_length>
 800c5bc:	301c      	adds	r0, #28
 800c5be:	b280      	uxth	r0, r0
 800c5c0:	1903      	adds	r3, r0, r4
 800c5c2:	462c      	mov	r4, r5
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	81e8      	strh	r0, [r5, #14]
 800c5c8:	6871      	ldr	r1, [r6, #4]
 800c5ca:	6830      	ldr	r0, [r6, #0]
 800c5cc:	68b2      	ldr	r2, [r6, #8]
 800c5ce:	f824 3b10 	strh.w	r3, [r4], #16
 800c5d2:	68f3      	ldr	r3, [r6, #12]
 800c5d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c5d6:	6930      	ldr	r0, [r6, #16]
 800c5d8:	6971      	ldr	r1, [r6, #20]
 800c5da:	69b2      	ldr	r2, [r6, #24]
 800c5dc:	c407      	stmia	r4!, {r0, r1, r2}
 800c5de:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c5e2:	8bb3      	ldrh	r3, [r6, #28]
 800c5e4:	8023      	strh	r3, [r4, #0]
 800c5e6:	3530      	adds	r5, #48	@ 0x30
 800c5e8:	e885 0003 	stmia.w	r5, {r0, r1}
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f2:	2701      	movs	r7, #1
 800c5f4:	e7d8      	b.n	800c5a8 <acc_radar_engine_121_populate_metadata+0x34>
 800c5f6:	bf00      	nop
 800c5f8:	2000069c 	.word	0x2000069c
 800c5fc:	08013ab8 	.word	0x08013ab8
 800c600:	08013a2c 	.word	0x08013a2c
 800c604:	00020001 	.word	0x00020001
 800c608:	001b0003 	.word	0x001b0003

0800c60c <acc_radar_engine_a121_prepare>:
 800c60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c610:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 800c614:	460c      	mov	r4, r1
 800c616:	4615      	mov	r5, r2
 800c618:	2100      	movs	r1, #0
 800c61a:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800c61e:	4606      	mov	r6, r0
 800c620:	a81b      	add	r0, sp, #108	@ 0x6c
 800c622:	4699      	mov	r9, r3
 800c624:	9f95      	ldr	r7, [sp, #596]	@ 0x254
 800c626:	f10d 080c 	add.w	r8, sp, #12
 800c62a:	f003 fbfb 	bl	800fe24 <memset>
 800c62e:	2238      	movs	r2, #56	@ 0x38
 800c630:	2100      	movs	r1, #0
 800c632:	a80d      	add	r0, sp, #52	@ 0x34
 800c634:	f003 fbf6 	bl	800fe24 <memset>
 800c638:	4629      	mov	r1, r5
 800c63a:	4620      	mov	r0, r4
 800c63c:	aa1b      	add	r2, sp, #108	@ 0x6c
 800c63e:	ab05      	add	r3, sp, #20
 800c640:	f8cd 8000 	str.w	r8, [sp]
 800c644:	f001 f9da 	bl	800d9fc <acc_translation_a121_translate>
 800c648:	b930      	cbnz	r0, 800c658 <acc_radar_engine_a121_prepare+0x4c>
 800c64a:	f04f 0800 	mov.w	r8, #0
 800c64e:	4640      	mov	r0, r8
 800c650:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800c654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c658:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800c65c:	4641      	mov	r1, r8
 800c65e:	a805      	add	r0, sp, #20
 800c660:	ab0d      	add	r3, sp, #52	@ 0x34
 800c662:	f7ff ff87 	bl	800c574 <acc_radar_engine_121_populate_metadata>
 800c666:	2800      	cmp	r0, #0
 800c668:	d0ef      	beq.n	800c64a <acc_radar_engine_a121_prepare+0x3e>
 800c66a:	9996      	ldr	r1, [sp, #600]	@ 0x258
 800c66c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800c670:	800b      	strh	r3, [r1, #0]
 800c672:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 800c674:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 800c678:	800a      	strh	r2, [r1, #0]
 800c67a:	2304      	movs	r3, #4
 800c67c:	aa1b      	add	r2, sp, #108	@ 0x6c
 800c67e:	4631      	mov	r1, r6
 800c680:	2014      	movs	r0, #20
 800c682:	f002 f981 	bl	800e988 <acc_probes_execute_struct>
 800c686:	2800      	cmp	r0, #0
 800c688:	d0df      	beq.n	800c64a <acc_radar_engine_a121_prepare+0x3e>
 800c68a:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800c68c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c68e:	464a      	mov	r2, r9
 800c690:	4630      	mov	r0, r6
 800c692:	f002 fe2f 	bl	800f2f4 <acc_cpd_a121_meas_session_load_program>
 800c696:	4680      	mov	r8, r0
 800c698:	b928      	cbnz	r0, 800c6a6 <acc_radar_engine_a121_prepare+0x9a>
 800c69a:	4b27      	ldr	r3, [pc, #156]	@ (800c738 <acc_radar_engine_a121_prepare+0x12c>)
 800c69c:	4a27      	ldr	r2, [pc, #156]	@ (800c73c <acc_radar_engine_a121_prepare+0x130>)
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	4927      	ldr	r1, [pc, #156]	@ (800c740 <acc_radar_engine_a121_prepare+0x134>)
 800c6a2:	4798      	blx	r3
 800c6a4:	e7d3      	b.n	800c64e <acc_radar_engine_a121_prepare+0x42>
 800c6a6:	4b27      	ldr	r3, [pc, #156]	@ (800c744 <acc_radar_engine_a121_prepare+0x138>)
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	2260      	movs	r2, #96	@ 0x60
 800c6ac:	9201      	str	r2, [sp, #4]
 800c6ae:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800c6b0:	464a      	mov	r2, r9
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	f000 fabb 	bl	800cc30 <acc_sensor_protocol_a121_load_lut>
 800c6ba:	4680      	mov	r8, r0
 800c6bc:	b3a8      	cbz	r0, 800c72a <acc_radar_engine_a121_prepare+0x11e>
 800c6be:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800c6c2:	a91b      	add	r1, sp, #108	@ 0x6c
 800c6c4:	4638      	mov	r0, r7
 800c6c6:	f003 fc38 	bl	800ff3a <memcpy>
 800c6ca:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800c6ce:	b122      	cbz	r2, 800c6da <acc_radar_engine_a121_prepare+0xce>
 800c6d0:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 800c6d4:	1e1a      	subs	r2, r3, #0
 800c6d6:	bf18      	it	ne
 800c6d8:	2201      	movne	r2, #1
 800c6da:	2101      	movs	r1, #1
 800c6dc:	462b      	mov	r3, r5
 800c6de:	f894 004b 	ldrb.w	r0, [r4, #75]	@ 0x4b
 800c6e2:	f887 11c6 	strb.w	r1, [r7, #454]	@ 0x1c6
 800c6e6:	f833 1b26 	ldrh.w	r1, [r3], #38
 800c6ea:	f8a7 11c8 	strh.w	r1, [r7, #456]	@ 0x1c8
 800c6ee:	f887 01c5 	strb.w	r0, [r7, #453]	@ 0x1c5
 800c6f2:	f887 21c4 	strb.w	r2, [r7, #452]	@ 0x1c4
 800c6f6:	f507 71e5 	add.w	r1, r7, #458	@ 0x1ca
 800c6fa:	f105 0c56 	add.w	ip, r5, #86	@ 0x56
 800c6fe:	681c      	ldr	r4, [r3, #0]
 800c700:	6858      	ldr	r0, [r3, #4]
 800c702:	689a      	ldr	r2, [r3, #8]
 800c704:	68de      	ldr	r6, [r3, #12]
 800c706:	60ce      	str	r6, [r1, #12]
 800c708:	3310      	adds	r3, #16
 800c70a:	4563      	cmp	r3, ip
 800c70c:	600c      	str	r4, [r1, #0]
 800c70e:	6048      	str	r0, [r1, #4]
 800c710:	608a      	str	r2, [r1, #8]
 800c712:	f101 0110 	add.w	r1, r1, #16
 800c716:	d1f2      	bne.n	800c6fe <acc_radar_engine_a121_prepare+0xf2>
 800c718:	f8b5 3056 	ldrh.w	r3, [r5, #86]	@ 0x56
 800c71c:	f8a7 31fa 	strh.w	r3, [r7, #506]	@ 0x1fa
 800c720:	4640      	mov	r0, r8
 800c722:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 800c726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c72a:	4b03      	ldr	r3, [pc, #12]	@ (800c738 <acc_radar_engine_a121_prepare+0x12c>)
 800c72c:	4a06      	ldr	r2, [pc, #24]	@ (800c748 <acc_radar_engine_a121_prepare+0x13c>)
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	4903      	ldr	r1, [pc, #12]	@ (800c740 <acc_radar_engine_a121_prepare+0x134>)
 800c732:	4798      	blx	r3
 800c734:	e78b      	b.n	800c64e <acc_radar_engine_a121_prepare+0x42>
 800c736:	bf00      	nop
 800c738:	2000069c 	.word	0x2000069c
 800c73c:	08013ad8 	.word	0x08013ad8
 800c740:	08013a2c 	.word	0x08013a2c
 800c744:	08015bec 	.word	0x08015bec
 800c748:	08013aec 	.word	0x08013aec

0800c74c <acc_radar_engine_a121_reconfigure>:
 800c74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c750:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800c754:	4607      	mov	r7, r0
 800c756:	9c95      	ldr	r4, [sp, #596]	@ 0x254
 800c758:	460d      	mov	r5, r1
 800c75a:	4616      	mov	r6, r2
 800c75c:	2100      	movs	r1, #0
 800c75e:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800c762:	a81b      	add	r0, sp, #108	@ 0x6c
 800c764:	4699      	mov	r9, r3
 800c766:	f003 fb5d 	bl	800fe24 <memset>
 800c76a:	a80d      	add	r0, sp, #52	@ 0x34
 800c76c:	2238      	movs	r2, #56	@ 0x38
 800c76e:	2100      	movs	r1, #0
 800c770:	f003 fb58 	bl	800fe24 <memset>
 800c774:	f894 a1c5 	ldrb.w	sl, [r4, #453]	@ 0x1c5
 800c778:	f1ba 0f00 	cmp.w	sl, #0
 800c77c:	d00c      	beq.n	800c798 <acc_radar_engine_a121_reconfigure+0x4c>
 800c77e:	4b3e      	ldr	r3, [pc, #248]	@ (800c878 <acc_radar_engine_a121_reconfigure+0x12c>)
 800c780:	4a3e      	ldr	r2, [pc, #248]	@ (800c87c <acc_radar_engine_a121_reconfigure+0x130>)
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	493e      	ldr	r1, [pc, #248]	@ (800c880 <acc_radar_engine_a121_reconfigure+0x134>)
 800c786:	2000      	movs	r0, #0
 800c788:	4798      	blx	r3
 800c78a:	f04f 0800 	mov.w	r8, #0
 800c78e:	4640      	mov	r0, r8
 800c790:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800c794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c798:	f10d 080c 	add.w	r8, sp, #12
 800c79c:	ab05      	add	r3, sp, #20
 800c79e:	f8cd 8000 	str.w	r8, [sp]
 800c7a2:	aa1b      	add	r2, sp, #108	@ 0x6c
 800c7a4:	4631      	mov	r1, r6
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	f001 f928 	bl	800d9fc <acc_translation_a121_translate>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d0ec      	beq.n	800c78a <acc_radar_engine_a121_reconfigure+0x3e>
 800c7b0:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800c7b4:	4641      	mov	r1, r8
 800c7b6:	a805      	add	r0, sp, #20
 800c7b8:	ab0d      	add	r3, sp, #52	@ 0x34
 800c7ba:	f7ff fedb 	bl	800c574 <acc_radar_engine_121_populate_metadata>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d0e3      	beq.n	800c78a <acc_radar_engine_a121_reconfigure+0x3e>
 800c7c2:	9996      	ldr	r1, [sp, #600]	@ 0x258
 800c7c4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800c7c8:	800b      	strh	r3, [r1, #0]
 800c7ca:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 800c7cc:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 800c7d0:	800a      	strh	r2, [r1, #0]
 800c7d2:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 800c7d6:	aa1b      	add	r2, sp, #108	@ 0x6c
 800c7d8:	4639      	mov	r1, r7
 800c7da:	2014      	movs	r0, #20
 800c7dc:	f002 f8d4 	bl	800e988 <acc_probes_execute_struct>
 800c7e0:	4680      	mov	r8, r0
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d0d1      	beq.n	800c78a <acc_radar_engine_a121_reconfigure+0x3e>
 800c7e6:	a91b      	add	r1, sp, #108	@ 0x6c
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f002 fdbb 	bl	800f364 <acc_cpd_a121_meas_session_is_patch_needed>
 800c7ee:	bbc0      	cbnz	r0, 800c862 <acc_radar_engine_a121_reconfigure+0x116>
 800c7f0:	a91b      	add	r1, sp, #108	@ 0x6c
 800c7f2:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f003 fb9f 	bl	800ff3a <memcpy>
 800c7fc:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800c800:	bb3b      	cbnz	r3, 800c852 <acc_radar_engine_a121_reconfigure+0x106>
 800c802:	2201      	movs	r2, #1
 800c804:	4633      	mov	r3, r6
 800c806:	f895 104b 	ldrb.w	r1, [r5, #75]	@ 0x4b
 800c80a:	f884 21c6 	strb.w	r2, [r4, #454]	@ 0x1c6
 800c80e:	f833 2b26 	ldrh.w	r2, [r3], #38
 800c812:	f8a4 21c8 	strh.w	r2, [r4, #456]	@ 0x1c8
 800c816:	f884 11c5 	strb.w	r1, [r4, #453]	@ 0x1c5
 800c81a:	f884 a1c4 	strb.w	sl, [r4, #452]	@ 0x1c4
 800c81e:	f504 71e5 	add.w	r1, r4, #458	@ 0x1ca
 800c822:	f106 0c56 	add.w	ip, r6, #86	@ 0x56
 800c826:	681d      	ldr	r5, [r3, #0]
 800c828:	6858      	ldr	r0, [r3, #4]
 800c82a:	689a      	ldr	r2, [r3, #8]
 800c82c:	68df      	ldr	r7, [r3, #12]
 800c82e:	60cf      	str	r7, [r1, #12]
 800c830:	3310      	adds	r3, #16
 800c832:	4563      	cmp	r3, ip
 800c834:	600d      	str	r5, [r1, #0]
 800c836:	6048      	str	r0, [r1, #4]
 800c838:	608a      	str	r2, [r1, #8]
 800c83a:	f101 0110 	add.w	r1, r1, #16
 800c83e:	d1f2      	bne.n	800c826 <acc_radar_engine_a121_reconfigure+0xda>
 800c840:	f8b6 3056 	ldrh.w	r3, [r6, #86]	@ 0x56
 800c844:	f8a4 31fa 	strh.w	r3, [r4, #506]	@ 0x1fa
 800c848:	4640      	mov	r0, r8
 800c84a:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 800c84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c852:	f895 a04e 	ldrb.w	sl, [r5, #78]	@ 0x4e
 800c856:	f1ba 0a00 	subs.w	sl, sl, #0
 800c85a:	bf18      	it	ne
 800c85c:	f04f 0a01 	movne.w	sl, #1
 800c860:	e7cf      	b.n	800c802 <acc_radar_engine_a121_reconfigure+0xb6>
 800c862:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	9994      	ldr	r1, [sp, #592]	@ 0x250
 800c868:	464a      	mov	r2, r9
 800c86a:	4638      	mov	r0, r7
 800c86c:	4623      	mov	r3, r4
 800c86e:	f002 fd8b 	bl	800f388 <acc_cpd_a121_meas_session_update_program>
 800c872:	2800      	cmp	r0, #0
 800c874:	d089      	beq.n	800c78a <acc_radar_engine_a121_reconfigure+0x3e>
 800c876:	e7bb      	b.n	800c7f0 <acc_radar_engine_a121_reconfigure+0xa4>
 800c878:	2000069c 	.word	0x2000069c
 800c87c:	08013afc 	.word	0x08013afc
 800c880:	08013a2c 	.word	0x08013a2c

0800c884 <acc_radar_engine_a121_get_metadata>:
 800c884:	b570      	push	{r4, r5, r6, lr}
 800c886:	b0fe      	sub	sp, #504	@ 0x1f8
 800c888:	4604      	mov	r4, r0
 800c88a:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800c88e:	460d      	mov	r5, r1
 800c890:	a80d      	add	r0, sp, #52	@ 0x34
 800c892:	2100      	movs	r1, #0
 800c894:	ae03      	add	r6, sp, #12
 800c896:	f003 fac5 	bl	800fe24 <memset>
 800c89a:	aa0d      	add	r2, sp, #52	@ 0x34
 800c89c:	4620      	mov	r0, r4
 800c89e:	ab05      	add	r3, sp, #20
 800c8a0:	9600      	str	r6, [sp, #0]
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	f001 f8aa 	bl	800d9fc <acc_translation_a121_translate>
 800c8a8:	b908      	cbnz	r0, 800c8ae <acc_radar_engine_a121_get_metadata+0x2a>
 800c8aa:	b07e      	add	sp, #504	@ 0x1f8
 800c8ac:	bd70      	pop	{r4, r5, r6, pc}
 800c8ae:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 800c8b2:	462b      	mov	r3, r5
 800c8b4:	4631      	mov	r1, r6
 800c8b6:	a805      	add	r0, sp, #20
 800c8b8:	f7ff fe5c 	bl	800c574 <acc_radar_engine_121_populate_metadata>
 800c8bc:	b07e      	add	sp, #504	@ 0x1f8
 800c8be:	bd70      	pop	{r4, r5, r6, pc}

0800c8c0 <acc_radar_engine_a121_points_to_meter>:
 800c8c0:	f000 bb60 	b.w	800cf84 <acc_translation_a121_points_to_meter>

0800c8c4 <acc_radar_engine_a121_init_interrupts>:
 800c8c4:	f000 b906 	b.w	800cad4 <acc_sensor_protocol_a121_init_interrupts>

0800c8c8 <acc_radar_engine_a121_hibernate_off>:
 800c8c8:	f000 baf2 	b.w	800ceb0 <acc_sensor_protocol_a121_hibernate_off>

0800c8cc <acc_radar_engine_a121_is_hibernate>:
 800c8cc:	f000 bb2a 	b.w	800cf24 <acc_sensor_protocol_a121_is_hibernate>

0800c8d0 <internal_buffer_processed_read.part.0>:
 800c8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d4:	b085      	sub	sp, #20
 800c8d6:	469a      	mov	sl, r3
 800c8d8:	2600      	movs	r6, #0
 800c8da:	f89d 4038 	ldrb.w	r4, [sp, #56]	@ 0x38
 800c8de:	9200      	str	r2, [sp, #0]
 800c8e0:	4683      	mov	fp, r0
 800c8e2:	4689      	mov	r9, r1
 800c8e4:	f7ff fb48 	bl	800bf78 <acc_rss_integration_get_max_spi_transfer_size>
 800c8e8:	e9cd 6602 	strd	r6, r6, [sp, #8]
 800c8ec:	f1ba 0f00 	cmp.w	sl, #0
 800c8f0:	d03e      	beq.n	800c970 <internal_buffer_processed_read.part.0+0xa0>
 800c8f2:	42b4      	cmp	r4, r6
 800c8f4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c8f8:	bf14      	ite	ne
 800c8fa:	f44f 43e0 	movne.w	r3, #28672	@ 0x7000
 800c8fe:	f44f 4300 	moveq.w	r3, #32768	@ 0x8000
 800c902:	f1a0 0804 	sub.w	r8, r0, #4
 800c906:	9301      	str	r3, [sp, #4]
 800c908:	464d      	mov	r5, r9
 800c90a:	4657      	mov	r7, sl
 800c90c:	e025      	b.n	800c95a <internal_buffer_processed_read.part.0+0x8a>
 800c90e:	9b00      	ldr	r3, [sp, #0]
 800c910:	9901      	ldr	r1, [sp, #4]
 800c912:	8029      	strh	r1, [r5, #0]
 800c914:	199a      	adds	r2, r3, r6
 800c916:	f04f 0100 	mov.w	r1, #0
 800c91a:	1e63      	subs	r3, r4, #1
 800c91c:	80e9      	strh	r1, [r5, #6]
 800c91e:	806a      	strh	r2, [r5, #2]
 800c920:	80ab      	strh	r3, [r5, #4]
 800c922:	0062      	lsls	r2, r4, #1
 800c924:	2100      	movs	r1, #0
 800c926:	f105 0008 	add.w	r0, r5, #8
 800c92a:	f003 fa7b 	bl	800fe24 <memset>
 800c92e:	4629      	mov	r1, r5
 800c930:	2301      	movs	r3, #1
 800c932:	4658      	mov	r0, fp
 800c934:	1d22      	adds	r2, r4, #4
 800c936:	f7ff fb25 	bl	800bf84 <acc_rss_integration_sensor_device_transfer>
 800c93a:	ab02      	add	r3, sp, #8
 800c93c:	cb03      	ldmia	r3!, {r0, r1}
 800c93e:	4426      	add	r6, r4
 800c940:	6069      	str	r1, [r5, #4]
 800c942:	6028      	str	r0, [r5, #0]
 800c944:	eb09 0546 	add.w	r5, r9, r6, lsl #1
 800c948:	f859 0016 	ldr.w	r0, [r9, r6, lsl #1]
 800c94c:	6869      	ldr	r1, [r5, #4]
 800c94e:	ab02      	add	r3, sp, #8
 800c950:	4556      	cmp	r6, sl
 800c952:	c303      	stmia	r3!, {r0, r1}
 800c954:	eba7 0704 	sub.w	r7, r7, r4
 800c958:	d20a      	bcs.n	800c970 <internal_buffer_processed_read.part.0+0xa0>
 800c95a:	45b8      	cmp	r8, r7
 800c95c:	4644      	mov	r4, r8
 800c95e:	bf28      	it	cs
 800c960:	463c      	movcs	r4, r7
 800c962:	45b8      	cmp	r8, r7
 800c964:	d2d3      	bcs.n	800c90e <internal_buffer_processed_read.part.0+0x3e>
 800c966:	e000      	b.n	800c96a <internal_buffer_processed_read.part.0+0x9a>
 800c968:	3c01      	subs	r4, #1
 800c96a:	07e3      	lsls	r3, r4, #31
 800c96c:	d4fc      	bmi.n	800c968 <internal_buffer_processed_read.part.0+0x98>
 800c96e:	e7ce      	b.n	800c90e <internal_buffer_processed_read.part.0+0x3e>
 800c970:	f109 0008 	add.w	r0, r9, #8
 800c974:	b005      	add	sp, #20
 800c976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c97a:	bf00      	nop

0800c97c <acc_sensor_a121_get_max_header_length>:
 800c97c:	2004      	movs	r0, #4
 800c97e:	4770      	bx	lr

0800c980 <acc_sensor_a121_conf_write_instr>:
 800c980:	b570      	push	{r4, r5, r6, lr}
 800c982:	2501      	movs	r5, #1
 800c984:	b084      	sub	sp, #16
 800c986:	f441 43a0 	orr.w	r3, r1, #20480	@ 0x5000
 800c98a:	4604      	mov	r4, r0
 800c98c:	4616      	mov	r6, r2
 800c98e:	a903      	add	r1, sp, #12
 800c990:	462a      	mov	r2, r5
 800c992:	a801      	add	r0, sp, #4
 800c994:	f8ad 3008 	strh.w	r3, [sp, #8]
 800c998:	9601      	str	r6, [sp, #4]
 800c99a:	f8ad 500a 	strh.w	r5, [sp, #10]
 800c99e:	f002 f999 	bl	800ecd4 <acc_utils_uint32_to_transfer_buffer>
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	a902      	add	r1, sp, #8
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	2204      	movs	r2, #4
 800c9aa:	f7ff faeb 	bl	800bf84 <acc_rss_integration_sensor_device_transfer>
 800c9ae:	b004      	add	sp, #16
 800c9b0:	bd70      	pop	{r4, r5, r6, pc}
 800c9b2:	bf00      	nop

0800c9b4 <acc_sensor_a121_prepare_load_confmem>:
 800c9b4:	0849      	lsrs	r1, r1, #1
 800c9b6:	b570      	push	{r4, r5, r6, lr}
 800c9b8:	6019      	str	r1, [r3, #0]
 800c9ba:	461c      	mov	r4, r3
 800c9bc:	4605      	mov	r5, r0
 800c9be:	4616      	mov	r6, r2
 800c9c0:	f7ff fada 	bl	800bf78 <acc_rss_integration_get_max_spi_transfer_size>
 800c9c4:	6821      	ldr	r1, [r4, #0]
 800c9c6:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 800c9ca:	d806      	bhi.n	800c9da <acc_sensor_a121_prepare_load_confmem+0x26>
 800c9cc:	3902      	subs	r1, #2
 800c9ce:	f021 0101 	bic.w	r1, r1, #1
 800c9d2:	3504      	adds	r5, #4
 800c9d4:	6035      	str	r5, [r6, #0]
 800c9d6:	6021      	str	r1, [r4, #0]
 800c9d8:	bd70      	pop	{r4, r5, r6, pc}
 800c9da:	f7ff facd 	bl	800bf78 <acc_rss_integration_get_max_spi_transfer_size>
 800c9de:	0841      	lsrs	r1, r0, #1
 800c9e0:	e7f4      	b.n	800c9cc <acc_sensor_a121_prepare_load_confmem+0x18>
 800c9e2:	bf00      	nop

0800c9e4 <acc_sensor_a121_load_confmem>:
 800c9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e8:	f103 0802 	add.w	r8, r3, #2
 800c9ec:	461c      	mov	r4, r3
 800c9ee:	4607      	mov	r7, r0
 800c9f0:	460e      	mov	r6, r1
 800c9f2:	4615      	mov	r5, r2
 800c9f4:	f7ff fac0 	bl	800bf78 <acc_rss_integration_get_max_spi_transfer_size>
 800c9f8:	ebb0 0f48 	cmp.w	r0, r8, lsl #1
 800c9fc:	d207      	bcs.n	800ca0e <acc_sensor_a121_load_confmem+0x2a>
 800c9fe:	4b0b      	ldr	r3, [pc, #44]	@ (800ca2c <acc_sensor_a121_load_confmem+0x48>)
 800ca00:	4a0b      	ldr	r2, [pc, #44]	@ (800ca30 <acc_sensor_a121_load_confmem+0x4c>)
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	490b      	ldr	r1, [pc, #44]	@ (800ca34 <acc_sensor_a121_load_confmem+0x50>)
 800ca06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	4718      	bx	r3
 800ca0e:	f446 41a0 	orr.w	r1, r6, #20480	@ 0x5000
 800ca12:	3c01      	subs	r4, #1
 800ca14:	8029      	strh	r1, [r5, #0]
 800ca16:	806c      	strh	r4, [r5, #2]
 800ca18:	f028 4200 	bic.w	r2, r8, #2147483648	@ 0x80000000
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	4638      	mov	r0, r7
 800ca20:	2300      	movs	r3, #0
 800ca22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca26:	f7ff baad 	b.w	800bf84 <acc_rss_integration_sensor_device_transfer>
 800ca2a:	bf00      	nop
 800ca2c:	2000069c 	.word	0x2000069c
 800ca30:	08013b68 	.word	0x08013b68
 800ca34:	08013b54 	.word	0x08013b54

0800ca38 <acc_sensor_a121_buffer_processed_read>:
 800ca38:	b510      	push	{r4, lr}
 800ca3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ca3e:	b082      	sub	sp, #8
 800ca40:	d805      	bhi.n	800ca4e <acc_sensor_a121_buffer_processed_read+0x16>
 800ca42:	2400      	movs	r4, #0
 800ca44:	9400      	str	r4, [sp, #0]
 800ca46:	f7ff ff43 	bl	800c8d0 <internal_buffer_processed_read.part.0>
 800ca4a:	b002      	add	sp, #8
 800ca4c:	bd10      	pop	{r4, pc}
 800ca4e:	4b04      	ldr	r3, [pc, #16]	@ (800ca60 <acc_sensor_a121_buffer_processed_read+0x28>)
 800ca50:	4a04      	ldr	r2, [pc, #16]	@ (800ca64 <acc_sensor_a121_buffer_processed_read+0x2c>)
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	4904      	ldr	r1, [pc, #16]	@ (800ca68 <acc_sensor_a121_buffer_processed_read+0x30>)
 800ca56:	2000      	movs	r0, #0
 800ca58:	4798      	blx	r3
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	b002      	add	sp, #8
 800ca5e:	bd10      	pop	{r4, pc}
 800ca60:	2000069c 	.word	0x2000069c
 800ca64:	08013b88 	.word	0x08013b88
 800ca68:	08013b54 	.word	0x08013b54

0800ca6c <acc_sensor_a121_lut_buffer_write>:
 800ca6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca70:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ca72:	460d      	mov	r5, r1
 800ca74:	4614      	mov	r4, r2
 800ca76:	4681      	mov	r9, r0
 800ca78:	4698      	mov	r8, r3
 800ca7a:	f7ff fa7d 	bl	800bf78 <acc_rss_integration_get_max_spi_transfer_size>
 800ca7e:	3c04      	subs	r4, #4
 800ca80:	1f07      	subs	r7, r0, #4
 800ca82:	0864      	lsrs	r4, r4, #1
 800ca84:	087f      	lsrs	r7, r7, #1
 800ca86:	42a7      	cmp	r7, r4
 800ca88:	bf28      	it	cs
 800ca8a:	4627      	movcs	r7, r4
 800ca8c:	f105 0a04 	add.w	sl, r5, #4
 800ca90:	2400      	movs	r4, #0
 800ca92:	1b33      	subs	r3, r6, r4
 800ca94:	42bb      	cmp	r3, r7
 800ca96:	bf28      	it	cs
 800ca98:	463b      	movcs	r3, r7
 800ca9a:	1e5a      	subs	r2, r3, #1
 800ca9c:	eb08 0104 	add.w	r1, r8, r4
 800caa0:	469b      	mov	fp, r3
 800caa2:	806a      	strh	r2, [r5, #2]
 800caa4:	ea6f 4181 	mvn.w	r1, r1, lsl #18
 800caa8:	005a      	lsls	r2, r3, #1
 800caaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caac:	ea6f 4191 	mvn.w	r1, r1, lsr #18
 800cab0:	8029      	strh	r1, [r5, #0]
 800cab2:	4650      	mov	r0, sl
 800cab4:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800cab8:	f003 fa3f 	bl	800ff3a <memcpy>
 800cabc:	445c      	add	r4, fp
 800cabe:	f10b 0202 	add.w	r2, fp, #2
 800cac2:	2300      	movs	r3, #0
 800cac4:	4629      	mov	r1, r5
 800cac6:	4648      	mov	r0, r9
 800cac8:	f7ff fa5c 	bl	800bf84 <acc_rss_integration_sensor_device_transfer>
 800cacc:	42a6      	cmp	r6, r4
 800cace:	d8e0      	bhi.n	800ca92 <acc_sensor_a121_lut_buffer_write+0x26>
 800cad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cad4 <acc_sensor_protocol_a121_init_interrupts>:
 800cad4:	b530      	push	{r4, r5, lr}
 800cad6:	b083      	sub	sp, #12
 800cad8:	2500      	movs	r5, #0
 800cada:	4629      	mov	r1, r5
 800cadc:	9500      	str	r5, [sp, #0]
 800cade:	237b      	movs	r3, #123	@ 0x7b
 800cae0:	22ff      	movs	r2, #255	@ 0xff
 800cae2:	4604      	mov	r4, r0
 800cae4:	f001 ff8e 	bl	800ea04 <acc_sensor_reg_field_write>
 800cae8:	2101      	movs	r1, #1
 800caea:	4620      	mov	r0, r4
 800caec:	9100      	str	r1, [sp, #0]
 800caee:	238b      	movs	r3, #139	@ 0x8b
 800caf0:	2202      	movs	r2, #2
 800caf2:	f001 ff87 	bl	800ea04 <acc_sensor_reg_field_write>
 800caf6:	9500      	str	r5, [sp, #0]
 800caf8:	4620      	mov	r0, r4
 800cafa:	238b      	movs	r3, #139	@ 0x8b
 800cafc:	2280      	movs	r2, #128	@ 0x80
 800cafe:	2107      	movs	r1, #7
 800cb00:	f001 ff80 	bl	800ea04 <acc_sensor_reg_field_write>
 800cb04:	b003      	add	sp, #12
 800cb06:	bd30      	pop	{r4, r5, pc}

0800cb08 <acc_sensor_protocol_a121_prepare_load>:
 800cb08:	b570      	push	{r4, r5, r6, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	f10d 0206 	add.w	r2, sp, #6
 800cb10:	2400      	movs	r4, #0
 800cb12:	2137      	movs	r1, #55	@ 0x37
 800cb14:	4605      	mov	r5, r0
 800cb16:	f8ad 4006 	strh.w	r4, [sp, #6]
 800cb1a:	f001 ff4d 	bl	800e9b8 <acc_sensor_reg_read>
 800cb1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cb22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cb26:	b9b3      	cbnz	r3, 800cb56 <acc_sensor_protocol_a121_prepare_load+0x4e>
 800cb28:	f10d 0206 	add.w	r2, sp, #6
 800cb2c:	2400      	movs	r4, #0
 800cb2e:	211c      	movs	r1, #28
 800cb30:	4628      	mov	r0, r5
 800cb32:	f8ad 4006 	strh.w	r4, [sp, #6]
 800cb36:	f001 ff3f 	bl	800e9b8 <acc_sensor_reg_read>
 800cb3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800cb3e:	051b      	lsls	r3, r3, #20
 800cb40:	d515      	bpl.n	800cb6e <acc_sensor_protocol_a121_prepare_load+0x66>
 800cb42:	4b0e      	ldr	r3, [pc, #56]	@ (800cb7c <acc_sensor_protocol_a121_prepare_load+0x74>)
 800cb44:	4a0e      	ldr	r2, [pc, #56]	@ (800cb80 <acc_sensor_protocol_a121_prepare_load+0x78>)
 800cb46:	691e      	ldr	r6, [r3, #16]
 800cb48:	490e      	ldr	r1, [pc, #56]	@ (800cb84 <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	462b      	mov	r3, r5
 800cb4e:	47b0      	blx	r6
 800cb50:	4620      	mov	r0, r4
 800cb52:	b002      	add	sp, #8
 800cb54:	bd70      	pop	{r4, r5, r6, pc}
 800cb56:	f7ff fa8f 	bl	800c078 <acc_rss_integration_log_level>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d0e4      	beq.n	800cb28 <acc_sensor_protocol_a121_prepare_load+0x20>
 800cb5e:	4b07      	ldr	r3, [pc, #28]	@ (800cb7c <acc_sensor_protocol_a121_prepare_load+0x74>)
 800cb60:	4a09      	ldr	r2, [pc, #36]	@ (800cb88 <acc_sensor_protocol_a121_prepare_load+0x80>)
 800cb62:	691c      	ldr	r4, [r3, #16]
 800cb64:	4907      	ldr	r1, [pc, #28]	@ (800cb84 <acc_sensor_protocol_a121_prepare_load+0x7c>)
 800cb66:	462b      	mov	r3, r5
 800cb68:	2001      	movs	r0, #1
 800cb6a:	47a0      	blx	r4
 800cb6c:	e7dc      	b.n	800cb28 <acc_sensor_protocol_a121_prepare_load+0x20>
 800cb6e:	4628      	mov	r0, r5
 800cb70:	f7ff ffb0 	bl	800cad4 <acc_sensor_protocol_a121_init_interrupts>
 800cb74:	2001      	movs	r0, #1
 800cb76:	b002      	add	sp, #8
 800cb78:	bd70      	pop	{r4, r5, r6, pc}
 800cb7a:	bf00      	nop
 800cb7c:	2000069c 	.word	0x2000069c
 800cb80:	08013be4 	.word	0x08013be4
 800cb84:	08013bcc 	.word	0x08013bcc
 800cb88:	08013ba0 	.word	0x08013ba0

0800cb8c <acc_sensor_protocol_a121_is_ready_to_update>:
 800cb8c:	b500      	push	{lr}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	2300      	movs	r3, #0
 800cb92:	f10d 0206 	add.w	r2, sp, #6
 800cb96:	2137      	movs	r1, #55	@ 0x37
 800cb98:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cb9c:	f001 ff0c 	bl	800e9b8 <acc_sensor_reg_read>
 800cba0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800cba4:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 800cba8:	3800      	subs	r0, #0
 800cbaa:	bf18      	it	ne
 800cbac:	2001      	movne	r0, #1
 800cbae:	b003      	add	sp, #12
 800cbb0:	f85d fb04 	ldr.w	pc, [sp], #4

0800cbb4 <acc_sensor_protocol_a121_run_program>:
 800cbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	f10d 0206 	add.w	r2, sp, #6
 800cbbc:	460e      	mov	r6, r1
 800cbbe:	2400      	movs	r4, #0
 800cbc0:	211c      	movs	r1, #28
 800cbc2:	4607      	mov	r7, r0
 800cbc4:	f8ad 4006 	strh.w	r4, [sp, #6]
 800cbc8:	f001 fef6 	bl	800e9b8 <acc_sensor_reg_read>
 800cbcc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cbd0:	f412 6500 	ands.w	r5, r2, #2048	@ 0x800
 800cbd4:	d10c      	bne.n	800cbf0 <acc_sensor_protocol_a121_run_program+0x3c>
 800cbd6:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 800cbda:	d313      	bcc.n	800cc04 <acc_sensor_protocol_a121_run_program+0x50>
 800cbdc:	4b10      	ldr	r3, [pc, #64]	@ (800cc20 <acc_sensor_protocol_a121_run_program+0x6c>)
 800cbde:	4a11      	ldr	r2, [pc, #68]	@ (800cc24 <acc_sensor_protocol_a121_run_program+0x70>)
 800cbe0:	691c      	ldr	r4, [r3, #16]
 800cbe2:	4911      	ldr	r1, [pc, #68]	@ (800cc28 <acc_sensor_protocol_a121_run_program+0x74>)
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	4633      	mov	r3, r6
 800cbe8:	47a0      	blx	r4
 800cbea:	4628      	mov	r0, r5
 800cbec:	b003      	add	sp, #12
 800cbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbf0:	4b0b      	ldr	r3, [pc, #44]	@ (800cc20 <acc_sensor_protocol_a121_run_program+0x6c>)
 800cbf2:	4a0e      	ldr	r2, [pc, #56]	@ (800cc2c <acc_sensor_protocol_a121_run_program+0x78>)
 800cbf4:	691d      	ldr	r5, [r3, #16]
 800cbf6:	490c      	ldr	r1, [pc, #48]	@ (800cc28 <acc_sensor_protocol_a121_run_program+0x74>)
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	463b      	mov	r3, r7
 800cbfc:	47a8      	blx	r5
 800cbfe:	4620      	mov	r0, r4
 800cc00:	b003      	add	sp, #12
 800cc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc04:	462a      	mov	r2, r5
 800cc06:	4638      	mov	r0, r7
 800cc08:	211b      	movs	r1, #27
 800cc0a:	f001 feeb 	bl	800e9e4 <acc_sensor_reg_write>
 800cc0e:	4638      	mov	r0, r7
 800cc10:	f446 6200 	orr.w	r2, r6, #2048	@ 0x800
 800cc14:	211b      	movs	r1, #27
 800cc16:	f001 fee5 	bl	800e9e4 <acc_sensor_reg_write>
 800cc1a:	2001      	movs	r0, #1
 800cc1c:	b003      	add	sp, #12
 800cc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc20:	2000069c 	.word	0x2000069c
 800cc24:	08013c44 	.word	0x08013c44
 800cc28:	08013bcc 	.word	0x08013bcc
 800cc2c:	08013c14 	.word	0x08013c14

0800cc30 <acc_sensor_protocol_a121_load_lut>:
 800cc30:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc32:	d809      	bhi.n	800cc48 <acc_sensor_protocol_a121_load_lut+0x18>
 800cc34:	b530      	push	{r4, r5, lr}
 800cc36:	b083      	sub	sp, #12
 800cc38:	461c      	mov	r4, r3
 800cc3a:	9d07      	ldr	r5, [sp, #28]
 800cc3c:	442c      	add	r4, r5
 800cc3e:	2c80      	cmp	r4, #128	@ 0x80
 800cc40:	d904      	bls.n	800cc4c <acc_sensor_protocol_a121_load_lut+0x1c>
 800cc42:	2000      	movs	r0, #0
 800cc44:	b003      	add	sp, #12
 800cc46:	bd30      	pop	{r4, r5, pc}
 800cc48:	2000      	movs	r0, #0
 800cc4a:	4770      	bx	lr
 800cc4c:	9c06      	ldr	r4, [sp, #24]
 800cc4e:	9501      	str	r5, [sp, #4]
 800cc50:	9400      	str	r4, [sp, #0]
 800cc52:	f7ff ff0b 	bl	800ca6c <acc_sensor_a121_lut_buffer_write>
 800cc56:	2001      	movs	r0, #1
 800cc58:	b003      	add	sp, #12
 800cc5a:	bd30      	pop	{r4, r5, pc}

0800cc5c <acc_sensor_protocol_a121_is_sensor_running>:
 800cc5c:	b500      	push	{lr}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	2300      	movs	r3, #0
 800cc62:	f10d 0206 	add.w	r2, sp, #6
 800cc66:	211c      	movs	r1, #28
 800cc68:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cc6c:	f001 fea4 	bl	800e9b8 <acc_sensor_reg_read>
 800cc70:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800cc74:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 800cc78:	b003      	add	sp, #12
 800cc7a:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc7e:	bf00      	nop

0800cc80 <acc_sensor_protocol_a121_is_event_pending>:
 800cc80:	b510      	push	{r4, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	460c      	mov	r4, r1
 800cc86:	2300      	movs	r3, #0
 800cc88:	f10d 0206 	add.w	r2, sp, #6
 800cc8c:	2137      	movs	r1, #55	@ 0x37
 800cc8e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cc92:	f001 fe91 	bl	800e9b8 <acc_sensor_reg_read>
 800cc96:	2c01      	cmp	r4, #1
 800cc98:	d00b      	beq.n	800ccb2 <acc_sensor_protocol_a121_is_event_pending+0x32>
 800cc9a:	2c02      	cmp	r4, #2
 800cc9c:	bf14      	ite	ne
 800cc9e:	23c0      	movne	r3, #192	@ 0xc0
 800cca0:	2380      	moveq	r3, #128	@ 0x80
 800cca2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cca6:	4213      	tst	r3, r2
 800cca8:	bf14      	ite	ne
 800ccaa:	2001      	movne	r0, #1
 800ccac:	2000      	moveq	r0, #0
 800ccae:	b002      	add	sp, #8
 800ccb0:	bd10      	pop	{r4, pc}
 800ccb2:	2340      	movs	r3, #64	@ 0x40
 800ccb4:	e7f5      	b.n	800cca2 <acc_sensor_protocol_a121_is_event_pending+0x22>
 800ccb6:	bf00      	nop

0800ccb8 <acc_sensor_protocol_a121_ack_event>:
 800ccb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	2400      	movs	r4, #0
 800ccbe:	2901      	cmp	r1, #1
 800ccc0:	4607      	mov	r7, r0
 800ccc2:	4616      	mov	r6, r2
 800ccc4:	f8ad 4006 	strh.w	r4, [sp, #6]
 800ccc8:	d019      	beq.n	800ccfe <acc_sensor_protocol_a121_ack_event+0x46>
 800ccca:	2902      	cmp	r1, #2
 800cccc:	d009      	beq.n	800cce2 <acc_sensor_protocol_a121_ack_event+0x2a>
 800ccce:	4b1a      	ldr	r3, [pc, #104]	@ (800cd38 <acc_sensor_protocol_a121_ack_event+0x80>)
 800ccd0:	4a1a      	ldr	r2, [pc, #104]	@ (800cd3c <acc_sensor_protocol_a121_ack_event+0x84>)
 800ccd2:	691d      	ldr	r5, [r3, #16]
 800ccd4:	491a      	ldr	r1, [pc, #104]	@ (800cd40 <acc_sensor_protocol_a121_ack_event+0x88>)
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	4620      	mov	r0, r4
 800ccda:	47a8      	blx	r5
 800ccdc:	4620      	mov	r0, r4
 800ccde:	b003      	add	sp, #12
 800cce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cce2:	2146      	movs	r1, #70	@ 0x46
 800cce4:	f10d 0206 	add.w	r2, sp, #6
 800cce8:	4638      	mov	r0, r7
 800ccea:	f001 fe65 	bl	800e9b8 <acc_sensor_reg_read>
 800ccee:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800ccf2:	2484      	movs	r4, #132	@ 0x84
 800ccf4:	b175      	cbz	r5, 800cd14 <acc_sensor_protocol_a121_ack_event+0x5c>
 800ccf6:	b9be      	cbnz	r6, 800cd28 <acc_sensor_protocol_a121_ack_event+0x70>
 800ccf8:	2001      	movs	r0, #1
 800ccfa:	b003      	add	sp, #12
 800ccfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccfe:	2145      	movs	r1, #69	@ 0x45
 800cd00:	f10d 0206 	add.w	r2, sp, #6
 800cd04:	4638      	mov	r0, r7
 800cd06:	f001 fe57 	bl	800e9b8 <acc_sensor_reg_read>
 800cd0a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800cd0e:	2483      	movs	r4, #131	@ 0x83
 800cd10:	2d00      	cmp	r5, #0
 800cd12:	d1f0      	bne.n	800ccf6 <acc_sensor_protocol_a121_ack_event+0x3e>
 800cd14:	4b08      	ldr	r3, [pc, #32]	@ (800cd38 <acc_sensor_protocol_a121_ack_event+0x80>)
 800cd16:	4a0b      	ldr	r2, [pc, #44]	@ (800cd44 <acc_sensor_protocol_a121_ack_event+0x8c>)
 800cd18:	691c      	ldr	r4, [r3, #16]
 800cd1a:	4909      	ldr	r1, [pc, #36]	@ (800cd40 <acc_sensor_protocol_a121_ack_event+0x88>)
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	463b      	mov	r3, r7
 800cd20:	47a0      	blx	r4
 800cd22:	4628      	mov	r0, r5
 800cd24:	b003      	add	sp, #12
 800cd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd28:	4638      	mov	r0, r7
 800cd2a:	4621      	mov	r1, r4
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f001 fe59 	bl	800e9e4 <acc_sensor_reg_write>
 800cd32:	4630      	mov	r0, r6
 800cd34:	e7d3      	b.n	800ccde <acc_sensor_protocol_a121_ack_event+0x26>
 800cd36:	bf00      	nop
 800cd38:	2000069c 	.word	0x2000069c
 800cd3c:	08013c60 	.word	0x08013c60
 800cd40:	08013bcc 	.word	0x08013bcc
 800cd44:	08013c7c 	.word	0x08013c7c

0800cd48 <acc_sensor_protocol_a121_get_event>:
 800cd48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	2400      	movs	r4, #0
 800cd4e:	4615      	mov	r5, r2
 800cd50:	f8ad 400e 	strh.w	r4, [sp, #14]
 800cd54:	2a00      	cmp	r2, #0
 800cd56:	d03d      	beq.n	800cdd4 <acc_sensor_protocol_a121_get_event+0x8c>
 800cd58:	2901      	cmp	r1, #1
 800cd5a:	4607      	mov	r7, r0
 800cd5c:	d028      	beq.n	800cdb0 <acc_sensor_protocol_a121_get_event+0x68>
 800cd5e:	2902      	cmp	r1, #2
 800cd60:	d11d      	bne.n	800cd9e <acc_sensor_protocol_a121_get_event+0x56>
 800cd62:	2132      	movs	r1, #50	@ 0x32
 800cd64:	2401      	movs	r4, #1
 800cd66:	f10d 020e 	add.w	r2, sp, #14
 800cd6a:	4638      	mov	r0, r7
 800cd6c:	f001 fe24 	bl	800e9b8 <acc_sensor_reg_read>
 800cd70:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800cd74:	806b      	strh	r3, [r5, #2]
 800cd76:	f003 0607 	and.w	r6, r3, #7
 800cd7a:	2e01      	cmp	r6, #1
 800cd7c:	802e      	strh	r6, [r5, #0]
 800cd7e:	d033      	beq.n	800cde8 <acc_sensor_protocol_a121_get_event+0xa0>
 800cd80:	f013 0f06 	tst.w	r3, #6
 800cd84:	d117      	bne.n	800cdb6 <acc_sensor_protocol_a121_get_event+0x6e>
 800cd86:	b9ce      	cbnz	r6, 800cdbc <acc_sensor_protocol_a121_get_event+0x74>
 800cd88:	4a1d      	ldr	r2, [pc, #116]	@ (800ce00 <acc_sensor_protocol_a121_get_event+0xb8>)
 800cd8a:	9700      	str	r7, [sp, #0]
 800cd8c:	6914      	ldr	r4, [r2, #16]
 800cd8e:	491d      	ldr	r1, [pc, #116]	@ (800ce04 <acc_sensor_protocol_a121_get_event+0xbc>)
 800cd90:	4a1d      	ldr	r2, [pc, #116]	@ (800ce08 <acc_sensor_protocol_a121_get_event+0xc0>)
 800cd92:	4630      	mov	r0, r6
 800cd94:	47a0      	blx	r4
 800cd96:	4634      	mov	r4, r6
 800cd98:	4620      	mov	r0, r4
 800cd9a:	b005      	add	sp, #20
 800cd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd9e:	4b18      	ldr	r3, [pc, #96]	@ (800ce00 <acc_sensor_protocol_a121_get_event+0xb8>)
 800cda0:	4918      	ldr	r1, [pc, #96]	@ (800ce04 <acc_sensor_protocol_a121_get_event+0xbc>)
 800cda2:	691e      	ldr	r6, [r3, #16]
 800cda4:	4a19      	ldr	r2, [pc, #100]	@ (800ce0c <acc_sensor_protocol_a121_get_event+0xc4>)
 800cda6:	4603      	mov	r3, r0
 800cda8:	4620      	mov	r0, r4
 800cdaa:	47b0      	blx	r6
 800cdac:	4621      	mov	r1, r4
 800cdae:	e7da      	b.n	800cd66 <acc_sensor_protocol_a121_get_event+0x1e>
 800cdb0:	460c      	mov	r4, r1
 800cdb2:	2133      	movs	r1, #51	@ 0x33
 800cdb4:	e7d7      	b.n	800cd66 <acc_sensor_protocol_a121_get_event+0x1e>
 800cdb6:	3e02      	subs	r6, #2
 800cdb8:	2e01      	cmp	r6, #1
 800cdba:	d9ed      	bls.n	800cd98 <acc_sensor_protocol_a121_get_event+0x50>
 800cdbc:	4a10      	ldr	r2, [pc, #64]	@ (800ce00 <acc_sensor_protocol_a121_get_event+0xb8>)
 800cdbe:	9700      	str	r7, [sp, #0]
 800cdc0:	6914      	ldr	r4, [r2, #16]
 800cdc2:	4910      	ldr	r1, [pc, #64]	@ (800ce04 <acc_sensor_protocol_a121_get_event+0xbc>)
 800cdc4:	4a12      	ldr	r2, [pc, #72]	@ (800ce10 <acc_sensor_protocol_a121_get_event+0xc8>)
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	47a0      	blx	r4
 800cdca:	2400      	movs	r4, #0
 800cdcc:	4620      	mov	r0, r4
 800cdce:	802c      	strh	r4, [r5, #0]
 800cdd0:	b005      	add	sp, #20
 800cdd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdd4:	4b0a      	ldr	r3, [pc, #40]	@ (800ce00 <acc_sensor_protocol_a121_get_event+0xb8>)
 800cdd6:	4a0f      	ldr	r2, [pc, #60]	@ (800ce14 <acc_sensor_protocol_a121_get_event+0xcc>)
 800cdd8:	691b      	ldr	r3, [r3, #16]
 800cdda:	490a      	ldr	r1, [pc, #40]	@ (800ce04 <acc_sensor_protocol_a121_get_event+0xbc>)
 800cddc:	4628      	mov	r0, r5
 800cdde:	4798      	blx	r3
 800cde0:	462c      	mov	r4, r5
 800cde2:	4620      	mov	r0, r4
 800cde4:	b005      	add	sp, #20
 800cde6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cde8:	4a05      	ldr	r2, [pc, #20]	@ (800ce00 <acc_sensor_protocol_a121_get_event+0xb8>)
 800cdea:	9700      	str	r7, [sp, #0]
 800cdec:	6914      	ldr	r4, [r2, #16]
 800cdee:	4905      	ldr	r1, [pc, #20]	@ (800ce04 <acc_sensor_protocol_a121_get_event+0xbc>)
 800cdf0:	4a09      	ldr	r2, [pc, #36]	@ (800ce18 <acc_sensor_protocol_a121_get_event+0xd0>)
 800cdf2:	2000      	movs	r0, #0
 800cdf4:	47a0      	blx	r4
 800cdf6:	2400      	movs	r4, #0
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	b005      	add	sp, #20
 800cdfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	2000069c 	.word	0x2000069c
 800ce04:	08013bcc 	.word	0x08013bcc
 800ce08:	08013cc4 	.word	0x08013cc4
 800ce0c:	08013c60 	.word	0x08013c60
 800ce10:	08013d28 	.word	0x08013d28
 800ce14:	08013cb0 	.word	0x08013cb0
 800ce18:	08013cf4 	.word	0x08013cf4

0800ce1c <acc_sensor_protocol_a121_is_handshake>:
 800ce1c:	8800      	ldrh	r0, [r0, #0]
 800ce1e:	f1a0 0003 	sub.w	r0, r0, #3
 800ce22:	fab0 f080 	clz	r0, r0
 800ce26:	0940      	lsrs	r0, r0, #5
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop

0800ce2c <acc_sensor_protocol_a121_is_done>:
 800ce2c:	8800      	ldrh	r0, [r0, #0]
 800ce2e:	f1a0 0002 	sub.w	r0, r0, #2
 800ce32:	fab0 f080 	clz	r0, r0
 800ce36:	0940      	lsrs	r0, r0, #5
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop

0800ce3c <acc_sensor_protocol_a121_get_frame_delayed_flag>:
 800ce3c:	8840      	ldrh	r0, [r0, #2]
 800ce3e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800ce42:	4770      	bx	lr

0800ce44 <acc_sensor_protocol_a121_check_asic_id>:
 800ce44:	b570      	push	{r4, r5, r6, lr}
 800ce46:	2300      	movs	r3, #0
 800ce48:	b082      	sub	sp, #8
 800ce4a:	f10d 0206 	add.w	r2, sp, #6
 800ce4e:	460d      	mov	r5, r1
 800ce50:	4619      	mov	r1, r3
 800ce52:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ce56:	4604      	mov	r4, r0
 800ce58:	f001 fdae 	bl	800e9b8 <acc_sensor_reg_read>
 800ce5c:	480f      	ldr	r0, [pc, #60]	@ (800ce9c <acc_sensor_protocol_a121_check_asic_id+0x58>)
 800ce5e:	f001 ff61 	bl	800ed24 <acc_diagnostic_log_set_scope>
 800ce62:	4621      	mov	r1, r4
 800ce64:	480e      	ldr	r0, [pc, #56]	@ (800cea0 <acc_sensor_protocol_a121_check_asic_id+0x5c>)
 800ce66:	f001 ff6d 	bl	800ed44 <acc_diagnostic_log_scalar>
 800ce6a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800ce6e:	480b      	ldr	r0, [pc, #44]	@ (800ce9c <acc_sensor_protocol_a121_check_asic_id+0x58>)
 800ce70:	f001 ff68 	bl	800ed44 <acc_diagnostic_log_scalar>
 800ce74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ce78:	f241 2210 	movw	r2, #4624	@ 0x1210
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	bf0c      	ite	eq
 800ce80:	2401      	moveq	r4, #1
 800ce82:	2400      	movne	r4, #0
 800ce84:	d006      	beq.n	800ce94 <acc_sensor_protocol_a121_check_asic_id+0x50>
 800ce86:	b92d      	cbnz	r5, 800ce94 <acc_sensor_protocol_a121_check_asic_id+0x50>
 800ce88:	4906      	ldr	r1, [pc, #24]	@ (800cea4 <acc_sensor_protocol_a121_check_asic_id+0x60>)
 800ce8a:	4a07      	ldr	r2, [pc, #28]	@ (800cea8 <acc_sensor_protocol_a121_check_asic_id+0x64>)
 800ce8c:	690e      	ldr	r6, [r1, #16]
 800ce8e:	4907      	ldr	r1, [pc, #28]	@ (800ceac <acc_sensor_protocol_a121_check_asic_id+0x68>)
 800ce90:	4628      	mov	r0, r5
 800ce92:	47b0      	blx	r6
 800ce94:	4620      	mov	r0, r4
 800ce96:	b002      	add	sp, #8
 800ce98:	bd70      	pop	{r4, r5, r6, pc}
 800ce9a:	bf00      	nop
 800ce9c:	08013d5c 	.word	0x08013d5c
 800cea0:	08013474 	.word	0x08013474
 800cea4:	2000069c 	.word	0x2000069c
 800cea8:	08013d64 	.word	0x08013d64
 800ceac:	08013bcc 	.word	0x08013bcc

0800ceb0 <acc_sensor_protocol_a121_hibernate_off>:
 800ceb0:	b570      	push	{r4, r5, r6, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	2203      	movs	r2, #3
 800ceb6:	460e      	mov	r6, r1
 800ceb8:	2100      	movs	r1, #0
 800ceba:	460d      	mov	r5, r1
 800cebc:	4604      	mov	r4, r0
 800cebe:	9200      	str	r2, [sp, #0]
 800cec0:	f240 1349 	movw	r3, #329	@ 0x149
 800cec4:	f001 fd9e 	bl	800ea04 <acc_sensor_reg_field_write>
 800cec8:	4620      	mov	r0, r4
 800ceca:	f240 1349 	movw	r3, #329	@ 0x149
 800cece:	2204      	movs	r2, #4
 800ced0:	2102      	movs	r1, #2
 800ced2:	9500      	str	r5, [sp, #0]
 800ced4:	f001 fd96 	bl	800ea04 <acc_sensor_reg_field_write>
 800ced8:	4620      	mov	r0, r4
 800ceda:	f240 1349 	movw	r3, #329	@ 0x149
 800cede:	2210      	movs	r2, #16
 800cee0:	2104      	movs	r1, #4
 800cee2:	9500      	str	r5, [sp, #0]
 800cee4:	f001 fd8e 	bl	800ea04 <acc_sensor_reg_field_write>
 800cee8:	4620      	mov	r0, r4
 800ceea:	f240 1349 	movw	r3, #329	@ 0x149
 800ceee:	2220      	movs	r2, #32
 800cef0:	2105      	movs	r1, #5
 800cef2:	9500      	str	r5, [sp, #0]
 800cef4:	f001 fd86 	bl	800ea04 <acc_sensor_reg_field_write>
 800cef8:	9500      	str	r5, [sp, #0]
 800cefa:	4620      	mov	r0, r4
 800cefc:	f240 1349 	movw	r3, #329	@ 0x149
 800cf00:	f44f 527f 	mov.w	r2, #16320	@ 0x3fc0
 800cf04:	2106      	movs	r1, #6
 800cf06:	f001 fd7d 	bl	800ea04 <acc_sensor_reg_field_write>
 800cf0a:	b90e      	cbnz	r6, 800cf10 <acc_sensor_protocol_a121_hibernate_off+0x60>
 800cf0c:	b002      	add	sp, #8
 800cf0e:	bd70      	pop	{r4, r5, r6, pc}
 800cf10:	4620      	mov	r0, r4
 800cf12:	f64a 42c0 	movw	r2, #44224	@ 0xacc0
 800cf16:	2131      	movs	r1, #49	@ 0x31
 800cf18:	b002      	add	sp, #8
 800cf1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf1e:	f001 bd61 	b.w	800e9e4 <acc_sensor_reg_write>
 800cf22:	bf00      	nop

0800cf24 <acc_sensor_protocol_a121_is_hibernate>:
 800cf24:	b500      	push	{lr}
 800cf26:	b083      	sub	sp, #12
 800cf28:	2300      	movs	r3, #0
 800cf2a:	f10d 0206 	add.w	r2, sp, #6
 800cf2e:	2131      	movs	r1, #49	@ 0x31
 800cf30:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cf34:	f001 fd40 	bl	800e9b8 <acc_sensor_reg_read>
 800cf38:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800cf3c:	f64a 43c0 	movw	r3, #44224	@ 0xacc0
 800cf40:	1ac0      	subs	r0, r0, r3
 800cf42:	fab0 f080 	clz	r0, r0
 800cf46:	0940      	lsrs	r0, r0, #5
 800cf48:	b003      	add	sp, #12
 800cf4a:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf4e:	bf00      	nop

0800cf50 <acc_sensor_protocol_a121_reconfigure>:
 800cf50:	b508      	push	{r3, lr}
 800cf52:	2201      	movs	r2, #1
 800cf54:	2180      	movs	r1, #128	@ 0x80
 800cf56:	f001 fd45 	bl	800e9e4 <acc_sensor_reg_write>
 800cf5a:	2001      	movs	r0, #1
 800cf5c:	bd08      	pop	{r3, pc}
 800cf5e:	bf00      	nop

0800cf60 <get_pll_freq>:
 800cf60:	b508      	push	{r3, lr}
 800cf62:	ed2d 8b02 	vpush	{d8}
 800cf66:	f7ff f801 	bl	800bf6c <acc_rss_integration_get_sensor_reference_frequency>
 800cf6a:	ee07 0a90 	vmov	s15, r0
 800cf6e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800cf72:	eeb0 0a48 	vmov.f32	s0, s16
 800cf76:	f001 fe6d 	bl	800ec54 <acc_cpd_pll_divisors_ref_divisor>
 800cf7a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800cf7e:	ecbd 8b02 	vpop	{d8}
 800cf82:	bd08      	pop	{r3, pc}

0800cf84 <acc_translation_a121_points_to_meter>:
 800cf84:	b508      	push	{r3, lr}
 800cf86:	ed2d 8b02 	vpush	{d8}
 800cf8a:	ee08 0a10 	vmov	s16, r0
 800cf8e:	f7ff ffe7 	bl	800cf60 <get_pll_freq>
 800cf92:	eef3 7a08 	vmov.f32	s15, #56	@ 0x41c00000  24.0
 800cf96:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cf9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cf9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cfa2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800cfa6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800cfc0 <acc_translation_a121_points_to_meter+0x3c>
 800cfaa:	ee67 7a88 	vmul.f32	s15, s15, s16
 800cfae:	ecbd 8b02 	vpop	{d8}
 800cfb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfb6:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800cfba:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cfbe:	bd08      	pop	{r3, pc}
 800cfc0:	4d8ef3c2 	.word	0x4d8ef3c2

0800cfc4 <acc_translation_a121_profile_to_pulse_params>:
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	3801      	subs	r0, #1
 800cfc8:	b430      	push	{r4, r5}
 800cfca:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800cfce:	60d3      	str	r3, [r2, #12]
 800cfd0:	2804      	cmp	r0, #4
 800cfd2:	d836      	bhi.n	800d042 <acc_translation_a121_profile_to_pulse_params+0x7e>
 800cfd4:	e8df f000 	tbb	[pc, r0]
 800cfd8:	2d291b0d 	.word	0x2d291b0d
 800cfdc:	03          	.byte	0x03
 800cfdd:	00          	.byte	0x00
 800cfde:	4b1c      	ldr	r3, [pc, #112]	@ (800d050 <acc_translation_a121_profile_to_pulse_params+0x8c>)
 800cfe0:	491c      	ldr	r1, [pc, #112]	@ (800d054 <acc_translation_a121_profile_to_pulse_params+0x90>)
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800cfe8:	7010      	strb	r0, [r2, #0]
 800cfea:	61d1      	str	r1, [r2, #28]
 800cfec:	2001      	movs	r0, #1
 800cfee:	bc30      	pop	{r4, r5}
 800cff0:	4770      	bx	lr
 800cff2:	2001      	movs	r0, #1
 800cff4:	2400      	movs	r4, #0
 800cff6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800cffa:	7014      	strb	r4, [r2, #0]
 800cffc:	82d0      	strh	r0, [r2, #22]
 800cffe:	8350      	strh	r0, [r2, #26]
 800d000:	61d3      	str	r3, [r2, #28]
 800d002:	b1d1      	cbz	r1, 800d03a <acc_translation_a121_profile_to_pulse_params+0x76>
 800d004:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 800d006:	8293      	strh	r3, [r2, #20]
 800d008:	bc30      	pop	{r4, r5}
 800d00a:	8313      	strh	r3, [r2, #24]
 800d00c:	4770      	bx	lr
 800d00e:	4b12      	ldr	r3, [pc, #72]	@ (800d058 <acc_translation_a121_profile_to_pulse_params+0x94>)
 800d010:	4c12      	ldr	r4, [pc, #72]	@ (800d05c <acc_translation_a121_profile_to_pulse_params+0x98>)
 800d012:	61d4      	str	r4, [r2, #28]
 800d014:	2001      	movs	r0, #1
 800d016:	2596      	movs	r5, #150	@ 0x96
 800d018:	21fa      	movs	r1, #250	@ 0xfa
 800d01a:	60d5      	str	r5, [r2, #12]
 800d01c:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800d020:	bc30      	pop	{r4, r5}
 800d022:	e9c2 3305 	strd	r3, r3, [r2, #20]
 800d026:	7010      	strb	r0, [r2, #0]
 800d028:	4770      	bx	lr
 800d02a:	4b0d      	ldr	r3, [pc, #52]	@ (800d060 <acc_translation_a121_profile_to_pulse_params+0x9c>)
 800d02c:	490d      	ldr	r1, [pc, #52]	@ (800d064 <acc_translation_a121_profile_to_pulse_params+0xa0>)
 800d02e:	2000      	movs	r0, #0
 800d030:	e7d8      	b.n	800cfe4 <acc_translation_a121_profile_to_pulse_params+0x20>
 800d032:	4b0d      	ldr	r3, [pc, #52]	@ (800d068 <acc_translation_a121_profile_to_pulse_params+0xa4>)
 800d034:	490d      	ldr	r1, [pc, #52]	@ (800d06c <acc_translation_a121_profile_to_pulse_params+0xa8>)
 800d036:	2000      	movs	r0, #0
 800d038:	e7d4      	b.n	800cfe4 <acc_translation_a121_profile_to_pulse_params+0x20>
 800d03a:	2302      	movs	r3, #2
 800d03c:	8293      	strh	r3, [r2, #20]
 800d03e:	8313      	strh	r3, [r2, #24]
 800d040:	e7d5      	b.n	800cfee <acc_translation_a121_profile_to_pulse_params+0x2a>
 800d042:	2000      	movs	r0, #0
 800d044:	e9c2 0005 	strd	r0, r0, [r2, #20]
 800d048:	7010      	strb	r0, [r2, #0]
 800d04a:	61d0      	str	r0, [r2, #28]
 800d04c:	e7cf      	b.n	800cfee <acc_translation_a121_profile_to_pulse_params+0x2a>
 800d04e:	bf00      	nop
 800d050:	00050008 	.word	0x00050008
 800d054:	0002000b 	.word	0x0002000b
 800d058:	00010008 	.word	0x00010008
 800d05c:	00030002 	.word	0x00030002
 800d060:	00020008 	.word	0x00020008
 800d064:	00020004 	.word	0x00020004
 800d068:	00030008 	.word	0x00030008
 800d06c:	00020006 	.word	0x00020006

0800d070 <acc_translation_a121_profile_to_start_point_offset>:
 800d070:	3801      	subs	r0, #1
 800d072:	2804      	cmp	r0, #4
 800d074:	d818      	bhi.n	800d0a8 <acc_translation_a121_profile_to_start_point_offset+0x38>
 800d076:	e8df f000 	tbb	[pc, r0]
 800d07a:	0812      	.short	0x0812
 800d07c:	0d03      	.short	0x0d03
 800d07e:	03          	.byte	0x03
 800d07f:	00          	.byte	0x00
 800d080:	f06f 030c 	mvn.w	r3, #12
 800d084:	600b      	str	r3, [r1, #0]
 800d086:	2001      	movs	r0, #1
 800d088:	4770      	bx	lr
 800d08a:	f06f 0306 	mvn.w	r3, #6
 800d08e:	600b      	str	r3, [r1, #0]
 800d090:	2001      	movs	r0, #1
 800d092:	4770      	bx	lr
 800d094:	f06f 030f 	mvn.w	r3, #15
 800d098:	600b      	str	r3, [r1, #0]
 800d09a:	2001      	movs	r0, #1
 800d09c:	4770      	bx	lr
 800d09e:	f06f 030b 	mvn.w	r3, #11
 800d0a2:	600b      	str	r3, [r1, #0]
 800d0a4:	2001      	movs	r0, #1
 800d0a6:	4770      	bx	lr
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	6008      	str	r0, [r1, #0]
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop

0800d0b0 <acc_translation_a121_set_calibration_params>:
 800d0b0:	b530      	push	{r4, r5, lr}
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	f8b0 2084 	ldrh.w	r2, [r0, #132]	@ 0x84
 800d0b8:	f8b0 3086 	ldrh.w	r3, [r0, #134]	@ 0x86
 800d0bc:	f8b0 5082 	ldrh.w	r5, [r0, #130]	@ 0x82
 800d0c0:	f8b0 1088 	ldrh.w	r1, [r0, #136]	@ 0x88
 800d0c4:	8062      	strh	r2, [r4, #2]
 800d0c6:	8842      	ldrh	r2, [r0, #2]
 800d0c8:	80a3      	strh	r3, [r4, #4]
 800d0ca:	8883      	ldrh	r3, [r0, #4]
 800d0cc:	8025      	strh	r5, [r4, #0]
 800d0ce:	b087      	sub	sp, #28
 800d0d0:	88c5      	ldrh	r5, [r0, #6]
 800d0d2:	80e1      	strh	r1, [r4, #6]
 800d0d4:	8941      	ldrh	r1, [r0, #10]
 800d0d6:	8122      	strh	r2, [r4, #8]
 800d0d8:	8c02      	ldrh	r2, [r0, #32]
 800d0da:	8163      	strh	r3, [r4, #10]
 800d0dc:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800d0de:	8263      	strh	r3, [r4, #18]
 800d0e0:	81a5      	strh	r5, [r4, #12]
 800d0e2:	81e1      	strh	r1, [r4, #14]
 800d0e4:	8222      	strh	r2, [r4, #16]
 800d0e6:	8900      	ldrh	r0, [r0, #8]
 800d0e8:	466a      	mov	r2, sp
 800d0ea:	2160      	movs	r1, #96	@ 0x60
 800d0ec:	f001 fdba 	bl	800ec64 <acc_dll_calculate_area_settings>
 800d0f0:	f8bd 1000 	ldrh.w	r1, [sp]
 800d0f4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d0f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d0fc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 800d100:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800d104:	82a1      	strh	r1, [r4, #20]
 800d106:	82e2      	strh	r2, [r4, #22]
 800d108:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800d10c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d110:	8323      	strh	r3, [r4, #24]
 800d112:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d116:	8365      	strh	r5, [r4, #26]
 800d118:	83a0      	strh	r0, [r4, #28]
 800d11a:	83e1      	strh	r1, [r4, #30]
 800d11c:	8422      	strh	r2, [r4, #32]
 800d11e:	8463      	strh	r3, [r4, #34]	@ 0x22
 800d120:	b007      	add	sp, #28
 800d122:	bd30      	pop	{r4, r5, pc}

0800d124 <acc_translation_a121_set_gain_params>:
 800d124:	7a83      	ldrb	r3, [r0, #10]
 800d126:	2b17      	cmp	r3, #23
 800d128:	d80e      	bhi.n	800d148 <acc_translation_a121_set_gain_params+0x24>
 800d12a:	2b09      	cmp	r3, #9
 800d12c:	d80e      	bhi.n	800d14c <acc_translation_a121_set_gain_params+0x28>
 800d12e:	f1c3 0309 	rsb	r3, r3, #9
 800d132:	2015      	movs	r0, #21
 800d134:	8053      	strh	r3, [r2, #2]
 800d136:	8010      	strh	r0, [r2, #0]
 800d138:	b199      	cbz	r1, 800d162 <acc_translation_a121_set_gain_params+0x3e>
 800d13a:	8853      	ldrh	r3, [r2, #2]
 800d13c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800d140:	2001      	movs	r0, #1
 800d142:	898b      	ldrh	r3, [r1, #12]
 800d144:	8093      	strh	r3, [r2, #4]
 800d146:	4770      	bx	lr
 800d148:	2000      	movs	r0, #0
 800d14a:	4770      	bx	lr
 800d14c:	2b10      	cmp	r3, #16
 800d14e:	bf94      	ite	ls
 800d150:	f1c3 031e 	rsbls	r3, r3, #30
 800d154:	f1c3 0317 	rsbhi	r3, r3, #23
 800d158:	2000      	movs	r0, #0
 800d15a:	8013      	strh	r3, [r2, #0]
 800d15c:	8050      	strh	r0, [r2, #2]
 800d15e:	2900      	cmp	r1, #0
 800d160:	d1eb      	bne.n	800d13a <acc_translation_a121_set_gain_params+0x16>
 800d162:	8091      	strh	r1, [r2, #4]
 800d164:	2001      	movs	r0, #1
 800d166:	4770      	bx	lr

0800d168 <acc_translation_a121_set_pulse_length_params>:
 800d168:	8a83      	ldrh	r3, [r0, #20]
 800d16a:	2b08      	cmp	r3, #8
 800d16c:	d802      	bhi.n	800d174 <acc_translation_a121_set_pulse_length_params+0xc>
 800d16e:	8ac2      	ldrh	r2, [r0, #22]
 800d170:	2a07      	cmp	r2, #7
 800d172:	d901      	bls.n	800d178 <acc_translation_a121_set_pulse_length_params+0x10>
 800d174:	2000      	movs	r0, #0
 800d176:	4770      	bx	lr
 800d178:	b470      	push	{r4, r5, r6}
 800d17a:	8b05      	ldrh	r5, [r0, #24]
 800d17c:	2d08      	cmp	r5, #8
 800d17e:	d902      	bls.n	800d186 <acc_translation_a121_set_pulse_length_params+0x1e>
 800d180:	2000      	movs	r0, #0
 800d182:	bc70      	pop	{r4, r5, r6}
 800d184:	4770      	bx	lr
 800d186:	8b44      	ldrh	r4, [r0, #26]
 800d188:	2c08      	cmp	r4, #8
 800d18a:	d8f9      	bhi.n	800d180 <acc_translation_a121_set_pulse_length_params+0x18>
 800d18c:	2001      	movs	r0, #1
 800d18e:	1e66      	subs	r6, r4, #1
 800d190:	fa00 f202 	lsl.w	r2, r0, r2
 800d194:	3a01      	subs	r2, #1
 800d196:	fa00 f404 	lsl.w	r4, r0, r4
 800d19a:	fa00 f606 	lsl.w	r6, r0, r6
 800d19e:	b292      	uxth	r2, r2
 800d1a0:	3c01      	subs	r4, #1
 800d1a2:	3e01      	subs	r6, #1
 800d1a4:	01a4      	lsls	r4, r4, #6
 800d1a6:	0276      	lsls	r6, r6, #9
 800d1a8:	800b      	strh	r3, [r1, #0]
 800d1aa:	0193      	lsls	r3, r2, #6
 800d1ac:	0252      	lsls	r2, r2, #9
 800d1ae:	804d      	strh	r5, [r1, #2]
 800d1b0:	808b      	strh	r3, [r1, #4]
 800d1b2:	810a      	strh	r2, [r1, #8]
 800d1b4:	80cc      	strh	r4, [r1, #6]
 800d1b6:	814e      	strh	r6, [r1, #10]
 800d1b8:	e7e3      	b.n	800d182 <acc_translation_a121_set_pulse_length_params+0x1a>
 800d1ba:	bf00      	nop

0800d1bc <acc_translation_a121_set_range_params>:
 800d1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c0:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 800d1c4:	f890 704c 	ldrb.w	r7, [r0, #76]	@ 0x4c
 800d1c8:	888d      	ldrh	r5, [r1, #4]
 800d1ca:	b08d      	sub	sp, #52	@ 0x34
 800d1cc:	f1ba 0f18 	cmp.w	sl, #24
 800d1d0:	9102      	str	r1, [sp, #8]
 800d1d2:	4691      	mov	r9, r2
 800d1d4:	461c      	mov	r4, r3
 800d1d6:	f240 812e 	bls.w	800d436 <acc_translation_a121_set_range_params+0x27a>
 800d1da:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 800d1de:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800d1e2:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 800d1e6:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 800d1ea:	f3c3 02cc 	ubfx	r2, r3, #3, #13
 800d1ee:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	f640 22aa 	movw	r2, #2730	@ 0xaaa
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	f240 8141 	bls.w	800d480 <acc_translation_a121_set_range_params+0x2c4>
 800d1fe:	4bb3      	ldr	r3, [pc, #716]	@ (800d4cc <acc_translation_a121_set_range_params+0x310>)
 800d200:	4ab3      	ldr	r2, [pc, #716]	@ (800d4d0 <acc_translation_a121_set_range_params+0x314>)
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	49b3      	ldr	r1, [pc, #716]	@ (800d4d4 <acc_translation_a121_set_range_params+0x318>)
 800d206:	2000      	movs	r0, #0
 800d208:	4606      	mov	r6, r0
 800d20a:	9001      	str	r0, [sp, #4]
 800d20c:	f04f 0801 	mov.w	r8, #1
 800d210:	4798      	blx	r3
 800d212:	46c3      	mov	fp, r8
 800d214:	9604      	str	r6, [sp, #16]
 800d216:	2f00      	cmp	r7, #0
 800d218:	f040 812f 	bne.w	800d47a <acc_translation_a121_set_range_params+0x2be>
 800d21c:	2204      	movs	r2, #4
 800d21e:	9b02      	ldr	r3, [sp, #8]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4499      	add	r9, r3
 800d224:	f509 43c3 	add.w	r3, r9, #24960	@ 0x6180
 800d228:	fb12 f205 	smulbb	r2, r2, r5
 800d22c:	3328      	adds	r3, #40	@ 0x28
 800d22e:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d232:	3d01      	subs	r5, #1
 800d234:	b292      	uxth	r2, r2
 800d236:	428b      	cmp	r3, r1
 800d238:	9205      	str	r2, [sp, #20]
 800d23a:	fb0a 9a05 	mla	sl, sl, r5, r9
 800d23e:	d906      	bls.n	800d24e <acc_translation_a121_set_range_params+0x92>
 800d240:	4ba2      	ldr	r3, [pc, #648]	@ (800d4cc <acc_translation_a121_set_range_params+0x310>)
 800d242:	4aa5      	ldr	r2, [pc, #660]	@ (800d4d8 <acc_translation_a121_set_range_params+0x31c>)
 800d244:	691b      	ldr	r3, [r3, #16]
 800d246:	49a3      	ldr	r1, [pc, #652]	@ (800d4d4 <acc_translation_a121_set_range_params+0x318>)
 800d248:	2000      	movs	r0, #0
 800d24a:	4798      	blx	r3
 800d24c:	2700      	movs	r7, #0
 800d24e:	f50a 43c3 	add.w	r3, sl, #24960	@ 0x6180
 800d252:	3328      	adds	r3, #40	@ 0x28
 800d254:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d258:	4293      	cmp	r3, r2
 800d25a:	d906      	bls.n	800d26a <acc_translation_a121_set_range_params+0xae>
 800d25c:	4b9b      	ldr	r3, [pc, #620]	@ (800d4cc <acc_translation_a121_set_range_params+0x310>)
 800d25e:	4a9f      	ldr	r2, [pc, #636]	@ (800d4dc <acc_translation_a121_set_range_params+0x320>)
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	499c      	ldr	r1, [pc, #624]	@ (800d4d4 <acc_translation_a121_set_range_params+0x318>)
 800d264:	2000      	movs	r0, #0
 800d266:	4798      	blx	r3
 800d268:	2700      	movs	r7, #0
 800d26a:	f1b9 0f00 	cmp.w	r9, #0
 800d26e:	f2c0 817c 	blt.w	800d56a <acc_translation_a121_set_range_params+0x3ae>
 800d272:	4b9b      	ldr	r3, [pc, #620]	@ (800d4e0 <acc_translation_a121_set_range_params+0x324>)
 800d274:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800d278:	fb83 1309 	smull	r1, r3, r3, r9
 800d27c:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
 800d280:	f1ba 0f00 	cmp.w	sl, #0
 800d284:	b21b      	sxth	r3, r3
 800d286:	f2c0 817e 	blt.w	800d586 <acc_translation_a121_set_range_params+0x3ca>
 800d28a:	4995      	ldr	r1, [pc, #596]	@ (800d4e0 <acc_translation_a121_set_range_params+0x324>)
 800d28c:	ea4f 7cea 	mov.w	ip, sl, asr #31
 800d290:	fb81 010a 	smull	r0, r1, r1, sl
 800d294:	ebcc 01a1 	rsb	r1, ip, r1, asr #2
 800d298:	b209      	sxth	r1, r1
 800d29a:	4891      	ldr	r0, [pc, #580]	@ (800d4e0 <acc_translation_a121_set_range_params+0x324>)
 800d29c:	fb80 5009 	smull	r5, r0, r0, r9
 800d2a0:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	1ac9      	subs	r1, r1, r3
 800d2a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d2ac:	b288      	uxth	r0, r1
 800d2ae:	ebb9 02c2 	subs.w	r2, r9, r2, lsl #3
 800d2b2:	b209      	sxth	r1, r1
 800d2b4:	fbb0 fbfb 	udiv	fp, r0, fp
 800d2b8:	f10b 0b01 	add.w	fp, fp, #1
 800d2bc:	9106      	str	r1, [sp, #24]
 800d2be:	fa1f fb8b 	uxth.w	fp, fp
 800d2c2:	f04f 0118 	mov.w	r1, #24
 800d2c6:	fbb1 f1f8 	udiv	r1, r1, r8
 800d2ca:	f100 816e 	bmi.w	800d5aa <acc_translation_a121_set_range_params+0x3ee>
 800d2ce:	b210      	sxth	r0, r2
 800d2d0:	b292      	uxth	r2, r2
 800d2d2:	f8df 920c 	ldr.w	r9, [pc, #524]	@ 800d4e0 <acc_translation_a121_set_range_params+0x324>
 800d2d6:	fbb2 f5f8 	udiv	r5, r2, r8
 800d2da:	fb89 690a 	smull	r6, r9, r9, sl
 800d2de:	ebcc 09a9 	rsb	r9, ip, r9, asr #2
 800d2e2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 800d2e6:	fb08 2515 	mls	r5, r8, r5, r2
 800d2ea:	b2ad      	uxth	r5, r5
 800d2ec:	ebba 09c9 	subs.w	r9, sl, r9, lsl #3
 800d2f0:	9500      	str	r5, [sp, #0]
 800d2f2:	f100 8153 	bmi.w	800d59c <acc_translation_a121_set_range_params+0x3e0>
 800d2f6:	fa0f f589 	sxth.w	r5, r9
 800d2fa:	950a      	str	r5, [sp, #40]	@ 0x28
 800d2fc:	fa1f f989 	uxth.w	r9, r9
 800d300:	9d00      	ldr	r5, [sp, #0]
 800d302:	3901      	subs	r1, #1
 800d304:	b289      	uxth	r1, r1
 800d306:	9109      	str	r1, [sp, #36]	@ 0x24
 800d308:	f1bb 0f01 	cmp.w	fp, #1
 800d30c:	fb11 5108 	smlabb	r1, r1, r8, r5
 800d310:	b289      	uxth	r1, r1
 800d312:	f000 80f3 	beq.w	800d4fc <acc_translation_a121_set_range_params+0x340>
 800d316:	9d00      	ldr	r5, [sp, #0]
 800d318:	ebb9 0901 	subs.w	r9, r9, r1
 800d31c:	bf18      	it	ne
 800d31e:	f04f 0901 	movne.w	r9, #1
 800d322:	4295      	cmp	r5, r2
 800d324:	bf14      	ite	ne
 800d326:	2501      	movne	r5, #1
 800d328:	2500      	moveq	r5, #0
 800d32a:	ebab 0505 	sub.w	r5, fp, r5
 800d32e:	eba5 0509 	sub.w	r5, r5, r9
 800d332:	fa1f f689 	uxth.w	r6, r9
 800d336:	b2ad      	uxth	r5, r5
 800d338:	9607      	str	r6, [sp, #28]
 800d33a:	f040 80e6 	bne.w	800d50a <acc_translation_a121_set_range_params+0x34e>
 800d33e:	2100      	movs	r1, #0
 800d340:	9108      	str	r1, [sp, #32]
 800d342:	9103      	str	r1, [sp, #12]
 800d344:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d346:	9900      	ldr	r1, [sp, #0]
 800d348:	0092      	lsls	r2, r2, #2
 800d34a:	0089      	lsls	r1, r1, #2
 800d34c:	87a2      	strh	r2, [r4, #60]	@ 0x3c
 800d34e:	87e1      	strh	r1, [r4, #62]	@ 0x3e
 800d350:	2f00      	cmp	r7, #0
 800d352:	f000 80b4 	beq.w	800d4be <acc_translation_a121_set_range_params+0x302>
 800d356:	9a02      	ldr	r2, [sp, #8]
 800d358:	7b92      	ldrb	r2, [r2, #14]
 800d35a:	2a05      	cmp	r2, #5
 800d35c:	f200 812a 	bhi.w	800d5b4 <acc_translation_a121_set_range_params+0x3f8>
 800d360:	4960      	ldr	r1, [pc, #384]	@ (800d4e4 <acc_translation_a121_set_range_params+0x328>)
 800d362:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 800d366:	ea4f 015a 	mov.w	r1, sl, lsr #1
 800d36a:	f1aa 0003 	sub.w	r0, sl, #3
 800d36e:	f1aa 0b4a 	sub.w	fp, sl, #74	@ 0x4a
 800d372:	3903      	subs	r1, #3
 800d374:	b289      	uxth	r1, r1
 800d376:	b280      	uxth	r0, r0
 800d378:	fa1f fb8b 	uxth.w	fp, fp
 800d37c:	f1aa 0a14 	sub.w	sl, sl, #20
 800d380:	f1c3 0629 	rsb	r6, r3, #41	@ 0x29
 800d384:	445e      	add	r6, fp
 800d386:	9a06      	ldr	r2, [sp, #24]
 800d388:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800d38a:	b233      	sxth	r3, r6
 800d38c:	1a9a      	subs	r2, r3, r2
 800d38e:	2a29      	cmp	r2, #41	@ 0x29
 800d390:	86e1      	strh	r1, [r4, #54]	@ 0x36
 800d392:	b2b6      	uxth	r6, r6
 800d394:	dc08      	bgt.n	800d3a8 <acc_translation_a121_set_range_params+0x1ec>
 800d396:	494d      	ldr	r1, [pc, #308]	@ (800d4cc <acc_translation_a121_set_range_params+0x310>)
 800d398:	4a53      	ldr	r2, [pc, #332]	@ (800d4e8 <acc_translation_a121_set_range_params+0x32c>)
 800d39a:	690f      	ldr	r7, [r1, #16]
 800d39c:	494d      	ldr	r1, [pc, #308]	@ (800d4d4 <acc_translation_a121_set_range_params+0x318>)
 800d39e:	9302      	str	r3, [sp, #8]
 800d3a0:	2000      	movs	r0, #0
 800d3a2:	47b8      	blx	r7
 800d3a4:	9b02      	ldr	r3, [sp, #8]
 800d3a6:	2700      	movs	r7, #0
 800d3a8:	4553      	cmp	r3, sl
 800d3aa:	db06      	blt.n	800d3ba <acc_translation_a121_set_range_params+0x1fe>
 800d3ac:	4b47      	ldr	r3, [pc, #284]	@ (800d4cc <acc_translation_a121_set_range_params+0x310>)
 800d3ae:	4a4f      	ldr	r2, [pc, #316]	@ (800d4ec <acc_translation_a121_set_range_params+0x330>)
 800d3b0:	691b      	ldr	r3, [r3, #16]
 800d3b2:	4948      	ldr	r1, [pc, #288]	@ (800d4d4 <acc_translation_a121_set_range_params+0x318>)
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	4798      	blx	r3
 800d3b8:	2700      	movs	r7, #0
 800d3ba:	9b01      	ldr	r3, [sp, #4]
 800d3bc:	f8a4 b038 	strh.w	fp, [r4, #56]	@ 0x38
 800d3c0:	2b2c      	cmp	r3, #44	@ 0x2c
 800d3c2:	8766      	strh	r6, [r4, #58]	@ 0x3a
 800d3c4:	f240 80c4 	bls.w	800d550 <acc_translation_a121_set_range_params+0x394>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 800d3ce:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800d3d2:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800d3d6:	9b04      	ldr	r3, [sp, #16]
 800d3d8:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 800d3dc:	9b08      	ldr	r3, [sp, #32]
 800d3de:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800d3e2:	2d00      	cmp	r5, #0
 800d3e4:	f000 809a 	beq.w	800d51c <acc_translation_a121_set_range_params+0x360>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 800d3ee:	9b03      	ldr	r3, [sp, #12]
 800d3f0:	9a07      	ldr	r2, [sp, #28]
 800d3f2:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f000 80fc 	beq.w	800d5f4 <acc_translation_a121_set_range_params+0x438>
 800d3fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3fe:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800d402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d404:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800d408:	f1b9 0f00 	cmp.w	r9, #0
 800d40c:	f000 80ef 	beq.w	800d5ee <acc_translation_a121_set_range_params+0x432>
 800d410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d412:	9a00      	ldr	r2, [sp, #0]
 800d414:	eba3 0902 	sub.w	r9, r3, r2
 800d418:	fb99 f8f8 	sdiv	r8, r9, r8
 800d41c:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 800d420:	3d01      	subs	r5, #1
 800d422:	b2ad      	uxth	r5, r5
 800d424:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d426:	9a05      	ldr	r2, [sp, #20]
 800d428:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 800d42c:	4638      	mov	r0, r7
 800d42e:	801a      	strh	r2, [r3, #0]
 800d430:	b00d      	add	sp, #52	@ 0x34
 800d432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d436:	f1ba 0f00 	cmp.w	sl, #0
 800d43a:	f43f aee0 	beq.w	800d1fe <acc_translation_a121_set_range_params+0x42>
 800d43e:	2318      	movs	r3, #24
 800d440:	fbb3 f3fa 	udiv	r3, r3, sl
 800d444:	fb0a f303 	mul.w	r3, sl, r3
 800d448:	f1c3 0318 	rsb	r3, r3, #24
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	9304      	str	r3, [sp, #16]
 800d450:	2b00      	cmp	r3, #0
 800d452:	f47f aed4 	bne.w	800d1fe <acc_translation_a121_set_range_params+0x42>
 800d456:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	9301      	str	r3, [sp, #4]
 800d460:	46d0      	mov	r8, sl
 800d462:	f04f 0b01 	mov.w	fp, #1
 800d466:	b9d5      	cbnz	r5, 800d49e <acc_translation_a121_set_range_params+0x2e2>
 800d468:	4b18      	ldr	r3, [pc, #96]	@ (800d4cc <acc_translation_a121_set_range_params+0x310>)
 800d46a:	4a21      	ldr	r2, [pc, #132]	@ (800d4f0 <acc_translation_a121_set_range_params+0x334>)
 800d46c:	691b      	ldr	r3, [r3, #16]
 800d46e:	4919      	ldr	r1, [pc, #100]	@ (800d4d4 <acc_translation_a121_set_range_params+0x318>)
 800d470:	4628      	mov	r0, r5
 800d472:	4798      	blx	r3
 800d474:	2f00      	cmp	r7, #0
 800d476:	f43f aed1 	beq.w	800d21c <acc_translation_a121_set_range_params+0x60>
 800d47a:	2700      	movs	r7, #0
 800d47c:	2202      	movs	r2, #2
 800d47e:	e6ce      	b.n	800d21e <acc_translation_a121_set_range_params+0x62>
 800d480:	4b1c      	ldr	r3, [pc, #112]	@ (800d4f4 <acc_translation_a121_set_range_params+0x338>)
 800d482:	fba3 3b0a 	umull	r3, fp, r3, sl
 800d486:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 800d48a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d48e:	b29b      	uxth	r3, r3
 800d490:	9304      	str	r3, [sp, #16]
 800d492:	235c      	movs	r3, #92	@ 0x5c
 800d494:	9301      	str	r3, [sp, #4]
 800d496:	f04f 0818 	mov.w	r8, #24
 800d49a:	2d00      	cmp	r5, #0
 800d49c:	d0e4      	beq.n	800d468 <acc_translation_a121_set_range_params+0x2ac>
 800d49e:	2f00      	cmp	r7, #0
 800d4a0:	f040 80b2 	bne.w	800d608 <acc_translation_a121_set_range_params+0x44c>
 800d4a4:	9b02      	ldr	r3, [sp, #8]
 800d4a6:	7b1b      	ldrb	r3, [r3, #12]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f000 80c4 	beq.w	800d636 <acc_translation_a121_set_range_params+0x47a>
 800d4ae:	4b07      	ldr	r3, [pc, #28]	@ (800d4cc <acc_translation_a121_set_range_params+0x310>)
 800d4b0:	4a11      	ldr	r2, [pc, #68]	@ (800d4f8 <acc_translation_a121_set_range_params+0x33c>)
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	4907      	ldr	r1, [pc, #28]	@ (800d4d4 <acc_translation_a121_set_range_params+0x318>)
 800d4b6:	4638      	mov	r0, r7
 800d4b8:	4798      	blx	r3
 800d4ba:	2204      	movs	r2, #4
 800d4bc:	e6af      	b.n	800d21e <acc_translation_a121_set_range_params+0x62>
 800d4be:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 800d4c2:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 800d4c6:	213d      	movs	r1, #61	@ 0x3d
 800d4c8:	207d      	movs	r0, #125	@ 0x7d
 800d4ca:	e759      	b.n	800d380 <acc_translation_a121_set_range_params+0x1c4>
 800d4cc:	2000069c 	.word	0x2000069c
 800d4d0:	08013d84 	.word	0x08013d84
 800d4d4:	08013d98 	.word	0x08013d98
 800d4d8:	08013df8 	.word	0x08013df8
 800d4dc:	08013e0c 	.word	0x08013e0c
 800d4e0:	2aaaaaab 	.word	0x2aaaaaab
 800d4e4:	0801409c 	.word	0x0801409c
 800d4e8:	08013e40 	.word	0x08013e40
 800d4ec:	08013e60 	.word	0x08013e60
 800d4f0:	08013dac 	.word	0x08013dac
 800d4f4:	aaaaaaab 	.word	0xaaaaaaab
 800d4f8:	08013dc0 	.word	0x08013dc0
 800d4fc:	4295      	cmp	r5, r2
 800d4fe:	f000 808e 	beq.w	800d61e <acc_translation_a121_set_range_params+0x462>
 800d502:	2500      	movs	r5, #0
 800d504:	4649      	mov	r1, r9
 800d506:	9507      	str	r5, [sp, #28]
 800d508:	46a9      	mov	r9, r5
 800d50a:	2601      	movs	r6, #1
 800d50c:	1a08      	subs	r0, r1, r0
 800d50e:	fb90 f0f8 	sdiv	r0, r0, r8
 800d512:	b281      	uxth	r1, r0
 800d514:	9608      	str	r6, [sp, #32]
 800d516:	9603      	str	r6, [sp, #12]
 800d518:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d51a:	e714      	b.n	800d346 <acc_translation_a121_set_range_params+0x18a>
 800d51c:	9b07      	ldr	r3, [sp, #28]
 800d51e:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 800d522:	9b03      	ldr	r3, [sp, #12]
 800d524:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d06a      	beq.n	800d602 <acc_translation_a121_set_range_params+0x446>
 800d52c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d52e:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800d532:	2300      	movs	r3, #0
 800d534:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 800d538:	f1b9 0f00 	cmp.w	r9, #0
 800d53c:	d05e      	beq.n	800d5fc <acc_translation_a121_set_range_params+0x440>
 800d53e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d540:	9a00      	ldr	r2, [sp, #0]
 800d542:	eba3 0902 	sub.w	r9, r3, r2
 800d546:	fb99 f8f8 	sdiv	r8, r9, r8
 800d54a:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 800d54e:	e769      	b.n	800d424 <acc_translation_a121_set_range_params+0x268>
 800d550:	9b01      	ldr	r3, [sp, #4]
 800d552:	2b1e      	cmp	r3, #30
 800d554:	d93e      	bls.n	800d5d4 <acc_translation_a121_set_range_params+0x418>
 800d556:	f1a3 021e 	sub.w	r2, r3, #30
 800d55a:	230f      	movs	r3, #15
 800d55c:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 800d560:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 800d564:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800d568:	e735      	b.n	800d3d6 <acc_translation_a121_set_range_params+0x21a>
 800d56a:	4a36      	ldr	r2, [pc, #216]	@ (800d644 <acc_translation_a121_set_range_params+0x488>)
 800d56c:	ea6f 0309 	mvn.w	r3, r9
 800d570:	fba2 2303 	umull	r2, r3, r2, r3
 800d574:	ea6f 1313 	mvn.w	r3, r3, lsr #4
 800d578:	f1ba 0f00 	cmp.w	sl, #0
 800d57c:	b21b      	sxth	r3, r3
 800d57e:	ea4f 72e9 	mov.w	r2, r9, asr #31
 800d582:	f6bf ae82 	bge.w	800d28a <acc_translation_a121_set_range_params+0xce>
 800d586:	482f      	ldr	r0, [pc, #188]	@ (800d644 <acc_translation_a121_set_range_params+0x488>)
 800d588:	ea6f 010a 	mvn.w	r1, sl
 800d58c:	fba0 0101 	umull	r0, r1, r0, r1
 800d590:	ea6f 1111 	mvn.w	r1, r1, lsr #4
 800d594:	b209      	sxth	r1, r1
 800d596:	ea4f 7cea 	mov.w	ip, sl, asr #31
 800d59a:	e67e      	b.n	800d29a <acc_translation_a121_set_range_params+0xde>
 800d59c:	f109 0518 	add.w	r5, r9, #24
 800d5a0:	fa1f f985 	uxth.w	r9, r5
 800d5a4:	b22d      	sxth	r5, r5
 800d5a6:	950a      	str	r5, [sp, #40]	@ 0x28
 800d5a8:	e6aa      	b.n	800d300 <acc_translation_a121_set_range_params+0x144>
 800d5aa:	f102 0018 	add.w	r0, r2, #24
 800d5ae:	b282      	uxth	r2, r0
 800d5b0:	b200      	sxth	r0, r0
 800d5b2:	e68e      	b.n	800d2d2 <acc_translation_a121_set_range_params+0x116>
 800d5b4:	4924      	ldr	r1, [pc, #144]	@ (800d648 <acc_translation_a121_set_range_params+0x48c>)
 800d5b6:	4a25      	ldr	r2, [pc, #148]	@ (800d64c <acc_translation_a121_set_range_params+0x490>)
 800d5b8:	690e      	ldr	r6, [r1, #16]
 800d5ba:	4925      	ldr	r1, [pc, #148]	@ (800d650 <acc_translation_a121_set_range_params+0x494>)
 800d5bc:	9302      	str	r3, [sp, #8]
 800d5be:	2000      	movs	r0, #0
 800d5c0:	47b0      	blx	r6
 800d5c2:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 800d5c6:	9b02      	ldr	r3, [sp, #8]
 800d5c8:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 800d5cc:	213d      	movs	r1, #61	@ 0x3d
 800d5ce:	207d      	movs	r0, #125	@ 0x7d
 800d5d0:	2700      	movs	r7, #0
 800d5d2:	e6d5      	b.n	800d380 <acc_translation_a121_set_range_params+0x1c4>
 800d5d4:	9b01      	ldr	r3, [sp, #4]
 800d5d6:	2b0f      	cmp	r3, #15
 800d5d8:	d918      	bls.n	800d60c <acc_translation_a121_set_range_params+0x450>
 800d5da:	3b0f      	subs	r3, #15
 800d5dc:	220f      	movs	r2, #15
 800d5de:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 800d5e8:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800d5ec:	e6f3      	b.n	800d3d6 <acc_translation_a121_set_range_params+0x21a>
 800d5ee:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 800d5f2:	e715      	b.n	800d420 <acc_translation_a121_set_range_params+0x264>
 800d5f4:	9b03      	ldr	r3, [sp, #12]
 800d5f6:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 800d5fa:	e702      	b.n	800d402 <acc_translation_a121_set_range_params+0x246>
 800d5fc:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 800d600:	e710      	b.n	800d424 <acc_translation_a121_set_range_params+0x268>
 800d602:	f8a4 5042 	strh.w	r5, [r4, #66]	@ 0x42
 800d606:	e794      	b.n	800d532 <acc_translation_a121_set_range_params+0x376>
 800d608:	2202      	movs	r2, #2
 800d60a:	e608      	b.n	800d21e <acc_translation_a121_set_range_params+0x62>
 800d60c:	2300      	movs	r3, #0
 800d60e:	9a01      	ldr	r2, [sp, #4]
 800d610:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 800d614:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800d618:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 800d61c:	e6db      	b.n	800d3d6 <acc_translation_a121_set_range_params+0x21a>
 800d61e:	4589      	cmp	r9, r1
 800d620:	bf0c      	ite	eq
 800d622:	2501      	moveq	r5, #1
 800d624:	2500      	movne	r5, #0
 800d626:	d108      	bne.n	800d63a <acc_translation_a121_set_range_params+0x47e>
 800d628:	2100      	movs	r1, #0
 800d62a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800d62e:	4689      	mov	r9, r1
 800d630:	9103      	str	r1, [sp, #12]
 800d632:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d634:	e687      	b.n	800d346 <acc_translation_a121_set_range_params+0x18a>
 800d636:	2701      	movs	r7, #1
 800d638:	e5f0      	b.n	800d21c <acc_translation_a121_set_range_params+0x60>
 800d63a:	2600      	movs	r6, #0
 800d63c:	4649      	mov	r1, r9
 800d63e:	9607      	str	r6, [sp, #28]
 800d640:	46b1      	mov	r9, r6
 800d642:	e762      	b.n	800d50a <acc_translation_a121_set_range_params+0x34e>
 800d644:	aaaaaaab 	.word	0xaaaaaaab
 800d648:	2000069c 	.word	0x2000069c
 800d64c:	08013e34 	.word	0x08013e34
 800d650:	08013d98 	.word	0x08013d98

0800d654 <acc_translation_a121_subsweep_translate>:
 800d654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d658:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 800d65c:	4607      	mov	r7, r0
 800d65e:	8908      	ldrh	r0, [r1, #8]
 800d660:	460e      	mov	r6, r1
 800d662:	f240 35ff 	movw	r5, #1023	@ 0x3ff
 800d666:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800d66a:	b08c      	sub	sp, #48	@ 0x30
 800d66c:	f1bc 0f00 	cmp.w	ip, #0
 800d670:	bf08      	it	eq
 800d672:	4629      	moveq	r1, r5
 800d674:	b108      	cbz	r0, 800d67a <acc_translation_a121_subsweep_translate+0x26>
 800d676:	4281      	cmp	r1, r0
 800d678:	d20a      	bcs.n	800d690 <acc_translation_a121_subsweep_translate+0x3c>
 800d67a:	4b55      	ldr	r3, [pc, #340]	@ (800d7d0 <acc_translation_a121_subsweep_translate+0x17c>)
 800d67c:	4a55      	ldr	r2, [pc, #340]	@ (800d7d4 <acc_translation_a121_subsweep_translate+0x180>)
 800d67e:	691b      	ldr	r3, [r3, #16]
 800d680:	4955      	ldr	r1, [pc, #340]	@ (800d7d8 <acc_translation_a121_subsweep_translate+0x184>)
 800d682:	2000      	movs	r0, #0
 800d684:	4798      	blx	r3
 800d686:	2500      	movs	r5, #0
 800d688:	4628      	mov	r0, r5
 800d68a:	b00c      	add	sp, #48	@ 0x30
 800d68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d690:	461c      	mov	r4, r3
 800d692:	7b73      	ldrb	r3, [r6, #13]
 800d694:	4690      	mov	r8, r2
 800d696:	b97b      	cbnz	r3, 800d6b8 <acc_translation_a121_subsweep_translate+0x64>
 800d698:	7bf0      	ldrb	r0, [r6, #15]
 800d69a:	7bb5      	ldrb	r5, [r6, #14]
 800d69c:	2d00      	cmp	r5, #0
 800d69e:	d12d      	bne.n	800d6fc <acc_translation_a121_subsweep_translate+0xa8>
 800d6a0:	2801      	cmp	r0, #1
 800d6a2:	d00f      	beq.n	800d6c4 <acc_translation_a121_subsweep_translate+0x70>
 800d6a4:	4b4a      	ldr	r3, [pc, #296]	@ (800d7d0 <acc_translation_a121_subsweep_translate+0x17c>)
 800d6a6:	4a4d      	ldr	r2, [pc, #308]	@ (800d7dc <acc_translation_a121_subsweep_translate+0x188>)
 800d6a8:	691b      	ldr	r3, [r3, #16]
 800d6aa:	494b      	ldr	r1, [pc, #300]	@ (800d7d8 <acc_translation_a121_subsweep_translate+0x184>)
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	4798      	blx	r3
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	b00c      	add	sp, #48	@ 0x30
 800d6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b8:	7bf0      	ldrb	r0, [r6, #15]
 800d6ba:	2802      	cmp	r0, #2
 800d6bc:	d1ed      	bne.n	800d69a <acc_translation_a121_subsweep_translate+0x46>
 800d6be:	4b44      	ldr	r3, [pc, #272]	@ (800d7d0 <acc_translation_a121_subsweep_translate+0x17c>)
 800d6c0:	4a47      	ldr	r2, [pc, #284]	@ (800d7e0 <acc_translation_a121_subsweep_translate+0x18c>)
 800d6c2:	e7dc      	b.n	800d67e <acc_translation_a121_subsweep_translate+0x2a>
 800d6c4:	4b47      	ldr	r3, [pc, #284]	@ (800d7e4 <acc_translation_a121_subsweep_translate+0x190>)
 800d6c6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d6c8:	9200      	str	r2, [sp, #0]
 800d6ca:	4631      	mov	r1, r6
 800d6cc:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800d6d0:	4638      	mov	r0, r7
 800d6d2:	4623      	mov	r3, r4
 800d6d4:	f7ff fd72 	bl	800d1bc <acc_translation_a121_set_range_params>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d0d4      	beq.n	800d686 <acc_translation_a121_subsweep_translate+0x32>
 800d6dc:	4622      	mov	r2, r4
 800d6de:	4641      	mov	r1, r8
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f7ff fd1f 	bl	800d124 <acc_translation_a121_set_gain_params>
 800d6e6:	4605      	mov	r5, r0
 800d6e8:	b978      	cbnz	r0, 800d70a <acc_translation_a121_subsweep_translate+0xb6>
 800d6ea:	4b39      	ldr	r3, [pc, #228]	@ (800d7d0 <acc_translation_a121_subsweep_translate+0x17c>)
 800d6ec:	4a3e      	ldr	r2, [pc, #248]	@ (800d7e8 <acc_translation_a121_subsweep_translate+0x194>)
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	4939      	ldr	r1, [pc, #228]	@ (800d7d8 <acc_translation_a121_subsweep_translate+0x184>)
 800d6f2:	4798      	blx	r3
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	b00c      	add	sp, #48	@ 0x30
 800d6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6fc:	1e45      	subs	r5, r0, #1
 800d6fe:	b2ed      	uxtb	r5, r5
 800d700:	2d04      	cmp	r5, #4
 800d702:	d9df      	bls.n	800d6c4 <acc_translation_a121_subsweep_translate+0x70>
 800d704:	4b32      	ldr	r3, [pc, #200]	@ (800d7d0 <acc_translation_a121_subsweep_translate+0x17c>)
 800d706:	4a39      	ldr	r2, [pc, #228]	@ (800d7ec <acc_translation_a121_subsweep_translate+0x198>)
 800d708:	e7b9      	b.n	800d67e <acc_translation_a121_subsweep_translate+0x2a>
 800d70a:	7bf0      	ldrb	r0, [r6, #15]
 800d70c:	aa04      	add	r2, sp, #16
 800d70e:	4641      	mov	r1, r8
 800d710:	f7ff fc58 	bl	800cfc4 <acc_translation_a121_profile_to_pulse_params>
 800d714:	4605      	mov	r5, r0
 800d716:	b970      	cbnz	r0, 800d736 <acc_translation_a121_subsweep_translate+0xe2>
 800d718:	4b2d      	ldr	r3, [pc, #180]	@ (800d7d0 <acc_translation_a121_subsweep_translate+0x17c>)
 800d71a:	4a34      	ldr	r2, [pc, #208]	@ (800d7ec <acc_translation_a121_subsweep_translate+0x198>)
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	492e      	ldr	r1, [pc, #184]	@ (800d7d8 <acc_translation_a121_subsweep_translate+0x184>)
 800d720:	4798      	blx	r3
 800d722:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800d726:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800d72a:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800d72c:	4628      	mov	r0, r5
 800d72e:	8523      	strh	r3, [r4, #40]	@ 0x28
 800d730:	b00c      	add	sp, #48	@ 0x30
 800d732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d736:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800d73a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800d73e:	8562      	strh	r2, [r4, #42]	@ 0x2a
 800d740:	8523      	strh	r3, [r4, #40]	@ 0x28
 800d742:	f104 0108 	add.w	r1, r4, #8
 800d746:	a804      	add	r0, sp, #16
 800d748:	f7ff fd0e 	bl	800d168 <acc_translation_a121_set_pulse_length_params>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d09a      	beq.n	800d686 <acc_translation_a121_subsweep_translate+0x32>
 800d750:	f104 0214 	add.w	r2, r4, #20
 800d754:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800d758:	9203      	str	r2, [sp, #12]
 800d75a:	4611      	mov	r1, r2
 800d75c:	a804      	add	r0, sp, #16
 800d75e:	9308      	str	r3, [sp, #32]
 800d760:	f000 fdd0 	bl	800e304 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 800d764:	9a03      	ldr	r2, [sp, #12]
 800d766:	4605      	mov	r5, r0
 800d768:	b940      	cbnz	r0, 800d77c <acc_translation_a121_subsweep_translate+0x128>
 800d76a:	4b19      	ldr	r3, [pc, #100]	@ (800d7d0 <acc_translation_a121_subsweep_translate+0x17c>)
 800d76c:	4a20      	ldr	r2, [pc, #128]	@ (800d7f0 <acc_translation_a121_subsweep_translate+0x19c>)
 800d76e:	691b      	ldr	r3, [r3, #16]
 800d770:	4919      	ldr	r1, [pc, #100]	@ (800d7d8 <acc_translation_a121_subsweep_translate+0x184>)
 800d772:	4798      	blx	r3
 800d774:	4628      	mov	r0, r5
 800d776:	b00c      	add	sp, #48	@ 0x30
 800d778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d77c:	f1b8 0f00 	cmp.w	r8, #0
 800d780:	d00f      	beq.n	800d7a2 <acc_translation_a121_subsweep_translate+0x14e>
 800d782:	f108 015c 	add.w	r1, r8, #92	@ 0x5c
 800d786:	a804      	add	r0, sp, #16
 800d788:	f000 fcb6 	bl	800e0f8 <acc_translation_pulseshaper_calc_settings>
 800d78c:	b948      	cbnz	r0, 800d7a2 <acc_translation_a121_subsweep_translate+0x14e>
 800d78e:	4910      	ldr	r1, [pc, #64]	@ (800d7d0 <acc_translation_a121_subsweep_translate+0x17c>)
 800d790:	4a18      	ldr	r2, [pc, #96]	@ (800d7f4 <acc_translation_a121_subsweep_translate+0x1a0>)
 800d792:	690c      	ldr	r4, [r1, #16]
 800d794:	4910      	ldr	r1, [pc, #64]	@ (800d7d8 <acc_translation_a121_subsweep_translate+0x184>)
 800d796:	4605      	mov	r5, r0
 800d798:	47a0      	blx	r4
 800d79a:	4628      	mov	r0, r5
 800d79c:	b00c      	add	sp, #48	@ 0x30
 800d79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7a2:	8933      	ldrh	r3, [r6, #8]
 800d7a4:	7af2      	ldrb	r2, [r6, #11]
 800d7a6:	8622      	strh	r2, [r4, #48]	@ 0x30
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d00c      	beq.n	800d7c6 <acc_translation_a121_subsweep_translate+0x172>
 800d7ac:	3b02      	subs	r3, #2
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800d7b2:	85e2      	strh	r2, [r4, #46]	@ 0x2e
 800d7b4:	7b73      	ldrb	r3, [r6, #13]
 800d7b6:	80e3      	strh	r3, [r4, #6]
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	f083 0301 	eor.w	r3, r3, #1
 800d7be:	8663      	strh	r3, [r4, #50]	@ 0x32
 800d7c0:	b00c      	add	sp, #48	@ 0x30
 800d7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800d7ca:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800d7cc:	e7f2      	b.n	800d7b4 <acc_translation_a121_subsweep_translate+0x160>
 800d7ce:	bf00      	nop
 800d7d0:	2000069c 	.word	0x2000069c
 800d7d4:	08013e78 	.word	0x08013e78
 800d7d8:	08013d98 	.word	0x08013d98
 800d7dc:	08013eb4 	.word	0x08013eb4
 800d7e0:	08013e88 	.word	0x08013e88
 800d7e4:	080140a8 	.word	0x080140a8
 800d7e8:	08013eec 	.word	0x08013eec
 800d7ec:	08013edc 	.word	0x08013edc
 800d7f0:	08013f04 	.word	0x08013f04
 800d7f4:	08013f24 	.word	0x08013f24

0800d7f8 <acc_translation_a121_point_to_coarse>:
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	db04      	blt.n	800d806 <acc_translation_a121_point_to_coarse+0xe>
 800d7fc:	b209      	sxth	r1, r1
 800d7fe:	fb90 f0f1 	sdiv	r0, r0, r1
 800d802:	b200      	sxth	r0, r0
 800d804:	4770      	bx	lr
 800d806:	43c3      	mvns	r3, r0
 800d808:	b208      	sxth	r0, r1
 800d80a:	fb93 f0f0 	sdiv	r0, r3, r0
 800d80e:	43c0      	mvns	r0, r0
 800d810:	b200      	sxth	r0, r0
 800d812:	4770      	bx	lr

0800d814 <acc_translation_a121_point_in_coarse>:
 800d814:	fb90 f3f1 	sdiv	r3, r0, r1
 800d818:	fb03 0011 	mls	r0, r3, r1, r0
 800d81c:	0403      	lsls	r3, r0, #16
 800d81e:	bf48      	it	mi
 800d820:	1840      	addmi	r0, r0, r1
 800d822:	b280      	uxth	r0, r0
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop

0800d828 <acc_translation_a121_calculate_minimum_sweep_period>:
 800d828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d82c:	f8b1 31ac 	ldrh.w	r3, [r1, #428]	@ 0x1ac
 800d830:	f8b1 11a4 	ldrh.w	r1, [r1, #420]	@ 0x1a4
 800d834:	ed2d 8b0a 	vpush	{d8-d12}
 800d838:	2b01      	cmp	r3, #1
 800d83a:	b088      	sub	sp, #32
 800d83c:	4680      	mov	r8, r0
 800d83e:	4617      	mov	r7, r2
 800d840:	f000 80b9 	beq.w	800d9b6 <acc_translation_a121_calculate_minimum_sweep_period+0x18e>
 800d844:	ee07 1a90 	vmov	s15, r1
 800d848:	eddf 9a5f 	vldr	s19, [pc, #380]	@ 800d9c8 <acc_translation_a121_calculate_minimum_sweep_period+0x1a0>
 800d84c:	eef8 aa67 	vcvt.f32.u32	s21, s15
 800d850:	eeb7 9a08 	vmov.f32	s18, #120	@ 0x3fc00000  1.5
 800d854:	eef2 ca02 	vmov.f32	s25, #34	@ 0x41100000  9.0
 800d858:	f7ff fb82 	bl	800cf60 <get_pll_freq>
 800d85c:	f898 3050 	ldrb.w	r3, [r8, #80]	@ 0x50
 800d860:	2b02      	cmp	r3, #2
 800d862:	eef0 8a40 	vmov.f32	s17, s0
 800d866:	f200 8099 	bhi.w	800d99c <acc_translation_a121_calculate_minimum_sweep_period+0x174>
 800d86a:	4958      	ldr	r1, [pc, #352]	@ (800d9cc <acc_translation_a121_calculate_minimum_sweep_period+0x1a4>)
 800d86c:	4a58      	ldr	r2, [pc, #352]	@ (800d9d0 <acc_translation_a121_calculate_minimum_sweep_period+0x1a8>)
 800d86e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800d872:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d876:	edd1 ba00 	vldr	s23, [r1]
 800d87a:	ed93 ca00 	vldr	s24, [r3]
 800d87e:	f04f 0901 	mov.w	r9, #1
 800d882:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 800d886:	2b00      	cmp	r3, #0
 800d888:	d068      	beq.n	800d95c <acc_translation_a121_calculate_minimum_sweep_period+0x134>
 800d88a:	2500      	movs	r5, #0
 800d88c:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 800d9d4 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800d890:	4e51      	ldr	r6, [pc, #324]	@ (800d9d8 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 800d892:	ed9f ba52 	vldr	s22, [pc, #328]	@ 800d9dc <acc_translation_a121_calculate_minimum_sweep_period+0x1b4>
 800d896:	ed9f aa52 	vldr	s20, [pc, #328]	@ 800d9e0 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 800d89a:	462c      	mov	r4, r5
 800d89c:	e03d      	b.n	800d91a <acc_translation_a121_calculate_minimum_sweep_period+0xf2>
 800d89e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8a2:	ee07 3a90 	vmov	s15, r3
 800d8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8aa:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 800d8ae:	4444      	add	r4, r8
 800d8b0:	f10a 0302 	add.w	r3, sl, #2
 800d8b4:	8920      	ldrh	r0, [r4, #8]
 800d8b6:	88a1      	ldrh	r1, [r4, #4]
 800d8b8:	f898 204e 	ldrb.w	r2, [r8, #78]	@ 0x4e
 800d8bc:	005b      	lsls	r3, r3, #1
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	fb00 3303 	mla	r3, r0, r3, r3
 800d8c4:	3302      	adds	r3, #2
 800d8c6:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 800d8ca:	005b      	lsls	r3, r3, #1
 800d8cc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	ee87 6a0a 	vdiv.f32	s12, s14, s20
 800d8d6:	f10a 0a18 	add.w	sl, sl, #24
 800d8da:	fa1f fa8a 	uxth.w	sl, sl
 800d8de:	3501      	adds	r5, #1
 800d8e0:	b2ec      	uxtb	r4, r5
 800d8e2:	42a2      	cmp	r2, r4
 800d8e4:	ee07 3a90 	vmov	s15, r3
 800d8e8:	ee07 aa10 	vmov	s14, sl
 800d8ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d8f4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800d8f8:	eec7 5a06 	vdiv.f32	s11, s14, s12
 800d8fc:	ee07 1a90 	vmov	s15, r1
 800d900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d908:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800d90c:	ee77 7aa9 	vadd.f32	s15, s15, s19
 800d910:	ee77 7a89 	vadd.f32	s15, s15, s18
 800d914:	ee38 8a27 	vadd.f32	s16, s16, s15
 800d918:	d922      	bls.n	800d960 <acc_translation_a121_calculate_minimum_sweep_period+0x138>
 800d91a:	eb08 1304 	add.w	r3, r8, r4, lsl #4
 800d91e:	466a      	mov	r2, sp
 800d920:	2100      	movs	r1, #0
 800d922:	7bd8      	ldrb	r0, [r3, #15]
 800d924:	f7ff fb4e 	bl	800cfc4 <acc_translation_a121_profile_to_pulse_params>
 800d928:	0124      	lsls	r4, r4, #4
 800d92a:	4a2e      	ldr	r2, [pc, #184]	@ (800d9e4 <acc_translation_a121_calculate_minimum_sweep_period+0x1bc>)
 800d92c:	492e      	ldr	r1, [pc, #184]	@ (800d9e8 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800d92e:	4682      	mov	sl, r0
 800d930:	b910      	cbnz	r0, 800d938 <acc_translation_a121_calculate_minimum_sweep_period+0x110>
 800d932:	6933      	ldr	r3, [r6, #16]
 800d934:	4798      	blx	r3
 800d936:	46d1      	mov	r9, sl
 800d938:	eb08 0304 	add.w	r3, r8, r4
 800d93c:	4a2b      	ldr	r2, [pc, #172]	@ (800d9ec <acc_translation_a121_calculate_minimum_sweep_period+0x1c4>)
 800d93e:	7b9b      	ldrb	r3, [r3, #14]
 800d940:	f8bd a01e 	ldrh.w	sl, [sp, #30]
 800d944:	2b05      	cmp	r3, #5
 800d946:	d9aa      	bls.n	800d89e <acc_translation_a121_calculate_minimum_sweep_period+0x76>
 800d948:	6933      	ldr	r3, [r6, #16]
 800d94a:	4a29      	ldr	r2, [pc, #164]	@ (800d9f0 <acc_translation_a121_calculate_minimum_sweep_period+0x1c8>)
 800d94c:	4926      	ldr	r1, [pc, #152]	@ (800d9e8 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800d94e:	2000      	movs	r0, #0
 800d950:	4798      	blx	r3
 800d952:	f04f 0900 	mov.w	r9, #0
 800d956:	eef0 7a4b 	vmov.f32	s15, s22
 800d95a:	e7a6      	b.n	800d8aa <acc_translation_a121_calculate_minimum_sweep_period+0x82>
 800d95c:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 800d9d4 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800d960:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800d9f4 <acc_translation_a121_calculate_minimum_sweep_period+0x1cc>
 800d964:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d9e0 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 800d968:	ee88 6aa7 	vdiv.f32	s12, s17, s15
 800d96c:	4648      	mov	r0, r9
 800d96e:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 800d972:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d976:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800d97a:	ee7b ba8c 	vadd.f32	s23, s23, s24
 800d97e:	eeca 7a87 	vdiv.f32	s15, s21, s14
 800d982:	ee77 caac 	vadd.f32	s25, s15, s25
 800d986:	ee3c 8a88 	vadd.f32	s16, s25, s16
 800d98a:	ee78 ba2b 	vadd.f32	s23, s16, s23
 800d98e:	edc7 ba00 	vstr	s23, [r7]
 800d992:	b008      	add	sp, #32
 800d994:	ecbd 8b0a 	vpop	{d8-d12}
 800d998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d99c:	4b0e      	ldr	r3, [pc, #56]	@ (800d9d8 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 800d99e:	ed9f ca0d 	vldr	s24, [pc, #52]	@ 800d9d4 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800d9a2:	4a15      	ldr	r2, [pc, #84]	@ (800d9f8 <acc_translation_a121_calculate_minimum_sweep_period+0x1d0>)
 800d9a4:	691b      	ldr	r3, [r3, #16]
 800d9a6:	4910      	ldr	r1, [pc, #64]	@ (800d9e8 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	4798      	blx	r3
 800d9ac:	eef0 ba4c 	vmov.f32	s23, s24
 800d9b0:	f04f 0900 	mov.w	r9, #0
 800d9b4:	e765      	b.n	800d882 <acc_translation_a121_calculate_minimum_sweep_period+0x5a>
 800d9b6:	ed9f 9a07 	vldr	s18, [pc, #28]	@ 800d9d4 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 800d9ba:	eef0 9a49 	vmov.f32	s19, s18
 800d9be:	eef0 ca49 	vmov.f32	s25, s18
 800d9c2:	eef0 aa49 	vmov.f32	s21, s18
 800d9c6:	e747      	b.n	800d858 <acc_translation_a121_calculate_minimum_sweep_period+0x30>
 800d9c8:	419d999a 	.word	0x419d999a
 800d9cc:	080140bc 	.word	0x080140bc
 800d9d0:	080140c8 	.word	0x080140c8
 800d9d4:	00000000 	.word	0x00000000
 800d9d8:	2000069c 	.word	0x2000069c
 800d9dc:	43000000 	.word	0x43000000
 800d9e0:	49742400 	.word	0x49742400
 800d9e4:	08013edc 	.word	0x08013edc
 800d9e8:	08013d98 	.word	0x08013d98
 800d9ec:	0801409c 	.word	0x0801409c
 800d9f0:	08013e34 	.word	0x08013e34
 800d9f4:	43200000 	.word	0x43200000
 800d9f8:	08013f50 	.word	0x08013f50

0800d9fc <acc_translation_a121_translate>:
 800d9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da00:	ed2d 8b06 	vpush	{d8-d10}
 800da04:	4605      	mov	r5, r0
 800da06:	b091      	sub	sp, #68	@ 0x44
 800da08:	f890 004e 	ldrb.w	r0, [r0, #78]	@ 0x4e
 800da0c:	f895 404c 	ldrb.w	r4, [r5, #76]	@ 0x4c
 800da10:	9408      	str	r4, [sp, #32]
 800da12:	2804      	cmp	r0, #4
 800da14:	f8b5 4048 	ldrh.w	r4, [r5, #72]	@ 0x48
 800da18:	9406      	str	r4, [sp, #24]
 800da1a:	468b      	mov	fp, r1
 800da1c:	4614      	mov	r4, r2
 800da1e:	4698      	mov	r8, r3
 800da20:	f200 8128 	bhi.w	800dc74 <acc_translation_a121_translate+0x278>
 800da24:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 800da28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da30:	f100 8169 	bmi.w	800dd06 <acc_translation_a121_translate+0x30a>
 800da34:	f895 3056 	ldrb.w	r3, [r5, #86]	@ 0x56
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f040 81a5 	bne.w	800dd88 <acc_translation_a121_translate+0x38c>
 800da3e:	f7fe fa95 	bl	800bf6c <acc_rss_integration_get_sensor_reference_frequency>
 800da42:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800da46:	ee07 0a10 	vmov	s14, r0
 800da4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da52:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 800da56:	f340 81d4 	ble.w	800de02 <acc_translation_a121_translate+0x406>
 800da5a:	eec8 8a27 	vdiv.f32	s17, s16, s15
 800da5e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800da62:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800da66:	f100 81e3 	bmi.w	800de30 <acc_translation_a121_translate+0x434>
 800da6a:	ee18 0a90 	vmov	r0, s17
 800da6e:	f7f3 f805 	bl	8000a7c <__aeabi_f2ulz>
 800da72:	2901      	cmp	r1, #1
 800da74:	bf08      	it	eq
 800da76:	2800      	cmpeq	r0, #0
 800da78:	f080 81da 	bcs.w	800de30 <acc_translation_a121_translate+0x434>
 800da7c:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800da80:	2b00      	cmp	r3, #0
 800da82:	f000 81a9 	beq.w	800ddd8 <acc_translation_a121_translate+0x3dc>
 800da86:	4bc9      	ldr	r3, [pc, #804]	@ (800ddac <acc_translation_a121_translate+0x3b0>)
 800da88:	4ac9      	ldr	r2, [pc, #804]	@ (800ddb0 <acc_translation_a121_translate+0x3b4>)
 800da8a:	691b      	ldr	r3, [r3, #16]
 800da8c:	49c9      	ldr	r1, [pc, #804]	@ (800ddb4 <acc_translation_a121_translate+0x3b8>)
 800da8e:	2000      	movs	r0, #0
 800da90:	4798      	blx	r3
 800da92:	9b06      	ldr	r3, [sp, #24]
 800da94:	2b00      	cmp	r3, #0
 800da96:	f000 810a 	beq.w	800dcae <acc_translation_a121_translate+0x2b2>
 800da9a:	f895 304e 	ldrb.w	r3, [r5, #78]	@ 0x4e
 800da9e:	9304      	str	r3, [sp, #16]
 800daa0:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 8108 	beq.w	800dcba <acc_translation_a121_translate+0x2be>
 800daaa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800daac:	2300      	movs	r3, #0
 800daae:	7113      	strb	r3, [r2, #4]
 800dab0:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800dab4:	f1bb 0f00 	cmp.w	fp, #0
 800dab8:	f000 82da 	beq.w	800e070 <acc_translation_a121_translate+0x674>
 800dabc:	4658      	mov	r0, fp
 800dabe:	4621      	mov	r1, r4
 800dac0:	f7ff faf6 	bl	800d0b0 <acc_translation_a121_set_calibration_params>
 800dac4:	2200      	movs	r2, #0
 800dac6:	2301      	movs	r3, #1
 800dac8:	4617      	mov	r7, r2
 800daca:	f8a8 2002 	strh.w	r2, [r8, #2]
 800dace:	9202      	str	r2, [sp, #8]
 800dad0:	4610      	mov	r0, r2
 800dad2:	f8a8 300a 	strh.w	r3, [r8, #10]
 800dad6:	f04f 0c02 	mov.w	ip, #2
 800dada:	f8b4 11ac 	ldrh.w	r1, [r4, #428]	@ 0x1ac
 800dade:	2901      	cmp	r1, #1
 800dae0:	d104      	bne.n	800daec <acc_translation_a121_translate+0xf0>
 800dae2:	9902      	ldr	r1, [sp, #8]
 800dae4:	9e06      	ldr	r6, [sp, #24]
 800dae6:	fb06 f101 	mul.w	r1, r6, r1
 800daea:	9102      	str	r1, [sp, #8]
 800daec:	f8b5 1054 	ldrh.w	r1, [r5, #84]	@ 0x54
 800daf0:	f895 e052 	ldrb.w	lr, [r5, #82]	@ 0x52
 800daf4:	f895 9053 	ldrb.w	r9, [r5, #83]	@ 0x53
 800daf8:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800dafc:	f8a4 e19e 	strh.w	lr, [r4, #414]	@ 0x19e
 800db00:	ea4f 0a51 	mov.w	sl, r1, lsr #1
 800db04:	3903      	subs	r1, #3
 800db06:	9103      	str	r1, [sp, #12]
 800db08:	9902      	ldr	r1, [sp, #8]
 800db0a:	f8a4 71a0 	strh.w	r7, [r4, #416]	@ 0x1a0
 800db0e:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 800db12:	4571      	cmp	r1, lr
 800db14:	bf28      	it	cs
 800db16:	4671      	movcs	r1, lr
 800db18:	468e      	mov	lr, r1
 800db1a:	f1aa 0a03 	sub.w	sl, sl, #3
 800db1e:	9903      	ldr	r1, [sp, #12]
 800db20:	f8a4 a1aa 	strh.w	sl, [r4, #426]	@ 0x1aa
 800db24:	f089 0901 	eor.w	r9, r9, #1
 800db28:	f8a4 91a6 	strh.w	r9, [r4, #422]	@ 0x1a6
 800db2c:	f8a4 11a8 	strh.w	r1, [r4, #424]	@ 0x1a8
 800db30:	f8a4 e1a4 	strh.w	lr, [r4, #420]	@ 0x1a4
 800db34:	f8a8 200c 	strh.w	r2, [r8, #12]
 800db38:	f8a8 3004 	strh.w	r3, [r8, #4]
 800db3c:	f8a8 c006 	strh.w	ip, [r8, #6]
 800db40:	2e00      	cmp	r6, #0
 800db42:	f000 811c 	beq.w	800dd7e <acc_translation_a121_translate+0x382>
 800db46:	3341      	adds	r3, #65	@ 0x41
 800db48:	2240      	movs	r2, #64	@ 0x40
 800db4a:	f8a8 3000 	strh.w	r3, [r8]
 800db4e:	f8a8 2008 	strh.w	r2, [r8, #8]
 800db52:	2601      	movs	r6, #1
 800db54:	f8a4 61c0 	strh.w	r6, [r4, #448]	@ 0x1c0
 800db58:	f1bb 0f00 	cmp.w	fp, #0
 800db5c:	d003      	beq.n	800db66 <acc_translation_a121_translate+0x16a>
 800db5e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800db62:	f8a4 31c2 	strh.w	r3, [r4, #450]	@ 0x1c2
 800db66:	2800      	cmp	r0, #0
 800db68:	f040 80e5 	bne.w	800dd36 <acc_translation_a121_translate+0x33a>
 800db6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800db6e:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800db72:	2300      	movs	r3, #0
 800db74:	6013      	str	r3, [r2, #0]
 800db76:	9b08      	ldr	r3, [sp, #32]
 800db78:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 800db7c:	9b06      	ldr	r3, [sp, #24]
 800db7e:	2b01      	cmp	r3, #1
 800db80:	f240 80f7 	bls.w	800dd72 <acc_translation_a121_translate+0x376>
 800db84:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 800db88:	2201      	movs	r2, #1
 800db8a:	3b02      	subs	r3, #2
 800db8c:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 800db90:	f8a4 21b0 	strh.w	r2, [r4, #432]	@ 0x1b0
 800db94:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800ddb8 <acc_translation_a121_translate+0x3bc>
 800db98:	ed9f 6a88 	vldr	s12, [pc, #544]	@ 800ddbc <acc_translation_a121_translate+0x3c0>
 800db9c:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 800dba0:	ee28 7a07 	vmul.f32	s14, s16, s14
 800dba4:	ee68 7a27 	vmul.f32	s15, s16, s15
 800dba8:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800dbac:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800dbb0:	eec8 7a06 	vdiv.f32	s15, s16, s12
 800dbb4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800dbb8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800dbbc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800dbc0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800dbc4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800dbc8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800dbcc:	ee17 2a10 	vmov	r2, s14
 800dbd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbd4:	ee16 3a90 	vmov	r3, s13
 800dbd8:	eef5 5a40 	vcmp.f32	s11, #0.0
 800dbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbe0:	f8a4 21b6 	strh.w	r2, [r4, #438]	@ 0x1b6
 800dbe4:	ee17 2a90 	vmov	r2, s15
 800dbe8:	f8a4 31b8 	strh.w	r3, [r4, #440]	@ 0x1b8
 800dbec:	bf14      	ite	ne
 800dbee:	2301      	movne	r3, #1
 800dbf0:	2300      	moveq	r3, #0
 800dbf2:	f8a4 21b4 	strh.w	r2, [r4, #436]	@ 0x1b4
 800dbf6:	8723      	strh	r3, [r4, #56]	@ 0x38
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	f000 808b 	beq.w	800dd14 <acc_translation_a121_translate+0x318>
 800dbfe:	eef5 5a40 	vcmp.f32	s11, #0.0
 800dc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc06:	d00a      	beq.n	800dc1e <acc_translation_a121_translate+0x222>
 800dc08:	eec8 7a25 	vdiv.f32	s15, s16, s11
 800dc0c:	ee37 6a86 	vadd.f32	s12, s15, s12
 800dc10:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 800dc14:	ee17 3a90 	vmov	r3, s15
 800dc18:	0c1a      	lsrs	r2, r3, #16
 800dc1a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 800dc1c:	8762      	strh	r2, [r4, #58]	@ 0x3a
 800dc1e:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800dc22:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800dc26:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800dc2a:	8623      	strh	r3, [r4, #48]	@ 0x30
 800dc2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc34:	bf14      	ite	ne
 800dc36:	2301      	movne	r3, #1
 800dc38:	2300      	moveq	r3, #0
 800dc3a:	8662      	strh	r2, [r4, #50]	@ 0x32
 800dc3c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800dc3e:	d006      	beq.n	800dc4e <acc_translation_a121_translate+0x252>
 800dc40:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800dc44:	ee17 3a90 	vmov	r3, s15
 800dc48:	0c1a      	lsrs	r2, r3, #16
 800dc4a:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 800dc4c:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 800dc4e:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 800dc52:	f8a4 31be 	strh.w	r3, [r4, #446]	@ 0x1be
 800dc56:	2101      	movs	r1, #1
 800dc58:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800dc5c:	f640 0301 	movw	r3, #2049	@ 0x801
 800dc60:	84a1      	strh	r1, [r4, #36]	@ 0x24
 800dc62:	f8a4 21ba 	strh.w	r2, [r4, #442]	@ 0x1ba
 800dc66:	f8a4 31bc 	strh.w	r3, [r4, #444]	@ 0x1bc
 800dc6a:	b011      	add	sp, #68	@ 0x44
 800dc6c:	ecbd 8b06 	vpop	{d8-d10}
 800dc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc74:	4b4d      	ldr	r3, [pc, #308]	@ (800ddac <acc_translation_a121_translate+0x3b0>)
 800dc76:	4a52      	ldr	r2, [pc, #328]	@ (800ddc0 <acc_translation_a121_translate+0x3c4>)
 800dc78:	691b      	ldr	r3, [r3, #16]
 800dc7a:	494e      	ldr	r1, [pc, #312]	@ (800ddb4 <acc_translation_a121_translate+0x3b8>)
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	4798      	blx	r3
 800dc80:	f7fe f974 	bl	800bf6c <acc_rss_integration_get_sensor_reference_frequency>
 800dc84:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800dc88:	ee07 0a10 	vmov	s14, r0
 800dc8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc94:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 800dc98:	dd32      	ble.n	800dd00 <acc_translation_a121_translate+0x304>
 800dc9a:	eec8 8a27 	vdiv.f32	s17, s16, s15
 800dc9e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dca2:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800dca6:	9b06      	ldr	r3, [sp, #24]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	f47f aef6 	bne.w	800da9a <acc_translation_a121_translate+0x9e>
 800dcae:	9304      	str	r3, [sp, #16]
 800dcb0:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f47f aef8 	bne.w	800daaa <acc_translation_a121_translate+0xae>
 800dcba:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800dcbe:	2a02      	cmp	r2, #2
 800dcc0:	f040 80ef 	bne.w	800dea2 <acc_translation_a121_translate+0x4a6>
 800dcc4:	f895 204e 	ldrb.w	r2, [r5, #78]	@ 0x4e
 800dcc8:	2a01      	cmp	r2, #1
 800dcca:	d069      	beq.n	800dda0 <acc_translation_a121_translate+0x3a4>
 800dccc:	2200      	movs	r2, #0
 800dcce:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800dcd0:	7102      	strb	r2, [r0, #4]
 800dcd2:	f8a4 21ac 	strh.w	r2, [r4, #428]	@ 0x1ac
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f43f aeec 	beq.w	800dab4 <acc_translation_a121_translate+0xb8>
 800dcdc:	f895 304f 	ldrb.w	r3, [r5, #79]	@ 0x4f
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	f000 814f 	beq.w	800df84 <acc_translation_a121_translate+0x588>
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	f000 80f3 	beq.w	800ded2 <acc_translation_a121_translate+0x4d6>
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	f000 80dd 	beq.w	800deac <acc_translation_a121_translate+0x4b0>
 800dcf2:	4b2e      	ldr	r3, [pc, #184]	@ (800ddac <acc_translation_a121_translate+0x3b0>)
 800dcf4:	4a33      	ldr	r2, [pc, #204]	@ (800ddc4 <acc_translation_a121_translate+0x3c8>)
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	492e      	ldr	r1, [pc, #184]	@ (800ddb4 <acc_translation_a121_translate+0x3b8>)
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	4798      	blx	r3
 800dcfe:	e6d9      	b.n	800dab4 <acc_translation_a121_translate+0xb8>
 800dd00:	eddf 8a33 	vldr	s17, [pc, #204]	@ 800ddd0 <acc_translation_a121_translate+0x3d4>
 800dd04:	e7cf      	b.n	800dca6 <acc_translation_a121_translate+0x2aa>
 800dd06:	4b29      	ldr	r3, [pc, #164]	@ (800ddac <acc_translation_a121_translate+0x3b0>)
 800dd08:	4a2f      	ldr	r2, [pc, #188]	@ (800ddc8 <acc_translation_a121_translate+0x3cc>)
 800dd0a:	691b      	ldr	r3, [r3, #16]
 800dd0c:	4929      	ldr	r1, [pc, #164]	@ (800ddb4 <acc_translation_a121_translate+0x3b8>)
 800dd0e:	2000      	movs	r0, #0
 800dd10:	4798      	blx	r3
 800dd12:	e7b5      	b.n	800dc80 <acc_translation_a121_translate+0x284>
 800dd14:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 800dd18:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800dd1c:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 800dd20:	8623      	strh	r3, [r4, #48]	@ 0x30
 800dd22:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd2a:	bf14      	ite	ne
 800dd2c:	2301      	movne	r3, #1
 800dd2e:	2300      	moveq	r3, #0
 800dd30:	8662      	strh	r2, [r4, #50]	@ 0x32
 800dd32:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800dd34:	e78b      	b.n	800dc4e <acc_translation_a121_translate+0x252>
 800dd36:	f895 304d 	ldrb.w	r3, [r5, #77]	@ 0x4d
 800dd3a:	2600      	movs	r6, #0
 800dd3c:	a80b      	add	r0, sp, #44	@ 0x2c
 800dd3e:	f504 71d1 	add.w	r1, r4, #418	@ 0x1a2
 800dd42:	e9cd 630e 	strd	r6, r3, [sp, #56]	@ 0x38
 800dd46:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 800dd4a:	f88d 602c 	strb.w	r6, [sp, #44]	@ 0x2c
 800dd4e:	f000 fad9 	bl	800e304 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 800dd52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dd54:	2300      	movs	r3, #0
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	b110      	cbz	r0, 800dd60 <acc_translation_a121_translate+0x364>
 800dd5a:	9b04      	ldr	r3, [sp, #16]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d16e      	bne.n	800de3e <acc_translation_a121_translate+0x442>
 800dd60:	9b08      	ldr	r3, [sp, #32]
 800dd62:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800dd66:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 800dd6a:	9b06      	ldr	r3, [sp, #24]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	f63f af09 	bhi.w	800db84 <acc_translation_a121_translate+0x188>
 800dd72:	2300      	movs	r3, #0
 800dd74:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 800dd78:	f8a4 31b0 	strh.w	r3, [r4, #432]	@ 0x1b0
 800dd7c:	e70a      	b.n	800db94 <acc_translation_a121_translate+0x198>
 800dd7e:	f8a8 6008 	strh.w	r6, [r8, #8]
 800dd82:	f8a8 c000 	strh.w	ip, [r8]
 800dd86:	e6e5      	b.n	800db54 <acc_translation_a121_translate+0x158>
 800dd88:	f895 304b 	ldrb.w	r3, [r5, #75]	@ 0x4b
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	f43f ae56 	beq.w	800da3e <acc_translation_a121_translate+0x42>
 800dd92:	4b06      	ldr	r3, [pc, #24]	@ (800ddac <acc_translation_a121_translate+0x3b0>)
 800dd94:	4a0d      	ldr	r2, [pc, #52]	@ (800ddcc <acc_translation_a121_translate+0x3d0>)
 800dd96:	691b      	ldr	r3, [r3, #16]
 800dd98:	4906      	ldr	r1, [pc, #24]	@ (800ddb4 <acc_translation_a121_translate+0x3b8>)
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	4798      	blx	r3
 800dd9e:	e76f      	b.n	800dc80 <acc_translation_a121_translate+0x284>
 800dda0:	7be9      	ldrb	r1, [r5, #15]
 800dda2:	3901      	subs	r1, #1
 800dda4:	2901      	cmp	r1, #1
 800dda6:	d892      	bhi.n	800dcce <acc_translation_a121_translate+0x2d2>
 800dda8:	e790      	b.n	800dccc <acc_translation_a121_translate+0x2d0>
 800ddaa:	bf00      	nop
 800ddac:	2000069c 	.word	0x2000069c
 800ddb0:	08013fe0 	.word	0x08013fe0
 800ddb4:	08013d98 	.word	0x08013d98
 800ddb8:	43960000 	.word	0x43960000
 800ddbc:	49742400 	.word	0x49742400
 800ddc0:	08013f70 	.word	0x08013f70
 800ddc4:	0801405c 	.word	0x0801405c
 800ddc8:	08013f8c 	.word	0x08013f8c
 800ddcc:	08013fa0 	.word	0x08013fa0
 800ddd0:	00000000 	.word	0x00000000
 800ddd4:	ed5f 8a02 	vldr	s17, [pc, #-8]	@ 800ddd0 <acc_translation_a121_translate+0x3d4>
 800ddd8:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 800dddc:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800dde0:	9806      	ldr	r0, [sp, #24]
 800dde2:	2800      	cmp	r0, #0
 800dde4:	f000 8161 	beq.w	800e0aa <acc_translation_a121_translate+0x6ae>
 800dde8:	f895 004e 	ldrb.w	r0, [r5, #78]	@ 0x4e
 800ddec:	9004      	str	r0, [sp, #16]
 800ddee:	4291      	cmp	r1, r2
 800ddf0:	f240 814b 	bls.w	800e08a <acc_translation_a121_translate+0x68e>
 800ddf4:	4bb4      	ldr	r3, [pc, #720]	@ (800e0c8 <acc_translation_a121_translate+0x6cc>)
 800ddf6:	4ab5      	ldr	r2, [pc, #724]	@ (800e0cc <acc_translation_a121_translate+0x6d0>)
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	49b5      	ldr	r1, [pc, #724]	@ (800e0d0 <acc_translation_a121_translate+0x6d4>)
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	4798      	blx	r3
 800de00:	e756      	b.n	800dcb0 <acc_translation_a121_translate+0x2b4>
 800de02:	d413      	bmi.n	800de2c <acc_translation_a121_translate+0x430>
 800de04:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d0e3      	beq.n	800ddd4 <acc_translation_a121_translate+0x3d8>
 800de0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800de10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de14:	d107      	bne.n	800de26 <acc_translation_a121_translate+0x42a>
 800de16:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 800de1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800de1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de22:	f040 811b 	bne.w	800e05c <acc_translation_a121_translate+0x660>
 800de26:	eddf 8aab 	vldr	s17, [pc, #684]	@ 800e0d4 <acc_translation_a121_translate+0x6d8>
 800de2a:	e62c      	b.n	800da86 <acc_translation_a121_translate+0x8a>
 800de2c:	eddf 8aa9 	vldr	s17, [pc, #676]	@ 800e0d4 <acc_translation_a121_translate+0x6d8>
 800de30:	4ba5      	ldr	r3, [pc, #660]	@ (800e0c8 <acc_translation_a121_translate+0x6cc>)
 800de32:	4aa9      	ldr	r2, [pc, #676]	@ (800e0d8 <acc_translation_a121_translate+0x6dc>)
 800de34:	691b      	ldr	r3, [r3, #16]
 800de36:	49a6      	ldr	r1, [pc, #664]	@ (800e0d0 <acc_translation_a121_translate+0x6d4>)
 800de38:	2000      	movs	r0, #0
 800de3a:	4798      	blx	r3
 800de3c:	e733      	b.n	800dca6 <acc_translation_a121_translate+0x2aa>
 800de3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800de40:	4621      	mov	r1, r4
 800de42:	4628      	mov	r0, r5
 800de44:	f7ff fcf0 	bl	800d828 <acc_translation_a121_calculate_minimum_sweep_period>
 800de48:	2800      	cmp	r0, #0
 800de4a:	d089      	beq.n	800dd60 <acc_translation_a121_translate+0x364>
 800de4c:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 800de50:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 800e0dc <acc_translation_a121_translate+0x6e0>
 800de54:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 800e0e0 <acc_translation_a121_translate+0x6e4>
 800de58:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800de5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800de5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de62:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800de66:	ee77 7a86 	vadd.f32	s15, s15, s12
 800de6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de72:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 800de76:	eef4 5ac7 	vcmpe.f32	s11, s14
 800de7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de7e:	ed83 7a00 	vstr	s14, [r3]
 800de82:	f77f ae78 	ble.w	800db76 <acc_translation_a121_translate+0x17a>
 800de86:	4b90      	ldr	r3, [pc, #576]	@ (800e0c8 <acc_translation_a121_translate+0x6cc>)
 800de88:	4a96      	ldr	r2, [pc, #600]	@ (800e0e4 <acc_translation_a121_translate+0x6e8>)
 800de8a:	691f      	ldr	r7, [r3, #16]
 800de8c:	4990      	ldr	r1, [pc, #576]	@ (800e0d0 <acc_translation_a121_translate+0x6d4>)
 800de8e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800de92:	4630      	mov	r0, r6
 800de94:	ee17 3a90 	vmov	r3, s15
 800de98:	47b8      	blx	r7
 800de9a:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 800de9e:	4630      	mov	r0, r6
 800dea0:	e669      	b.n	800db76 <acc_translation_a121_translate+0x17a>
 800dea2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dea4:	7113      	strb	r3, [r2, #4]
 800dea6:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800deaa:	e603      	b.n	800dab4 <acc_translation_a121_translate+0xb8>
 800deac:	2301      	movs	r3, #1
 800deae:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800deb0:	8523      	strh	r3, [r4, #40]	@ 0x28
 800deb2:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d012      	beq.n	800dee0 <acc_translation_a121_translate+0x4e4>
 800deba:	2b02      	cmp	r3, #2
 800debc:	f000 80b7 	beq.w	800e02e <acc_translation_a121_translate+0x632>
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d063      	beq.n	800df8c <acc_translation_a121_translate+0x590>
 800dec4:	4b80      	ldr	r3, [pc, #512]	@ (800e0c8 <acc_translation_a121_translate+0x6cc>)
 800dec6:	4a88      	ldr	r2, [pc, #544]	@ (800e0e8 <acc_translation_a121_translate+0x6ec>)
 800dec8:	691b      	ldr	r3, [r3, #16]
 800deca:	4981      	ldr	r1, [pc, #516]	@ (800e0d0 <acc_translation_a121_translate+0x6d4>)
 800decc:	2000      	movs	r0, #0
 800dece:	4798      	blx	r3
 800ded0:	e5f0      	b.n	800dab4 <acc_translation_a121_translate+0xb8>
 800ded2:	2300      	movs	r3, #0
 800ded4:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800ded6:	8523      	strh	r3, [r4, #40]	@ 0x28
 800ded8:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d1ec      	bne.n	800deba <acc_translation_a121_translate+0x4be>
 800dee0:	2200      	movs	r2, #0
 800dee2:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800dee4:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800dee6:	f1bb 0f00 	cmp.w	fp, #0
 800deea:	f040 80e0 	bne.w	800e0ae <acc_translation_a121_translate+0x6b2>
 800deee:	2301      	movs	r3, #1
 800def0:	f8a8 b002 	strh.w	fp, [r8, #2]
 800def4:	f8a8 b00c 	strh.w	fp, [r8, #12]
 800def8:	f8a8 300a 	strh.w	r3, [r8, #10]
 800defc:	2600      	movs	r6, #0
 800defe:	f104 033e 	add.w	r3, r4, #62	@ 0x3e
 800df02:	ed9f aa7a 	vldr	s20, [pc, #488]	@ 800e0ec <acc_translation_a121_translate+0x6f0>
 800df06:	eddf aa7a 	vldr	s21, [pc, #488]	@ 800e0f0 <acc_translation_a121_translate+0x6f4>
 800df0a:	eddf 9a72 	vldr	s19, [pc, #456]	@ 800e0d4 <acc_translation_a121_translate+0x6d8>
 800df0e:	ed9f 9a79 	vldr	s18, [pc, #484]	@ 800e0f4 <acc_translation_a121_translate+0x6f8>
 800df12:	9607      	str	r6, [sp, #28]
 800df14:	9602      	str	r6, [sp, #8]
 800df16:	f108 090e 	add.w	r9, r8, #14
 800df1a:	462f      	mov	r7, r5
 800df1c:	f104 0a46 	add.w	sl, r4, #70	@ 0x46
 800df20:	9503      	str	r5, [sp, #12]
 800df22:	9409      	str	r4, [sp, #36]	@ 0x24
 800df24:	9305      	str	r3, [sp, #20]
 800df26:	e9dd 0403 	ldrd	r0, r4, [sp, #12]
 800df2a:	fa5f fc86 	uxtb.w	ip, r6
 800df2e:	4564      	cmp	r4, ip
 800df30:	4653      	mov	r3, sl
 800df32:	4639      	mov	r1, r7
 800df34:	465a      	mov	r2, fp
 800df36:	f04f 0c00 	mov.w	ip, #0
 800df3a:	d82b      	bhi.n	800df94 <acc_translation_a121_translate+0x598>
 800df3c:	9b05      	ldr	r3, [sp, #20]
 800df3e:	f8a9 c000 	strh.w	ip, [r9]
 800df42:	f8a9 c008 	strh.w	ip, [r9, #8]
 800df46:	f823 c016 	strh.w	ip, [r3, r6, lsl #1]
 800df4a:	3601      	adds	r6, #1
 800df4c:	2e04      	cmp	r6, #4
 800df4e:	f109 0902 	add.w	r9, r9, #2
 800df52:	f107 0710 	add.w	r7, r7, #16
 800df56:	f10a 0a56 	add.w	sl, sl, #86	@ 0x56
 800df5a:	d1e4      	bne.n	800df26 <acc_translation_a121_translate+0x52a>
 800df5c:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800df60:	9906      	ldr	r1, [sp, #24]
 800df62:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800df66:	9d03      	ldr	r5, [sp, #12]
 800df68:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800df6a:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 800df6e:	fb12 f201 	smulbb	r2, r2, r1
 800df72:	b292      	uxth	r2, r2
 800df74:	4413      	add	r3, r2
 800df76:	b29b      	uxth	r3, r3
 800df78:	f103 0c01 	add.w	ip, r3, #1
 800df7c:	fa1f fc8c 	uxth.w	ip, ip
 800df80:	2001      	movs	r0, #1
 800df82:	e5aa      	b.n	800dada <acc_translation_a121_translate+0xde>
 800df84:	2200      	movs	r2, #0
 800df86:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800df88:	8522      	strh	r2, [r4, #40]	@ 0x28
 800df8a:	e792      	b.n	800deb2 <acc_translation_a121_translate+0x4b6>
 800df8c:	2301      	movs	r3, #1
 800df8e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800df90:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800df92:	e7a8      	b.n	800dee6 <acc_translation_a121_translate+0x4ea>
 800df94:	9d05      	ldr	r5, [sp, #20]
 800df96:	f04f 0401 	mov.w	r4, #1
 800df9a:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800df9e:	ac0b      	add	r4, sp, #44	@ 0x2c
 800dfa0:	9400      	str	r4, [sp, #0]
 800dfa2:	f7ff fb57 	bl	800d654 <acc_translation_a121_subsweep_translate>
 800dfa6:	2800      	cmp	r0, #0
 800dfa8:	d045      	beq.n	800e036 <acc_translation_a121_translate+0x63a>
 800dfaa:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800dfae:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800dfb2:	f8a9 3000 	strh.w	r3, [r9]
 800dfb6:	f8a9 2008 	strh.w	r2, [r9, #8]
 800dfba:	4413      	add	r3, r2
 800dfbc:	7bfa      	ldrb	r2, [r7, #15]
 800dfbe:	f8a8 300c 	strh.w	r3, [r8, #12]
 800dfc2:	2a01      	cmp	r2, #1
 800dfc4:	f8ba 3028 	ldrh.w	r3, [sl, #40]	@ 0x28
 800dfc8:	d02e      	beq.n	800e028 <acc_translation_a121_translate+0x62c>
 800dfca:	2a02      	cmp	r2, #2
 800dfcc:	bf0c      	ite	eq
 800dfce:	eef0 5a49 	vmoveq.f32	s11, s18
 800dfd2:	eef0 5a69 	vmovne.f32	s11, s19
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	ee07 3a10 	vmov	s14, r3
 800dfde:	88bb      	ldrh	r3, [r7, #4]
 800dfe0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800dfe4:	ee06 3a10 	vmov	s12, r3
 800dfe8:	893b      	ldrh	r3, [r7, #8]
 800dfea:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800dfee:	ee07 3a90 	vmov	s15, r3
 800dff2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dff6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800dffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dffe:	ee67 7a06 	vmul.f32	s15, s14, s12
 800e002:	9b02      	ldr	r3, [sp, #8]
 800e004:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e008:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e00c:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800e010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e014:	ee17 2a90 	vmov	r2, s15
 800e018:	4413      	add	r3, r2
 800e01a:	9302      	str	r3, [sp, #8]
 800e01c:	9b07      	ldr	r3, [sp, #28]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d193      	bne.n	800df4a <acc_translation_a121_translate+0x54e>
 800e022:	7afb      	ldrb	r3, [r7, #11]
 800e024:	9307      	str	r3, [sp, #28]
 800e026:	e790      	b.n	800df4a <acc_translation_a121_translate+0x54e>
 800e028:	eef0 5a6a 	vmov.f32	s11, s21
 800e02c:	e7d3      	b.n	800dfd6 <acc_translation_a121_translate+0x5da>
 800e02e:	2300      	movs	r3, #0
 800e030:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800e032:	86e3      	strh	r3, [r4, #54]	@ 0x36
 800e034:	e757      	b.n	800dee6 <acc_translation_a121_translate+0x4ea>
 800e036:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 800e03a:	9906      	ldr	r1, [sp, #24]
 800e03c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800e040:	9d03      	ldr	r5, [sp, #12]
 800e042:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e044:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 800e048:	fb12 f201 	smulbb	r2, r2, r1
 800e04c:	b292      	uxth	r2, r2
 800e04e:	4413      	add	r3, r2
 800e050:	b29b      	uxth	r3, r3
 800e052:	f103 0c01 	add.w	ip, r3, #1
 800e056:	fa1f fc8c 	uxth.w	ip, ip
 800e05a:	e53e      	b.n	800dada <acc_translation_a121_translate+0xde>
 800e05c:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 800e060:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 800e064:	eddf 8a1b 	vldr	s17, [pc, #108]	@ 800e0d4 <acc_translation_a121_translate+0x6d8>
 800e068:	4291      	cmp	r1, r2
 800e06a:	f47f ad0c 	bne.w	800da86 <acc_translation_a121_translate+0x8a>
 800e06e:	e6b7      	b.n	800dde0 <acc_translation_a121_translate+0x3e4>
 800e070:	2301      	movs	r3, #1
 800e072:	f8a8 b002 	strh.w	fp, [r8, #2]
 800e076:	f8a8 300a 	strh.w	r3, [r8, #10]
 800e07a:	465f      	mov	r7, fp
 800e07c:	f04f 0c02 	mov.w	ip, #2
 800e080:	465a      	mov	r2, fp
 800e082:	f8cd b008 	str.w	fp, [sp, #8]
 800e086:	4658      	mov	r0, fp
 800e088:	e527      	b.n	800dada <acc_translation_a121_translate+0xde>
 800e08a:	b933      	cbnz	r3, 800e09a <acc_translation_a121_translate+0x69e>
 800e08c:	2a02      	cmp	r2, #2
 800e08e:	d00a      	beq.n	800e0a6 <acc_translation_a121_translate+0x6aa>
 800e090:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e092:	7113      	strb	r3, [r2, #4]
 800e094:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800e098:	e620      	b.n	800dcdc <acc_translation_a121_translate+0x2e0>
 800e09a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e09c:	2300      	movs	r3, #0
 800e09e:	7113      	strb	r3, [r2, #4]
 800e0a0:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 800e0a4:	e61a      	b.n	800dcdc <acc_translation_a121_translate+0x2e0>
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	e60c      	b.n	800dcc4 <acc_translation_a121_translate+0x2c8>
 800e0aa:	9004      	str	r0, [sp, #16]
 800e0ac:	e69f      	b.n	800ddee <acc_translation_a121_translate+0x3f2>
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	4658      	mov	r0, fp
 800e0b2:	f7fe fffd 	bl	800d0b0 <acc_translation_a121_set_calibration_params>
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	f8a8 3002 	strh.w	r3, [r8, #2]
 800e0be:	f8a8 300c 	strh.w	r3, [r8, #12]
 800e0c2:	f8a8 200a 	strh.w	r2, [r8, #10]
 800e0c6:	e719      	b.n	800defc <acc_translation_a121_translate+0x500>
 800e0c8:	2000069c 	.word	0x2000069c
 800e0cc:	0801400c 	.word	0x0801400c
 800e0d0:	08013d98 	.word	0x08013d98
 800e0d4:	00000000 	.word	0x00000000
 800e0d8:	08013fcc 	.word	0x08013fcc
 800e0dc:	3c23d70a 	.word	0x3c23d70a
 800e0e0:	49742400 	.word	0x49742400
 800e0e4:	0801407c 	.word	0x0801407c
 800e0e8:	08013f50 	.word	0x08013f50
 800e0ec:	3e124925 	.word	0x3e124925
 800e0f0:	3e4ccccd 	.word	0x3e4ccccd
 800e0f4:	3d75c28f 	.word	0x3d75c28f

0800e0f8 <acc_translation_pulseshaper_calc_settings>:
 800e0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0fc:	7804      	ldrb	r4, [r0, #0]
 800e0fe:	2300      	movs	r3, #0
 800e100:	8093      	strh	r3, [r2, #4]
 800e102:	b374      	cbz	r4, 800e162 <acc_translation_pulseshaper_calc_settings+0x6a>
 800e104:	6846      	ldr	r6, [r0, #4]
 800e106:	2401      	movs	r4, #1
 800e108:	4637      	mov	r7, r6
 800e10a:	8214      	strh	r4, [r2, #16]
 800e10c:	b3a6      	cbz	r6, 800e178 <acc_translation_pulseshaper_calc_settings+0x80>
 800e10e:	e9d1 9a03 	ldrd	r9, sl, [r1, #12]
 800e112:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800e116:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800e11a:	461c      	mov	r4, r3
 800e11c:	eb09 4513 	add.w	r5, r9, r3, lsr #16
 800e120:	eba5 0508 	sub.w	r5, r5, r8
 800e124:	4575      	cmp	r5, lr
 800e126:	fa1f fc84 	uxth.w	ip, r4
 800e12a:	4453      	add	r3, sl
 800e12c:	f104 0401 	add.w	r4, r4, #1
 800e130:	da02      	bge.n	800e138 <acc_translation_pulseshaper_calc_settings+0x40>
 800e132:	2c0f      	cmp	r4, #15
 800e134:	d1f2      	bne.n	800e11c <acc_translation_pulseshaper_calc_settings+0x24>
 800e136:	46a4      	mov	ip, r4
 800e138:	e9d1 8e07 	ldrd	r8, lr, [r1, #28]
 800e13c:	2505      	movs	r5, #5
 800e13e:	f8a2 c006 	strh.w	ip, [r2, #6]
 800e142:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 800e146:	eb08 4413 	add.w	r4, r8, r3, lsr #16
 800e14a:	1ba4      	subs	r4, r4, r6
 800e14c:	f105 0c01 	add.w	ip, r5, #1
 800e150:	4473      	add	r3, lr
 800e152:	d563      	bpl.n	800e21c <acc_translation_pulseshaper_calc_settings+0x124>
 800e154:	fa1f f58c 	uxth.w	r5, ip
 800e158:	2d14      	cmp	r5, #20
 800e15a:	d1f4      	bne.n	800e146 <acc_translation_pulseshaper_calc_settings+0x4e>
 800e15c:	2000      	movs	r0, #0
 800e15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e162:	8214      	strh	r4, [r2, #16]
 800e164:	80d4      	strh	r4, [r2, #6]
 800e166:	8054      	strh	r4, [r2, #2]
 800e168:	8114      	strh	r4, [r2, #8]
 800e16a:	81d4      	strh	r4, [r2, #14]
 800e16c:	8154      	strh	r4, [r2, #10]
 800e16e:	8194      	strh	r4, [r2, #12]
 800e170:	8254      	strh	r4, [r2, #18]
 800e172:	2001      	movs	r0, #1
 800e174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e178:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800e17c:	80d6      	strh	r6, [r2, #6]
 800e17e:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 800e182:	8056      	strh	r6, [r2, #2]
 800e184:	d343      	bcc.n	800e20e <acc_translation_pulseshaper_calc_settings+0x116>
 800e186:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800e18a:	ebac 050e 	sub.w	r5, ip, lr
 800e18e:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 800e192:	f340 80b3 	ble.w	800e2fc <acc_translation_pulseshaper_calc_settings+0x204>
 800e196:	2400      	movs	r4, #0
 800e198:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e19c:	4620      	mov	r0, r4
 800e19e:	3002      	adds	r0, #2
 800e1a0:	fb03 f000 	mul.w	r0, r3, r0
 800e1a4:	42a8      	cmp	r0, r5
 800e1a6:	f104 0401 	add.w	r4, r4, #1
 800e1aa:	dbf7      	blt.n	800e19c <acc_translation_pulseshaper_calc_settings+0xa4>
 800e1ac:	2e00      	cmp	r6, #0
 800e1ae:	bf14      	ite	ne
 800e1b0:	2501      	movne	r5, #1
 800e1b2:	2500      	moveq	r5, #0
 800e1b4:	f04f 0001 	mov.w	r0, #1
 800e1b8:	8115      	strh	r5, [r2, #8]
 800e1ba:	81d0      	strh	r0, [r2, #14]
 800e1bc:	d14f      	bne.n	800e25e <acc_translation_pulseshaper_calc_settings+0x166>
 800e1be:	8156      	strh	r6, [r2, #10]
 800e1c0:	b344      	cbz	r4, 800e214 <acc_translation_pulseshaper_calc_settings+0x11c>
 800e1c2:	fb03 c314 	mls	r3, r3, r4, ip
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800e1cc:	4601      	mov	r1, r0
 800e1ce:	e001      	b.n	800e1d4 <acc_translation_pulseshaper_calc_settings+0xdc>
 800e1d0:	2916      	cmp	r1, #22
 800e1d2:	d0c3      	beq.n	800e15c <acc_translation_pulseshaper_calc_settings+0x64>
 800e1d4:	eb0c 4510 	add.w	r5, ip, r0, lsr #16
 800e1d8:	1aed      	subs	r5, r5, r3
 800e1da:	b28e      	uxth	r6, r1
 800e1dc:	4470      	add	r0, lr
 800e1de:	f101 0101 	add.w	r1, r1, #1
 800e1e2:	d4f5      	bmi.n	800e1d0 <acc_translation_pulseshaper_calc_settings+0xd8>
 800e1e4:	b15e      	cbz	r6, 800e1fe <acc_translation_pulseshaper_calc_settings+0x106>
 800e1e6:	b957      	cbnz	r7, 800e1fe <acc_translation_pulseshaper_calc_settings+0x106>
 800e1e8:	1e71      	subs	r1, r6, #1
 800e1ea:	b289      	uxth	r1, r1
 800e1ec:	fb0e fe01 	mul.w	lr, lr, r1
 800e1f0:	eb0c 4c1e 	add.w	ip, ip, lr, lsr #16
 800e1f4:	eba3 030c 	sub.w	r3, r3, ip
 800e1f8:	429d      	cmp	r5, r3
 800e1fa:	bfc8      	it	gt
 800e1fc:	460e      	movgt	r6, r1
 800e1fe:	8196      	strh	r6, [r2, #12]
 800e200:	2c00      	cmp	r4, #0
 800e202:	d0b5      	beq.n	800e170 <acc_translation_pulseshaper_calc_settings+0x78>
 800e204:	1de3      	adds	r3, r4, #7
 800e206:	2401      	movs	r4, #1
 800e208:	409c      	lsls	r4, r3
 800e20a:	b2a4      	uxth	r4, r4
 800e20c:	e7b0      	b.n	800e170 <acc_translation_pulseshaper_calc_settings+0x78>
 800e20e:	8116      	strh	r6, [r2, #8]
 800e210:	81d6      	strh	r6, [r2, #14]
 800e212:	8156      	strh	r6, [r2, #10]
 800e214:	2400      	movs	r4, #0
 800e216:	4663      	mov	r3, ip
 800e218:	4627      	mov	r7, r4
 800e21a:	e7d4      	b.n	800e1c6 <acc_translation_pulseshaper_calc_settings+0xce>
 800e21c:	2d05      	cmp	r5, #5
 800e21e:	d00a      	beq.n	800e236 <acc_translation_pulseshaper_calc_settings+0x13e>
 800e220:	1e6b      	subs	r3, r5, #1
 800e222:	b29b      	uxth	r3, r3
 800e224:	fb0e fe03 	mul.w	lr, lr, r3
 800e228:	eb08 4e1e 	add.w	lr, r8, lr, lsr #16
 800e22c:	eba6 0e0e 	sub.w	lr, r6, lr
 800e230:	4574      	cmp	r4, lr
 800e232:	bfc8      	it	gt
 800e234:	461d      	movgt	r5, r3
 800e236:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800e23a:	8055      	strh	r5, [r2, #2]
 800e23c:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 800e240:	d349      	bcc.n	800e2d6 <acc_translation_pulseshaper_calc_settings+0x1de>
 800e242:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800e246:	ebac 050e 	sub.w	r5, ip, lr
 800e24a:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 800e24e:	dca2      	bgt.n	800e196 <acc_translation_pulseshaper_calc_settings+0x9e>
 800e250:	1e30      	subs	r0, r6, #0
 800e252:	bf18      	it	ne
 800e254:	2001      	movne	r0, #1
 800e256:	2301      	movs	r3, #1
 800e258:	8110      	strh	r0, [r2, #8]
 800e25a:	81d3      	strh	r3, [r2, #14]
 800e25c:	2400      	movs	r4, #0
 800e25e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e262:	fb03 c314 	mls	r3, r3, r4, ip
 800e266:	2500      	movs	r5, #0
 800e268:	f8d1 9018 	ldr.w	r9, [r1, #24]
 800e26c:	4628      	mov	r0, r5
 800e26e:	e002      	b.n	800e276 <acc_translation_pulseshaper_calc_settings+0x17e>
 800e270:	2816      	cmp	r0, #22
 800e272:	f43f af73 	beq.w	800e15c <acc_translation_pulseshaper_calc_settings+0x64>
 800e276:	eb0e 4715 	add.w	r7, lr, r5, lsr #16
 800e27a:	1aff      	subs	r7, r7, r3
 800e27c:	fa1f f880 	uxth.w	r8, r0
 800e280:	444d      	add	r5, r9
 800e282:	f100 0001 	add.w	r0, r0, #1
 800e286:	d4f3      	bmi.n	800e270 <acc_translation_pulseshaper_calc_settings+0x178>
 800e288:	f1b8 0f00 	cmp.w	r8, #0
 800e28c:	d12a      	bne.n	800e2e4 <acc_translation_pulseshaper_calc_settings+0x1ec>
 800e28e:	f8a2 800a 	strh.w	r8, [r2, #10]
 800e292:	b1c4      	cbz	r4, 800e2c6 <acc_translation_pulseshaper_calc_settings+0x1ce>
 800e294:	4637      	mov	r7, r6
 800e296:	2e00      	cmp	r6, #0
 800e298:	d095      	beq.n	800e1c6 <acc_translation_pulseshaper_calc_settings+0xce>
 800e29a:	e9d1 0503 	ldrd	r0, r5, [r1, #12]
 800e29e:	88d6      	ldrh	r6, [r2, #6]
 800e2a0:	fb05 f506 	mul.w	r5, r5, r6
 800e2a4:	688e      	ldr	r6, [r1, #8]
 800e2a6:	eb00 4015 	add.w	r0, r0, r5, lsr #16
 800e2aa:	1b80      	subs	r0, r0, r6
 800e2ac:	f53f af56 	bmi.w	800e15c <acc_translation_pulseshaper_calc_settings+0x64>
 800e2b0:	e9d1 5607 	ldrd	r5, r6, [r1, #28]
 800e2b4:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800e2b8:	fb06 f60c 	mul.w	r6, r6, ip
 800e2bc:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 800e2c0:	4428      	add	r0, r5
 800e2c2:	4403      	add	r3, r0
 800e2c4:	e77f      	b.n	800e1c6 <acc_translation_pulseshaper_calc_settings+0xce>
 800e2c6:	4637      	mov	r7, r6
 800e2c8:	2e00      	cmp	r6, #0
 800e2ca:	d0a3      	beq.n	800e214 <acc_translation_pulseshaper_calc_settings+0x11c>
 800e2cc:	fb09 f308 	mul.w	r3, r9, r8
 800e2d0:	eb0e 4313 	add.w	r3, lr, r3, lsr #16
 800e2d4:	e7e1      	b.n	800e29a <acc_translation_pulseshaper_calc_settings+0x1a2>
 800e2d6:	2400      	movs	r4, #0
 800e2d8:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800e2dc:	8114      	strh	r4, [r2, #8]
 800e2de:	81d4      	strh	r4, [r2, #14]
 800e2e0:	4663      	mov	r3, ip
 800e2e2:	e7c0      	b.n	800e266 <acc_translation_pulseshaper_calc_settings+0x16e>
 800e2e4:	f108 35ff 	add.w	r5, r8, #4294967295
 800e2e8:	b2ad      	uxth	r5, r5
 800e2ea:	fb09 f005 	mul.w	r0, r9, r5
 800e2ee:	eb0e 4010 	add.w	r0, lr, r0, lsr #16
 800e2f2:	1a18      	subs	r0, r3, r0
 800e2f4:	4287      	cmp	r7, r0
 800e2f6:	bfc8      	it	gt
 800e2f8:	46a8      	movgt	r8, r5
 800e2fa:	e7c8      	b.n	800e28e <acc_translation_pulseshaper_calc_settings+0x196>
 800e2fc:	8116      	strh	r6, [r2, #8]
 800e2fe:	81d4      	strh	r4, [r2, #14]
 800e300:	8156      	strh	r6, [r2, #10]
 800e302:	e787      	b.n	800e214 <acc_translation_pulseshaper_calc_settings+0x11c>

0800e304 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>:
 800e304:	7803      	ldrb	r3, [r0, #0]
 800e306:	b13b      	cbz	r3, 800e318 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 800e308:	6842      	ldr	r2, [r0, #4]
 800e30a:	b12a      	cbz	r2, 800e318 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 800e30c:	6902      	ldr	r2, [r0, #16]
 800e30e:	2a02      	cmp	r2, #2
 800e310:	d90b      	bls.n	800e32a <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x26>
 800e312:	2300      	movs	r3, #0
 800e314:	4618      	mov	r0, r3
 800e316:	4770      	bx	lr
 800e318:	6903      	ldr	r3, [r0, #16]
 800e31a:	2b07      	cmp	r3, #7
 800e31c:	d8f9      	bhi.n	800e312 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0xe>
 800e31e:	4a05      	ldr	r2, [pc, #20]	@ (800e334 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x30>)
 800e320:	5cd3      	ldrb	r3, [r2, r3]
 800e322:	800b      	strh	r3, [r1, #0]
 800e324:	2301      	movs	r3, #1
 800e326:	4618      	mov	r0, r3
 800e328:	4770      	bx	lr
 800e32a:	4803      	ldr	r0, [pc, #12]	@ (800e338 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x34>)
 800e32c:	5c82      	ldrb	r2, [r0, r2]
 800e32e:	800a      	strh	r2, [r1, #0]
 800e330:	4618      	mov	r0, r3
 800e332:	4770      	bx	lr
 800e334:	080140d4 	.word	0x080140d4
 800e338:	080140dc 	.word	0x080140dc

0800e33c <acc_utils_bool_to_str>:
 800e33c:	4a03      	ldr	r2, [pc, #12]	@ (800e34c <acc_utils_bool_to_str+0x10>)
 800e33e:	4b04      	ldr	r3, [pc, #16]	@ (800e350 <acc_utils_bool_to_str+0x14>)
 800e340:	2800      	cmp	r0, #0
 800e342:	bf14      	ite	ne
 800e344:	4610      	movne	r0, r2
 800e346:	4618      	moveq	r0, r3
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop
 800e34c:	080140e0 	.word	0x080140e0
 800e350:	080140e8 	.word	0x080140e8

0800e354 <acc_utils_idle_state_to_str>:
 800e354:	2802      	cmp	r0, #2
 800e356:	bf9a      	itte	ls
 800e358:	4b02      	ldrls	r3, [pc, #8]	@ (800e364 <acc_utils_idle_state_to_str+0x10>)
 800e35a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e35e:	4802      	ldrhi	r0, [pc, #8]	@ (800e368 <acc_utils_idle_state_to_str+0x14>)
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	08014180 	.word	0x08014180
 800e368:	080140f0 	.word	0x080140f0

0800e36c <acc_utils_profile_to_str>:
 800e36c:	3801      	subs	r0, #1
 800e36e:	b2c0      	uxtb	r0, r0
 800e370:	2804      	cmp	r0, #4
 800e372:	bf9a      	itte	ls
 800e374:	4b02      	ldrls	r3, [pc, #8]	@ (800e380 <acc_utils_profile_to_str+0x14>)
 800e376:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e37a:	4802      	ldrhi	r0, [pc, #8]	@ (800e384 <acc_utils_profile_to_str+0x18>)
 800e37c:	4770      	bx	lr
 800e37e:	bf00      	nop
 800e380:	0801418c 	.word	0x0801418c
 800e384:	080140f0 	.word	0x080140f0

0800e388 <acc_utils_prf_to_str>:
 800e388:	2805      	cmp	r0, #5
 800e38a:	bf9a      	itte	ls
 800e38c:	4b02      	ldrls	r3, [pc, #8]	@ (800e398 <acc_utils_prf_to_str+0x10>)
 800e38e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e392:	4802      	ldrhi	r0, [pc, #8]	@ (800e39c <acc_utils_prf_to_str+0x14>)
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	080141a0 	.word	0x080141a0
 800e39c:	080140f0 	.word	0x080140f0

0800e3a0 <acc_version_get>:
 800e3a0:	4800      	ldr	r0, [pc, #0]	@ (800e3a4 <acc_version_get+0x4>)
 800e3a2:	4770      	bx	lr
 800e3a4:	08012ab0 	.word	0x08012ab0

0800e3a8 <acc_alg_atan2_q16>:
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	bfb8      	it	lt
 800e3ac:	4240      	neglt	r0, r0
 800e3ae:	b4f0      	push	{r4, r5, r6, r7}
 800e3b0:	bfba      	itte	lt
 800e3b2:	b200      	sxthlt	r0, r0
 800e3b4:	2401      	movlt	r4, #1
 800e3b6:	2400      	movge	r4, #0
 800e3b8:	2900      	cmp	r1, #0
 800e3ba:	db3f      	blt.n	800e43c <acc_alg_atan2_q16+0x94>
 800e3bc:	4288      	cmp	r0, r1
 800e3be:	db38      	blt.n	800e432 <acc_alg_atan2_q16+0x8a>
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	b368      	cbz	r0, 800e422 <acc_alg_atan2_q16+0x7a>
 800e3c6:	4608      	mov	r0, r1
 800e3c8:	2600      	movs	r6, #0
 800e3ca:	f643 4528 	movw	r5, #15400	@ 0x3c28
 800e3ce:	0400      	lsls	r0, r0, #16
 800e3d0:	fbb0 f1f3 	udiv	r1, r0, r3
 800e3d4:	42a9      	cmp	r1, r5
 800e3d6:	d948      	bls.n	800e46a <acc_alg_atan2_q16+0xc2>
 800e3d8:	f246 33d6 	movw	r3, #25558	@ 0x63d6
 800e3dc:	4299      	cmp	r1, r3
 800e3de:	d936      	bls.n	800e44e <acc_alg_atan2_q16+0xa6>
 800e3e0:	f648 0372 	movw	r3, #34930	@ 0x8872
 800e3e4:	4299      	cmp	r1, r3
 800e3e6:	d942      	bls.n	800e46e <acc_alg_atan2_q16+0xc6>
 800e3e8:	f64a 4349 	movw	r3, #44105	@ 0xac49
 800e3ec:	4299      	cmp	r1, r3
 800e3ee:	d940      	bls.n	800e472 <acc_alg_atan2_q16+0xca>
 800e3f0:	f24d 03a3 	movw	r3, #53411	@ 0xd0a3
 800e3f4:	4299      	cmp	r1, r3
 800e3f6:	d93e      	bls.n	800e476 <acc_alg_atan2_q16+0xce>
 800e3f8:	f24f 734b 	movw	r3, #63307	@ 0xf74b
 800e3fc:	4299      	cmp	r1, r3
 800e3fe:	bf98      	it	ls
 800e400:	2705      	movls	r7, #5
 800e402:	d925      	bls.n	800e450 <acc_alg_atan2_q16+0xa8>
 800e404:	f24f 754c 	movw	r5, #63308	@ 0xf74c
 800e408:	f248 2333 	movw	r3, #33331	@ 0x8233
 800e40c:	f24c 40a3 	movw	r0, #50339	@ 0xc4a3
 800e410:	1b49      	subs	r1, r1, r5
 800e412:	fb03 f101 	mul.w	r1, r3, r1
 800e416:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 800e41a:	b116      	cbz	r6, 800e422 <acc_alg_atan2_q16+0x7a>
 800e41c:	f5c0 30c9 	rsb	r0, r0, #102912	@ 0x19200
 800e420:	301f      	adds	r0, #31
 800e422:	b114      	cbz	r4, 800e42a <acc_alg_atan2_q16+0x82>
 800e424:	f5c0 3049 	rsb	r0, r0, #205824	@ 0x32400
 800e428:	303f      	adds	r0, #63	@ 0x3f
 800e42a:	b102      	cbz	r2, 800e42e <acc_alg_atan2_q16+0x86>
 800e42c:	4240      	negs	r0, r0
 800e42e:	bcf0      	pop	{r4, r5, r6, r7}
 800e430:	4770      	bx	lr
 800e432:	460b      	mov	r3, r1
 800e434:	b9b1      	cbnz	r1, 800e464 <acc_alg_atan2_q16+0xbc>
 800e436:	4811      	ldr	r0, [pc, #68]	@ (800e47c <acc_alg_atan2_q16+0xd4>)
 800e438:	460a      	mov	r2, r1
 800e43a:	e7f2      	b.n	800e422 <acc_alg_atan2_q16+0x7a>
 800e43c:	4249      	negs	r1, r1
 800e43e:	b209      	sxth	r1, r1
 800e440:	4288      	cmp	r0, r1
 800e442:	f04f 0201 	mov.w	r2, #1
 800e446:	dabc      	bge.n	800e3c2 <acc_alg_atan2_q16+0x1a>
 800e448:	460b      	mov	r3, r1
 800e44a:	4616      	mov	r6, r2
 800e44c:	e7bd      	b.n	800e3ca <acc_alg_atan2_q16+0x22>
 800e44e:	2701      	movs	r7, #1
 800e450:	480b      	ldr	r0, [pc, #44]	@ (800e480 <acc_alg_atan2_q16+0xd8>)
 800e452:	4b0c      	ldr	r3, [pc, #48]	@ (800e484 <acc_alg_atan2_q16+0xdc>)
 800e454:	f850 5037 	ldr.w	r5, [r0, r7, lsl #3]
 800e458:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800e45c:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800e460:	6840      	ldr	r0, [r0, #4]
 800e462:	e7d5      	b.n	800e410 <acc_alg_atan2_q16+0x68>
 800e464:	2200      	movs	r2, #0
 800e466:	2601      	movs	r6, #1
 800e468:	e7af      	b.n	800e3ca <acc_alg_atan2_q16+0x22>
 800e46a:	2700      	movs	r7, #0
 800e46c:	e7f0      	b.n	800e450 <acc_alg_atan2_q16+0xa8>
 800e46e:	2702      	movs	r7, #2
 800e470:	e7ee      	b.n	800e450 <acc_alg_atan2_q16+0xa8>
 800e472:	2703      	movs	r7, #3
 800e474:	e7ec      	b.n	800e450 <acc_alg_atan2_q16+0xa8>
 800e476:	2704      	movs	r7, #4
 800e478:	e7ea      	b.n	800e450 <acc_alg_atan2_q16+0xa8>
 800e47a:	bf00      	nop
 800e47c:	0001921f 	.word	0x0001921f
 800e480:	080141b8 	.word	0x080141b8
 800e484:	080141f0 	.word	0x080141f0

0800e488 <acc_alg_basic_util_crc32>:
 800e488:	b1a9      	cbz	r1, 800e4b6 <acc_alg_basic_util_crc32+0x2e>
 800e48a:	b430      	push	{r4, r5}
 800e48c:	4a0b      	ldr	r2, [pc, #44]	@ (800e4bc <acc_alg_basic_util_crc32+0x34>)
 800e48e:	1e44      	subs	r4, r0, #1
 800e490:	1865      	adds	r5, r4, r1
 800e492:	f04f 30ff 	mov.w	r0, #4294967295
 800e496:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800e49a:	2308      	movs	r3, #8
 800e49c:	4048      	eors	r0, r1
 800e49e:	07c1      	lsls	r1, r0, #31
 800e4a0:	bf4c      	ite	mi
 800e4a2:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
 800e4a6:	0840      	lsrpl	r0, r0, #1
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	d1f8      	bne.n	800e49e <acc_alg_basic_util_crc32+0x16>
 800e4ac:	42ac      	cmp	r4, r5
 800e4ae:	d1f2      	bne.n	800e496 <acc_alg_basic_util_crc32+0xe>
 800e4b0:	43c0      	mvns	r0, r0
 800e4b2:	bc30      	pop	{r4, r5}
 800e4b4:	4770      	bx	lr
 800e4b6:	4608      	mov	r0, r1
 800e4b8:	4770      	bx	lr
 800e4ba:	bf00      	nop
 800e4bc:	edb88320 	.word	0xedb88320

0800e4c0 <acc_alg_least_square_fit>:
 800e4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c4:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 800e4c8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800e4cc:	b08d      	sub	sp, #52	@ 0x34
 800e4ce:	2600      	movs	r6, #0
 800e4d0:	4683      	mov	fp, r0
 800e4d2:	4682      	mov	sl, r0
 800e4d4:	4680      	mov	r8, r0
 800e4d6:	4667      	mov	r7, ip
 800e4d8:	46b1      	mov	r9, r6
 800e4da:	a803      	add	r0, sp, #12
 800e4dc:	ea4f 0589 	mov.w	r5, r9, lsl #2
 800e4e0:	4686      	mov	lr, r0
 800e4e2:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800e640 <acc_alg_least_square_fit+0x180>
 800e4e6:	4643      	mov	r3, r8
 800e4e8:	b16a      	cbz	r2, 800e506 <acc_alg_least_square_fit+0x46>
 800e4ea:	199c      	adds	r4, r3, r6
 800e4ec:	442c      	add	r4, r5
 800e4ee:	edd4 7a00 	vldr	s15, [r4]
 800e4f2:	461c      	mov	r4, r3
 800e4f4:	edd4 6a00 	vldr	s13, [r4]
 800e4f8:	330c      	adds	r3, #12
 800e4fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e4fe:	42bb      	cmp	r3, r7
 800e500:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e504:	d1f1      	bne.n	800e4ea <acc_alg_least_square_fit+0x2a>
 800e506:	3504      	adds	r5, #4
 800e508:	2d0c      	cmp	r5, #12
 800e50a:	ecae 7a01 	vstmia	lr!, {s14}
 800e50e:	d1e8      	bne.n	800e4e2 <acc_alg_least_square_fit+0x22>
 800e510:	f109 0901 	add.w	r9, r9, #1
 800e514:	f1b9 0f03 	cmp.w	r9, #3
 800e518:	f100 0010 	add.w	r0, r0, #16
 800e51c:	f108 0804 	add.w	r8, r8, #4
 800e520:	f1a6 0604 	sub.w	r6, r6, #4
 800e524:	f107 0704 	add.w	r7, r7, #4
 800e528:	d1d8      	bne.n	800e4dc <acc_alg_least_square_fit+0x1c>
 800e52a:	ed9d 6a04 	vldr	s12, [sp, #16]
 800e52e:	eddd 5a05 	vldr	s11, [sp, #20]
 800e532:	eddd 6a08 	vldr	s13, [sp, #32]
 800e536:	4668      	mov	r0, sp
 800e538:	f10b 040c 	add.w	r4, fp, #12
 800e53c:	eddf 7a40 	vldr	s15, [pc, #256]	@ 800e640 <acc_alg_least_square_fit+0x180>
 800e540:	4653      	mov	r3, sl
 800e542:	b13a      	cbz	r2, 800e554 <acc_alg_least_square_fit+0x94>
 800e544:	461d      	mov	r5, r3
 800e546:	ed95 7a00 	vldr	s14, [r5]
 800e54a:	330c      	adds	r3, #12
 800e54c:	4563      	cmp	r3, ip
 800e54e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e552:	d1f7      	bne.n	800e544 <acc_alg_least_square_fit+0x84>
 800e554:	f10a 0a04 	add.w	sl, sl, #4
 800e558:	45a2      	cmp	sl, r4
 800e55a:	ece0 7a01 	vstmia	r0!, {s15}
 800e55e:	f10c 0c04 	add.w	ip, ip, #4
 800e562:	d1eb      	bne.n	800e53c <acc_alg_least_square_fit+0x7c>
 800e564:	eddd 7a03 	vldr	s15, [sp, #12]
 800e568:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e570:	d010      	beq.n	800e594 <acc_alg_least_square_fit+0xd4>
 800e572:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e576:	ee87 4a27 	vdiv.f32	s8, s14, s15
 800e57a:	eddd 7a07 	vldr	s15, [sp, #28]
 800e57e:	ee66 4a04 	vmul.f32	s9, s12, s8
 800e582:	ee26 5a24 	vmul.f32	s10, s12, s9
 800e586:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e58a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e592:	d106      	bne.n	800e5a2 <acc_alg_least_square_fit+0xe2>
 800e594:	2000      	movs	r0, #0
 800e596:	2300      	movs	r3, #0
 800e598:	f8cb 3000 	str.w	r3, [fp]
 800e59c:	b00d      	add	sp, #52	@ 0x34
 800e59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a2:	eec7 2a27 	vdiv.f32	s5, s14, s15
 800e5a6:	ee65 3a84 	vmul.f32	s7, s11, s8
 800e5aa:	ee25 7aa4 	vmul.f32	s14, s11, s9
 800e5ae:	ee66 7a23 	vmul.f32	s15, s12, s7
 800e5b2:	ed9d 5a0b 	vldr	s10, [sp, #44]	@ 0x2c
 800e5b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e5ba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e5be:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800e5c2:	ee65 6aa3 	vmul.f32	s13, s11, s7
 800e5c6:	ee75 6a66 	vsub.f32	s13, s10, s13
 800e5ca:	ee27 5a27 	vmul.f32	s10, s14, s15
 800e5ce:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800e5d2:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5da:	d0db      	beq.n	800e594 <acc_alg_least_square_fit+0xd4>
 800e5dc:	ed9d 5a00 	vldr	s10, [sp]
 800e5e0:	ed9d 3a01 	vldr	s6, [sp, #4]
 800e5e4:	ed9d 2a02 	vldr	s4, [sp, #8]
 800e5e8:	ee64 4a85 	vmul.f32	s9, s9, s10
 800e5ec:	ee63 3a85 	vmul.f32	s7, s7, s10
 800e5f0:	ee73 4a64 	vsub.f32	s9, s6, s9
 800e5f4:	2001      	movs	r0, #1
 800e5f6:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	ee72 7a67 	vsub.f32	s15, s4, s15
 800e600:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e604:	eec3 7aa6 	vdiv.f32	s15, s7, s13
 800e608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e60c:	edc1 7a02 	vstr	s15, [r1, #8]
 800e610:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e614:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800e618:	ee67 7a22 	vmul.f32	s15, s14, s5
 800e61c:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e620:	edc1 7a01 	vstr	s15, [r1, #4]
 800e624:	ee35 6a46 	vsub.f32	s12, s10, s12
 800e628:	ee76 5a65 	vsub.f32	s11, s12, s11
 800e62c:	ee25 4a84 	vmul.f32	s8, s11, s8
 800e630:	ed81 4a00 	vstr	s8, [r1]
 800e634:	f8cb 3000 	str.w	r3, [fp]
 800e638:	b00d      	add	sp, #52	@ 0x34
 800e63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e63e:	bf00      	nop
 800e640:	00000000 	.word	0x00000000

0800e644 <acc_confprogram_modify_bin_sensor>:
 800e644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e648:	b085      	sub	sp, #20
 800e64a:	2601      	movs	r6, #1
 800e64c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800e650:	fa06 f503 	lsl.w	r5, r6, r3
 800e654:	4545      	cmp	r5, r8
 800e656:	461c      	mov	r4, r3
 800e658:	460b      	mov	r3, r1
 800e65a:	d80d      	bhi.n	800e678 <acc_confprogram_modify_bin_sensor+0x34>
 800e65c:	4a14      	ldr	r2, [pc, #80]	@ (800e6b0 <acc_confprogram_modify_bin_sensor+0x6c>)
 800e65e:	f8cd 8000 	str.w	r8, [sp]
 800e662:	3d01      	subs	r5, #1
 800e664:	9501      	str	r5, [sp, #4]
 800e666:	6914      	ldr	r4, [r2, #16]
 800e668:	4912      	ldr	r1, [pc, #72]	@ (800e6b4 <acc_confprogram_modify_bin_sensor+0x70>)
 800e66a:	4a13      	ldr	r2, [pc, #76]	@ (800e6b8 <acc_confprogram_modify_bin_sensor+0x74>)
 800e66c:	2000      	movs	r0, #0
 800e66e:	47a0      	blx	r4
 800e670:	2000      	movs	r0, #0
 800e672:	b005      	add	sp, #20
 800e674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e678:	4691      	mov	r9, r2
 800e67a:	4607      	mov	r7, r0
 800e67c:	9103      	str	r1, [sp, #12]
 800e67e:	f1c4 0420 	rsb	r4, r4, #32
 800e682:	f000 f9ed 	bl	800ea60 <acc_sensor_conf_read_instr>
 800e686:	f04f 31ff 	mov.w	r1, #4294967295
 800e68a:	fa21 f404 	lsr.w	r4, r1, r4
 800e68e:	9b03      	ldr	r3, [sp, #12]
 800e690:	fa04 f409 	lsl.w	r4, r4, r9
 800e694:	ea20 0404 	bic.w	r4, r0, r4
 800e698:	fa08 f209 	lsl.w	r2, r8, r9
 800e69c:	4619      	mov	r1, r3
 800e69e:	4638      	mov	r0, r7
 800e6a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6a2:	4322      	orrs	r2, r4
 800e6a4:	4798      	blx	r3
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	b005      	add	sp, #20
 800e6aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6ae:	bf00      	nop
 800e6b0:	2000069c 	.word	0x2000069c
 800e6b4:	08014244 	.word	0x08014244
 800e6b8:	0801420c 	.word	0x0801420c

0800e6bc <acc_confprogram_modify_bin>:
 800e6bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6c0:	b085      	sub	sp, #20
 800e6c2:	2401      	movs	r4, #1
 800e6c4:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800e6c8:	fa04 f703 	lsl.w	r7, r4, r3
 800e6cc:	4547      	cmp	r7, r8
 800e6ce:	461e      	mov	r6, r3
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	d80d      	bhi.n	800e6f0 <acc_confprogram_modify_bin+0x34>
 800e6d4:	4a17      	ldr	r2, [pc, #92]	@ (800e734 <acc_confprogram_modify_bin+0x78>)
 800e6d6:	f8cd 8000 	str.w	r8, [sp]
 800e6da:	3f01      	subs	r7, #1
 800e6dc:	9701      	str	r7, [sp, #4]
 800e6de:	6914      	ldr	r4, [r2, #16]
 800e6e0:	4915      	ldr	r1, [pc, #84]	@ (800e738 <acc_confprogram_modify_bin+0x7c>)
 800e6e2:	4a16      	ldr	r2, [pc, #88]	@ (800e73c <acc_confprogram_modify_bin+0x80>)
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	47a0      	blx	r4
 800e6e8:	2000      	movs	r0, #0
 800e6ea:	b005      	add	sp, #20
 800e6ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6f0:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 800e6f4:	4691      	mov	r9, r2
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	4622      	mov	r2, r4
 800e6fa:	a902      	add	r1, sp, #8
 800e6fc:	f000 faf8 	bl	800ecf0 <acc_utils_transfer_buffer_to_uint32>
 800e700:	f1c6 0620 	rsb	r6, r6, #32
 800e704:	f04f 32ff 	mov.w	r2, #4294967295
 800e708:	fa22 f606 	lsr.w	r6, r2, r6
 800e70c:	9a02      	ldr	r2, [sp, #8]
 800e70e:	fa06 f609 	lsl.w	r6, r6, r9
 800e712:	fa08 f809 	lsl.w	r8, r8, r9
 800e716:	ea22 0206 	bic.w	r2, r2, r6
 800e71a:	ea42 0608 	orr.w	r6, r2, r8
 800e71e:	a803      	add	r0, sp, #12
 800e720:	4629      	mov	r1, r5
 800e722:	4622      	mov	r2, r4
 800e724:	9603      	str	r6, [sp, #12]
 800e726:	f000 fad5 	bl	800ecd4 <acc_utils_uint32_to_transfer_buffer>
 800e72a:	4620      	mov	r0, r4
 800e72c:	b005      	add	sp, #20
 800e72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e732:	bf00      	nop
 800e734:	2000069c 	.word	0x2000069c
 800e738:	08014244 	.word	0x08014244
 800e73c:	08014250 	.word	0x08014250

0800e740 <acc_confprogram_modify_runif>:
 800e740:	b570      	push	{r4, r5, r6, lr}
 800e742:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 800e746:	b082      	sub	sp, #8
 800e748:	2201      	movs	r2, #1
 800e74a:	460e      	mov	r6, r1
 800e74c:	4620      	mov	r0, r4
 800e74e:	4669      	mov	r1, sp
 800e750:	461d      	mov	r5, r3
 800e752:	f000 facd 	bl	800ecf0 <acc_utils_transfer_buffer_to_uint32>
 800e756:	9a00      	ldr	r2, [sp, #0]
 800e758:	f022 020f 	bic.w	r2, r2, #15
 800e75c:	b105      	cbz	r5, 800e760 <acc_confprogram_modify_runif+0x20>
 800e75e:	4332      	orrs	r2, r6
 800e760:	9201      	str	r2, [sp, #4]
 800e762:	4621      	mov	r1, r4
 800e764:	2201      	movs	r2, #1
 800e766:	a801      	add	r0, sp, #4
 800e768:	f000 fab4 	bl	800ecd4 <acc_utils_uint32_to_transfer_buffer>
 800e76c:	b002      	add	sp, #8
 800e76e:	bd70      	pop	{r4, r5, r6, pc}

0800e770 <acc_confprogram_patch_offset>:
 800e770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e774:	b083      	sub	sp, #12
 800e776:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
 800e77a:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800e77e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e782:	887b      	ldrh	r3, [r7, #2]
 800e784:	b303      	cbz	r3, 800e7c8 <acc_confprogram_patch_offset+0x58>
 800e786:	460d      	mov	r5, r1
 800e788:	6879      	ldr	r1, [r7, #4]
 800e78a:	4680      	mov	r8, r0
 800e78c:	18ae      	adds	r6, r5, r2
 800e78e:	2400      	movs	r4, #0
 800e790:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800e794:	0042      	lsls	r2, r0, #1
 800e796:	b292      	uxth	r2, r2
 800e798:	42aa      	cmp	r2, r5
 800e79a:	d312      	bcc.n	800e7c2 <acc_confprogram_patch_offset+0x52>
 800e79c:	42b2      	cmp	r2, r6
 800e79e:	da10      	bge.n	800e7c2 <acc_confprogram_patch_offset+0x52>
 800e7a0:	f3c0 7301 	ubfx	r3, r0, #28, #2
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d036      	beq.n	800e816 <acc_confprogram_patch_offset+0xa6>
 800e7a8:	2b02      	cmp	r3, #2
 800e7aa:	d024      	beq.n	800e7f6 <acc_confprogram_patch_offset+0x86>
 800e7ac:	b183      	cbz	r3, 800e7d0 <acc_confprogram_patch_offset+0x60>
 800e7ae:	4b1e      	ldr	r3, [pc, #120]	@ (800e828 <acc_confprogram_patch_offset+0xb8>)
 800e7b0:	4a1e      	ldr	r2, [pc, #120]	@ (800e82c <acc_confprogram_patch_offset+0xbc>)
 800e7b2:	691b      	ldr	r3, [r3, #16]
 800e7b4:	491e      	ldr	r1, [pc, #120]	@ (800e830 <acc_confprogram_patch_offset+0xc0>)
 800e7b6:	2000      	movs	r0, #0
 800e7b8:	4798      	blx	r3
 800e7ba:	2000      	movs	r0, #0
 800e7bc:	b003      	add	sp, #12
 800e7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7c2:	3401      	adds	r4, #1
 800e7c4:	42a3      	cmp	r3, r4
 800e7c6:	d8e3      	bhi.n	800e790 <acc_confprogram_patch_offset+0x20>
 800e7c8:	2001      	movs	r0, #1
 800e7ca:	b003      	add	sp, #12
 800e7cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7d0:	1b52      	subs	r2, r2, r5
 800e7d2:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800e7d6:	b291      	uxth	r1, r2
 800e7d8:	f8cd 9000 	str.w	r9, [sp]
 800e7dc:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800e7e0:	4640      	mov	r0, r8
 800e7e2:	f7ff ff6b 	bl	800e6bc <acc_confprogram_modify_bin>
 800e7e6:	887b      	ldrh	r3, [r7, #2]
 800e7e8:	3401      	adds	r4, #1
 800e7ea:	42a3      	cmp	r3, r4
 800e7ec:	d9e6      	bls.n	800e7bc <acc_confprogram_patch_offset+0x4c>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d0e4      	beq.n	800e7bc <acc_confprogram_patch_offset+0x4c>
 800e7f2:	6879      	ldr	r1, [r7, #4]
 800e7f4:	e7cc      	b.n	800e790 <acc_confprogram_patch_offset+0x20>
 800e7f6:	1b52      	subs	r2, r2, r5
 800e7f8:	fab9 f389 	clz	r3, r9
 800e7fc:	b292      	uxth	r2, r2
 800e7fe:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800e802:	095b      	lsrs	r3, r3, #5
 800e804:	4640      	mov	r0, r8
 800e806:	f7ff ff9b 	bl	800e740 <acc_confprogram_modify_runif>
 800e80a:	887b      	ldrh	r3, [r7, #2]
 800e80c:	3401      	adds	r4, #1
 800e80e:	42a3      	cmp	r3, r4
 800e810:	d8ef      	bhi.n	800e7f2 <acc_confprogram_patch_offset+0x82>
 800e812:	2001      	movs	r0, #1
 800e814:	e7d9      	b.n	800e7ca <acc_confprogram_patch_offset+0x5a>
 800e816:	1b52      	subs	r2, r2, r5
 800e818:	f1b9 0300 	subs.w	r3, r9, #0
 800e81c:	b292      	uxth	r2, r2
 800e81e:	f3c0 4103 	ubfx	r1, r0, #16, #4
 800e822:	bf18      	it	ne
 800e824:	2301      	movne	r3, #1
 800e826:	e7ed      	b.n	800e804 <acc_confprogram_patch_offset+0x94>
 800e828:	2000069c 	.word	0x2000069c
 800e82c:	08014288 	.word	0x08014288
 800e830:	08014244 	.word	0x08014244

0800e834 <acc_confprogram_live_patch>:
 800e834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e838:	b083      	sub	sp, #12
 800e83a:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	@ 0x34
 800e83e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800e842:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e846:	8873      	ldrh	r3, [r6, #2]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d050      	beq.n	800e8ee <acc_confprogram_live_patch+0xba>
 800e84c:	4607      	mov	r7, r0
 800e84e:	468b      	mov	fp, r1
 800e850:	4690      	mov	r8, r2
 800e852:	2501      	movs	r5, #1
 800e854:	6873      	ldr	r3, [r6, #4]
 800e856:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800e85a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e85e:	f3c0 7401 	ubfx	r4, r0, #28, #2
 800e862:	2c01      	cmp	r4, #1
 800e864:	d00c      	beq.n	800e880 <acc_confprogram_live_patch+0x4c>
 800e866:	2c02      	cmp	r4, #2
 800e868:	d032      	beq.n	800e8d0 <acc_confprogram_live_patch+0x9c>
 800e86a:	b1ec      	cbz	r4, 800e8a8 <acc_confprogram_live_patch+0x74>
 800e86c:	4b22      	ldr	r3, [pc, #136]	@ (800e8f8 <acc_confprogram_live_patch+0xc4>)
 800e86e:	4a23      	ldr	r2, [pc, #140]	@ (800e8fc <acc_confprogram_live_patch+0xc8>)
 800e870:	691b      	ldr	r3, [r3, #16]
 800e872:	4923      	ldr	r1, [pc, #140]	@ (800e900 <acc_confprogram_live_patch+0xcc>)
 800e874:	2000      	movs	r0, #0
 800e876:	4798      	blx	r3
 800e878:	2000      	movs	r0, #0
 800e87a:	b003      	add	sp, #12
 800e87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e880:	eb08 0100 	add.w	r1, r8, r0
 800e884:	b289      	uxth	r1, r1
 800e886:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 800e88a:	f022 020f 	bic.w	r2, r2, #15
 800e88e:	f1b9 0f00 	cmp.w	r9, #0
 800e892:	d002      	beq.n	800e89a <acc_confprogram_live_patch+0x66>
 800e894:	f3c0 4003 	ubfx	r0, r0, #16, #4
 800e898:	4302      	orrs	r2, r0
 800e89a:	4638      	mov	r0, r7
 800e89c:	47d0      	blx	sl
 800e89e:	8873      	ldrh	r3, [r6, #2]
 800e8a0:	42ab      	cmp	r3, r5
 800e8a2:	d924      	bls.n	800e8ee <acc_confprogram_live_patch+0xba>
 800e8a4:	3501      	adds	r5, #1
 800e8a6:	e7d5      	b.n	800e854 <acc_confprogram_live_patch+0x20>
 800e8a8:	eb08 0100 	add.w	r1, r8, r0
 800e8ac:	f3c0 5344 	ubfx	r3, r0, #21, #5
 800e8b0:	f3c0 4204 	ubfx	r2, r0, #16, #5
 800e8b4:	e9cd 9a00 	strd	r9, sl, [sp]
 800e8b8:	b289      	uxth	r1, r1
 800e8ba:	4638      	mov	r0, r7
 800e8bc:	f7ff fec2 	bl	800e644 <acc_confprogram_modify_bin_sensor>
 800e8c0:	8873      	ldrh	r3, [r6, #2]
 800e8c2:	42ab      	cmp	r3, r5
 800e8c4:	d9d9      	bls.n	800e87a <acc_confprogram_live_patch+0x46>
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	d1ec      	bne.n	800e8a4 <acc_confprogram_live_patch+0x70>
 800e8ca:	b003      	add	sp, #12
 800e8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8d0:	eb08 0100 	add.w	r1, r8, r0
 800e8d4:	b289      	uxth	r1, r1
 800e8d6:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 800e8da:	f022 020f 	bic.w	r2, r2, #15
 800e8de:	f1b9 0f00 	cmp.w	r9, #0
 800e8e2:	d0d7      	beq.n	800e894 <acc_confprogram_live_patch+0x60>
 800e8e4:	4638      	mov	r0, r7
 800e8e6:	47d0      	blx	sl
 800e8e8:	8873      	ldrh	r3, [r6, #2]
 800e8ea:	42ab      	cmp	r3, r5
 800e8ec:	d8da      	bhi.n	800e8a4 <acc_confprogram_live_patch+0x70>
 800e8ee:	2001      	movs	r0, #1
 800e8f0:	b003      	add	sp, #12
 800e8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f6:	bf00      	nop
 800e8f8:	2000069c 	.word	0x2000069c
 800e8fc:	080142ac 	.word	0x080142ac
 800e900:	08014244 	.word	0x08014244

0800e904 <acc_confprogram_copy>:
 800e904:	b152      	cbz	r2, 800e91c <acc_confprogram_copy+0x18>
 800e906:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e90a:	3804      	subs	r0, #4
 800e90c:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800e910:	804b      	strh	r3, [r1, #2]
 800e912:	0c1b      	lsrs	r3, r3, #16
 800e914:	800b      	strh	r3, [r1, #0]
 800e916:	3104      	adds	r1, #4
 800e918:	4291      	cmp	r1, r2
 800e91a:	d1f7      	bne.n	800e90c <acc_confprogram_copy+0x8>
 800e91c:	4770      	bx	lr
 800e91e:	bf00      	nop

0800e920 <acc_confprogram_get_parameter_patch_range>:
 800e920:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e924:	b470      	push	{r4, r5, r6}
 800e926:	884e      	ldrh	r6, [r1, #2]
 800e928:	b1c6      	cbz	r6, 800e95c <acc_confprogram_get_parameter_patch_range+0x3c>
 800e92a:	6848      	ldr	r0, [r1, #4]
 800e92c:	2500      	movs	r5, #0
 800e92e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800e932:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 800e936:	f850 1b04 	ldr.w	r1, [r0], #4
 800e93a:	b289      	uxth	r1, r1
 800e93c:	428c      	cmp	r4, r1
 800e93e:	bf28      	it	cs
 800e940:	460c      	movcs	r4, r1
 800e942:	428d      	cmp	r5, r1
 800e944:	bf38      	it	cc
 800e946:	460d      	movcc	r5, r1
 800e948:	4286      	cmp	r6, r0
 800e94a:	d1f4      	bne.n	800e936 <acc_confprogram_get_parameter_patch_range+0x16>
 800e94c:	0064      	lsls	r4, r4, #1
 800e94e:	006d      	lsls	r5, r5, #1
 800e950:	b2a4      	uxth	r4, r4
 800e952:	b2ad      	uxth	r5, r5
 800e954:	8014      	strh	r4, [r2, #0]
 800e956:	801d      	strh	r5, [r3, #0]
 800e958:	bc70      	pop	{r4, r5, r6}
 800e95a:	4770      	bx	lr
 800e95c:	4635      	mov	r5, r6
 800e95e:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 800e962:	8014      	strh	r4, [r2, #0]
 800e964:	801d      	strh	r5, [r3, #0]
 800e966:	bc70      	pop	{r4, r5, r6}
 800e968:	4770      	bx	lr
 800e96a:	bf00      	nop

0800e96c <acc_element_sizeof>:
 800e96c:	3801      	subs	r0, #1
 800e96e:	b2c0      	uxtb	r0, r0
 800e970:	2807      	cmp	r0, #7
 800e972:	bf9a      	itte	ls
 800e974:	4b02      	ldrls	r3, [pc, #8]	@ (800e980 <acc_element_sizeof+0x14>)
 800e976:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e97a:	2000      	movhi	r0, #0
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop
 800e980:	080142d4 	.word	0x080142d4

0800e984 <acc_element_connect>:
 800e984:	6001      	str	r1, [r0, #0]
 800e986:	4770      	bx	lr

0800e988 <acc_probes_execute_struct>:
 800e988:	b530      	push	{r4, r5, lr}
 800e98a:	4c0a      	ldr	r4, [pc, #40]	@ (800e9b4 <acc_probes_execute_struct+0x2c>)
 800e98c:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 800e990:	b085      	sub	sp, #20
 800e992:	6865      	ldr	r5, [r4, #4]
 800e994:	f88d 0004 	strb.w	r0, [sp, #4]
 800e998:	2007      	movs	r0, #7
 800e99a:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800e99e:	b135      	cbz	r5, 800e9ae <acc_probes_execute_struct+0x26>
 800e9a0:	4611      	mov	r1, r2
 800e9a2:	a801      	add	r0, sp, #4
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	68e3      	ldr	r3, [r4, #12]
 800e9a8:	47a8      	blx	r5
 800e9aa:	b005      	add	sp, #20
 800e9ac:	bd30      	pop	{r4, r5, pc}
 800e9ae:	2001      	movs	r0, #1
 800e9b0:	b005      	add	sp, #20
 800e9b2:	bd30      	pop	{r4, r5, pc}
 800e9b4:	2000002c 	.word	0x2000002c

0800e9b8 <acc_sensor_reg_read>:
 800e9b8:	b530      	push	{r4, r5, lr}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 800e9c0:	4614      	mov	r4, r2
 800e9c2:	2500      	movs	r5, #0
 800e9c4:	f8ad 1000 	strh.w	r1, [sp]
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	2203      	movs	r2, #3
 800e9cc:	4669      	mov	r1, sp
 800e9ce:	f8ad 5002 	strh.w	r5, [sp, #2]
 800e9d2:	f8ad 5004 	strh.w	r5, [sp, #4]
 800e9d6:	f7fd fad5 	bl	800bf84 <acc_rss_integration_sensor_device_transfer>
 800e9da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e9de:	8023      	strh	r3, [r4, #0]
 800e9e0:	b003      	add	sp, #12
 800e9e2:	bd30      	pop	{r4, r5, pc}

0800e9e4 <acc_sensor_reg_write>:
 800e9e4:	b530      	push	{r4, r5, lr}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	f441 5480 	orr.w	r4, r1, #4096	@ 0x1000
 800e9ec:	4615      	mov	r5, r2
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	2202      	movs	r2, #2
 800e9f2:	a901      	add	r1, sp, #4
 800e9f4:	f8ad 4004 	strh.w	r4, [sp, #4]
 800e9f8:	f8ad 5006 	strh.w	r5, [sp, #6]
 800e9fc:	f7fd fac2 	bl	800bf84 <acc_rss_integration_sensor_device_transfer>
 800ea00:	b003      	add	sp, #12
 800ea02:	bd30      	pop	{r4, r5, pc}

0800ea04 <acc_sensor_reg_field_write>:
 800ea04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea08:	b082      	sub	sp, #8
 800ea0a:	461d      	mov	r5, r3
 800ea0c:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800ea10:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 800ea14:	f8ad 3000 	strh.w	r3, [sp]
 800ea18:	2700      	movs	r7, #0
 800ea1a:	468a      	mov	sl, r1
 800ea1c:	4691      	mov	r9, r2
 800ea1e:	4669      	mov	r1, sp
 800ea20:	2301      	movs	r3, #1
 800ea22:	2203      	movs	r2, #3
 800ea24:	4680      	mov	r8, r0
 800ea26:	f8ad 7002 	strh.w	r7, [sp, #2]
 800ea2a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800ea2e:	f7fd faa9 	bl	800bf84 <acc_rss_integration_sensor_device_transfer>
 800ea32:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800ea36:	fa04 f10a 	lsl.w	r1, r4, sl
 800ea3a:	4071      	eors	r1, r6
 800ea3c:	ea01 0409 	and.w	r4, r1, r9
 800ea40:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
 800ea44:	4640      	mov	r0, r8
 800ea46:	463b      	mov	r3, r7
 800ea48:	4669      	mov	r1, sp
 800ea4a:	4074      	eors	r4, r6
 800ea4c:	2202      	movs	r2, #2
 800ea4e:	f8ad 5000 	strh.w	r5, [sp]
 800ea52:	f8ad 4002 	strh.w	r4, [sp, #2]
 800ea56:	f7fd fa95 	bl	800bf84 <acc_rss_integration_sensor_device_transfer>
 800ea5a:	b002      	add	sp, #8
 800ea5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ea60 <acc_sensor_conf_read_instr>:
 800ea60:	b530      	push	{r4, r5, lr}
 800ea62:	b085      	sub	sp, #20
 800ea64:	2401      	movs	r4, #1
 800ea66:	f441 4120 	orr.w	r1, r1, #40960	@ 0xa000
 800ea6a:	4623      	mov	r3, r4
 800ea6c:	2500      	movs	r5, #0
 800ea6e:	f8ad 1004 	strh.w	r1, [sp, #4]
 800ea72:	2205      	movs	r2, #5
 800ea74:	a901      	add	r1, sp, #4
 800ea76:	f8ad 4006 	strh.w	r4, [sp, #6]
 800ea7a:	f8ad 5008 	strh.w	r5, [sp, #8]
 800ea7e:	f8cd 500a 	str.w	r5, [sp, #10]
 800ea82:	f7fd fa7f 	bl	800bf84 <acc_rss_integration_sensor_device_transfer>
 800ea86:	f10d 000a 	add.w	r0, sp, #10
 800ea8a:	4622      	mov	r2, r4
 800ea8c:	4669      	mov	r1, sp
 800ea8e:	f000 f92f 	bl	800ecf0 <acc_utils_transfer_buffer_to_uint32>
 800ea92:	9800      	ldr	r0, [sp, #0]
 800ea94:	b005      	add	sp, #20
 800ea96:	bd30      	pop	{r4, r5, pc}

0800ea98 <acc_cpd_pll_divisors_calculate>:
 800ea98:	edd0 7a00 	vldr	s15, [r0]
 800ea9c:	ed9f 6a61 	vldr	s12, [pc, #388]	@ 800ec24 <acc_cpd_pll_divisors_calculate+0x18c>
 800eaa0:	eddf 6a61 	vldr	s13, [pc, #388]	@ 800ec28 <acc_cpd_pll_divisors_calculate+0x190>
 800eaa4:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800eaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaaa:	4606      	mov	r6, r0
 800eaac:	b083      	sub	sp, #12
 800eaae:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800eab2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800eab6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800eaba:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800eabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac2:	ee17 3a10 	vmov	r3, s14
 800eac6:	b29c      	uxth	r4, r3
 800eac8:	dc06      	bgt.n	800ead8 <acc_cpd_pll_divisors_calculate+0x40>
 800eaca:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800ec2c <acc_cpd_pll_divisors_calculate+0x194>
 800eace:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ead2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ead6:	d571      	bpl.n	800ebbc <acc_cpd_pll_divisors_calculate+0x124>
 800ead8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae0:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800ec30 <acc_cpd_pll_divisors_calculate+0x198>
 800eae4:	bf4c      	ite	mi
 800eae6:	4b53      	ldrmi	r3, [pc, #332]	@ (800ec34 <acc_cpd_pll_divisors_calculate+0x19c>)
 800eae8:	4b53      	ldrpl	r3, [pc, #332]	@ (800ec38 <acc_cpd_pll_divisors_calculate+0x1a0>)
 800eaea:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 800ec30 <acc_cpd_pll_divisors_calculate+0x198>
 800eaee:	eddf 6a53 	vldr	s13, [pc, #332]	@ 800ec3c <acc_cpd_pll_divisors_calculate+0x1a4>
 800eaf2:	4d53      	ldr	r5, [pc, #332]	@ (800ec40 <acc_cpd_pll_divisors_calculate+0x1a8>)
 800eaf4:	4953      	ldr	r1, [pc, #332]	@ (800ec44 <acc_cpd_pll_divisors_calculate+0x1ac>)
 800eaf6:	692f      	ldr	r7, [r5, #16]
 800eaf8:	bf48      	it	mi
 800eafa:	eef1 7a67 	vnegmi.f32	s15, s15
 800eafe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb02:	2000      	movs	r0, #0
 800eb04:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800eb08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb10:	ee17 2a10 	vmov	r2, s14
 800eb14:	bf4c      	ite	mi
 800eb16:	eeb1 7a67 	vnegmi.f32	s14, s15
 800eb1a:	eeb0 7a67 	vmovpl.f32	s14, s15
 800eb1e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800eb22:	9200      	str	r2, [sp, #0]
 800eb24:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800eb28:	4a47      	ldr	r2, [pc, #284]	@ (800ec48 <acc_cpd_pll_divisors_calculate+0x1b0>)
 800eb2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800eb2e:	3c10      	subs	r4, #16
 800eb30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eb38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb3c:	edcd 7a01 	vstr	s15, [sp, #4]
 800eb40:	47b8      	blx	r7
 800eb42:	2cef      	cmp	r4, #239	@ 0xef
 800eb44:	d937      	bls.n	800ebb6 <acc_cpd_pll_divisors_calculate+0x11e>
 800eb46:	edd6 7a00 	vldr	s15, [r6]
 800eb4a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800ec30 <acc_cpd_pll_divisors_calculate+0x198>
 800eb4e:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 800ec30 <acc_cpd_pll_divisors_calculate+0x198>
 800eb52:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800ec3c <acc_cpd_pll_divisors_calculate+0x1a4>
 800eb56:	692c      	ldr	r4, [r5, #16]
 800eb58:	493a      	ldr	r1, [pc, #232]	@ (800ec44 <acc_cpd_pll_divisors_calculate+0x1ac>)
 800eb5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb62:	bf48      	it	mi
 800eb64:	eef1 7a67 	vnegmi.f32	s15, s15
 800eb68:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb6c:	bf4c      	ite	mi
 800eb6e:	4b31      	ldrmi	r3, [pc, #196]	@ (800ec34 <acc_cpd_pll_divisors_calculate+0x19c>)
 800eb70:	4b31      	ldrpl	r3, [pc, #196]	@ (800ec38 <acc_cpd_pll_divisors_calculate+0x1a0>)
 800eb72:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800eb76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eb7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb7e:	ee17 2a10 	vmov	r2, s14
 800eb82:	bf4c      	ite	mi
 800eb84:	eeb1 7a67 	vnegmi.f32	s14, s15
 800eb88:	eeb0 7a67 	vmovpl.f32	s14, s15
 800eb8c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800eb90:	9200      	str	r2, [sp, #0]
 800eb92:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800eb96:	4a2c      	ldr	r2, [pc, #176]	@ (800ec48 <acc_cpd_pll_divisors_calculate+0x1b0>)
 800eb98:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eba2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebaa:	edcd 7a01 	vstr	s15, [sp, #4]
 800ebae:	47a0      	blx	r4
 800ebb0:	2000      	movs	r0, #0
 800ebb2:	b003      	add	sp, #12
 800ebb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebb6:	2000      	movs	r0, #0
 800ebb8:	b003      	add	sp, #12
 800ebba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebbc:	f1a4 0310 	sub.w	r3, r4, #16
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	2bef      	cmp	r3, #239	@ 0xef
 800ebc4:	d901      	bls.n	800ebca <acc_cpd_pll_divisors_calculate+0x132>
 800ebc6:	4d1e      	ldr	r5, [pc, #120]	@ (800ec40 <acc_cpd_pll_divisors_calculate+0x1a8>)
 800ebc8:	e7bf      	b.n	800eb4a <acc_cpd_pll_divisors_calculate+0xb2>
 800ebca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ebce:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800ec4c <acc_cpd_pll_divisors_calculate+0x1b4>
 800ebd2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800ec50 <acc_cpd_pll_divisors_calculate+0x1b8>
 800ebd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ebda:	2c3f      	cmp	r4, #63	@ 0x3f
 800ebdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ebe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebe4:	ee17 2a90 	vmov	r2, s15
 800ebe8:	810a      	strh	r2, [r1, #8]
 800ebea:	d912      	bls.n	800ec12 <acc_cpd_pll_divisors_calculate+0x17a>
 800ebec:	2cbf      	cmp	r4, #191	@ 0xbf
 800ebee:	f04f 0301 	mov.w	r3, #1
 800ebf2:	bf98      	it	ls
 800ebf4:	f1a4 0240 	subls.w	r2, r4, #64	@ 0x40
 800ebf8:	804b      	strh	r3, [r1, #2]
 800ebfa:	bf8c      	ite	hi
 800ebfc:	08e2      	lsrhi	r2, r4, #3
 800ebfe:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 800ec02:	f004 0307 	and.w	r3, r4, #7
 800ec06:	808a      	strh	r2, [r1, #4]
 800ec08:	80cb      	strh	r3, [r1, #6]
 800ec0a:	2001      	movs	r0, #1
 800ec0c:	800c      	strh	r4, [r1, #0]
 800ec0e:	b003      	add	sp, #12
 800ec10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec12:	2200      	movs	r2, #0
 800ec14:	2c2f      	cmp	r4, #47	@ 0x2f
 800ec16:	bf88      	it	hi
 800ec18:	4623      	movhi	r3, r4
 800ec1a:	808b      	strh	r3, [r1, #4]
 800ec1c:	804a      	strh	r2, [r1, #2]
 800ec1e:	80ca      	strh	r2, [r1, #6]
 800ec20:	e7f3      	b.n	800ec0a <acc_cpd_pll_divisors_calculate+0x172>
 800ec22:	bf00      	nop
 800ec24:	4f1502f9 	.word	0x4f1502f9
 800ec28:	4c989680 	.word	0x4c989680
 800ec2c:	4b989680 	.word	0x4b989680
 800ec30:	350637bd 	.word	0x350637bd
 800ec34:	08012bc4 	.word	0x08012bc4
 800ec38:	08013be0 	.word	0x08013be0
 800ec3c:	49742400 	.word	0x49742400
 800ec40:	2000069c 	.word	0x2000069c
 800ec44:	08014320 	.word	0x08014320
 800ec48:	080142f4 	.word	0x080142f4
 800ec4c:	b55b38e8 	.word	0xb55b38e8
 800ec50:	427c0000 	.word	0x427c0000

0800ec54 <acc_cpd_pll_divisors_ref_divisor>:
 800ec54:	eddf 7a02 	vldr	s15, [pc, #8]	@ 800ec60 <acc_cpd_pll_divisors_ref_divisor+0xc>
 800ec58:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ec5c:	f002 ba5e 	b.w	801111c <roundf>
 800ec60:	4f1502f9 	.word	0x4f1502f9

0800ec64 <acc_dll_calculate_area_settings>:
 800ec64:	0080      	lsls	r0, r0, #2
 800ec66:	b280      	uxth	r0, r0
 800ec68:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	428b      	cmp	r3, r1
 800ec70:	8010      	strh	r0, [r2, #0]
 800ec72:	8053      	strh	r3, [r2, #2]
 800ec74:	d20c      	bcs.n	800ec90 <acc_dll_calculate_area_settings+0x2c>
 800ec76:	2301      	movs	r3, #1
 800ec78:	2100      	movs	r1, #0
 800ec7a:	2003      	movs	r0, #3
 800ec7c:	8093      	strh	r3, [r2, #4]
 800ec7e:	8153      	strh	r3, [r2, #10]
 800ec80:	8193      	strh	r3, [r2, #12]
 800ec82:	8213      	strh	r3, [r2, #16]
 800ec84:	80d1      	strh	r1, [r2, #6]
 800ec86:	8251      	strh	r1, [r2, #18]
 800ec88:	8291      	strh	r1, [r2, #20]
 800ec8a:	8110      	strh	r0, [r2, #8]
 800ec8c:	81d0      	strh	r0, [r2, #14]
 800ec8e:	4770      	bx	lr
 800ec90:	b430      	push	{r4, r5}
 800ec92:	fbb3 f4f1 	udiv	r4, r3, r1
 800ec96:	2500      	movs	r5, #0
 800ec98:	fb01 3114 	mls	r1, r1, r4, r3
 800ec9c:	2401      	movs	r4, #1
 800ec9e:	2303      	movs	r3, #3
 800eca0:	8094      	strh	r4, [r2, #4]
 800eca2:	80d4      	strh	r4, [r2, #6]
 800eca4:	8154      	strh	r4, [r2, #10]
 800eca6:	8214      	strh	r4, [r2, #16]
 800eca8:	8254      	strh	r4, [r2, #18]
 800ecaa:	8195      	strh	r5, [r2, #12]
 800ecac:	81d5      	strh	r5, [r2, #14]
 800ecae:	8295      	strh	r5, [r2, #20]
 800ecb0:	8050      	strh	r0, [r2, #2]
 800ecb2:	bc30      	pop	{r4, r5}
 800ecb4:	8011      	strh	r1, [r2, #0]
 800ecb6:	8113      	strh	r3, [r2, #8]
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop

0800ecbc <acc_utils_swap16_array>:
 800ecbc:	b141      	cbz	r1, 800ecd0 <acc_utils_swap16_array+0x14>
 800ecbe:	3802      	subs	r0, #2
 800ecc0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ecc4:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ecc8:	ba5b      	rev16	r3, r3
 800ecca:	4288      	cmp	r0, r1
 800eccc:	8003      	strh	r3, [r0, #0]
 800ecce:	d1f9      	bne.n	800ecc4 <acc_utils_swap16_array+0x8>
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop

0800ecd4 <acc_utils_uint32_to_transfer_buffer>:
 800ecd4:	b152      	cbz	r2, 800ecec <acc_utils_uint32_to_transfer_buffer+0x18>
 800ecd6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ecda:	3804      	subs	r0, #4
 800ecdc:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800ece0:	804b      	strh	r3, [r1, #2]
 800ece2:	0c1b      	lsrs	r3, r3, #16
 800ece4:	800b      	strh	r3, [r1, #0]
 800ece6:	3104      	adds	r1, #4
 800ece8:	4291      	cmp	r1, r2
 800ecea:	d1f7      	bne.n	800ecdc <acc_utils_uint32_to_transfer_buffer+0x8>
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop

0800ecf0 <acc_utils_transfer_buffer_to_uint32>:
 800ecf0:	b17a      	cbz	r2, 800ed12 <acc_utils_transfer_buffer_to_uint32+0x22>
 800ecf2:	b410      	push	{r4}
 800ecf4:	3904      	subs	r1, #4
 800ecf6:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 800ecfa:	8802      	ldrh	r2, [r0, #0]
 800ecfc:	8843      	ldrh	r3, [r0, #2]
 800ecfe:	3004      	adds	r0, #4
 800ed00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed04:	4284      	cmp	r4, r0
 800ed06:	f841 3f04 	str.w	r3, [r1, #4]!
 800ed0a:	d1f6      	bne.n	800ecfa <acc_utils_transfer_buffer_to_uint32+0xa>
 800ed0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	4770      	bx	lr

0800ed14 <acc_alg_temp>:
 800ed14:	f240 13e5 	movw	r3, #485	@ 0x1e5
 800ed18:	fb03 f000 	mul.w	r0, r3, r0
 800ed1c:	0c00      	lsrs	r0, r0, #16
 800ed1e:	f5a0 7089 	sub.w	r0, r0, #274	@ 0x112
 800ed22:	4770      	bx	lr

0800ed24 <acc_diagnostic_log_set_scope>:
 800ed24:	4b02      	ldr	r3, [pc, #8]	@ (800ed30 <acc_diagnostic_log_set_scope+0xc>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	b10b      	cbz	r3, 800ed2e <acc_diagnostic_log_set_scope+0xa>
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4718      	bx	r3
 800ed2e:	4770      	bx	lr
 800ed30:	2000054c 	.word	0x2000054c

0800ed34 <acc_diagnostic_log_array>:
 800ed34:	4b02      	ldr	r3, [pc, #8]	@ (800ed40 <acc_diagnostic_log_array+0xc>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	b10b      	cbz	r3, 800ed3e <acc_diagnostic_log_array+0xa>
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	4718      	bx	r3
 800ed3e:	4770      	bx	lr
 800ed40:	2000054c 	.word	0x2000054c

0800ed44 <acc_diagnostic_log_scalar>:
 800ed44:	4b02      	ldr	r3, [pc, #8]	@ (800ed50 <acc_diagnostic_log_scalar+0xc>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	b10b      	cbz	r3, 800ed4e <acc_diagnostic_log_scalar+0xa>
 800ed4a:	695b      	ldr	r3, [r3, #20]
 800ed4c:	4718      	bx	r3
 800ed4e:	4770      	bx	lr
 800ed50:	2000054c 	.word	0x2000054c

0800ed54 <acc_diagnostic_log_data_u16>:
 800ed54:	4b02      	ldr	r3, [pc, #8]	@ (800ed60 <acc_diagnostic_log_data_u16+0xc>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	b10b      	cbz	r3, 800ed5e <acc_diagnostic_log_data_u16+0xa>
 800ed5a:	6a1b      	ldr	r3, [r3, #32]
 800ed5c:	4718      	bx	r3
 800ed5e:	4770      	bx	lr
 800ed60:	2000054c 	.word	0x2000054c

0800ed64 <acc_diagnostic_log_data_i16>:
 800ed64:	4b02      	ldr	r3, [pc, #8]	@ (800ed70 <acc_diagnostic_log_data_i16+0xc>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	b10b      	cbz	r3, 800ed6e <acc_diagnostic_log_data_i16+0xa>
 800ed6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed6c:	4718      	bx	r3
 800ed6e:	4770      	bx	lr
 800ed70:	2000054c 	.word	0x2000054c

0800ed74 <acc_image_a121_r1a_cal_session_get>:
 800ed74:	4800      	ldr	r0, [pc, #0]	@ (800ed78 <acc_image_a121_r1a_cal_session_get+0x4>)
 800ed76:	4770      	bx	lr
 800ed78:	08014334 	.word	0x08014334

0800ed7c <acc_image_a121_r1a_cal_session_param_table_get>:
 800ed7c:	4800      	ldr	r0, [pc, #0]	@ (800ed80 <acc_image_a121_r1a_cal_session_param_table_get+0x4>)
 800ed7e:	4770      	bx	lr
 800ed80:	080159c8 	.word	0x080159c8

0800ed84 <acc_alg_comp_iq_imb>:
 800ed84:	b430      	push	{r4, r5}
 800ed86:	8814      	ldrh	r4, [r2, #0]
 800ed88:	9a02      	ldr	r2, [sp, #8]
 800ed8a:	f004 051f 	and.w	r5, r4, #31
 800ed8e:	3530      	adds	r5, #48	@ 0x30
 800ed90:	fb00 f005 	mul.w	r0, r0, r5
 800ed94:	0aa5      	lsrs	r5, r4, #10
 800ed96:	3d20      	subs	r5, #32
 800ed98:	f3c4 1444 	ubfx	r4, r4, #5, #5
 800ed9c:	fb01 f505 	mul.w	r5, r1, r5
 800eda0:	2800      	cmp	r0, #0
 800eda2:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 800eda6:	fb01 f104 	mul.w	r1, r1, r4
 800edaa:	bfb8      	it	lt
 800edac:	303f      	addlt	r0, #63	@ 0x3f
 800edae:	2d00      	cmp	r5, #0
 800edb0:	bfb8      	it	lt
 800edb2:	351f      	addlt	r5, #31
 800edb4:	2900      	cmp	r1, #0
 800edb6:	ea4f 10a0 	mov.w	r0, r0, asr #6
 800edba:	bfb8      	it	lt
 800edbc:	313f      	addlt	r1, #63	@ 0x3f
 800edbe:	eb00 1065 	add.w	r0, r0, r5, asr #5
 800edc2:	1189      	asrs	r1, r1, #6
 800edc4:	8018      	strh	r0, [r3, #0]
 800edc6:	bc30      	pop	{r4, r5}
 800edc8:	8011      	strh	r1, [r2, #0]
 800edca:	4770      	bx	lr

0800edcc <acc_alg_iq_imb_comp_to_fix_point>:
 800edcc:	eef6 7a08 	vmov.f32	s15, #104	@ 0x3f400000  0.750
 800edd0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800eeac <acc_alg_iq_imb_comp_to_fix_point+0xe0>
 800edd4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800eeb0 <acc_alg_iq_imb_comp_to_fix_point+0xe4>
 800edd8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800eddc:	ee31 1a67 	vsub.f32	s2, s2, s15
 800ede0:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ede4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ede8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800edec:	ee70 0a86 	vadd.f32	s1, s1, s12
 800edf0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800edf4:	ee21 1a07 	vmul.f32	s2, s2, s14
 800edf8:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 800edfc:	ee60 0aa6 	vmul.f32	s1, s1, s13
 800ee00:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ee04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee08:	ee31 1a27 	vadd.f32	s2, s2, s15
 800ee0c:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800ee10:	dc22      	bgt.n	800ee58 <acc_alg_iq_imb_comp_to_fix_point+0x8c>
 800ee12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ee16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee1a:	bf48      	it	mi
 800ee1c:	2300      	movmi	r3, #0
 800ee1e:	d537      	bpl.n	800ee90 <acc_alg_iq_imb_comp_to_fix_point+0xc4>
 800ee20:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800eeb4 <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 800ee24:	eef4 0ae7 	vcmpe.f32	s1, s15
 800ee28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee2c:	dd1d      	ble.n	800ee6a <acc_alg_iq_imb_comp_to_fix_point+0x9e>
 800ee2e:	ea6f 5383 	mvn.w	r3, r3, lsl #22
 800ee32:	ea6f 5393 	mvn.w	r3, r3, lsr #22
 800ee36:	eef3 7a0f 	vmov.f32	s15, #63	@ 0x41f80000  31.0
 800ee3a:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800ee3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee42:	dc20      	bgt.n	800ee86 <acc_alg_iq_imb_comp_to_fix_point+0xba>
 800ee44:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800ee48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee4c:	bf48      	it	mi
 800ee4e:	2200      	movmi	r2, #0
 800ee50:	d524      	bpl.n	800ee9c <acc_alg_iq_imb_comp_to_fix_point+0xd0>
 800ee52:	4313      	orrs	r3, r2
 800ee54:	8003      	strh	r3, [r0, #0]
 800ee56:	4770      	bx	lr
 800ee58:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800eeb4 <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 800ee5c:	eef4 0ae7 	vcmpe.f32	s1, s15
 800ee60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee64:	f04f 031f 	mov.w	r3, #31
 800ee68:	dce1      	bgt.n	800ee2e <acc_alg_iq_imb_comp_to_fix_point+0x62>
 800ee6a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800ee6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee72:	d4e0      	bmi.n	800ee36 <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 800ee74:	eefc 0ae0 	vcvt.u32.f32	s1, s1
 800ee78:	ee10 2a90 	vmov	r2, s1
 800ee7c:	b292      	uxth	r2, r2
 800ee7e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800ee82:	b21b      	sxth	r3, r3
 800ee84:	e7d7      	b.n	800ee36 <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 800ee86:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ee8a:	4313      	orrs	r3, r2
 800ee8c:	8003      	strh	r3, [r0, #0]
 800ee8e:	4770      	bx	lr
 800ee90:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800ee94:	ee10 3a10 	vmov	r3, s0
 800ee98:	b21b      	sxth	r3, r3
 800ee9a:	e7c1      	b.n	800ee20 <acc_alg_iq_imb_comp_to_fix_point+0x54>
 800ee9c:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 800eea0:	ee17 2a90 	vmov	r2, s15
 800eea4:	f342 020a 	sbfx	r2, r2, #0, #11
 800eea8:	0152      	lsls	r2, r2, #5
 800eeaa:	e7d2      	b.n	800ee52 <acc_alg_iq_imb_comp_to_fix_point+0x86>
 800eeac:	42800000 	.word	0x42800000
 800eeb0:	42000000 	.word	0x42000000
 800eeb4:	427c0000 	.word	0x427c0000

0800eeb8 <element_frame_reset>:
 800eeb8:	6800      	ldr	r0, [r0, #0]
 800eeba:	68c3      	ldr	r3, [r0, #12]
 800eebc:	4718      	bx	r3
 800eebe:	bf00      	nop

0800eec0 <element_frame_callback>:
 800eec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec2:	6995      	ldr	r5, [r2, #24]
 800eec4:	782b      	ldrb	r3, [r5, #0]
 800eec6:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 800eeca:	4614      	mov	r4, r2
 800eecc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800eed0:	460f      	mov	r7, r1
 800eed2:	f8b3 6044 	ldrh.w	r6, [r3, #68]	@ 0x44
 800eed6:	6963      	ldr	r3, [r4, #20]
 800eed8:	4601      	mov	r1, r0
 800eeda:	0072      	lsls	r2, r6, #1
 800eedc:	eb03 004e 	add.w	r0, r3, lr, lsl #1
 800eee0:	f000 ff86 	bl	800fdf0 <memmove>
 800eee4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800eee6:	8869      	ldrh	r1, [r5, #2]
 800eee8:	7813      	ldrb	r3, [r2, #0]
 800eeea:	440e      	add	r6, r1
 800eeec:	806e      	strh	r6, [r5, #2]
 800eeee:	b903      	cbnz	r3, 800eef2 <element_frame_callback+0x32>
 800eef0:	793b      	ldrb	r3, [r7, #4]
 800eef2:	7013      	strb	r3, [r2, #0]
 800eef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eef6:	bf00      	nop

0800eef8 <element_frame_event>:
 800eef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eefc:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800eefe:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800ef02:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800ef06:	2400      	movs	r4, #0
 800ef08:	f8a8 4002 	strh.w	r4, [r8, #2]
 800ef0c:	4605      	mov	r5, r0
 800ef0e:	701c      	strb	r4, [r3, #0]
 800ef10:	f100 074c 	add.w	r7, r0, #76	@ 0x4c
 800ef14:	f857 6b04 	ldr.w	r6, [r7], #4
 800ef18:	4649      	mov	r1, r9
 800ef1a:	4630      	mov	r0, r6
 800ef1c:	b136      	cbz	r6, 800ef2c <element_frame_event+0x34>
 800ef1e:	f000 fb11 	bl	800f544 <acc_pipeline_subsweep_prepare_memory>
 800ef22:	f888 4000 	strb.w	r4, [r8]
 800ef26:	4630      	mov	r0, r6
 800ef28:	f000 fb24 	bl	800f574 <acc_pipeline_subsweep_produce>
 800ef2c:	3401      	adds	r4, #1
 800ef2e:	b2e4      	uxtb	r4, r4
 800ef30:	2c04      	cmp	r4, #4
 800ef32:	d1ef      	bne.n	800ef14 <element_frame_event+0x1c>
 800ef34:	6828      	ldr	r0, [r5, #0]
 800ef36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef3a:	6843      	ldr	r3, [r0, #4]
 800ef3c:	4718      	bx	r3
 800ef3e:	bf00      	nop

0800ef40 <element_frame_validate>:
 800ef40:	b570      	push	{r4, r5, r6, lr}
 800ef42:	4604      	mov	r4, r0
 800ef44:	6980      	ldr	r0, [r0, #24]
 800ef46:	b178      	cbz	r0, 800ef68 <element_frame_validate+0x28>
 800ef48:	69e3      	ldr	r3, [r4, #28]
 800ef4a:	b143      	cbz	r3, 800ef5e <element_frame_validate+0x1e>
 800ef4c:	f7fd f894 	bl	800c078 <acc_rss_integration_log_level>
 800ef50:	b128      	cbz	r0, 800ef5e <element_frame_validate+0x1e>
 800ef52:	4b0e      	ldr	r3, [pc, #56]	@ (800ef8c <element_frame_validate+0x4c>)
 800ef54:	4a0e      	ldr	r2, [pc, #56]	@ (800ef90 <element_frame_validate+0x50>)
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	490e      	ldr	r1, [pc, #56]	@ (800ef94 <element_frame_validate+0x54>)
 800ef5a:	2001      	movs	r0, #1
 800ef5c:	4798      	blx	r3
 800ef5e:	6820      	ldr	r0, [r4, #0]
 800ef60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef64:	6883      	ldr	r3, [r0, #8]
 800ef66:	4718      	bx	r3
 800ef68:	4d08      	ldr	r5, [pc, #32]	@ (800ef8c <element_frame_validate+0x4c>)
 800ef6a:	4a0b      	ldr	r2, [pc, #44]	@ (800ef98 <element_frame_validate+0x58>)
 800ef6c:	692b      	ldr	r3, [r5, #16]
 800ef6e:	4909      	ldr	r1, [pc, #36]	@ (800ef94 <element_frame_validate+0x54>)
 800ef70:	4798      	blx	r3
 800ef72:	69e3      	ldr	r3, [r4, #28]
 800ef74:	b13b      	cbz	r3, 800ef86 <element_frame_validate+0x46>
 800ef76:	f7fd f87f 	bl	800c078 <acc_rss_integration_log_level>
 800ef7a:	b120      	cbz	r0, 800ef86 <element_frame_validate+0x46>
 800ef7c:	692b      	ldr	r3, [r5, #16]
 800ef7e:	4a04      	ldr	r2, [pc, #16]	@ (800ef90 <element_frame_validate+0x50>)
 800ef80:	4904      	ldr	r1, [pc, #16]	@ (800ef94 <element_frame_validate+0x54>)
 800ef82:	2001      	movs	r0, #1
 800ef84:	4798      	blx	r3
 800ef86:	2000      	movs	r0, #0
 800ef88:	bd70      	pop	{r4, r5, r6, pc}
 800ef8a:	bf00      	nop
 800ef8c:	2000069c 	.word	0x2000069c
 800ef90:	08015cd8 	.word	0x08015cd8
 800ef94:	08015cc8 	.word	0x08015cc8
 800ef98:	08015cac 	.word	0x08015cac

0800ef9c <acc_element_frame_init>:
 800ef9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efa0:	460d      	mov	r5, r1
 800efa2:	4b33      	ldr	r3, [pc, #204]	@ (800f070 <acc_element_frame_init+0xd4>)
 800efa4:	4a33      	ldr	r2, [pc, #204]	@ (800f074 <acc_element_frame_init+0xd8>)
 800efa6:	4934      	ldr	r1, [pc, #208]	@ (800f078 <acc_element_frame_init+0xdc>)
 800efa8:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800efac:	896e      	ldrh	r6, [r5, #10]
 800efae:	6043      	str	r3, [r0, #4]
 800efb0:	2300      	movs	r3, #0
 800efb2:	e9c0 1202 	strd	r1, r2, [r0, #8]
 800efb6:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
 800efba:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
 800efbe:	f8a0 c038 	strh.w	ip, [r0, #56]	@ 0x38
 800efc2:	8746      	strh	r6, [r0, #58]	@ 0x3a
 800efc4:	79aa      	ldrb	r2, [r5, #6]
 800efc6:	b087      	sub	sp, #28
 800efc8:	2a00      	cmp	r2, #0
 800efca:	d04c      	beq.n	800f066 <acc_element_frame_init+0xca>
 800efcc:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800f088 <acc_element_frame_init+0xec>
 800efd0:	4607      	mov	r7, r0
 800efd2:	4699      	mov	r9, r3
 800efd4:	461c      	mov	r4, r3
 800efd6:	e007      	b.n	800efe8 <acc_element_frame_init+0x4c>
 800efd8:	79ab      	ldrb	r3, [r5, #6]
 800efda:	fa5f f489 	uxtb.w	r4, r9
 800efde:	42a3      	cmp	r3, r4
 800efe0:	d941      	bls.n	800f066 <acc_element_frame_init+0xca>
 800efe2:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 800efe6:	896e      	ldrh	r6, [r5, #10]
 800efe8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800efec:	69e8      	ldr	r0, [r5, #28]
 800efee:	f8ad 6012 	strh.w	r6, [sp, #18]
 800eff2:	eb05 0144 	add.w	r1, r5, r4, lsl #1
 800eff6:	eb07 0244 	add.w	r2, r7, r4, lsl #1
 800effa:	898b      	ldrh	r3, [r1, #12]
 800effc:	8a89      	ldrh	r1, [r1, #20]
 800effe:	f8a2 1044 	strh.w	r1, [r2, #68]	@ 0x44
 800f002:	8793      	strh	r3, [r2, #60]	@ 0x3c
 800f004:	4473      	add	r3, lr
 800f006:	eb00 1204 	add.w	r2, r0, r4, lsl #4
 800f00a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f00e:	4668      	mov	r0, sp
 800f010:	682b      	ldr	r3, [r5, #0]
 800f012:	9302      	str	r3, [sp, #8]
 800f014:	f8cd 8000 	str.w	r8, [sp]
 800f018:	9701      	str	r7, [sp, #4]
 800f01a:	f8ad c010 	strh.w	ip, [sp, #16]
 800f01e:	f8ad 100e 	strh.w	r1, [sp, #14]
 800f022:	9205      	str	r2, [sp, #20]
 800f024:	f000 fa1a 	bl	800f45c <acc_pipeline_subsweep_assemble>
 800f028:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 800f02c:	f109 0901 	add.w	r9, r9, #1
 800f030:	4606      	mov	r6, r0
 800f032:	64d8      	str	r0, [r3, #76]	@ 0x4c
 800f034:	2800      	cmp	r0, #0
 800f036:	d1cf      	bne.n	800efd8 <acc_element_frame_init+0x3c>
 800f038:	4b10      	ldr	r3, [pc, #64]	@ (800f07c <acc_element_frame_init+0xe0>)
 800f03a:	4a11      	ldr	r2, [pc, #68]	@ (800f080 <acc_element_frame_init+0xe4>)
 800f03c:	691b      	ldr	r3, [r3, #16]
 800f03e:	4911      	ldr	r1, [pc, #68]	@ (800f084 <acc_element_frame_init+0xe8>)
 800f040:	4798      	blx	r3
 800f042:	b164      	cbz	r4, 800f05e <acc_element_frame_init+0xc2>
 800f044:	3c01      	subs	r4, #1
 800f046:	b2e4      	uxtb	r4, r4
 800f048:	3413      	adds	r4, #19
 800f04a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f04e:	3748      	adds	r7, #72	@ 0x48
 800f050:	6820      	ldr	r0, [r4, #0]
 800f052:	f000 fa6b 	bl	800f52c <acc_pipeline_subsweep_disassemble>
 800f056:	f844 6904 	str.w	r6, [r4], #-4
 800f05a:	42a7      	cmp	r7, r4
 800f05c:	d1f8      	bne.n	800f050 <acc_element_frame_init+0xb4>
 800f05e:	2000      	movs	r0, #0
 800f060:	b007      	add	sp, #28
 800f062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f066:	2001      	movs	r0, #1
 800f068:	b007      	add	sp, #28
 800f06a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f06e:	bf00      	nop
 800f070:	0800eef9 	.word	0x0800eef9
 800f074:	0800eeb9 	.word	0x0800eeb9
 800f078:	0800ef41 	.word	0x0800ef41
 800f07c:	2000069c 	.word	0x2000069c
 800f080:	08015ce8 	.word	0x08015ce8
 800f084:	08015cc8 	.word	0x08015cc8
 800f088:	0800eec1 	.word	0x0800eec1

0800f08c <acc_element_frame_release>:
 800f08c:	b178      	cbz	r0, 800f0ae <acc_element_frame_release+0x22>
 800f08e:	b570      	push	{r4, r5, r6, lr}
 800f090:	f100 044c 	add.w	r4, r0, #76	@ 0x4c
 800f094:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 800f098:	2600      	movs	r6, #0
 800f09a:	f854 0b04 	ldr.w	r0, [r4], #4
 800f09e:	b118      	cbz	r0, 800f0a8 <acc_element_frame_release+0x1c>
 800f0a0:	f000 fa44 	bl	800f52c <acc_pipeline_subsweep_disassemble>
 800f0a4:	f844 6c04 	str.w	r6, [r4, #-4]
 800f0a8:	42ac      	cmp	r4, r5
 800f0aa:	d1f6      	bne.n	800f09a <acc_element_frame_release+0xe>
 800f0ac:	bd70      	pop	{r4, r5, r6, pc}
 800f0ae:	4770      	bx	lr

0800f0b0 <element_frame_aux_reset>:
 800f0b0:	6800      	ldr	r0, [r0, #0]
 800f0b2:	68c3      	ldr	r3, [r0, #12]
 800f0b4:	4718      	bx	r3
 800f0b6:	bf00      	nop

0800f0b8 <element_frame_aux_validate>:
 800f0b8:	6800      	ldr	r0, [r0, #0]
 800f0ba:	6883      	ldr	r3, [r0, #8]
 800f0bc:	4718      	bx	r3
 800f0be:	bf00      	nop

0800f0c0 <element_frame_aux_event>:
 800f0c0:	b570      	push	{r4, r5, r6, lr}
 800f0c2:	6902      	ldr	r2, [r0, #16]
 800f0c4:	f8b0 1042 	ldrh.w	r1, [r0, #66]	@ 0x42
 800f0c8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 800f0d2:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800f0d4:	2b03      	cmp	r3, #3
 800f0d6:	bf08      	it	eq
 800f0d8:	f480 4000 	eoreq.w	r0, r0, #32768	@ 0x8000
 800f0dc:	f7ff fe1a 	bl	800ed14 <acc_alg_temp>
 800f0e0:	8028      	strh	r0, [r5, #0]
 800f0e2:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800f0e4:	6923      	ldr	r3, [r4, #16]
 800f0e6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f0ea:	b14a      	cbz	r2, 800f100 <element_frame_aux_event+0x40>
 800f0ec:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 800f0f0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f0f4:	2a01      	cmp	r2, #1
 800f0f6:	d903      	bls.n	800f100 <element_frame_aux_event+0x40>
 800f0f8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800f0fa:	2101      	movs	r1, #1
 800f0fc:	7011      	strb	r1, [r2, #0]
 800f0fe:	e002      	b.n	800f106 <element_frame_aux_event+0x46>
 800f100:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800f102:	2100      	movs	r1, #0
 800f104:	7011      	strb	r1, [r2, #0]
 800f106:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800f108:	8fe0      	ldrh	r0, [r4, #62]	@ 0x3e
 800f10a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800f10e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800f112:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800f114:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800f116:	882d      	ldrh	r5, [r5, #0]
 800f118:	f1a2 0301 	sub.w	r3, r2, #1
 800f11c:	fab3 f383 	clz	r3, r3
 800f120:	095b      	lsrs	r3, r3, #5
 800f122:	700b      	strb	r3, [r1, #0]
 800f124:	f7ff fdf6 	bl	800ed14 <acc_alg_temp>
 800f128:	1a2d      	subs	r5, r5, r0
 800f12a:	b22d      	sxth	r5, r5
 800f12c:	2d00      	cmp	r5, #0
 800f12e:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 800f132:	6820      	ldr	r0, [r4, #0]
 800f134:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f136:	bfb8      	it	lt
 800f138:	426d      	neglt	r5, r5
 800f13a:	b22d      	sxth	r5, r5
 800f13c:	42ab      	cmp	r3, r5
 800f13e:	bfac      	ite	ge
 800f140:	2500      	movge	r5, #0
 800f142:	2501      	movlt	r5, #1
 800f144:	7015      	strb	r5, [r2, #0]
 800f146:	6843      	ldr	r3, [r0, #4]
 800f148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f14c:	4718      	bx	r3
 800f14e:	bf00      	nop

0800f150 <acc_element_frame_aux_init>:
 800f150:	b430      	push	{r4, r5}
 800f152:	880b      	ldrh	r3, [r1, #0]
 800f154:	4d0c      	ldr	r5, [pc, #48]	@ (800f188 <acc_element_frame_aux_init+0x38>)
 800f156:	4c0d      	ldr	r4, [pc, #52]	@ (800f18c <acc_element_frame_aux_init+0x3c>)
 800f158:	4a0d      	ldr	r2, [pc, #52]	@ (800f190 <acc_element_frame_aux_init+0x40>)
 800f15a:	6045      	str	r5, [r0, #4]
 800f15c:	884d      	ldrh	r5, [r1, #2]
 800f15e:	6084      	str	r4, [r0, #8]
 800f160:	888c      	ldrh	r4, [r1, #4]
 800f162:	60c2      	str	r2, [r0, #12]
 800f164:	88ca      	ldrh	r2, [r1, #6]
 800f166:	8743      	strh	r3, [r0, #58]	@ 0x3a
 800f168:	890b      	ldrh	r3, [r1, #8]
 800f16a:	f8a0 3042 	strh.w	r3, [r0, #66]	@ 0x42
 800f16e:	8785      	strh	r5, [r0, #60]	@ 0x3c
 800f170:	87c4      	strh	r4, [r0, #62]	@ 0x3e
 800f172:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800f176:	7b0b      	ldrb	r3, [r1, #12]
 800f178:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800f17c:	894b      	ldrh	r3, [r1, #10]
 800f17e:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
 800f182:	bc30      	pop	{r4, r5}
 800f184:	2001      	movs	r0, #1
 800f186:	4770      	bx	lr
 800f188:	0800f0c1 	.word	0x0800f0c1
 800f18c:	0800f0b9 	.word	0x0800f0b9
 800f190:	0800f0b1 	.word	0x0800f0b1

0800f194 <acc_element_frame_aux_release>:
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop

0800f198 <sink_a121_callback_consume>:
 800f198:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	@ 0x3c
 800f19c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800f19e:	6900      	ldr	r0, [r0, #16]
 800f1a0:	4718      	bx	r3
 800f1a2:	bf00      	nop

0800f1a4 <sink_a121_callback_reset>:
 800f1a4:	4770      	bx	lr
 800f1a6:	bf00      	nop

0800f1a8 <sink_a121_callback_validate>:
 800f1a8:	6983      	ldr	r3, [r0, #24]
 800f1aa:	b510      	push	{r4, lr}
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	b1bb      	cbz	r3, 800f1e0 <sink_a121_callback_validate+0x38>
 800f1b0:	f7fc ff62 	bl	800c078 <acc_rss_integration_log_level>
 800f1b4:	b948      	cbnz	r0, 800f1ca <sink_a121_callback_validate+0x22>
 800f1b6:	6963      	ldr	r3, [r4, #20]
 800f1b8:	b183      	cbz	r3, 800f1dc <sink_a121_callback_validate+0x34>
 800f1ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f1e8 <sink_a121_callback_validate+0x40>)
 800f1bc:	4a0b      	ldr	r2, [pc, #44]	@ (800f1ec <sink_a121_callback_validate+0x44>)
 800f1be:	691b      	ldr	r3, [r3, #16]
 800f1c0:	490b      	ldr	r1, [pc, #44]	@ (800f1f0 <sink_a121_callback_validate+0x48>)
 800f1c2:	2000      	movs	r0, #0
 800f1c4:	4798      	blx	r3
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	bd10      	pop	{r4, pc}
 800f1ca:	4b07      	ldr	r3, [pc, #28]	@ (800f1e8 <sink_a121_callback_validate+0x40>)
 800f1cc:	4a09      	ldr	r2, [pc, #36]	@ (800f1f4 <sink_a121_callback_validate+0x4c>)
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	4907      	ldr	r1, [pc, #28]	@ (800f1f0 <sink_a121_callback_validate+0x48>)
 800f1d2:	2001      	movs	r0, #1
 800f1d4:	4798      	blx	r3
 800f1d6:	6963      	ldr	r3, [r4, #20]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d1ee      	bne.n	800f1ba <sink_a121_callback_validate+0x12>
 800f1dc:	2001      	movs	r0, #1
 800f1de:	bd10      	pop	{r4, pc}
 800f1e0:	69c3      	ldr	r3, [r0, #28]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d1e4      	bne.n	800f1b0 <sink_a121_callback_validate+0x8>
 800f1e6:	e7e6      	b.n	800f1b6 <sink_a121_callback_validate+0xe>
 800f1e8:	2000069c 	.word	0x2000069c
 800f1ec:	08015d44 	.word	0x08015d44
 800f1f0:	08015d28 	.word	0x08015d28
 800f1f4:	08015d0c 	.word	0x08015d0c

0800f1f8 <acc_element_sink_a121_callback_init>:
 800f1f8:	b410      	push	{r4}
 800f1fa:	4a05      	ldr	r2, [pc, #20]	@ (800f210 <acc_element_sink_a121_callback_init+0x18>)
 800f1fc:	4c05      	ldr	r4, [pc, #20]	@ (800f214 <acc_element_sink_a121_callback_init+0x1c>)
 800f1fe:	4b06      	ldr	r3, [pc, #24]	@ (800f218 <acc_element_sink_a121_callback_init+0x20>)
 800f200:	6401      	str	r1, [r0, #64]	@ 0x40
 800f202:	e9c0 4201 	strd	r4, r2, [r0, #4]
 800f206:	60c3      	str	r3, [r0, #12]
 800f208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop
 800f210:	0800f1a9 	.word	0x0800f1a9
 800f214:	0800f199 	.word	0x0800f199
 800f218:	0800f1a5 	.word	0x0800f1a5

0800f21c <patch_program_parameters>:
 800f21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f220:	f5c2 661d 	rsb	r6, r2, #2512	@ 0x9d0
 800f224:	469a      	mov	sl, r3
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	360e      	adds	r6, #14
 800f22a:	42b3      	cmp	r3, r6
 800f22c:	b083      	sub	sp, #12
 800f22e:	bf94      	ite	ls
 800f230:	b29e      	uxthls	r6, r3
 800f232:	b2b6      	uxthhi	r6, r6
 800f234:	4690      	mov	r8, r2
 800f236:	4605      	mov	r5, r0
 800f238:	4689      	mov	r9, r1
 800f23a:	f000 f9a7 	bl	800f58c <acc_image_a121_r1a_meas_session_get>
 800f23e:	ea4f 0358 	mov.w	r3, r8, lsr #1
 800f242:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800f246:	0872      	lsrs	r2, r6, #1
 800f248:	4649      	mov	r1, r9
 800f24a:	f7ff fb5b 	bl	800e904 <acc_confprogram_copy>
 800f24e:	f000 f9a5 	bl	800f59c <acc_cpd_a121_meas_session_parameters_patch_table_get>
 800f252:	4607      	mov	r7, r0
 800f254:	3d02      	subs	r5, #2
 800f256:	1e44      	subs	r4, r0, #1
 800f258:	37e1      	adds	r7, #225	@ 0xe1
 800f25a:	f814 bf01 	ldrb.w	fp, [r4, #1]!
 800f25e:	f000 f999 	bl	800f594 <acc_image_a121_r1a_meas_session_param_table_get>
 800f262:	f835 2f02 	ldrh.w	r2, [r5, #2]!
 800f266:	4603      	mov	r3, r0
 800f268:	e9cd b200 	strd	fp, r2, [sp]
 800f26c:	4641      	mov	r1, r8
 800f26e:	4632      	mov	r2, r6
 800f270:	4648      	mov	r0, r9
 800f272:	f7ff fa7d 	bl	800e770 <acc_confprogram_patch_offset>
 800f276:	42bc      	cmp	r4, r7
 800f278:	d001      	beq.n	800f27e <patch_program_parameters+0x62>
 800f27a:	2800      	cmp	r0, #0
 800f27c:	d1ed      	bne.n	800f25a <patch_program_parameters+0x3e>
 800f27e:	f8ca 6000 	str.w	r6, [sl]
 800f282:	b003      	add	sp, #12
 800f284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f288 <get_parameter_patch_range.constprop.0>:
 800f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	b085      	sub	sp, #20
 800f28e:	4606      	mov	r6, r0
 800f290:	460d      	mov	r5, r1
 800f292:	4693      	mov	fp, r2
 800f294:	469a      	mov	sl, r3
 800f296:	f000 f981 	bl	800f59c <acc_cpd_a121_meas_session_parameters_patch_table_get>
 800f29a:	3e02      	subs	r6, #2
 800f29c:	4604      	mov	r4, r0
 800f29e:	3d02      	subs	r5, #2
 800f2a0:	f100 09e2 	add.w	r9, r0, #226	@ 0xe2
 800f2a4:	2700      	movs	r7, #0
 800f2a6:	f640 18de 	movw	r8, #2526	@ 0x9de
 800f2aa:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 800f2ae:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d013      	beq.n	800f2de <get_parameter_patch_range.constprop.0+0x56>
 800f2b6:	7821      	ldrb	r1, [r4, #0]
 800f2b8:	9101      	str	r1, [sp, #4]
 800f2ba:	f000 f96b 	bl	800f594 <acc_image_a121_r1a_meas_session_param_table_get>
 800f2be:	f10d 030e 	add.w	r3, sp, #14
 800f2c2:	aa03      	add	r2, sp, #12
 800f2c4:	9901      	ldr	r1, [sp, #4]
 800f2c6:	f7ff fb2b 	bl	800e920 <acc_confprogram_get_parameter_patch_range>
 800f2ca:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f2ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f2d2:	4590      	cmp	r8, r2
 800f2d4:	bf28      	it	cs
 800f2d6:	4690      	movcs	r8, r2
 800f2d8:	429f      	cmp	r7, r3
 800f2da:	bf38      	it	cc
 800f2dc:	461f      	movcc	r7, r3
 800f2de:	3401      	adds	r4, #1
 800f2e0:	454c      	cmp	r4, r9
 800f2e2:	d1e2      	bne.n	800f2aa <get_parameter_patch_range.constprop.0+0x22>
 800f2e4:	f8ab 8000 	strh.w	r8, [fp]
 800f2e8:	f8aa 7000 	strh.w	r7, [sl]
 800f2ec:	b005      	add	sp, #20
 800f2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2f2:	bf00      	nop

0800f2f4 <acc_cpd_a121_meas_session_load_program>:
 800f2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2f8:	4688      	mov	r8, r1
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	4607      	mov	r7, r0
 800f2fe:	4611      	mov	r1, r2
 800f300:	4640      	mov	r0, r8
 800f302:	4699      	mov	r9, r3
 800f304:	2400      	movs	r4, #0
 800f306:	ab02      	add	r3, sp, #8
 800f308:	aa01      	add	r2, sp, #4
 800f30a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800f30e:	f7fd fb51 	bl	800c9b4 <acc_sensor_a121_prepare_load_confmem>
 800f312:	4638      	mov	r0, r7
 800f314:	f7fd fbf8 	bl	800cb08 <acc_sensor_protocol_a121_prepare_load>
 800f318:	b1d8      	cbz	r0, 800f352 <acc_cpd_a121_meas_session_load_program+0x5e>
 800f31a:	9d02      	ldr	r5, [sp, #8]
 800f31c:	f640 1add 	movw	sl, #2525	@ 0x9dd
 800f320:	e000      	b.n	800f324 <acc_cpd_a121_meas_session_load_program+0x30>
 800f322:	b1b6      	cbz	r6, 800f352 <acc_cpd_a121_meas_session_load_program+0x5e>
 800f324:	4622      	mov	r2, r4
 800f326:	9901      	ldr	r1, [sp, #4]
 800f328:	9503      	str	r5, [sp, #12]
 800f32a:	ab03      	add	r3, sp, #12
 800f32c:	4648      	mov	r0, r9
 800f32e:	f7ff ff75 	bl	800f21c <patch_program_parameters>
 800f332:	0861      	lsrs	r1, r4, #1
 800f334:	4606      	mov	r6, r0
 800f336:	9b03      	ldr	r3, [sp, #12]
 800f338:	4638      	mov	r0, r7
 800f33a:	4642      	mov	r2, r8
 800f33c:	f7fd fb52 	bl	800c9e4 <acc_sensor_a121_load_confmem>
 800f340:	9d02      	ldr	r5, [sp, #8]
 800f342:	442c      	add	r4, r5
 800f344:	b2a4      	uxth	r4, r4
 800f346:	4554      	cmp	r4, sl
 800f348:	4630      	mov	r0, r6
 800f34a:	d9ea      	bls.n	800f322 <acc_cpd_a121_meas_session_load_program+0x2e>
 800f34c:	b004      	add	sp, #16
 800f34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f352:	2000      	movs	r0, #0
 800f354:	b004      	add	sp, #16
 800f356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f35a:	bf00      	nop

0800f35c <acc_cpd_a121_meas_session_run_program>:
 800f35c:	2115      	movs	r1, #21
 800f35e:	f7fd bc29 	b.w	800cbb4 <acc_sensor_protocol_a121_run_program>
 800f362:	bf00      	nop

0800f364 <acc_cpd_a121_meas_session_is_patch_needed>:
 800f364:	b500      	push	{lr}
 800f366:	b083      	sub	sp, #12
 800f368:	f10d 0306 	add.w	r3, sp, #6
 800f36c:	aa01      	add	r2, sp, #4
 800f36e:	f7ff ff8b 	bl	800f288 <get_parameter_patch_range.constprop.0>
 800f372:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800f376:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f37a:	4298      	cmp	r0, r3
 800f37c:	bf34      	ite	cc
 800f37e:	2000      	movcc	r0, #0
 800f380:	2001      	movcs	r0, #1
 800f382:	b003      	add	sp, #12
 800f384:	f85d fb04 	ldr.w	pc, [sp], #4

0800f388 <acc_cpd_a121_meas_session_update_program>:
 800f388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f38c:	b085      	sub	sp, #20
 800f38e:	468a      	mov	sl, r1
 800f390:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 800f394:	4693      	mov	fp, r2
 800f396:	461c      	mov	r4, r3
 800f398:	4607      	mov	r7, r0
 800f39a:	f7fd fbf7 	bl	800cb8c <acc_sensor_protocol_a121_is_ready_to_update>
 800f39e:	b198      	cbz	r0, 800f3c8 <acc_cpd_a121_meas_session_update_program+0x40>
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	ab03      	add	r3, sp, #12
 800f3a4:	aa02      	add	r2, sp, #8
 800f3a6:	4649      	mov	r1, r9
 800f3a8:	f7ff ff6e 	bl	800f288 <get_parameter_patch_range.constprop.0>
 800f3ac:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800f3b0:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 800f3b4:	4544      	cmp	r4, r8
 800f3b6:	d91c      	bls.n	800f3f2 <acc_cpd_a121_meas_session_update_program+0x6a>
 800f3b8:	2501      	movs	r5, #1
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	f7fd fdc8 	bl	800cf50 <acc_sensor_protocol_a121_reconfigure>
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	b005      	add	sp, #20
 800f3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3c8:	4638      	mov	r0, r7
 800f3ca:	f7fd fdab 	bl	800cf24 <acc_sensor_protocol_a121_is_hibernate>
 800f3ce:	4605      	mov	r5, r0
 800f3d0:	2800      	cmp	r0, #0
 800f3d2:	d1e5      	bne.n	800f3a0 <acc_cpd_a121_meas_session_update_program+0x18>
 800f3d4:	f7fc fe50 	bl	800c078 <acc_rss_integration_log_level>
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	d0f1      	beq.n	800f3c0 <acc_cpd_a121_meas_session_update_program+0x38>
 800f3dc:	4b18      	ldr	r3, [pc, #96]	@ (800f440 <acc_cpd_a121_meas_session_update_program+0xb8>)
 800f3de:	4a19      	ldr	r2, [pc, #100]	@ (800f444 <acc_cpd_a121_meas_session_update_program+0xbc>)
 800f3e0:	691c      	ldr	r4, [r3, #16]
 800f3e2:	4919      	ldr	r1, [pc, #100]	@ (800f448 <acc_cpd_a121_meas_session_update_program+0xc0>)
 800f3e4:	463b      	mov	r3, r7
 800f3e6:	2001      	movs	r0, #1
 800f3e8:	47a0      	blx	r4
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	b005      	add	sp, #20
 800f3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f2:	ab02      	add	r3, sp, #8
 800f3f4:	f108 0602 	add.w	r6, r8, #2
 800f3f8:	4659      	mov	r1, fp
 800f3fa:	aa01      	add	r2, sp, #4
 800f3fc:	4650      	mov	r0, sl
 800f3fe:	f7fd fad9 	bl	800c9b4 <acc_sensor_a121_prepare_load_confmem>
 800f402:	1b36      	subs	r6, r6, r4
 800f404:	9b02      	ldr	r3, [sp, #8]
 800f406:	b2b6      	uxth	r6, r6
 800f408:	429e      	cmp	r6, r3
 800f40a:	bf28      	it	cs
 800f40c:	461e      	movcs	r6, r3
 800f40e:	9602      	str	r6, [sp, #8]
 800f410:	e004      	b.n	800f41c <acc_cpd_a121_meas_session_update_program+0x94>
 800f412:	9e02      	ldr	r6, [sp, #8]
 800f414:	4434      	add	r4, r6
 800f416:	b2a4      	uxth	r4, r4
 800f418:	4544      	cmp	r4, r8
 800f41a:	d8ce      	bhi.n	800f3ba <acc_cpd_a121_meas_session_update_program+0x32>
 800f41c:	9901      	ldr	r1, [sp, #4]
 800f41e:	9603      	str	r6, [sp, #12]
 800f420:	ab03      	add	r3, sp, #12
 800f422:	4622      	mov	r2, r4
 800f424:	4648      	mov	r0, r9
 800f426:	f7ff fef9 	bl	800f21c <patch_program_parameters>
 800f42a:	4605      	mov	r5, r0
 800f42c:	2800      	cmp	r0, #0
 800f42e:	d0f0      	beq.n	800f412 <acc_cpd_a121_meas_session_update_program+0x8a>
 800f430:	9b03      	ldr	r3, [sp, #12]
 800f432:	4652      	mov	r2, sl
 800f434:	0861      	lsrs	r1, r4, #1
 800f436:	4638      	mov	r0, r7
 800f438:	f7fd fad4 	bl	800c9e4 <acc_sensor_a121_load_confmem>
 800f43c:	e7e9      	b.n	800f412 <acc_cpd_a121_meas_session_update_program+0x8a>
 800f43e:	bf00      	nop
 800f440:	2000069c 	.word	0x2000069c
 800f444:	08015d6c 	.word	0x08015d6c
 800f448:	08015d90 	.word	0x08015d90

0800f44c <acc_cpd_a121_meas_session_transfer_data>:
 800f44c:	b410      	push	{r4}
 800f44e:	460c      	mov	r4, r1
 800f450:	4611      	mov	r1, r2
 800f452:	4622      	mov	r2, r4
 800f454:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f458:	f7fd baee 	b.w	800ca38 <acc_sensor_a121_buffer_processed_read>

0800f45c <acc_pipeline_subsweep_assemble>:
 800f45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f45e:	4a30      	ldr	r2, [pc, #192]	@ (800f520 <acc_pipeline_subsweep_assemble+0xc4>)
 800f460:	b085      	sub	sp, #20
 800f462:	4605      	mov	r5, r0
 800f464:	2333      	movs	r3, #51	@ 0x33
 800f466:	21e8      	movs	r1, #232	@ 0xe8
 800f468:	2001      	movs	r0, #1
 800f46a:	f7fc fdd5 	bl	800c018 <acc_rss_integration_mem_calloc_debug>
 800f46e:	4604      	mov	r4, r0
 800f470:	2800      	cmp	r0, #0
 800f472:	d042      	beq.n	800f4fa <acc_pipeline_subsweep_assemble+0x9e>
 800f474:	89ab      	ldrh	r3, [r5, #12]
 800f476:	68a9      	ldr	r1, [r5, #8]
 800f478:	8a2e      	ldrh	r6, [r5, #16]
 800f47a:	8a6a      	ldrh	r2, [r5, #18]
 800f47c:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f480:	f100 073c 	add.w	r7, r0, #60	@ 0x3c
 800f484:	696b      	ldr	r3, [r5, #20]
 800f486:	9100      	str	r1, [sp, #0]
 800f488:	f8ad 6006 	strh.w	r6, [sp, #6]
 800f48c:	4669      	mov	r1, sp
 800f48e:	f104 0694 	add.w	r6, r4, #148	@ 0x94
 800f492:	4638      	mov	r0, r7
 800f494:	f8ad 2008 	strh.w	r2, [sp, #8]
 800f498:	9303      	str	r3, [sp, #12]
 800f49a:	f000 f975 	bl	800f788 <acc_element_phase_enhancement_init>
 800f49e:	6829      	ldr	r1, [r5, #0]
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	f7ff fea9 	bl	800f1f8 <acc_element_sink_a121_callback_init>
 800f4a6:	89eb      	ldrh	r3, [r5, #14]
 800f4a8:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 800f4ac:	6868      	ldr	r0, [r5, #4]
 800f4ae:	f8c4 00d0 	str.w	r0, [r4, #208]	@ 0xd0
 800f4b2:	005b      	lsls	r3, r3, #1
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	f104 05e0 	add.w	r5, r4, #224	@ 0xe0
 800f4ba:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 800f4be:	f104 03e4 	add.w	r3, r4, #228	@ 0xe4
 800f4c2:	f8a4 c092 	strh.w	ip, [r4, #146]	@ 0x92
 800f4c6:	f8a4 c0d8 	strh.w	ip, [r4, #216]	@ 0xd8
 800f4ca:	8722      	strh	r2, [r4, #56]	@ 0x38
 800f4cc:	f8a4 2090 	strh.w	r2, [r4, #144]	@ 0x90
 800f4d0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 800f4d4:	4639      	mov	r1, r7
 800f4d6:	6265      	str	r5, [r4, #36]	@ 0x24
 800f4d8:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 800f4dc:	4620      	mov	r0, r4
 800f4de:	f7ff fa51 	bl	800e984 <acc_element_connect>
 800f4e2:	4631      	mov	r1, r6
 800f4e4:	4638      	mov	r0, r7
 800f4e6:	f7ff fa4d 	bl	800e984 <acc_element_connect>
 800f4ea:	6820      	ldr	r0, [r4, #0]
 800f4ec:	6883      	ldr	r3, [r0, #8]
 800f4ee:	4798      	blx	r3
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	b128      	cbz	r0, 800f500 <acc_pipeline_subsweep_assemble+0xa4>
 800f4f4:	6820      	ldr	r0, [r4, #0]
 800f4f6:	68c3      	ldr	r3, [r0, #12]
 800f4f8:	4798      	blx	r3
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	b005      	add	sp, #20
 800f4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f500:	4b08      	ldr	r3, [pc, #32]	@ (800f524 <acc_pipeline_subsweep_assemble+0xc8>)
 800f502:	4a09      	ldr	r2, [pc, #36]	@ (800f528 <acc_pipeline_subsweep_assemble+0xcc>)
 800f504:	691b      	ldr	r3, [r3, #16]
 800f506:	4906      	ldr	r1, [pc, #24]	@ (800f520 <acc_pipeline_subsweep_assemble+0xc4>)
 800f508:	4798      	blx	r3
 800f50a:	4638      	mov	r0, r7
 800f50c:	f000 f96e 	bl	800f7ec <acc_element_phase_enhancement_release>
 800f510:	4620      	mov	r0, r4
 800f512:	f7fc fd9d 	bl	800c050 <acc_rss_integration_mem_free>
 800f516:	462c      	mov	r4, r5
 800f518:	4620      	mov	r0, r4
 800f51a:	b005      	add	sp, #20
 800f51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f51e:	bf00      	nop
 800f520:	08015da8 	.word	0x08015da8
 800f524:	2000069c 	.word	0x2000069c
 800f528:	08013a0c 	.word	0x08013a0c

0800f52c <acc_pipeline_subsweep_disassemble>:
 800f52c:	b148      	cbz	r0, 800f542 <acc_pipeline_subsweep_disassemble+0x16>
 800f52e:	b510      	push	{r4, lr}
 800f530:	4604      	mov	r4, r0
 800f532:	303c      	adds	r0, #60	@ 0x3c
 800f534:	f000 f95a 	bl	800f7ec <acc_element_phase_enhancement_release>
 800f538:	4620      	mov	r0, r4
 800f53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f53e:	f7fc bd87 	b.w	800c050 <acc_rss_integration_mem_free>
 800f542:	4770      	bx	lr

0800f544 <acc_pipeline_subsweep_prepare_memory>:
 800f544:	b430      	push	{r4, r5}
 800f546:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800f54a:	f8b0 50d8 	ldrh.w	r5, [r0, #216]	@ 0xd8
 800f54e:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800f550:	f8b0 3092 	ldrh.w	r3, [r0, #146]	@ 0x92
 800f554:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800f558:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800f55c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800f560:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800f564:	6144      	str	r4, [r0, #20]
 800f566:	e9c0 2313 	strd	r2, r3, [r0, #76]	@ 0x4c
 800f56a:	bc30      	pop	{r4, r5}
 800f56c:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop

0800f574 <acc_pipeline_subsweep_produce>:
 800f574:	6803      	ldr	r3, [r0, #0]
 800f576:	f8d0 20dc 	ldr.w	r2, [r0, #220]	@ 0xdc
 800f57a:	f8c0 20e0 	str.w	r2, [r0, #224]	@ 0xe0
 800f57e:	2100      	movs	r1, #0
 800f580:	f880 10e4 	strb.w	r1, [r0, #228]	@ 0xe4
 800f584:	685a      	ldr	r2, [r3, #4]
 800f586:	4618      	mov	r0, r3
 800f588:	4710      	bx	r2
 800f58a:	bf00      	nop

0800f58c <acc_image_a121_r1a_meas_session_get>:
 800f58c:	4800      	ldr	r0, [pc, #0]	@ (800f590 <acc_image_a121_r1a_meas_session_get+0x4>)
 800f58e:	4770      	bx	lr
 800f590:	08015dbc 	.word	0x08015dbc

0800f594 <acc_image_a121_r1a_meas_session_param_table_get>:
 800f594:	4800      	ldr	r0, [pc, #0]	@ (800f598 <acc_image_a121_r1a_meas_session_param_table_get+0x4>)
 800f596:	4770      	bx	lr
 800f598:	08017178 	.word	0x08017178

0800f59c <acc_cpd_a121_meas_session_parameters_patch_table_get>:
 800f59c:	4800      	ldr	r0, [pc, #0]	@ (800f5a0 <acc_cpd_a121_meas_session_parameters_patch_table_get+0x4>)
 800f59e:	4770      	bx	lr
 800f5a0:	08017f20 	.word	0x08017f20

0800f5a4 <element_phase_enhancement_reset>:
 800f5a4:	6800      	ldr	r0, [r0, #0]
 800f5a6:	68c3      	ldr	r3, [r0, #12]
 800f5a8:	4718      	bx	r3
 800f5aa:	bf00      	nop

0800f5ac <element_phase_enhancement_validate>:
 800f5ac:	6800      	ldr	r0, [r0, #0]
 800f5ae:	6883      	ldr	r3, [r0, #8]
 800f5b0:	4718      	bx	r3
 800f5b2:	bf00      	nop

0800f5b4 <element_phase_enhancement_event>:
 800f5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b8:	ed2d 8b04 	vpush	{d8-d9}
 800f5bc:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f5c0:	b089      	sub	sp, #36	@ 0x24
 800f5c2:	4683      	mov	fp, r0
 800f5c4:	9303      	str	r3, [sp, #12]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f000 80d1 	beq.w	800f76e <element_phase_enhancement_event+0x1ba>
 800f5cc:	8fc2      	ldrh	r2, [r0, #62]	@ 0x3e
 800f5ce:	6904      	ldr	r4, [r0, #16]
 800f5d0:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 800f5d2:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 800f5d6:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800f5d8:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 800f5dc:	9006      	str	r0, [sp, #24]
 800f5de:	0052      	lsls	r2, r2, #1
 800f5e0:	9201      	str	r2, [sp, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	f000 80c3 	beq.w	800f76e <element_phase_enhancement_event+0x1ba>
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	010a      	lsls	r2, r1, #4
 800f5ec:	eddf 8a64 	vldr	s17, [pc, #400]	@ 800f780 <element_phase_enhancement_event+0x1cc>
 800f5f0:	9302      	str	r3, [sp, #8]
 800f5f2:	9207      	str	r2, [sp, #28]
 800f5f4:	469a      	mov	sl, r3
 800f5f6:	e9db 3211 	ldrd	r3, r2, [fp, #68]	@ 0x44
 800f5fa:	f8bb 604e 	ldrh.w	r6, [fp, #78]	@ 0x4e
 800f5fe:	4413      	add	r3, r2
 800f600:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800f604:	fb02 3606 	mla	r6, r2, r6, r3
 800f608:	2118      	movs	r1, #24
 800f60a:	4630      	mov	r0, r6
 800f60c:	f7fe f902 	bl	800d814 <acc_translation_a121_point_in_coarse>
 800f610:	2118      	movs	r1, #24
 800f612:	4605      	mov	r5, r0
 800f614:	4630      	mov	r0, r6
 800f616:	f7fe f8ef 	bl	800d7f8 <acc_translation_a121_point_to_coarse>
 800f61a:	9b07      	ldr	r3, [sp, #28]
 800f61c:	0400      	lsls	r0, r0, #16
 800f61e:	fb80 0103 	smull	r0, r1, r0, r3
 800f622:	2800      	cmp	r0, #0
 800f624:	f171 0300 	sbcs.w	r3, r1, #0
 800f628:	da04      	bge.n	800f634 <element_phase_enhancement_event+0x80>
 800f62a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f62e:	18c0      	adds	r0, r0, r3
 800f630:	f141 0100 	adc.w	r1, r1, #0
 800f634:	9b06      	ldr	r3, [sp, #24]
 800f636:	441d      	add	r5, r3
 800f638:	0c03      	lsrs	r3, r0, #16
 800f63a:	f934 2015 	ldrsh.w	r2, [r4, r5, lsl #1]
 800f63e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f642:	eba3 1302 	sub.w	r3, r3, r2, lsl #4
 800f646:	ee07 3a90 	vmov	s15, r3
 800f64a:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800f64e:	ee29 9a28 	vmul.f32	s18, s18, s17
 800f652:	eeb0 0a49 	vmov.f32	s0, s18
 800f656:	f001 fbe7 	bl	8010e28 <cosf>
 800f65a:	eeb0 8a40 	vmov.f32	s16, s0
 800f65e:	eeb0 0a49 	vmov.f32	s0, s18
 800f662:	f001 fc2d 	bl	8010ec0 <sinf>
 800f666:	f8bb 9040 	ldrh.w	r9, [fp, #64]	@ 0x40
 800f66a:	f1b9 0f00 	cmp.w	r9, #0
 800f66e:	d073      	beq.n	800f758 <element_phase_enhancement_event+0x1a4>
 800f670:	f8db 3050 	ldr.w	r3, [fp, #80]	@ 0x50
 800f674:	f8bb 2042 	ldrh.w	r2, [fp, #66]	@ 0x42
 800f678:	f8cd b014 	str.w	fp, [sp, #20]
 800f67c:	2000      	movs	r0, #0
 800f67e:	f893 8000 	ldrb.w	r8, [r3]
 800f682:	f8df c100 	ldr.w	ip, [pc, #256]	@ 800f784 <element_phase_enhancement_event+0x1d0>
 800f686:	9304      	str	r3, [sp, #16]
 800f688:	4605      	mov	r5, r0
 800f68a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f68e:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 800f692:	4693      	mov	fp, r2
 800f694:	e009      	b.n	800f6aa <element_phase_enhancement_event+0xf6>
 800f696:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f69a:	52e2      	strh	r2, [r4, r3]
 800f69c:	3501      	adds	r5, #1
 800f69e:	fa1f fe85 	uxth.w	lr, r5
 800f6a2:	45f1      	cmp	r9, lr
 800f6a4:	4458      	add	r0, fp
 800f6a6:	8071      	strh	r1, [r6, #2]
 800f6a8:	d952      	bls.n	800f750 <element_phase_enhancement_event+0x19c>
 800f6aa:	9a01      	ldr	r2, [sp, #4]
 800f6ac:	eb0a 0350 	add.w	r3, sl, r0, lsr #1
 800f6b0:	b29b      	uxth	r3, r3
 800f6b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f6b6:	18e6      	adds	r6, r4, r3
 800f6b8:	5ee2      	ldrsh	r2, [r4, r3]
 800f6ba:	ee07 2a90 	vmov	s15, r2
 800f6be:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 800f6c2:	ee06 2a90 	vmov	s13, r2
 800f6c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f6ca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f6ce:	ee27 7a88 	vmul.f32	s14, s15, s16
 800f6d2:	ee66 5a80 	vmul.f32	s11, s13, s0
 800f6d6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f6da:	ee66 6a88 	vmul.f32	s13, s13, s16
 800f6de:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f6f2:	bf4c      	ite	mi
 800f6f4:	ee37 7a46 	vsubmi.f32	s14, s14, s12
 800f6f8:	ee37 7a06 	vaddpl.f32	s14, s14, s12
 800f6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f700:	bf4c      	ite	mi
 800f702:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 800f706:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 800f70a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800f70e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f712:	ee17 ea10 	vmov	lr, s14
 800f716:	ee17 1a90 	vmov	r1, s15
 800f71a:	ee17 2a10 	vmov	r2, s14
 800f71e:	45e6      	cmp	lr, ip
 800f720:	bfb8      	it	lt
 800f722:	4662      	movlt	r2, ip
 800f724:	4561      	cmp	r1, ip
 800f726:	bfb8      	it	lt
 800f728:	4661      	movlt	r1, ip
 800f72a:	42ba      	cmp	r2, r7
 800f72c:	bfa8      	it	ge
 800f72e:	463a      	movge	r2, r7
 800f730:	42b9      	cmp	r1, r7
 800f732:	bfa8      	it	ge
 800f734:	4639      	movge	r1, r7
 800f736:	f1b8 0f00 	cmp.w	r8, #0
 800f73a:	d1ae      	bne.n	800f69a <element_phase_enhancement_event+0xe6>
 800f73c:	4596      	cmp	lr, r2
 800f73e:	d1aa      	bne.n	800f696 <element_phase_enhancement_event+0xe2>
 800f740:	ee17 ea90 	vmov	lr, s15
 800f744:	ebbe 0801 	subs.w	r8, lr, r1
 800f748:	bf18      	it	ne
 800f74a:	f04f 0801 	movne.w	r8, #1
 800f74e:	e7a4      	b.n	800f69a <element_phase_enhancement_event+0xe6>
 800f750:	e9dd 3b04 	ldrd	r3, fp, [sp, #16]
 800f754:	f883 8000 	strb.w	r8, [r3]
 800f758:	9b02      	ldr	r3, [sp, #8]
 800f75a:	3301      	adds	r3, #1
 800f75c:	461a      	mov	r2, r3
 800f75e:	9302      	str	r3, [sp, #8]
 800f760:	f8bb 304c 	ldrh.w	r3, [fp, #76]	@ 0x4c
 800f764:	fa1f fa82 	uxth.w	sl, r2
 800f768:	4553      	cmp	r3, sl
 800f76a:	f63f af44 	bhi.w	800f5f6 <element_phase_enhancement_event+0x42>
 800f76e:	f8db 0000 	ldr.w	r0, [fp]
 800f772:	6843      	ldr	r3, [r0, #4]
 800f774:	b009      	add	sp, #36	@ 0x24
 800f776:	ecbd 8b04 	vpop	{d8-d9}
 800f77a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77e:	4718      	bx	r3
 800f780:	37800000 	.word	0x37800000
 800f784:	ffff8000 	.word	0xffff8000

0800f788 <acc_element_phase_enhancement_init>:
 800f788:	b570      	push	{r4, r5, r6, lr}
 800f78a:	4604      	mov	r4, r0
 800f78c:	460d      	mov	r5, r1
 800f78e:	4814      	ldr	r0, [pc, #80]	@ (800f7e0 <acc_element_phase_enhancement_init+0x58>)
 800f790:	4914      	ldr	r1, [pc, #80]	@ (800f7e4 <acc_element_phase_enhancement_init+0x5c>)
 800f792:	68eb      	ldr	r3, [r5, #12]
 800f794:	4a14      	ldr	r2, [pc, #80]	@ (800f7e8 <acc_element_phase_enhancement_init+0x60>)
 800f796:	60e2      	str	r2, [r4, #12]
 800f798:	e9c4 0101 	strd	r0, r1, [r4, #4]
 800f79c:	b082      	sub	sp, #8
 800f79e:	a901      	add	r1, sp, #4
 800f7a0:	7bd8      	ldrb	r0, [r3, #15]
 800f7a2:	f7fd fc65 	bl	800d070 <acc_translation_a121_profile_to_start_point_offset>
 800f7a6:	68eb      	ldr	r3, [r5, #12]
 800f7a8:	882a      	ldrh	r2, [r5, #0]
 800f7aa:	8869      	ldrh	r1, [r5, #2]
 800f7ac:	8762      	strh	r2, [r4, #58]	@ 0x3a
 800f7ae:	88aa      	ldrh	r2, [r5, #4]
 800f7b0:	88ee      	ldrh	r6, [r5, #6]
 800f7b2:	87a1      	strh	r1, [r4, #60]	@ 0x3c
 800f7b4:	8929      	ldrh	r1, [r5, #8]
 800f7b6:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 800f7b8:	7b1a      	ldrb	r2, [r3, #12]
 800f7ba:	681d      	ldr	r5, [r3, #0]
 800f7bc:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
 800f7c0:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 800f7c4:	9901      	ldr	r1, [sp, #4]
 800f7c6:	88da      	ldrh	r2, [r3, #6]
 800f7c8:	889b      	ldrh	r3, [r3, #4]
 800f7ca:	f8a4 6040 	strh.w	r6, [r4, #64]	@ 0x40
 800f7ce:	e9c4 5111 	strd	r5, r1, [r4, #68]	@ 0x44
 800f7d2:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 800f7d6:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 800f7da:	b002      	add	sp, #8
 800f7dc:	bd70      	pop	{r4, r5, r6, pc}
 800f7de:	bf00      	nop
 800f7e0:	0800f5b5 	.word	0x0800f5b5
 800f7e4:	0800f5ad 	.word	0x0800f5ad
 800f7e8:	0800f5a5 	.word	0x0800f5a5

0800f7ec <acc_element_phase_enhancement_release>:
 800f7ec:	4770      	bx	lr
 800f7ee:	bf00      	nop

0800f7f0 <malloc>:
 800f7f0:	4b02      	ldr	r3, [pc, #8]	@ (800f7fc <malloc+0xc>)
 800f7f2:	4601      	mov	r1, r0
 800f7f4:	6818      	ldr	r0, [r3, #0]
 800f7f6:	f000 b82d 	b.w	800f854 <_malloc_r>
 800f7fa:	bf00      	nop
 800f7fc:	200001b8 	.word	0x200001b8

0800f800 <free>:
 800f800:	4b02      	ldr	r3, [pc, #8]	@ (800f80c <free+0xc>)
 800f802:	4601      	mov	r1, r0
 800f804:	6818      	ldr	r0, [r3, #0]
 800f806:	f000 bba7 	b.w	800ff58 <_free_r>
 800f80a:	bf00      	nop
 800f80c:	200001b8 	.word	0x200001b8

0800f810 <sbrk_aligned>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	4e0f      	ldr	r6, [pc, #60]	@ (800f850 <sbrk_aligned+0x40>)
 800f814:	460c      	mov	r4, r1
 800f816:	6831      	ldr	r1, [r6, #0]
 800f818:	4605      	mov	r5, r0
 800f81a:	b911      	cbnz	r1, 800f822 <sbrk_aligned+0x12>
 800f81c:	f000 fb3e 	bl	800fe9c <_sbrk_r>
 800f820:	6030      	str	r0, [r6, #0]
 800f822:	4621      	mov	r1, r4
 800f824:	4628      	mov	r0, r5
 800f826:	f000 fb39 	bl	800fe9c <_sbrk_r>
 800f82a:	1c43      	adds	r3, r0, #1
 800f82c:	d103      	bne.n	800f836 <sbrk_aligned+0x26>
 800f82e:	f04f 34ff 	mov.w	r4, #4294967295
 800f832:	4620      	mov	r0, r4
 800f834:	bd70      	pop	{r4, r5, r6, pc}
 800f836:	1cc4      	adds	r4, r0, #3
 800f838:	f024 0403 	bic.w	r4, r4, #3
 800f83c:	42a0      	cmp	r0, r4
 800f83e:	d0f8      	beq.n	800f832 <sbrk_aligned+0x22>
 800f840:	1a21      	subs	r1, r4, r0
 800f842:	4628      	mov	r0, r5
 800f844:	f000 fb2a 	bl	800fe9c <_sbrk_r>
 800f848:	3001      	adds	r0, #1
 800f84a:	d1f2      	bne.n	800f832 <sbrk_aligned+0x22>
 800f84c:	e7ef      	b.n	800f82e <sbrk_aligned+0x1e>
 800f84e:	bf00      	nop
 800f850:	20000550 	.word	0x20000550

0800f854 <_malloc_r>:
 800f854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f858:	1ccd      	adds	r5, r1, #3
 800f85a:	f025 0503 	bic.w	r5, r5, #3
 800f85e:	3508      	adds	r5, #8
 800f860:	2d0c      	cmp	r5, #12
 800f862:	bf38      	it	cc
 800f864:	250c      	movcc	r5, #12
 800f866:	2d00      	cmp	r5, #0
 800f868:	4606      	mov	r6, r0
 800f86a:	db01      	blt.n	800f870 <_malloc_r+0x1c>
 800f86c:	42a9      	cmp	r1, r5
 800f86e:	d904      	bls.n	800f87a <_malloc_r+0x26>
 800f870:	230c      	movs	r3, #12
 800f872:	6033      	str	r3, [r6, #0]
 800f874:	2000      	movs	r0, #0
 800f876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f87a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f950 <_malloc_r+0xfc>
 800f87e:	f000 f869 	bl	800f954 <__malloc_lock>
 800f882:	f8d8 3000 	ldr.w	r3, [r8]
 800f886:	461c      	mov	r4, r3
 800f888:	bb44      	cbnz	r4, 800f8dc <_malloc_r+0x88>
 800f88a:	4629      	mov	r1, r5
 800f88c:	4630      	mov	r0, r6
 800f88e:	f7ff ffbf 	bl	800f810 <sbrk_aligned>
 800f892:	1c43      	adds	r3, r0, #1
 800f894:	4604      	mov	r4, r0
 800f896:	d158      	bne.n	800f94a <_malloc_r+0xf6>
 800f898:	f8d8 4000 	ldr.w	r4, [r8]
 800f89c:	4627      	mov	r7, r4
 800f89e:	2f00      	cmp	r7, #0
 800f8a0:	d143      	bne.n	800f92a <_malloc_r+0xd6>
 800f8a2:	2c00      	cmp	r4, #0
 800f8a4:	d04b      	beq.n	800f93e <_malloc_r+0xea>
 800f8a6:	6823      	ldr	r3, [r4, #0]
 800f8a8:	4639      	mov	r1, r7
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	eb04 0903 	add.w	r9, r4, r3
 800f8b0:	f000 faf4 	bl	800fe9c <_sbrk_r>
 800f8b4:	4581      	cmp	r9, r0
 800f8b6:	d142      	bne.n	800f93e <_malloc_r+0xea>
 800f8b8:	6821      	ldr	r1, [r4, #0]
 800f8ba:	1a6d      	subs	r5, r5, r1
 800f8bc:	4629      	mov	r1, r5
 800f8be:	4630      	mov	r0, r6
 800f8c0:	f7ff ffa6 	bl	800f810 <sbrk_aligned>
 800f8c4:	3001      	adds	r0, #1
 800f8c6:	d03a      	beq.n	800f93e <_malloc_r+0xea>
 800f8c8:	6823      	ldr	r3, [r4, #0]
 800f8ca:	442b      	add	r3, r5
 800f8cc:	6023      	str	r3, [r4, #0]
 800f8ce:	f8d8 3000 	ldr.w	r3, [r8]
 800f8d2:	685a      	ldr	r2, [r3, #4]
 800f8d4:	bb62      	cbnz	r2, 800f930 <_malloc_r+0xdc>
 800f8d6:	f8c8 7000 	str.w	r7, [r8]
 800f8da:	e00f      	b.n	800f8fc <_malloc_r+0xa8>
 800f8dc:	6822      	ldr	r2, [r4, #0]
 800f8de:	1b52      	subs	r2, r2, r5
 800f8e0:	d420      	bmi.n	800f924 <_malloc_r+0xd0>
 800f8e2:	2a0b      	cmp	r2, #11
 800f8e4:	d917      	bls.n	800f916 <_malloc_r+0xc2>
 800f8e6:	1961      	adds	r1, r4, r5
 800f8e8:	42a3      	cmp	r3, r4
 800f8ea:	6025      	str	r5, [r4, #0]
 800f8ec:	bf18      	it	ne
 800f8ee:	6059      	strne	r1, [r3, #4]
 800f8f0:	6863      	ldr	r3, [r4, #4]
 800f8f2:	bf08      	it	eq
 800f8f4:	f8c8 1000 	streq.w	r1, [r8]
 800f8f8:	5162      	str	r2, [r4, r5]
 800f8fa:	604b      	str	r3, [r1, #4]
 800f8fc:	4630      	mov	r0, r6
 800f8fe:	f000 f82f 	bl	800f960 <__malloc_unlock>
 800f902:	f104 000b 	add.w	r0, r4, #11
 800f906:	1d23      	adds	r3, r4, #4
 800f908:	f020 0007 	bic.w	r0, r0, #7
 800f90c:	1ac2      	subs	r2, r0, r3
 800f90e:	bf1c      	itt	ne
 800f910:	1a1b      	subne	r3, r3, r0
 800f912:	50a3      	strne	r3, [r4, r2]
 800f914:	e7af      	b.n	800f876 <_malloc_r+0x22>
 800f916:	6862      	ldr	r2, [r4, #4]
 800f918:	42a3      	cmp	r3, r4
 800f91a:	bf0c      	ite	eq
 800f91c:	f8c8 2000 	streq.w	r2, [r8]
 800f920:	605a      	strne	r2, [r3, #4]
 800f922:	e7eb      	b.n	800f8fc <_malloc_r+0xa8>
 800f924:	4623      	mov	r3, r4
 800f926:	6864      	ldr	r4, [r4, #4]
 800f928:	e7ae      	b.n	800f888 <_malloc_r+0x34>
 800f92a:	463c      	mov	r4, r7
 800f92c:	687f      	ldr	r7, [r7, #4]
 800f92e:	e7b6      	b.n	800f89e <_malloc_r+0x4a>
 800f930:	461a      	mov	r2, r3
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	42a3      	cmp	r3, r4
 800f936:	d1fb      	bne.n	800f930 <_malloc_r+0xdc>
 800f938:	2300      	movs	r3, #0
 800f93a:	6053      	str	r3, [r2, #4]
 800f93c:	e7de      	b.n	800f8fc <_malloc_r+0xa8>
 800f93e:	230c      	movs	r3, #12
 800f940:	6033      	str	r3, [r6, #0]
 800f942:	4630      	mov	r0, r6
 800f944:	f000 f80c 	bl	800f960 <__malloc_unlock>
 800f948:	e794      	b.n	800f874 <_malloc_r+0x20>
 800f94a:	6005      	str	r5, [r0, #0]
 800f94c:	e7d6      	b.n	800f8fc <_malloc_r+0xa8>
 800f94e:	bf00      	nop
 800f950:	20000554 	.word	0x20000554

0800f954 <__malloc_lock>:
 800f954:	4801      	ldr	r0, [pc, #4]	@ (800f95c <__malloc_lock+0x8>)
 800f956:	f000 baee 	b.w	800ff36 <__retarget_lock_acquire_recursive>
 800f95a:	bf00      	nop
 800f95c:	20000698 	.word	0x20000698

0800f960 <__malloc_unlock>:
 800f960:	4801      	ldr	r0, [pc, #4]	@ (800f968 <__malloc_unlock+0x8>)
 800f962:	f000 bae9 	b.w	800ff38 <__retarget_lock_release_recursive>
 800f966:	bf00      	nop
 800f968:	20000698 	.word	0x20000698

0800f96c <std>:
 800f96c:	2300      	movs	r3, #0
 800f96e:	b510      	push	{r4, lr}
 800f970:	4604      	mov	r4, r0
 800f972:	e9c0 3300 	strd	r3, r3, [r0]
 800f976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f97a:	6083      	str	r3, [r0, #8]
 800f97c:	8181      	strh	r1, [r0, #12]
 800f97e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f980:	81c2      	strh	r2, [r0, #14]
 800f982:	6183      	str	r3, [r0, #24]
 800f984:	4619      	mov	r1, r3
 800f986:	2208      	movs	r2, #8
 800f988:	305c      	adds	r0, #92	@ 0x5c
 800f98a:	f000 fa4b 	bl	800fe24 <memset>
 800f98e:	4b0d      	ldr	r3, [pc, #52]	@ (800f9c4 <std+0x58>)
 800f990:	6263      	str	r3, [r4, #36]	@ 0x24
 800f992:	4b0d      	ldr	r3, [pc, #52]	@ (800f9c8 <std+0x5c>)
 800f994:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f996:	4b0d      	ldr	r3, [pc, #52]	@ (800f9cc <std+0x60>)
 800f998:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f99a:	4b0d      	ldr	r3, [pc, #52]	@ (800f9d0 <std+0x64>)
 800f99c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f99e:	4b0d      	ldr	r3, [pc, #52]	@ (800f9d4 <std+0x68>)
 800f9a0:	6224      	str	r4, [r4, #32]
 800f9a2:	429c      	cmp	r4, r3
 800f9a4:	d006      	beq.n	800f9b4 <std+0x48>
 800f9a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f9aa:	4294      	cmp	r4, r2
 800f9ac:	d002      	beq.n	800f9b4 <std+0x48>
 800f9ae:	33d0      	adds	r3, #208	@ 0xd0
 800f9b0:	429c      	cmp	r4, r3
 800f9b2:	d105      	bne.n	800f9c0 <std+0x54>
 800f9b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9bc:	f000 baba 	b.w	800ff34 <__retarget_lock_init_recursive>
 800f9c0:	bd10      	pop	{r4, pc}
 800f9c2:	bf00      	nop
 800f9c4:	0800fbd1 	.word	0x0800fbd1
 800f9c8:	0800fbf3 	.word	0x0800fbf3
 800f9cc:	0800fc2b 	.word	0x0800fc2b
 800f9d0:	0800fc4f 	.word	0x0800fc4f
 800f9d4:	20000558 	.word	0x20000558

0800f9d8 <stdio_exit_handler>:
 800f9d8:	4a02      	ldr	r2, [pc, #8]	@ (800f9e4 <stdio_exit_handler+0xc>)
 800f9da:	4903      	ldr	r1, [pc, #12]	@ (800f9e8 <stdio_exit_handler+0x10>)
 800f9dc:	4803      	ldr	r0, [pc, #12]	@ (800f9ec <stdio_exit_handler+0x14>)
 800f9de:	f000 b869 	b.w	800fab4 <_fwalk_sglue>
 800f9e2:	bf00      	nop
 800f9e4:	200001ac 	.word	0x200001ac
 800f9e8:	08010945 	.word	0x08010945
 800f9ec:	200001bc 	.word	0x200001bc

0800f9f0 <cleanup_stdio>:
 800f9f0:	6841      	ldr	r1, [r0, #4]
 800f9f2:	4b0c      	ldr	r3, [pc, #48]	@ (800fa24 <cleanup_stdio+0x34>)
 800f9f4:	4299      	cmp	r1, r3
 800f9f6:	b510      	push	{r4, lr}
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	d001      	beq.n	800fa00 <cleanup_stdio+0x10>
 800f9fc:	f000 ffa2 	bl	8010944 <_fflush_r>
 800fa00:	68a1      	ldr	r1, [r4, #8]
 800fa02:	4b09      	ldr	r3, [pc, #36]	@ (800fa28 <cleanup_stdio+0x38>)
 800fa04:	4299      	cmp	r1, r3
 800fa06:	d002      	beq.n	800fa0e <cleanup_stdio+0x1e>
 800fa08:	4620      	mov	r0, r4
 800fa0a:	f000 ff9b 	bl	8010944 <_fflush_r>
 800fa0e:	68e1      	ldr	r1, [r4, #12]
 800fa10:	4b06      	ldr	r3, [pc, #24]	@ (800fa2c <cleanup_stdio+0x3c>)
 800fa12:	4299      	cmp	r1, r3
 800fa14:	d004      	beq.n	800fa20 <cleanup_stdio+0x30>
 800fa16:	4620      	mov	r0, r4
 800fa18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa1c:	f000 bf92 	b.w	8010944 <_fflush_r>
 800fa20:	bd10      	pop	{r4, pc}
 800fa22:	bf00      	nop
 800fa24:	20000558 	.word	0x20000558
 800fa28:	200005c0 	.word	0x200005c0
 800fa2c:	20000628 	.word	0x20000628

0800fa30 <global_stdio_init.part.0>:
 800fa30:	b510      	push	{r4, lr}
 800fa32:	4b0b      	ldr	r3, [pc, #44]	@ (800fa60 <global_stdio_init.part.0+0x30>)
 800fa34:	4c0b      	ldr	r4, [pc, #44]	@ (800fa64 <global_stdio_init.part.0+0x34>)
 800fa36:	4a0c      	ldr	r2, [pc, #48]	@ (800fa68 <global_stdio_init.part.0+0x38>)
 800fa38:	601a      	str	r2, [r3, #0]
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	2104      	movs	r1, #4
 800fa40:	f7ff ff94 	bl	800f96c <std>
 800fa44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fa48:	2201      	movs	r2, #1
 800fa4a:	2109      	movs	r1, #9
 800fa4c:	f7ff ff8e 	bl	800f96c <std>
 800fa50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fa54:	2202      	movs	r2, #2
 800fa56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa5a:	2112      	movs	r1, #18
 800fa5c:	f7ff bf86 	b.w	800f96c <std>
 800fa60:	20000690 	.word	0x20000690
 800fa64:	20000558 	.word	0x20000558
 800fa68:	0800f9d9 	.word	0x0800f9d9

0800fa6c <__sfp_lock_acquire>:
 800fa6c:	4801      	ldr	r0, [pc, #4]	@ (800fa74 <__sfp_lock_acquire+0x8>)
 800fa6e:	f000 ba62 	b.w	800ff36 <__retarget_lock_acquire_recursive>
 800fa72:	bf00      	nop
 800fa74:	20000699 	.word	0x20000699

0800fa78 <__sfp_lock_release>:
 800fa78:	4801      	ldr	r0, [pc, #4]	@ (800fa80 <__sfp_lock_release+0x8>)
 800fa7a:	f000 ba5d 	b.w	800ff38 <__retarget_lock_release_recursive>
 800fa7e:	bf00      	nop
 800fa80:	20000699 	.word	0x20000699

0800fa84 <__sinit>:
 800fa84:	b510      	push	{r4, lr}
 800fa86:	4604      	mov	r4, r0
 800fa88:	f7ff fff0 	bl	800fa6c <__sfp_lock_acquire>
 800fa8c:	6a23      	ldr	r3, [r4, #32]
 800fa8e:	b11b      	cbz	r3, 800fa98 <__sinit+0x14>
 800fa90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa94:	f7ff bff0 	b.w	800fa78 <__sfp_lock_release>
 800fa98:	4b04      	ldr	r3, [pc, #16]	@ (800faac <__sinit+0x28>)
 800fa9a:	6223      	str	r3, [r4, #32]
 800fa9c:	4b04      	ldr	r3, [pc, #16]	@ (800fab0 <__sinit+0x2c>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d1f5      	bne.n	800fa90 <__sinit+0xc>
 800faa4:	f7ff ffc4 	bl	800fa30 <global_stdio_init.part.0>
 800faa8:	e7f2      	b.n	800fa90 <__sinit+0xc>
 800faaa:	bf00      	nop
 800faac:	0800f9f1 	.word	0x0800f9f1
 800fab0:	20000690 	.word	0x20000690

0800fab4 <_fwalk_sglue>:
 800fab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fab8:	4607      	mov	r7, r0
 800faba:	4688      	mov	r8, r1
 800fabc:	4614      	mov	r4, r2
 800fabe:	2600      	movs	r6, #0
 800fac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fac4:	f1b9 0901 	subs.w	r9, r9, #1
 800fac8:	d505      	bpl.n	800fad6 <_fwalk_sglue+0x22>
 800faca:	6824      	ldr	r4, [r4, #0]
 800facc:	2c00      	cmp	r4, #0
 800face:	d1f7      	bne.n	800fac0 <_fwalk_sglue+0xc>
 800fad0:	4630      	mov	r0, r6
 800fad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fad6:	89ab      	ldrh	r3, [r5, #12]
 800fad8:	2b01      	cmp	r3, #1
 800fada:	d907      	bls.n	800faec <_fwalk_sglue+0x38>
 800fadc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fae0:	3301      	adds	r3, #1
 800fae2:	d003      	beq.n	800faec <_fwalk_sglue+0x38>
 800fae4:	4629      	mov	r1, r5
 800fae6:	4638      	mov	r0, r7
 800fae8:	47c0      	blx	r8
 800faea:	4306      	orrs	r6, r0
 800faec:	3568      	adds	r5, #104	@ 0x68
 800faee:	e7e9      	b.n	800fac4 <_fwalk_sglue+0x10>

0800faf0 <iprintf>:
 800faf0:	b40f      	push	{r0, r1, r2, r3}
 800faf2:	b507      	push	{r0, r1, r2, lr}
 800faf4:	4906      	ldr	r1, [pc, #24]	@ (800fb10 <iprintf+0x20>)
 800faf6:	ab04      	add	r3, sp, #16
 800faf8:	6808      	ldr	r0, [r1, #0]
 800fafa:	f853 2b04 	ldr.w	r2, [r3], #4
 800fafe:	6881      	ldr	r1, [r0, #8]
 800fb00:	9301      	str	r3, [sp, #4]
 800fb02:	f000 fbf5 	bl	80102f0 <_vfiprintf_r>
 800fb06:	b003      	add	sp, #12
 800fb08:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb0c:	b004      	add	sp, #16
 800fb0e:	4770      	bx	lr
 800fb10:	200001b8 	.word	0x200001b8

0800fb14 <_puts_r>:
 800fb14:	6a03      	ldr	r3, [r0, #32]
 800fb16:	b570      	push	{r4, r5, r6, lr}
 800fb18:	6884      	ldr	r4, [r0, #8]
 800fb1a:	4605      	mov	r5, r0
 800fb1c:	460e      	mov	r6, r1
 800fb1e:	b90b      	cbnz	r3, 800fb24 <_puts_r+0x10>
 800fb20:	f7ff ffb0 	bl	800fa84 <__sinit>
 800fb24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fb26:	07db      	lsls	r3, r3, #31
 800fb28:	d405      	bmi.n	800fb36 <_puts_r+0x22>
 800fb2a:	89a3      	ldrh	r3, [r4, #12]
 800fb2c:	0598      	lsls	r0, r3, #22
 800fb2e:	d402      	bmi.n	800fb36 <_puts_r+0x22>
 800fb30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb32:	f000 fa00 	bl	800ff36 <__retarget_lock_acquire_recursive>
 800fb36:	89a3      	ldrh	r3, [r4, #12]
 800fb38:	0719      	lsls	r1, r3, #28
 800fb3a:	d502      	bpl.n	800fb42 <_puts_r+0x2e>
 800fb3c:	6923      	ldr	r3, [r4, #16]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d135      	bne.n	800fbae <_puts_r+0x9a>
 800fb42:	4621      	mov	r1, r4
 800fb44:	4628      	mov	r0, r5
 800fb46:	f000 f8fd 	bl	800fd44 <__swsetup_r>
 800fb4a:	b380      	cbz	r0, 800fbae <_puts_r+0x9a>
 800fb4c:	f04f 35ff 	mov.w	r5, #4294967295
 800fb50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fb52:	07da      	lsls	r2, r3, #31
 800fb54:	d405      	bmi.n	800fb62 <_puts_r+0x4e>
 800fb56:	89a3      	ldrh	r3, [r4, #12]
 800fb58:	059b      	lsls	r3, r3, #22
 800fb5a:	d402      	bmi.n	800fb62 <_puts_r+0x4e>
 800fb5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fb5e:	f000 f9eb 	bl	800ff38 <__retarget_lock_release_recursive>
 800fb62:	4628      	mov	r0, r5
 800fb64:	bd70      	pop	{r4, r5, r6, pc}
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	da04      	bge.n	800fb74 <_puts_r+0x60>
 800fb6a:	69a2      	ldr	r2, [r4, #24]
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	dc17      	bgt.n	800fba0 <_puts_r+0x8c>
 800fb70:	290a      	cmp	r1, #10
 800fb72:	d015      	beq.n	800fba0 <_puts_r+0x8c>
 800fb74:	6823      	ldr	r3, [r4, #0]
 800fb76:	1c5a      	adds	r2, r3, #1
 800fb78:	6022      	str	r2, [r4, #0]
 800fb7a:	7019      	strb	r1, [r3, #0]
 800fb7c:	68a3      	ldr	r3, [r4, #8]
 800fb7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fb82:	3b01      	subs	r3, #1
 800fb84:	60a3      	str	r3, [r4, #8]
 800fb86:	2900      	cmp	r1, #0
 800fb88:	d1ed      	bne.n	800fb66 <_puts_r+0x52>
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	da11      	bge.n	800fbb2 <_puts_r+0x9e>
 800fb8e:	4622      	mov	r2, r4
 800fb90:	210a      	movs	r1, #10
 800fb92:	4628      	mov	r0, r5
 800fb94:	f000 f898 	bl	800fcc8 <__swbuf_r>
 800fb98:	3001      	adds	r0, #1
 800fb9a:	d0d7      	beq.n	800fb4c <_puts_r+0x38>
 800fb9c:	250a      	movs	r5, #10
 800fb9e:	e7d7      	b.n	800fb50 <_puts_r+0x3c>
 800fba0:	4622      	mov	r2, r4
 800fba2:	4628      	mov	r0, r5
 800fba4:	f000 f890 	bl	800fcc8 <__swbuf_r>
 800fba8:	3001      	adds	r0, #1
 800fbaa:	d1e7      	bne.n	800fb7c <_puts_r+0x68>
 800fbac:	e7ce      	b.n	800fb4c <_puts_r+0x38>
 800fbae:	3e01      	subs	r6, #1
 800fbb0:	e7e4      	b.n	800fb7c <_puts_r+0x68>
 800fbb2:	6823      	ldr	r3, [r4, #0]
 800fbb4:	1c5a      	adds	r2, r3, #1
 800fbb6:	6022      	str	r2, [r4, #0]
 800fbb8:	220a      	movs	r2, #10
 800fbba:	701a      	strb	r2, [r3, #0]
 800fbbc:	e7ee      	b.n	800fb9c <_puts_r+0x88>
	...

0800fbc0 <puts>:
 800fbc0:	4b02      	ldr	r3, [pc, #8]	@ (800fbcc <puts+0xc>)
 800fbc2:	4601      	mov	r1, r0
 800fbc4:	6818      	ldr	r0, [r3, #0]
 800fbc6:	f7ff bfa5 	b.w	800fb14 <_puts_r>
 800fbca:	bf00      	nop
 800fbcc:	200001b8 	.word	0x200001b8

0800fbd0 <__sread>:
 800fbd0:	b510      	push	{r4, lr}
 800fbd2:	460c      	mov	r4, r1
 800fbd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbd8:	f000 f94e 	bl	800fe78 <_read_r>
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	bfab      	itete	ge
 800fbe0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fbe2:	89a3      	ldrhlt	r3, [r4, #12]
 800fbe4:	181b      	addge	r3, r3, r0
 800fbe6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fbea:	bfac      	ite	ge
 800fbec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fbee:	81a3      	strhlt	r3, [r4, #12]
 800fbf0:	bd10      	pop	{r4, pc}

0800fbf2 <__swrite>:
 800fbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf6:	461f      	mov	r7, r3
 800fbf8:	898b      	ldrh	r3, [r1, #12]
 800fbfa:	05db      	lsls	r3, r3, #23
 800fbfc:	4605      	mov	r5, r0
 800fbfe:	460c      	mov	r4, r1
 800fc00:	4616      	mov	r6, r2
 800fc02:	d505      	bpl.n	800fc10 <__swrite+0x1e>
 800fc04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc08:	2302      	movs	r3, #2
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f000 f922 	bl	800fe54 <_lseek_r>
 800fc10:	89a3      	ldrh	r3, [r4, #12]
 800fc12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc1a:	81a3      	strh	r3, [r4, #12]
 800fc1c:	4632      	mov	r2, r6
 800fc1e:	463b      	mov	r3, r7
 800fc20:	4628      	mov	r0, r5
 800fc22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc26:	f000 b949 	b.w	800febc <_write_r>

0800fc2a <__sseek>:
 800fc2a:	b510      	push	{r4, lr}
 800fc2c:	460c      	mov	r4, r1
 800fc2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc32:	f000 f90f 	bl	800fe54 <_lseek_r>
 800fc36:	1c43      	adds	r3, r0, #1
 800fc38:	89a3      	ldrh	r3, [r4, #12]
 800fc3a:	bf15      	itete	ne
 800fc3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fc46:	81a3      	strheq	r3, [r4, #12]
 800fc48:	bf18      	it	ne
 800fc4a:	81a3      	strhne	r3, [r4, #12]
 800fc4c:	bd10      	pop	{r4, pc}

0800fc4e <__sclose>:
 800fc4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc52:	f000 b8ef 	b.w	800fe34 <_close_r>

0800fc56 <_vsniprintf_r>:
 800fc56:	b530      	push	{r4, r5, lr}
 800fc58:	4614      	mov	r4, r2
 800fc5a:	2c00      	cmp	r4, #0
 800fc5c:	b09b      	sub	sp, #108	@ 0x6c
 800fc5e:	4605      	mov	r5, r0
 800fc60:	461a      	mov	r2, r3
 800fc62:	da05      	bge.n	800fc70 <_vsniprintf_r+0x1a>
 800fc64:	238b      	movs	r3, #139	@ 0x8b
 800fc66:	6003      	str	r3, [r0, #0]
 800fc68:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6c:	b01b      	add	sp, #108	@ 0x6c
 800fc6e:	bd30      	pop	{r4, r5, pc}
 800fc70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fc74:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fc78:	bf14      	ite	ne
 800fc7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fc7e:	4623      	moveq	r3, r4
 800fc80:	9302      	str	r3, [sp, #8]
 800fc82:	9305      	str	r3, [sp, #20]
 800fc84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc88:	9100      	str	r1, [sp, #0]
 800fc8a:	9104      	str	r1, [sp, #16]
 800fc8c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fc90:	4669      	mov	r1, sp
 800fc92:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fc94:	f000 fa06 	bl	80100a4 <_svfiprintf_r>
 800fc98:	1c43      	adds	r3, r0, #1
 800fc9a:	bfbc      	itt	lt
 800fc9c:	238b      	movlt	r3, #139	@ 0x8b
 800fc9e:	602b      	strlt	r3, [r5, #0]
 800fca0:	2c00      	cmp	r4, #0
 800fca2:	d0e3      	beq.n	800fc6c <_vsniprintf_r+0x16>
 800fca4:	9b00      	ldr	r3, [sp, #0]
 800fca6:	2200      	movs	r2, #0
 800fca8:	701a      	strb	r2, [r3, #0]
 800fcaa:	e7df      	b.n	800fc6c <_vsniprintf_r+0x16>

0800fcac <vsniprintf>:
 800fcac:	b507      	push	{r0, r1, r2, lr}
 800fcae:	9300      	str	r3, [sp, #0]
 800fcb0:	4613      	mov	r3, r2
 800fcb2:	460a      	mov	r2, r1
 800fcb4:	4601      	mov	r1, r0
 800fcb6:	4803      	ldr	r0, [pc, #12]	@ (800fcc4 <vsniprintf+0x18>)
 800fcb8:	6800      	ldr	r0, [r0, #0]
 800fcba:	f7ff ffcc 	bl	800fc56 <_vsniprintf_r>
 800fcbe:	b003      	add	sp, #12
 800fcc0:	f85d fb04 	ldr.w	pc, [sp], #4
 800fcc4:	200001b8 	.word	0x200001b8

0800fcc8 <__swbuf_r>:
 800fcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcca:	460e      	mov	r6, r1
 800fccc:	4614      	mov	r4, r2
 800fcce:	4605      	mov	r5, r0
 800fcd0:	b118      	cbz	r0, 800fcda <__swbuf_r+0x12>
 800fcd2:	6a03      	ldr	r3, [r0, #32]
 800fcd4:	b90b      	cbnz	r3, 800fcda <__swbuf_r+0x12>
 800fcd6:	f7ff fed5 	bl	800fa84 <__sinit>
 800fcda:	69a3      	ldr	r3, [r4, #24]
 800fcdc:	60a3      	str	r3, [r4, #8]
 800fcde:	89a3      	ldrh	r3, [r4, #12]
 800fce0:	071a      	lsls	r2, r3, #28
 800fce2:	d501      	bpl.n	800fce8 <__swbuf_r+0x20>
 800fce4:	6923      	ldr	r3, [r4, #16]
 800fce6:	b943      	cbnz	r3, 800fcfa <__swbuf_r+0x32>
 800fce8:	4621      	mov	r1, r4
 800fcea:	4628      	mov	r0, r5
 800fcec:	f000 f82a 	bl	800fd44 <__swsetup_r>
 800fcf0:	b118      	cbz	r0, 800fcfa <__swbuf_r+0x32>
 800fcf2:	f04f 37ff 	mov.w	r7, #4294967295
 800fcf6:	4638      	mov	r0, r7
 800fcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcfa:	6823      	ldr	r3, [r4, #0]
 800fcfc:	6922      	ldr	r2, [r4, #16]
 800fcfe:	1a98      	subs	r0, r3, r2
 800fd00:	6963      	ldr	r3, [r4, #20]
 800fd02:	b2f6      	uxtb	r6, r6
 800fd04:	4283      	cmp	r3, r0
 800fd06:	4637      	mov	r7, r6
 800fd08:	dc05      	bgt.n	800fd16 <__swbuf_r+0x4e>
 800fd0a:	4621      	mov	r1, r4
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	f000 fe19 	bl	8010944 <_fflush_r>
 800fd12:	2800      	cmp	r0, #0
 800fd14:	d1ed      	bne.n	800fcf2 <__swbuf_r+0x2a>
 800fd16:	68a3      	ldr	r3, [r4, #8]
 800fd18:	3b01      	subs	r3, #1
 800fd1a:	60a3      	str	r3, [r4, #8]
 800fd1c:	6823      	ldr	r3, [r4, #0]
 800fd1e:	1c5a      	adds	r2, r3, #1
 800fd20:	6022      	str	r2, [r4, #0]
 800fd22:	701e      	strb	r6, [r3, #0]
 800fd24:	6962      	ldr	r2, [r4, #20]
 800fd26:	1c43      	adds	r3, r0, #1
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d004      	beq.n	800fd36 <__swbuf_r+0x6e>
 800fd2c:	89a3      	ldrh	r3, [r4, #12]
 800fd2e:	07db      	lsls	r3, r3, #31
 800fd30:	d5e1      	bpl.n	800fcf6 <__swbuf_r+0x2e>
 800fd32:	2e0a      	cmp	r6, #10
 800fd34:	d1df      	bne.n	800fcf6 <__swbuf_r+0x2e>
 800fd36:	4621      	mov	r1, r4
 800fd38:	4628      	mov	r0, r5
 800fd3a:	f000 fe03 	bl	8010944 <_fflush_r>
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	d0d9      	beq.n	800fcf6 <__swbuf_r+0x2e>
 800fd42:	e7d6      	b.n	800fcf2 <__swbuf_r+0x2a>

0800fd44 <__swsetup_r>:
 800fd44:	b538      	push	{r3, r4, r5, lr}
 800fd46:	4b29      	ldr	r3, [pc, #164]	@ (800fdec <__swsetup_r+0xa8>)
 800fd48:	4605      	mov	r5, r0
 800fd4a:	6818      	ldr	r0, [r3, #0]
 800fd4c:	460c      	mov	r4, r1
 800fd4e:	b118      	cbz	r0, 800fd58 <__swsetup_r+0x14>
 800fd50:	6a03      	ldr	r3, [r0, #32]
 800fd52:	b90b      	cbnz	r3, 800fd58 <__swsetup_r+0x14>
 800fd54:	f7ff fe96 	bl	800fa84 <__sinit>
 800fd58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd5c:	0719      	lsls	r1, r3, #28
 800fd5e:	d422      	bmi.n	800fda6 <__swsetup_r+0x62>
 800fd60:	06da      	lsls	r2, r3, #27
 800fd62:	d407      	bmi.n	800fd74 <__swsetup_r+0x30>
 800fd64:	2209      	movs	r2, #9
 800fd66:	602a      	str	r2, [r5, #0]
 800fd68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd6c:	81a3      	strh	r3, [r4, #12]
 800fd6e:	f04f 30ff 	mov.w	r0, #4294967295
 800fd72:	e033      	b.n	800fddc <__swsetup_r+0x98>
 800fd74:	0758      	lsls	r0, r3, #29
 800fd76:	d512      	bpl.n	800fd9e <__swsetup_r+0x5a>
 800fd78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd7a:	b141      	cbz	r1, 800fd8e <__swsetup_r+0x4a>
 800fd7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd80:	4299      	cmp	r1, r3
 800fd82:	d002      	beq.n	800fd8a <__swsetup_r+0x46>
 800fd84:	4628      	mov	r0, r5
 800fd86:	f000 f8e7 	bl	800ff58 <_free_r>
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd8e:	89a3      	ldrh	r3, [r4, #12]
 800fd90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fd94:	81a3      	strh	r3, [r4, #12]
 800fd96:	2300      	movs	r3, #0
 800fd98:	6063      	str	r3, [r4, #4]
 800fd9a:	6923      	ldr	r3, [r4, #16]
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	89a3      	ldrh	r3, [r4, #12]
 800fda0:	f043 0308 	orr.w	r3, r3, #8
 800fda4:	81a3      	strh	r3, [r4, #12]
 800fda6:	6923      	ldr	r3, [r4, #16]
 800fda8:	b94b      	cbnz	r3, 800fdbe <__swsetup_r+0x7a>
 800fdaa:	89a3      	ldrh	r3, [r4, #12]
 800fdac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fdb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fdb4:	d003      	beq.n	800fdbe <__swsetup_r+0x7a>
 800fdb6:	4621      	mov	r1, r4
 800fdb8:	4628      	mov	r0, r5
 800fdba:	f000 fe11 	bl	80109e0 <__smakebuf_r>
 800fdbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdc2:	f013 0201 	ands.w	r2, r3, #1
 800fdc6:	d00a      	beq.n	800fdde <__swsetup_r+0x9a>
 800fdc8:	2200      	movs	r2, #0
 800fdca:	60a2      	str	r2, [r4, #8]
 800fdcc:	6962      	ldr	r2, [r4, #20]
 800fdce:	4252      	negs	r2, r2
 800fdd0:	61a2      	str	r2, [r4, #24]
 800fdd2:	6922      	ldr	r2, [r4, #16]
 800fdd4:	b942      	cbnz	r2, 800fde8 <__swsetup_r+0xa4>
 800fdd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fdda:	d1c5      	bne.n	800fd68 <__swsetup_r+0x24>
 800fddc:	bd38      	pop	{r3, r4, r5, pc}
 800fdde:	0799      	lsls	r1, r3, #30
 800fde0:	bf58      	it	pl
 800fde2:	6962      	ldrpl	r2, [r4, #20]
 800fde4:	60a2      	str	r2, [r4, #8]
 800fde6:	e7f4      	b.n	800fdd2 <__swsetup_r+0x8e>
 800fde8:	2000      	movs	r0, #0
 800fdea:	e7f7      	b.n	800fddc <__swsetup_r+0x98>
 800fdec:	200001b8 	.word	0x200001b8

0800fdf0 <memmove>:
 800fdf0:	4288      	cmp	r0, r1
 800fdf2:	b510      	push	{r4, lr}
 800fdf4:	eb01 0402 	add.w	r4, r1, r2
 800fdf8:	d902      	bls.n	800fe00 <memmove+0x10>
 800fdfa:	4284      	cmp	r4, r0
 800fdfc:	4623      	mov	r3, r4
 800fdfe:	d807      	bhi.n	800fe10 <memmove+0x20>
 800fe00:	1e43      	subs	r3, r0, #1
 800fe02:	42a1      	cmp	r1, r4
 800fe04:	d008      	beq.n	800fe18 <memmove+0x28>
 800fe06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe0e:	e7f8      	b.n	800fe02 <memmove+0x12>
 800fe10:	4402      	add	r2, r0
 800fe12:	4601      	mov	r1, r0
 800fe14:	428a      	cmp	r2, r1
 800fe16:	d100      	bne.n	800fe1a <memmove+0x2a>
 800fe18:	bd10      	pop	{r4, pc}
 800fe1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe22:	e7f7      	b.n	800fe14 <memmove+0x24>

0800fe24 <memset>:
 800fe24:	4402      	add	r2, r0
 800fe26:	4603      	mov	r3, r0
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d100      	bne.n	800fe2e <memset+0xa>
 800fe2c:	4770      	bx	lr
 800fe2e:	f803 1b01 	strb.w	r1, [r3], #1
 800fe32:	e7f9      	b.n	800fe28 <memset+0x4>

0800fe34 <_close_r>:
 800fe34:	b538      	push	{r3, r4, r5, lr}
 800fe36:	4d06      	ldr	r5, [pc, #24]	@ (800fe50 <_close_r+0x1c>)
 800fe38:	2300      	movs	r3, #0
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	4608      	mov	r0, r1
 800fe3e:	602b      	str	r3, [r5, #0]
 800fe40:	f7f7 f964 	bl	800710c <_close>
 800fe44:	1c43      	adds	r3, r0, #1
 800fe46:	d102      	bne.n	800fe4e <_close_r+0x1a>
 800fe48:	682b      	ldr	r3, [r5, #0]
 800fe4a:	b103      	cbz	r3, 800fe4e <_close_r+0x1a>
 800fe4c:	6023      	str	r3, [r4, #0]
 800fe4e:	bd38      	pop	{r3, r4, r5, pc}
 800fe50:	20000694 	.word	0x20000694

0800fe54 <_lseek_r>:
 800fe54:	b538      	push	{r3, r4, r5, lr}
 800fe56:	4d07      	ldr	r5, [pc, #28]	@ (800fe74 <_lseek_r+0x20>)
 800fe58:	4604      	mov	r4, r0
 800fe5a:	4608      	mov	r0, r1
 800fe5c:	4611      	mov	r1, r2
 800fe5e:	2200      	movs	r2, #0
 800fe60:	602a      	str	r2, [r5, #0]
 800fe62:	461a      	mov	r2, r3
 800fe64:	f7f7 f969 	bl	800713a <_lseek>
 800fe68:	1c43      	adds	r3, r0, #1
 800fe6a:	d102      	bne.n	800fe72 <_lseek_r+0x1e>
 800fe6c:	682b      	ldr	r3, [r5, #0]
 800fe6e:	b103      	cbz	r3, 800fe72 <_lseek_r+0x1e>
 800fe70:	6023      	str	r3, [r4, #0]
 800fe72:	bd38      	pop	{r3, r4, r5, pc}
 800fe74:	20000694 	.word	0x20000694

0800fe78 <_read_r>:
 800fe78:	b538      	push	{r3, r4, r5, lr}
 800fe7a:	4d07      	ldr	r5, [pc, #28]	@ (800fe98 <_read_r+0x20>)
 800fe7c:	4604      	mov	r4, r0
 800fe7e:	4608      	mov	r0, r1
 800fe80:	4611      	mov	r1, r2
 800fe82:	2200      	movs	r2, #0
 800fe84:	602a      	str	r2, [r5, #0]
 800fe86:	461a      	mov	r2, r3
 800fe88:	f7f7 f964 	bl	8007154 <_read>
 800fe8c:	1c43      	adds	r3, r0, #1
 800fe8e:	d102      	bne.n	800fe96 <_read_r+0x1e>
 800fe90:	682b      	ldr	r3, [r5, #0]
 800fe92:	b103      	cbz	r3, 800fe96 <_read_r+0x1e>
 800fe94:	6023      	str	r3, [r4, #0]
 800fe96:	bd38      	pop	{r3, r4, r5, pc}
 800fe98:	20000694 	.word	0x20000694

0800fe9c <_sbrk_r>:
 800fe9c:	b538      	push	{r3, r4, r5, lr}
 800fe9e:	4d06      	ldr	r5, [pc, #24]	@ (800feb8 <_sbrk_r+0x1c>)
 800fea0:	2300      	movs	r3, #0
 800fea2:	4604      	mov	r4, r0
 800fea4:	4608      	mov	r0, r1
 800fea6:	602b      	str	r3, [r5, #0]
 800fea8:	f7f7 f978 	bl	800719c <_sbrk>
 800feac:	1c43      	adds	r3, r0, #1
 800feae:	d102      	bne.n	800feb6 <_sbrk_r+0x1a>
 800feb0:	682b      	ldr	r3, [r5, #0]
 800feb2:	b103      	cbz	r3, 800feb6 <_sbrk_r+0x1a>
 800feb4:	6023      	str	r3, [r4, #0]
 800feb6:	bd38      	pop	{r3, r4, r5, pc}
 800feb8:	20000694 	.word	0x20000694

0800febc <_write_r>:
 800febc:	b538      	push	{r3, r4, r5, lr}
 800febe:	4d07      	ldr	r5, [pc, #28]	@ (800fedc <_write_r+0x20>)
 800fec0:	4604      	mov	r4, r0
 800fec2:	4608      	mov	r0, r1
 800fec4:	4611      	mov	r1, r2
 800fec6:	2200      	movs	r2, #0
 800fec8:	602a      	str	r2, [r5, #0]
 800feca:	461a      	mov	r2, r3
 800fecc:	f7f7 f950 	bl	8007170 <_write>
 800fed0:	1c43      	adds	r3, r0, #1
 800fed2:	d102      	bne.n	800feda <_write_r+0x1e>
 800fed4:	682b      	ldr	r3, [r5, #0]
 800fed6:	b103      	cbz	r3, 800feda <_write_r+0x1e>
 800fed8:	6023      	str	r3, [r4, #0]
 800feda:	bd38      	pop	{r3, r4, r5, pc}
 800fedc:	20000694 	.word	0x20000694

0800fee0 <__errno>:
 800fee0:	4b01      	ldr	r3, [pc, #4]	@ (800fee8 <__errno+0x8>)
 800fee2:	6818      	ldr	r0, [r3, #0]
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	200001b8 	.word	0x200001b8

0800feec <__libc_init_array>:
 800feec:	b570      	push	{r4, r5, r6, lr}
 800feee:	4d0d      	ldr	r5, [pc, #52]	@ (800ff24 <__libc_init_array+0x38>)
 800fef0:	4c0d      	ldr	r4, [pc, #52]	@ (800ff28 <__libc_init_array+0x3c>)
 800fef2:	1b64      	subs	r4, r4, r5
 800fef4:	10a4      	asrs	r4, r4, #2
 800fef6:	2600      	movs	r6, #0
 800fef8:	42a6      	cmp	r6, r4
 800fefa:	d109      	bne.n	800ff10 <__libc_init_array+0x24>
 800fefc:	4d0b      	ldr	r5, [pc, #44]	@ (800ff2c <__libc_init_array+0x40>)
 800fefe:	4c0c      	ldr	r4, [pc, #48]	@ (800ff30 <__libc_init_array+0x44>)
 800ff00:	f002 fc3e 	bl	8012780 <_init>
 800ff04:	1b64      	subs	r4, r4, r5
 800ff06:	10a4      	asrs	r4, r4, #2
 800ff08:	2600      	movs	r6, #0
 800ff0a:	42a6      	cmp	r6, r4
 800ff0c:	d105      	bne.n	800ff1a <__libc_init_array+0x2e>
 800ff0e:	bd70      	pop	{r4, r5, r6, pc}
 800ff10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff14:	4798      	blx	r3
 800ff16:	3601      	adds	r6, #1
 800ff18:	e7ee      	b.n	800fef8 <__libc_init_array+0xc>
 800ff1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff1e:	4798      	blx	r3
 800ff20:	3601      	adds	r6, #1
 800ff22:	e7f2      	b.n	800ff0a <__libc_init_array+0x1e>
 800ff24:	08018478 	.word	0x08018478
 800ff28:	08018478 	.word	0x08018478
 800ff2c:	08018478 	.word	0x08018478
 800ff30:	0801847c 	.word	0x0801847c

0800ff34 <__retarget_lock_init_recursive>:
 800ff34:	4770      	bx	lr

0800ff36 <__retarget_lock_acquire_recursive>:
 800ff36:	4770      	bx	lr

0800ff38 <__retarget_lock_release_recursive>:
 800ff38:	4770      	bx	lr

0800ff3a <memcpy>:
 800ff3a:	440a      	add	r2, r1
 800ff3c:	4291      	cmp	r1, r2
 800ff3e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff42:	d100      	bne.n	800ff46 <memcpy+0xc>
 800ff44:	4770      	bx	lr
 800ff46:	b510      	push	{r4, lr}
 800ff48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff50:	4291      	cmp	r1, r2
 800ff52:	d1f9      	bne.n	800ff48 <memcpy+0xe>
 800ff54:	bd10      	pop	{r4, pc}
	...

0800ff58 <_free_r>:
 800ff58:	b538      	push	{r3, r4, r5, lr}
 800ff5a:	4605      	mov	r5, r0
 800ff5c:	2900      	cmp	r1, #0
 800ff5e:	d041      	beq.n	800ffe4 <_free_r+0x8c>
 800ff60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff64:	1f0c      	subs	r4, r1, #4
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	bfb8      	it	lt
 800ff6a:	18e4      	addlt	r4, r4, r3
 800ff6c:	f7ff fcf2 	bl	800f954 <__malloc_lock>
 800ff70:	4a1d      	ldr	r2, [pc, #116]	@ (800ffe8 <_free_r+0x90>)
 800ff72:	6813      	ldr	r3, [r2, #0]
 800ff74:	b933      	cbnz	r3, 800ff84 <_free_r+0x2c>
 800ff76:	6063      	str	r3, [r4, #4]
 800ff78:	6014      	str	r4, [r2, #0]
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff80:	f7ff bcee 	b.w	800f960 <__malloc_unlock>
 800ff84:	42a3      	cmp	r3, r4
 800ff86:	d908      	bls.n	800ff9a <_free_r+0x42>
 800ff88:	6820      	ldr	r0, [r4, #0]
 800ff8a:	1821      	adds	r1, r4, r0
 800ff8c:	428b      	cmp	r3, r1
 800ff8e:	bf01      	itttt	eq
 800ff90:	6819      	ldreq	r1, [r3, #0]
 800ff92:	685b      	ldreq	r3, [r3, #4]
 800ff94:	1809      	addeq	r1, r1, r0
 800ff96:	6021      	streq	r1, [r4, #0]
 800ff98:	e7ed      	b.n	800ff76 <_free_r+0x1e>
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	b10b      	cbz	r3, 800ffa4 <_free_r+0x4c>
 800ffa0:	42a3      	cmp	r3, r4
 800ffa2:	d9fa      	bls.n	800ff9a <_free_r+0x42>
 800ffa4:	6811      	ldr	r1, [r2, #0]
 800ffa6:	1850      	adds	r0, r2, r1
 800ffa8:	42a0      	cmp	r0, r4
 800ffaa:	d10b      	bne.n	800ffc4 <_free_r+0x6c>
 800ffac:	6820      	ldr	r0, [r4, #0]
 800ffae:	4401      	add	r1, r0
 800ffb0:	1850      	adds	r0, r2, r1
 800ffb2:	4283      	cmp	r3, r0
 800ffb4:	6011      	str	r1, [r2, #0]
 800ffb6:	d1e0      	bne.n	800ff7a <_free_r+0x22>
 800ffb8:	6818      	ldr	r0, [r3, #0]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	6053      	str	r3, [r2, #4]
 800ffbe:	4408      	add	r0, r1
 800ffc0:	6010      	str	r0, [r2, #0]
 800ffc2:	e7da      	b.n	800ff7a <_free_r+0x22>
 800ffc4:	d902      	bls.n	800ffcc <_free_r+0x74>
 800ffc6:	230c      	movs	r3, #12
 800ffc8:	602b      	str	r3, [r5, #0]
 800ffca:	e7d6      	b.n	800ff7a <_free_r+0x22>
 800ffcc:	6820      	ldr	r0, [r4, #0]
 800ffce:	1821      	adds	r1, r4, r0
 800ffd0:	428b      	cmp	r3, r1
 800ffd2:	bf04      	itt	eq
 800ffd4:	6819      	ldreq	r1, [r3, #0]
 800ffd6:	685b      	ldreq	r3, [r3, #4]
 800ffd8:	6063      	str	r3, [r4, #4]
 800ffda:	bf04      	itt	eq
 800ffdc:	1809      	addeq	r1, r1, r0
 800ffde:	6021      	streq	r1, [r4, #0]
 800ffe0:	6054      	str	r4, [r2, #4]
 800ffe2:	e7ca      	b.n	800ff7a <_free_r+0x22>
 800ffe4:	bd38      	pop	{r3, r4, r5, pc}
 800ffe6:	bf00      	nop
 800ffe8:	20000554 	.word	0x20000554

0800ffec <__ssputs_r>:
 800ffec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fff0:	688e      	ldr	r6, [r1, #8]
 800fff2:	461f      	mov	r7, r3
 800fff4:	42be      	cmp	r6, r7
 800fff6:	680b      	ldr	r3, [r1, #0]
 800fff8:	4682      	mov	sl, r0
 800fffa:	460c      	mov	r4, r1
 800fffc:	4690      	mov	r8, r2
 800fffe:	d82d      	bhi.n	801005c <__ssputs_r+0x70>
 8010000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010004:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010008:	d026      	beq.n	8010058 <__ssputs_r+0x6c>
 801000a:	6965      	ldr	r5, [r4, #20]
 801000c:	6909      	ldr	r1, [r1, #16]
 801000e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010012:	eba3 0901 	sub.w	r9, r3, r1
 8010016:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801001a:	1c7b      	adds	r3, r7, #1
 801001c:	444b      	add	r3, r9
 801001e:	106d      	asrs	r5, r5, #1
 8010020:	429d      	cmp	r5, r3
 8010022:	bf38      	it	cc
 8010024:	461d      	movcc	r5, r3
 8010026:	0553      	lsls	r3, r2, #21
 8010028:	d527      	bpl.n	801007a <__ssputs_r+0x8e>
 801002a:	4629      	mov	r1, r5
 801002c:	f7ff fc12 	bl	800f854 <_malloc_r>
 8010030:	4606      	mov	r6, r0
 8010032:	b360      	cbz	r0, 801008e <__ssputs_r+0xa2>
 8010034:	6921      	ldr	r1, [r4, #16]
 8010036:	464a      	mov	r2, r9
 8010038:	f7ff ff7f 	bl	800ff3a <memcpy>
 801003c:	89a3      	ldrh	r3, [r4, #12]
 801003e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010046:	81a3      	strh	r3, [r4, #12]
 8010048:	6126      	str	r6, [r4, #16]
 801004a:	6165      	str	r5, [r4, #20]
 801004c:	444e      	add	r6, r9
 801004e:	eba5 0509 	sub.w	r5, r5, r9
 8010052:	6026      	str	r6, [r4, #0]
 8010054:	60a5      	str	r5, [r4, #8]
 8010056:	463e      	mov	r6, r7
 8010058:	42be      	cmp	r6, r7
 801005a:	d900      	bls.n	801005e <__ssputs_r+0x72>
 801005c:	463e      	mov	r6, r7
 801005e:	6820      	ldr	r0, [r4, #0]
 8010060:	4632      	mov	r2, r6
 8010062:	4641      	mov	r1, r8
 8010064:	f7ff fec4 	bl	800fdf0 <memmove>
 8010068:	68a3      	ldr	r3, [r4, #8]
 801006a:	1b9b      	subs	r3, r3, r6
 801006c:	60a3      	str	r3, [r4, #8]
 801006e:	6823      	ldr	r3, [r4, #0]
 8010070:	4433      	add	r3, r6
 8010072:	6023      	str	r3, [r4, #0]
 8010074:	2000      	movs	r0, #0
 8010076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801007a:	462a      	mov	r2, r5
 801007c:	f000 fd0e 	bl	8010a9c <_realloc_r>
 8010080:	4606      	mov	r6, r0
 8010082:	2800      	cmp	r0, #0
 8010084:	d1e0      	bne.n	8010048 <__ssputs_r+0x5c>
 8010086:	6921      	ldr	r1, [r4, #16]
 8010088:	4650      	mov	r0, sl
 801008a:	f7ff ff65 	bl	800ff58 <_free_r>
 801008e:	230c      	movs	r3, #12
 8010090:	f8ca 3000 	str.w	r3, [sl]
 8010094:	89a3      	ldrh	r3, [r4, #12]
 8010096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801009a:	81a3      	strh	r3, [r4, #12]
 801009c:	f04f 30ff 	mov.w	r0, #4294967295
 80100a0:	e7e9      	b.n	8010076 <__ssputs_r+0x8a>
	...

080100a4 <_svfiprintf_r>:
 80100a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100a8:	4698      	mov	r8, r3
 80100aa:	898b      	ldrh	r3, [r1, #12]
 80100ac:	061b      	lsls	r3, r3, #24
 80100ae:	b09d      	sub	sp, #116	@ 0x74
 80100b0:	4607      	mov	r7, r0
 80100b2:	460d      	mov	r5, r1
 80100b4:	4614      	mov	r4, r2
 80100b6:	d510      	bpl.n	80100da <_svfiprintf_r+0x36>
 80100b8:	690b      	ldr	r3, [r1, #16]
 80100ba:	b973      	cbnz	r3, 80100da <_svfiprintf_r+0x36>
 80100bc:	2140      	movs	r1, #64	@ 0x40
 80100be:	f7ff fbc9 	bl	800f854 <_malloc_r>
 80100c2:	6028      	str	r0, [r5, #0]
 80100c4:	6128      	str	r0, [r5, #16]
 80100c6:	b930      	cbnz	r0, 80100d6 <_svfiprintf_r+0x32>
 80100c8:	230c      	movs	r3, #12
 80100ca:	603b      	str	r3, [r7, #0]
 80100cc:	f04f 30ff 	mov.w	r0, #4294967295
 80100d0:	b01d      	add	sp, #116	@ 0x74
 80100d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d6:	2340      	movs	r3, #64	@ 0x40
 80100d8:	616b      	str	r3, [r5, #20]
 80100da:	2300      	movs	r3, #0
 80100dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80100de:	2320      	movs	r3, #32
 80100e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80100e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80100e8:	2330      	movs	r3, #48	@ 0x30
 80100ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010288 <_svfiprintf_r+0x1e4>
 80100ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80100f2:	f04f 0901 	mov.w	r9, #1
 80100f6:	4623      	mov	r3, r4
 80100f8:	469a      	mov	sl, r3
 80100fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100fe:	b10a      	cbz	r2, 8010104 <_svfiprintf_r+0x60>
 8010100:	2a25      	cmp	r2, #37	@ 0x25
 8010102:	d1f9      	bne.n	80100f8 <_svfiprintf_r+0x54>
 8010104:	ebba 0b04 	subs.w	fp, sl, r4
 8010108:	d00b      	beq.n	8010122 <_svfiprintf_r+0x7e>
 801010a:	465b      	mov	r3, fp
 801010c:	4622      	mov	r2, r4
 801010e:	4629      	mov	r1, r5
 8010110:	4638      	mov	r0, r7
 8010112:	f7ff ff6b 	bl	800ffec <__ssputs_r>
 8010116:	3001      	adds	r0, #1
 8010118:	f000 80a7 	beq.w	801026a <_svfiprintf_r+0x1c6>
 801011c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801011e:	445a      	add	r2, fp
 8010120:	9209      	str	r2, [sp, #36]	@ 0x24
 8010122:	f89a 3000 	ldrb.w	r3, [sl]
 8010126:	2b00      	cmp	r3, #0
 8010128:	f000 809f 	beq.w	801026a <_svfiprintf_r+0x1c6>
 801012c:	2300      	movs	r3, #0
 801012e:	f04f 32ff 	mov.w	r2, #4294967295
 8010132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010136:	f10a 0a01 	add.w	sl, sl, #1
 801013a:	9304      	str	r3, [sp, #16]
 801013c:	9307      	str	r3, [sp, #28]
 801013e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010142:	931a      	str	r3, [sp, #104]	@ 0x68
 8010144:	4654      	mov	r4, sl
 8010146:	2205      	movs	r2, #5
 8010148:	f814 1b01 	ldrb.w	r1, [r4], #1
 801014c:	484e      	ldr	r0, [pc, #312]	@ (8010288 <_svfiprintf_r+0x1e4>)
 801014e:	f7f0 f83f 	bl	80001d0 <memchr>
 8010152:	9a04      	ldr	r2, [sp, #16]
 8010154:	b9d8      	cbnz	r0, 801018e <_svfiprintf_r+0xea>
 8010156:	06d0      	lsls	r0, r2, #27
 8010158:	bf44      	itt	mi
 801015a:	2320      	movmi	r3, #32
 801015c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010160:	0711      	lsls	r1, r2, #28
 8010162:	bf44      	itt	mi
 8010164:	232b      	movmi	r3, #43	@ 0x2b
 8010166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801016a:	f89a 3000 	ldrb.w	r3, [sl]
 801016e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010170:	d015      	beq.n	801019e <_svfiprintf_r+0xfa>
 8010172:	9a07      	ldr	r2, [sp, #28]
 8010174:	4654      	mov	r4, sl
 8010176:	2000      	movs	r0, #0
 8010178:	f04f 0c0a 	mov.w	ip, #10
 801017c:	4621      	mov	r1, r4
 801017e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010182:	3b30      	subs	r3, #48	@ 0x30
 8010184:	2b09      	cmp	r3, #9
 8010186:	d94b      	bls.n	8010220 <_svfiprintf_r+0x17c>
 8010188:	b1b0      	cbz	r0, 80101b8 <_svfiprintf_r+0x114>
 801018a:	9207      	str	r2, [sp, #28]
 801018c:	e014      	b.n	80101b8 <_svfiprintf_r+0x114>
 801018e:	eba0 0308 	sub.w	r3, r0, r8
 8010192:	fa09 f303 	lsl.w	r3, r9, r3
 8010196:	4313      	orrs	r3, r2
 8010198:	9304      	str	r3, [sp, #16]
 801019a:	46a2      	mov	sl, r4
 801019c:	e7d2      	b.n	8010144 <_svfiprintf_r+0xa0>
 801019e:	9b03      	ldr	r3, [sp, #12]
 80101a0:	1d19      	adds	r1, r3, #4
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	9103      	str	r1, [sp, #12]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	bfbb      	ittet	lt
 80101aa:	425b      	neglt	r3, r3
 80101ac:	f042 0202 	orrlt.w	r2, r2, #2
 80101b0:	9307      	strge	r3, [sp, #28]
 80101b2:	9307      	strlt	r3, [sp, #28]
 80101b4:	bfb8      	it	lt
 80101b6:	9204      	strlt	r2, [sp, #16]
 80101b8:	7823      	ldrb	r3, [r4, #0]
 80101ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80101bc:	d10a      	bne.n	80101d4 <_svfiprintf_r+0x130>
 80101be:	7863      	ldrb	r3, [r4, #1]
 80101c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80101c2:	d132      	bne.n	801022a <_svfiprintf_r+0x186>
 80101c4:	9b03      	ldr	r3, [sp, #12]
 80101c6:	1d1a      	adds	r2, r3, #4
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	9203      	str	r2, [sp, #12]
 80101cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80101d0:	3402      	adds	r4, #2
 80101d2:	9305      	str	r3, [sp, #20]
 80101d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010298 <_svfiprintf_r+0x1f4>
 80101d8:	7821      	ldrb	r1, [r4, #0]
 80101da:	2203      	movs	r2, #3
 80101dc:	4650      	mov	r0, sl
 80101de:	f7ef fff7 	bl	80001d0 <memchr>
 80101e2:	b138      	cbz	r0, 80101f4 <_svfiprintf_r+0x150>
 80101e4:	9b04      	ldr	r3, [sp, #16]
 80101e6:	eba0 000a 	sub.w	r0, r0, sl
 80101ea:	2240      	movs	r2, #64	@ 0x40
 80101ec:	4082      	lsls	r2, r0
 80101ee:	4313      	orrs	r3, r2
 80101f0:	3401      	adds	r4, #1
 80101f2:	9304      	str	r3, [sp, #16]
 80101f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101f8:	4824      	ldr	r0, [pc, #144]	@ (801028c <_svfiprintf_r+0x1e8>)
 80101fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80101fe:	2206      	movs	r2, #6
 8010200:	f7ef ffe6 	bl	80001d0 <memchr>
 8010204:	2800      	cmp	r0, #0
 8010206:	d036      	beq.n	8010276 <_svfiprintf_r+0x1d2>
 8010208:	4b21      	ldr	r3, [pc, #132]	@ (8010290 <_svfiprintf_r+0x1ec>)
 801020a:	bb1b      	cbnz	r3, 8010254 <_svfiprintf_r+0x1b0>
 801020c:	9b03      	ldr	r3, [sp, #12]
 801020e:	3307      	adds	r3, #7
 8010210:	f023 0307 	bic.w	r3, r3, #7
 8010214:	3308      	adds	r3, #8
 8010216:	9303      	str	r3, [sp, #12]
 8010218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801021a:	4433      	add	r3, r6
 801021c:	9309      	str	r3, [sp, #36]	@ 0x24
 801021e:	e76a      	b.n	80100f6 <_svfiprintf_r+0x52>
 8010220:	fb0c 3202 	mla	r2, ip, r2, r3
 8010224:	460c      	mov	r4, r1
 8010226:	2001      	movs	r0, #1
 8010228:	e7a8      	b.n	801017c <_svfiprintf_r+0xd8>
 801022a:	2300      	movs	r3, #0
 801022c:	3401      	adds	r4, #1
 801022e:	9305      	str	r3, [sp, #20]
 8010230:	4619      	mov	r1, r3
 8010232:	f04f 0c0a 	mov.w	ip, #10
 8010236:	4620      	mov	r0, r4
 8010238:	f810 2b01 	ldrb.w	r2, [r0], #1
 801023c:	3a30      	subs	r2, #48	@ 0x30
 801023e:	2a09      	cmp	r2, #9
 8010240:	d903      	bls.n	801024a <_svfiprintf_r+0x1a6>
 8010242:	2b00      	cmp	r3, #0
 8010244:	d0c6      	beq.n	80101d4 <_svfiprintf_r+0x130>
 8010246:	9105      	str	r1, [sp, #20]
 8010248:	e7c4      	b.n	80101d4 <_svfiprintf_r+0x130>
 801024a:	fb0c 2101 	mla	r1, ip, r1, r2
 801024e:	4604      	mov	r4, r0
 8010250:	2301      	movs	r3, #1
 8010252:	e7f0      	b.n	8010236 <_svfiprintf_r+0x192>
 8010254:	ab03      	add	r3, sp, #12
 8010256:	9300      	str	r3, [sp, #0]
 8010258:	462a      	mov	r2, r5
 801025a:	4b0e      	ldr	r3, [pc, #56]	@ (8010294 <_svfiprintf_r+0x1f0>)
 801025c:	a904      	add	r1, sp, #16
 801025e:	4638      	mov	r0, r7
 8010260:	f3af 8000 	nop.w
 8010264:	1c42      	adds	r2, r0, #1
 8010266:	4606      	mov	r6, r0
 8010268:	d1d6      	bne.n	8010218 <_svfiprintf_r+0x174>
 801026a:	89ab      	ldrh	r3, [r5, #12]
 801026c:	065b      	lsls	r3, r3, #25
 801026e:	f53f af2d 	bmi.w	80100cc <_svfiprintf_r+0x28>
 8010272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010274:	e72c      	b.n	80100d0 <_svfiprintf_r+0x2c>
 8010276:	ab03      	add	r3, sp, #12
 8010278:	9300      	str	r3, [sp, #0]
 801027a:	462a      	mov	r2, r5
 801027c:	4b05      	ldr	r3, [pc, #20]	@ (8010294 <_svfiprintf_r+0x1f0>)
 801027e:	a904      	add	r1, sp, #16
 8010280:	4638      	mov	r0, r7
 8010282:	f000 f9bb 	bl	80105fc <_printf_i>
 8010286:	e7ed      	b.n	8010264 <_svfiprintf_r+0x1c0>
 8010288:	08018002 	.word	0x08018002
 801028c:	0801800c 	.word	0x0801800c
 8010290:	00000000 	.word	0x00000000
 8010294:	0800ffed 	.word	0x0800ffed
 8010298:	08018008 	.word	0x08018008

0801029c <__sfputc_r>:
 801029c:	6893      	ldr	r3, [r2, #8]
 801029e:	3b01      	subs	r3, #1
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	b410      	push	{r4}
 80102a4:	6093      	str	r3, [r2, #8]
 80102a6:	da08      	bge.n	80102ba <__sfputc_r+0x1e>
 80102a8:	6994      	ldr	r4, [r2, #24]
 80102aa:	42a3      	cmp	r3, r4
 80102ac:	db01      	blt.n	80102b2 <__sfputc_r+0x16>
 80102ae:	290a      	cmp	r1, #10
 80102b0:	d103      	bne.n	80102ba <__sfputc_r+0x1e>
 80102b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102b6:	f7ff bd07 	b.w	800fcc8 <__swbuf_r>
 80102ba:	6813      	ldr	r3, [r2, #0]
 80102bc:	1c58      	adds	r0, r3, #1
 80102be:	6010      	str	r0, [r2, #0]
 80102c0:	7019      	strb	r1, [r3, #0]
 80102c2:	4608      	mov	r0, r1
 80102c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102c8:	4770      	bx	lr

080102ca <__sfputs_r>:
 80102ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102cc:	4606      	mov	r6, r0
 80102ce:	460f      	mov	r7, r1
 80102d0:	4614      	mov	r4, r2
 80102d2:	18d5      	adds	r5, r2, r3
 80102d4:	42ac      	cmp	r4, r5
 80102d6:	d101      	bne.n	80102dc <__sfputs_r+0x12>
 80102d8:	2000      	movs	r0, #0
 80102da:	e007      	b.n	80102ec <__sfputs_r+0x22>
 80102dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102e0:	463a      	mov	r2, r7
 80102e2:	4630      	mov	r0, r6
 80102e4:	f7ff ffda 	bl	801029c <__sfputc_r>
 80102e8:	1c43      	adds	r3, r0, #1
 80102ea:	d1f3      	bne.n	80102d4 <__sfputs_r+0xa>
 80102ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080102f0 <_vfiprintf_r>:
 80102f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f4:	460d      	mov	r5, r1
 80102f6:	b09d      	sub	sp, #116	@ 0x74
 80102f8:	4614      	mov	r4, r2
 80102fa:	4698      	mov	r8, r3
 80102fc:	4606      	mov	r6, r0
 80102fe:	b118      	cbz	r0, 8010308 <_vfiprintf_r+0x18>
 8010300:	6a03      	ldr	r3, [r0, #32]
 8010302:	b90b      	cbnz	r3, 8010308 <_vfiprintf_r+0x18>
 8010304:	f7ff fbbe 	bl	800fa84 <__sinit>
 8010308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801030a:	07d9      	lsls	r1, r3, #31
 801030c:	d405      	bmi.n	801031a <_vfiprintf_r+0x2a>
 801030e:	89ab      	ldrh	r3, [r5, #12]
 8010310:	059a      	lsls	r2, r3, #22
 8010312:	d402      	bmi.n	801031a <_vfiprintf_r+0x2a>
 8010314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010316:	f7ff fe0e 	bl	800ff36 <__retarget_lock_acquire_recursive>
 801031a:	89ab      	ldrh	r3, [r5, #12]
 801031c:	071b      	lsls	r3, r3, #28
 801031e:	d501      	bpl.n	8010324 <_vfiprintf_r+0x34>
 8010320:	692b      	ldr	r3, [r5, #16]
 8010322:	b99b      	cbnz	r3, 801034c <_vfiprintf_r+0x5c>
 8010324:	4629      	mov	r1, r5
 8010326:	4630      	mov	r0, r6
 8010328:	f7ff fd0c 	bl	800fd44 <__swsetup_r>
 801032c:	b170      	cbz	r0, 801034c <_vfiprintf_r+0x5c>
 801032e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010330:	07dc      	lsls	r4, r3, #31
 8010332:	d504      	bpl.n	801033e <_vfiprintf_r+0x4e>
 8010334:	f04f 30ff 	mov.w	r0, #4294967295
 8010338:	b01d      	add	sp, #116	@ 0x74
 801033a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801033e:	89ab      	ldrh	r3, [r5, #12]
 8010340:	0598      	lsls	r0, r3, #22
 8010342:	d4f7      	bmi.n	8010334 <_vfiprintf_r+0x44>
 8010344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010346:	f7ff fdf7 	bl	800ff38 <__retarget_lock_release_recursive>
 801034a:	e7f3      	b.n	8010334 <_vfiprintf_r+0x44>
 801034c:	2300      	movs	r3, #0
 801034e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010350:	2320      	movs	r3, #32
 8010352:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010356:	f8cd 800c 	str.w	r8, [sp, #12]
 801035a:	2330      	movs	r3, #48	@ 0x30
 801035c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801050c <_vfiprintf_r+0x21c>
 8010360:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010364:	f04f 0901 	mov.w	r9, #1
 8010368:	4623      	mov	r3, r4
 801036a:	469a      	mov	sl, r3
 801036c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010370:	b10a      	cbz	r2, 8010376 <_vfiprintf_r+0x86>
 8010372:	2a25      	cmp	r2, #37	@ 0x25
 8010374:	d1f9      	bne.n	801036a <_vfiprintf_r+0x7a>
 8010376:	ebba 0b04 	subs.w	fp, sl, r4
 801037a:	d00b      	beq.n	8010394 <_vfiprintf_r+0xa4>
 801037c:	465b      	mov	r3, fp
 801037e:	4622      	mov	r2, r4
 8010380:	4629      	mov	r1, r5
 8010382:	4630      	mov	r0, r6
 8010384:	f7ff ffa1 	bl	80102ca <__sfputs_r>
 8010388:	3001      	adds	r0, #1
 801038a:	f000 80a7 	beq.w	80104dc <_vfiprintf_r+0x1ec>
 801038e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010390:	445a      	add	r2, fp
 8010392:	9209      	str	r2, [sp, #36]	@ 0x24
 8010394:	f89a 3000 	ldrb.w	r3, [sl]
 8010398:	2b00      	cmp	r3, #0
 801039a:	f000 809f 	beq.w	80104dc <_vfiprintf_r+0x1ec>
 801039e:	2300      	movs	r3, #0
 80103a0:	f04f 32ff 	mov.w	r2, #4294967295
 80103a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103a8:	f10a 0a01 	add.w	sl, sl, #1
 80103ac:	9304      	str	r3, [sp, #16]
 80103ae:	9307      	str	r3, [sp, #28]
 80103b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80103b6:	4654      	mov	r4, sl
 80103b8:	2205      	movs	r2, #5
 80103ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103be:	4853      	ldr	r0, [pc, #332]	@ (801050c <_vfiprintf_r+0x21c>)
 80103c0:	f7ef ff06 	bl	80001d0 <memchr>
 80103c4:	9a04      	ldr	r2, [sp, #16]
 80103c6:	b9d8      	cbnz	r0, 8010400 <_vfiprintf_r+0x110>
 80103c8:	06d1      	lsls	r1, r2, #27
 80103ca:	bf44      	itt	mi
 80103cc:	2320      	movmi	r3, #32
 80103ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103d2:	0713      	lsls	r3, r2, #28
 80103d4:	bf44      	itt	mi
 80103d6:	232b      	movmi	r3, #43	@ 0x2b
 80103d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103dc:	f89a 3000 	ldrb.w	r3, [sl]
 80103e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80103e2:	d015      	beq.n	8010410 <_vfiprintf_r+0x120>
 80103e4:	9a07      	ldr	r2, [sp, #28]
 80103e6:	4654      	mov	r4, sl
 80103e8:	2000      	movs	r0, #0
 80103ea:	f04f 0c0a 	mov.w	ip, #10
 80103ee:	4621      	mov	r1, r4
 80103f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103f4:	3b30      	subs	r3, #48	@ 0x30
 80103f6:	2b09      	cmp	r3, #9
 80103f8:	d94b      	bls.n	8010492 <_vfiprintf_r+0x1a2>
 80103fa:	b1b0      	cbz	r0, 801042a <_vfiprintf_r+0x13a>
 80103fc:	9207      	str	r2, [sp, #28]
 80103fe:	e014      	b.n	801042a <_vfiprintf_r+0x13a>
 8010400:	eba0 0308 	sub.w	r3, r0, r8
 8010404:	fa09 f303 	lsl.w	r3, r9, r3
 8010408:	4313      	orrs	r3, r2
 801040a:	9304      	str	r3, [sp, #16]
 801040c:	46a2      	mov	sl, r4
 801040e:	e7d2      	b.n	80103b6 <_vfiprintf_r+0xc6>
 8010410:	9b03      	ldr	r3, [sp, #12]
 8010412:	1d19      	adds	r1, r3, #4
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	9103      	str	r1, [sp, #12]
 8010418:	2b00      	cmp	r3, #0
 801041a:	bfbb      	ittet	lt
 801041c:	425b      	neglt	r3, r3
 801041e:	f042 0202 	orrlt.w	r2, r2, #2
 8010422:	9307      	strge	r3, [sp, #28]
 8010424:	9307      	strlt	r3, [sp, #28]
 8010426:	bfb8      	it	lt
 8010428:	9204      	strlt	r2, [sp, #16]
 801042a:	7823      	ldrb	r3, [r4, #0]
 801042c:	2b2e      	cmp	r3, #46	@ 0x2e
 801042e:	d10a      	bne.n	8010446 <_vfiprintf_r+0x156>
 8010430:	7863      	ldrb	r3, [r4, #1]
 8010432:	2b2a      	cmp	r3, #42	@ 0x2a
 8010434:	d132      	bne.n	801049c <_vfiprintf_r+0x1ac>
 8010436:	9b03      	ldr	r3, [sp, #12]
 8010438:	1d1a      	adds	r2, r3, #4
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	9203      	str	r2, [sp, #12]
 801043e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010442:	3402      	adds	r4, #2
 8010444:	9305      	str	r3, [sp, #20]
 8010446:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801051c <_vfiprintf_r+0x22c>
 801044a:	7821      	ldrb	r1, [r4, #0]
 801044c:	2203      	movs	r2, #3
 801044e:	4650      	mov	r0, sl
 8010450:	f7ef febe 	bl	80001d0 <memchr>
 8010454:	b138      	cbz	r0, 8010466 <_vfiprintf_r+0x176>
 8010456:	9b04      	ldr	r3, [sp, #16]
 8010458:	eba0 000a 	sub.w	r0, r0, sl
 801045c:	2240      	movs	r2, #64	@ 0x40
 801045e:	4082      	lsls	r2, r0
 8010460:	4313      	orrs	r3, r2
 8010462:	3401      	adds	r4, #1
 8010464:	9304      	str	r3, [sp, #16]
 8010466:	f814 1b01 	ldrb.w	r1, [r4], #1
 801046a:	4829      	ldr	r0, [pc, #164]	@ (8010510 <_vfiprintf_r+0x220>)
 801046c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010470:	2206      	movs	r2, #6
 8010472:	f7ef fead 	bl	80001d0 <memchr>
 8010476:	2800      	cmp	r0, #0
 8010478:	d03f      	beq.n	80104fa <_vfiprintf_r+0x20a>
 801047a:	4b26      	ldr	r3, [pc, #152]	@ (8010514 <_vfiprintf_r+0x224>)
 801047c:	bb1b      	cbnz	r3, 80104c6 <_vfiprintf_r+0x1d6>
 801047e:	9b03      	ldr	r3, [sp, #12]
 8010480:	3307      	adds	r3, #7
 8010482:	f023 0307 	bic.w	r3, r3, #7
 8010486:	3308      	adds	r3, #8
 8010488:	9303      	str	r3, [sp, #12]
 801048a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801048c:	443b      	add	r3, r7
 801048e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010490:	e76a      	b.n	8010368 <_vfiprintf_r+0x78>
 8010492:	fb0c 3202 	mla	r2, ip, r2, r3
 8010496:	460c      	mov	r4, r1
 8010498:	2001      	movs	r0, #1
 801049a:	e7a8      	b.n	80103ee <_vfiprintf_r+0xfe>
 801049c:	2300      	movs	r3, #0
 801049e:	3401      	adds	r4, #1
 80104a0:	9305      	str	r3, [sp, #20]
 80104a2:	4619      	mov	r1, r3
 80104a4:	f04f 0c0a 	mov.w	ip, #10
 80104a8:	4620      	mov	r0, r4
 80104aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104ae:	3a30      	subs	r2, #48	@ 0x30
 80104b0:	2a09      	cmp	r2, #9
 80104b2:	d903      	bls.n	80104bc <_vfiprintf_r+0x1cc>
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d0c6      	beq.n	8010446 <_vfiprintf_r+0x156>
 80104b8:	9105      	str	r1, [sp, #20]
 80104ba:	e7c4      	b.n	8010446 <_vfiprintf_r+0x156>
 80104bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80104c0:	4604      	mov	r4, r0
 80104c2:	2301      	movs	r3, #1
 80104c4:	e7f0      	b.n	80104a8 <_vfiprintf_r+0x1b8>
 80104c6:	ab03      	add	r3, sp, #12
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	462a      	mov	r2, r5
 80104cc:	4b12      	ldr	r3, [pc, #72]	@ (8010518 <_vfiprintf_r+0x228>)
 80104ce:	a904      	add	r1, sp, #16
 80104d0:	4630      	mov	r0, r6
 80104d2:	f3af 8000 	nop.w
 80104d6:	4607      	mov	r7, r0
 80104d8:	1c78      	adds	r0, r7, #1
 80104da:	d1d6      	bne.n	801048a <_vfiprintf_r+0x19a>
 80104dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80104de:	07d9      	lsls	r1, r3, #31
 80104e0:	d405      	bmi.n	80104ee <_vfiprintf_r+0x1fe>
 80104e2:	89ab      	ldrh	r3, [r5, #12]
 80104e4:	059a      	lsls	r2, r3, #22
 80104e6:	d402      	bmi.n	80104ee <_vfiprintf_r+0x1fe>
 80104e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104ea:	f7ff fd25 	bl	800ff38 <__retarget_lock_release_recursive>
 80104ee:	89ab      	ldrh	r3, [r5, #12]
 80104f0:	065b      	lsls	r3, r3, #25
 80104f2:	f53f af1f 	bmi.w	8010334 <_vfiprintf_r+0x44>
 80104f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80104f8:	e71e      	b.n	8010338 <_vfiprintf_r+0x48>
 80104fa:	ab03      	add	r3, sp, #12
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	462a      	mov	r2, r5
 8010500:	4b05      	ldr	r3, [pc, #20]	@ (8010518 <_vfiprintf_r+0x228>)
 8010502:	a904      	add	r1, sp, #16
 8010504:	4630      	mov	r0, r6
 8010506:	f000 f879 	bl	80105fc <_printf_i>
 801050a:	e7e4      	b.n	80104d6 <_vfiprintf_r+0x1e6>
 801050c:	08018002 	.word	0x08018002
 8010510:	0801800c 	.word	0x0801800c
 8010514:	00000000 	.word	0x00000000
 8010518:	080102cb 	.word	0x080102cb
 801051c:	08018008 	.word	0x08018008

08010520 <_printf_common>:
 8010520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010524:	4616      	mov	r6, r2
 8010526:	4698      	mov	r8, r3
 8010528:	688a      	ldr	r2, [r1, #8]
 801052a:	690b      	ldr	r3, [r1, #16]
 801052c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010530:	4293      	cmp	r3, r2
 8010532:	bfb8      	it	lt
 8010534:	4613      	movlt	r3, r2
 8010536:	6033      	str	r3, [r6, #0]
 8010538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801053c:	4607      	mov	r7, r0
 801053e:	460c      	mov	r4, r1
 8010540:	b10a      	cbz	r2, 8010546 <_printf_common+0x26>
 8010542:	3301      	adds	r3, #1
 8010544:	6033      	str	r3, [r6, #0]
 8010546:	6823      	ldr	r3, [r4, #0]
 8010548:	0699      	lsls	r1, r3, #26
 801054a:	bf42      	ittt	mi
 801054c:	6833      	ldrmi	r3, [r6, #0]
 801054e:	3302      	addmi	r3, #2
 8010550:	6033      	strmi	r3, [r6, #0]
 8010552:	6825      	ldr	r5, [r4, #0]
 8010554:	f015 0506 	ands.w	r5, r5, #6
 8010558:	d106      	bne.n	8010568 <_printf_common+0x48>
 801055a:	f104 0a19 	add.w	sl, r4, #25
 801055e:	68e3      	ldr	r3, [r4, #12]
 8010560:	6832      	ldr	r2, [r6, #0]
 8010562:	1a9b      	subs	r3, r3, r2
 8010564:	42ab      	cmp	r3, r5
 8010566:	dc26      	bgt.n	80105b6 <_printf_common+0x96>
 8010568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801056c:	6822      	ldr	r2, [r4, #0]
 801056e:	3b00      	subs	r3, #0
 8010570:	bf18      	it	ne
 8010572:	2301      	movne	r3, #1
 8010574:	0692      	lsls	r2, r2, #26
 8010576:	d42b      	bmi.n	80105d0 <_printf_common+0xb0>
 8010578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801057c:	4641      	mov	r1, r8
 801057e:	4638      	mov	r0, r7
 8010580:	47c8      	blx	r9
 8010582:	3001      	adds	r0, #1
 8010584:	d01e      	beq.n	80105c4 <_printf_common+0xa4>
 8010586:	6823      	ldr	r3, [r4, #0]
 8010588:	6922      	ldr	r2, [r4, #16]
 801058a:	f003 0306 	and.w	r3, r3, #6
 801058e:	2b04      	cmp	r3, #4
 8010590:	bf02      	ittt	eq
 8010592:	68e5      	ldreq	r5, [r4, #12]
 8010594:	6833      	ldreq	r3, [r6, #0]
 8010596:	1aed      	subeq	r5, r5, r3
 8010598:	68a3      	ldr	r3, [r4, #8]
 801059a:	bf0c      	ite	eq
 801059c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80105a0:	2500      	movne	r5, #0
 80105a2:	4293      	cmp	r3, r2
 80105a4:	bfc4      	itt	gt
 80105a6:	1a9b      	subgt	r3, r3, r2
 80105a8:	18ed      	addgt	r5, r5, r3
 80105aa:	2600      	movs	r6, #0
 80105ac:	341a      	adds	r4, #26
 80105ae:	42b5      	cmp	r5, r6
 80105b0:	d11a      	bne.n	80105e8 <_printf_common+0xc8>
 80105b2:	2000      	movs	r0, #0
 80105b4:	e008      	b.n	80105c8 <_printf_common+0xa8>
 80105b6:	2301      	movs	r3, #1
 80105b8:	4652      	mov	r2, sl
 80105ba:	4641      	mov	r1, r8
 80105bc:	4638      	mov	r0, r7
 80105be:	47c8      	blx	r9
 80105c0:	3001      	adds	r0, #1
 80105c2:	d103      	bne.n	80105cc <_printf_common+0xac>
 80105c4:	f04f 30ff 	mov.w	r0, #4294967295
 80105c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105cc:	3501      	adds	r5, #1
 80105ce:	e7c6      	b.n	801055e <_printf_common+0x3e>
 80105d0:	18e1      	adds	r1, r4, r3
 80105d2:	1c5a      	adds	r2, r3, #1
 80105d4:	2030      	movs	r0, #48	@ 0x30
 80105d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80105da:	4422      	add	r2, r4
 80105dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80105e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80105e4:	3302      	adds	r3, #2
 80105e6:	e7c7      	b.n	8010578 <_printf_common+0x58>
 80105e8:	2301      	movs	r3, #1
 80105ea:	4622      	mov	r2, r4
 80105ec:	4641      	mov	r1, r8
 80105ee:	4638      	mov	r0, r7
 80105f0:	47c8      	blx	r9
 80105f2:	3001      	adds	r0, #1
 80105f4:	d0e6      	beq.n	80105c4 <_printf_common+0xa4>
 80105f6:	3601      	adds	r6, #1
 80105f8:	e7d9      	b.n	80105ae <_printf_common+0x8e>
	...

080105fc <_printf_i>:
 80105fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010600:	7e0f      	ldrb	r7, [r1, #24]
 8010602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010604:	2f78      	cmp	r7, #120	@ 0x78
 8010606:	4691      	mov	r9, r2
 8010608:	4680      	mov	r8, r0
 801060a:	460c      	mov	r4, r1
 801060c:	469a      	mov	sl, r3
 801060e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010612:	d807      	bhi.n	8010624 <_printf_i+0x28>
 8010614:	2f62      	cmp	r7, #98	@ 0x62
 8010616:	d80a      	bhi.n	801062e <_printf_i+0x32>
 8010618:	2f00      	cmp	r7, #0
 801061a:	f000 80d2 	beq.w	80107c2 <_printf_i+0x1c6>
 801061e:	2f58      	cmp	r7, #88	@ 0x58
 8010620:	f000 80b9 	beq.w	8010796 <_printf_i+0x19a>
 8010624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801062c:	e03a      	b.n	80106a4 <_printf_i+0xa8>
 801062e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010632:	2b15      	cmp	r3, #21
 8010634:	d8f6      	bhi.n	8010624 <_printf_i+0x28>
 8010636:	a101      	add	r1, pc, #4	@ (adr r1, 801063c <_printf_i+0x40>)
 8010638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801063c:	08010695 	.word	0x08010695
 8010640:	080106a9 	.word	0x080106a9
 8010644:	08010625 	.word	0x08010625
 8010648:	08010625 	.word	0x08010625
 801064c:	08010625 	.word	0x08010625
 8010650:	08010625 	.word	0x08010625
 8010654:	080106a9 	.word	0x080106a9
 8010658:	08010625 	.word	0x08010625
 801065c:	08010625 	.word	0x08010625
 8010660:	08010625 	.word	0x08010625
 8010664:	08010625 	.word	0x08010625
 8010668:	080107a9 	.word	0x080107a9
 801066c:	080106d3 	.word	0x080106d3
 8010670:	08010763 	.word	0x08010763
 8010674:	08010625 	.word	0x08010625
 8010678:	08010625 	.word	0x08010625
 801067c:	080107cb 	.word	0x080107cb
 8010680:	08010625 	.word	0x08010625
 8010684:	080106d3 	.word	0x080106d3
 8010688:	08010625 	.word	0x08010625
 801068c:	08010625 	.word	0x08010625
 8010690:	0801076b 	.word	0x0801076b
 8010694:	6833      	ldr	r3, [r6, #0]
 8010696:	1d1a      	adds	r2, r3, #4
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	6032      	str	r2, [r6, #0]
 801069c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80106a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80106a4:	2301      	movs	r3, #1
 80106a6:	e09d      	b.n	80107e4 <_printf_i+0x1e8>
 80106a8:	6833      	ldr	r3, [r6, #0]
 80106aa:	6820      	ldr	r0, [r4, #0]
 80106ac:	1d19      	adds	r1, r3, #4
 80106ae:	6031      	str	r1, [r6, #0]
 80106b0:	0606      	lsls	r6, r0, #24
 80106b2:	d501      	bpl.n	80106b8 <_printf_i+0xbc>
 80106b4:	681d      	ldr	r5, [r3, #0]
 80106b6:	e003      	b.n	80106c0 <_printf_i+0xc4>
 80106b8:	0645      	lsls	r5, r0, #25
 80106ba:	d5fb      	bpl.n	80106b4 <_printf_i+0xb8>
 80106bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80106c0:	2d00      	cmp	r5, #0
 80106c2:	da03      	bge.n	80106cc <_printf_i+0xd0>
 80106c4:	232d      	movs	r3, #45	@ 0x2d
 80106c6:	426d      	negs	r5, r5
 80106c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80106cc:	4859      	ldr	r0, [pc, #356]	@ (8010834 <_printf_i+0x238>)
 80106ce:	230a      	movs	r3, #10
 80106d0:	e011      	b.n	80106f6 <_printf_i+0xfa>
 80106d2:	6821      	ldr	r1, [r4, #0]
 80106d4:	6833      	ldr	r3, [r6, #0]
 80106d6:	0608      	lsls	r0, r1, #24
 80106d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80106dc:	d402      	bmi.n	80106e4 <_printf_i+0xe8>
 80106de:	0649      	lsls	r1, r1, #25
 80106e0:	bf48      	it	mi
 80106e2:	b2ad      	uxthmi	r5, r5
 80106e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80106e6:	4853      	ldr	r0, [pc, #332]	@ (8010834 <_printf_i+0x238>)
 80106e8:	6033      	str	r3, [r6, #0]
 80106ea:	bf14      	ite	ne
 80106ec:	230a      	movne	r3, #10
 80106ee:	2308      	moveq	r3, #8
 80106f0:	2100      	movs	r1, #0
 80106f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80106f6:	6866      	ldr	r6, [r4, #4]
 80106f8:	60a6      	str	r6, [r4, #8]
 80106fa:	2e00      	cmp	r6, #0
 80106fc:	bfa2      	ittt	ge
 80106fe:	6821      	ldrge	r1, [r4, #0]
 8010700:	f021 0104 	bicge.w	r1, r1, #4
 8010704:	6021      	strge	r1, [r4, #0]
 8010706:	b90d      	cbnz	r5, 801070c <_printf_i+0x110>
 8010708:	2e00      	cmp	r6, #0
 801070a:	d04b      	beq.n	80107a4 <_printf_i+0x1a8>
 801070c:	4616      	mov	r6, r2
 801070e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010712:	fb03 5711 	mls	r7, r3, r1, r5
 8010716:	5dc7      	ldrb	r7, [r0, r7]
 8010718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801071c:	462f      	mov	r7, r5
 801071e:	42bb      	cmp	r3, r7
 8010720:	460d      	mov	r5, r1
 8010722:	d9f4      	bls.n	801070e <_printf_i+0x112>
 8010724:	2b08      	cmp	r3, #8
 8010726:	d10b      	bne.n	8010740 <_printf_i+0x144>
 8010728:	6823      	ldr	r3, [r4, #0]
 801072a:	07df      	lsls	r7, r3, #31
 801072c:	d508      	bpl.n	8010740 <_printf_i+0x144>
 801072e:	6923      	ldr	r3, [r4, #16]
 8010730:	6861      	ldr	r1, [r4, #4]
 8010732:	4299      	cmp	r1, r3
 8010734:	bfde      	ittt	le
 8010736:	2330      	movle	r3, #48	@ 0x30
 8010738:	f806 3c01 	strble.w	r3, [r6, #-1]
 801073c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010740:	1b92      	subs	r2, r2, r6
 8010742:	6122      	str	r2, [r4, #16]
 8010744:	f8cd a000 	str.w	sl, [sp]
 8010748:	464b      	mov	r3, r9
 801074a:	aa03      	add	r2, sp, #12
 801074c:	4621      	mov	r1, r4
 801074e:	4640      	mov	r0, r8
 8010750:	f7ff fee6 	bl	8010520 <_printf_common>
 8010754:	3001      	adds	r0, #1
 8010756:	d14a      	bne.n	80107ee <_printf_i+0x1f2>
 8010758:	f04f 30ff 	mov.w	r0, #4294967295
 801075c:	b004      	add	sp, #16
 801075e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010762:	6823      	ldr	r3, [r4, #0]
 8010764:	f043 0320 	orr.w	r3, r3, #32
 8010768:	6023      	str	r3, [r4, #0]
 801076a:	4833      	ldr	r0, [pc, #204]	@ (8010838 <_printf_i+0x23c>)
 801076c:	2778      	movs	r7, #120	@ 0x78
 801076e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010772:	6823      	ldr	r3, [r4, #0]
 8010774:	6831      	ldr	r1, [r6, #0]
 8010776:	061f      	lsls	r7, r3, #24
 8010778:	f851 5b04 	ldr.w	r5, [r1], #4
 801077c:	d402      	bmi.n	8010784 <_printf_i+0x188>
 801077e:	065f      	lsls	r7, r3, #25
 8010780:	bf48      	it	mi
 8010782:	b2ad      	uxthmi	r5, r5
 8010784:	6031      	str	r1, [r6, #0]
 8010786:	07d9      	lsls	r1, r3, #31
 8010788:	bf44      	itt	mi
 801078a:	f043 0320 	orrmi.w	r3, r3, #32
 801078e:	6023      	strmi	r3, [r4, #0]
 8010790:	b11d      	cbz	r5, 801079a <_printf_i+0x19e>
 8010792:	2310      	movs	r3, #16
 8010794:	e7ac      	b.n	80106f0 <_printf_i+0xf4>
 8010796:	4827      	ldr	r0, [pc, #156]	@ (8010834 <_printf_i+0x238>)
 8010798:	e7e9      	b.n	801076e <_printf_i+0x172>
 801079a:	6823      	ldr	r3, [r4, #0]
 801079c:	f023 0320 	bic.w	r3, r3, #32
 80107a0:	6023      	str	r3, [r4, #0]
 80107a2:	e7f6      	b.n	8010792 <_printf_i+0x196>
 80107a4:	4616      	mov	r6, r2
 80107a6:	e7bd      	b.n	8010724 <_printf_i+0x128>
 80107a8:	6833      	ldr	r3, [r6, #0]
 80107aa:	6825      	ldr	r5, [r4, #0]
 80107ac:	6961      	ldr	r1, [r4, #20]
 80107ae:	1d18      	adds	r0, r3, #4
 80107b0:	6030      	str	r0, [r6, #0]
 80107b2:	062e      	lsls	r6, r5, #24
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	d501      	bpl.n	80107bc <_printf_i+0x1c0>
 80107b8:	6019      	str	r1, [r3, #0]
 80107ba:	e002      	b.n	80107c2 <_printf_i+0x1c6>
 80107bc:	0668      	lsls	r0, r5, #25
 80107be:	d5fb      	bpl.n	80107b8 <_printf_i+0x1bc>
 80107c0:	8019      	strh	r1, [r3, #0]
 80107c2:	2300      	movs	r3, #0
 80107c4:	6123      	str	r3, [r4, #16]
 80107c6:	4616      	mov	r6, r2
 80107c8:	e7bc      	b.n	8010744 <_printf_i+0x148>
 80107ca:	6833      	ldr	r3, [r6, #0]
 80107cc:	1d1a      	adds	r2, r3, #4
 80107ce:	6032      	str	r2, [r6, #0]
 80107d0:	681e      	ldr	r6, [r3, #0]
 80107d2:	6862      	ldr	r2, [r4, #4]
 80107d4:	2100      	movs	r1, #0
 80107d6:	4630      	mov	r0, r6
 80107d8:	f7ef fcfa 	bl	80001d0 <memchr>
 80107dc:	b108      	cbz	r0, 80107e2 <_printf_i+0x1e6>
 80107de:	1b80      	subs	r0, r0, r6
 80107e0:	6060      	str	r0, [r4, #4]
 80107e2:	6863      	ldr	r3, [r4, #4]
 80107e4:	6123      	str	r3, [r4, #16]
 80107e6:	2300      	movs	r3, #0
 80107e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80107ec:	e7aa      	b.n	8010744 <_printf_i+0x148>
 80107ee:	6923      	ldr	r3, [r4, #16]
 80107f0:	4632      	mov	r2, r6
 80107f2:	4649      	mov	r1, r9
 80107f4:	4640      	mov	r0, r8
 80107f6:	47d0      	blx	sl
 80107f8:	3001      	adds	r0, #1
 80107fa:	d0ad      	beq.n	8010758 <_printf_i+0x15c>
 80107fc:	6823      	ldr	r3, [r4, #0]
 80107fe:	079b      	lsls	r3, r3, #30
 8010800:	d413      	bmi.n	801082a <_printf_i+0x22e>
 8010802:	68e0      	ldr	r0, [r4, #12]
 8010804:	9b03      	ldr	r3, [sp, #12]
 8010806:	4298      	cmp	r0, r3
 8010808:	bfb8      	it	lt
 801080a:	4618      	movlt	r0, r3
 801080c:	e7a6      	b.n	801075c <_printf_i+0x160>
 801080e:	2301      	movs	r3, #1
 8010810:	4632      	mov	r2, r6
 8010812:	4649      	mov	r1, r9
 8010814:	4640      	mov	r0, r8
 8010816:	47d0      	blx	sl
 8010818:	3001      	adds	r0, #1
 801081a:	d09d      	beq.n	8010758 <_printf_i+0x15c>
 801081c:	3501      	adds	r5, #1
 801081e:	68e3      	ldr	r3, [r4, #12]
 8010820:	9903      	ldr	r1, [sp, #12]
 8010822:	1a5b      	subs	r3, r3, r1
 8010824:	42ab      	cmp	r3, r5
 8010826:	dcf2      	bgt.n	801080e <_printf_i+0x212>
 8010828:	e7eb      	b.n	8010802 <_printf_i+0x206>
 801082a:	2500      	movs	r5, #0
 801082c:	f104 0619 	add.w	r6, r4, #25
 8010830:	e7f5      	b.n	801081e <_printf_i+0x222>
 8010832:	bf00      	nop
 8010834:	08018013 	.word	0x08018013
 8010838:	08018024 	.word	0x08018024

0801083c <__sflush_r>:
 801083c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010844:	0716      	lsls	r6, r2, #28
 8010846:	4605      	mov	r5, r0
 8010848:	460c      	mov	r4, r1
 801084a:	d454      	bmi.n	80108f6 <__sflush_r+0xba>
 801084c:	684b      	ldr	r3, [r1, #4]
 801084e:	2b00      	cmp	r3, #0
 8010850:	dc02      	bgt.n	8010858 <__sflush_r+0x1c>
 8010852:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010854:	2b00      	cmp	r3, #0
 8010856:	dd48      	ble.n	80108ea <__sflush_r+0xae>
 8010858:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801085a:	2e00      	cmp	r6, #0
 801085c:	d045      	beq.n	80108ea <__sflush_r+0xae>
 801085e:	2300      	movs	r3, #0
 8010860:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010864:	682f      	ldr	r7, [r5, #0]
 8010866:	6a21      	ldr	r1, [r4, #32]
 8010868:	602b      	str	r3, [r5, #0]
 801086a:	d030      	beq.n	80108ce <__sflush_r+0x92>
 801086c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801086e:	89a3      	ldrh	r3, [r4, #12]
 8010870:	0759      	lsls	r1, r3, #29
 8010872:	d505      	bpl.n	8010880 <__sflush_r+0x44>
 8010874:	6863      	ldr	r3, [r4, #4]
 8010876:	1ad2      	subs	r2, r2, r3
 8010878:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801087a:	b10b      	cbz	r3, 8010880 <__sflush_r+0x44>
 801087c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801087e:	1ad2      	subs	r2, r2, r3
 8010880:	2300      	movs	r3, #0
 8010882:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010884:	6a21      	ldr	r1, [r4, #32]
 8010886:	4628      	mov	r0, r5
 8010888:	47b0      	blx	r6
 801088a:	1c43      	adds	r3, r0, #1
 801088c:	89a3      	ldrh	r3, [r4, #12]
 801088e:	d106      	bne.n	801089e <__sflush_r+0x62>
 8010890:	6829      	ldr	r1, [r5, #0]
 8010892:	291d      	cmp	r1, #29
 8010894:	d82b      	bhi.n	80108ee <__sflush_r+0xb2>
 8010896:	4a2a      	ldr	r2, [pc, #168]	@ (8010940 <__sflush_r+0x104>)
 8010898:	410a      	asrs	r2, r1
 801089a:	07d6      	lsls	r6, r2, #31
 801089c:	d427      	bmi.n	80108ee <__sflush_r+0xb2>
 801089e:	2200      	movs	r2, #0
 80108a0:	6062      	str	r2, [r4, #4]
 80108a2:	04d9      	lsls	r1, r3, #19
 80108a4:	6922      	ldr	r2, [r4, #16]
 80108a6:	6022      	str	r2, [r4, #0]
 80108a8:	d504      	bpl.n	80108b4 <__sflush_r+0x78>
 80108aa:	1c42      	adds	r2, r0, #1
 80108ac:	d101      	bne.n	80108b2 <__sflush_r+0x76>
 80108ae:	682b      	ldr	r3, [r5, #0]
 80108b0:	b903      	cbnz	r3, 80108b4 <__sflush_r+0x78>
 80108b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80108b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80108b6:	602f      	str	r7, [r5, #0]
 80108b8:	b1b9      	cbz	r1, 80108ea <__sflush_r+0xae>
 80108ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80108be:	4299      	cmp	r1, r3
 80108c0:	d002      	beq.n	80108c8 <__sflush_r+0x8c>
 80108c2:	4628      	mov	r0, r5
 80108c4:	f7ff fb48 	bl	800ff58 <_free_r>
 80108c8:	2300      	movs	r3, #0
 80108ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80108cc:	e00d      	b.n	80108ea <__sflush_r+0xae>
 80108ce:	2301      	movs	r3, #1
 80108d0:	4628      	mov	r0, r5
 80108d2:	47b0      	blx	r6
 80108d4:	4602      	mov	r2, r0
 80108d6:	1c50      	adds	r0, r2, #1
 80108d8:	d1c9      	bne.n	801086e <__sflush_r+0x32>
 80108da:	682b      	ldr	r3, [r5, #0]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d0c6      	beq.n	801086e <__sflush_r+0x32>
 80108e0:	2b1d      	cmp	r3, #29
 80108e2:	d001      	beq.n	80108e8 <__sflush_r+0xac>
 80108e4:	2b16      	cmp	r3, #22
 80108e6:	d11e      	bne.n	8010926 <__sflush_r+0xea>
 80108e8:	602f      	str	r7, [r5, #0]
 80108ea:	2000      	movs	r0, #0
 80108ec:	e022      	b.n	8010934 <__sflush_r+0xf8>
 80108ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108f2:	b21b      	sxth	r3, r3
 80108f4:	e01b      	b.n	801092e <__sflush_r+0xf2>
 80108f6:	690f      	ldr	r7, [r1, #16]
 80108f8:	2f00      	cmp	r7, #0
 80108fa:	d0f6      	beq.n	80108ea <__sflush_r+0xae>
 80108fc:	0793      	lsls	r3, r2, #30
 80108fe:	680e      	ldr	r6, [r1, #0]
 8010900:	bf08      	it	eq
 8010902:	694b      	ldreq	r3, [r1, #20]
 8010904:	600f      	str	r7, [r1, #0]
 8010906:	bf18      	it	ne
 8010908:	2300      	movne	r3, #0
 801090a:	eba6 0807 	sub.w	r8, r6, r7
 801090e:	608b      	str	r3, [r1, #8]
 8010910:	f1b8 0f00 	cmp.w	r8, #0
 8010914:	dde9      	ble.n	80108ea <__sflush_r+0xae>
 8010916:	6a21      	ldr	r1, [r4, #32]
 8010918:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801091a:	4643      	mov	r3, r8
 801091c:	463a      	mov	r2, r7
 801091e:	4628      	mov	r0, r5
 8010920:	47b0      	blx	r6
 8010922:	2800      	cmp	r0, #0
 8010924:	dc08      	bgt.n	8010938 <__sflush_r+0xfc>
 8010926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801092a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801092e:	81a3      	strh	r3, [r4, #12]
 8010930:	f04f 30ff 	mov.w	r0, #4294967295
 8010934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010938:	4407      	add	r7, r0
 801093a:	eba8 0800 	sub.w	r8, r8, r0
 801093e:	e7e7      	b.n	8010910 <__sflush_r+0xd4>
 8010940:	dfbffffe 	.word	0xdfbffffe

08010944 <_fflush_r>:
 8010944:	b538      	push	{r3, r4, r5, lr}
 8010946:	690b      	ldr	r3, [r1, #16]
 8010948:	4605      	mov	r5, r0
 801094a:	460c      	mov	r4, r1
 801094c:	b913      	cbnz	r3, 8010954 <_fflush_r+0x10>
 801094e:	2500      	movs	r5, #0
 8010950:	4628      	mov	r0, r5
 8010952:	bd38      	pop	{r3, r4, r5, pc}
 8010954:	b118      	cbz	r0, 801095e <_fflush_r+0x1a>
 8010956:	6a03      	ldr	r3, [r0, #32]
 8010958:	b90b      	cbnz	r3, 801095e <_fflush_r+0x1a>
 801095a:	f7ff f893 	bl	800fa84 <__sinit>
 801095e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d0f3      	beq.n	801094e <_fflush_r+0xa>
 8010966:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010968:	07d0      	lsls	r0, r2, #31
 801096a:	d404      	bmi.n	8010976 <_fflush_r+0x32>
 801096c:	0599      	lsls	r1, r3, #22
 801096e:	d402      	bmi.n	8010976 <_fflush_r+0x32>
 8010970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010972:	f7ff fae0 	bl	800ff36 <__retarget_lock_acquire_recursive>
 8010976:	4628      	mov	r0, r5
 8010978:	4621      	mov	r1, r4
 801097a:	f7ff ff5f 	bl	801083c <__sflush_r>
 801097e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010980:	07da      	lsls	r2, r3, #31
 8010982:	4605      	mov	r5, r0
 8010984:	d4e4      	bmi.n	8010950 <_fflush_r+0xc>
 8010986:	89a3      	ldrh	r3, [r4, #12]
 8010988:	059b      	lsls	r3, r3, #22
 801098a:	d4e1      	bmi.n	8010950 <_fflush_r+0xc>
 801098c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801098e:	f7ff fad3 	bl	800ff38 <__retarget_lock_release_recursive>
 8010992:	e7dd      	b.n	8010950 <_fflush_r+0xc>

08010994 <__swhatbuf_r>:
 8010994:	b570      	push	{r4, r5, r6, lr}
 8010996:	460c      	mov	r4, r1
 8010998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801099c:	2900      	cmp	r1, #0
 801099e:	b096      	sub	sp, #88	@ 0x58
 80109a0:	4615      	mov	r5, r2
 80109a2:	461e      	mov	r6, r3
 80109a4:	da0d      	bge.n	80109c2 <__swhatbuf_r+0x2e>
 80109a6:	89a3      	ldrh	r3, [r4, #12]
 80109a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80109ac:	f04f 0100 	mov.w	r1, #0
 80109b0:	bf14      	ite	ne
 80109b2:	2340      	movne	r3, #64	@ 0x40
 80109b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80109b8:	2000      	movs	r0, #0
 80109ba:	6031      	str	r1, [r6, #0]
 80109bc:	602b      	str	r3, [r5, #0]
 80109be:	b016      	add	sp, #88	@ 0x58
 80109c0:	bd70      	pop	{r4, r5, r6, pc}
 80109c2:	466a      	mov	r2, sp
 80109c4:	f000 f848 	bl	8010a58 <_fstat_r>
 80109c8:	2800      	cmp	r0, #0
 80109ca:	dbec      	blt.n	80109a6 <__swhatbuf_r+0x12>
 80109cc:	9901      	ldr	r1, [sp, #4]
 80109ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80109d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80109d6:	4259      	negs	r1, r3
 80109d8:	4159      	adcs	r1, r3
 80109da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80109de:	e7eb      	b.n	80109b8 <__swhatbuf_r+0x24>

080109e0 <__smakebuf_r>:
 80109e0:	898b      	ldrh	r3, [r1, #12]
 80109e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109e4:	079d      	lsls	r5, r3, #30
 80109e6:	4606      	mov	r6, r0
 80109e8:	460c      	mov	r4, r1
 80109ea:	d507      	bpl.n	80109fc <__smakebuf_r+0x1c>
 80109ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80109f0:	6023      	str	r3, [r4, #0]
 80109f2:	6123      	str	r3, [r4, #16]
 80109f4:	2301      	movs	r3, #1
 80109f6:	6163      	str	r3, [r4, #20]
 80109f8:	b003      	add	sp, #12
 80109fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109fc:	ab01      	add	r3, sp, #4
 80109fe:	466a      	mov	r2, sp
 8010a00:	f7ff ffc8 	bl	8010994 <__swhatbuf_r>
 8010a04:	9f00      	ldr	r7, [sp, #0]
 8010a06:	4605      	mov	r5, r0
 8010a08:	4639      	mov	r1, r7
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f7fe ff22 	bl	800f854 <_malloc_r>
 8010a10:	b948      	cbnz	r0, 8010a26 <__smakebuf_r+0x46>
 8010a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a16:	059a      	lsls	r2, r3, #22
 8010a18:	d4ee      	bmi.n	80109f8 <__smakebuf_r+0x18>
 8010a1a:	f023 0303 	bic.w	r3, r3, #3
 8010a1e:	f043 0302 	orr.w	r3, r3, #2
 8010a22:	81a3      	strh	r3, [r4, #12]
 8010a24:	e7e2      	b.n	80109ec <__smakebuf_r+0xc>
 8010a26:	89a3      	ldrh	r3, [r4, #12]
 8010a28:	6020      	str	r0, [r4, #0]
 8010a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a2e:	81a3      	strh	r3, [r4, #12]
 8010a30:	9b01      	ldr	r3, [sp, #4]
 8010a32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010a36:	b15b      	cbz	r3, 8010a50 <__smakebuf_r+0x70>
 8010a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	f000 f81d 	bl	8010a7c <_isatty_r>
 8010a42:	b128      	cbz	r0, 8010a50 <__smakebuf_r+0x70>
 8010a44:	89a3      	ldrh	r3, [r4, #12]
 8010a46:	f023 0303 	bic.w	r3, r3, #3
 8010a4a:	f043 0301 	orr.w	r3, r3, #1
 8010a4e:	81a3      	strh	r3, [r4, #12]
 8010a50:	89a3      	ldrh	r3, [r4, #12]
 8010a52:	431d      	orrs	r5, r3
 8010a54:	81a5      	strh	r5, [r4, #12]
 8010a56:	e7cf      	b.n	80109f8 <__smakebuf_r+0x18>

08010a58 <_fstat_r>:
 8010a58:	b538      	push	{r3, r4, r5, lr}
 8010a5a:	4d07      	ldr	r5, [pc, #28]	@ (8010a78 <_fstat_r+0x20>)
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	4604      	mov	r4, r0
 8010a60:	4608      	mov	r0, r1
 8010a62:	4611      	mov	r1, r2
 8010a64:	602b      	str	r3, [r5, #0]
 8010a66:	f7f6 fb41 	bl	80070ec <_fstat>
 8010a6a:	1c43      	adds	r3, r0, #1
 8010a6c:	d102      	bne.n	8010a74 <_fstat_r+0x1c>
 8010a6e:	682b      	ldr	r3, [r5, #0]
 8010a70:	b103      	cbz	r3, 8010a74 <_fstat_r+0x1c>
 8010a72:	6023      	str	r3, [r4, #0]
 8010a74:	bd38      	pop	{r3, r4, r5, pc}
 8010a76:	bf00      	nop
 8010a78:	20000694 	.word	0x20000694

08010a7c <_isatty_r>:
 8010a7c:	b538      	push	{r3, r4, r5, lr}
 8010a7e:	4d06      	ldr	r5, [pc, #24]	@ (8010a98 <_isatty_r+0x1c>)
 8010a80:	2300      	movs	r3, #0
 8010a82:	4604      	mov	r4, r0
 8010a84:	4608      	mov	r0, r1
 8010a86:	602b      	str	r3, [r5, #0]
 8010a88:	f7f6 fb4c 	bl	8007124 <_isatty>
 8010a8c:	1c43      	adds	r3, r0, #1
 8010a8e:	d102      	bne.n	8010a96 <_isatty_r+0x1a>
 8010a90:	682b      	ldr	r3, [r5, #0]
 8010a92:	b103      	cbz	r3, 8010a96 <_isatty_r+0x1a>
 8010a94:	6023      	str	r3, [r4, #0]
 8010a96:	bd38      	pop	{r3, r4, r5, pc}
 8010a98:	20000694 	.word	0x20000694

08010a9c <_realloc_r>:
 8010a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa0:	4680      	mov	r8, r0
 8010aa2:	4615      	mov	r5, r2
 8010aa4:	460c      	mov	r4, r1
 8010aa6:	b921      	cbnz	r1, 8010ab2 <_realloc_r+0x16>
 8010aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010aac:	4611      	mov	r1, r2
 8010aae:	f7fe bed1 	b.w	800f854 <_malloc_r>
 8010ab2:	b92a      	cbnz	r2, 8010ac0 <_realloc_r+0x24>
 8010ab4:	f7ff fa50 	bl	800ff58 <_free_r>
 8010ab8:	2400      	movs	r4, #0
 8010aba:	4620      	mov	r0, r4
 8010abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ac0:	f000 f81a 	bl	8010af8 <_malloc_usable_size_r>
 8010ac4:	4285      	cmp	r5, r0
 8010ac6:	4606      	mov	r6, r0
 8010ac8:	d802      	bhi.n	8010ad0 <_realloc_r+0x34>
 8010aca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010ace:	d8f4      	bhi.n	8010aba <_realloc_r+0x1e>
 8010ad0:	4629      	mov	r1, r5
 8010ad2:	4640      	mov	r0, r8
 8010ad4:	f7fe febe 	bl	800f854 <_malloc_r>
 8010ad8:	4607      	mov	r7, r0
 8010ada:	2800      	cmp	r0, #0
 8010adc:	d0ec      	beq.n	8010ab8 <_realloc_r+0x1c>
 8010ade:	42b5      	cmp	r5, r6
 8010ae0:	462a      	mov	r2, r5
 8010ae2:	4621      	mov	r1, r4
 8010ae4:	bf28      	it	cs
 8010ae6:	4632      	movcs	r2, r6
 8010ae8:	f7ff fa27 	bl	800ff3a <memcpy>
 8010aec:	4621      	mov	r1, r4
 8010aee:	4640      	mov	r0, r8
 8010af0:	f7ff fa32 	bl	800ff58 <_free_r>
 8010af4:	463c      	mov	r4, r7
 8010af6:	e7e0      	b.n	8010aba <_realloc_r+0x1e>

08010af8 <_malloc_usable_size_r>:
 8010af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010afc:	1f18      	subs	r0, r3, #4
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	bfbc      	itt	lt
 8010b02:	580b      	ldrlt	r3, [r1, r0]
 8010b04:	18c0      	addlt	r0, r0, r3
 8010b06:	4770      	bx	lr

08010b08 <expf>:
 8010b08:	b508      	push	{r3, lr}
 8010b0a:	ed2d 8b02 	vpush	{d8}
 8010b0e:	eef0 8a40 	vmov.f32	s17, s0
 8010b12:	f000 fbc7 	bl	80112a4 <__ieee754_expf>
 8010b16:	eeb0 8a40 	vmov.f32	s16, s0
 8010b1a:	eeb0 0a68 	vmov.f32	s0, s17
 8010b1e:	f000 fa15 	bl	8010f4c <finitef>
 8010b22:	b160      	cbz	r0, 8010b3e <expf+0x36>
 8010b24:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8010b64 <expf+0x5c>
 8010b28:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b30:	dd0a      	ble.n	8010b48 <expf+0x40>
 8010b32:	f7ff f9d5 	bl	800fee0 <__errno>
 8010b36:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8010b68 <expf+0x60>
 8010b3a:	2322      	movs	r3, #34	@ 0x22
 8010b3c:	6003      	str	r3, [r0, #0]
 8010b3e:	eeb0 0a48 	vmov.f32	s0, s16
 8010b42:	ecbd 8b02 	vpop	{d8}
 8010b46:	bd08      	pop	{r3, pc}
 8010b48:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010b6c <expf+0x64>
 8010b4c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b54:	d5f3      	bpl.n	8010b3e <expf+0x36>
 8010b56:	f7ff f9c3 	bl	800fee0 <__errno>
 8010b5a:	2322      	movs	r3, #34	@ 0x22
 8010b5c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8010b70 <expf+0x68>
 8010b60:	6003      	str	r3, [r0, #0]
 8010b62:	e7ec      	b.n	8010b3e <expf+0x36>
 8010b64:	42b17217 	.word	0x42b17217
 8010b68:	7f800000 	.word	0x7f800000
 8010b6c:	c2cff1b5 	.word	0xc2cff1b5
 8010b70:	00000000 	.word	0x00000000

08010b74 <log10f>:
 8010b74:	b508      	push	{r3, lr}
 8010b76:	ed2d 8b02 	vpush	{d8}
 8010b7a:	eeb0 8a40 	vmov.f32	s16, s0
 8010b7e:	f000 fc5f 	bl	8011440 <__ieee754_log10f>
 8010b82:	eeb4 8a48 	vcmp.f32	s16, s16
 8010b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8a:	d60f      	bvs.n	8010bac <log10f+0x38>
 8010b8c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b94:	d80a      	bhi.n	8010bac <log10f+0x38>
 8010b96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b9e:	d108      	bne.n	8010bb2 <log10f+0x3e>
 8010ba0:	f7ff f99e 	bl	800fee0 <__errno>
 8010ba4:	2322      	movs	r3, #34	@ 0x22
 8010ba6:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010bc8 <log10f+0x54>
 8010baa:	6003      	str	r3, [r0, #0]
 8010bac:	ecbd 8b02 	vpop	{d8}
 8010bb0:	bd08      	pop	{r3, pc}
 8010bb2:	f7ff f995 	bl	800fee0 <__errno>
 8010bb6:	ecbd 8b02 	vpop	{d8}
 8010bba:	2321      	movs	r3, #33	@ 0x21
 8010bbc:	6003      	str	r3, [r0, #0]
 8010bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010bc2:	4802      	ldr	r0, [pc, #8]	@ (8010bcc <log10f+0x58>)
 8010bc4:	f000 b9cc 	b.w	8010f60 <nanf>
 8010bc8:	ff800000 	.word	0xff800000
 8010bcc:	08018007 	.word	0x08018007

08010bd0 <powf>:
 8010bd0:	b508      	push	{r3, lr}
 8010bd2:	ed2d 8b04 	vpush	{d8-d9}
 8010bd6:	eeb0 8a60 	vmov.f32	s16, s1
 8010bda:	eeb0 9a40 	vmov.f32	s18, s0
 8010bde:	f000 fc87 	bl	80114f0 <__ieee754_powf>
 8010be2:	eeb4 8a48 	vcmp.f32	s16, s16
 8010be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bea:	eef0 8a40 	vmov.f32	s17, s0
 8010bee:	d63e      	bvs.n	8010c6e <powf+0x9e>
 8010bf0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf8:	d112      	bne.n	8010c20 <powf+0x50>
 8010bfa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c02:	d039      	beq.n	8010c78 <powf+0xa8>
 8010c04:	eeb0 0a48 	vmov.f32	s0, s16
 8010c08:	f000 f9a0 	bl	8010f4c <finitef>
 8010c0c:	b378      	cbz	r0, 8010c6e <powf+0x9e>
 8010c0e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c16:	d52a      	bpl.n	8010c6e <powf+0x9e>
 8010c18:	f7ff f962 	bl	800fee0 <__errno>
 8010c1c:	2322      	movs	r3, #34	@ 0x22
 8010c1e:	e014      	b.n	8010c4a <powf+0x7a>
 8010c20:	f000 f994 	bl	8010f4c <finitef>
 8010c24:	b998      	cbnz	r0, 8010c4e <powf+0x7e>
 8010c26:	eeb0 0a49 	vmov.f32	s0, s18
 8010c2a:	f000 f98f 	bl	8010f4c <finitef>
 8010c2e:	b170      	cbz	r0, 8010c4e <powf+0x7e>
 8010c30:	eeb0 0a48 	vmov.f32	s0, s16
 8010c34:	f000 f98a 	bl	8010f4c <finitef>
 8010c38:	b148      	cbz	r0, 8010c4e <powf+0x7e>
 8010c3a:	eef4 8a68 	vcmp.f32	s17, s17
 8010c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c42:	d7e9      	bvc.n	8010c18 <powf+0x48>
 8010c44:	f7ff f94c 	bl	800fee0 <__errno>
 8010c48:	2321      	movs	r3, #33	@ 0x21
 8010c4a:	6003      	str	r3, [r0, #0]
 8010c4c:	e00f      	b.n	8010c6e <powf+0x9e>
 8010c4e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c56:	d10a      	bne.n	8010c6e <powf+0x9e>
 8010c58:	eeb0 0a49 	vmov.f32	s0, s18
 8010c5c:	f000 f976 	bl	8010f4c <finitef>
 8010c60:	b128      	cbz	r0, 8010c6e <powf+0x9e>
 8010c62:	eeb0 0a48 	vmov.f32	s0, s16
 8010c66:	f000 f971 	bl	8010f4c <finitef>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	d1d4      	bne.n	8010c18 <powf+0x48>
 8010c6e:	eeb0 0a68 	vmov.f32	s0, s17
 8010c72:	ecbd 8b04 	vpop	{d8-d9}
 8010c76:	bd08      	pop	{r3, pc}
 8010c78:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010c7c:	e7f7      	b.n	8010c6e <powf+0x9e>
	...

08010c80 <atanf>:
 8010c80:	b538      	push	{r3, r4, r5, lr}
 8010c82:	ee10 5a10 	vmov	r5, s0
 8010c86:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010c8a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8010c8e:	eef0 7a40 	vmov.f32	s15, s0
 8010c92:	d310      	bcc.n	8010cb6 <atanf+0x36>
 8010c94:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010c98:	d904      	bls.n	8010ca4 <atanf+0x24>
 8010c9a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8010ca2:	bd38      	pop	{r3, r4, r5, pc}
 8010ca4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010ddc <atanf+0x15c>
 8010ca8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8010de0 <atanf+0x160>
 8010cac:	2d00      	cmp	r5, #0
 8010cae:	bfc8      	it	gt
 8010cb0:	eef0 7a47 	vmovgt.f32	s15, s14
 8010cb4:	e7f3      	b.n	8010c9e <atanf+0x1e>
 8010cb6:	4b4b      	ldr	r3, [pc, #300]	@ (8010de4 <atanf+0x164>)
 8010cb8:	429c      	cmp	r4, r3
 8010cba:	d810      	bhi.n	8010cde <atanf+0x5e>
 8010cbc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8010cc0:	d20a      	bcs.n	8010cd8 <atanf+0x58>
 8010cc2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010de8 <atanf+0x168>
 8010cc6:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010cce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd6:	dce2      	bgt.n	8010c9e <atanf+0x1e>
 8010cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8010cdc:	e013      	b.n	8010d06 <atanf+0x86>
 8010cde:	f000 f8e7 	bl	8010eb0 <fabsf>
 8010ce2:	4b42      	ldr	r3, [pc, #264]	@ (8010dec <atanf+0x16c>)
 8010ce4:	429c      	cmp	r4, r3
 8010ce6:	d84f      	bhi.n	8010d88 <atanf+0x108>
 8010ce8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010cec:	429c      	cmp	r4, r3
 8010cee:	d841      	bhi.n	8010d74 <atanf+0xf4>
 8010cf0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010cf4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010cf8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010d02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010d06:	1c5a      	adds	r2, r3, #1
 8010d08:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010d0c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010df0 <atanf+0x170>
 8010d10:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8010df4 <atanf+0x174>
 8010d14:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8010df8 <atanf+0x178>
 8010d18:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010d1c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010d20:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010dfc <atanf+0x17c>
 8010d24:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010d28:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8010e00 <atanf+0x180>
 8010d2c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010d30:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010e04 <atanf+0x184>
 8010d34:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010d38:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010e08 <atanf+0x188>
 8010d3c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010d40:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010e0c <atanf+0x18c>
 8010d44:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010d48:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010e10 <atanf+0x190>
 8010d4c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010d50:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8010e14 <atanf+0x194>
 8010d54:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010d58:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8010e18 <atanf+0x198>
 8010d5c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010d60:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010d64:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010d68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010d6c:	d121      	bne.n	8010db2 <atanf+0x132>
 8010d6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d72:	e794      	b.n	8010c9e <atanf+0x1e>
 8010d74:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010d78:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010d7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010d80:	2301      	movs	r3, #1
 8010d82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010d86:	e7be      	b.n	8010d06 <atanf+0x86>
 8010d88:	4b24      	ldr	r3, [pc, #144]	@ (8010e1c <atanf+0x19c>)
 8010d8a:	429c      	cmp	r4, r3
 8010d8c:	d80b      	bhi.n	8010da6 <atanf+0x126>
 8010d8e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8010d92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010d96:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010d9a:	2302      	movs	r3, #2
 8010d9c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010da4:	e7af      	b.n	8010d06 <atanf+0x86>
 8010da6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010daa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010dae:	2303      	movs	r3, #3
 8010db0:	e7a9      	b.n	8010d06 <atanf+0x86>
 8010db2:	4a1b      	ldr	r2, [pc, #108]	@ (8010e20 <atanf+0x1a0>)
 8010db4:	491b      	ldr	r1, [pc, #108]	@ (8010e24 <atanf+0x1a4>)
 8010db6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010dba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010dbe:	edd3 6a00 	vldr	s13, [r3]
 8010dc2:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010dc6:	2d00      	cmp	r5, #0
 8010dc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010dcc:	edd2 7a00 	vldr	s15, [r2]
 8010dd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010dd4:	bfb8      	it	lt
 8010dd6:	eef1 7a67 	vneglt.f32	s15, s15
 8010dda:	e760      	b.n	8010c9e <atanf+0x1e>
 8010ddc:	bfc90fdb 	.word	0xbfc90fdb
 8010de0:	3fc90fdb 	.word	0x3fc90fdb
 8010de4:	3edfffff 	.word	0x3edfffff
 8010de8:	7149f2ca 	.word	0x7149f2ca
 8010dec:	3f97ffff 	.word	0x3f97ffff
 8010df0:	3c8569d7 	.word	0x3c8569d7
 8010df4:	3d4bda59 	.word	0x3d4bda59
 8010df8:	bd6ef16b 	.word	0xbd6ef16b
 8010dfc:	3d886b35 	.word	0x3d886b35
 8010e00:	3dba2e6e 	.word	0x3dba2e6e
 8010e04:	3e124925 	.word	0x3e124925
 8010e08:	3eaaaaab 	.word	0x3eaaaaab
 8010e0c:	bd15a221 	.word	0xbd15a221
 8010e10:	bd9d8795 	.word	0xbd9d8795
 8010e14:	bde38e38 	.word	0xbde38e38
 8010e18:	be4ccccd 	.word	0xbe4ccccd
 8010e1c:	401bffff 	.word	0x401bffff
 8010e20:	08018048 	.word	0x08018048
 8010e24:	08018038 	.word	0x08018038

08010e28 <cosf>:
 8010e28:	ee10 3a10 	vmov	r3, s0
 8010e2c:	b507      	push	{r0, r1, r2, lr}
 8010e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8010ea8 <cosf+0x80>)
 8010e30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d806      	bhi.n	8010e46 <cosf+0x1e>
 8010e38:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8010eac <cosf+0x84>
 8010e3c:	b003      	add	sp, #12
 8010e3e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e42:	f000 b98f 	b.w	8011164 <__kernel_cosf>
 8010e46:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010e4a:	d304      	bcc.n	8010e56 <cosf+0x2e>
 8010e4c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010e50:	b003      	add	sp, #12
 8010e52:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e56:	4668      	mov	r0, sp
 8010e58:	f000 fe1a 	bl	8011a90 <__ieee754_rem_pio2f>
 8010e5c:	f000 0003 	and.w	r0, r0, #3
 8010e60:	2801      	cmp	r0, #1
 8010e62:	d009      	beq.n	8010e78 <cosf+0x50>
 8010e64:	2802      	cmp	r0, #2
 8010e66:	d010      	beq.n	8010e8a <cosf+0x62>
 8010e68:	b9b0      	cbnz	r0, 8010e98 <cosf+0x70>
 8010e6a:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e6e:	ed9d 0a00 	vldr	s0, [sp]
 8010e72:	f000 f977 	bl	8011164 <__kernel_cosf>
 8010e76:	e7eb      	b.n	8010e50 <cosf+0x28>
 8010e78:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e7c:	ed9d 0a00 	vldr	s0, [sp]
 8010e80:	f000 f9c8 	bl	8011214 <__kernel_sinf>
 8010e84:	eeb1 0a40 	vneg.f32	s0, s0
 8010e88:	e7e2      	b.n	8010e50 <cosf+0x28>
 8010e8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e8e:	ed9d 0a00 	vldr	s0, [sp]
 8010e92:	f000 f967 	bl	8011164 <__kernel_cosf>
 8010e96:	e7f5      	b.n	8010e84 <cosf+0x5c>
 8010e98:	eddd 0a01 	vldr	s1, [sp, #4]
 8010e9c:	ed9d 0a00 	vldr	s0, [sp]
 8010ea0:	2001      	movs	r0, #1
 8010ea2:	f000 f9b7 	bl	8011214 <__kernel_sinf>
 8010ea6:	e7d3      	b.n	8010e50 <cosf+0x28>
 8010ea8:	3f490fd8 	.word	0x3f490fd8
 8010eac:	00000000 	.word	0x00000000

08010eb0 <fabsf>:
 8010eb0:	ee10 3a10 	vmov	r3, s0
 8010eb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010eb8:	ee00 3a10 	vmov	s0, r3
 8010ebc:	4770      	bx	lr
	...

08010ec0 <sinf>:
 8010ec0:	ee10 3a10 	vmov	r3, s0
 8010ec4:	b507      	push	{r0, r1, r2, lr}
 8010ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8010f44 <sinf+0x84>)
 8010ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	d807      	bhi.n	8010ee0 <sinf+0x20>
 8010ed0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8010f48 <sinf+0x88>
 8010ed4:	2000      	movs	r0, #0
 8010ed6:	b003      	add	sp, #12
 8010ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010edc:	f000 b99a 	b.w	8011214 <__kernel_sinf>
 8010ee0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010ee4:	d304      	bcc.n	8010ef0 <sinf+0x30>
 8010ee6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010eea:	b003      	add	sp, #12
 8010eec:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ef0:	4668      	mov	r0, sp
 8010ef2:	f000 fdcd 	bl	8011a90 <__ieee754_rem_pio2f>
 8010ef6:	f000 0003 	and.w	r0, r0, #3
 8010efa:	2801      	cmp	r0, #1
 8010efc:	d00a      	beq.n	8010f14 <sinf+0x54>
 8010efe:	2802      	cmp	r0, #2
 8010f00:	d00f      	beq.n	8010f22 <sinf+0x62>
 8010f02:	b9c0      	cbnz	r0, 8010f36 <sinf+0x76>
 8010f04:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f08:	ed9d 0a00 	vldr	s0, [sp]
 8010f0c:	2001      	movs	r0, #1
 8010f0e:	f000 f981 	bl	8011214 <__kernel_sinf>
 8010f12:	e7ea      	b.n	8010eea <sinf+0x2a>
 8010f14:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f18:	ed9d 0a00 	vldr	s0, [sp]
 8010f1c:	f000 f922 	bl	8011164 <__kernel_cosf>
 8010f20:	e7e3      	b.n	8010eea <sinf+0x2a>
 8010f22:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f26:	ed9d 0a00 	vldr	s0, [sp]
 8010f2a:	2001      	movs	r0, #1
 8010f2c:	f000 f972 	bl	8011214 <__kernel_sinf>
 8010f30:	eeb1 0a40 	vneg.f32	s0, s0
 8010f34:	e7d9      	b.n	8010eea <sinf+0x2a>
 8010f36:	eddd 0a01 	vldr	s1, [sp, #4]
 8010f3a:	ed9d 0a00 	vldr	s0, [sp]
 8010f3e:	f000 f911 	bl	8011164 <__kernel_cosf>
 8010f42:	e7f5      	b.n	8010f30 <sinf+0x70>
 8010f44:	3f490fd8 	.word	0x3f490fd8
 8010f48:	00000000 	.word	0x00000000

08010f4c <finitef>:
 8010f4c:	ee10 3a10 	vmov	r3, s0
 8010f50:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8010f54:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8010f58:	bfac      	ite	ge
 8010f5a:	2000      	movge	r0, #0
 8010f5c:	2001      	movlt	r0, #1
 8010f5e:	4770      	bx	lr

08010f60 <nanf>:
 8010f60:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010f68 <nanf+0x8>
 8010f64:	4770      	bx	lr
 8010f66:	bf00      	nop
 8010f68:	7fc00000 	.word	0x7fc00000

08010f6c <fmaxf>:
 8010f6c:	b508      	push	{r3, lr}
 8010f6e:	ed2d 8b02 	vpush	{d8}
 8010f72:	eeb0 8a40 	vmov.f32	s16, s0
 8010f76:	eef0 8a60 	vmov.f32	s17, s1
 8010f7a:	f000 f831 	bl	8010fe0 <__fpclassifyf>
 8010f7e:	b930      	cbnz	r0, 8010f8e <fmaxf+0x22>
 8010f80:	eeb0 8a68 	vmov.f32	s16, s17
 8010f84:	eeb0 0a48 	vmov.f32	s0, s16
 8010f88:	ecbd 8b02 	vpop	{d8}
 8010f8c:	bd08      	pop	{r3, pc}
 8010f8e:	eeb0 0a68 	vmov.f32	s0, s17
 8010f92:	f000 f825 	bl	8010fe0 <__fpclassifyf>
 8010f96:	2800      	cmp	r0, #0
 8010f98:	d0f4      	beq.n	8010f84 <fmaxf+0x18>
 8010f9a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa2:	dded      	ble.n	8010f80 <fmaxf+0x14>
 8010fa4:	e7ee      	b.n	8010f84 <fmaxf+0x18>

08010fa6 <fminf>:
 8010fa6:	b508      	push	{r3, lr}
 8010fa8:	ed2d 8b02 	vpush	{d8}
 8010fac:	eeb0 8a40 	vmov.f32	s16, s0
 8010fb0:	eef0 8a60 	vmov.f32	s17, s1
 8010fb4:	f000 f814 	bl	8010fe0 <__fpclassifyf>
 8010fb8:	b930      	cbnz	r0, 8010fc8 <fminf+0x22>
 8010fba:	eeb0 8a68 	vmov.f32	s16, s17
 8010fbe:	eeb0 0a48 	vmov.f32	s0, s16
 8010fc2:	ecbd 8b02 	vpop	{d8}
 8010fc6:	bd08      	pop	{r3, pc}
 8010fc8:	eeb0 0a68 	vmov.f32	s0, s17
 8010fcc:	f000 f808 	bl	8010fe0 <__fpclassifyf>
 8010fd0:	2800      	cmp	r0, #0
 8010fd2:	d0f4      	beq.n	8010fbe <fminf+0x18>
 8010fd4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fdc:	d5ed      	bpl.n	8010fba <fminf+0x14>
 8010fde:	e7ee      	b.n	8010fbe <fminf+0x18>

08010fe0 <__fpclassifyf>:
 8010fe0:	ee10 3a10 	vmov	r3, s0
 8010fe4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010fe8:	d00d      	beq.n	8011006 <__fpclassifyf+0x26>
 8010fea:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010fee:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010ff2:	d30a      	bcc.n	801100a <__fpclassifyf+0x2a>
 8010ff4:	4b07      	ldr	r3, [pc, #28]	@ (8011014 <__fpclassifyf+0x34>)
 8010ff6:	1e42      	subs	r2, r0, #1
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d908      	bls.n	801100e <__fpclassifyf+0x2e>
 8010ffc:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8011000:	4258      	negs	r0, r3
 8011002:	4158      	adcs	r0, r3
 8011004:	4770      	bx	lr
 8011006:	2002      	movs	r0, #2
 8011008:	4770      	bx	lr
 801100a:	2004      	movs	r0, #4
 801100c:	4770      	bx	lr
 801100e:	2003      	movs	r0, #3
 8011010:	4770      	bx	lr
 8011012:	bf00      	nop
 8011014:	007ffffe 	.word	0x007ffffe

08011018 <cabsf>:
 8011018:	b508      	push	{r3, lr}
 801101a:	ed2d 8b04 	vpush	{d8-d9}
 801101e:	eeb0 9a40 	vmov.f32	s18, s0
 8011022:	eef0 8a60 	vmov.f32	s17, s1
 8011026:	f000 f815 	bl	8011054 <crealf>
 801102a:	eef0 0a68 	vmov.f32	s1, s17
 801102e:	eeb0 8a40 	vmov.f32	s16, s0
 8011032:	eeb0 0a49 	vmov.f32	s0, s18
 8011036:	f000 f80a 	bl	801104e <cimagf>
 801103a:	eef0 0a40 	vmov.f32	s1, s0
 801103e:	eeb0 0a48 	vmov.f32	s0, s16
 8011042:	ecbd 8b04 	vpop	{d8-d9}
 8011046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801104a:	f000 be53 	b.w	8011cf4 <hypotf>

0801104e <cimagf>:
 801104e:	eeb0 0a60 	vmov.f32	s0, s1
 8011052:	4770      	bx	lr

08011054 <crealf>:
 8011054:	4770      	bx	lr

08011056 <cargf>:
 8011056:	b508      	push	{r3, lr}
 8011058:	ed2d 8b04 	vpush	{d8-d9}
 801105c:	eeb0 9a40 	vmov.f32	s18, s0
 8011060:	eef0 8a60 	vmov.f32	s17, s1
 8011064:	f7ff fff3 	bl	801104e <cimagf>
 8011068:	eef0 0a68 	vmov.f32	s1, s17
 801106c:	eeb0 8a40 	vmov.f32	s16, s0
 8011070:	eeb0 0a49 	vmov.f32	s0, s18
 8011074:	f7ff ffee 	bl	8011054 <crealf>
 8011078:	eef0 0a40 	vmov.f32	s1, s0
 801107c:	eeb0 0a48 	vmov.f32	s0, s16
 8011080:	ecbd 8b04 	vpop	{d8-d9}
 8011084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011088:	f000 be32 	b.w	8011cf0 <atan2f>

0801108c <__ieee754_sqrtf>:
 801108c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011090:	4770      	bx	lr
	...

08011094 <floorf>:
 8011094:	ee10 3a10 	vmov	r3, s0
 8011098:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801109c:	3a7f      	subs	r2, #127	@ 0x7f
 801109e:	2a16      	cmp	r2, #22
 80110a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80110a4:	dc2b      	bgt.n	80110fe <floorf+0x6a>
 80110a6:	2a00      	cmp	r2, #0
 80110a8:	da12      	bge.n	80110d0 <floorf+0x3c>
 80110aa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011110 <floorf+0x7c>
 80110ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80110b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80110b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ba:	dd06      	ble.n	80110ca <floorf+0x36>
 80110bc:	2b00      	cmp	r3, #0
 80110be:	da24      	bge.n	801110a <floorf+0x76>
 80110c0:	2900      	cmp	r1, #0
 80110c2:	4b14      	ldr	r3, [pc, #80]	@ (8011114 <floorf+0x80>)
 80110c4:	bf08      	it	eq
 80110c6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80110ca:	ee00 3a10 	vmov	s0, r3
 80110ce:	4770      	bx	lr
 80110d0:	4911      	ldr	r1, [pc, #68]	@ (8011118 <floorf+0x84>)
 80110d2:	4111      	asrs	r1, r2
 80110d4:	420b      	tst	r3, r1
 80110d6:	d0fa      	beq.n	80110ce <floorf+0x3a>
 80110d8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011110 <floorf+0x7c>
 80110dc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80110e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80110e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e8:	ddef      	ble.n	80110ca <floorf+0x36>
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	bfbe      	ittt	lt
 80110ee:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80110f2:	fa40 f202 	asrlt.w	r2, r0, r2
 80110f6:	189b      	addlt	r3, r3, r2
 80110f8:	ea23 0301 	bic.w	r3, r3, r1
 80110fc:	e7e5      	b.n	80110ca <floorf+0x36>
 80110fe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011102:	d3e4      	bcc.n	80110ce <floorf+0x3a>
 8011104:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011108:	4770      	bx	lr
 801110a:	2300      	movs	r3, #0
 801110c:	e7dd      	b.n	80110ca <floorf+0x36>
 801110e:	bf00      	nop
 8011110:	7149f2ca 	.word	0x7149f2ca
 8011114:	bf800000 	.word	0xbf800000
 8011118:	007fffff 	.word	0x007fffff

0801111c <roundf>:
 801111c:	ee10 0a10 	vmov	r0, s0
 8011120:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8011124:	3a7f      	subs	r2, #127	@ 0x7f
 8011126:	2a16      	cmp	r2, #22
 8011128:	dc15      	bgt.n	8011156 <roundf+0x3a>
 801112a:	2a00      	cmp	r2, #0
 801112c:	da08      	bge.n	8011140 <roundf+0x24>
 801112e:	3201      	adds	r2, #1
 8011130:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8011134:	d101      	bne.n	801113a <roundf+0x1e>
 8011136:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 801113a:	ee00 3a10 	vmov	s0, r3
 801113e:	4770      	bx	lr
 8011140:	4907      	ldr	r1, [pc, #28]	@ (8011160 <roundf+0x44>)
 8011142:	4111      	asrs	r1, r2
 8011144:	4201      	tst	r1, r0
 8011146:	d0fa      	beq.n	801113e <roundf+0x22>
 8011148:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801114c:	4113      	asrs	r3, r2
 801114e:	4403      	add	r3, r0
 8011150:	ea23 0301 	bic.w	r3, r3, r1
 8011154:	e7f1      	b.n	801113a <roundf+0x1e>
 8011156:	2a80      	cmp	r2, #128	@ 0x80
 8011158:	d1f1      	bne.n	801113e <roundf+0x22>
 801115a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801115e:	4770      	bx	lr
 8011160:	007fffff 	.word	0x007fffff

08011164 <__kernel_cosf>:
 8011164:	ee10 3a10 	vmov	r3, s0
 8011168:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801116c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011170:	eef0 6a40 	vmov.f32	s13, s0
 8011174:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011178:	d204      	bcs.n	8011184 <__kernel_cosf+0x20>
 801117a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801117e:	ee17 2a90 	vmov	r2, s15
 8011182:	b342      	cbz	r2, 80111d6 <__kernel_cosf+0x72>
 8011184:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8011188:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80111f4 <__kernel_cosf+0x90>
 801118c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80111f8 <__kernel_cosf+0x94>
 8011190:	4a1a      	ldr	r2, [pc, #104]	@ (80111fc <__kernel_cosf+0x98>)
 8011192:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011196:	4293      	cmp	r3, r2
 8011198:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011200 <__kernel_cosf+0x9c>
 801119c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80111a0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8011204 <__kernel_cosf+0xa0>
 80111a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80111a8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8011208 <__kernel_cosf+0xa4>
 80111ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80111b0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801120c <__kernel_cosf+0xa8>
 80111b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80111b8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80111bc:	ee26 6a07 	vmul.f32	s12, s12, s14
 80111c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80111c4:	eee7 0a06 	vfma.f32	s1, s14, s12
 80111c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111cc:	d804      	bhi.n	80111d8 <__kernel_cosf+0x74>
 80111ce:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80111d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80111d6:	4770      	bx	lr
 80111d8:	4a0d      	ldr	r2, [pc, #52]	@ (8011210 <__kernel_cosf+0xac>)
 80111da:	4293      	cmp	r3, r2
 80111dc:	bf9a      	itte	ls
 80111de:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80111e2:	ee07 3a10 	vmovls	s14, r3
 80111e6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80111ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 80111ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111f2:	e7ec      	b.n	80111ce <__kernel_cosf+0x6a>
 80111f4:	ad47d74e 	.word	0xad47d74e
 80111f8:	310f74f6 	.word	0x310f74f6
 80111fc:	3e999999 	.word	0x3e999999
 8011200:	b493f27c 	.word	0xb493f27c
 8011204:	37d00d01 	.word	0x37d00d01
 8011208:	bab60b61 	.word	0xbab60b61
 801120c:	3d2aaaab 	.word	0x3d2aaaab
 8011210:	3f480000 	.word	0x3f480000

08011214 <__kernel_sinf>:
 8011214:	ee10 3a10 	vmov	r3, s0
 8011218:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801121c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8011220:	d204      	bcs.n	801122c <__kernel_sinf+0x18>
 8011222:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011226:	ee17 3a90 	vmov	r3, s15
 801122a:	b35b      	cbz	r3, 8011284 <__kernel_sinf+0x70>
 801122c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011230:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011288 <__kernel_sinf+0x74>
 8011234:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801128c <__kernel_sinf+0x78>
 8011238:	eea7 6a27 	vfma.f32	s12, s14, s15
 801123c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8011290 <__kernel_sinf+0x7c>
 8011240:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011244:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8011294 <__kernel_sinf+0x80>
 8011248:	eea7 6a87 	vfma.f32	s12, s15, s14
 801124c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8011298 <__kernel_sinf+0x84>
 8011250:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011254:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011258:	b930      	cbnz	r0, 8011268 <__kernel_sinf+0x54>
 801125a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801129c <__kernel_sinf+0x88>
 801125e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011262:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011266:	4770      	bx	lr
 8011268:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801126c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8011270:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011274:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011278:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80112a0 <__kernel_sinf+0x8c>
 801127c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8011280:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	2f2ec9d3 	.word	0x2f2ec9d3
 801128c:	b2d72f34 	.word	0xb2d72f34
 8011290:	3638ef1b 	.word	0x3638ef1b
 8011294:	b9500d01 	.word	0xb9500d01
 8011298:	3c088889 	.word	0x3c088889
 801129c:	be2aaaab 	.word	0xbe2aaaab
 80112a0:	3e2aaaab 	.word	0x3e2aaaab

080112a4 <__ieee754_expf>:
 80112a4:	ee10 2a10 	vmov	r2, s0
 80112a8:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 80112ac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80112b0:	d902      	bls.n	80112b8 <__ieee754_expf+0x14>
 80112b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80112b6:	4770      	bx	lr
 80112b8:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80112bc:	d106      	bne.n	80112cc <__ieee754_expf+0x28>
 80112be:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80113f8 <__ieee754_expf+0x154>
 80112c2:	2900      	cmp	r1, #0
 80112c4:	bf18      	it	ne
 80112c6:	eeb0 0a67 	vmovne.f32	s0, s15
 80112ca:	4770      	bx	lr
 80112cc:	484b      	ldr	r0, [pc, #300]	@ (80113fc <__ieee754_expf+0x158>)
 80112ce:	4282      	cmp	r2, r0
 80112d0:	dd02      	ble.n	80112d8 <__ieee754_expf+0x34>
 80112d2:	2000      	movs	r0, #0
 80112d4:	f000 bdba 	b.w	8011e4c <__math_oflowf>
 80112d8:	2a00      	cmp	r2, #0
 80112da:	da05      	bge.n	80112e8 <__ieee754_expf+0x44>
 80112dc:	4a48      	ldr	r2, [pc, #288]	@ (8011400 <__ieee754_expf+0x15c>)
 80112de:	4293      	cmp	r3, r2
 80112e0:	d902      	bls.n	80112e8 <__ieee754_expf+0x44>
 80112e2:	2000      	movs	r0, #0
 80112e4:	f000 bdac 	b.w	8011e40 <__math_uflowf>
 80112e8:	4a46      	ldr	r2, [pc, #280]	@ (8011404 <__ieee754_expf+0x160>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80112f0:	d952      	bls.n	8011398 <__ieee754_expf+0xf4>
 80112f2:	4a45      	ldr	r2, [pc, #276]	@ (8011408 <__ieee754_expf+0x164>)
 80112f4:	4293      	cmp	r3, r2
 80112f6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80112fa:	d834      	bhi.n	8011366 <__ieee754_expf+0xc2>
 80112fc:	4b43      	ldr	r3, [pc, #268]	@ (801140c <__ieee754_expf+0x168>)
 80112fe:	4413      	add	r3, r2
 8011300:	ed93 7a00 	vldr	s14, [r3]
 8011304:	4b42      	ldr	r3, [pc, #264]	@ (8011410 <__ieee754_expf+0x16c>)
 8011306:	4413      	add	r3, r2
 8011308:	ee30 7a47 	vsub.f32	s14, s0, s14
 801130c:	f1c1 0201 	rsb	r2, r1, #1
 8011310:	edd3 7a00 	vldr	s15, [r3]
 8011314:	1a52      	subs	r2, r2, r1
 8011316:	ee37 0a67 	vsub.f32	s0, s14, s15
 801131a:	ee20 6a00 	vmul.f32	s12, s0, s0
 801131e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8011414 <__ieee754_expf+0x170>
 8011322:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011418 <__ieee754_expf+0x174>
 8011326:	eee6 6a05 	vfma.f32	s13, s12, s10
 801132a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801141c <__ieee754_expf+0x178>
 801132e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011332:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011420 <__ieee754_expf+0x17c>
 8011336:	eee5 6a06 	vfma.f32	s13, s10, s12
 801133a:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8011424 <__ieee754_expf+0x180>
 801133e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011342:	eef0 6a40 	vmov.f32	s13, s0
 8011346:	eee5 6a46 	vfms.f32	s13, s10, s12
 801134a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801134e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8011352:	bb92      	cbnz	r2, 80113ba <__ieee754_expf+0x116>
 8011354:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8011358:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801135c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011360:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8011364:	4770      	bx	lr
 8011366:	4b30      	ldr	r3, [pc, #192]	@ (8011428 <__ieee754_expf+0x184>)
 8011368:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801142c <__ieee754_expf+0x188>
 801136c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8011430 <__ieee754_expf+0x18c>
 8011370:	4413      	add	r3, r2
 8011372:	edd3 7a00 	vldr	s15, [r3]
 8011376:	eee0 7a07 	vfma.f32	s15, s0, s14
 801137a:	eeb0 7a40 	vmov.f32	s14, s0
 801137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011382:	ee17 2a90 	vmov	r2, s15
 8011386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801138a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801138e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011434 <__ieee754_expf+0x190>
 8011392:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011396:	e7be      	b.n	8011316 <__ieee754_expf+0x72>
 8011398:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801139c:	d20b      	bcs.n	80113b6 <__ieee754_expf+0x112>
 801139e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011438 <__ieee754_expf+0x194>
 80113a2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80113a6:	eef4 6ae5 	vcmpe.f32	s13, s11
 80113aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ae:	dd02      	ble.n	80113b6 <__ieee754_expf+0x112>
 80113b0:	ee30 0a25 	vadd.f32	s0, s0, s11
 80113b4:	4770      	bx	lr
 80113b6:	2200      	movs	r2, #0
 80113b8:	e7af      	b.n	801131a <__ieee754_expf+0x76>
 80113ba:	ee36 6a66 	vsub.f32	s12, s12, s13
 80113be:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 80113c2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80113c6:	bfb8      	it	lt
 80113c8:	3264      	addlt	r2, #100	@ 0x64
 80113ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80113ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80113d2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80113d6:	ee17 3a90 	vmov	r3, s15
 80113da:	bfab      	itete	ge
 80113dc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80113e0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80113e4:	ee00 3a10 	vmovge	s0, r3
 80113e8:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801143c <__ieee754_expf+0x198>
 80113ec:	bfbc      	itt	lt
 80113ee:	ee00 3a10 	vmovlt	s0, r3
 80113f2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80113f6:	4770      	bx	lr
 80113f8:	00000000 	.word	0x00000000
 80113fc:	42b17217 	.word	0x42b17217
 8011400:	42cff1b5 	.word	0x42cff1b5
 8011404:	3eb17218 	.word	0x3eb17218
 8011408:	3f851591 	.word	0x3f851591
 801140c:	08018060 	.word	0x08018060
 8011410:	08018058 	.word	0x08018058
 8011414:	3331bb4c 	.word	0x3331bb4c
 8011418:	b5ddea0e 	.word	0xb5ddea0e
 801141c:	388ab355 	.word	0x388ab355
 8011420:	bb360b61 	.word	0xbb360b61
 8011424:	3e2aaaab 	.word	0x3e2aaaab
 8011428:	08018068 	.word	0x08018068
 801142c:	3fb8aa3b 	.word	0x3fb8aa3b
 8011430:	3f317180 	.word	0x3f317180
 8011434:	3717f7d1 	.word	0x3717f7d1
 8011438:	7149f2ca 	.word	0x7149f2ca
 801143c:	0d800000 	.word	0x0d800000

08011440 <__ieee754_log10f>:
 8011440:	b508      	push	{r3, lr}
 8011442:	ee10 3a10 	vmov	r3, s0
 8011446:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801144a:	ed2d 8b02 	vpush	{d8}
 801144e:	d108      	bne.n	8011462 <__ieee754_log10f+0x22>
 8011450:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80114d8 <__ieee754_log10f+0x98>
 8011454:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80114dc <__ieee754_log10f+0x9c>
 8011458:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801145c:	ecbd 8b02 	vpop	{d8}
 8011460:	bd08      	pop	{r3, pc}
 8011462:	2b00      	cmp	r3, #0
 8011464:	461a      	mov	r2, r3
 8011466:	da02      	bge.n	801146e <__ieee754_log10f+0x2e>
 8011468:	ee30 7a40 	vsub.f32	s14, s0, s0
 801146c:	e7f2      	b.n	8011454 <__ieee754_log10f+0x14>
 801146e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011472:	db02      	blt.n	801147a <__ieee754_log10f+0x3a>
 8011474:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011478:	e7f0      	b.n	801145c <__ieee754_log10f+0x1c>
 801147a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801147e:	bfbf      	itttt	lt
 8011480:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 80114e0 <__ieee754_log10f+0xa0>
 8011484:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8011488:	f06f 0118 	mvnlt.w	r1, #24
 801148c:	ee17 2a90 	vmovlt	r2, s15
 8011490:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8011494:	bfa8      	it	ge
 8011496:	2100      	movge	r1, #0
 8011498:	3b7f      	subs	r3, #127	@ 0x7f
 801149a:	440b      	add	r3, r1
 801149c:	0fd9      	lsrs	r1, r3, #31
 801149e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80114a2:	ee07 3a90 	vmov	s15, r3
 80114a6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80114aa:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 80114ae:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80114b2:	ee00 3a10 	vmov	s0, r3
 80114b6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80114ba:	f001 f86f 	bl	801259c <__ieee754_logf>
 80114be:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80114e4 <__ieee754_log10f+0xa4>
 80114c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80114c6:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80114e8 <__ieee754_log10f+0xa8>
 80114ca:	eea8 0a27 	vfma.f32	s0, s16, s15
 80114ce:	eddf 7a07 	vldr	s15, [pc, #28]	@ 80114ec <__ieee754_log10f+0xac>
 80114d2:	eea8 0a27 	vfma.f32	s0, s16, s15
 80114d6:	e7c1      	b.n	801145c <__ieee754_log10f+0x1c>
 80114d8:	cc000000 	.word	0xcc000000
 80114dc:	00000000 	.word	0x00000000
 80114e0:	4c000000 	.word	0x4c000000
 80114e4:	3ede5bd9 	.word	0x3ede5bd9
 80114e8:	355427db 	.word	0x355427db
 80114ec:	3e9a2080 	.word	0x3e9a2080

080114f0 <__ieee754_powf>:
 80114f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114f4:	ee10 4a90 	vmov	r4, s1
 80114f8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80114fc:	ed2d 8b02 	vpush	{d8}
 8011500:	ee10 6a10 	vmov	r6, s0
 8011504:	eeb0 8a40 	vmov.f32	s16, s0
 8011508:	eef0 8a60 	vmov.f32	s17, s1
 801150c:	d10c      	bne.n	8011528 <__ieee754_powf+0x38>
 801150e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8011512:	0076      	lsls	r6, r6, #1
 8011514:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8011518:	f240 829c 	bls.w	8011a54 <__ieee754_powf+0x564>
 801151c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8011520:	ecbd 8b02 	vpop	{d8}
 8011524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011528:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801152c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8011530:	d802      	bhi.n	8011538 <__ieee754_powf+0x48>
 8011532:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8011536:	d908      	bls.n	801154a <__ieee754_powf+0x5a>
 8011538:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801153c:	d1ee      	bne.n	801151c <__ieee754_powf+0x2c>
 801153e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8011542:	0064      	lsls	r4, r4, #1
 8011544:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8011548:	e7e6      	b.n	8011518 <__ieee754_powf+0x28>
 801154a:	2e00      	cmp	r6, #0
 801154c:	da1e      	bge.n	801158c <__ieee754_powf+0x9c>
 801154e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8011552:	d22b      	bcs.n	80115ac <__ieee754_powf+0xbc>
 8011554:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8011558:	d332      	bcc.n	80115c0 <__ieee754_powf+0xd0>
 801155a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801155e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8011562:	fa49 f503 	asr.w	r5, r9, r3
 8011566:	fa05 f303 	lsl.w	r3, r5, r3
 801156a:	454b      	cmp	r3, r9
 801156c:	d126      	bne.n	80115bc <__ieee754_powf+0xcc>
 801156e:	f005 0501 	and.w	r5, r5, #1
 8011572:	f1c5 0502 	rsb	r5, r5, #2
 8011576:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801157a:	d122      	bne.n	80115c2 <__ieee754_powf+0xd2>
 801157c:	2c00      	cmp	r4, #0
 801157e:	f280 826f 	bge.w	8011a60 <__ieee754_powf+0x570>
 8011582:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011586:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801158a:	e7c9      	b.n	8011520 <__ieee754_powf+0x30>
 801158c:	2500      	movs	r5, #0
 801158e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8011592:	d1f0      	bne.n	8011576 <__ieee754_powf+0x86>
 8011594:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8011598:	f000 825c 	beq.w	8011a54 <__ieee754_powf+0x564>
 801159c:	d908      	bls.n	80115b0 <__ieee754_powf+0xc0>
 801159e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8011900 <__ieee754_powf+0x410>
 80115a2:	2c00      	cmp	r4, #0
 80115a4:	bfa8      	it	ge
 80115a6:	eeb0 0a68 	vmovge.f32	s0, s17
 80115aa:	e7b9      	b.n	8011520 <__ieee754_powf+0x30>
 80115ac:	2502      	movs	r5, #2
 80115ae:	e7ee      	b.n	801158e <__ieee754_powf+0x9e>
 80115b0:	2c00      	cmp	r4, #0
 80115b2:	f280 8252 	bge.w	8011a5a <__ieee754_powf+0x56a>
 80115b6:	eeb1 0a68 	vneg.f32	s0, s17
 80115ba:	e7b1      	b.n	8011520 <__ieee754_powf+0x30>
 80115bc:	2500      	movs	r5, #0
 80115be:	e7da      	b.n	8011576 <__ieee754_powf+0x86>
 80115c0:	2500      	movs	r5, #0
 80115c2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80115c6:	d102      	bne.n	80115ce <__ieee754_powf+0xde>
 80115c8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80115cc:	e7a8      	b.n	8011520 <__ieee754_powf+0x30>
 80115ce:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80115d2:	d109      	bne.n	80115e8 <__ieee754_powf+0xf8>
 80115d4:	2e00      	cmp	r6, #0
 80115d6:	db07      	blt.n	80115e8 <__ieee754_powf+0xf8>
 80115d8:	eeb0 0a48 	vmov.f32	s0, s16
 80115dc:	ecbd 8b02 	vpop	{d8}
 80115e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115e4:	f7ff bd52 	b.w	801108c <__ieee754_sqrtf>
 80115e8:	eeb0 0a48 	vmov.f32	s0, s16
 80115ec:	f7ff fc60 	bl	8010eb0 <fabsf>
 80115f0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80115f4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80115f8:	4647      	mov	r7, r8
 80115fa:	d002      	beq.n	8011602 <__ieee754_powf+0x112>
 80115fc:	f1b8 0f00 	cmp.w	r8, #0
 8011600:	d117      	bne.n	8011632 <__ieee754_powf+0x142>
 8011602:	2c00      	cmp	r4, #0
 8011604:	bfbc      	itt	lt
 8011606:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801160a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801160e:	2e00      	cmp	r6, #0
 8011610:	da86      	bge.n	8011520 <__ieee754_powf+0x30>
 8011612:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8011616:	ea58 0805 	orrs.w	r8, r8, r5
 801161a:	d104      	bne.n	8011626 <__ieee754_powf+0x136>
 801161c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011620:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011624:	e77c      	b.n	8011520 <__ieee754_powf+0x30>
 8011626:	2d01      	cmp	r5, #1
 8011628:	f47f af7a 	bne.w	8011520 <__ieee754_powf+0x30>
 801162c:	eeb1 0a40 	vneg.f32	s0, s0
 8011630:	e776      	b.n	8011520 <__ieee754_powf+0x30>
 8011632:	0ff0      	lsrs	r0, r6, #31
 8011634:	3801      	subs	r0, #1
 8011636:	ea55 0300 	orrs.w	r3, r5, r0
 801163a:	d104      	bne.n	8011646 <__ieee754_powf+0x156>
 801163c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8011640:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011644:	e76c      	b.n	8011520 <__ieee754_powf+0x30>
 8011646:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801164a:	d973      	bls.n	8011734 <__ieee754_powf+0x244>
 801164c:	4bad      	ldr	r3, [pc, #692]	@ (8011904 <__ieee754_powf+0x414>)
 801164e:	4598      	cmp	r8, r3
 8011650:	d808      	bhi.n	8011664 <__ieee754_powf+0x174>
 8011652:	2c00      	cmp	r4, #0
 8011654:	da0b      	bge.n	801166e <__ieee754_powf+0x17e>
 8011656:	2000      	movs	r0, #0
 8011658:	ecbd 8b02 	vpop	{d8}
 801165c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011660:	f000 bbf4 	b.w	8011e4c <__math_oflowf>
 8011664:	4ba8      	ldr	r3, [pc, #672]	@ (8011908 <__ieee754_powf+0x418>)
 8011666:	4598      	cmp	r8, r3
 8011668:	d908      	bls.n	801167c <__ieee754_powf+0x18c>
 801166a:	2c00      	cmp	r4, #0
 801166c:	dcf3      	bgt.n	8011656 <__ieee754_powf+0x166>
 801166e:	2000      	movs	r0, #0
 8011670:	ecbd 8b02 	vpop	{d8}
 8011674:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011678:	f000 bbe2 	b.w	8011e40 <__math_uflowf>
 801167c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011680:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011684:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 801190c <__ieee754_powf+0x41c>
 8011688:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801168c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8011690:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011694:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8011698:	ee20 7a00 	vmul.f32	s14, s0, s0
 801169c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80116a0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8011910 <__ieee754_powf+0x420>
 80116a4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80116a8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8011914 <__ieee754_powf+0x424>
 80116ac:	eee0 7a07 	vfma.f32	s15, s0, s14
 80116b0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8011918 <__ieee754_powf+0x428>
 80116b4:	eef0 6a67 	vmov.f32	s13, s15
 80116b8:	eee0 6a07 	vfma.f32	s13, s0, s14
 80116bc:	ee16 3a90 	vmov	r3, s13
 80116c0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80116c4:	f023 030f 	bic.w	r3, r3, #15
 80116c8:	ee06 3a90 	vmov	s13, r3
 80116cc:	eee0 6a47 	vfms.f32	s13, s0, s14
 80116d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80116d4:	3d01      	subs	r5, #1
 80116d6:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80116da:	4305      	orrs	r5, r0
 80116dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80116e0:	f024 040f 	bic.w	r4, r4, #15
 80116e4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80116e8:	bf18      	it	ne
 80116ea:	eeb0 8a47 	vmovne.f32	s16, s14
 80116ee:	ee07 4a10 	vmov	s14, r4
 80116f2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80116f6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80116fa:	ee07 3a90 	vmov	s15, r3
 80116fe:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011702:	ee07 4a10 	vmov	s14, r4
 8011706:	ee67 7a87 	vmul.f32	s15, s15, s14
 801170a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801170e:	ee17 1a10 	vmov	r1, s14
 8011712:	2900      	cmp	r1, #0
 8011714:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011718:	f340 80dd 	ble.w	80118d6 <__ieee754_powf+0x3e6>
 801171c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8011720:	f240 80ca 	bls.w	80118b8 <__ieee754_powf+0x3c8>
 8011724:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801172c:	bf4c      	ite	mi
 801172e:	2001      	movmi	r0, #1
 8011730:	2000      	movpl	r0, #0
 8011732:	e791      	b.n	8011658 <__ieee754_powf+0x168>
 8011734:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8011738:	bf01      	itttt	eq
 801173a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801191c <__ieee754_powf+0x42c>
 801173e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8011742:	f06f 0317 	mvneq.w	r3, #23
 8011746:	ee17 7a90 	vmoveq	r7, s15
 801174a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801174e:	bf18      	it	ne
 8011750:	2300      	movne	r3, #0
 8011752:	3a7f      	subs	r2, #127	@ 0x7f
 8011754:	441a      	add	r2, r3
 8011756:	4b72      	ldr	r3, [pc, #456]	@ (8011920 <__ieee754_powf+0x430>)
 8011758:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801175c:	429f      	cmp	r7, r3
 801175e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8011762:	dd06      	ble.n	8011772 <__ieee754_powf+0x282>
 8011764:	4b6f      	ldr	r3, [pc, #444]	@ (8011924 <__ieee754_powf+0x434>)
 8011766:	429f      	cmp	r7, r3
 8011768:	f340 80a4 	ble.w	80118b4 <__ieee754_powf+0x3c4>
 801176c:	3201      	adds	r2, #1
 801176e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8011772:	2600      	movs	r6, #0
 8011774:	4b6c      	ldr	r3, [pc, #432]	@ (8011928 <__ieee754_powf+0x438>)
 8011776:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801177a:	ee07 1a10 	vmov	s14, r1
 801177e:	edd3 5a00 	vldr	s11, [r3]
 8011782:	4b6a      	ldr	r3, [pc, #424]	@ (801192c <__ieee754_powf+0x43c>)
 8011784:	ee75 7a87 	vadd.f32	s15, s11, s14
 8011788:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801178c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8011790:	1049      	asrs	r1, r1, #1
 8011792:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8011796:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801179a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801179e:	ee37 6a65 	vsub.f32	s12, s14, s11
 80117a2:	ee07 1a90 	vmov	s15, r1
 80117a6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80117aa:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80117ae:	ee15 7a10 	vmov	r7, s10
 80117b2:	401f      	ands	r7, r3
 80117b4:	ee06 7a90 	vmov	s13, r7
 80117b8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80117bc:	ee37 7a65 	vsub.f32	s14, s14, s11
 80117c0:	ee65 7a05 	vmul.f32	s15, s10, s10
 80117c4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80117c8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8011930 <__ieee754_powf+0x440>
 80117cc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8011934 <__ieee754_powf+0x444>
 80117d0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80117d4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8011938 <__ieee754_powf+0x448>
 80117d8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80117dc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801190c <__ieee754_powf+0x41c>
 80117e0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80117e4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801193c <__ieee754_powf+0x44c>
 80117e8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80117ec:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8011940 <__ieee754_powf+0x450>
 80117f0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80117f4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80117f8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80117fc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8011800:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011804:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8011808:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801180c:	eef0 5a67 	vmov.f32	s11, s15
 8011810:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8011814:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011818:	ee15 1a90 	vmov	r1, s11
 801181c:	4019      	ands	r1, r3
 801181e:	ee05 1a90 	vmov	s11, r1
 8011822:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8011826:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801182a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801182e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011832:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011836:	eeb0 6a67 	vmov.f32	s12, s15
 801183a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801183e:	ee16 1a10 	vmov	r1, s12
 8011842:	4019      	ands	r1, r3
 8011844:	ee06 1a10 	vmov	s12, r1
 8011848:	eeb0 7a46 	vmov.f32	s14, s12
 801184c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8011850:	493c      	ldr	r1, [pc, #240]	@ (8011944 <__ieee754_powf+0x454>)
 8011852:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8011856:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801185a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8011948 <__ieee754_powf+0x458>
 801185e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801194c <__ieee754_powf+0x45c>
 8011862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011866:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8011950 <__ieee754_powf+0x460>
 801186a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801186e:	ed91 7a00 	vldr	s14, [r1]
 8011872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011876:	ee07 2a10 	vmov	s14, r2
 801187a:	eef0 6a67 	vmov.f32	s13, s15
 801187e:	4a35      	ldr	r2, [pc, #212]	@ (8011954 <__ieee754_powf+0x464>)
 8011880:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011884:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8011888:	ed92 5a00 	vldr	s10, [r2]
 801188c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011890:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011894:	ee76 6a87 	vadd.f32	s13, s13, s14
 8011898:	ee16 2a90 	vmov	r2, s13
 801189c:	4013      	ands	r3, r2
 801189e:	ee06 3a90 	vmov	s13, r3
 80118a2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80118a6:	ee37 7a45 	vsub.f32	s14, s14, s10
 80118aa:	eea6 7a65 	vfms.f32	s14, s12, s11
 80118ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80118b2:	e70f      	b.n	80116d4 <__ieee754_powf+0x1e4>
 80118b4:	2601      	movs	r6, #1
 80118b6:	e75d      	b.n	8011774 <__ieee754_powf+0x284>
 80118b8:	d152      	bne.n	8011960 <__ieee754_powf+0x470>
 80118ba:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8011958 <__ieee754_powf+0x468>
 80118be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80118c2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80118c6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80118ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ce:	f73f af29 	bgt.w	8011724 <__ieee754_powf+0x234>
 80118d2:	2386      	movs	r3, #134	@ 0x86
 80118d4:	e048      	b.n	8011968 <__ieee754_powf+0x478>
 80118d6:	4a21      	ldr	r2, [pc, #132]	@ (801195c <__ieee754_powf+0x46c>)
 80118d8:	4293      	cmp	r3, r2
 80118da:	d907      	bls.n	80118ec <__ieee754_powf+0x3fc>
 80118dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80118e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e4:	bf4c      	ite	mi
 80118e6:	2001      	movmi	r0, #1
 80118e8:	2000      	movpl	r0, #0
 80118ea:	e6c1      	b.n	8011670 <__ieee754_powf+0x180>
 80118ec:	d138      	bne.n	8011960 <__ieee754_powf+0x470>
 80118ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80118f2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80118f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118fa:	dbea      	blt.n	80118d2 <__ieee754_powf+0x3e2>
 80118fc:	e7ee      	b.n	80118dc <__ieee754_powf+0x3ec>
 80118fe:	bf00      	nop
 8011900:	00000000 	.word	0x00000000
 8011904:	3f7ffff3 	.word	0x3f7ffff3
 8011908:	3f800007 	.word	0x3f800007
 801190c:	3eaaaaab 	.word	0x3eaaaaab
 8011910:	3fb8aa3b 	.word	0x3fb8aa3b
 8011914:	36eca570 	.word	0x36eca570
 8011918:	3fb8aa00 	.word	0x3fb8aa00
 801191c:	4b800000 	.word	0x4b800000
 8011920:	001cc471 	.word	0x001cc471
 8011924:	005db3d6 	.word	0x005db3d6
 8011928:	08018080 	.word	0x08018080
 801192c:	fffff000 	.word	0xfffff000
 8011930:	3e6c3255 	.word	0x3e6c3255
 8011934:	3e53f142 	.word	0x3e53f142
 8011938:	3e8ba305 	.word	0x3e8ba305
 801193c:	3edb6db7 	.word	0x3edb6db7
 8011940:	3f19999a 	.word	0x3f19999a
 8011944:	08018070 	.word	0x08018070
 8011948:	3f76384f 	.word	0x3f76384f
 801194c:	3f763800 	.word	0x3f763800
 8011950:	369dc3a0 	.word	0x369dc3a0
 8011954:	08018078 	.word	0x08018078
 8011958:	3338aa3c 	.word	0x3338aa3c
 801195c:	43160000 	.word	0x43160000
 8011960:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8011964:	d971      	bls.n	8011a4a <__ieee754_powf+0x55a>
 8011966:	15db      	asrs	r3, r3, #23
 8011968:	3b7e      	subs	r3, #126	@ 0x7e
 801196a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801196e:	4118      	asrs	r0, r3
 8011970:	4408      	add	r0, r1
 8011972:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011976:	4a3c      	ldr	r2, [pc, #240]	@ (8011a68 <__ieee754_powf+0x578>)
 8011978:	3b7f      	subs	r3, #127	@ 0x7f
 801197a:	411a      	asrs	r2, r3
 801197c:	4002      	ands	r2, r0
 801197e:	ee07 2a10 	vmov	s14, r2
 8011982:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8011986:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801198a:	f1c3 0317 	rsb	r3, r3, #23
 801198e:	4118      	asrs	r0, r3
 8011990:	2900      	cmp	r1, #0
 8011992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011996:	bfb8      	it	lt
 8011998:	4240      	neglt	r0, r0
 801199a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801199e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8011a6c <__ieee754_powf+0x57c>
 80119a2:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8011a70 <__ieee754_powf+0x580>
 80119a6:	ee17 3a10 	vmov	r3, s14
 80119aa:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80119ae:	f023 030f 	bic.w	r3, r3, #15
 80119b2:	ee07 3a10 	vmov	s14, r3
 80119b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80119be:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80119c2:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8011a74 <__ieee754_powf+0x584>
 80119c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119ca:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80119ce:	eef0 6a67 	vmov.f32	s13, s15
 80119d2:	eee7 6a06 	vfma.f32	s13, s14, s12
 80119d6:	eef0 5a66 	vmov.f32	s11, s13
 80119da:	eee7 5a46 	vfms.f32	s11, s14, s12
 80119de:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80119e2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80119e6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8011a78 <__ieee754_powf+0x588>
 80119ea:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8011a7c <__ieee754_powf+0x58c>
 80119ee:	eea7 6a25 	vfma.f32	s12, s14, s11
 80119f2:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8011a80 <__ieee754_powf+0x590>
 80119f6:	eee6 5a07 	vfma.f32	s11, s12, s14
 80119fa:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8011a84 <__ieee754_powf+0x594>
 80119fe:	eea5 6a87 	vfma.f32	s12, s11, s14
 8011a02:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8011a88 <__ieee754_powf+0x598>
 8011a06:	eee6 5a07 	vfma.f32	s11, s12, s14
 8011a0a:	eeb0 6a66 	vmov.f32	s12, s13
 8011a0e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8011a12:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8011a16:	ee66 5a86 	vmul.f32	s11, s13, s12
 8011a1a:	ee36 6a47 	vsub.f32	s12, s12, s14
 8011a1e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8011a22:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8011a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a2a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011a2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011a32:	ee10 3a10 	vmov	r3, s0
 8011a36:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8011a3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011a3e:	da06      	bge.n	8011a4e <__ieee754_powf+0x55e>
 8011a40:	f000 f97e 	bl	8011d40 <scalbnf>
 8011a44:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011a48:	e56a      	b.n	8011520 <__ieee754_powf+0x30>
 8011a4a:	2000      	movs	r0, #0
 8011a4c:	e7a5      	b.n	801199a <__ieee754_powf+0x4aa>
 8011a4e:	ee00 3a10 	vmov	s0, r3
 8011a52:	e7f7      	b.n	8011a44 <__ieee754_powf+0x554>
 8011a54:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011a58:	e562      	b.n	8011520 <__ieee754_powf+0x30>
 8011a5a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8011a8c <__ieee754_powf+0x59c>
 8011a5e:	e55f      	b.n	8011520 <__ieee754_powf+0x30>
 8011a60:	eeb0 0a48 	vmov.f32	s0, s16
 8011a64:	e55c      	b.n	8011520 <__ieee754_powf+0x30>
 8011a66:	bf00      	nop
 8011a68:	ff800000 	.word	0xff800000
 8011a6c:	3f317218 	.word	0x3f317218
 8011a70:	3f317200 	.word	0x3f317200
 8011a74:	35bfbe8c 	.word	0x35bfbe8c
 8011a78:	b5ddea0e 	.word	0xb5ddea0e
 8011a7c:	3331bb4c 	.word	0x3331bb4c
 8011a80:	388ab355 	.word	0x388ab355
 8011a84:	bb360b61 	.word	0xbb360b61
 8011a88:	3e2aaaab 	.word	0x3e2aaaab
 8011a8c:	00000000 	.word	0x00000000

08011a90 <__ieee754_rem_pio2f>:
 8011a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a92:	ee10 6a10 	vmov	r6, s0
 8011a96:	4b88      	ldr	r3, [pc, #544]	@ (8011cb8 <__ieee754_rem_pio2f+0x228>)
 8011a98:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8011a9c:	429d      	cmp	r5, r3
 8011a9e:	b087      	sub	sp, #28
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	d805      	bhi.n	8011ab0 <__ieee754_rem_pio2f+0x20>
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	ed80 0a00 	vstr	s0, [r0]
 8011aaa:	6043      	str	r3, [r0, #4]
 8011aac:	2000      	movs	r0, #0
 8011aae:	e022      	b.n	8011af6 <__ieee754_rem_pio2f+0x66>
 8011ab0:	4b82      	ldr	r3, [pc, #520]	@ (8011cbc <__ieee754_rem_pio2f+0x22c>)
 8011ab2:	429d      	cmp	r5, r3
 8011ab4:	d83a      	bhi.n	8011b2c <__ieee754_rem_pio2f+0x9c>
 8011ab6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011aba:	2e00      	cmp	r6, #0
 8011abc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8011cc0 <__ieee754_rem_pio2f+0x230>
 8011ac0:	4a80      	ldr	r2, [pc, #512]	@ (8011cc4 <__ieee754_rem_pio2f+0x234>)
 8011ac2:	f023 030f 	bic.w	r3, r3, #15
 8011ac6:	dd18      	ble.n	8011afa <__ieee754_rem_pio2f+0x6a>
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011ace:	bf09      	itett	eq
 8011ad0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8011cc8 <__ieee754_rem_pio2f+0x238>
 8011ad4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8011ccc <__ieee754_rem_pio2f+0x23c>
 8011ad8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8011cd0 <__ieee754_rem_pio2f+0x240>
 8011adc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8011ae0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8011ae4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ae8:	ed80 7a00 	vstr	s14, [r0]
 8011aec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011af0:	edc0 7a01 	vstr	s15, [r0, #4]
 8011af4:	2001      	movs	r0, #1
 8011af6:	b007      	add	sp, #28
 8011af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011afa:	4293      	cmp	r3, r2
 8011afc:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011b00:	bf09      	itett	eq
 8011b02:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8011cc8 <__ieee754_rem_pio2f+0x238>
 8011b06:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8011ccc <__ieee754_rem_pio2f+0x23c>
 8011b0a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8011cd0 <__ieee754_rem_pio2f+0x240>
 8011b0e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8011b12:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011b16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b1a:	ed80 7a00 	vstr	s14, [r0]
 8011b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b22:	edc0 7a01 	vstr	s15, [r0, #4]
 8011b26:	f04f 30ff 	mov.w	r0, #4294967295
 8011b2a:	e7e4      	b.n	8011af6 <__ieee754_rem_pio2f+0x66>
 8011b2c:	4b69      	ldr	r3, [pc, #420]	@ (8011cd4 <__ieee754_rem_pio2f+0x244>)
 8011b2e:	429d      	cmp	r5, r3
 8011b30:	d873      	bhi.n	8011c1a <__ieee754_rem_pio2f+0x18a>
 8011b32:	f7ff f9bd 	bl	8010eb0 <fabsf>
 8011b36:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8011cd8 <__ieee754_rem_pio2f+0x248>
 8011b3a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011b3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011b4a:	ee17 0a90 	vmov	r0, s15
 8011b4e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011cc0 <__ieee754_rem_pio2f+0x230>
 8011b52:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011b56:	281f      	cmp	r0, #31
 8011b58:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8011ccc <__ieee754_rem_pio2f+0x23c>
 8011b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b60:	eeb1 6a47 	vneg.f32	s12, s14
 8011b64:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011b68:	ee16 1a90 	vmov	r1, s13
 8011b6c:	dc09      	bgt.n	8011b82 <__ieee754_rem_pio2f+0xf2>
 8011b6e:	4a5b      	ldr	r2, [pc, #364]	@ (8011cdc <__ieee754_rem_pio2f+0x24c>)
 8011b70:	1e47      	subs	r7, r0, #1
 8011b72:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8011b76:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8011b7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d107      	bne.n	8011b92 <__ieee754_rem_pio2f+0x102>
 8011b82:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8011b86:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8011b8a:	2a08      	cmp	r2, #8
 8011b8c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8011b90:	dc14      	bgt.n	8011bbc <__ieee754_rem_pio2f+0x12c>
 8011b92:	6021      	str	r1, [r4, #0]
 8011b94:	ed94 7a00 	vldr	s14, [r4]
 8011b98:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011b9c:	2e00      	cmp	r6, #0
 8011b9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011ba2:	ed84 0a01 	vstr	s0, [r4, #4]
 8011ba6:	daa6      	bge.n	8011af6 <__ieee754_rem_pio2f+0x66>
 8011ba8:	eeb1 7a47 	vneg.f32	s14, s14
 8011bac:	eeb1 0a40 	vneg.f32	s0, s0
 8011bb0:	ed84 7a00 	vstr	s14, [r4]
 8011bb4:	ed84 0a01 	vstr	s0, [r4, #4]
 8011bb8:	4240      	negs	r0, r0
 8011bba:	e79c      	b.n	8011af6 <__ieee754_rem_pio2f+0x66>
 8011bbc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8011cc8 <__ieee754_rem_pio2f+0x238>
 8011bc0:	eef0 6a40 	vmov.f32	s13, s0
 8011bc4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011bc8:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011bcc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011bd0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011cd0 <__ieee754_rem_pio2f+0x240>
 8011bd4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8011bd8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8011bdc:	ee15 2a90 	vmov	r2, s11
 8011be0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8011be4:	1a5b      	subs	r3, r3, r1
 8011be6:	2b19      	cmp	r3, #25
 8011be8:	dc04      	bgt.n	8011bf4 <__ieee754_rem_pio2f+0x164>
 8011bea:	edc4 5a00 	vstr	s11, [r4]
 8011bee:	eeb0 0a66 	vmov.f32	s0, s13
 8011bf2:	e7cf      	b.n	8011b94 <__ieee754_rem_pio2f+0x104>
 8011bf4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8011ce0 <__ieee754_rem_pio2f+0x250>
 8011bf8:	eeb0 0a66 	vmov.f32	s0, s13
 8011bfc:	eea6 0a25 	vfma.f32	s0, s12, s11
 8011c00:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8011c04:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8011ce4 <__ieee754_rem_pio2f+0x254>
 8011c08:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011c0c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8011c10:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011c14:	ed84 7a00 	vstr	s14, [r4]
 8011c18:	e7bc      	b.n	8011b94 <__ieee754_rem_pio2f+0x104>
 8011c1a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8011c1e:	d306      	bcc.n	8011c2e <__ieee754_rem_pio2f+0x19e>
 8011c20:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011c24:	edc0 7a01 	vstr	s15, [r0, #4]
 8011c28:	edc0 7a00 	vstr	s15, [r0]
 8011c2c:	e73e      	b.n	8011aac <__ieee754_rem_pio2f+0x1c>
 8011c2e:	15ea      	asrs	r2, r5, #23
 8011c30:	3a86      	subs	r2, #134	@ 0x86
 8011c32:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8011c36:	ee07 3a90 	vmov	s15, r3
 8011c3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011c3e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8011ce8 <__ieee754_rem_pio2f+0x258>
 8011c42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011c46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c4a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011c4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011c52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011c56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011c5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c5e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011c62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011c66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c6e:	edcd 7a05 	vstr	s15, [sp, #20]
 8011c72:	d11e      	bne.n	8011cb2 <__ieee754_rem_pio2f+0x222>
 8011c74:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c7c:	bf0c      	ite	eq
 8011c7e:	2301      	moveq	r3, #1
 8011c80:	2302      	movne	r3, #2
 8011c82:	491a      	ldr	r1, [pc, #104]	@ (8011cec <__ieee754_rem_pio2f+0x25c>)
 8011c84:	9101      	str	r1, [sp, #4]
 8011c86:	2102      	movs	r1, #2
 8011c88:	9100      	str	r1, [sp, #0]
 8011c8a:	a803      	add	r0, sp, #12
 8011c8c:	4621      	mov	r1, r4
 8011c8e:	f000 f8e3 	bl	8011e58 <__kernel_rem_pio2f>
 8011c92:	2e00      	cmp	r6, #0
 8011c94:	f6bf af2f 	bge.w	8011af6 <__ieee754_rem_pio2f+0x66>
 8011c98:	edd4 7a00 	vldr	s15, [r4]
 8011c9c:	eef1 7a67 	vneg.f32	s15, s15
 8011ca0:	edc4 7a00 	vstr	s15, [r4]
 8011ca4:	edd4 7a01 	vldr	s15, [r4, #4]
 8011ca8:	eef1 7a67 	vneg.f32	s15, s15
 8011cac:	edc4 7a01 	vstr	s15, [r4, #4]
 8011cb0:	e782      	b.n	8011bb8 <__ieee754_rem_pio2f+0x128>
 8011cb2:	2303      	movs	r3, #3
 8011cb4:	e7e5      	b.n	8011c82 <__ieee754_rem_pio2f+0x1f2>
 8011cb6:	bf00      	nop
 8011cb8:	3f490fd8 	.word	0x3f490fd8
 8011cbc:	4016cbe3 	.word	0x4016cbe3
 8011cc0:	3fc90f80 	.word	0x3fc90f80
 8011cc4:	3fc90fd0 	.word	0x3fc90fd0
 8011cc8:	37354400 	.word	0x37354400
 8011ccc:	37354443 	.word	0x37354443
 8011cd0:	2e85a308 	.word	0x2e85a308
 8011cd4:	43490f80 	.word	0x43490f80
 8011cd8:	3f22f984 	.word	0x3f22f984
 8011cdc:	08018088 	.word	0x08018088
 8011ce0:	2e85a300 	.word	0x2e85a300
 8011ce4:	248d3132 	.word	0x248d3132
 8011ce8:	43800000 	.word	0x43800000
 8011cec:	08018108 	.word	0x08018108

08011cf0 <atan2f>:
 8011cf0:	f000 bb24 	b.w	801233c <__ieee754_atan2f>

08011cf4 <hypotf>:
 8011cf4:	b508      	push	{r3, lr}
 8011cf6:	ed2d 8b04 	vpush	{d8-d9}
 8011cfa:	eeb0 9a40 	vmov.f32	s18, s0
 8011cfe:	eef0 8a60 	vmov.f32	s17, s1
 8011d02:	f000 fbbb 	bl	801247c <__ieee754_hypotf>
 8011d06:	eeb0 8a40 	vmov.f32	s16, s0
 8011d0a:	f7ff f91f 	bl	8010f4c <finitef>
 8011d0e:	b978      	cbnz	r0, 8011d30 <hypotf+0x3c>
 8011d10:	eeb0 0a49 	vmov.f32	s0, s18
 8011d14:	f7ff f91a 	bl	8010f4c <finitef>
 8011d18:	b150      	cbz	r0, 8011d30 <hypotf+0x3c>
 8011d1a:	eeb0 0a68 	vmov.f32	s0, s17
 8011d1e:	f7ff f915 	bl	8010f4c <finitef>
 8011d22:	b128      	cbz	r0, 8011d30 <hypotf+0x3c>
 8011d24:	f7fe f8dc 	bl	800fee0 <__errno>
 8011d28:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8011d3c <hypotf+0x48>
 8011d2c:	2322      	movs	r3, #34	@ 0x22
 8011d2e:	6003      	str	r3, [r0, #0]
 8011d30:	eeb0 0a48 	vmov.f32	s0, s16
 8011d34:	ecbd 8b04 	vpop	{d8-d9}
 8011d38:	bd08      	pop	{r3, pc}
 8011d3a:	bf00      	nop
 8011d3c:	7f800000 	.word	0x7f800000

08011d40 <scalbnf>:
 8011d40:	ee10 3a10 	vmov	r3, s0
 8011d44:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011d48:	d02b      	beq.n	8011da2 <scalbnf+0x62>
 8011d4a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8011d4e:	d302      	bcc.n	8011d56 <scalbnf+0x16>
 8011d50:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011d54:	4770      	bx	lr
 8011d56:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8011d5a:	d123      	bne.n	8011da4 <scalbnf+0x64>
 8011d5c:	4b24      	ldr	r3, [pc, #144]	@ (8011df0 <scalbnf+0xb0>)
 8011d5e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011df4 <scalbnf+0xb4>
 8011d62:	4298      	cmp	r0, r3
 8011d64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011d68:	db17      	blt.n	8011d9a <scalbnf+0x5a>
 8011d6a:	ee10 3a10 	vmov	r3, s0
 8011d6e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011d72:	3a19      	subs	r2, #25
 8011d74:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011d78:	4288      	cmp	r0, r1
 8011d7a:	dd15      	ble.n	8011da8 <scalbnf+0x68>
 8011d7c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011df8 <scalbnf+0xb8>
 8011d80:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8011dfc <scalbnf+0xbc>
 8011d84:	ee10 3a10 	vmov	r3, s0
 8011d88:	eeb0 7a67 	vmov.f32	s14, s15
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	bfb8      	it	lt
 8011d90:	eef0 7a66 	vmovlt.f32	s15, s13
 8011d94:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011d98:	4770      	bx	lr
 8011d9a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011e00 <scalbnf+0xc0>
 8011d9e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011da2:	4770      	bx	lr
 8011da4:	0dd2      	lsrs	r2, r2, #23
 8011da6:	e7e5      	b.n	8011d74 <scalbnf+0x34>
 8011da8:	4410      	add	r0, r2
 8011daa:	28fe      	cmp	r0, #254	@ 0xfe
 8011dac:	dce6      	bgt.n	8011d7c <scalbnf+0x3c>
 8011dae:	2800      	cmp	r0, #0
 8011db0:	dd06      	ble.n	8011dc0 <scalbnf+0x80>
 8011db2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011db6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011dba:	ee00 3a10 	vmov	s0, r3
 8011dbe:	4770      	bx	lr
 8011dc0:	f110 0f16 	cmn.w	r0, #22
 8011dc4:	da09      	bge.n	8011dda <scalbnf+0x9a>
 8011dc6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011e00 <scalbnf+0xc0>
 8011dca:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011e04 <scalbnf+0xc4>
 8011dce:	ee10 3a10 	vmov	r3, s0
 8011dd2:	eeb0 7a67 	vmov.f32	s14, s15
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	e7d9      	b.n	8011d8e <scalbnf+0x4e>
 8011dda:	3019      	adds	r0, #25
 8011ddc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011de0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011de4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011e08 <scalbnf+0xc8>
 8011de8:	ee07 3a90 	vmov	s15, r3
 8011dec:	e7d7      	b.n	8011d9e <scalbnf+0x5e>
 8011dee:	bf00      	nop
 8011df0:	ffff3cb0 	.word	0xffff3cb0
 8011df4:	4c000000 	.word	0x4c000000
 8011df8:	7149f2ca 	.word	0x7149f2ca
 8011dfc:	f149f2ca 	.word	0xf149f2ca
 8011e00:	0da24260 	.word	0x0da24260
 8011e04:	8da24260 	.word	0x8da24260
 8011e08:	33000000 	.word	0x33000000

08011e0c <with_errnof>:
 8011e0c:	b510      	push	{r4, lr}
 8011e0e:	ed2d 8b02 	vpush	{d8}
 8011e12:	eeb0 8a40 	vmov.f32	s16, s0
 8011e16:	4604      	mov	r4, r0
 8011e18:	f7fe f862 	bl	800fee0 <__errno>
 8011e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8011e20:	ecbd 8b02 	vpop	{d8}
 8011e24:	6004      	str	r4, [r0, #0]
 8011e26:	bd10      	pop	{r4, pc}

08011e28 <xflowf>:
 8011e28:	b130      	cbz	r0, 8011e38 <xflowf+0x10>
 8011e2a:	eef1 7a40 	vneg.f32	s15, s0
 8011e2e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011e32:	2022      	movs	r0, #34	@ 0x22
 8011e34:	f7ff bfea 	b.w	8011e0c <with_errnof>
 8011e38:	eef0 7a40 	vmov.f32	s15, s0
 8011e3c:	e7f7      	b.n	8011e2e <xflowf+0x6>
	...

08011e40 <__math_uflowf>:
 8011e40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011e48 <__math_uflowf+0x8>
 8011e44:	f7ff bff0 	b.w	8011e28 <xflowf>
 8011e48:	10000000 	.word	0x10000000

08011e4c <__math_oflowf>:
 8011e4c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011e54 <__math_oflowf+0x8>
 8011e50:	f7ff bfea 	b.w	8011e28 <xflowf>
 8011e54:	70000000 	.word	0x70000000

08011e58 <__kernel_rem_pio2f>:
 8011e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e5c:	ed2d 8b04 	vpush	{d8-d9}
 8011e60:	b0d9      	sub	sp, #356	@ 0x164
 8011e62:	4690      	mov	r8, r2
 8011e64:	9001      	str	r0, [sp, #4]
 8011e66:	4ab9      	ldr	r2, [pc, #740]	@ (801214c <__kernel_rem_pio2f+0x2f4>)
 8011e68:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8011e6a:	f118 0f04 	cmn.w	r8, #4
 8011e6e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8011e72:	460f      	mov	r7, r1
 8011e74:	f103 3bff 	add.w	fp, r3, #4294967295
 8011e78:	db27      	blt.n	8011eca <__kernel_rem_pio2f+0x72>
 8011e7a:	f1b8 0203 	subs.w	r2, r8, #3
 8011e7e:	bf48      	it	mi
 8011e80:	f108 0204 	addmi.w	r2, r8, #4
 8011e84:	10d2      	asrs	r2, r2, #3
 8011e86:	1c55      	adds	r5, r2, #1
 8011e88:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011e8a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801215c <__kernel_rem_pio2f+0x304>
 8011e8e:	00e8      	lsls	r0, r5, #3
 8011e90:	eba2 060b 	sub.w	r6, r2, fp
 8011e94:	9002      	str	r0, [sp, #8]
 8011e96:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8011e9a:	eb0a 0c0b 	add.w	ip, sl, fp
 8011e9e:	ac1c      	add	r4, sp, #112	@ 0x70
 8011ea0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	4560      	cmp	r0, ip
 8011ea8:	dd11      	ble.n	8011ece <__kernel_rem_pio2f+0x76>
 8011eaa:	a91c      	add	r1, sp, #112	@ 0x70
 8011eac:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8011eb0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8011eb4:	f04f 0c00 	mov.w	ip, #0
 8011eb8:	45d4      	cmp	ip, sl
 8011eba:	dc27      	bgt.n	8011f0c <__kernel_rem_pio2f+0xb4>
 8011ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011ec0:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801215c <__kernel_rem_pio2f+0x304>
 8011ec4:	4606      	mov	r6, r0
 8011ec6:	2400      	movs	r4, #0
 8011ec8:	e016      	b.n	8011ef8 <__kernel_rem_pio2f+0xa0>
 8011eca:	2200      	movs	r2, #0
 8011ecc:	e7db      	b.n	8011e86 <__kernel_rem_pio2f+0x2e>
 8011ece:	42c6      	cmn	r6, r0
 8011ed0:	bf5d      	ittte	pl
 8011ed2:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8011ed6:	ee07 1a90 	vmovpl	s15, r1
 8011eda:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8011ede:	eef0 7a47 	vmovmi.f32	s15, s14
 8011ee2:	ece4 7a01 	vstmia	r4!, {s15}
 8011ee6:	3001      	adds	r0, #1
 8011ee8:	e7dd      	b.n	8011ea6 <__kernel_rem_pio2f+0x4e>
 8011eea:	ecfe 6a01 	vldmia	lr!, {s13}
 8011eee:	ed96 7a00 	vldr	s14, [r6]
 8011ef2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011ef6:	3401      	adds	r4, #1
 8011ef8:	455c      	cmp	r4, fp
 8011efa:	f1a6 0604 	sub.w	r6, r6, #4
 8011efe:	ddf4      	ble.n	8011eea <__kernel_rem_pio2f+0x92>
 8011f00:	ece9 7a01 	vstmia	r9!, {s15}
 8011f04:	f10c 0c01 	add.w	ip, ip, #1
 8011f08:	3004      	adds	r0, #4
 8011f0a:	e7d5      	b.n	8011eb8 <__kernel_rem_pio2f+0x60>
 8011f0c:	a908      	add	r1, sp, #32
 8011f0e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011f12:	9104      	str	r1, [sp, #16]
 8011f14:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8011f16:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8012158 <__kernel_rem_pio2f+0x300>
 8011f1a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8012154 <__kernel_rem_pio2f+0x2fc>
 8011f1e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8011f22:	9203      	str	r2, [sp, #12]
 8011f24:	4654      	mov	r4, sl
 8011f26:	00a2      	lsls	r2, r4, #2
 8011f28:	9205      	str	r2, [sp, #20]
 8011f2a:	aa58      	add	r2, sp, #352	@ 0x160
 8011f2c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8011f30:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8011f34:	a944      	add	r1, sp, #272	@ 0x110
 8011f36:	aa08      	add	r2, sp, #32
 8011f38:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8011f3c:	4694      	mov	ip, r2
 8011f3e:	4626      	mov	r6, r4
 8011f40:	2e00      	cmp	r6, #0
 8011f42:	f1a0 0004 	sub.w	r0, r0, #4
 8011f46:	dc4c      	bgt.n	8011fe2 <__kernel_rem_pio2f+0x18a>
 8011f48:	4628      	mov	r0, r5
 8011f4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011f4e:	f7ff fef7 	bl	8011d40 <scalbnf>
 8011f52:	eeb0 8a40 	vmov.f32	s16, s0
 8011f56:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8011f5a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011f5e:	f7ff f899 	bl	8011094 <floorf>
 8011f62:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8011f66:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011f6a:	2d00      	cmp	r5, #0
 8011f6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011f70:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011f74:	ee17 9a90 	vmov	r9, s15
 8011f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f7c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011f80:	dd41      	ble.n	8012006 <__kernel_rem_pio2f+0x1ae>
 8011f82:	f104 3cff 	add.w	ip, r4, #4294967295
 8011f86:	a908      	add	r1, sp, #32
 8011f88:	f1c5 0e08 	rsb	lr, r5, #8
 8011f8c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8011f90:	fa46 f00e 	asr.w	r0, r6, lr
 8011f94:	4481      	add	r9, r0
 8011f96:	fa00 f00e 	lsl.w	r0, r0, lr
 8011f9a:	1a36      	subs	r6, r6, r0
 8011f9c:	f1c5 0007 	rsb	r0, r5, #7
 8011fa0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8011fa4:	4106      	asrs	r6, r0
 8011fa6:	2e00      	cmp	r6, #0
 8011fa8:	dd3c      	ble.n	8012024 <__kernel_rem_pio2f+0x1cc>
 8011faa:	f04f 0e00 	mov.w	lr, #0
 8011fae:	f109 0901 	add.w	r9, r9, #1
 8011fb2:	4670      	mov	r0, lr
 8011fb4:	4574      	cmp	r4, lr
 8011fb6:	dc68      	bgt.n	801208a <__kernel_rem_pio2f+0x232>
 8011fb8:	2d00      	cmp	r5, #0
 8011fba:	dd03      	ble.n	8011fc4 <__kernel_rem_pio2f+0x16c>
 8011fbc:	2d01      	cmp	r5, #1
 8011fbe:	d074      	beq.n	80120aa <__kernel_rem_pio2f+0x252>
 8011fc0:	2d02      	cmp	r5, #2
 8011fc2:	d07d      	beq.n	80120c0 <__kernel_rem_pio2f+0x268>
 8011fc4:	2e02      	cmp	r6, #2
 8011fc6:	d12d      	bne.n	8012024 <__kernel_rem_pio2f+0x1cc>
 8011fc8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011fcc:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011fd0:	b340      	cbz	r0, 8012024 <__kernel_rem_pio2f+0x1cc>
 8011fd2:	4628      	mov	r0, r5
 8011fd4:	9306      	str	r3, [sp, #24]
 8011fd6:	f7ff feb3 	bl	8011d40 <scalbnf>
 8011fda:	9b06      	ldr	r3, [sp, #24]
 8011fdc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011fe0:	e020      	b.n	8012024 <__kernel_rem_pio2f+0x1cc>
 8011fe2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8011fe6:	3e01      	subs	r6, #1
 8011fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ff0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011ff4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011ff8:	ecac 0a01 	vstmia	ip!, {s0}
 8011ffc:	ed90 0a00 	vldr	s0, [r0]
 8012000:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012004:	e79c      	b.n	8011f40 <__kernel_rem_pio2f+0xe8>
 8012006:	d105      	bne.n	8012014 <__kernel_rem_pio2f+0x1bc>
 8012008:	1e60      	subs	r0, r4, #1
 801200a:	a908      	add	r1, sp, #32
 801200c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8012010:	11f6      	asrs	r6, r6, #7
 8012012:	e7c8      	b.n	8011fa6 <__kernel_rem_pio2f+0x14e>
 8012014:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012018:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012020:	da31      	bge.n	8012086 <__kernel_rem_pio2f+0x22e>
 8012022:	2600      	movs	r6, #0
 8012024:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801202c:	f040 8098 	bne.w	8012160 <__kernel_rem_pio2f+0x308>
 8012030:	1e60      	subs	r0, r4, #1
 8012032:	2200      	movs	r2, #0
 8012034:	4550      	cmp	r0, sl
 8012036:	da4b      	bge.n	80120d0 <__kernel_rem_pio2f+0x278>
 8012038:	2a00      	cmp	r2, #0
 801203a:	d065      	beq.n	8012108 <__kernel_rem_pio2f+0x2b0>
 801203c:	3c01      	subs	r4, #1
 801203e:	ab08      	add	r3, sp, #32
 8012040:	3d08      	subs	r5, #8
 8012042:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d0f8      	beq.n	801203c <__kernel_rem_pio2f+0x1e4>
 801204a:	4628      	mov	r0, r5
 801204c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012050:	f7ff fe76 	bl	8011d40 <scalbnf>
 8012054:	1c63      	adds	r3, r4, #1
 8012056:	aa44      	add	r2, sp, #272	@ 0x110
 8012058:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8012158 <__kernel_rem_pio2f+0x300>
 801205c:	0099      	lsls	r1, r3, #2
 801205e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012062:	4623      	mov	r3, r4
 8012064:	2b00      	cmp	r3, #0
 8012066:	f280 80a9 	bge.w	80121bc <__kernel_rem_pio2f+0x364>
 801206a:	4623      	mov	r3, r4
 801206c:	2b00      	cmp	r3, #0
 801206e:	f2c0 80c7 	blt.w	8012200 <__kernel_rem_pio2f+0x3a8>
 8012072:	aa44      	add	r2, sp, #272	@ 0x110
 8012074:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8012078:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8012150 <__kernel_rem_pio2f+0x2f8>
 801207c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801215c <__kernel_rem_pio2f+0x304>
 8012080:	2000      	movs	r0, #0
 8012082:	1ae2      	subs	r2, r4, r3
 8012084:	e0b1      	b.n	80121ea <__kernel_rem_pio2f+0x392>
 8012086:	2602      	movs	r6, #2
 8012088:	e78f      	b.n	8011faa <__kernel_rem_pio2f+0x152>
 801208a:	f852 1b04 	ldr.w	r1, [r2], #4
 801208e:	b948      	cbnz	r0, 80120a4 <__kernel_rem_pio2f+0x24c>
 8012090:	b121      	cbz	r1, 801209c <__kernel_rem_pio2f+0x244>
 8012092:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8012096:	f842 1c04 	str.w	r1, [r2, #-4]
 801209a:	2101      	movs	r1, #1
 801209c:	f10e 0e01 	add.w	lr, lr, #1
 80120a0:	4608      	mov	r0, r1
 80120a2:	e787      	b.n	8011fb4 <__kernel_rem_pio2f+0x15c>
 80120a4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80120a8:	e7f5      	b.n	8012096 <__kernel_rem_pio2f+0x23e>
 80120aa:	f104 3cff 	add.w	ip, r4, #4294967295
 80120ae:	aa08      	add	r2, sp, #32
 80120b0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80120b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80120b8:	a908      	add	r1, sp, #32
 80120ba:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80120be:	e781      	b.n	8011fc4 <__kernel_rem_pio2f+0x16c>
 80120c0:	f104 3cff 	add.w	ip, r4, #4294967295
 80120c4:	aa08      	add	r2, sp, #32
 80120c6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80120ca:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80120ce:	e7f3      	b.n	80120b8 <__kernel_rem_pio2f+0x260>
 80120d0:	a908      	add	r1, sp, #32
 80120d2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80120d6:	3801      	subs	r0, #1
 80120d8:	430a      	orrs	r2, r1
 80120da:	e7ab      	b.n	8012034 <__kernel_rem_pio2f+0x1dc>
 80120dc:	3201      	adds	r2, #1
 80120de:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80120e2:	2e00      	cmp	r6, #0
 80120e4:	d0fa      	beq.n	80120dc <__kernel_rem_pio2f+0x284>
 80120e6:	9905      	ldr	r1, [sp, #20]
 80120e8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80120ec:	eb0d 0001 	add.w	r0, sp, r1
 80120f0:	18e6      	adds	r6, r4, r3
 80120f2:	a91c      	add	r1, sp, #112	@ 0x70
 80120f4:	f104 0c01 	add.w	ip, r4, #1
 80120f8:	384c      	subs	r0, #76	@ 0x4c
 80120fa:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80120fe:	4422      	add	r2, r4
 8012100:	4562      	cmp	r2, ip
 8012102:	da04      	bge.n	801210e <__kernel_rem_pio2f+0x2b6>
 8012104:	4614      	mov	r4, r2
 8012106:	e70e      	b.n	8011f26 <__kernel_rem_pio2f+0xce>
 8012108:	9804      	ldr	r0, [sp, #16]
 801210a:	2201      	movs	r2, #1
 801210c:	e7e7      	b.n	80120de <__kernel_rem_pio2f+0x286>
 801210e:	9903      	ldr	r1, [sp, #12]
 8012110:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012114:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8012118:	9105      	str	r1, [sp, #20]
 801211a:	ee07 1a90 	vmov	s15, r1
 801211e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012122:	2400      	movs	r4, #0
 8012124:	ece6 7a01 	vstmia	r6!, {s15}
 8012128:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801215c <__kernel_rem_pio2f+0x304>
 801212c:	46b1      	mov	r9, r6
 801212e:	455c      	cmp	r4, fp
 8012130:	dd04      	ble.n	801213c <__kernel_rem_pio2f+0x2e4>
 8012132:	ece0 7a01 	vstmia	r0!, {s15}
 8012136:	f10c 0c01 	add.w	ip, ip, #1
 801213a:	e7e1      	b.n	8012100 <__kernel_rem_pio2f+0x2a8>
 801213c:	ecfe 6a01 	vldmia	lr!, {s13}
 8012140:	ed39 7a01 	vldmdb	r9!, {s14}
 8012144:	3401      	adds	r4, #1
 8012146:	eee6 7a87 	vfma.f32	s15, s13, s14
 801214a:	e7f0      	b.n	801212e <__kernel_rem_pio2f+0x2d6>
 801214c:	0801844c 	.word	0x0801844c
 8012150:	08018420 	.word	0x08018420
 8012154:	43800000 	.word	0x43800000
 8012158:	3b800000 	.word	0x3b800000
 801215c:	00000000 	.word	0x00000000
 8012160:	9b02      	ldr	r3, [sp, #8]
 8012162:	eeb0 0a48 	vmov.f32	s0, s16
 8012166:	eba3 0008 	sub.w	r0, r3, r8
 801216a:	f7ff fde9 	bl	8011d40 <scalbnf>
 801216e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8012154 <__kernel_rem_pio2f+0x2fc>
 8012172:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801217a:	db19      	blt.n	80121b0 <__kernel_rem_pio2f+0x358>
 801217c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8012158 <__kernel_rem_pio2f+0x300>
 8012180:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012184:	aa08      	add	r2, sp, #32
 8012186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801218a:	3508      	adds	r5, #8
 801218c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012190:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012198:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801219c:	ee10 3a10 	vmov	r3, s0
 80121a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80121a4:	ee17 3a90 	vmov	r3, s15
 80121a8:	3401      	adds	r4, #1
 80121aa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80121ae:	e74c      	b.n	801204a <__kernel_rem_pio2f+0x1f2>
 80121b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80121b4:	aa08      	add	r2, sp, #32
 80121b6:	ee10 3a10 	vmov	r3, s0
 80121ba:	e7f6      	b.n	80121aa <__kernel_rem_pio2f+0x352>
 80121bc:	a808      	add	r0, sp, #32
 80121be:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80121c2:	9001      	str	r0, [sp, #4]
 80121c4:	ee07 0a90 	vmov	s15, r0
 80121c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121cc:	3b01      	subs	r3, #1
 80121ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 80121d2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80121d6:	ed62 7a01 	vstmdb	r2!, {s15}
 80121da:	e743      	b.n	8012064 <__kernel_rem_pio2f+0x20c>
 80121dc:	ecfc 6a01 	vldmia	ip!, {s13}
 80121e0:	ecb5 7a01 	vldmia	r5!, {s14}
 80121e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80121e8:	3001      	adds	r0, #1
 80121ea:	4550      	cmp	r0, sl
 80121ec:	dc01      	bgt.n	80121f2 <__kernel_rem_pio2f+0x39a>
 80121ee:	4282      	cmp	r2, r0
 80121f0:	daf4      	bge.n	80121dc <__kernel_rem_pio2f+0x384>
 80121f2:	a858      	add	r0, sp, #352	@ 0x160
 80121f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80121f8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80121fc:	3b01      	subs	r3, #1
 80121fe:	e735      	b.n	801206c <__kernel_rem_pio2f+0x214>
 8012200:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012202:	2b02      	cmp	r3, #2
 8012204:	dc09      	bgt.n	801221a <__kernel_rem_pio2f+0x3c2>
 8012206:	2b00      	cmp	r3, #0
 8012208:	dc2b      	bgt.n	8012262 <__kernel_rem_pio2f+0x40a>
 801220a:	d044      	beq.n	8012296 <__kernel_rem_pio2f+0x43e>
 801220c:	f009 0007 	and.w	r0, r9, #7
 8012210:	b059      	add	sp, #356	@ 0x164
 8012212:	ecbd 8b04 	vpop	{d8-d9}
 8012216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801221a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801221c:	2b03      	cmp	r3, #3
 801221e:	d1f5      	bne.n	801220c <__kernel_rem_pio2f+0x3b4>
 8012220:	aa30      	add	r2, sp, #192	@ 0xc0
 8012222:	1f0b      	subs	r3, r1, #4
 8012224:	4413      	add	r3, r2
 8012226:	461a      	mov	r2, r3
 8012228:	4620      	mov	r0, r4
 801222a:	2800      	cmp	r0, #0
 801222c:	f1a2 0204 	sub.w	r2, r2, #4
 8012230:	dc52      	bgt.n	80122d8 <__kernel_rem_pio2f+0x480>
 8012232:	4622      	mov	r2, r4
 8012234:	2a01      	cmp	r2, #1
 8012236:	f1a3 0304 	sub.w	r3, r3, #4
 801223a:	dc5d      	bgt.n	80122f8 <__kernel_rem_pio2f+0x4a0>
 801223c:	ab30      	add	r3, sp, #192	@ 0xc0
 801223e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801215c <__kernel_rem_pio2f+0x304>
 8012242:	440b      	add	r3, r1
 8012244:	2c01      	cmp	r4, #1
 8012246:	dc67      	bgt.n	8012318 <__kernel_rem_pio2f+0x4c0>
 8012248:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801224c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8012250:	2e00      	cmp	r6, #0
 8012252:	d167      	bne.n	8012324 <__kernel_rem_pio2f+0x4cc>
 8012254:	edc7 6a00 	vstr	s13, [r7]
 8012258:	ed87 7a01 	vstr	s14, [r7, #4]
 801225c:	edc7 7a02 	vstr	s15, [r7, #8]
 8012260:	e7d4      	b.n	801220c <__kernel_rem_pio2f+0x3b4>
 8012262:	ab30      	add	r3, sp, #192	@ 0xc0
 8012264:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801215c <__kernel_rem_pio2f+0x304>
 8012268:	440b      	add	r3, r1
 801226a:	4622      	mov	r2, r4
 801226c:	2a00      	cmp	r2, #0
 801226e:	da24      	bge.n	80122ba <__kernel_rem_pio2f+0x462>
 8012270:	b34e      	cbz	r6, 80122c6 <__kernel_rem_pio2f+0x46e>
 8012272:	eef1 7a47 	vneg.f32	s15, s14
 8012276:	edc7 7a00 	vstr	s15, [r7]
 801227a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801227e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012282:	aa31      	add	r2, sp, #196	@ 0xc4
 8012284:	2301      	movs	r3, #1
 8012286:	429c      	cmp	r4, r3
 8012288:	da20      	bge.n	80122cc <__kernel_rem_pio2f+0x474>
 801228a:	b10e      	cbz	r6, 8012290 <__kernel_rem_pio2f+0x438>
 801228c:	eef1 7a67 	vneg.f32	s15, s15
 8012290:	edc7 7a01 	vstr	s15, [r7, #4]
 8012294:	e7ba      	b.n	801220c <__kernel_rem_pio2f+0x3b4>
 8012296:	ab30      	add	r3, sp, #192	@ 0xc0
 8012298:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801215c <__kernel_rem_pio2f+0x304>
 801229c:	440b      	add	r3, r1
 801229e:	2c00      	cmp	r4, #0
 80122a0:	da05      	bge.n	80122ae <__kernel_rem_pio2f+0x456>
 80122a2:	b10e      	cbz	r6, 80122a8 <__kernel_rem_pio2f+0x450>
 80122a4:	eef1 7a67 	vneg.f32	s15, s15
 80122a8:	edc7 7a00 	vstr	s15, [r7]
 80122ac:	e7ae      	b.n	801220c <__kernel_rem_pio2f+0x3b4>
 80122ae:	ed33 7a01 	vldmdb	r3!, {s14}
 80122b2:	3c01      	subs	r4, #1
 80122b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80122b8:	e7f1      	b.n	801229e <__kernel_rem_pio2f+0x446>
 80122ba:	ed73 7a01 	vldmdb	r3!, {s15}
 80122be:	3a01      	subs	r2, #1
 80122c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80122c4:	e7d2      	b.n	801226c <__kernel_rem_pio2f+0x414>
 80122c6:	eef0 7a47 	vmov.f32	s15, s14
 80122ca:	e7d4      	b.n	8012276 <__kernel_rem_pio2f+0x41e>
 80122cc:	ecb2 7a01 	vldmia	r2!, {s14}
 80122d0:	3301      	adds	r3, #1
 80122d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80122d6:	e7d6      	b.n	8012286 <__kernel_rem_pio2f+0x42e>
 80122d8:	edd2 7a00 	vldr	s15, [r2]
 80122dc:	edd2 6a01 	vldr	s13, [r2, #4]
 80122e0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80122e4:	3801      	subs	r0, #1
 80122e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80122ea:	ed82 7a00 	vstr	s14, [r2]
 80122ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80122f2:	edc2 7a01 	vstr	s15, [r2, #4]
 80122f6:	e798      	b.n	801222a <__kernel_rem_pio2f+0x3d2>
 80122f8:	edd3 7a00 	vldr	s15, [r3]
 80122fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8012300:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012304:	3a01      	subs	r2, #1
 8012306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801230a:	ed83 7a00 	vstr	s14, [r3]
 801230e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012312:	edc3 7a01 	vstr	s15, [r3, #4]
 8012316:	e78d      	b.n	8012234 <__kernel_rem_pio2f+0x3dc>
 8012318:	ed33 7a01 	vldmdb	r3!, {s14}
 801231c:	3c01      	subs	r4, #1
 801231e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012322:	e78f      	b.n	8012244 <__kernel_rem_pio2f+0x3ec>
 8012324:	eef1 6a66 	vneg.f32	s13, s13
 8012328:	eeb1 7a47 	vneg.f32	s14, s14
 801232c:	edc7 6a00 	vstr	s13, [r7]
 8012330:	ed87 7a01 	vstr	s14, [r7, #4]
 8012334:	eef1 7a67 	vneg.f32	s15, s15
 8012338:	e790      	b.n	801225c <__kernel_rem_pio2f+0x404>
 801233a:	bf00      	nop

0801233c <__ieee754_atan2f>:
 801233c:	ee10 2a90 	vmov	r2, s1
 8012340:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8012344:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012348:	b510      	push	{r4, lr}
 801234a:	eef0 7a40 	vmov.f32	s15, s0
 801234e:	d806      	bhi.n	801235e <__ieee754_atan2f+0x22>
 8012350:	ee10 0a10 	vmov	r0, s0
 8012354:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8012358:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801235c:	d904      	bls.n	8012368 <__ieee754_atan2f+0x2c>
 801235e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012362:	eeb0 0a67 	vmov.f32	s0, s15
 8012366:	bd10      	pop	{r4, pc}
 8012368:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801236c:	d103      	bne.n	8012376 <__ieee754_atan2f+0x3a>
 801236e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012372:	f7fe bc85 	b.w	8010c80 <atanf>
 8012376:	1794      	asrs	r4, r2, #30
 8012378:	f004 0402 	and.w	r4, r4, #2
 801237c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012380:	b943      	cbnz	r3, 8012394 <__ieee754_atan2f+0x58>
 8012382:	2c02      	cmp	r4, #2
 8012384:	d05e      	beq.n	8012444 <__ieee754_atan2f+0x108>
 8012386:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012458 <__ieee754_atan2f+0x11c>
 801238a:	2c03      	cmp	r4, #3
 801238c:	bf08      	it	eq
 801238e:	eef0 7a47 	vmoveq.f32	s15, s14
 8012392:	e7e6      	b.n	8012362 <__ieee754_atan2f+0x26>
 8012394:	b941      	cbnz	r1, 80123a8 <__ieee754_atan2f+0x6c>
 8012396:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801245c <__ieee754_atan2f+0x120>
 801239a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012460 <__ieee754_atan2f+0x124>
 801239e:	2800      	cmp	r0, #0
 80123a0:	bfb8      	it	lt
 80123a2:	eef0 7a47 	vmovlt.f32	s15, s14
 80123a6:	e7dc      	b.n	8012362 <__ieee754_atan2f+0x26>
 80123a8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80123ac:	d110      	bne.n	80123d0 <__ieee754_atan2f+0x94>
 80123ae:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80123b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80123b6:	d107      	bne.n	80123c8 <__ieee754_atan2f+0x8c>
 80123b8:	2c02      	cmp	r4, #2
 80123ba:	d846      	bhi.n	801244a <__ieee754_atan2f+0x10e>
 80123bc:	4b29      	ldr	r3, [pc, #164]	@ (8012464 <__ieee754_atan2f+0x128>)
 80123be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80123c2:	edd3 7a00 	vldr	s15, [r3]
 80123c6:	e7cc      	b.n	8012362 <__ieee754_atan2f+0x26>
 80123c8:	2c02      	cmp	r4, #2
 80123ca:	d841      	bhi.n	8012450 <__ieee754_atan2f+0x114>
 80123cc:	4b26      	ldr	r3, [pc, #152]	@ (8012468 <__ieee754_atan2f+0x12c>)
 80123ce:	e7f6      	b.n	80123be <__ieee754_atan2f+0x82>
 80123d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80123d4:	d0df      	beq.n	8012396 <__ieee754_atan2f+0x5a>
 80123d6:	1a5b      	subs	r3, r3, r1
 80123d8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80123dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80123e0:	da1a      	bge.n	8012418 <__ieee754_atan2f+0xdc>
 80123e2:	2a00      	cmp	r2, #0
 80123e4:	da01      	bge.n	80123ea <__ieee754_atan2f+0xae>
 80123e6:	313c      	adds	r1, #60	@ 0x3c
 80123e8:	db19      	blt.n	801241e <__ieee754_atan2f+0xe2>
 80123ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80123ee:	f7fe fd5f 	bl	8010eb0 <fabsf>
 80123f2:	f7fe fc45 	bl	8010c80 <atanf>
 80123f6:	eef0 7a40 	vmov.f32	s15, s0
 80123fa:	2c01      	cmp	r4, #1
 80123fc:	d012      	beq.n	8012424 <__ieee754_atan2f+0xe8>
 80123fe:	2c02      	cmp	r4, #2
 8012400:	d017      	beq.n	8012432 <__ieee754_atan2f+0xf6>
 8012402:	2c00      	cmp	r4, #0
 8012404:	d0ad      	beq.n	8012362 <__ieee754_atan2f+0x26>
 8012406:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801246c <__ieee754_atan2f+0x130>
 801240a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801240e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8012470 <__ieee754_atan2f+0x134>
 8012412:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012416:	e7a4      	b.n	8012362 <__ieee754_atan2f+0x26>
 8012418:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801245c <__ieee754_atan2f+0x120>
 801241c:	e7ed      	b.n	80123fa <__ieee754_atan2f+0xbe>
 801241e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012474 <__ieee754_atan2f+0x138>
 8012422:	e7ea      	b.n	80123fa <__ieee754_atan2f+0xbe>
 8012424:	ee17 3a90 	vmov	r3, s15
 8012428:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801242c:	ee07 3a90 	vmov	s15, r3
 8012430:	e797      	b.n	8012362 <__ieee754_atan2f+0x26>
 8012432:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801246c <__ieee754_atan2f+0x130>
 8012436:	ee77 7a87 	vadd.f32	s15, s15, s14
 801243a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8012470 <__ieee754_atan2f+0x134>
 801243e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012442:	e78e      	b.n	8012362 <__ieee754_atan2f+0x26>
 8012444:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8012470 <__ieee754_atan2f+0x134>
 8012448:	e78b      	b.n	8012362 <__ieee754_atan2f+0x26>
 801244a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8012478 <__ieee754_atan2f+0x13c>
 801244e:	e788      	b.n	8012362 <__ieee754_atan2f+0x26>
 8012450:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8012474 <__ieee754_atan2f+0x138>
 8012454:	e785      	b.n	8012362 <__ieee754_atan2f+0x26>
 8012456:	bf00      	nop
 8012458:	c0490fdb 	.word	0xc0490fdb
 801245c:	3fc90fdb 	.word	0x3fc90fdb
 8012460:	bfc90fdb 	.word	0xbfc90fdb
 8012464:	08018464 	.word	0x08018464
 8012468:	08018458 	.word	0x08018458
 801246c:	33bbbd2e 	.word	0x33bbbd2e
 8012470:	40490fdb 	.word	0x40490fdb
 8012474:	00000000 	.word	0x00000000
 8012478:	3f490fdb 	.word	0x3f490fdb

0801247c <__ieee754_hypotf>:
 801247c:	ee10 3a10 	vmov	r3, s0
 8012480:	ee10 2a90 	vmov	r2, s1
 8012484:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012488:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 801248c:	4293      	cmp	r3, r2
 801248e:	bfbe      	ittt	lt
 8012490:	4619      	movlt	r1, r3
 8012492:	4613      	movlt	r3, r2
 8012494:	460a      	movlt	r2, r1
 8012496:	1a99      	subs	r1, r3, r2
 8012498:	f1b1 6f70 	cmp.w	r1, #251658240	@ 0xf000000
 801249c:	b510      	push	{r4, lr}
 801249e:	ee00 3a10 	vmov	s0, r3
 80124a2:	ee06 2a90 	vmov	s13, r2
 80124a6:	dd02      	ble.n	80124ae <__ieee754_hypotf+0x32>
 80124a8:	ee30 0a26 	vadd.f32	s0, s0, s13
 80124ac:	bd10      	pop	{r4, pc}
 80124ae:	f1b3 4fb1 	cmp.w	r3, #1484783616	@ 0x58800000
 80124b2:	dd48      	ble.n	8012546 <__ieee754_hypotf+0xca>
 80124b4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80124b8:	db0c      	blt.n	80124d4 <__ieee754_hypotf+0x58>
 80124ba:	bf14      	ite	ne
 80124bc:	ee30 0a26 	vaddne.f32	s0, s0, s13
 80124c0:	ed9f 0a33 	vldreq	s0, [pc, #204]	@ 8012590 <__ieee754_hypotf+0x114>
 80124c4:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8012590 <__ieee754_hypotf+0x114>
 80124c8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80124cc:	bf08      	it	eq
 80124ce:	eeb0 0a67 	vmoveq.f32	s0, s15
 80124d2:	e7eb      	b.n	80124ac <__ieee754_hypotf+0x30>
 80124d4:	f103 435e 	add.w	r3, r3, #3724541952	@ 0xde000000
 80124d8:	f102 425e 	add.w	r2, r2, #3724541952	@ 0xde000000
 80124dc:	ee00 3a10 	vmov	s0, r3
 80124e0:	ee06 2a90 	vmov	s13, r2
 80124e4:	2444      	movs	r4, #68	@ 0x44
 80124e6:	f1b2 5f1a 	cmp.w	r2, #645922816	@ 0x26800000
 80124ea:	da0b      	bge.n	8012504 <__ieee754_hypotf+0x88>
 80124ec:	2a00      	cmp	r2, #0
 80124ee:	d0dd      	beq.n	80124ac <__ieee754_hypotf+0x30>
 80124f0:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 80124f4:	da29      	bge.n	801254a <__ieee754_hypotf+0xce>
 80124f6:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8012594 <__ieee754_hypotf+0x118>
 80124fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80124fe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012502:	3c7e      	subs	r4, #126	@ 0x7e
 8012504:	ee30 6a66 	vsub.f32	s12, s0, s13
 8012508:	4923      	ldr	r1, [pc, #140]	@ (8012598 <__ieee754_hypotf+0x11c>)
 801250a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012512:	d524      	bpl.n	801255e <__ieee754_hypotf+0xe2>
 8012514:	400b      	ands	r3, r1
 8012516:	ee07 3a90 	vmov	s15, r3
 801251a:	ee30 7a27 	vadd.f32	s14, s0, s15
 801251e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012522:	ee27 0a00 	vmul.f32	s0, s14, s0
 8012526:	eea6 0aa6 	vfma.f32	s0, s13, s13
 801252a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 801252e:	f7fe fdad 	bl	801108c <__ieee754_sqrtf>
 8012532:	2c00      	cmp	r4, #0
 8012534:	d0ba      	beq.n	80124ac <__ieee754_hypotf+0x30>
 8012536:	05e4      	lsls	r4, r4, #23
 8012538:	f104 547e 	add.w	r4, r4, #1065353216	@ 0x3f800000
 801253c:	ee07 4a90 	vmov	s15, r4
 8012540:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012544:	e7b2      	b.n	80124ac <__ieee754_hypotf+0x30>
 8012546:	2400      	movs	r4, #0
 8012548:	e7cd      	b.n	80124e6 <__ieee754_hypotf+0x6a>
 801254a:	f103 5308 	add.w	r3, r3, #570425344	@ 0x22000000
 801254e:	f102 5208 	add.w	r2, r2, #570425344	@ 0x22000000
 8012552:	ee00 3a10 	vmov	s0, r3
 8012556:	ee06 2a90 	vmov	s13, r2
 801255a:	3c44      	subs	r4, #68	@ 0x44
 801255c:	e7d2      	b.n	8012504 <__ieee754_hypotf+0x88>
 801255e:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 8012562:	400b      	ands	r3, r1
 8012564:	ee07 3a90 	vmov	s15, r3
 8012568:	eef0 4a00 	vmov.f32	s9, #0	@ 0x40000000  2.0
 801256c:	eeb0 5a67 	vmov.f32	s10, s15
 8012570:	ee90 5a24 	vfnms.f32	s10, s0, s9
 8012574:	400a      	ands	r2, r1
 8012576:	ee07 2a10 	vmov	s14, r2
 801257a:	ee26 0a85 	vmul.f32	s0, s13, s10
 801257e:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8012582:	eea5 0aa7 	vfma.f32	s0, s11, s15
 8012586:	eea6 0a06 	vfma.f32	s0, s12, s12
 801258a:	eea7 0a27 	vfma.f32	s0, s14, s15
 801258e:	e7ce      	b.n	801252e <__ieee754_hypotf+0xb2>
 8012590:	7f800000 	.word	0x7f800000
 8012594:	7e800000 	.word	0x7e800000
 8012598:	fffff000 	.word	0xfffff000

0801259c <__ieee754_logf>:
 801259c:	ee10 3a10 	vmov	r3, s0
 80125a0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80125a4:	d106      	bne.n	80125b4 <__ieee754_logf+0x18>
 80125a6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8012740 <__ieee754_logf+0x1a4>
 80125aa:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8012744 <__ieee754_logf+0x1a8>
 80125ae:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80125b2:	4770      	bx	lr
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	461a      	mov	r2, r3
 80125b8:	da02      	bge.n	80125c0 <__ieee754_logf+0x24>
 80125ba:	ee30 7a40 	vsub.f32	s14, s0, s0
 80125be:	e7f4      	b.n	80125aa <__ieee754_logf+0xe>
 80125c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80125c4:	db02      	blt.n	80125cc <__ieee754_logf+0x30>
 80125c6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80125ca:	4770      	bx	lr
 80125cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80125d0:	bfb8      	it	lt
 80125d2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8012748 <__ieee754_logf+0x1ac>
 80125d6:	485d      	ldr	r0, [pc, #372]	@ (801274c <__ieee754_logf+0x1b0>)
 80125d8:	bfbe      	ittt	lt
 80125da:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80125de:	f06f 0118 	mvnlt.w	r1, #24
 80125e2:	ee17 2a90 	vmovlt	r2, s15
 80125e6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80125ea:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80125ee:	4410      	add	r0, r2
 80125f0:	bfa8      	it	ge
 80125f2:	2100      	movge	r1, #0
 80125f4:	3b7f      	subs	r3, #127	@ 0x7f
 80125f6:	440b      	add	r3, r1
 80125f8:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 80125fc:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8012600:	4311      	orrs	r1, r2
 8012602:	ee00 1a10 	vmov	s0, r1
 8012606:	4952      	ldr	r1, [pc, #328]	@ (8012750 <__ieee754_logf+0x1b4>)
 8012608:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 801260c:	f102 000f 	add.w	r0, r2, #15
 8012610:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012614:	4001      	ands	r1, r0
 8012616:	ee30 0a67 	vsub.f32	s0, s0, s15
 801261a:	bb89      	cbnz	r1, 8012680 <__ieee754_logf+0xe4>
 801261c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012624:	d10f      	bne.n	8012646 <__ieee754_logf+0xaa>
 8012626:	2b00      	cmp	r3, #0
 8012628:	f000 8087 	beq.w	801273a <__ieee754_logf+0x19e>
 801262c:	ee07 3a90 	vmov	s15, r3
 8012630:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8012754 <__ieee754_logf+0x1b8>
 8012634:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8012758 <__ieee754_logf+0x1bc>
 8012638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801263c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012640:	eea7 0a87 	vfma.f32	s0, s15, s14
 8012644:	4770      	bx	lr
 8012646:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801275c <__ieee754_logf+0x1c0>
 801264a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801264e:	eee0 7a66 	vfms.f32	s15, s0, s13
 8012652:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012656:	ee27 7a27 	vmul.f32	s14, s14, s15
 801265a:	b913      	cbnz	r3, 8012662 <__ieee754_logf+0xc6>
 801265c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012660:	4770      	bx	lr
 8012662:	ee07 3a90 	vmov	s15, r3
 8012666:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8012754 <__ieee754_logf+0x1b8>
 801266a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801266e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012672:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012676:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012758 <__ieee754_logf+0x1bc>
 801267a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801267e:	4770      	bx	lr
 8012680:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8012684:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012688:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012760 <__ieee754_logf+0x1c4>
 801268c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8012764 <__ieee754_logf+0x1c8>
 8012690:	4935      	ldr	r1, [pc, #212]	@ (8012768 <__ieee754_logf+0x1cc>)
 8012692:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8012696:	4411      	add	r1, r2
 8012698:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 801269c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80126a0:	430a      	orrs	r2, r1
 80126a2:	2a00      	cmp	r2, #0
 80126a4:	ee07 3a90 	vmov	s15, r3
 80126a8:	ee26 5a06 	vmul.f32	s10, s12, s12
 80126ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80126b0:	ee25 7a05 	vmul.f32	s14, s10, s10
 80126b4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 801276c <__ieee754_logf+0x1d0>
 80126b8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80126bc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8012770 <__ieee754_logf+0x1d4>
 80126c0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80126c4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8012774 <__ieee754_logf+0x1d8>
 80126c8:	eee7 7a24 	vfma.f32	s15, s14, s9
 80126cc:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8012778 <__ieee754_logf+0x1dc>
 80126d0:	eee7 4a87 	vfma.f32	s9, s15, s14
 80126d4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801277c <__ieee754_logf+0x1e0>
 80126d8:	eee4 7a87 	vfma.f32	s15, s9, s14
 80126dc:	ee67 7a85 	vmul.f32	s15, s15, s10
 80126e0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80126e4:	dd1a      	ble.n	801271c <__ieee754_logf+0x180>
 80126e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80126ea:	ee20 7a07 	vmul.f32	s14, s0, s14
 80126ee:	ee27 7a00 	vmul.f32	s14, s14, s0
 80126f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80126f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80126fa:	b913      	cbnz	r3, 8012702 <__ieee754_logf+0x166>
 80126fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012700:	e7ac      	b.n	801265c <__ieee754_logf+0xc0>
 8012702:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8012754 <__ieee754_logf+0x1b8>
 8012706:	eee6 7a86 	vfma.f32	s15, s13, s12
 801270a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801270e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012712:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8012758 <__ieee754_logf+0x1bc>
 8012716:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801271a:	4770      	bx	lr
 801271c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012720:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012724:	b913      	cbnz	r3, 801272c <__ieee754_logf+0x190>
 8012726:	ee30 0a67 	vsub.f32	s0, s0, s15
 801272a:	4770      	bx	lr
 801272c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8012754 <__ieee754_logf+0x1b8>
 8012730:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8012734:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012738:	e7eb      	b.n	8012712 <__ieee754_logf+0x176>
 801273a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8012744 <__ieee754_logf+0x1a8>
 801273e:	4770      	bx	lr
 8012740:	cc000000 	.word	0xcc000000
 8012744:	00000000 	.word	0x00000000
 8012748:	4c000000 	.word	0x4c000000
 801274c:	004afb20 	.word	0x004afb20
 8012750:	007ffff0 	.word	0x007ffff0
 8012754:	3717f7d1 	.word	0x3717f7d1
 8012758:	3f317180 	.word	0x3f317180
 801275c:	3eaaaaab 	.word	0x3eaaaaab
 8012760:	3e1cd04f 	.word	0x3e1cd04f
 8012764:	3e178897 	.word	0x3e178897
 8012768:	ffcf5c30 	.word	0xffcf5c30
 801276c:	3e638e29 	.word	0x3e638e29
 8012770:	3ecccccd 	.word	0x3ecccccd
 8012774:	3e3a3325 	.word	0x3e3a3325
 8012778:	3e924925 	.word	0x3e924925
 801277c:	3f2aaaab 	.word	0x3f2aaaab

08012780 <_init>:
 8012780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012782:	bf00      	nop
 8012784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012786:	bc08      	pop	{r3}
 8012788:	469e      	mov	lr, r3
 801278a:	4770      	bx	lr

0801278c <_fini>:
 801278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801278e:	bf00      	nop
 8012790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012792:	bc08      	pop	{r3}
 8012794:	469e      	mov	lr, r3
 8012796:	4770      	bx	lr
