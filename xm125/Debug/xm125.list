
xm125.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019414  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006178  080195a8  080195a8  0001a5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f720  0801f720  00021374  2**0
                  CONTENTS
  4 .ARM          00000008  0801f720  0801f720  00020720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f728  0801f728  00021374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f728  0801f728  00020728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f72c  0801f72c  0002072c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000374  20000000  0801f730  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000374  0801faa4  00021374  2**2
                  ALLOC
 10 ._user_heap_stack 00001604  200008e4  0801faa4  000218e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021374  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005ec13  00000000  00000000  000213a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000cea7  00000000  00000000  0007ffb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002728  00000000  00000000  0008ce60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f98  00000000  00000000  0008f588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e3c  00000000  00000000  00090520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033bcd  00000000  00000000  000b435c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0d43  00000000  00000000  000e7f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000008f  00000000  00000000  001c8c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8f0  00000000  00000000  001c8cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001d35ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00028b54  00000000  00000000  001d363e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00006338  00000000  00000000  001fc192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000374 	.word	0x20000374
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801958c 	.word	0x0801958c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000378 	.word	0x20000378
 80001cc:	0801958c 	.word	0x0801958c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 baf0 	b.w	80011e0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f98c 	bl	8000f24 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__mulsc3>:
 8000c18:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000c1c:	ee20 6aa1 	vmul.f32	s12, s1, s3
 8000c20:	ee20 5a21 	vmul.f32	s10, s0, s3
 8000c24:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8000c28:	ee61 5a20 	vmul.f32	s11, s2, s1
 8000c2c:	eef4 7a67 	vcmp.f32	s15, s15
 8000c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c34:	ee35 7a25 	vadd.f32	s14, s10, s11
 8000c38:	d604      	bvs.n	8000c44 <__mulsc3+0x2c>
 8000c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c3e:	eef0 0a47 	vmov.f32	s1, s14
 8000c42:	4770      	bx	lr
 8000c44:	eeb4 7a47 	vcmp.f32	s14, s14
 8000c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4c:	d7f5      	bvc.n	8000c3a <__mulsc3+0x22>
 8000c4e:	ed9f 4aa1 	vldr	s8, [pc, #644]	@ 8000ed4 <__mulsc3+0x2bc>
 8000c52:	eef0 4ac0 	vabs.f32	s9, s0
 8000c56:	eef4 4a44 	vcmp.f32	s9, s8
 8000c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5e:	eef0 3ae0 	vabs.f32	s7, s1
 8000c62:	f300 80a0 	bgt.w	8000da6 <__mulsc3+0x18e>
 8000c66:	eef4 3a44 	vcmp.f32	s7, s8
 8000c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6e:	f300 809a 	bgt.w	8000da6 <__mulsc3+0x18e>
 8000c72:	2300      	movs	r3, #0
 8000c74:	eddf 4a97 	vldr	s9, [pc, #604]	@ 8000ed4 <__mulsc3+0x2bc>
 8000c78:	eeb0 4ac1 	vabs.f32	s8, s2
 8000c7c:	eeb4 4a64 	vcmp.f32	s8, s9
 8000c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c84:	eef0 3ae1 	vabs.f32	s7, s3
 8000c88:	dc48      	bgt.n	8000d1c <__mulsc3+0x104>
 8000c8a:	eef4 3a64 	vcmp.f32	s7, s9
 8000c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c92:	dc43      	bgt.n	8000d1c <__mulsc3+0x104>
 8000c94:	bb9b      	cbnz	r3, 8000cfe <__mulsc3+0xe6>
 8000c96:	eef0 6ae6 	vabs.f32	s13, s13
 8000c9a:	eef4 6a64 	vcmp.f32	s13, s9
 8000c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca2:	dc14      	bgt.n	8000cce <__mulsc3+0xb6>
 8000ca4:	eeb0 6ac6 	vabs.f32	s12, s12
 8000ca8:	eeb4 6a64 	vcmp.f32	s12, s9
 8000cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb0:	dc0d      	bgt.n	8000cce <__mulsc3+0xb6>
 8000cb2:	eeb0 5ac5 	vabs.f32	s10, s10
 8000cb6:	eeb4 5a64 	vcmp.f32	s10, s9
 8000cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cbe:	dc06      	bgt.n	8000cce <__mulsc3+0xb6>
 8000cc0:	eef0 5ae5 	vabs.f32	s11, s11
 8000cc4:	eef4 5a64 	vcmp.f32	s11, s9
 8000cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ccc:	ddb5      	ble.n	8000c3a <__mulsc3+0x22>
 8000cce:	eeb4 0a40 	vcmp.f32	s0, s0
 8000cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd6:	f180 80f0 	bvs.w	8000eba <__mulsc3+0x2a2>
 8000cda:	eef4 0a60 	vcmp.f32	s1, s1
 8000cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce2:	f180 80dd 	bvs.w	8000ea0 <__mulsc3+0x288>
 8000ce6:	eeb4 1a41 	vcmp.f32	s2, s2
 8000cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cee:	f180 80ca 	bvs.w	8000e86 <__mulsc3+0x26e>
 8000cf2:	eef4 1a61 	vcmp.f32	s3, s3
 8000cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfa:	f180 80b7 	bvs.w	8000e6c <__mulsc3+0x254>
 8000cfe:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000d02:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000d06:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000d0a:	eee0 0a21 	vfma.f32	s1, s0, s3
 8000d0e:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8000ed8 <__mulsc3+0x2c0>
 8000d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d16:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000d1a:	e78e      	b.n	8000c3a <__mulsc3+0x22>
 8000d1c:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 8000ed4 <__mulsc3+0x2bc>
 8000d20:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000ed4 <__mulsc3+0x2bc>
 8000d24:	eeb4 4a67 	vcmp.f32	s8, s15
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	bfcc      	ite	gt
 8000d2e:	2301      	movgt	r3, #1
 8000d30:	2300      	movle	r3, #0
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	ee11 3a10 	vmov	r3, s2
 8000d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	eef0 7ae7 	vabs.f32	s15, s15
 8000d44:	eef4 3a47 	vcmp.f32	s7, s14
 8000d48:	bfb8      	it	lt
 8000d4a:	eef1 7a67 	vneglt.f32	s15, s15
 8000d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d52:	bfcc      	ite	gt
 8000d54:	2301      	movgt	r3, #1
 8000d56:	2300      	movle	r3, #0
 8000d58:	eeb0 1a67 	vmov.f32	s2, s15
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	ee11 3a90 	vmov	r3, s3
 8000d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	eef0 7ae7 	vabs.f32	s15, s15
 8000d6e:	eeb4 0a40 	vcmp.f32	s0, s0
 8000d72:	bfb8      	it	lt
 8000d74:	eef1 7a67 	vneglt.f32	s15, s15
 8000d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7c:	eef0 1a67 	vmov.f32	s3, s15
 8000d80:	d65a      	bvs.n	8000e38 <__mulsc3+0x220>
 8000d82:	eef4 0a60 	vcmp.f32	s1, s1
 8000d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8a:	d7b8      	bvc.n	8000cfe <__mulsc3+0xe6>
 8000d8c:	ee10 3a90 	vmov	r3, s1
 8000d90:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8000edc <__mulsc3+0x2c4>
 8000d94:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8000ee0 <__mulsc3+0x2c8>
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	bfb4      	ite	lt
 8000d9c:	eef0 0a67 	vmovlt.f32	s1, s15
 8000da0:	eef0 0a47 	vmovge.f32	s1, s14
 8000da4:	e7ab      	b.n	8000cfe <__mulsc3+0xe6>
 8000da6:	ed9f 4a4b 	vldr	s8, [pc, #300]	@ 8000ed4 <__mulsc3+0x2bc>
 8000daa:	eef4 4a44 	vcmp.f32	s9, s8
 8000dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db2:	bfcc      	ite	gt
 8000db4:	2301      	movgt	r3, #1
 8000db6:	2300      	movle	r3, #0
 8000db8:	ee04 3a90 	vmov	s9, r3
 8000dbc:	ed9f 4a45 	vldr	s8, [pc, #276]	@ 8000ed4 <__mulsc3+0x2bc>
 8000dc0:	ee10 3a10 	vmov	r3, s0
 8000dc4:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	eef0 4ae4 	vabs.f32	s9, s9
 8000dce:	eef4 3a44 	vcmp.f32	s7, s8
 8000dd2:	bfb8      	it	lt
 8000dd4:	eef1 4a64 	vneglt.f32	s9, s9
 8000dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ddc:	bfcc      	ite	gt
 8000dde:	2301      	movgt	r3, #1
 8000de0:	2300      	movle	r3, #0
 8000de2:	eeb0 0a64 	vmov.f32	s0, s9
 8000de6:	ee04 3a90 	vmov	s9, r3
 8000dea:	ee10 3a90 	vmov	r3, s1
 8000dee:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	eef0 4ae4 	vabs.f32	s9, s9
 8000df8:	eeb4 1a41 	vcmp.f32	s2, s2
 8000dfc:	bfb8      	it	lt
 8000dfe:	eef1 4a64 	vneglt.f32	s9, s9
 8000e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e06:	eef0 0a64 	vmov.f32	s1, s9
 8000e0a:	d622      	bvs.n	8000e52 <__mulsc3+0x23a>
 8000e0c:	eef4 1a61 	vcmp.f32	s3, s3
 8000e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e14:	bf78      	it	vc
 8000e16:	2301      	movvc	r3, #1
 8000e18:	f5ff af2c 	bvc.w	8000c74 <__mulsc3+0x5c>
 8000e1c:	ee11 3a90 	vmov	r3, s3
 8000e20:	ed9f 4a2e 	vldr	s8, [pc, #184]	@ 8000edc <__mulsc3+0x2c4>
 8000e24:	eddf 4a2e 	vldr	s9, [pc, #184]	@ 8000ee0 <__mulsc3+0x2c8>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bfb4      	ite	lt
 8000e2c:	eef0 1a64 	vmovlt.f32	s3, s9
 8000e30:	eef0 1a44 	vmovge.f32	s3, s8
 8000e34:	2301      	movs	r3, #1
 8000e36:	e71d      	b.n	8000c74 <__mulsc3+0x5c>
 8000e38:	ee10 3a10 	vmov	r3, s0
 8000e3c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000edc <__mulsc3+0x2c4>
 8000e40:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8000ee0 <__mulsc3+0x2c8>
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	bfb4      	ite	lt
 8000e48:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000e4c:	eeb0 0a47 	vmovge.f32	s0, s14
 8000e50:	e797      	b.n	8000d82 <__mulsc3+0x16a>
 8000e52:	ee11 3a10 	vmov	r3, s2
 8000e56:	ed9f 4a21 	vldr	s8, [pc, #132]	@ 8000edc <__mulsc3+0x2c4>
 8000e5a:	eddf 4a21 	vldr	s9, [pc, #132]	@ 8000ee0 <__mulsc3+0x2c8>
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bfb4      	ite	lt
 8000e62:	eeb0 1a64 	vmovlt.f32	s2, s9
 8000e66:	eeb0 1a44 	vmovge.f32	s2, s8
 8000e6a:	e7cf      	b.n	8000e0c <__mulsc3+0x1f4>
 8000e6c:	ee11 3a90 	vmov	r3, s3
 8000e70:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000edc <__mulsc3+0x2c4>
 8000e74:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8000ee0 <__mulsc3+0x2c8>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bfb4      	ite	lt
 8000e7c:	eef0 1a67 	vmovlt.f32	s3, s15
 8000e80:	eef0 1a47 	vmovge.f32	s3, s14
 8000e84:	e73b      	b.n	8000cfe <__mulsc3+0xe6>
 8000e86:	ee11 3a10 	vmov	r3, s2
 8000e8a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000edc <__mulsc3+0x2c4>
 8000e8e:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8000ee0 <__mulsc3+0x2c8>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bfb4      	ite	lt
 8000e96:	eeb0 1a67 	vmovlt.f32	s2, s15
 8000e9a:	eeb0 1a47 	vmovge.f32	s2, s14
 8000e9e:	e728      	b.n	8000cf2 <__mulsc3+0xda>
 8000ea0:	ee10 3a90 	vmov	r3, s1
 8000ea4:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000edc <__mulsc3+0x2c4>
 8000ea8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8000ee0 <__mulsc3+0x2c8>
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	bfb4      	ite	lt
 8000eb0:	eef0 0a67 	vmovlt.f32	s1, s15
 8000eb4:	eef0 0a47 	vmovge.f32	s1, s14
 8000eb8:	e715      	b.n	8000ce6 <__mulsc3+0xce>
 8000eba:	ee10 3a10 	vmov	r3, s0
 8000ebe:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000edc <__mulsc3+0x2c4>
 8000ec2:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8000ee0 <__mulsc3+0x2c8>
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bfb4      	ite	lt
 8000eca:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000ece:	eeb0 0a47 	vmovge.f32	s0, s14
 8000ed2:	e702      	b.n	8000cda <__mulsc3+0xc2>
 8000ed4:	7f7fffff 	.word	0x7f7fffff
 8000ed8:	7f800000 	.word	0x7f800000
 8000edc:	00000000 	.word	0x00000000
 8000ee0:	80000000 	.word	0x80000000

08000ee4 <__aeabi_f2ulz>:
 8000ee4:	b5d0      	push	{r4, r6, r7, lr}
 8000ee6:	f7ff fb2f 	bl	8000548 <__aeabi_f2d>
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__aeabi_f2ulz+0x38>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	4606      	mov	r6, r0
 8000ef0:	460f      	mov	r7, r1
 8000ef2:	f7ff fb81 	bl	80005f8 <__aeabi_dmul>
 8000ef6:	f7ff fe57 	bl	8000ba8 <__aeabi_d2uiz>
 8000efa:	4604      	mov	r4, r0
 8000efc:	f7ff fb02 	bl	8000504 <__aeabi_ui2d>
 8000f00:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <__aeabi_f2ulz+0x3c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f7ff fb78 	bl	80005f8 <__aeabi_dmul>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	4639      	mov	r1, r7
 8000f10:	f7ff f9ba 	bl	8000288 <__aeabi_dsub>
 8000f14:	f7ff fe48 	bl	8000ba8 <__aeabi_d2uiz>
 8000f18:	4621      	mov	r1, r4
 8000f1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f1c:	3df00000 	.word	0x3df00000
 8000f20:	41f00000 	.word	0x41f00000

08000f24 <__udivmoddi4>:
 8000f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f28:	9d08      	ldr	r5, [sp, #32]
 8000f2a:	460c      	mov	r4, r1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d14e      	bne.n	8000fce <__udivmoddi4+0xaa>
 8000f30:	4694      	mov	ip, r2
 8000f32:	458c      	cmp	ip, r1
 8000f34:	4686      	mov	lr, r0
 8000f36:	fab2 f282 	clz	r2, r2
 8000f3a:	d962      	bls.n	8001002 <__udivmoddi4+0xde>
 8000f3c:	b14a      	cbz	r2, 8000f52 <__udivmoddi4+0x2e>
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	4091      	lsls	r1, r2
 8000f44:	fa20 f303 	lsr.w	r3, r0, r3
 8000f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f4c:	4319      	orrs	r1, r3
 8000f4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f56:	fa1f f68c 	uxth.w	r6, ip
 8000f5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f62:	fb07 1114 	mls	r1, r7, r4, r1
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb04 f106 	mul.w	r1, r4, r6
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d90a      	bls.n	8000f88 <__udivmoddi4+0x64>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000f7a:	f080 8112 	bcs.w	80011a2 <__udivmoddi4+0x27e>
 8000f7e:	4299      	cmp	r1, r3
 8000f80:	f240 810f 	bls.w	80011a2 <__udivmoddi4+0x27e>
 8000f84:	3c02      	subs	r4, #2
 8000f86:	4463      	add	r3, ip
 8000f88:	1a59      	subs	r1, r3, r1
 8000f8a:	fa1f f38e 	uxth.w	r3, lr
 8000f8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f92:	fb07 1110 	mls	r1, r7, r0, r1
 8000f96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f9a:	fb00 f606 	mul.w	r6, r0, r6
 8000f9e:	429e      	cmp	r6, r3
 8000fa0:	d90a      	bls.n	8000fb8 <__udivmoddi4+0x94>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000faa:	f080 80fc 	bcs.w	80011a6 <__udivmoddi4+0x282>
 8000fae:	429e      	cmp	r6, r3
 8000fb0:	f240 80f9 	bls.w	80011a6 <__udivmoddi4+0x282>
 8000fb4:	4463      	add	r3, ip
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	1b9b      	subs	r3, r3, r6
 8000fba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	b11d      	cbz	r5, 8000fca <__udivmoddi4+0xa6>
 8000fc2:	40d3      	lsrs	r3, r2
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d905      	bls.n	8000fde <__udivmoddi4+0xba>
 8000fd2:	b10d      	cbz	r5, 8000fd8 <__udivmoddi4+0xb4>
 8000fd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4608      	mov	r0, r1
 8000fdc:	e7f5      	b.n	8000fca <__udivmoddi4+0xa6>
 8000fde:	fab3 f183 	clz	r1, r3
 8000fe2:	2900      	cmp	r1, #0
 8000fe4:	d146      	bne.n	8001074 <__udivmoddi4+0x150>
 8000fe6:	42a3      	cmp	r3, r4
 8000fe8:	d302      	bcc.n	8000ff0 <__udivmoddi4+0xcc>
 8000fea:	4290      	cmp	r0, r2
 8000fec:	f0c0 80f0 	bcc.w	80011d0 <__udivmoddi4+0x2ac>
 8000ff0:	1a86      	subs	r6, r0, r2
 8000ff2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	2d00      	cmp	r5, #0
 8000ffa:	d0e6      	beq.n	8000fca <__udivmoddi4+0xa6>
 8000ffc:	e9c5 6300 	strd	r6, r3, [r5]
 8001000:	e7e3      	b.n	8000fca <__udivmoddi4+0xa6>
 8001002:	2a00      	cmp	r2, #0
 8001004:	f040 8090 	bne.w	8001128 <__udivmoddi4+0x204>
 8001008:	eba1 040c 	sub.w	r4, r1, ip
 800100c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001010:	fa1f f78c 	uxth.w	r7, ip
 8001014:	2101      	movs	r1, #1
 8001016:	fbb4 f6f8 	udiv	r6, r4, r8
 800101a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800101e:	fb08 4416 	mls	r4, r8, r6, r4
 8001022:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001026:	fb07 f006 	mul.w	r0, r7, r6
 800102a:	4298      	cmp	r0, r3
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x11c>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f106 34ff 	add.w	r4, r6, #4294967295
 8001036:	d202      	bcs.n	800103e <__udivmoddi4+0x11a>
 8001038:	4298      	cmp	r0, r3
 800103a:	f200 80cd 	bhi.w	80011d8 <__udivmoddi4+0x2b4>
 800103e:	4626      	mov	r6, r4
 8001040:	1a1c      	subs	r4, r3, r0
 8001042:	fa1f f38e 	uxth.w	r3, lr
 8001046:	fbb4 f0f8 	udiv	r0, r4, r8
 800104a:	fb08 4410 	mls	r4, r8, r0, r4
 800104e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001052:	fb00 f707 	mul.w	r7, r0, r7
 8001056:	429f      	cmp	r7, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x148>
 800105a:	eb1c 0303 	adds.w	r3, ip, r3
 800105e:	f100 34ff 	add.w	r4, r0, #4294967295
 8001062:	d202      	bcs.n	800106a <__udivmoddi4+0x146>
 8001064:	429f      	cmp	r7, r3
 8001066:	f200 80b0 	bhi.w	80011ca <__udivmoddi4+0x2a6>
 800106a:	4620      	mov	r0, r4
 800106c:	1bdb      	subs	r3, r3, r7
 800106e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001072:	e7a5      	b.n	8000fc0 <__udivmoddi4+0x9c>
 8001074:	f1c1 0620 	rsb	r6, r1, #32
 8001078:	408b      	lsls	r3, r1
 800107a:	fa22 f706 	lsr.w	r7, r2, r6
 800107e:	431f      	orrs	r7, r3
 8001080:	fa20 fc06 	lsr.w	ip, r0, r6
 8001084:	fa04 f301 	lsl.w	r3, r4, r1
 8001088:	ea43 030c 	orr.w	r3, r3, ip
 800108c:	40f4      	lsrs	r4, r6
 800108e:	fa00 f801 	lsl.w	r8, r0, r1
 8001092:	0c38      	lsrs	r0, r7, #16
 8001094:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001098:	fbb4 fef0 	udiv	lr, r4, r0
 800109c:	fa1f fc87 	uxth.w	ip, r7
 80010a0:	fb00 441e 	mls	r4, r0, lr, r4
 80010a4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010a8:	fb0e f90c 	mul.w	r9, lr, ip
 80010ac:	45a1      	cmp	r9, r4
 80010ae:	fa02 f201 	lsl.w	r2, r2, r1
 80010b2:	d90a      	bls.n	80010ca <__udivmoddi4+0x1a6>
 80010b4:	193c      	adds	r4, r7, r4
 80010b6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80010ba:	f080 8084 	bcs.w	80011c6 <__udivmoddi4+0x2a2>
 80010be:	45a1      	cmp	r9, r4
 80010c0:	f240 8081 	bls.w	80011c6 <__udivmoddi4+0x2a2>
 80010c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80010c8:	443c      	add	r4, r7
 80010ca:	eba4 0409 	sub.w	r4, r4, r9
 80010ce:	fa1f f983 	uxth.w	r9, r3
 80010d2:	fbb4 f3f0 	udiv	r3, r4, r0
 80010d6:	fb00 4413 	mls	r4, r0, r3, r4
 80010da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010de:	fb03 fc0c 	mul.w	ip, r3, ip
 80010e2:	45a4      	cmp	ip, r4
 80010e4:	d907      	bls.n	80010f6 <__udivmoddi4+0x1d2>
 80010e6:	193c      	adds	r4, r7, r4
 80010e8:	f103 30ff 	add.w	r0, r3, #4294967295
 80010ec:	d267      	bcs.n	80011be <__udivmoddi4+0x29a>
 80010ee:	45a4      	cmp	ip, r4
 80010f0:	d965      	bls.n	80011be <__udivmoddi4+0x29a>
 80010f2:	3b02      	subs	r3, #2
 80010f4:	443c      	add	r4, r7
 80010f6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80010fa:	fba0 9302 	umull	r9, r3, r0, r2
 80010fe:	eba4 040c 	sub.w	r4, r4, ip
 8001102:	429c      	cmp	r4, r3
 8001104:	46ce      	mov	lr, r9
 8001106:	469c      	mov	ip, r3
 8001108:	d351      	bcc.n	80011ae <__udivmoddi4+0x28a>
 800110a:	d04e      	beq.n	80011aa <__udivmoddi4+0x286>
 800110c:	b155      	cbz	r5, 8001124 <__udivmoddi4+0x200>
 800110e:	ebb8 030e 	subs.w	r3, r8, lr
 8001112:	eb64 040c 	sbc.w	r4, r4, ip
 8001116:	fa04 f606 	lsl.w	r6, r4, r6
 800111a:	40cb      	lsrs	r3, r1
 800111c:	431e      	orrs	r6, r3
 800111e:	40cc      	lsrs	r4, r1
 8001120:	e9c5 6400 	strd	r6, r4, [r5]
 8001124:	2100      	movs	r1, #0
 8001126:	e750      	b.n	8000fca <__udivmoddi4+0xa6>
 8001128:	f1c2 0320 	rsb	r3, r2, #32
 800112c:	fa20 f103 	lsr.w	r1, r0, r3
 8001130:	fa0c fc02 	lsl.w	ip, ip, r2
 8001134:	fa24 f303 	lsr.w	r3, r4, r3
 8001138:	4094      	lsls	r4, r2
 800113a:	430c      	orrs	r4, r1
 800113c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001140:	fa00 fe02 	lsl.w	lr, r0, r2
 8001144:	fa1f f78c 	uxth.w	r7, ip
 8001148:	fbb3 f0f8 	udiv	r0, r3, r8
 800114c:	fb08 3110 	mls	r1, r8, r0, r3
 8001150:	0c23      	lsrs	r3, r4, #16
 8001152:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001156:	fb00 f107 	mul.w	r1, r0, r7
 800115a:	4299      	cmp	r1, r3
 800115c:	d908      	bls.n	8001170 <__udivmoddi4+0x24c>
 800115e:	eb1c 0303 	adds.w	r3, ip, r3
 8001162:	f100 36ff 	add.w	r6, r0, #4294967295
 8001166:	d22c      	bcs.n	80011c2 <__udivmoddi4+0x29e>
 8001168:	4299      	cmp	r1, r3
 800116a:	d92a      	bls.n	80011c2 <__udivmoddi4+0x29e>
 800116c:	3802      	subs	r0, #2
 800116e:	4463      	add	r3, ip
 8001170:	1a5b      	subs	r3, r3, r1
 8001172:	b2a4      	uxth	r4, r4
 8001174:	fbb3 f1f8 	udiv	r1, r3, r8
 8001178:	fb08 3311 	mls	r3, r8, r1, r3
 800117c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001180:	fb01 f307 	mul.w	r3, r1, r7
 8001184:	42a3      	cmp	r3, r4
 8001186:	d908      	bls.n	800119a <__udivmoddi4+0x276>
 8001188:	eb1c 0404 	adds.w	r4, ip, r4
 800118c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001190:	d213      	bcs.n	80011ba <__udivmoddi4+0x296>
 8001192:	42a3      	cmp	r3, r4
 8001194:	d911      	bls.n	80011ba <__udivmoddi4+0x296>
 8001196:	3902      	subs	r1, #2
 8001198:	4464      	add	r4, ip
 800119a:	1ae4      	subs	r4, r4, r3
 800119c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011a0:	e739      	b.n	8001016 <__udivmoddi4+0xf2>
 80011a2:	4604      	mov	r4, r0
 80011a4:	e6f0      	b.n	8000f88 <__udivmoddi4+0x64>
 80011a6:	4608      	mov	r0, r1
 80011a8:	e706      	b.n	8000fb8 <__udivmoddi4+0x94>
 80011aa:	45c8      	cmp	r8, r9
 80011ac:	d2ae      	bcs.n	800110c <__udivmoddi4+0x1e8>
 80011ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80011b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80011b6:	3801      	subs	r0, #1
 80011b8:	e7a8      	b.n	800110c <__udivmoddi4+0x1e8>
 80011ba:	4631      	mov	r1, r6
 80011bc:	e7ed      	b.n	800119a <__udivmoddi4+0x276>
 80011be:	4603      	mov	r3, r0
 80011c0:	e799      	b.n	80010f6 <__udivmoddi4+0x1d2>
 80011c2:	4630      	mov	r0, r6
 80011c4:	e7d4      	b.n	8001170 <__udivmoddi4+0x24c>
 80011c6:	46d6      	mov	lr, sl
 80011c8:	e77f      	b.n	80010ca <__udivmoddi4+0x1a6>
 80011ca:	4463      	add	r3, ip
 80011cc:	3802      	subs	r0, #2
 80011ce:	e74d      	b.n	800106c <__udivmoddi4+0x148>
 80011d0:	4606      	mov	r6, r0
 80011d2:	4623      	mov	r3, r4
 80011d4:	4608      	mov	r0, r1
 80011d6:	e70f      	b.n	8000ff8 <__udivmoddi4+0xd4>
 80011d8:	3e02      	subs	r6, #2
 80011da:	4463      	add	r3, ip
 80011dc:	e730      	b.n	8001040 <__udivmoddi4+0x11c>
 80011de:	bf00      	nop

080011e0 <__aeabi_idiv0>:
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop

080011e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ee:	2003      	movs	r0, #3
 80011f0:	f000 f9a4 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f4:	200f      	movs	r0, #15
 80011f6:	f000 f80d 	bl	8001214 <HAL_InitTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	e001      	b.n	800120a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001206:	f008 ffd7 	bl	800a1b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800120a:	79fb      	ldrb	r3, [r7, #7]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001220:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <HAL_InitTick+0x6c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d023      	beq.n	8001270 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001228:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_InitTick+0x70>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HAL_InitTick+0x6c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f9bf 	bl	80015c2 <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10f      	bne.n	800126a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d809      	bhi.n	8001264 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f000 f97b 	bl	8001552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800125c:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <HAL_InitTick+0x74>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e007      	b.n	8001274 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e004      	b.n	8001274 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	e001      	b.n	8001274 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000004 	.word	0x20000004
 8001284:	20000008 	.word	0x20000008
 8001288:	20000000 	.word	0x20000000

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	@ (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000004 	.word	0x20000004
 80012b0:	20000390 	.word	0x20000390

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000390 	.word	0x20000390

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_SuspendTick+0x1c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <HAL_SuspendTick+0x1c>)
 800131e:	f023 0302 	bic.w	r3, r3, #2
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <HAL_ResumeTick+0x1c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <HAL_ResumeTick+0x1c>)
 800133e:	f043 0302 	orr.w	r3, r3, #2
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	@ (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db12      	blt.n	800142c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	490a      	ldr	r1, [pc, #40]	@ (8001438 <__NVIC_DisableIRQ+0x44>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	3320      	adds	r3, #32
 800141c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001420:	f3bf 8f4f 	dsb	sy
}
 8001424:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001426:	f3bf 8f6f 	isb	sy
}
 800142a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	@ (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	@ (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	@ 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff05 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff1a 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff0d 	bl	80013b8 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff1d 	bl	80013f4 <__NVIC_DisableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff94 	bl	80014f8 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e098      	b.n	8001720 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b4d      	ldr	r3, [pc, #308]	@ (800172c <HAL_DMA_Init+0x150>)
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d80f      	bhi.n	800161a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b4b      	ldr	r3, [pc, #300]	@ (8001730 <HAL_DMA_Init+0x154>)
 8001602:	4413      	add	r3, r2
 8001604:	4a4b      	ldr	r2, [pc, #300]	@ (8001734 <HAL_DMA_Init+0x158>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	009a      	lsls	r2, r3, #2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a48      	ldr	r2, [pc, #288]	@ (8001738 <HAL_DMA_Init+0x15c>)
 8001616:	641a      	str	r2, [r3, #64]	@ 0x40
 8001618:	e00e      	b.n	8001638 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	4b46      	ldr	r3, [pc, #280]	@ (800173c <HAL_DMA_Init+0x160>)
 8001622:	4413      	add	r3, r2
 8001624:	4a43      	ldr	r2, [pc, #268]	@ (8001734 <HAL_DMA_Init+0x158>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	009a      	lsls	r2, r3, #2
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a42      	ldr	r2, [pc, #264]	@ (8001740 <HAL_DMA_Init+0x164>)
 8001636:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800164e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001652:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800165c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001692:	d039      	beq.n	8001708 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	4a27      	ldr	r2, [pc, #156]	@ (8001738 <HAL_DMA_Init+0x15c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d11a      	bne.n	80016d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800169e:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <HAL_DMA_Init+0x168>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	f003 031c 	and.w	r3, r3, #28
 80016aa:	210f      	movs	r1, #15
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4924      	ldr	r1, [pc, #144]	@ (8001744 <HAL_DMA_Init+0x168>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016b8:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <HAL_DMA_Init+0x168>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c4:	f003 031c 	and.w	r3, r3, #28
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	491d      	ldr	r1, [pc, #116]	@ (8001744 <HAL_DMA_Init+0x168>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
 80016d2:	e019      	b.n	8001708 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <HAL_DMA_Init+0x16c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016dc:	f003 031c 	and.w	r3, r3, #28
 80016e0:	210f      	movs	r1, #15
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	4917      	ldr	r1, [pc, #92]	@ (8001748 <HAL_DMA_Init+0x16c>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016ee:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <HAL_DMA_Init+0x16c>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6859      	ldr	r1, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	f003 031c 	and.w	r3, r3, #28
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	4911      	ldr	r1, [pc, #68]	@ (8001748 <HAL_DMA_Init+0x16c>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40020407 	.word	0x40020407
 8001730:	bffdfff8 	.word	0xbffdfff8
 8001734:	cccccccd 	.word	0xcccccccd
 8001738:	40020000 	.word	0x40020000
 800173c:	bffdfbf8 	.word	0xbffdfbf8
 8001740:	40020400 	.word	0x40020400
 8001744:	400200a8 	.word	0x400200a8
 8001748:	400204a8 	.word	0x400204a8

0800174c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e072      	b.n	8001844 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	4b36      	ldr	r3, [pc, #216]	@ (8001850 <HAL_DMA_DeInit+0x104>)
 8001776:	429a      	cmp	r2, r3
 8001778:	d80f      	bhi.n	800179a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4b34      	ldr	r3, [pc, #208]	@ (8001854 <HAL_DMA_DeInit+0x108>)
 8001782:	4413      	add	r3, r2
 8001784:	4a34      	ldr	r2, [pc, #208]	@ (8001858 <HAL_DMA_DeInit+0x10c>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	009a      	lsls	r2, r3, #2
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a31      	ldr	r2, [pc, #196]	@ (800185c <HAL_DMA_DeInit+0x110>)
 8001796:	641a      	str	r2, [r3, #64]	@ 0x40
 8001798:	e00e      	b.n	80017b8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001860 <HAL_DMA_DeInit+0x114>)
 80017a2:	4413      	add	r3, r2
 80017a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001858 <HAL_DMA_DeInit+0x10c>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	009a      	lsls	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001864 <HAL_DMA_DeInit+0x118>)
 80017b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c4:	f003 021c 	and.w	r2, r3, #28
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	2101      	movs	r1, #1
 80017ce:	fa01 f202 	lsl.w	r2, r1, r2
 80017d2:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	4a20      	ldr	r2, [pc, #128]	@ (800185c <HAL_DMA_DeInit+0x110>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d10d      	bne.n	80017fa <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017de:	4b22      	ldr	r3, [pc, #136]	@ (8001868 <HAL_DMA_DeInit+0x11c>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	f003 031c 	and.w	r3, r3, #28
 80017ea:	210f      	movs	r1, #15
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	491d      	ldr	r1, [pc, #116]	@ (8001868 <HAL_DMA_DeInit+0x11c>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
 80017f8:	e00c      	b.n	8001814 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017fa:	4b1c      	ldr	r3, [pc, #112]	@ (800186c <HAL_DMA_DeInit+0x120>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f003 031c 	and.w	r3, r3, #28
 8001806:	210f      	movs	r1, #15
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	4917      	ldr	r1, [pc, #92]	@ (800186c <HAL_DMA_DeInit+0x120>)
 8001810:	4013      	ands	r3, r2
 8001812:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	40020407 	.word	0x40020407
 8001854:	bffdfff8 	.word	0xbffdfff8
 8001858:	cccccccd 	.word	0xcccccccd
 800185c:	40020000 	.word	0x40020000
 8001860:	bffdfbf8 	.word	0xbffdfbf8
 8001864:	40020400 	.word	0x40020400
 8001868:	400200a8 	.word	0x400200a8
 800186c:	400204a8 	.word	0x400204a8

08001870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_DMA_Start_IT+0x20>
 800188c:	2302      	movs	r3, #2
 800188e:	e04b      	b.n	8001928 <HAL_DMA_Start_IT+0xb8>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d13a      	bne.n	800191a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f96d 	bl	8001ba8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 020e 	orr.w	r2, r2, #14
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e00f      	b.n	8001908 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0204 	bic.w	r2, r2, #4
 80018f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 020a 	orr.w	r2, r2, #10
 8001906:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e005      	b.n	8001926 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001922:	2302      	movs	r3, #2
 8001924:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001926:	7dfb      	ldrb	r3, [r7, #23]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d008      	beq.n	800195a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2204      	movs	r2, #4
 800194c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e022      	b.n	80019a0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 020e 	bic.w	r2, r2, #14
 8001968:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	f003 021c 	and.w	r2, r3, #28
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d005      	beq.n	80019d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2204      	movs	r2, #4
 80019c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	e029      	b.n	8001a24 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 020e 	bic.w	r2, r2, #14
 80019de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f4:	f003 021c 	and.w	r2, r3, #28
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	2101      	movs	r1, #1
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	4798      	blx	r3
    }
  }
  return status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f003 031c 	and.w	r3, r3, #28
 8001a4e:	2204      	movs	r2, #4
 8001a50:	409a      	lsls	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d026      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x7a>
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d021      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d107      	bne.n	8001a82 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0204 	bic.w	r2, r2, #4
 8001a80:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f003 021c 	and.w	r2, r3, #28
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	2104      	movs	r1, #4
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d071      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001aa6:	e06c      	b.n	8001b82 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aac:	f003 031c 	and.w	r3, r3, #28
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d02e      	beq.n	8001b1a <HAL_DMA_IRQHandler+0xec>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d029      	beq.n	8001b1a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10b      	bne.n	8001aec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 020a 	bic.w	r2, r2, #10
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af0:	f003 021c 	and.w	r2, r3, #28
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	2102      	movs	r1, #2
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d038      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b18:	e033      	b.n	8001b82 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	f003 031c 	and.w	r3, r3, #28
 8001b22:	2208      	movs	r2, #8
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d02a      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x156>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d025      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 020e 	bic.w	r2, r2, #14
 8001b46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4c:	f003 021c 	and.w	r2, r3, #28
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	2101      	movs	r1, #1
 8001b56:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d004      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
}
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b9a:	b2db      	uxtb	r3, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	f003 021c 	and.w	r2, r3, #28
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d108      	bne.n	8001bec <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bea:	e007      	b.n	8001bfc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	60da      	str	r2, [r3, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c16:	e154      	b.n	8001ec2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8146 	beq.w	8001ebc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d005      	beq.n	8001c48 <HAL_GPIO_Init+0x40>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d130      	bne.n	8001caa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 0201 	and.w	r2, r3, #1
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d017      	beq.n	8001ce6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d123      	bne.n	8001d3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	08da      	lsrs	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3208      	adds	r2, #8
 8001d34:	6939      	ldr	r1, [r7, #16]
 8001d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0203 	and.w	r2, r3, #3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80a0 	beq.w	8001ebc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7c:	4b58      	ldr	r3, [pc, #352]	@ (8001ee0 <HAL_GPIO_Init+0x2d8>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d80:	4a57      	ldr	r2, [pc, #348]	@ (8001ee0 <HAL_GPIO_Init+0x2d8>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d88:	4b55      	ldr	r3, [pc, #340]	@ (8001ee0 <HAL_GPIO_Init+0x2d8>)
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d94:	4a53      	ldr	r2, [pc, #332]	@ (8001ee4 <HAL_GPIO_Init+0x2dc>)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dbe:	d019      	beq.n	8001df4 <HAL_GPIO_Init+0x1ec>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a49      	ldr	r2, [pc, #292]	@ (8001ee8 <HAL_GPIO_Init+0x2e0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d013      	beq.n	8001df0 <HAL_GPIO_Init+0x1e8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a48      	ldr	r2, [pc, #288]	@ (8001eec <HAL_GPIO_Init+0x2e4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d00d      	beq.n	8001dec <HAL_GPIO_Init+0x1e4>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a47      	ldr	r2, [pc, #284]	@ (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d007      	beq.n	8001de8 <HAL_GPIO_Init+0x1e0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a46      	ldr	r2, [pc, #280]	@ (8001ef4 <HAL_GPIO_Init+0x2ec>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d101      	bne.n	8001de4 <HAL_GPIO_Init+0x1dc>
 8001de0:	2304      	movs	r3, #4
 8001de2:	e008      	b.n	8001df6 <HAL_GPIO_Init+0x1ee>
 8001de4:	2307      	movs	r3, #7
 8001de6:	e006      	b.n	8001df6 <HAL_GPIO_Init+0x1ee>
 8001de8:	2303      	movs	r3, #3
 8001dea:	e004      	b.n	8001df6 <HAL_GPIO_Init+0x1ee>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_Init+0x1ee>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_GPIO_Init+0x1ee>
 8001df4:	2300      	movs	r3, #0
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	f002 0203 	and.w	r2, r2, #3
 8001dfc:	0092      	lsls	r2, r2, #2
 8001dfe:	4093      	lsls	r3, r2
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e06:	4937      	ldr	r1, [pc, #220]	@ (8001ee4 <HAL_GPIO_Init+0x2dc>)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e14:	4b38      	ldr	r3, [pc, #224]	@ (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e38:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e62:	4a25      	ldr	r2, [pc, #148]	@ (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e68:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e92:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eb6:	4a10      	ldr	r2, [pc, #64]	@ (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f47f aea3 	bne.w	8001c18 <HAL_GPIO_Init+0x10>
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	48000400 	.word	0x48000400
 8001eec:	48000800 	.word	0x48000800
 8001ef0:	48000c00 	.word	0x48000c00
 8001ef4:	48001000 	.word	0x48001000
 8001ef8:	40010400 	.word	0x40010400

08001efc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f0a:	e0b7      	b.n	800207c <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80aa 	beq.w	8002076 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001f22:	4a5d      	ldr	r2, [pc, #372]	@ (8002098 <HAL_GPIO_DeInit+0x19c>)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3302      	adds	r3, #2
 8001f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	220f      	movs	r2, #15
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4013      	ands	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f4a:	d019      	beq.n	8001f80 <HAL_GPIO_DeInit+0x84>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a53      	ldr	r2, [pc, #332]	@ (800209c <HAL_GPIO_DeInit+0x1a0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <HAL_GPIO_DeInit+0x80>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a52      	ldr	r2, [pc, #328]	@ (80020a0 <HAL_GPIO_DeInit+0x1a4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00d      	beq.n	8001f78 <HAL_GPIO_DeInit+0x7c>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a51      	ldr	r2, [pc, #324]	@ (80020a4 <HAL_GPIO_DeInit+0x1a8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d007      	beq.n	8001f74 <HAL_GPIO_DeInit+0x78>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a50      	ldr	r2, [pc, #320]	@ (80020a8 <HAL_GPIO_DeInit+0x1ac>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d101      	bne.n	8001f70 <HAL_GPIO_DeInit+0x74>
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	e008      	b.n	8001f82 <HAL_GPIO_DeInit+0x86>
 8001f70:	2307      	movs	r3, #7
 8001f72:	e006      	b.n	8001f82 <HAL_GPIO_DeInit+0x86>
 8001f74:	2303      	movs	r3, #3
 8001f76:	e004      	b.n	8001f82 <HAL_GPIO_DeInit+0x86>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e002      	b.n	8001f82 <HAL_GPIO_DeInit+0x86>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_GPIO_DeInit+0x86>
 8001f80:	2300      	movs	r3, #0
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	f002 0203 	and.w	r2, r2, #3
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	4093      	lsls	r3, r2
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d132      	bne.n	8001ff8 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001f92:	4b46      	ldr	r3, [pc, #280]	@ (80020ac <HAL_GPIO_DeInit+0x1b0>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4944      	ldr	r1, [pc, #272]	@ (80020ac <HAL_GPIO_DeInit+0x1b0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001fa0:	4b42      	ldr	r3, [pc, #264]	@ (80020ac <HAL_GPIO_DeInit+0x1b0>)
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	4940      	ldr	r1, [pc, #256]	@ (80020ac <HAL_GPIO_DeInit+0x1b0>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001fae:	4b3f      	ldr	r3, [pc, #252]	@ (80020ac <HAL_GPIO_DeInit+0x1b0>)
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	493d      	ldr	r1, [pc, #244]	@ (80020ac <HAL_GPIO_DeInit+0x1b0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80020ac <HAL_GPIO_DeInit+0x1b0>)
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	4939      	ldr	r1, [pc, #228]	@ (80020ac <HAL_GPIO_DeInit+0x1b0>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001fda:	4a2f      	ldr	r2, [pc, #188]	@ (8002098 <HAL_GPIO_DeInit+0x19c>)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	482b      	ldr	r0, [pc, #172]	@ (8002098 <HAL_GPIO_DeInit+0x19c>)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2103      	movs	r1, #3
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	08da      	lsrs	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3208      	adds	r2, #8
 8002014:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	220f      	movs	r2, #15
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	08d2      	lsrs	r2, r2, #3
 800202c:	4019      	ands	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3208      	adds	r2, #8
 8002032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2103      	movs	r1, #3
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	401a      	ands	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	2101      	movs	r1, #1
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2103      	movs	r1, #3
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	401a      	ands	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	f47f af41 	bne.w	8001f0c <HAL_GPIO_DeInit+0x10>
  }
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40010000 	.word	0x40010000
 800209c:	48000400 	.word	0x48000400
 80020a0:	48000800 	.word	0x48000800
 80020a4:	48000c00 	.word	0x48000c00
 80020a8:	48001000 	.word	0x48001000
 80020ac:	40010400 	.word	0x40010400

080020b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	887b      	ldrh	r3, [r7, #2]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	e001      	b.n	80020d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
 80020ec:	4613      	mov	r3, r2
 80020ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f0:	787b      	ldrb	r3, [r7, #1]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800211a:	4b08      	ldr	r3, [pc, #32]	@ (800213c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002126:	4a05      	ldr	r2, [pc, #20]	@ (800213c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f806 	bl	8002140 <HAL_GPIO_EXTI_Callback>
  }
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40010400 	.word	0x40010400

08002140 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e08d      	b.n	8002284 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d106      	bne.n	8002182 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f008 f83f 	bl	800a200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2224      	movs	r2, #36	@ 0x24
 8002186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d107      	bne.n	80021d0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	e006      	b.n	80021de <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d108      	bne.n	80021f8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	e007      	b.n	8002208 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002206:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800221a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800222a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69d9      	ldr	r1, [r3, #28]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1a      	ldr	r2, [r3, #32]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e021      	b.n	80022e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2224      	movs	r2, #36	@ 0x24
 80022a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f008 f804 	bl	800a2c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d10d      	bne.n	800231c <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2228      	movs	r2, #40	@ 0x28
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a07      	ldr	r2, [pc, #28]	@ (8002328 <HAL_I2C_EnableListen_IT+0x3c>)
 800230c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800230e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f001 f9c2 	bl	800369c <I2C_Enable_IRQ>

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e000      	b.n	800231e <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
  }
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	08002431 	.word	0x08002431

0800232c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
  }
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
 80023bc:	4613      	mov	r3, r2
 80023be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002440:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <I2C_Slave_ISR_IT+0x24>
 8002450:	2302      	movs	r3, #2
 8002452:	e0e2      	b.n	800261a <I2C_Slave_ISR_IT+0x1ea>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002470:	6939      	ldr	r1, [r7, #16]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fdce 	bl	8003014 <I2C_ITSlaveCplt>
 8002478:	e0ca      	b.n	8002610 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d04b      	beq.n	800251c <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800248a:	2b00      	cmp	r3, #0
 800248c:	d046      	beq.n	800251c <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d128      	bne.n	80024ea <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b28      	cmp	r3, #40	@ 0x28
 80024a2:	d108      	bne.n	80024b6 <I2C_Slave_ISR_IT+0x86>
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024aa:	d104      	bne.n	80024b6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80024ac:	6939      	ldr	r1, [r7, #16]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 ff14 	bl	80032dc <I2C_ITListenCplt>
 80024b4:	e031      	b.n	800251a <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b29      	cmp	r3, #41	@ 0x29
 80024c0:	d10e      	bne.n	80024e0 <I2C_Slave_ISR_IT+0xb0>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024c8:	d00a      	beq.n	80024e0 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2210      	movs	r2, #16
 80024d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f001 f86d 	bl	80035b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fc77 	bl	8002dcc <I2C_ITSlaveSeqCplt>
 80024de:	e01c      	b.n	800251a <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2210      	movs	r2, #16
 80024e6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80024e8:	e08f      	b.n	800260a <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2210      	movs	r2, #16
 80024f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	f043 0204 	orr.w	r2, r3, #4
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <I2C_Slave_ISR_IT+0xdc>
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800250a:	d17e      	bne.n	800260a <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	4619      	mov	r1, r3
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 ff36 	bl	8003384 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002518:	e077      	b.n	800260a <I2C_Slave_ISR_IT+0x1da>
 800251a:	e076      	b.n	800260a <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b00      	cmp	r3, #0
 8002524:	d02f      	beq.n	8002586 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02a      	beq.n	8002586 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d018      	beq.n	800256c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d14b      	bne.n	800260e <I2C_Slave_ISR_IT+0x1de>
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800257c:	d047      	beq.n	800260e <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fc24 	bl	8002dcc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002584:	e043      	b.n	800260e <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800259a:	6939      	ldr	r1, [r7, #16]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fb54 	bl	8002c4a <I2C_ITAddrCplt>
 80025a2:	e035      	b.n	8002610 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d030      	beq.n	8002610 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d02b      	beq.n	8002610 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d018      	beq.n	80025f4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80025f2:	e00d      	b.n	8002610 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025fa:	d002      	beq.n	8002602 <I2C_Slave_ISR_IT+0x1d2>
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fbe2 	bl	8002dcc <I2C_ITSlaveSeqCplt>
 8002608:	e002      	b.n	8002610 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800260e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b088      	sub	sp, #32
 8002626:	af02      	add	r7, sp, #8
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <I2C_Master_ISR_DMA+0x1a>
 8002638:	2302      	movs	r3, #2
 800263a:	e0e7      	b.n	800280c <I2C_Master_ISR_DMA+0x1ea>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002654:	2b00      	cmp	r3, #0
 8002656:	d011      	beq.n	800267c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2210      	movs	r2, #16
 800265e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002664:	f043 0204 	orr.w	r2, r3, #4
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800266c:	2120      	movs	r1, #32
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f001 f814 	bl	800369c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 ff9c 	bl	80035b2 <I2C_Flush_TXDR>
 800267a:	e0c2      	b.n	8002802 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002682:	2b00      	cmp	r3, #0
 8002684:	d07f      	beq.n	8002786 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800268c:	2b00      	cmp	r3, #0
 800268e:	d07a      	beq.n	8002786 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800269e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d05c      	beq.n	8002764 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2bff      	cmp	r3, #255	@ 0xff
 80026c0:	d914      	bls.n	80026ec <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	0c1b      	lsrs	r3, r3, #16
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d103      	bne.n	80026de <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
 80026dc:	e002      	b.n	80026e4 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	22ff      	movs	r2, #255	@ 0xff
 80026e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80026e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e010      	b.n	800270e <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026fe:	d003      	beq.n	8002708 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	e002      	b.n	800270e <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002708:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800270c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002712:	b2da      	uxtb	r2, r3
 8002714:	8a79      	ldrh	r1, [r7, #18]
 8002716:	2300      	movs	r3, #0
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 ff8b 	bl	8003638 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b22      	cmp	r3, #34	@ 0x22
 800273e:	d108      	bne.n	8002752 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800274e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002750:	e057      	b.n	8002802 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002760:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002762:	e04e      	b.n	8002802 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002772:	d003      	beq.n	800277c <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 faec 	bl	8002d52 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800277a:	e042      	b.n	8002802 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800277c:	2140      	movs	r1, #64	@ 0x40
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fe00 	bl	8003384 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002784:	e03d      	b.n	8002802 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278c:	2b00      	cmp	r3, #0
 800278e:	d028      	beq.n	80027e2 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002796:	2b00      	cmp	r3, #0
 8002798:	d023      	beq.n	80027e2 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d119      	bne.n	80027d8 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027b2:	d025      	beq.n	8002800 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027bc:	d108      	bne.n	80027d0 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027cc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80027ce:	e017      	b.n	8002800 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fabe 	bl	8002d52 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80027d6:	e013      	b.n	8002800 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80027d8:	2140      	movs	r1, #64	@ 0x40
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fdd2 	bl	8003384 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027e0:	e00e      	b.n	8002800 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fb43 	bl	8002e84 <I2C_ITMasterCplt>
 80027fe:	e000      	b.n	8002802 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8002800:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002820:	4b90      	ldr	r3, [pc, #576]	@ (8002a64 <I2C_Mem_ISR_DMA+0x250>)
 8002822:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <I2C_Mem_ISR_DMA+0x1e>
 800282e:	2302      	movs	r3, #2
 8002830:	e12f      	b.n	8002a92 <I2C_Mem_ISR_DMA+0x27e>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d016      	beq.n	8002872 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800284a:	2b00      	cmp	r3, #0
 800284c:	d011      	beq.n	8002872 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2210      	movs	r2, #16
 8002854:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285a:	f043 0204 	orr.w	r2, r3, #4
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002862:	2120      	movs	r1, #32
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 ff19 	bl	800369c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fea1 	bl	80035b2 <I2C_Flush_TXDR>
 8002870:	e10a      	b.n	8002a88 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00e      	beq.n	800289a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800288e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f04f 32ff 	mov.w	r2, #4294967295
 8002896:	651a      	str	r2, [r3, #80]	@ 0x50
 8002898:	e0f6      	b.n	8002a88 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d06d      	beq.n	8002980 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d068      	beq.n	8002980 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028ae:	2101      	movs	r1, #1
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 ff77 	bl	80037a4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80028b6:	2110      	movs	r1, #16
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 feef 	bl	800369c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d056      	beq.n	8002976 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2bff      	cmp	r3, #255	@ 0xff
 80028d0:	d91e      	bls.n	8002910 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d103      	bne.n	80028ee <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2201      	movs	r2, #1
 80028ea:	851a      	strh	r2, [r3, #40]	@ 0x28
 80028ec:	e002      	b.n	80028f4 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	22ff      	movs	r2, #255	@ 0xff
 80028f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f8:	b299      	uxth	r1, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	2300      	movs	r3, #0
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fe95 	bl	8003638 <I2C_TransferConfig>
 800290e:	e011      	b.n	8002934 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	b299      	uxth	r1, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002924:	b2da      	uxtb	r2, r3
 8002926:	2300      	movs	r3, #0
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fe82 	bl	8003638 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b22      	cmp	r3, #34	@ 0x22
 8002950:	d108      	bne.n	8002964 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002960:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002962:	e091      	b.n	8002a88 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002972:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002974:	e088      	b.n	8002a88 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002976:	2140      	movs	r1, #64	@ 0x40
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fd03 	bl	8003384 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800297e:	e083      	b.n	8002a88 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d070      	beq.n	8002a6c <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002990:	2b00      	cmp	r3, #0
 8002992:	d06b      	beq.n	8002a6c <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002994:	2101      	movs	r1, #1
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 ff04 	bl	80037a4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800299c:	2110      	movs	r1, #16
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fe7c 	bl	800369c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b22      	cmp	r3, #34	@ 0x22
 80029ae:	d101      	bne.n	80029b4 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 80029b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a68 <I2C_Mem_ISR_DMA+0x254>)
 80029b2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2bff      	cmp	r3, #255	@ 0xff
 80029bc:	d91e      	bls.n	80029fc <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d103      	bne.n	80029da <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80029d8:	e002      	b.n	80029e0 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	22ff      	movs	r2, #255	@ 0xff
 80029de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e4:	b299      	uxth	r1, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fe1f 	bl	8003638 <I2C_TransferConfig>
 80029fa:	e011      	b.n	8002a20 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0a:	b299      	uxth	r1, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fe0c 	bl	8003638 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b22      	cmp	r3, #34	@ 0x22
 8002a3c:	d108      	bne.n	8002a50 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a4c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a4e:	e01b      	b.n	8002a88 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a5e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a60:	e012      	b.n	8002a88 <I2C_Mem_ISR_DMA+0x274>
 8002a62:	bf00      	nop
 8002a64:	80002000 	.word	0x80002000
 8002a68:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f9fe 	bl	8002e84 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop

08002a9c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aac:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <I2C_Slave_ISR_DMA+0x24>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e0c0      	b.n	8002c42 <I2C_Slave_ISR_DMA+0x1a6>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d004      	beq.n	8002ae6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fa98 	bl	8003014 <I2C_ITSlaveCplt>
 8002ae4:	e0a8      	b.n	8002c38 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8095 	beq.w	8002c1c <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 808f 	beq.w	8002c1c <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d104      	bne.n	8002b12 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d07d      	beq.n	8002c0e <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00c      	beq.n	8002b34 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002b30:	2301      	movs	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00c      	beq.n	8002b56 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d128      	bne.n	8002bae <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b28      	cmp	r3, #40	@ 0x28
 8002b66:	d108      	bne.n	8002b7a <I2C_Slave_ISR_DMA+0xde>
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b6e:	d104      	bne.n	8002b7a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fbb2 	bl	80032dc <I2C_ITListenCplt>
 8002b78:	e048      	b.n	8002c0c <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b29      	cmp	r3, #41	@ 0x29
 8002b84:	d10e      	bne.n	8002ba4 <I2C_Slave_ISR_DMA+0x108>
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b8c:	d00a      	beq.n	8002ba4 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2210      	movs	r2, #16
 8002b94:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fd0b 	bl	80035b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f915 	bl	8002dcc <I2C_ITSlaveSeqCplt>
 8002ba2:	e033      	b.n	8002c0c <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2210      	movs	r2, #16
 8002baa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002bac:	e034      	b.n	8002c18 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	f043 0204 	orr.w	r2, r3, #4
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <I2C_Slave_ISR_DMA+0x13c>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bd6:	d11f      	bne.n	8002c18 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bd8:	7dfb      	ldrb	r3, [r7, #23]
 8002bda:	2b21      	cmp	r3, #33	@ 0x21
 8002bdc:	d002      	beq.n	8002be4 <I2C_Slave_ISR_DMA+0x148>
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	2b29      	cmp	r3, #41	@ 0x29
 8002be2:	d103      	bne.n	8002bec <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2221      	movs	r2, #33	@ 0x21
 8002be8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bea:	e008      	b.n	8002bfe <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	2b22      	cmp	r3, #34	@ 0x22
 8002bf0:	d002      	beq.n	8002bf8 <I2C_Slave_ISR_DMA+0x15c>
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
 8002bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bf6:	d102      	bne.n	8002bfe <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2222      	movs	r2, #34	@ 0x22
 8002bfc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c02:	4619      	mov	r1, r3
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fbbd 	bl	8003384 <I2C_ITError>
      if (treatdmanack == 1U)
 8002c0a:	e005      	b.n	8002c18 <I2C_Slave_ISR_DMA+0x17c>
 8002c0c:	e004      	b.n	8002c18 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2210      	movs	r2, #16
 8002c14:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c16:	e00f      	b.n	8002c38 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002c18:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002c1a:	e00d      	b.n	8002c38 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f809 	bl	8002c4a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c60:	2b28      	cmp	r3, #40	@ 0x28
 8002c62:	d16a      	bne.n	8002d3a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002c82:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c90:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002c9e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d138      	bne.n	8002d1a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002ca8:	897b      	ldrh	r3, [r7, #10]
 8002caa:	09db      	lsrs	r3, r3, #7
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	89bb      	ldrh	r3, [r7, #12]
 8002cb0:	4053      	eors	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f003 0306 	and.w	r3, r3, #6
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d11c      	bne.n	8002cf6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002cbc:	897b      	ldrh	r3, [r7, #10]
 8002cbe:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d13b      	bne.n	8002d4a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2208      	movs	r2, #8
 8002cde:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ce8:	89ba      	ldrh	r2, [r7, #12]
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff fb5e 	bl	80023b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002cf4:	e029      	b.n	8002d4a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002cf6:	893b      	ldrh	r3, [r7, #8]
 8002cf8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002cfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fd50 	bl	80037a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d0c:	89ba      	ldrh	r2, [r7, #12]
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff fb4c 	bl	80023b0 <HAL_I2C_AddrCallback>
}
 8002d18:	e017      	b.n	8002d4a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fd40 	bl	80037a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d2c:	89ba      	ldrh	r2, [r7, #12]
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	4619      	mov	r1, r3
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff fb3c 	bl	80023b0 <HAL_I2C_AddrCallback>
}
 8002d38:	e007      	b.n	8002d4a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2208      	movs	r2, #8
 8002d40:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b21      	cmp	r3, #33	@ 0x21
 8002d6c:	d115      	bne.n	8002d9a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2211      	movs	r2, #17
 8002d7a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d82:	2101      	movs	r1, #1
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fd0d 	bl	80037a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fae4 	bl	8002360 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d98:	e014      	b.n	8002dc4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2212      	movs	r2, #18
 8002da6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002dae:	2102      	movs	r1, #2
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fcf7 	bl	80037a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fad8 	bl	8002374 <HAL_I2C_MasterRxCpltCallback>
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e00c      	b.n	8002e1a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e18:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b29      	cmp	r3, #41	@ 0x29
 8002e24:	d112      	bne.n	8002e4c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2228      	movs	r2, #40	@ 0x28
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2221      	movs	r2, #33	@ 0x21
 8002e32:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e34:	2101      	movs	r1, #1
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fcb4 	bl	80037a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff fa9f 	bl	8002388 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e4a:	e017      	b.n	8002e7c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e56:	d111      	bne.n	8002e7c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2228      	movs	r2, #40	@ 0x28
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2222      	movs	r2, #34	@ 0x22
 8002e64:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e66:	2102      	movs	r1, #2
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fc9b 	bl	80037a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff fa90 	bl	800239c <HAL_I2C_SlaveRxCpltCallback>
}
 8002e7c:	bf00      	nop
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2220      	movs	r2, #32
 8002e98:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b21      	cmp	r3, #33	@ 0x21
 8002ea4:	d107      	bne.n	8002eb6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fc7b 	bl	80037a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2211      	movs	r2, #17
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eb4:	e00c      	b.n	8002ed0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b22      	cmp	r3, #34	@ 0x22
 8002ec0:	d106      	bne.n	8002ed0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fc6d 	bl	80037a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2212      	movs	r2, #18
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b4c      	ldr	r3, [pc, #304]	@ (800300c <I2C_ITMasterCplt+0x188>)
 8002edc:	400b      	ands	r3, r1
 8002ede:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a49      	ldr	r2, [pc, #292]	@ (8003010 <I2C_ITMasterCplt+0x18c>)
 8002eea:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2210      	movs	r2, #16
 8002efc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	f043 0204 	orr.w	r2, r3, #4
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b60      	cmp	r3, #96	@ 0x60
 8002f14:	d10a      	bne.n	8002f2c <I2C_ITMasterCplt+0xa8>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fb40 	bl	80035b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b60      	cmp	r3, #96	@ 0x60
 8002f42:	d002      	beq.n	8002f4a <I2C_ITMasterCplt+0xc6>
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d006      	beq.n	8002f58 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fa17 	bl	8003384 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f56:	e054      	b.n	8003002 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b21      	cmp	r3, #33	@ 0x21
 8002f62:	d124      	bne.n	8002fae <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b40      	cmp	r3, #64	@ 0x40
 8002f7c:	d10b      	bne.n	8002f96 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fa26 	bl	80023e0 <HAL_I2C_MemTxCpltCallback>
}
 8002f94:	e035      	b.n	8003002 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff f9da 	bl	8002360 <HAL_I2C_MasterTxCpltCallback>
}
 8002fac:	e029      	b.n	8003002 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b22      	cmp	r3, #34	@ 0x22
 8002fb8:	d123      	bne.n	8003002 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b40      	cmp	r3, #64	@ 0x40
 8002fd2:	d10b      	bne.n	8002fec <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff fa05 	bl	80023f4 <HAL_I2C_MemRxCpltCallback>
}
 8002fea:	e00a      	b.n	8003002 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff f9b9 	bl	8002374 <HAL_I2C_MasterRxCpltCallback>
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	fe00e800 	.word	0xfe00e800
 8003010:	ffff0000 	.word	0xffff0000

08003014 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003036:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2220      	movs	r2, #32
 800303e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003040:	7afb      	ldrb	r3, [r7, #11]
 8003042:	2b21      	cmp	r3, #33	@ 0x21
 8003044:	d002      	beq.n	800304c <I2C_ITSlaveCplt+0x38>
 8003046:	7afb      	ldrb	r3, [r7, #11]
 8003048:	2b29      	cmp	r3, #41	@ 0x29
 800304a:	d108      	bne.n	800305e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800304c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fba7 	bl	80037a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2221      	movs	r2, #33	@ 0x21
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
 800305c:	e019      	b.n	8003092 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800305e:	7afb      	ldrb	r3, [r7, #11]
 8003060:	2b22      	cmp	r3, #34	@ 0x22
 8003062:	d002      	beq.n	800306a <I2C_ITSlaveCplt+0x56>
 8003064:	7afb      	ldrb	r3, [r7, #11]
 8003066:	2b2a      	cmp	r3, #42	@ 0x2a
 8003068:	d108      	bne.n	800307c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800306a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fb98 	bl	80037a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2222      	movs	r2, #34	@ 0x22
 8003078:	631a      	str	r2, [r3, #48]	@ 0x30
 800307a:	e00a      	b.n	8003092 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800307c:	7afb      	ldrb	r3, [r7, #11]
 800307e:	2b28      	cmp	r3, #40	@ 0x28
 8003080:	d107      	bne.n	8003092 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003082:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fb8c 	bl	80037a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030a0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b89      	ldr	r3, [pc, #548]	@ (80032d4 <I2C_ITSlaveCplt+0x2c0>)
 80030ae:	400b      	ands	r3, r1
 80030b0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fa7d 	bl	80035b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d013      	beq.n	80030ea <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01f      	beq.n	800311a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030e8:	e017      	b.n	800311a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d012      	beq.n	800311a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003102:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d006      	beq.n	800311a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	b29a      	uxth	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0304 	bic.w	r3, r3, #4
 800312a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00c      	beq.n	8003166 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003174:	f043 0204 	orr.w	r2, r3, #4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	d049      	beq.n	800321a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800318c:	2b00      	cmp	r3, #0
 800318e:	d044      	beq.n	800321a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d128      	bne.n	80031ec <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b28      	cmp	r3, #40	@ 0x28
 80031a4:	d108      	bne.n	80031b8 <I2C_ITSlaveCplt+0x1a4>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031ac:	d104      	bne.n	80031b8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80031ae:	6979      	ldr	r1, [r7, #20]
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f893 	bl	80032dc <I2C_ITListenCplt>
 80031b6:	e030      	b.n	800321a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b29      	cmp	r3, #41	@ 0x29
 80031c2:	d10e      	bne.n	80031e2 <I2C_ITSlaveCplt+0x1ce>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031ca:	d00a      	beq.n	80031e2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2210      	movs	r2, #16
 80031d2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f9ec 	bl	80035b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fdf6 	bl	8002dcc <I2C_ITSlaveSeqCplt>
 80031e0:	e01b      	b.n	800321a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2210      	movs	r2, #16
 80031e8:	61da      	str	r2, [r3, #28]
 80031ea:	e016      	b.n	800321a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2210      	movs	r2, #16
 80031f2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f8:	f043 0204 	orr.w	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <I2C_ITSlaveCplt+0x1fa>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800320c:	d105      	bne.n	800321a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f8b5 	bl	8003384 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322c:	2b00      	cmp	r3, #0
 800322e:	d010      	beq.n	8003252 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003234:	4619      	mov	r1, r3
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f8a4 	bl	8003384 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b28      	cmp	r3, #40	@ 0x28
 8003246:	d141      	bne.n	80032cc <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003248:	6979      	ldr	r1, [r7, #20]
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f846 	bl	80032dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003250:	e03c      	b.n	80032cc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003256:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800325a:	d014      	beq.n	8003286 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fdb5 	bl	8002dcc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1c      	ldr	r2, [pc, #112]	@ (80032d8 <I2C_ITSlaveCplt+0x2c4>)
 8003266:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff f8a4 	bl	80023cc <HAL_I2C_ListenCpltCallback>
}
 8003284:	e022      	b.n	80032cc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b22      	cmp	r3, #34	@ 0x22
 8003290:	d10e      	bne.n	80032b0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff f877 	bl	800239c <HAL_I2C_SlaveRxCpltCallback>
}
 80032ae:	e00d      	b.n	80032cc <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff f85e 	bl	8002388 <HAL_I2C_SlaveTxCpltCallback>
}
 80032cc:	bf00      	nop
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	fe00e800 	.word	0xfe00e800
 80032d8:	ffff0000 	.word	0xffff0000

080032dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a25      	ldr	r2, [pc, #148]	@ (8003380 <I2C_ITListenCplt+0xa4>)
 80032ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d022      	beq.n	8003358 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003350:	f043 0204 	orr.w	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003358:	f248 0103 	movw	r1, #32771	@ 0x8003
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fa21 	bl	80037a4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2210      	movs	r2, #16
 8003368:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff f82a 	bl	80023cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	ffff0000 	.word	0xffff0000

08003384 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003394:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a6d      	ldr	r2, [pc, #436]	@ (8003558 <I2C_ITError+0x1d4>)
 80033a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b28      	cmp	r3, #40	@ 0x28
 80033ba:	d005      	beq.n	80033c8 <I2C_ITError+0x44>
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b29      	cmp	r3, #41	@ 0x29
 80033c0:	d002      	beq.n	80033c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80033c6:	d10b      	bne.n	80033e0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033c8:	2103      	movs	r1, #3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f9ea 	bl	80037a4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2228      	movs	r2, #40	@ 0x28
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a60      	ldr	r2, [pc, #384]	@ (800355c <I2C_ITError+0x1d8>)
 80033dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80033de:	e030      	b.n	8003442 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033e0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f9dd 	bl	80037a4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f8e1 	bl	80035b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b60      	cmp	r3, #96	@ 0x60
 80033fa:	d01f      	beq.n	800343c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b20      	cmp	r3, #32
 8003410:	d114      	bne.n	800343c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b10      	cmp	r3, #16
 800341e:	d109      	bne.n	8003434 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2210      	movs	r2, #16
 8003426:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342c:	f043 0204 	orr.w	r2, r3, #4
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2220      	movs	r2, #32
 800343a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	2b00      	cmp	r3, #0
 800344e:	d039      	beq.n	80034c4 <I2C_ITError+0x140>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b11      	cmp	r3, #17
 8003454:	d002      	beq.n	800345c <I2C_ITError+0xd8>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b21      	cmp	r3, #33	@ 0x21
 800345a:	d133      	bne.n	80034c4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800346a:	d107      	bne.n	800347c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800347a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe fb83 	bl	8001b8c <HAL_DMA_GetState>
 8003486:	4603      	mov	r3, r0
 8003488:	2b01      	cmp	r3, #1
 800348a:	d017      	beq.n	80034bc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003490:	4a33      	ldr	r2, [pc, #204]	@ (8003560 <I2C_ITError+0x1dc>)
 8003492:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe fa83 	bl	80019ac <HAL_DMA_Abort_IT>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d04d      	beq.n	8003548 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034b6:	4610      	mov	r0, r2
 80034b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034ba:	e045      	b.n	8003548 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f851 	bl	8003564 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034c2:	e041      	b.n	8003548 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d039      	beq.n	8003540 <I2C_ITError+0x1bc>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b12      	cmp	r3, #18
 80034d0:	d002      	beq.n	80034d8 <I2C_ITError+0x154>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b22      	cmp	r3, #34	@ 0x22
 80034d6:	d133      	bne.n	8003540 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034e6:	d107      	bne.n	80034f8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe fb45 	bl	8001b8c <HAL_DMA_GetState>
 8003502:	4603      	mov	r3, r0
 8003504:	2b01      	cmp	r3, #1
 8003506:	d017      	beq.n	8003538 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350c:	4a14      	ldr	r2, [pc, #80]	@ (8003560 <I2C_ITError+0x1dc>)
 800350e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351c:	4618      	mov	r0, r3
 800351e:	f7fe fa45 	bl	80019ac <HAL_DMA_Abort_IT>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d011      	beq.n	800354c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003532:	4610      	mov	r0, r2
 8003534:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003536:	e009      	b.n	800354c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f813 	bl	8003564 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800353e:	e005      	b.n	800354c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f80f 	bl	8003564 <I2C_TreatErrorCallback>
  }
}
 8003546:	e002      	b.n	800354e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003548:	bf00      	nop
 800354a:	e000      	b.n	800354e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800354c:	bf00      	nop
}
 800354e:	bf00      	nop
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	ffff0000 	.word	0xffff0000
 800355c:	08002431 	.word	0x08002431
 8003560:	080035fb 	.word	0x080035fb

08003564 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b60      	cmp	r3, #96	@ 0x60
 8003576:	d10e      	bne.n	8003596 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe ff44 	bl	800241c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003594:	e009      	b.n	80035aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fe ff2f 	bl	8002408 <HAL_I2C_ErrorCallback>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d103      	bne.n	80035d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2200      	movs	r2, #0
 80035ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d007      	beq.n	80035ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	619a      	str	r2, [r3, #24]
  }
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003614:	2200      	movs	r2, #0
 8003616:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003624:	2200      	movs	r2, #0
 8003626:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff ff9b 	bl	8003564 <I2C_TreatErrorCallback>
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	817b      	strh	r3, [r7, #10]
 8003646:	4613      	mov	r3, r2
 8003648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800364a:	897b      	ldrh	r3, [r7, #10]
 800364c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003650:	7a7b      	ldrb	r3, [r7, #9]
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003658:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	4313      	orrs	r3, r2
 8003662:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003666:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	0d5b      	lsrs	r3, r3, #21
 8003672:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003676:	4b08      	ldr	r3, [pc, #32]	@ (8003698 <I2C_TransferConfig+0x60>)
 8003678:	430b      	orrs	r3, r1
 800367a:	43db      	mvns	r3, r3
 800367c:	ea02 0103 	and.w	r1, r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	03ff63ff 	.word	0x03ff63ff

0800369c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b0:	4a39      	ldr	r2, [pc, #228]	@ (8003798 <I2C_Enable_IRQ+0xfc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d032      	beq.n	800371c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80036ba:	4a38      	ldr	r2, [pc, #224]	@ (800379c <I2C_Enable_IRQ+0x100>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d02d      	beq.n	800371c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80036c4:	4a36      	ldr	r2, [pc, #216]	@ (80037a0 <I2C_Enable_IRQ+0x104>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d028      	beq.n	800371c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	da03      	bge.n	80036da <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80036d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80036da:	887b      	ldrh	r3, [r7, #2]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80036ea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80036ec:	887b      	ldrh	r3, [r7, #2]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80036fc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036fe:	887b      	ldrh	r3, [r7, #2]
 8003700:	2b10      	cmp	r3, #16
 8003702:	d103      	bne.n	800370c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800370a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800370c:	887b      	ldrh	r3, [r7, #2]
 800370e:	2b20      	cmp	r3, #32
 8003710:	d133      	bne.n	800377a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f043 0320 	orr.w	r3, r3, #32
 8003718:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800371a:	e02e      	b.n	800377a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800371c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003720:	2b00      	cmp	r3, #0
 8003722:	da03      	bge.n	800372c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800372a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800373c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800374e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003750:	887b      	ldrh	r3, [r7, #2]
 8003752:	2b10      	cmp	r3, #16
 8003754:	d103      	bne.n	800375e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800375c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	2b20      	cmp	r3, #32
 8003762:	d103      	bne.n	800376c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800376a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	2b40      	cmp	r3, #64	@ 0x40
 8003770:	d103      	bne.n	800377a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003778:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	08002623 	.word	0x08002623
 800379c:	08002a9d 	.word	0x08002a9d
 80037a0:	08002815 	.word	0x08002815

080037a4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00f      	beq.n	80037de <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80037c4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037d2:	2b28      	cmp	r3, #40	@ 0x28
 80037d4:	d003      	beq.n	80037de <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80037dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80037de:	887b      	ldrh	r3, [r7, #2]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00f      	beq.n	8003808 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80037ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037fc:	2b28      	cmp	r3, #40	@ 0x28
 80037fe:	d003      	beq.n	8003808 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003806:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003808:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800380c:	2b00      	cmp	r3, #0
 800380e:	da03      	bge.n	8003818 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003816:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003818:	887b      	ldrh	r3, [r7, #2]
 800381a:	2b10      	cmp	r3, #16
 800381c:	d103      	bne.n	8003826 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003824:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003826:	887b      	ldrh	r3, [r7, #2]
 8003828:	2b20      	cmp	r3, #32
 800382a:	d103      	bne.n	8003834 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f043 0320 	orr.w	r3, r3, #32
 8003832:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003834:	887b      	ldrh	r3, [r7, #2]
 8003836:	2b40      	cmp	r3, #64	@ 0x40
 8003838:	d103      	bne.n	8003842 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003840:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6819      	ldr	r1, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	43da      	mvns	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	400a      	ands	r2, r1
 8003852:	601a      	str	r2, [r3, #0]
}
 8003854:	bf00      	nop
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	d138      	bne.n	80038e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003880:	2302      	movs	r3, #2
 8003882:	e032      	b.n	80038ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	@ 0x24
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6819      	ldr	r1, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b20      	cmp	r3, #32
 800390a:	d139      	bne.n	8003980 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003916:	2302      	movs	r3, #2
 8003918:	e033      	b.n	8003982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2224      	movs	r2, #36	@ 0x24
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003948:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039a0:	d104      	bne.n	80039ac <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f897 	bl	8003ad8 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80039aa:	e003      	b.n	80039b4 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f868 	bl	8003a84 <HAL_PWREx_EnterSTOP0Mode>
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039c0:	4b04      	ldr	r3, [pc, #16]	@ (80039d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40007000 	.word	0x40007000

080039d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039e6:	d130      	bne.n	8003a4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e8:	4b23      	ldr	r3, [pc, #140]	@ (8003a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039f4:	d038      	beq.n	8003a68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039f6:	4b20      	ldr	r3, [pc, #128]	@ (8003a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a06:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2232      	movs	r2, #50	@ 0x32
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	4a1b      	ldr	r2, [pc, #108]	@ (8003a80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	0c9b      	lsrs	r3, r3, #18
 8003a18:	3301      	adds	r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a1c:	e002      	b.n	8003a24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a24:	4b14      	ldr	r3, [pc, #80]	@ (8003a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a30:	d102      	bne.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f2      	bne.n	8003a1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a38:	4b0f      	ldr	r3, [pc, #60]	@ (8003a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a44:	d110      	bne.n	8003a68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e00f      	b.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a56:	d007      	beq.n	8003a68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a58:	4b07      	ldr	r3, [pc, #28]	@ (8003a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a60:	4a05      	ldr	r2, [pc, #20]	@ (8003a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40007000 	.word	0x40007000
 8003a7c:	20000008 	.word	0x20000008
 8003a80:	431bde83 	.word	0x431bde83

08003a84 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8003a8e:	4b10      	ldr	r3, [pc, #64]	@ (8003ad0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8003a94:	f023 0307 	bic.w	r3, r3, #7
 8003a98:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003aa0:	f043 0304 	orr.w	r3, r3, #4
 8003aa4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003aac:	bf30      	wfi
 8003aae:	e002      	b.n	8003ab6 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003ab0:	bf40      	sev
    __WFE();
 8003ab2:	bf20      	wfe
    __WFE();
 8003ab4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003ab6:	4b07      	ldr	r3, [pc, #28]	@ (8003ad4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	4a06      	ldr	r2, [pc, #24]	@ (8003ad4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	6113      	str	r3, [r2, #16]
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40007000 	.word	0x40007000
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8003ae2:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 0307 	bic.w	r3, r3, #7
 8003aea:	4a0f      	ldr	r2, [pc, #60]	@ (8003b28 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003af2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	4a0d      	ldr	r2, [pc, #52]	@ (8003b2c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003af8:	f043 0304 	orr.w	r3, r3, #4
 8003afc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003b04:	bf30      	wfi
 8003b06:	e002      	b.n	8003b0e <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003b08:	bf40      	sev
    __WFE();
 8003b0a:	bf20      	wfe
    __WFE();
 8003b0c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003b0e:	4b07      	ldr	r3, [pc, #28]	@ (8003b2c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	4a06      	ldr	r2, [pc, #24]	@ (8003b2c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8003b14:	f023 0304 	bic.w	r3, r3, #4
 8003b18:	6113      	str	r3, [r2, #16]
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f000 bc02 	b.w	8004348 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b44:	4b96      	ldr	r3, [pc, #600]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b4e:	4b94      	ldr	r3, [pc, #592]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80e4 	beq.w	8003d2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_RCC_OscConfig+0x4c>
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	f040 808b 	bne.w	8003c8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	f040 8087 	bne.w	8003c8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b7c:	4b88      	ldr	r3, [pc, #544]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_OscConfig+0x64>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e3d9      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1a      	ldr	r2, [r3, #32]
 8003b98:	4b81      	ldr	r3, [pc, #516]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d004      	beq.n	8003bae <HAL_RCC_OscConfig+0x7e>
 8003ba4:	4b7e      	ldr	r3, [pc, #504]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bac:	e005      	b.n	8003bba <HAL_RCC_OscConfig+0x8a>
 8003bae:	4b7c      	ldr	r3, [pc, #496]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d223      	bcs.n	8003c06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fe88 	bl	80048d8 <RCC_SetFlashLatencyFromMSIRange>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e3ba      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bd2:	4b73      	ldr	r3, [pc, #460]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a72      	ldr	r2, [pc, #456]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	f043 0308 	orr.w	r3, r3, #8
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4b70      	ldr	r3, [pc, #448]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	496d      	ldr	r1, [pc, #436]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bf0:	4b6b      	ldr	r3, [pc, #428]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	4968      	ldr	r1, [pc, #416]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	604b      	str	r3, [r1, #4]
 8003c04:	e025      	b.n	8003c52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c06:	4b66      	ldr	r3, [pc, #408]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a65      	ldr	r2, [pc, #404]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	f043 0308 	orr.w	r3, r3, #8
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b63      	ldr	r3, [pc, #396]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4960      	ldr	r1, [pc, #384]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c24:	4b5e      	ldr	r3, [pc, #376]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	495b      	ldr	r1, [pc, #364]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fe48 	bl	80048d8 <RCC_SetFlashLatencyFromMSIRange>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e37a      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c52:	f000 fc81 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 8003c56:	4602      	mov	r2, r0
 8003c58:	4b51      	ldr	r3, [pc, #324]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	4950      	ldr	r1, [pc, #320]	@ (8003da4 <HAL_RCC_OscConfig+0x274>)
 8003c64:	5ccb      	ldrb	r3, [r1, r3]
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6e:	4a4e      	ldr	r2, [pc, #312]	@ (8003da8 <HAL_RCC_OscConfig+0x278>)
 8003c70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c72:	4b4e      	ldr	r3, [pc, #312]	@ (8003dac <HAL_RCC_OscConfig+0x27c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fd facc 	bl	8001214 <HAL_InitTick>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d052      	beq.n	8003d2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	e35e      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d032      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c92:	4b43      	ldr	r3, [pc, #268]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a42      	ldr	r2, [pc, #264]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c9e:	f7fd fb09 	bl	80012b4 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ca6:	f7fd fb05 	bl	80012b4 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e347      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cb8:	4b39      	ldr	r3, [pc, #228]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cc4:	4b36      	ldr	r3, [pc, #216]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a35      	ldr	r2, [pc, #212]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003cca:	f043 0308 	orr.w	r3, r3, #8
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b33      	ldr	r3, [pc, #204]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	4930      	ldr	r1, [pc, #192]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	492b      	ldr	r1, [pc, #172]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
 8003cf6:	e01a      	b.n	8003d2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cf8:	4b29      	ldr	r3, [pc, #164]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a28      	ldr	r2, [pc, #160]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d04:	f7fd fad6 	bl	80012b4 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d0c:	f7fd fad2 	bl	80012b4 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e314      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d1e:	4b20      	ldr	r3, [pc, #128]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x1dc>
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d073      	beq.n	8003e22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_OscConfig+0x21c>
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	d10e      	bne.n	8003d64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	4b14      	ldr	r3, [pc, #80]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d063      	beq.n	8003e20 <HAL_RCC_OscConfig+0x2f0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d15f      	bne.n	8003e20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e2f1      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCC_OscConfig+0x24c>
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a0b      	ldr	r2, [pc, #44]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e025      	b.n	8003dc8 <HAL_RCC_OscConfig+0x298>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d84:	d114      	bne.n	8003db0 <HAL_RCC_OscConfig+0x280>
 8003d86:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a05      	ldr	r2, [pc, #20]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b03      	ldr	r3, [pc, #12]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a02      	ldr	r2, [pc, #8]	@ (8003da0 <HAL_RCC_OscConfig+0x270>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e013      	b.n	8003dc8 <HAL_RCC_OscConfig+0x298>
 8003da0:	40021000 	.word	0x40021000
 8003da4:	08019b10 	.word	0x08019b10
 8003da8:	20000008 	.word	0x20000008
 8003dac:	20000000 	.word	0x20000000
 8003db0:	4ba0      	ldr	r3, [pc, #640]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a9f      	ldr	r2, [pc, #636]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b9d      	ldr	r3, [pc, #628]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a9c      	ldr	r2, [pc, #624]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fa70 	bl	80012b4 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fd fa6c 	bl	80012b4 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	@ 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e2ae      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dea:	4b92      	ldr	r3, [pc, #584]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x2a8>
 8003df6:	e014      	b.n	8003e22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd fa5c 	bl	80012b4 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd fa58 	bl	80012b4 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	@ 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e29a      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e12:	4b88      	ldr	r3, [pc, #544]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x2d0>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d060      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d005      	beq.n	8003e40 <HAL_RCC_OscConfig+0x310>
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d119      	bne.n	8003e6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d116      	bne.n	8003e6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e40:	4b7c      	ldr	r3, [pc, #496]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_OscConfig+0x328>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e277      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e58:	4b76      	ldr	r3, [pc, #472]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	061b      	lsls	r3, r3, #24
 8003e66:	4973      	ldr	r1, [pc, #460]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e6c:	e040      	b.n	8003ef0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d023      	beq.n	8003ebe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e76:	4b6f      	ldr	r3, [pc, #444]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fd fa17 	bl	80012b4 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fd fa13 	bl	80012b4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e255      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e9c:	4b65      	ldr	r3, [pc, #404]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea8:	4b62      	ldr	r3, [pc, #392]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	495f      	ldr	r1, [pc, #380]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
 8003ebc:	e018      	b.n	8003ef0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a5c      	ldr	r2, [pc, #368]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7fd f9f3 	bl	80012b4 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7fd f9ef 	bl	80012b4 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e231      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ee4:	4b53      	ldr	r3, [pc, #332]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d03c      	beq.n	8003f76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01c      	beq.n	8003f3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f04:	4b4b      	ldr	r3, [pc, #300]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f0a:	4a4a      	ldr	r2, [pc, #296]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f14:	f7fd f9ce 	bl	80012b4 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1c:	f7fd f9ca 	bl	80012b4 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e20c      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f2e:	4b41      	ldr	r3, [pc, #260]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ef      	beq.n	8003f1c <HAL_RCC_OscConfig+0x3ec>
 8003f3c:	e01b      	b.n	8003f76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f44:	4a3b      	ldr	r2, [pc, #236]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4e:	f7fd f9b1 	bl	80012b4 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f56:	f7fd f9ad 	bl	80012b4 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e1ef      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f68:	4b32      	ldr	r3, [pc, #200]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ef      	bne.n	8003f56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80a6 	beq.w	80040d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f84:	2300      	movs	r3, #0
 8003f86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f88:	4b2a      	ldr	r3, [pc, #168]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10d      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f94:	4b27      	ldr	r3, [pc, #156]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f98:	4a26      	ldr	r2, [pc, #152]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fa0:	4b24      	ldr	r3, [pc, #144]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fac:	2301      	movs	r3, #1
 8003fae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb0:	4b21      	ldr	r3, [pc, #132]	@ (8004038 <HAL_RCC_OscConfig+0x508>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d118      	bne.n	8003fee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004038 <HAL_RCC_OscConfig+0x508>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004038 <HAL_RCC_OscConfig+0x508>)
 8003fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc8:	f7fd f974 	bl	80012b4 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd0:	f7fd f970 	bl	80012b4 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e1b2      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe2:	4b15      	ldr	r3, [pc, #84]	@ (8004038 <HAL_RCC_OscConfig+0x508>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d108      	bne.n	8004008 <HAL_RCC_OscConfig+0x4d8>
 8003ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004006:	e029      	b.n	800405c <HAL_RCC_OscConfig+0x52c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b05      	cmp	r3, #5
 800400e:	d115      	bne.n	800403c <HAL_RCC_OscConfig+0x50c>
 8004010:	4b08      	ldr	r3, [pc, #32]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	4a07      	ldr	r2, [pc, #28]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8004018:	f043 0304 	orr.w	r3, r3, #4
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004020:	4b04      	ldr	r3, [pc, #16]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004026:	4a03      	ldr	r2, [pc, #12]	@ (8004034 <HAL_RCC_OscConfig+0x504>)
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004030:	e014      	b.n	800405c <HAL_RCC_OscConfig+0x52c>
 8004032:	bf00      	nop
 8004034:	40021000 	.word	0x40021000
 8004038:	40007000 	.word	0x40007000
 800403c:	4b9a      	ldr	r3, [pc, #616]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004042:	4a99      	ldr	r2, [pc, #612]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004044:	f023 0301 	bic.w	r3, r3, #1
 8004048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800404c:	4b96      	ldr	r3, [pc, #600]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004052:	4a95      	ldr	r2, [pc, #596]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004054:	f023 0304 	bic.w	r3, r3, #4
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d016      	beq.n	8004092 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fd f926 	bl	80012b4 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fd f922 	bl	80012b4 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e162      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004082:	4b89      	ldr	r3, [pc, #548]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ed      	beq.n	800406c <HAL_RCC_OscConfig+0x53c>
 8004090:	e015      	b.n	80040be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004092:	f7fd f90f 	bl	80012b4 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004098:	e00a      	b.n	80040b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409a:	f7fd f90b 	bl	80012b4 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e14b      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040b0:	4b7d      	ldr	r3, [pc, #500]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1ed      	bne.n	800409a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040be:	7ffb      	ldrb	r3, [r7, #31]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c4:	4b78      	ldr	r3, [pc, #480]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 80040c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c8:	4a77      	ldr	r2, [pc, #476]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 80040ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d03c      	beq.n	8004156 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01c      	beq.n	800411e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040e4:	4b70      	ldr	r3, [pc, #448]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 80040e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ea:	4a6f      	ldr	r2, [pc, #444]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fd f8de 	bl	80012b4 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040fc:	f7fd f8da 	bl	80012b4 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e11c      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800410e:	4b66      	ldr	r3, [pc, #408]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004110:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0ef      	beq.n	80040fc <HAL_RCC_OscConfig+0x5cc>
 800411c:	e01b      	b.n	8004156 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800411e:	4b62      	ldr	r3, [pc, #392]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004120:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004124:	4a60      	ldr	r2, [pc, #384]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412e:	f7fd f8c1 	bl	80012b4 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004136:	f7fd f8bd 	bl	80012b4 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e0ff      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004148:	4b57      	ldr	r3, [pc, #348]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 800414a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1ef      	bne.n	8004136 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80f3 	beq.w	8004346 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	2b02      	cmp	r3, #2
 8004166:	f040 80c9 	bne.w	80042fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800416a:	4b4f      	ldr	r3, [pc, #316]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f003 0203 	and.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	429a      	cmp	r2, r3
 800417c:	d12c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004188:	3b01      	subs	r3, #1
 800418a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d123      	bne.n	80041d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d11b      	bne.n	80041d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d113      	bne.n	80041d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	3b01      	subs	r3, #1
 80041be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d109      	bne.n	80041d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	3b01      	subs	r3, #1
 80041d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d06b      	beq.n	80042b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2b0c      	cmp	r3, #12
 80041dc:	d062      	beq.n	80042a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041de:	4b32      	ldr	r3, [pc, #200]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e0ac      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041ee:	4b2e      	ldr	r3, [pc, #184]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2d      	ldr	r2, [pc, #180]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 80041f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041fa:	f7fd f85b 	bl	80012b4 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004202:	f7fd f857 	bl	80012b4 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e099      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004214:	4b24      	ldr	r3, [pc, #144]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f0      	bne.n	8004202 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004220:	4b21      	ldr	r3, [pc, #132]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	4b21      	ldr	r3, [pc, #132]	@ (80042ac <HAL_RCC_OscConfig+0x77c>)
 8004226:	4013      	ands	r3, r2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004230:	3a01      	subs	r2, #1
 8004232:	0112      	lsls	r2, r2, #4
 8004234:	4311      	orrs	r1, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800423a:	0212      	lsls	r2, r2, #8
 800423c:	4311      	orrs	r1, r2
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004242:	0852      	lsrs	r2, r2, #1
 8004244:	3a01      	subs	r2, #1
 8004246:	0552      	lsls	r2, r2, #21
 8004248:	4311      	orrs	r1, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800424e:	0852      	lsrs	r2, r2, #1
 8004250:	3a01      	subs	r2, #1
 8004252:	0652      	lsls	r2, r2, #25
 8004254:	4311      	orrs	r1, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800425a:	06d2      	lsls	r2, r2, #27
 800425c:	430a      	orrs	r2, r1
 800425e:	4912      	ldr	r1, [pc, #72]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004260:	4313      	orrs	r3, r2
 8004262:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004264:	4b10      	ldr	r3, [pc, #64]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a0f      	ldr	r2, [pc, #60]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 800426a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800426e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004270:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4a0c      	ldr	r2, [pc, #48]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004276:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800427a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800427c:	f7fd f81a 	bl	80012b4 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004284:	f7fd f816 	bl	80012b4 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e058      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004296:	4b04      	ldr	r3, [pc, #16]	@ (80042a8 <HAL_RCC_OscConfig+0x778>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042a2:	e050      	b.n	8004346 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e04f      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
 80042a8:	40021000 	.word	0x40021000
 80042ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b0:	4b27      	ldr	r3, [pc, #156]	@ (8004350 <HAL_RCC_OscConfig+0x820>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d144      	bne.n	8004346 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042bc:	4b24      	ldr	r3, [pc, #144]	@ (8004350 <HAL_RCC_OscConfig+0x820>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a23      	ldr	r2, [pc, #140]	@ (8004350 <HAL_RCC_OscConfig+0x820>)
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042c8:	4b21      	ldr	r3, [pc, #132]	@ (8004350 <HAL_RCC_OscConfig+0x820>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a20      	ldr	r2, [pc, #128]	@ (8004350 <HAL_RCC_OscConfig+0x820>)
 80042ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042d4:	f7fc ffee 	bl	80012b4 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fc ffea 	bl	80012b4 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e02c      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ee:	4b18      	ldr	r3, [pc, #96]	@ (8004350 <HAL_RCC_OscConfig+0x820>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x7ac>
 80042fa:	e024      	b.n	8004346 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d01f      	beq.n	8004342 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004302:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <HAL_RCC_OscConfig+0x820>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a12      	ldr	r2, [pc, #72]	@ (8004350 <HAL_RCC_OscConfig+0x820>)
 8004308:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800430c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fc ffd1 	bl	80012b4 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004316:	f7fc ffcd 	bl	80012b4 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e00f      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004328:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <HAL_RCC_OscConfig+0x820>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004334:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <HAL_RCC_OscConfig+0x820>)
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	4905      	ldr	r1, [pc, #20]	@ (8004350 <HAL_RCC_OscConfig+0x820>)
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <HAL_RCC_OscConfig+0x824>)
 800433c:	4013      	ands	r3, r2
 800433e:	60cb      	str	r3, [r1, #12]
 8004340:	e001      	b.n	8004346 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40021000 	.word	0x40021000
 8004354:	feeefffc 	.word	0xfeeefffc

08004358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0e7      	b.n	800453c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800436c:	4b75      	ldr	r3, [pc, #468]	@ (8004544 <HAL_RCC_ClockConfig+0x1ec>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d910      	bls.n	800439c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	4b72      	ldr	r3, [pc, #456]	@ (8004544 <HAL_RCC_ClockConfig+0x1ec>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 0207 	bic.w	r2, r3, #7
 8004382:	4970      	ldr	r1, [pc, #448]	@ (8004544 <HAL_RCC_ClockConfig+0x1ec>)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b6e      	ldr	r3, [pc, #440]	@ (8004544 <HAL_RCC_ClockConfig+0x1ec>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0cf      	b.n	800453c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d010      	beq.n	80043ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	4b66      	ldr	r3, [pc, #408]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d908      	bls.n	80043ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b63      	ldr	r3, [pc, #396]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4960      	ldr	r1, [pc, #384]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d04c      	beq.n	8004470 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043de:	4b5a      	ldr	r3, [pc, #360]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d121      	bne.n	800442e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0a6      	b.n	800453c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043f6:	4b54      	ldr	r3, [pc, #336]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d115      	bne.n	800442e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e09a      	b.n	800453c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d107      	bne.n	800441e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800440e:	4b4e      	ldr	r3, [pc, #312]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e08e      	b.n	800453c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800441e:	4b4a      	ldr	r3, [pc, #296]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e086      	b.n	800453c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800442e:	4b46      	ldr	r3, [pc, #280]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f023 0203 	bic.w	r2, r3, #3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4943      	ldr	r1, [pc, #268]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 800443c:	4313      	orrs	r3, r2
 800443e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004440:	f7fc ff38 	bl	80012b4 <HAL_GetTick>
 8004444:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004446:	e00a      	b.n	800445e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004448:	f7fc ff34 	bl	80012b4 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e06e      	b.n	800453c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445e:	4b3a      	ldr	r3, [pc, #232]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 020c 	and.w	r2, r3, #12
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	429a      	cmp	r2, r3
 800446e:	d1eb      	bne.n	8004448 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d010      	beq.n	800449e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	4b31      	ldr	r3, [pc, #196]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004488:	429a      	cmp	r2, r3
 800448a:	d208      	bcs.n	800449e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800448c:	4b2e      	ldr	r3, [pc, #184]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	492b      	ldr	r1, [pc, #172]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800449e:	4b29      	ldr	r3, [pc, #164]	@ (8004544 <HAL_RCC_ClockConfig+0x1ec>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d210      	bcs.n	80044ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ac:	4b25      	ldr	r3, [pc, #148]	@ (8004544 <HAL_RCC_ClockConfig+0x1ec>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f023 0207 	bic.w	r2, r3, #7
 80044b4:	4923      	ldr	r1, [pc, #140]	@ (8004544 <HAL_RCC_ClockConfig+0x1ec>)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044bc:	4b21      	ldr	r3, [pc, #132]	@ (8004544 <HAL_RCC_ClockConfig+0x1ec>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d001      	beq.n	80044ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e036      	b.n	800453c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044da:	4b1b      	ldr	r3, [pc, #108]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	4918      	ldr	r1, [pc, #96]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d009      	beq.n	800450c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044f8:	4b13      	ldr	r3, [pc, #76]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4910      	ldr	r1, [pc, #64]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800450c:	f000 f824 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b0d      	ldr	r3, [pc, #52]	@ (8004548 <HAL_RCC_ClockConfig+0x1f0>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	490b      	ldr	r1, [pc, #44]	@ (800454c <HAL_RCC_ClockConfig+0x1f4>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
 8004528:	4a09      	ldr	r2, [pc, #36]	@ (8004550 <HAL_RCC_ClockConfig+0x1f8>)
 800452a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800452c:	4b09      	ldr	r3, [pc, #36]	@ (8004554 <HAL_RCC_ClockConfig+0x1fc>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7fc fe6f 	bl	8001214 <HAL_InitTick>
 8004536:	4603      	mov	r3, r0
 8004538:	72fb      	strb	r3, [r7, #11]

  return status;
 800453a:	7afb      	ldrb	r3, [r7, #11]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40022000 	.word	0x40022000
 8004548:	40021000 	.word	0x40021000
 800454c:	08019b10 	.word	0x08019b10
 8004550:	20000008 	.word	0x20000008
 8004554:	20000000 	.word	0x20000000

08004558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	b089      	sub	sp, #36	@ 0x24
 800455c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004566:	4b3e      	ldr	r3, [pc, #248]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
 800456e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004570:	4b3b      	ldr	r3, [pc, #236]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0x34>
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b0c      	cmp	r3, #12
 8004584:	d121      	bne.n	80045ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d11e      	bne.n	80045ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800458c:	4b34      	ldr	r3, [pc, #208]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d107      	bne.n	80045a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004598:	4b31      	ldr	r3, [pc, #196]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 800459a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e005      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10d      	bne.n	80045e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d102      	bne.n	80045d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045d0:	4b25      	ldr	r3, [pc, #148]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x110>)
 80045d2:	61bb      	str	r3, [r7, #24]
 80045d4:	e004      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045dc:	4b23      	ldr	r3, [pc, #140]	@ (800466c <HAL_RCC_GetSysClockFreq+0x114>)
 80045de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d134      	bne.n	8004650 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d003      	beq.n	80045fe <HAL_RCC_GetSysClockFreq+0xa6>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d003      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0xac>
 80045fc:	e005      	b.n	800460a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x110>)
 8004600:	617b      	str	r3, [r7, #20]
      break;
 8004602:	e005      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004604:	4b19      	ldr	r3, [pc, #100]	@ (800466c <HAL_RCC_GetSysClockFreq+0x114>)
 8004606:	617b      	str	r3, [r7, #20]
      break;
 8004608:	e002      	b.n	8004610 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	617b      	str	r3, [r7, #20]
      break;
 800460e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004610:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	3301      	adds	r3, #1
 800461c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	0a1b      	lsrs	r3, r3, #8
 8004624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	fb03 f202 	mul.w	r2, r3, r2
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004636:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x108>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	0e5b      	lsrs	r3, r3, #25
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	3301      	adds	r3, #1
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004650:	69bb      	ldr	r3, [r7, #24]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3724      	adds	r7, #36	@ 0x24
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
 8004664:	08019b28 	.word	0x08019b28
 8004668:	00f42400 	.word	0x00f42400
 800466c:	007a1200 	.word	0x007a1200

08004670 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004674:	4b03      	ldr	r3, [pc, #12]	@ (8004684 <HAL_RCC_GetHCLKFreq+0x14>)
 8004676:	681b      	ldr	r3, [r3, #0]
}
 8004678:	4618      	mov	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000008 	.word	0x20000008

08004688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800468c:	f7ff fff0 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 8004690:	4602      	mov	r2, r0
 8004692:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	0a1b      	lsrs	r3, r3, #8
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	4904      	ldr	r1, [pc, #16]	@ (80046b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800469e:	5ccb      	ldrb	r3, [r1, r3]
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40021000 	.word	0x40021000
 80046b0:	08019b20 	.word	0x08019b20

080046b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046b8:	f7ff ffda 	bl	8004670 <HAL_RCC_GetHCLKFreq>
 80046bc:	4602      	mov	r2, r0
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	0adb      	lsrs	r3, r3, #11
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	4904      	ldr	r1, [pc, #16]	@ (80046dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80046ca:	5ccb      	ldrb	r3, [r1, r3]
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40021000 	.word	0x40021000
 80046dc:	08019b20 	.word	0x08019b20

080046e0 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct  pointer to an RCC_OscInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != (void *)NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
#if defined(RCC_HSI48_SUPPORT)
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	223f      	movs	r2, #63	@ 0x3f
 80046ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
                                      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
#endif /* RCC_HSI48_SUPPORT */

  /* Get the HSE configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 80046ee:	4b60      	ldr	r3, [pc, #384]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046fa:	d104      	bne.n	8004706 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	e00e      	b.n	8004724 <HAL_RCC_GetOscConfig+0x44>
  }
  else if(READ_BIT(RCC->CR, RCC_CR_HSEON) == RCC_CR_HSEON)
 8004706:	4b5a      	ldr	r3, [pc, #360]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004712:	d104      	bne.n	800471e <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	e002      	b.n	8004724 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	605a      	str	r2, [r3, #4]
  }

   /* Get the MSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_MSION) == RCC_CR_MSION)
 8004724:	4b52      	ldr	r3, [pc, #328]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b01      	cmp	r3, #1
 800472e:	d103      	bne.n	8004738 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	619a      	str	r2, [r3, #24]
 8004736:	e002      	b.n	800473e <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	619a      	str	r2, [r3, #24]
  }

  RCC_OscInitStruct->MSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos;
 800473e:	4b4c      	ldr	r3, [pc, #304]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	b2da      	uxtb	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->MSIClockRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800474a:	4b49      	ldr	r3, [pc, #292]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	621a      	str	r2, [r3, #32]

  /* Get the HSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_HSION) == RCC_CR_HSION)
 8004756:	4b46      	ldr	r3, [pc, #280]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004762:	d104      	bne.n	800476e <HAL_RCC_GetOscConfig+0x8e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800476a:	60da      	str	r2, [r3, #12]
 800476c:	e002      	b.n	8004774 <HAL_RCC_GetOscConfig+0x94>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = READ_BIT(RCC->ICSCR, RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos;
 8004774:	4b3e      	ldr	r3, [pc, #248]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	0e1b      	lsrs	r3, r3, #24
 800477a:	f003 021f 	and.w	r2, r3, #31
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8004782:	4b3b      	ldr	r3, [pc, #236]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b04      	cmp	r3, #4
 800478e:	d103      	bne.n	8004798 <HAL_RCC_GetOscConfig+0xb8>
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS_RTC_ONLY;
    }
    else
#endif /* RCC_BDCR_LSESYSDIS */
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2205      	movs	r2, #5
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	e00d      	b.n	80047b4 <HAL_RCC_GetOscConfig+0xd4>
    }
  }
  else if(READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8004798:	4b35      	ldr	r3, [pc, #212]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d103      	bne.n	80047ae <HAL_RCC_GetOscConfig+0xce>
      RCC_OscInitStruct->LSEState = RCC_LSE_ON_RTC_ONLY;
    }
    else
#endif /* RCC_BDCR_LSESYSDIS */
    {
      RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	609a      	str	r2, [r3, #8]
 80047ac:	e002      	b.n	80047b4 <HAL_RCC_GetOscConfig+0xd4>
    }
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CSR, RCC_CSR_LSION) == RCC_CSR_LSION)
 80047b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 80047b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d103      	bne.n	80047ca <HAL_RCC_GetOscConfig+0xea>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	615a      	str	r2, [r3, #20]
 80047c8:	e002      	b.n	80047d0 <HAL_RCC_GetOscConfig+0xf0>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	615a      	str	r2, [r3, #20]
  }
#endif /* RCC_CSR_LSIPREDIV */

#if defined(RCC_HSI48_SUPPORT)
  /* Get the HSI48 configuration ---------------------------------------------*/
  if(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON) == RCC_CRRCR_HSI48ON)
 80047d0:	4b27      	ldr	r3, [pc, #156]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 80047d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d103      	bne.n	80047e6 <HAL_RCC_GetOscConfig+0x106>
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80047e4:	e002      	b.n	80047ec <HAL_RCC_GetOscConfig+0x10c>
  }
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	625a      	str	r2, [r3, #36]	@ 0x24
#else
  RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
#endif /* RCC_HSI48_SUPPORT */

  /* Get the PLL configuration -----------------------------------------------*/
  if(READ_BIT(RCC->CR, RCC_CR_PLLON) == RCC_CR_PLLON)
 80047ec:	4b20      	ldr	r3, [pc, #128]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047f8:	d103      	bne.n	8004802 <HAL_RCC_GetOscConfig+0x122>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004800:	e002      	b.n	8004808 <HAL_RCC_GetOscConfig+0x128>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  RCC_OscInitStruct->PLL.PLLSource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004808:	4b19      	ldr	r3, [pc, #100]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct->PLL.PLLM = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8004814:	4b16      	ldr	r3, [pc, #88]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct->PLL.PLLN = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004824:	4b12      	ldr	r3, [pc, #72]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	0a1b      	lsrs	r3, r3, #8
 800482a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct->PLL.PLLQ = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004832:	4b0f      	ldr	r3, [pc, #60]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	0d5b      	lsrs	r3, r3, #21
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	3301      	adds	r3, #1
 800483e:	005a      	lsls	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC_OscInitStruct->PLL.PLLR = (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) << 1U);
 8004844:	4b0a      	ldr	r3, [pc, #40]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	0e5b      	lsrs	r3, r3, #25
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	3301      	adds	r3, #1
 8004850:	005a      	lsls	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
  RCC_OscInitStruct->PLL.PLLP = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <HAL_RCC_GetOscConfig+0x190>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	0edb      	lsrs	r3, r3, #27
 800485c:	f003 021f 	and.w	r2, r3, #31
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
  }
#endif /* RCC_PLLP_DIV_2_31_SUPPORT */
#endif /* RCC_PLLP_SUPPORT */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	40021000 	.word	0x40021000

08004874 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	220f      	movs	r2, #15
 8004882:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004884:	4b12      	ldr	r3, [pc, #72]	@ (80048d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0203 	and.w	r2, r3, #3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004890:	4b0f      	ldr	r3, [pc, #60]	@ (80048d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800489c:	4b0c      	ldr	r3, [pc, #48]	@ (80048d0 <HAL_RCC_GetClockConfig+0x5c>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80048a8:	4b09      	ldr	r3, [pc, #36]	@ (80048d0 <HAL_RCC_GetClockConfig+0x5c>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	08db      	lsrs	r3, r3, #3
 80048ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80048b6:	4b07      	ldr	r3, [pc, #28]	@ (80048d4 <HAL_RCC_GetClockConfig+0x60>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0207 	and.w	r2, r3, #7
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	601a      	str	r2, [r3, #0]
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40022000 	.word	0x40022000

080048d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048e0:	2300      	movs	r3, #0
 80048e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048f0:	f7ff f864 	bl	80039bc <HAL_PWREx_GetVoltageRange>
 80048f4:	6178      	str	r0, [r7, #20]
 80048f6:	e014      	b.n	8004922 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048f8:	4b25      	ldr	r3, [pc, #148]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fc:	4a24      	ldr	r2, [pc, #144]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004902:	6593      	str	r3, [r2, #88]	@ 0x58
 8004904:	4b22      	ldr	r3, [pc, #136]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004910:	f7ff f854 	bl	80039bc <HAL_PWREx_GetVoltageRange>
 8004914:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004916:	4b1e      	ldr	r3, [pc, #120]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	4a1d      	ldr	r2, [pc, #116]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800491c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004920:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004928:	d10b      	bne.n	8004942 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b80      	cmp	r3, #128	@ 0x80
 800492e:	d919      	bls.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2ba0      	cmp	r3, #160	@ 0xa0
 8004934:	d902      	bls.n	800493c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004936:	2302      	movs	r3, #2
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	e013      	b.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800493c:	2301      	movs	r3, #1
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	e010      	b.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b80      	cmp	r3, #128	@ 0x80
 8004946:	d902      	bls.n	800494e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004948:	2303      	movs	r3, #3
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	e00a      	b.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b80      	cmp	r3, #128	@ 0x80
 8004952:	d102      	bne.n	800495a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004954:	2302      	movs	r3, #2
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	e004      	b.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b70      	cmp	r3, #112	@ 0x70
 800495e:	d101      	bne.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004960:	2301      	movs	r3, #1
 8004962:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 0207 	bic.w	r2, r3, #7
 800496c:	4909      	ldr	r1, [pc, #36]	@ (8004994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004974:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	429a      	cmp	r2, r3
 8004980:	d001      	beq.n	8004986 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	40022000 	.word	0x40022000

08004998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049a0:	2300      	movs	r3, #0
 80049a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049a4:	2300      	movs	r3, #0
 80049a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d031      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049bc:	d01a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80049be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049c2:	d814      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049cc:	d10f      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80049ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049da:	e00c      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3304      	adds	r3, #4
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 f9f0 	bl	8004dc8 <RCCEx_PLLSAI1_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ec:	e003      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	74fb      	strb	r3, [r7, #19]
      break;
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80049f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10b      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049fc:	4b51      	ldr	r3, [pc, #324]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0a:	494e      	ldr	r1, [pc, #312]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a12:	e001      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 809e 	beq.w	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a26:	2300      	movs	r3, #0
 8004a28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a2a:	4b46      	ldr	r3, [pc, #280]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a40:	4b40      	ldr	r3, [pc, #256]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a44:	4a3f      	ldr	r2, [pc, #252]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a39      	ldr	r2, [pc, #228]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a68:	f7fc fc24 	bl	80012b4 <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a6e:	e009      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a70:	f7fc fc20 	bl	80012b4 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d902      	bls.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	74fb      	strb	r3, [r7, #19]
        break;
 8004a82:	e005      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a84:	4b30      	ldr	r3, [pc, #192]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ef      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d15a      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a96:	4b2b      	ldr	r3, [pc, #172]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01e      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d019      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ab2:	4b24      	ldr	r3, [pc, #144]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004abc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004abe:	4b21      	ldr	r3, [pc, #132]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ace:	4b1d      	ldr	r3, [pc, #116]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ade:	4a19      	ldr	r2, [pc, #100]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d016      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fc fbe0 	bl	80012b4 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af6:	e00b      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af8:	f7fc fbdc 	bl	80012b4 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d902      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	74fb      	strb	r3, [r7, #19]
            break;
 8004b0e:	e006      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b10:	4b0c      	ldr	r3, [pc, #48]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0ec      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b24:	4b07      	ldr	r3, [pc, #28]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b32:	4904      	ldr	r1, [pc, #16]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b3a:	e009      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b3c:	7cfb      	ldrb	r3, [r7, #19]
 8004b3e:	74bb      	strb	r3, [r7, #18]
 8004b40:	e006      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4c:	7cfb      	ldrb	r3, [r7, #19]
 8004b4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b50:	7c7b      	ldrb	r3, [r7, #17]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d105      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b56:	4b9b      	ldr	r3, [pc, #620]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5a:	4a9a      	ldr	r2, [pc, #616]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b6e:	4b95      	ldr	r3, [pc, #596]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b74:	f023 0203 	bic.w	r2, r3, #3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	4991      	ldr	r1, [pc, #580]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b90:	4b8c      	ldr	r3, [pc, #560]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b96:	f023 020c 	bic.w	r2, r3, #12
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	4989      	ldr	r1, [pc, #548]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bb2:	4b84      	ldr	r3, [pc, #528]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc0:	4980      	ldr	r1, [pc, #512]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bd4:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be2:	4978      	ldr	r1, [pc, #480]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bf6:	4b73      	ldr	r3, [pc, #460]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c04:	496f      	ldr	r1, [pc, #444]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c18:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	4967      	ldr	r1, [pc, #412]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c3a:	4b62      	ldr	r3, [pc, #392]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c48:	495e      	ldr	r1, [pc, #376]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c5c:	4b59      	ldr	r3, [pc, #356]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6a:	4956      	ldr	r1, [pc, #344]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c7e:	4b51      	ldr	r3, [pc, #324]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8c:	494d      	ldr	r1, [pc, #308]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d028      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ca0:	4b48      	ldr	r3, [pc, #288]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cae:	4945      	ldr	r1, [pc, #276]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cbe:	d106      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc0:	4b40      	ldr	r3, [pc, #256]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cca:	60d3      	str	r3, [r2, #12]
 8004ccc:	e011      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cd6:	d10c      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	2101      	movs	r1, #1
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f872 	bl	8004dc8 <RCCEx_PLLSAI1_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ce8:	7cfb      	ldrb	r3, [r7, #19]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004cee:	7cfb      	ldrb	r3, [r7, #19]
 8004cf0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d028      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cfe:	4b31      	ldr	r3, [pc, #196]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d0c:	492d      	ldr	r1, [pc, #180]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d1c:	d106      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d1e:	4b29      	ldr	r3, [pc, #164]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	4a28      	ldr	r2, [pc, #160]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d28:	60d3      	str	r3, [r2, #12]
 8004d2a:	e011      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 f843 	bl	8004dc8 <RCCEx_PLLSAI1_Config>
 8004d42:	4603      	mov	r3, r0
 8004d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004d4c:	7cfb      	ldrb	r3, [r7, #19]
 8004d4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01c      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d5c:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6a:	4916      	ldr	r1, [pc, #88]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d7a:	d10c      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	2102      	movs	r1, #2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f820 	bl	8004dc8 <RCCEx_PLLSAI1_Config>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d8c:	7cfb      	ldrb	r3, [r7, #19]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004d92:	7cfb      	ldrb	r3, [r7, #19]
 8004d94:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004da2:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db0:	4904      	ldr	r1, [pc, #16]	@ (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004db8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40021000 	.word	0x40021000

08004dc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dd6:	4b74      	ldr	r3, [pc, #464]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d018      	beq.n	8004e14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004de2:	4b71      	ldr	r3, [pc, #452]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0203 	and.w	r2, r3, #3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d10d      	bne.n	8004e0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
       ||
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004dfa:	4b6b      	ldr	r3, [pc, #428]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	091b      	lsrs	r3, r3, #4
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
       ||
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d047      	beq.n	8004e9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	73fb      	strb	r3, [r7, #15]
 8004e12:	e044      	b.n	8004e9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d018      	beq.n	8004e4e <RCCEx_PLLSAI1_Config+0x86>
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d825      	bhi.n	8004e6c <RCCEx_PLLSAI1_Config+0xa4>
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d002      	beq.n	8004e2a <RCCEx_PLLSAI1_Config+0x62>
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d009      	beq.n	8004e3c <RCCEx_PLLSAI1_Config+0x74>
 8004e28:	e020      	b.n	8004e6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d11d      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3a:	e01a      	b.n	8004e72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d116      	bne.n	8004e76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4c:	e013      	b.n	8004e76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e4e:	4b56      	ldr	r3, [pc, #344]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10f      	bne.n	8004e7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e5a:	4b53      	ldr	r3, [pc, #332]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e6a:	e006      	b.n	8004e7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	e004      	b.n	8004e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10d      	bne.n	8004e9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e82:	4b49      	ldr	r3, [pc, #292]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6819      	ldr	r1, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	430b      	orrs	r3, r1
 8004e98:	4943      	ldr	r1, [pc, #268]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d17c      	bne.n	8004f9e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ea4:	4b40      	ldr	r3, [pc, #256]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a3f      	ldr	r2, [pc, #252]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb0:	f7fc fa00 	bl	80012b4 <HAL_GetTick>
 8004eb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eb6:	e009      	b.n	8004ecc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eb8:	f7fc f9fc 	bl	80012b4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d902      	bls.n	8004ecc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eca:	e005      	b.n	8004ed8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ecc:	4b36      	ldr	r3, [pc, #216]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1ef      	bne.n	8004eb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d15f      	bne.n	8004f9e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d110      	bne.n	8004f06 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee4:	4b30      	ldr	r3, [pc, #192]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004eec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6892      	ldr	r2, [r2, #8]
 8004ef4:	0211      	lsls	r1, r2, #8
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68d2      	ldr	r2, [r2, #12]
 8004efa:	06d2      	lsls	r2, r2, #27
 8004efc:	430a      	orrs	r2, r1
 8004efe:	492a      	ldr	r1, [pc, #168]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	610b      	str	r3, [r1, #16]
 8004f04:	e027      	b.n	8004f56 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d112      	bne.n	8004f32 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f0c:	4b26      	ldr	r3, [pc, #152]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004f14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6892      	ldr	r2, [r2, #8]
 8004f1c:	0211      	lsls	r1, r2, #8
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6912      	ldr	r2, [r2, #16]
 8004f22:	0852      	lsrs	r2, r2, #1
 8004f24:	3a01      	subs	r2, #1
 8004f26:	0552      	lsls	r2, r2, #21
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	491f      	ldr	r1, [pc, #124]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	610b      	str	r3, [r1, #16]
 8004f30:	e011      	b.n	8004f56 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f32:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f3a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6892      	ldr	r2, [r2, #8]
 8004f42:	0211      	lsls	r1, r2, #8
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6952      	ldr	r2, [r2, #20]
 8004f48:	0852      	lsrs	r2, r2, #1
 8004f4a:	3a01      	subs	r2, #1
 8004f4c:	0652      	lsls	r2, r2, #25
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	4915      	ldr	r1, [pc, #84]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f56:	4b14      	ldr	r3, [pc, #80]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a13      	ldr	r2, [pc, #76]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f62:	f7fc f9a7 	bl	80012b4 <HAL_GetTick>
 8004f66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f68:	e009      	b.n	8004f7e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f6a:	f7fc f9a3 	bl	80012b4 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d902      	bls.n	8004f7e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	73fb      	strb	r3, [r7, #15]
          break;
 8004f7c:	e005      	b.n	8004f8a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0ef      	beq.n	8004f6a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f90:	4b05      	ldr	r3, [pc, #20]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	4903      	ldr	r1, [pc, #12]	@ (8004fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40021000 	.word	0x40021000

08004fac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d079      	beq.n	80050b2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f005 f99c 	bl	800a310 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	d058      	beq.n	80050a0 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	22ca      	movs	r2, #202	@ 0xca
 8004ff4:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2253      	movs	r2, #83	@ 0x53
 8004ffc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fc64 	bl	80058cc <RTC_EnterInitMode>
 8005004:	4603      	mov	r3, r0
 8005006:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d127      	bne.n	800505e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800501c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005020:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6899      	ldr	r1, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	68d2      	ldr	r2, [r2, #12]
 8005048:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6919      	ldr	r1, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	041a      	lsls	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fc68 	bl	8005934 <RTC_ExitInitMode>
 8005064:	4603      	mov	r3, r0
 8005066:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d113      	bne.n	8005096 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0203 	bic.w	r2, r2, #3
 800507c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	22ff      	movs	r2, #255	@ 0xff
 800509c:	625a      	str	r2, [r3, #36]	@ 0x24
 800509e:	e001      	b.n	80050a4 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050bc:	b590      	push	{r4, r7, lr}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_RTC_SetTime+0x1a>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e08b      	b.n	80051ee <HAL_RTC_SetTime+0x132>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2202      	movs	r2, #2
 80050e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	22ca      	movs	r2, #202	@ 0xca
 80050ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2253      	movs	r2, #83	@ 0x53
 80050f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fbe8 	bl	80058cc <RTC_EnterInitMode>
 80050fc:	4603      	mov	r3, r0
 80050fe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005100:	7cfb      	ldrb	r3, [r7, #19]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d163      	bne.n	80051ce <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d126      	bne.n	800515a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2200      	movs	r2, #0
 800511e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fc43 	bl	80059b0 <RTC_ByteToBcd2>
 800512a:	4603      	mov	r3, r0
 800512c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	785b      	ldrb	r3, [r3, #1]
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fc3c 	bl	80059b0 <RTC_ByteToBcd2>
 8005138:	4603      	mov	r3, r0
 800513a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800513c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	789b      	ldrb	r3, [r3, #2]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fc34 	bl	80059b0 <RTC_ByteToBcd2>
 8005148:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800514a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	78db      	ldrb	r3, [r3, #3]
 8005152:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	e018      	b.n	800518c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2200      	movs	r2, #0
 800516c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800517a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005180:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	78db      	ldrb	r3, [r3, #3]
 8005186:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005196:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800519a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80051aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6899      	ldr	r1, [r3, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fbb5 	bl	8005934 <RTC_ExitInitMode>
 80051ca:	4603      	mov	r3, r0
 80051cc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	22ff      	movs	r2, #255	@ 0xff
 80051d4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80051d6:	7cfb      	ldrb	r3, [r7, #19]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d103      	bne.n	80051e4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80051ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd90      	pop	{r4, r7, pc}

080051f6 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b086      	sub	sp, #24
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005224:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005228:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	0c1b      	lsrs	r3, r3, #16
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	0a1b      	lsrs	r3, r3, #8
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005244:	b2da      	uxtb	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005252:	b2da      	uxtb	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	0d9b      	lsrs	r3, r3, #22
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	b2da      	uxtb	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d11a      	bne.n	80052a4 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fbbc 	bl	80059f0 <RTC_Bcd2ToByte>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fbb3 	bl	80059f0 <RTC_Bcd2ToByte>
 800528a:	4603      	mov	r3, r0
 800528c:	461a      	mov	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	789b      	ldrb	r3, [r3, #2]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fbaa 	bl	80059f0 <RTC_Bcd2ToByte>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052ae:	b590      	push	{r4, r7, lr}
 80052b0:	b087      	sub	sp, #28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_RTC_SetDate+0x1a>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e075      	b.n	80053b4 <HAL_RTC_SetDate+0x106>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10e      	bne.n	80052fc <HAL_RTC_SetDate+0x4e>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d008      	beq.n	80052fc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	f023 0310 	bic.w	r3, r3, #16
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	330a      	adds	r3, #10
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d11c      	bne.n	800533c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	78db      	ldrb	r3, [r3, #3]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fb52 	bl	80059b0 <RTC_ByteToBcd2>
 800530c:	4603      	mov	r3, r0
 800530e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	785b      	ldrb	r3, [r3, #1]
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fb4b 	bl	80059b0 <RTC_ByteToBcd2>
 800531a:	4603      	mov	r3, r0
 800531c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800531e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	789b      	ldrb	r3, [r3, #2]
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fb43 	bl	80059b0 <RTC_ByteToBcd2>
 800532a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800532c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	e00e      	b.n	800535a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	78db      	ldrb	r3, [r3, #3]
 8005340:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005348:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800534e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	22ca      	movs	r2, #202	@ 0xca
 8005360:	625a      	str	r2, [r3, #36]	@ 0x24
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2253      	movs	r2, #83	@ 0x53
 8005368:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 faae 	bl	80058cc <RTC_EnterInitMode>
 8005370:	4603      	mov	r3, r0
 8005372:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10c      	bne.n	8005394 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005384:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005388:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fad2 	bl	8005934 <RTC_ExitInitMode>
 8005390:	4603      	mov	r3, r0
 8005392:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	22ff      	movs	r2, #255	@ 0xff
 800539a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80053b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	371c      	adds	r7, #28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd90      	pop	{r4, r7, pc}

080053bc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80053d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80053d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	0c1b      	lsrs	r3, r3, #16
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	0a1b      	lsrs	r3, r3, #8
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	0b5b      	lsrs	r3, r3, #13
 8005404:	b2db      	uxtb	r3, r3
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	b2da      	uxtb	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d11a      	bne.n	800544c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	78db      	ldrb	r3, [r3, #3]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fae8 	bl	80059f0 <RTC_Bcd2ToByte>
 8005420:	4603      	mov	r3, r0
 8005422:	461a      	mov	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fadf 	bl	80059f0 <RTC_Bcd2ToByte>
 8005432:	4603      	mov	r3, r0
 8005434:	461a      	mov	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	789b      	ldrb	r3, [r3, #2]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fad6 	bl	80059f0 <RTC_Bcd2ToByte>
 8005444:	4603      	mov	r3, r0
 8005446:	461a      	mov	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b089      	sub	sp, #36	@ 0x24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_RTC_SetAlarm_IT+0x1a>
 800546e:	2302      	movs	r3, #2
 8005470:	e127      	b.n	80056c2 <HAL_RTC_SetAlarm_IT+0x26a>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d137      	bne.n	80054f8 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d102      	bne.n	800549c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2200      	movs	r2, #0
 800549a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fa85 	bl	80059b0 <RTC_ByteToBcd2>
 80054a6:	4603      	mov	r3, r0
 80054a8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	785b      	ldrb	r3, [r3, #1]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fa7e 	bl	80059b0 <RTC_ByteToBcd2>
 80054b4:	4603      	mov	r3, r0
 80054b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054b8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	789b      	ldrb	r3, [r3, #2]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fa76 	bl	80059b0 <RTC_ByteToBcd2>
 80054c4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054c6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	78db      	ldrb	r3, [r3, #3]
 80054ce:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054d0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fa68 	bl	80059b0 <RTC_ByteToBcd2>
 80054e0:	4603      	mov	r3, r0
 80054e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054e4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054f2:	4313      	orrs	r3, r2
 80054f4:	61fb      	str	r3, [r7, #28]
 80054f6:	e023      	b.n	8005540 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2200      	movs	r2, #0
 800550a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005518:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800551e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	78db      	ldrb	r3, [r3, #3]
 8005524:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005526:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800552e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005530:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005536:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800553c:	4313      	orrs	r3, r2
 800553e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	22ca      	movs	r2, #202	@ 0xca
 8005552:	625a      	str	r2, [r3, #36]	@ 0x24
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2253      	movs	r2, #83	@ 0x53
 800555a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005564:	d14a      	bne.n	80055fc <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005574:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005586:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8005588:	f7fb fe94 	bl	80012b4 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800558e:	e015      	b.n	80055bc <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005590:	f7fb fe90 	bl	80012b4 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800559e:	d90d      	bls.n	80055bc <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	22ff      	movs	r2, #255	@ 0xff
 80055a6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2203      	movs	r2, #3
 80055ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e082      	b.n	80056c2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0e2      	beq.n	8005590 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055e8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055f8:	609a      	str	r2, [r3, #8]
 80055fa:	e049      	b.n	8005690 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800560a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800561c:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800561e:	f7fb fe49 	bl	80012b4 <HAL_GetTick>
 8005622:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005624:	e015      	b.n	8005652 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005626:	f7fb fe45 	bl	80012b4 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005634:	d90d      	bls.n	8005652 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	22ff      	movs	r2, #255	@ 0xff
 800563c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2203      	movs	r2, #3
 8005642:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e037      	b.n	80056c2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0e2      	beq.n	8005626 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800567e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800568e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005690:	4b0e      	ldr	r3, [pc, #56]	@ (80056cc <HAL_RTC_SetAlarm_IT+0x274>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a0d      	ldr	r2, [pc, #52]	@ (80056cc <HAL_RTC_SetAlarm_IT+0x274>)
 8005696:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800569a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800569c:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <HAL_RTC_SetAlarm_IT+0x274>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	4a0a      	ldr	r2, [pc, #40]	@ (80056cc <HAL_RTC_SetAlarm_IT+0x274>)
 80056a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056a6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	22ff      	movs	r2, #255	@ 0xff
 80056ae:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3724      	adds	r7, #36	@ 0x24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd90      	pop	{r4, r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40010400 	.word	0x40010400

080056d0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_RTC_DeactivateAlarm+0x18>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e083      	b.n	80057f0 <HAL_RTC_DeactivateAlarm+0x120>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	22ca      	movs	r2, #202	@ 0xca
 80056fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2253      	movs	r2, #83	@ 0x53
 8005706:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800570e:	d131      	bne.n	8005774 <HAL_RTC_DeactivateAlarm+0xa4>
    /* AlarmA */
#if defined (RTC_ALRMASSR_SSCLR)
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800571e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800572e:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8005730:	f7fb fdc0 	bl	80012b4 <HAL_GetTick>
 8005734:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005736:	e015      	b.n	8005764 <HAL_RTC_DeactivateAlarm+0x94>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005738:	f7fb fdbc 	bl	80012b4 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005746:	d90d      	bls.n	8005764 <HAL_RTC_DeactivateAlarm+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	22ff      	movs	r2, #255	@ 0xff
 800574e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2203      	movs	r2, #3
 8005754:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e045      	b.n	80057f0 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0e2      	beq.n	8005738 <HAL_RTC_DeactivateAlarm+0x68>
 8005772:	e030      	b.n	80057d6 <HAL_RTC_DeactivateAlarm+0x106>
    /* AlarmB */
#if defined (RTC_ALRMBSSR_SSCLR)
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005782:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005792:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8005794:	f7fb fd8e 	bl	80012b4 <HAL_GetTick>
 8005798:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800579a:	e015      	b.n	80057c8 <HAL_RTC_DeactivateAlarm+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800579c:	f7fb fd8a 	bl	80012b4 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057aa:	d90d      	bls.n	80057c8 <HAL_RTC_DeactivateAlarm+0xf8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	22ff      	movs	r2, #255	@ 0xff
 80057b2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2203      	movs	r2, #3
 80057b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e013      	b.n	80057f0 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0e2      	beq.n	800579c <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	22ff      	movs	r2, #255	@ 0xff
 80057dc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005800:	4b1f      	ldr	r3, [pc, #124]	@ (8005880 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005802:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005806:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d012      	beq.n	800583c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00b      	beq.n	800583c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	b2da      	uxtb	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005834:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f004 f844 	bl	80098c4 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d012      	beq.n	8005870 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00b      	beq.n	8005870 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	b2da      	uxtb	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005868:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f9f2 	bl	8005c54 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40010400 	.word	0x40010400

08005884 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a0d      	ldr	r2, [pc, #52]	@ (80058c8 <HAL_RTC_WaitForSynchro+0x44>)
 8005892:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005894:	f7fb fd0e 	bl	80012b4 <HAL_GetTick>
 8005898:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800589a:	e009      	b.n	80058b0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800589c:	f7fb fd0a 	bl	80012b4 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058aa:	d901      	bls.n	80058b0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e007      	b.n	80058c0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0ee      	beq.n	800589c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	0003ff5f 	.word	0x0003ff5f

080058cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d120      	bne.n	8005928 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f04f 32ff 	mov.w	r2, #4294967295
 80058ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80058f0:	f7fb fce0 	bl	80012b4 <HAL_GetTick>
 80058f4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80058f6:	e00d      	b.n	8005914 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80058f8:	f7fb fcdc 	bl	80012b4 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005906:	d905      	bls.n	8005914 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2203      	movs	r2, #3
 8005910:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d102      	bne.n	8005928 <RTC_EnterInitMode+0x5c>
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d1e7      	bne.n	80058f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005940:	4b1a      	ldr	r3, [pc, #104]	@ (80059ac <RTC_ExitInitMode+0x78>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	4a19      	ldr	r2, [pc, #100]	@ (80059ac <RTC_ExitInitMode+0x78>)
 8005946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800594a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800594c:	4b17      	ldr	r3, [pc, #92]	@ (80059ac <RTC_ExitInitMode+0x78>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10c      	bne.n	8005972 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff ff93 	bl	8005884 <HAL_RTC_WaitForSynchro>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01e      	beq.n	80059a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2203      	movs	r2, #3
 8005968:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	73fb      	strb	r3, [r7, #15]
 8005970:	e017      	b.n	80059a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005972:	4b0e      	ldr	r3, [pc, #56]	@ (80059ac <RTC_ExitInitMode+0x78>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	4a0d      	ldr	r2, [pc, #52]	@ (80059ac <RTC_ExitInitMode+0x78>)
 8005978:	f023 0320 	bic.w	r3, r3, #32
 800597c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff ff80 	bl	8005884 <HAL_RTC_WaitForSynchro>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2203      	movs	r2, #3
 800598e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005996:	4b05      	ldr	r3, [pc, #20]	@ (80059ac <RTC_ExitInitMode+0x78>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	4a04      	ldr	r2, [pc, #16]	@ (80059ac <RTC_ExitInitMode+0x78>)
 800599c:	f043 0320 	orr.w	r3, r3, #32
 80059a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40002800 	.word	0x40002800

080059b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80059c2:	e005      	b.n	80059d0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3301      	adds	r3, #1
 80059c8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80059ca:	7afb      	ldrb	r3, [r7, #11]
 80059cc:	3b0a      	subs	r3, #10
 80059ce:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80059d0:	7afb      	ldrb	r3, [r7, #11]
 80059d2:	2b09      	cmp	r3, #9
 80059d4:	d8f6      	bhi.n	80059c4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	7afb      	ldrb	r3, [r7, #11]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	b2db      	uxtb	r3, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	0092      	lsls	r2, r2, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	4413      	add	r3, r2
 8005a16:	b2db      	uxtb	r3, r3
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e07f      	b.n	8005b3e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	22ca      	movs	r2, #202	@ 0xca
 8005a54:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2253      	movs	r2, #83	@ 0x53
 8005a5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a6c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005a7e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d120      	bne.n	8005ad0 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8005a8e:	f7fb fc11 	bl	80012b4 <HAL_GetTick>
 8005a92:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005a94:	e015      	b.n	8005ac2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a96:	f7fb fc0d 	bl	80012b4 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005aa4:	d90d      	bls.n	8005ac2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	22ff      	movs	r2, #255	@ 0xff
 8005aac:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e03d      	b.n	8005b3e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0e2      	beq.n	8005a96 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f023 0107 	bic.w	r1, r3, #7
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005aec:	4b16      	ldr	r3, [pc, #88]	@ (8005b48 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a15      	ldr	r2, [pc, #84]	@ (8005b48 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005af6:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005af8:	4b13      	ldr	r3, [pc, #76]	@ (8005b48 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4a12      	ldr	r2, [pc, #72]	@ (8005b48 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005afe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b02:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b12:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b22:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	22ff      	movs	r2, #255	@ 0xff
 8005b2a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	40010400 	.word	0x40010400

08005b4c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e04d      	b.n	8005bfe <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	22ca      	movs	r2, #202	@ 0xca
 8005b78:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2253      	movs	r2, #83	@ 0x53
 8005b80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b90:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ba0:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005ba2:	f7fb fb87 	bl	80012b4 <HAL_GetTick>
 8005ba6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005ba8:	e015      	b.n	8005bd6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005baa:	f7fb fb83 	bl	80012b4 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bb8:	d90d      	bls.n	8005bd6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	22ff      	movs	r2, #255	@ 0xff
 8005bc0:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2203      	movs	r2, #3
 8005bc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e013      	b.n	8005bfe <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0e2      	beq.n	8005baa <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	22ff      	movs	r2, #255	@ 0xff
 8005bea:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005c10:	4b0f      	ldr	r3, [pc, #60]	@ (8005c50 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8005c12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c16:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005c36:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f003 fe53 	bl	80098e4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40010400 	.word	0x40010400

08005c54 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e095      	b.n	8005da6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d108      	bne.n	8005c94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c8a:	d009      	beq.n	8005ca0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	61da      	str	r2, [r3, #28]
 8005c92:	e005      	b.n	8005ca0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f004 fb68 	bl	800a390 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ce0:	d902      	bls.n	8005ce8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	e002      	b.n	8005cee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005cf6:	d007      	beq.n	8005d08 <HAL_SPI_Init+0xa0>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d00:	d002      	beq.n	8005d08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4a:	ea42 0103 	orr.w	r1, r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d52:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	0c1b      	lsrs	r3, r3, #16
 8005d64:	f003 0204 	and.w	r2, r3, #4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d84:	ea42 0103 	orr.w	r1, r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e01a      	b.n	8005df6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dd6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f004 fb79 	bl	800a4d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b08a      	sub	sp, #40	@ 0x28
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
 8005e0a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e10:	f7fb fa50 	bl	80012b4 <HAL_GetTick>
 8005e14:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e1c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005e24:	887b      	ldrh	r3, [r7, #2]
 8005e26:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005e28:	887b      	ldrh	r3, [r7, #2]
 8005e2a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e2c:	7ffb      	ldrb	r3, [r7, #31]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d00c      	beq.n	8005e4c <HAL_SPI_TransmitReceive+0x4e>
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e38:	d106      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d102      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x4a>
 8005e42:	7ffb      	ldrb	r3, [r7, #31]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d001      	beq.n	8005e4c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e1f3      	b.n	8006234 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x60>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <HAL_SPI_TransmitReceive+0x60>
 8005e58:	887b      	ldrh	r3, [r7, #2]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e1e8      	b.n	8006234 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_SPI_TransmitReceive+0x72>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e1e1      	b.n	8006234 <HAL_SPI_TransmitReceive+0x436>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d003      	beq.n	8005e8c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2205      	movs	r2, #5
 8005e88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	887a      	ldrh	r2, [r7, #2]
 8005e9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	887a      	ldrh	r2, [r7, #2]
 8005ea4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	887a      	ldrh	r2, [r7, #2]
 8005eb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	887a      	ldrh	r2, [r7, #2]
 8005eb8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ece:	d802      	bhi.n	8005ed6 <HAL_SPI_TransmitReceive+0xd8>
 8005ed0:	8abb      	ldrh	r3, [r7, #20]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d908      	bls.n	8005ee8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ee4:	605a      	str	r2, [r3, #4]
 8005ee6:	e007      	b.n	8005ef8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ef6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f02:	2b40      	cmp	r3, #64	@ 0x40
 8005f04:	d007      	beq.n	8005f16 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f1e:	f240 8083 	bls.w	8006028 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <HAL_SPI_TransmitReceive+0x132>
 8005f2a:	8afb      	ldrh	r3, [r7, #22]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d16f      	bne.n	8006010 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f34:	881a      	ldrh	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	1c9a      	adds	r2, r3, #2
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f54:	e05c      	b.n	8006010 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d11b      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x19e>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d016      	beq.n	8005f9c <HAL_SPI_TransmitReceive+0x19e>
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d113      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f78:	881a      	ldrh	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f84:	1c9a      	adds	r2, r3, #2
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d11c      	bne.n	8005fe4 <HAL_SPI_TransmitReceive+0x1e6>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d016      	beq.n	8005fe4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc0:	b292      	uxth	r2, r2
 8005fc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc8:	1c9a      	adds	r2, r3, #2
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fe4:	f7fb f966 	bl	80012b4 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d80d      	bhi.n	8006010 <HAL_SPI_TransmitReceive+0x212>
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d009      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e111      	b.n	8006234 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d19d      	bne.n	8005f56 <HAL_SPI_TransmitReceive+0x158>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d197      	bne.n	8005f56 <HAL_SPI_TransmitReceive+0x158>
 8006026:	e0e5      	b.n	80061f4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <HAL_SPI_TransmitReceive+0x23a>
 8006030:	8afb      	ldrh	r3, [r7, #22]
 8006032:	2b01      	cmp	r3, #1
 8006034:	f040 80d1 	bne.w	80061da <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b01      	cmp	r3, #1
 8006040:	d912      	bls.n	8006068 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006046:	881a      	ldrh	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006052:	1c9a      	adds	r2, r3, #2
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b02      	subs	r3, #2
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006066:	e0b8      	b.n	80061da <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	7812      	ldrb	r2, [r2, #0]
 8006074:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800608e:	e0a4      	b.n	80061da <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b02      	cmp	r3, #2
 800609c:	d134      	bne.n	8006108 <HAL_SPI_TransmitReceive+0x30a>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d02f      	beq.n	8006108 <HAL_SPI_TransmitReceive+0x30a>
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d12c      	bne.n	8006108 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d912      	bls.n	80060de <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	881a      	ldrh	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c8:	1c9a      	adds	r2, r3, #2
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b02      	subs	r3, #2
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060dc:	e012      	b.n	8006104 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	7812      	ldrb	r2, [r2, #0]
 80060ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b01      	cmp	r3, #1
 8006114:	d148      	bne.n	80061a8 <HAL_SPI_TransmitReceive+0x3aa>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d042      	beq.n	80061a8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	d923      	bls.n	8006176 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006138:	b292      	uxth	r2, r2
 800613a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006140:	1c9a      	adds	r2, r3, #2
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b02      	subs	r3, #2
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	d81f      	bhi.n	80061a4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006172:	605a      	str	r2, [r3, #4]
 8006174:	e016      	b.n	80061a4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f103 020c 	add.w	r2, r3, #12
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006182:	7812      	ldrb	r2, [r2, #0]
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061a4:	2301      	movs	r3, #1
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061a8:	f7fb f884 	bl	80012b4 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d803      	bhi.n	80061c0 <HAL_SPI_TransmitReceive+0x3c2>
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d102      	bne.n	80061c6 <HAL_SPI_TransmitReceive+0x3c8>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d109      	bne.n	80061da <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e02c      	b.n	8006234 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f47f af55 	bne.w	8006090 <HAL_SPI_TransmitReceive+0x292>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f47f af4e 	bne.w	8006090 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061f4:	6a3a      	ldr	r2, [r7, #32]
 80061f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f93d 	bl	8006478 <SPI_EndRxTxTransaction>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e00e      	b.n	8006234 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006232:	2300      	movs	r3, #0
  }
}
 8006234:	4618      	mov	r0, r3
 8006236:	3728      	adds	r7, #40	@ 0x28
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	603b      	str	r3, [r7, #0]
 8006248:	4613      	mov	r3, r2
 800624a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800624c:	f7fb f832 	bl	80012b4 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	4413      	add	r3, r2
 800625a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800625c:	f7fb f82a 	bl	80012b4 <HAL_GetTick>
 8006260:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006262:	4b39      	ldr	r3, [pc, #228]	@ (8006348 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	015b      	lsls	r3, r3, #5
 8006268:	0d1b      	lsrs	r3, r3, #20
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	fb02 f303 	mul.w	r3, r2, r3
 8006270:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006272:	e054      	b.n	800631e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	d050      	beq.n	800631e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800627c:	f7fb f81a 	bl	80012b4 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	429a      	cmp	r2, r3
 800628a:	d902      	bls.n	8006292 <SPI_WaitFlagStateUntilTimeout+0x56>
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d13d      	bne.n	800630e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062aa:	d111      	bne.n	80062d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062b4:	d004      	beq.n	80062c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062be:	d107      	bne.n	80062d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d8:	d10f      	bne.n	80062fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e017      	b.n	800633e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	3b01      	subs	r3, #1
 800631c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4013      	ands	r3, r2
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	429a      	cmp	r2, r3
 800632c:	bf0c      	ite	eq
 800632e:	2301      	moveq	r3, #1
 8006330:	2300      	movne	r3, #0
 8006332:	b2db      	uxtb	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	429a      	cmp	r2, r3
 800633a:	d19b      	bne.n	8006274 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000008 	.word	0x20000008

0800634c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08a      	sub	sp, #40	@ 0x28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800635e:	f7fa ffa9 	bl	80012b4 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006366:	1a9b      	subs	r3, r3, r2
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	4413      	add	r3, r2
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800636e:	f7fa ffa1 	bl	80012b4 <HAL_GetTick>
 8006372:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800637c:	4b3d      	ldr	r3, [pc, #244]	@ (8006474 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	00da      	lsls	r2, r3, #3
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	0d1b      	lsrs	r3, r3, #20
 800638c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800638e:	fb02 f303 	mul.w	r3, r2, r3
 8006392:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006394:	e060      	b.n	8006458 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800639c:	d107      	bne.n	80063ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d050      	beq.n	8006458 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063b6:	f7fa ff7d 	bl	80012b4 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d902      	bls.n	80063cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d13d      	bne.n	8006448 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063e4:	d111      	bne.n	800640a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ee:	d004      	beq.n	80063fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f8:	d107      	bne.n	800640a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006408:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006412:	d10f      	bne.n	8006434 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006432:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e010      	b.n	800646a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	3b01      	subs	r3, #1
 8006456:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4013      	ands	r3, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	429a      	cmp	r2, r3
 8006466:	d196      	bne.n	8006396 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3728      	adds	r7, #40	@ 0x28
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000008 	.word	0x20000008

08006478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2200      	movs	r2, #0
 800648c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7ff ff5b 	bl	800634c <SPI_WaitFifoStateUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064a0:	f043 0220 	orr.w	r2, r3, #32
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e027      	b.n	80064fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	2180      	movs	r1, #128	@ 0x80
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f7ff fec0 	bl	800623c <SPI_WaitFlagStateUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064c6:	f043 0220 	orr.w	r2, r3, #32
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e014      	b.n	80064fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2200      	movs	r2, #0
 80064da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7ff ff34 	bl	800634c <SPI_WaitFifoStateUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ee:	f043 0220 	orr.w	r2, r3, #32
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e000      	b.n	80064fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e040      	b.n	8006598 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f003 fff8 	bl	800a51c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2224      	movs	r2, #36	@ 0x24
 8006530:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0201 	bic.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 ffe4 	bl	8007518 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fd87 	bl	8007064 <UART_SetConfig>
 8006556:	4603      	mov	r3, r0
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e01b      	b.n	8006598 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800656e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800657e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0201 	orr.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 f863 	bl	800765c <UART_CheckIdleState>
 8006596:	4603      	mov	r3, r0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e02f      	b.n	8006612 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2224      	movs	r2, #36	@ 0x24
 80065b6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0201 	bic.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2200      	movs	r2, #0
 80065d6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2200      	movs	r2, #0
 80065de:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f004 f899 	bl	800a718 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_RESET;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b08a      	sub	sp, #40	@ 0x28
 800661e:	af02      	add	r7, sp, #8
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	603b      	str	r3, [r7, #0]
 8006626:	4613      	mov	r3, r2
 8006628:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800662e:	2b20      	cmp	r3, #32
 8006630:	d177      	bne.n	8006722 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_UART_Transmit+0x24>
 8006638:	88fb      	ldrh	r3, [r7, #6]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e070      	b.n	8006724 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2221      	movs	r2, #33	@ 0x21
 800664e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006650:	f7fa fe30 	bl	80012b4 <HAL_GetTick>
 8006654:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	88fa      	ldrh	r2, [r7, #6]
 800665a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	88fa      	ldrh	r2, [r7, #6]
 8006662:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666e:	d108      	bne.n	8006682 <HAL_UART_Transmit+0x68>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006678:	2300      	movs	r3, #0
 800667a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	e003      	b.n	800668a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800668a:	e02f      	b.n	80066ec <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2200      	movs	r2, #0
 8006694:	2180      	movs	r1, #128	@ 0x80
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f001 f888 	bl	80077ac <UART_WaitOnFlagUntilTimeout>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d004      	beq.n	80066ac <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e03b      	b.n	8006724 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10b      	bne.n	80066ca <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	881a      	ldrh	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066be:	b292      	uxth	r2, r2
 80066c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	3302      	adds	r3, #2
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	e007      	b.n	80066da <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	3301      	adds	r3, #1
 80066d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1c9      	bne.n	800668c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2200      	movs	r2, #0
 8006700:	2140      	movs	r1, #64	@ 0x40
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f001 f852 	bl	80077ac <UART_WaitOnFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d004      	beq.n	8006718 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2220      	movs	r2, #32
 8006712:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e005      	b.n	8006724 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	e000      	b.n	8006724 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006722:	2302      	movs	r3, #2
  }
}
 8006724:	4618      	mov	r0, r3
 8006726:	3720      	adds	r7, #32
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	@ 0x28
 8006730:	af02      	add	r7, sp, #8
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	603b      	str	r3, [r7, #0]
 8006738:	4613      	mov	r3, r2
 800673a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006742:	2b20      	cmp	r3, #32
 8006744:	f040 80b6 	bne.w	80068b4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_UART_Receive+0x28>
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e0ae      	b.n	80068b6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2222      	movs	r2, #34	@ 0x22
 8006764:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800676e:	f7fa fda1 	bl	80012b4 <HAL_GetTick>
 8006772:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	88fa      	ldrh	r2, [r7, #6]
 8006778:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	88fa      	ldrh	r2, [r7, #6]
 8006780:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800678c:	d10e      	bne.n	80067ac <HAL_UART_Receive+0x80>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d105      	bne.n	80067a2 <HAL_UART_Receive+0x76>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800679c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067a0:	e02d      	b.n	80067fe <HAL_UART_Receive+0xd2>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	22ff      	movs	r2, #255	@ 0xff
 80067a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067aa:	e028      	b.n	80067fe <HAL_UART_Receive+0xd2>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10d      	bne.n	80067d0 <HAL_UART_Receive+0xa4>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d104      	bne.n	80067c6 <HAL_UART_Receive+0x9a>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	22ff      	movs	r2, #255	@ 0xff
 80067c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067c4:	e01b      	b.n	80067fe <HAL_UART_Receive+0xd2>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	227f      	movs	r2, #127	@ 0x7f
 80067ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067ce:	e016      	b.n	80067fe <HAL_UART_Receive+0xd2>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067d8:	d10d      	bne.n	80067f6 <HAL_UART_Receive+0xca>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d104      	bne.n	80067ec <HAL_UART_Receive+0xc0>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	227f      	movs	r2, #127	@ 0x7f
 80067e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067ea:	e008      	b.n	80067fe <HAL_UART_Receive+0xd2>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	223f      	movs	r2, #63	@ 0x3f
 80067f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067f4:	e003      	b.n	80067fe <HAL_UART_Receive+0xd2>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006804:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800680e:	d108      	bne.n	8006822 <HAL_UART_Receive+0xf6>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006818:	2300      	movs	r3, #0
 800681a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	61bb      	str	r3, [r7, #24]
 8006820:	e003      	b.n	800682a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800682a:	e037      	b.n	800689c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2200      	movs	r2, #0
 8006834:	2120      	movs	r1, #32
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 ffb8 	bl	80077ac <UART_WaitOnFlagUntilTimeout>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e033      	b.n	80068b6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10c      	bne.n	800686e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800685a:	b29a      	uxth	r2, r3
 800685c:	8a7b      	ldrh	r3, [r7, #18]
 800685e:	4013      	ands	r3, r2
 8006860:	b29a      	uxth	r2, r3
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	3302      	adds	r3, #2
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	e00d      	b.n	800688a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006874:	b29b      	uxth	r3, r3
 8006876:	b2da      	uxtb	r2, r3
 8006878:	8a7b      	ldrh	r3, [r7, #18]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	4013      	ands	r3, r2
 800687e:	b2da      	uxtb	r2, r3
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	3301      	adds	r3, #1
 8006888:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1c1      	bne.n	800682c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	e000      	b.n	80068b6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80068b4:	2302      	movs	r3, #2
  }
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	@ 0x28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	4613      	mov	r3, r2
 80068cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d137      	bne.n	8006948 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_UART_Receive_IT+0x24>
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e030      	b.n	800694a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a18      	ldr	r2, [pc, #96]	@ (8006954 <HAL_UART_Receive_IT+0x94>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d01f      	beq.n	8006938 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d018      	beq.n	8006938 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	613b      	str	r3, [r7, #16]
   return(result);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800691a:	627b      	str	r3, [r7, #36]	@ 0x24
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	623b      	str	r3, [r7, #32]
 8006926:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	69f9      	ldr	r1, [r7, #28]
 800692a:	6a3a      	ldr	r2, [r7, #32]
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	61bb      	str	r3, [r7, #24]
   return(result);
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e6      	bne.n	8006906 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006938:	88fb      	ldrh	r3, [r7, #6]
 800693a:	461a      	mov	r2, r3
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 ffa2 	bl	8007888 <UART_Start_Receive_IT>
 8006944:	4603      	mov	r3, r0
 8006946:	e000      	b.n	800694a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006948:	2302      	movs	r3, #2
  }
}
 800694a:	4618      	mov	r0, r3
 800694c:	3728      	adds	r7, #40	@ 0x28
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40008000 	.word	0x40008000

08006958 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	@ 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800696c:	2b20      	cmp	r3, #32
 800696e:	d137      	bne.n	80069e0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_UART_Receive_DMA+0x24>
 8006976:	88fb      	ldrh	r3, [r7, #6]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e030      	b.n	80069e2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a18      	ldr	r2, [pc, #96]	@ (80069ec <HAL_UART_Receive_DMA+0x94>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d01f      	beq.n	80069d0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d018      	beq.n	80069d0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	613b      	str	r3, [r7, #16]
   return(result);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	623b      	str	r3, [r7, #32]
 80069be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	69f9      	ldr	r1, [r7, #28]
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e6      	bne.n	800699e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	461a      	mov	r2, r3
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f001 f81c 	bl	8007a14 <UART_Start_Receive_DMA>
 80069dc:	4603      	mov	r3, r0
 80069de:	e000      	b.n	80069e2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80069e0:	2302      	movs	r3, #2
  }
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3728      	adds	r7, #40	@ 0x28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40008000 	.word	0x40008000

080069f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b0ba      	sub	sp, #232	@ 0xe8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006a1a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006a1e:	4013      	ands	r3, r2
 8006a20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d115      	bne.n	8006a58 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00f      	beq.n	8006a58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d009      	beq.n	8006a58 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 82ca 	beq.w	8006fe2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
      }
      return;
 8006a56:	e2c4      	b.n	8006fe2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 8117 	beq.w	8006c90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a72:	4b85      	ldr	r3, [pc, #532]	@ (8006c88 <HAL_UART_IRQHandler+0x298>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 810a 	beq.w	8006c90 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d011      	beq.n	8006aac <HAL_UART_IRQHandler+0xbc>
 8006a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00b      	beq.n	8006aac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aa2:	f043 0201 	orr.w	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d011      	beq.n	8006adc <HAL_UART_IRQHandler+0xec>
 8006ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ad2:	f043 0204 	orr.w	r2, r3, #4
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d011      	beq.n	8006b0c <HAL_UART_IRQHandler+0x11c>
 8006ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2204      	movs	r2, #4
 8006afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b02:	f043 0202 	orr.w	r2, r3, #2
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d017      	beq.n	8006b48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b1c:	f003 0320 	and.w	r3, r3, #32
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d105      	bne.n	8006b30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2208      	movs	r2, #8
 8006b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b3e:	f043 0208 	orr.w	r2, r3, #8
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d012      	beq.n	8006b7a <HAL_UART_IRQHandler+0x18a>
 8006b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00c      	beq.n	8006b7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b70:	f043 0220 	orr.w	r2, r3, #32
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 8230 	beq.w	8006fe6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00d      	beq.n	8006bae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d007      	beq.n	8006bae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d003      	beq.n	8006bae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc2:	2b40      	cmp	r3, #64	@ 0x40
 8006bc4:	d005      	beq.n	8006bd2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d04f      	beq.n	8006c72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 ffe4 	bl	8007ba0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be2:	2b40      	cmp	r3, #64	@ 0x40
 8006be4:	d141      	bne.n	8006c6a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3308      	adds	r3, #8
 8006bec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1d9      	bne.n	8006be6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d013      	beq.n	8006c62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c3e:	4a13      	ldr	r2, [pc, #76]	@ (8006c8c <HAL_UART_IRQHandler+0x29c>)
 8006c40:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fa feb0 	bl	80019ac <HAL_DMA_Abort_IT>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d017      	beq.n	8006c82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c60:	e00f      	b.n	8006c82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f9e8 	bl	8007038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c68:	e00b      	b.n	8006c82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f9e4 	bl	8007038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c70:	e007      	b.n	8006c82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f9e0 	bl	8007038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006c80:	e1b1      	b.n	8006fe6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c82:	bf00      	nop
    return;
 8006c84:	e1af      	b.n	8006fe6 <HAL_UART_IRQHandler+0x5f6>
 8006c86:	bf00      	nop
 8006c88:	04000120 	.word	0x04000120
 8006c8c:	08007e51 	.word	0x08007e51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	f040 816a 	bne.w	8006f6e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c9e:	f003 0310 	and.w	r3, r3, #16
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 8163 	beq.w	8006f6e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 815c 	beq.w	8006f6e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2210      	movs	r2, #16
 8006cbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc8:	2b40      	cmp	r3, #64	@ 0x40
 8006cca:	f040 80d4 	bne.w	8006e76 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80ad 	beq.w	8006e3e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	f080 80a5 	bcs.w	8006e3e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cfa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0320 	and.w	r3, r3, #32
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 8086 	bne.w	8006e1c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d3e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1da      	bne.n	8006d10 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d6c:	f023 0301 	bic.w	r3, r3, #1
 8006d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3308      	adds	r3, #8
 8006d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e1      	bne.n	8006d5a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3308      	adds	r3, #8
 8006db6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006dba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006dc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006dc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e3      	bne.n	8006d96 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006dea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dec:	f023 0310 	bic.w	r3, r3, #16
 8006df0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e4      	bne.n	8006ddc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fa fd8a 	bl	8001930 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f908 	bl	800704c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006e3c:	e0d5      	b.n	8006fea <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	f040 80ce 	bne.w	8006fea <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	f040 80c5 	bne.w	8006fea <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f8ec 	bl	800704c <HAL_UARTEx_RxEventCallback>
      return;
 8006e74:	e0b9      	b.n	8006fea <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80ab 	beq.w	8006fee <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 80a6 	beq.w	8006fee <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ec6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e4      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3308      	adds	r3, #8
 8006ede:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	f023 0301 	bic.w	r3, r3, #1
 8006eee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006efc:	633a      	str	r2, [r7, #48]	@ 0x30
 8006efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e3      	bne.n	8006ed8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f023 0310 	bic.w	r3, r3, #16
 8006f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	69b9      	ldr	r1, [r7, #24]
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	617b      	str	r3, [r7, #20]
   return(result);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e4      	bne.n	8006f24 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f870 	bl	800704c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f6c:	e03f      	b.n	8006fee <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00e      	beq.n	8006f98 <HAL_UART_IRQHandler+0x5a8>
 8006f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d008      	beq.n	8006f98 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006f8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 f959 	bl	8008248 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f96:	e02d      	b.n	8006ff4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d008      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01c      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	4798      	blx	r3
    }
    return;
 8006fc0:	e017      	b.n	8006ff2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d012      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x604>
 8006fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 ff4e 	bl	8007e7c <UART_EndTransmit_IT>
    return;
 8006fe0:	e008      	b.n	8006ff4 <HAL_UART_IRQHandler+0x604>
      return;
 8006fe2:	bf00      	nop
 8006fe4:	e006      	b.n	8006ff4 <HAL_UART_IRQHandler+0x604>
    return;
 8006fe6:	bf00      	nop
 8006fe8:	e004      	b.n	8006ff4 <HAL_UART_IRQHandler+0x604>
      return;
 8006fea:	bf00      	nop
 8006fec:	e002      	b.n	8006ff4 <HAL_UART_IRQHandler+0x604>
      return;
 8006fee:	bf00      	nop
 8006ff0:	e000      	b.n	8006ff4 <HAL_UART_IRQHandler+0x604>
    return;
 8006ff2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ff4:	37e8      	adds	r7, #232	@ 0xe8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop

08006ffc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007068:	b08a      	sub	sp, #40	@ 0x28
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	431a      	orrs	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	431a      	orrs	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	4313      	orrs	r3, r2
 800708a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4b9e      	ldr	r3, [pc, #632]	@ (800730c <UART_SetConfig+0x2a8>)
 8007094:	4013      	ands	r3, r2
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	6812      	ldr	r2, [r2, #0]
 800709a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800709c:	430b      	orrs	r3, r1
 800709e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a93      	ldr	r2, [pc, #588]	@ (8007310 <UART_SetConfig+0x2ac>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070cc:	4313      	orrs	r3, r2
 80070ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070e0:	430a      	orrs	r2, r1
 80070e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a8a      	ldr	r2, [pc, #552]	@ (8007314 <UART_SetConfig+0x2b0>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d126      	bne.n	800713c <UART_SetConfig+0xd8>
 80070ee:	4b8a      	ldr	r3, [pc, #552]	@ (8007318 <UART_SetConfig+0x2b4>)
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f4:	f003 0303 	and.w	r3, r3, #3
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d81b      	bhi.n	8007134 <UART_SetConfig+0xd0>
 80070fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007104 <UART_SetConfig+0xa0>)
 80070fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007102:	bf00      	nop
 8007104:	08007115 	.word	0x08007115
 8007108:	08007125 	.word	0x08007125
 800710c:	0800711d 	.word	0x0800711d
 8007110:	0800712d 	.word	0x0800712d
 8007114:	2301      	movs	r3, #1
 8007116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800711a:	e0ab      	b.n	8007274 <UART_SetConfig+0x210>
 800711c:	2302      	movs	r3, #2
 800711e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007122:	e0a7      	b.n	8007274 <UART_SetConfig+0x210>
 8007124:	2304      	movs	r3, #4
 8007126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800712a:	e0a3      	b.n	8007274 <UART_SetConfig+0x210>
 800712c:	2308      	movs	r3, #8
 800712e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007132:	e09f      	b.n	8007274 <UART_SetConfig+0x210>
 8007134:	2310      	movs	r3, #16
 8007136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800713a:	e09b      	b.n	8007274 <UART_SetConfig+0x210>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a76      	ldr	r2, [pc, #472]	@ (800731c <UART_SetConfig+0x2b8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d138      	bne.n	80071b8 <UART_SetConfig+0x154>
 8007146:	4b74      	ldr	r3, [pc, #464]	@ (8007318 <UART_SetConfig+0x2b4>)
 8007148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800714c:	f003 030c 	and.w	r3, r3, #12
 8007150:	2b0c      	cmp	r3, #12
 8007152:	d82d      	bhi.n	80071b0 <UART_SetConfig+0x14c>
 8007154:	a201      	add	r2, pc, #4	@ (adr r2, 800715c <UART_SetConfig+0xf8>)
 8007156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715a:	bf00      	nop
 800715c:	08007191 	.word	0x08007191
 8007160:	080071b1 	.word	0x080071b1
 8007164:	080071b1 	.word	0x080071b1
 8007168:	080071b1 	.word	0x080071b1
 800716c:	080071a1 	.word	0x080071a1
 8007170:	080071b1 	.word	0x080071b1
 8007174:	080071b1 	.word	0x080071b1
 8007178:	080071b1 	.word	0x080071b1
 800717c:	08007199 	.word	0x08007199
 8007180:	080071b1 	.word	0x080071b1
 8007184:	080071b1 	.word	0x080071b1
 8007188:	080071b1 	.word	0x080071b1
 800718c:	080071a9 	.word	0x080071a9
 8007190:	2300      	movs	r3, #0
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007196:	e06d      	b.n	8007274 <UART_SetConfig+0x210>
 8007198:	2302      	movs	r3, #2
 800719a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800719e:	e069      	b.n	8007274 <UART_SetConfig+0x210>
 80071a0:	2304      	movs	r3, #4
 80071a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071a6:	e065      	b.n	8007274 <UART_SetConfig+0x210>
 80071a8:	2308      	movs	r3, #8
 80071aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ae:	e061      	b.n	8007274 <UART_SetConfig+0x210>
 80071b0:	2310      	movs	r3, #16
 80071b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071b6:	e05d      	b.n	8007274 <UART_SetConfig+0x210>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a58      	ldr	r2, [pc, #352]	@ (8007320 <UART_SetConfig+0x2bc>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d125      	bne.n	800720e <UART_SetConfig+0x1aa>
 80071c2:	4b55      	ldr	r3, [pc, #340]	@ (8007318 <UART_SetConfig+0x2b4>)
 80071c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80071cc:	2b30      	cmp	r3, #48	@ 0x30
 80071ce:	d016      	beq.n	80071fe <UART_SetConfig+0x19a>
 80071d0:	2b30      	cmp	r3, #48	@ 0x30
 80071d2:	d818      	bhi.n	8007206 <UART_SetConfig+0x1a2>
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	d00a      	beq.n	80071ee <UART_SetConfig+0x18a>
 80071d8:	2b20      	cmp	r3, #32
 80071da:	d814      	bhi.n	8007206 <UART_SetConfig+0x1a2>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <UART_SetConfig+0x182>
 80071e0:	2b10      	cmp	r3, #16
 80071e2:	d008      	beq.n	80071f6 <UART_SetConfig+0x192>
 80071e4:	e00f      	b.n	8007206 <UART_SetConfig+0x1a2>
 80071e6:	2300      	movs	r3, #0
 80071e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ec:	e042      	b.n	8007274 <UART_SetConfig+0x210>
 80071ee:	2302      	movs	r3, #2
 80071f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071f4:	e03e      	b.n	8007274 <UART_SetConfig+0x210>
 80071f6:	2304      	movs	r3, #4
 80071f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fc:	e03a      	b.n	8007274 <UART_SetConfig+0x210>
 80071fe:	2308      	movs	r3, #8
 8007200:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007204:	e036      	b.n	8007274 <UART_SetConfig+0x210>
 8007206:	2310      	movs	r3, #16
 8007208:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800720c:	e032      	b.n	8007274 <UART_SetConfig+0x210>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a3f      	ldr	r2, [pc, #252]	@ (8007310 <UART_SetConfig+0x2ac>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d12a      	bne.n	800726e <UART_SetConfig+0x20a>
 8007218:	4b3f      	ldr	r3, [pc, #252]	@ (8007318 <UART_SetConfig+0x2b4>)
 800721a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800721e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007222:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007226:	d01a      	beq.n	800725e <UART_SetConfig+0x1fa>
 8007228:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800722c:	d81b      	bhi.n	8007266 <UART_SetConfig+0x202>
 800722e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007232:	d00c      	beq.n	800724e <UART_SetConfig+0x1ea>
 8007234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007238:	d815      	bhi.n	8007266 <UART_SetConfig+0x202>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <UART_SetConfig+0x1e2>
 800723e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007242:	d008      	beq.n	8007256 <UART_SetConfig+0x1f2>
 8007244:	e00f      	b.n	8007266 <UART_SetConfig+0x202>
 8007246:	2300      	movs	r3, #0
 8007248:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800724c:	e012      	b.n	8007274 <UART_SetConfig+0x210>
 800724e:	2302      	movs	r3, #2
 8007250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007254:	e00e      	b.n	8007274 <UART_SetConfig+0x210>
 8007256:	2304      	movs	r3, #4
 8007258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800725c:	e00a      	b.n	8007274 <UART_SetConfig+0x210>
 800725e:	2308      	movs	r3, #8
 8007260:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007264:	e006      	b.n	8007274 <UART_SetConfig+0x210>
 8007266:	2310      	movs	r3, #16
 8007268:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800726c:	e002      	b.n	8007274 <UART_SetConfig+0x210>
 800726e:	2310      	movs	r3, #16
 8007270:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a25      	ldr	r2, [pc, #148]	@ (8007310 <UART_SetConfig+0x2ac>)
 800727a:	4293      	cmp	r3, r2
 800727c:	f040 808a 	bne.w	8007394 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007280:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007284:	2b08      	cmp	r3, #8
 8007286:	d824      	bhi.n	80072d2 <UART_SetConfig+0x26e>
 8007288:	a201      	add	r2, pc, #4	@ (adr r2, 8007290 <UART_SetConfig+0x22c>)
 800728a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728e:	bf00      	nop
 8007290:	080072b5 	.word	0x080072b5
 8007294:	080072d3 	.word	0x080072d3
 8007298:	080072bd 	.word	0x080072bd
 800729c:	080072d3 	.word	0x080072d3
 80072a0:	080072c3 	.word	0x080072c3
 80072a4:	080072d3 	.word	0x080072d3
 80072a8:	080072d3 	.word	0x080072d3
 80072ac:	080072d3 	.word	0x080072d3
 80072b0:	080072cb 	.word	0x080072cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072b4:	f7fd f9e8 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 80072b8:	61f8      	str	r0, [r7, #28]
        break;
 80072ba:	e010      	b.n	80072de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072bc:	4b19      	ldr	r3, [pc, #100]	@ (8007324 <UART_SetConfig+0x2c0>)
 80072be:	61fb      	str	r3, [r7, #28]
        break;
 80072c0:	e00d      	b.n	80072de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c2:	f7fd f949 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 80072c6:	61f8      	str	r0, [r7, #28]
        break;
 80072c8:	e009      	b.n	80072de <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ce:	61fb      	str	r3, [r7, #28]
        break;
 80072d0:	e005      	b.n	80072de <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 8109 	beq.w	80074f8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	4413      	add	r3, r2
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d305      	bcc.n	8007302 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d912      	bls.n	8007328 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007308:	e0f6      	b.n	80074f8 <UART_SetConfig+0x494>
 800730a:	bf00      	nop
 800730c:	efff69f3 	.word	0xefff69f3
 8007310:	40008000 	.word	0x40008000
 8007314:	40013800 	.word	0x40013800
 8007318:	40021000 	.word	0x40021000
 800731c:	40004400 	.word	0x40004400
 8007320:	40004800 	.word	0x40004800
 8007324:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2200      	movs	r2, #0
 800732c:	461c      	mov	r4, r3
 800732e:	4615      	mov	r5, r2
 8007330:	f04f 0200 	mov.w	r2, #0
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	022b      	lsls	r3, r5, #8
 800733a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800733e:	0222      	lsls	r2, r4, #8
 8007340:	68f9      	ldr	r1, [r7, #12]
 8007342:	6849      	ldr	r1, [r1, #4]
 8007344:	0849      	lsrs	r1, r1, #1
 8007346:	2000      	movs	r0, #0
 8007348:	4688      	mov	r8, r1
 800734a:	4681      	mov	r9, r0
 800734c:	eb12 0a08 	adds.w	sl, r2, r8
 8007350:	eb43 0b09 	adc.w	fp, r3, r9
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007362:	4650      	mov	r0, sl
 8007364:	4659      	mov	r1, fp
 8007366:	f7f9 fc3f 	bl	8000be8 <__aeabi_uldivmod>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4613      	mov	r3, r2
 8007370:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007378:	d308      	bcc.n	800738c <UART_SetConfig+0x328>
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007380:	d204      	bcs.n	800738c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	60da      	str	r2, [r3, #12]
 800738a:	e0b5      	b.n	80074f8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007392:	e0b1      	b.n	80074f8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800739c:	d15d      	bne.n	800745a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800739e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073a2:	2b08      	cmp	r3, #8
 80073a4:	d827      	bhi.n	80073f6 <UART_SetConfig+0x392>
 80073a6:	a201      	add	r2, pc, #4	@ (adr r2, 80073ac <UART_SetConfig+0x348>)
 80073a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ac:	080073d1 	.word	0x080073d1
 80073b0:	080073d9 	.word	0x080073d9
 80073b4:	080073e1 	.word	0x080073e1
 80073b8:	080073f7 	.word	0x080073f7
 80073bc:	080073e7 	.word	0x080073e7
 80073c0:	080073f7 	.word	0x080073f7
 80073c4:	080073f7 	.word	0x080073f7
 80073c8:	080073f7 	.word	0x080073f7
 80073cc:	080073ef 	.word	0x080073ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d0:	f7fd f95a 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 80073d4:	61f8      	str	r0, [r7, #28]
        break;
 80073d6:	e014      	b.n	8007402 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073d8:	f7fd f96c 	bl	80046b4 <HAL_RCC_GetPCLK2Freq>
 80073dc:	61f8      	str	r0, [r7, #28]
        break;
 80073de:	e010      	b.n	8007402 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e0:	4b4c      	ldr	r3, [pc, #304]	@ (8007514 <UART_SetConfig+0x4b0>)
 80073e2:	61fb      	str	r3, [r7, #28]
        break;
 80073e4:	e00d      	b.n	8007402 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073e6:	f7fd f8b7 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 80073ea:	61f8      	str	r0, [r7, #28]
        break;
 80073ec:	e009      	b.n	8007402 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073f2:	61fb      	str	r3, [r7, #28]
        break;
 80073f4:	e005      	b.n	8007402 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007400:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d077      	beq.n	80074f8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	005a      	lsls	r2, r3, #1
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	085b      	lsrs	r3, r3, #1
 8007412:	441a      	add	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	fbb2 f3f3 	udiv	r3, r2, r3
 800741c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	2b0f      	cmp	r3, #15
 8007422:	d916      	bls.n	8007452 <UART_SetConfig+0x3ee>
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800742a:	d212      	bcs.n	8007452 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	b29b      	uxth	r3, r3
 8007430:	f023 030f 	bic.w	r3, r3, #15
 8007434:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	085b      	lsrs	r3, r3, #1
 800743a:	b29b      	uxth	r3, r3
 800743c:	f003 0307 	and.w	r3, r3, #7
 8007440:	b29a      	uxth	r2, r3
 8007442:	8afb      	ldrh	r3, [r7, #22]
 8007444:	4313      	orrs	r3, r2
 8007446:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	8afa      	ldrh	r2, [r7, #22]
 800744e:	60da      	str	r2, [r3, #12]
 8007450:	e052      	b.n	80074f8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007458:	e04e      	b.n	80074f8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800745a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800745e:	2b08      	cmp	r3, #8
 8007460:	d827      	bhi.n	80074b2 <UART_SetConfig+0x44e>
 8007462:	a201      	add	r2, pc, #4	@ (adr r2, 8007468 <UART_SetConfig+0x404>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	0800748d 	.word	0x0800748d
 800746c:	08007495 	.word	0x08007495
 8007470:	0800749d 	.word	0x0800749d
 8007474:	080074b3 	.word	0x080074b3
 8007478:	080074a3 	.word	0x080074a3
 800747c:	080074b3 	.word	0x080074b3
 8007480:	080074b3 	.word	0x080074b3
 8007484:	080074b3 	.word	0x080074b3
 8007488:	080074ab 	.word	0x080074ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800748c:	f7fd f8fc 	bl	8004688 <HAL_RCC_GetPCLK1Freq>
 8007490:	61f8      	str	r0, [r7, #28]
        break;
 8007492:	e014      	b.n	80074be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007494:	f7fd f90e 	bl	80046b4 <HAL_RCC_GetPCLK2Freq>
 8007498:	61f8      	str	r0, [r7, #28]
        break;
 800749a:	e010      	b.n	80074be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800749c:	4b1d      	ldr	r3, [pc, #116]	@ (8007514 <UART_SetConfig+0x4b0>)
 800749e:	61fb      	str	r3, [r7, #28]
        break;
 80074a0:	e00d      	b.n	80074be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074a2:	f7fd f859 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 80074a6:	61f8      	str	r0, [r7, #28]
        break;
 80074a8:	e009      	b.n	80074be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ae:	61fb      	str	r3, [r7, #28]
        break;
 80074b0:	e005      	b.n	80074be <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80074bc:	bf00      	nop
    }

    if (pclk != 0U)
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d019      	beq.n	80074f8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	085a      	lsrs	r2, r3, #1
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	441a      	add	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	2b0f      	cmp	r3, #15
 80074dc:	d909      	bls.n	80074f2 <UART_SetConfig+0x48e>
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074e4:	d205      	bcs.n	80074f2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	60da      	str	r2, [r3, #12]
 80074f0:	e002      	b.n	80074f8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007504:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007508:	4618      	mov	r0, r3
 800750a:	3728      	adds	r7, #40	@ 0x28
 800750c:	46bd      	mov	sp, r7
 800750e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007512:	bf00      	nop
 8007514:	00f42400 	.word	0x00f42400

08007518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758a:	f003 0304 	and.w	r3, r3, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ac:	f003 0310 	and.w	r3, r3, #16
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01a      	beq.n	800762e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007616:	d10a      	bne.n	800762e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	430a      	orrs	r2, r1
 800764e:	605a      	str	r2, [r3, #4]
  }
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b098      	sub	sp, #96	@ 0x60
 8007660:	af02      	add	r7, sp, #8
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800766c:	f7f9 fe22 	bl	80012b4 <HAL_GetTick>
 8007670:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b08      	cmp	r3, #8
 800767e:	d12e      	bne.n	80076de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007680:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007688:	2200      	movs	r2, #0
 800768a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f88c 	bl	80077ac <UART_WaitOnFlagUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d021      	beq.n	80076de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e6      	bne.n	800769a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2220      	movs	r2, #32
 80076d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e062      	b.n	80077a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0304 	and.w	r3, r3, #4
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d149      	bne.n	8007780 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f4:	2200      	movs	r2, #0
 80076f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f856 	bl	80077ac <UART_WaitOnFlagUntilTimeout>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d03c      	beq.n	8007780 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	623b      	str	r3, [r7, #32]
   return(result);
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800771a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007724:	633b      	str	r3, [r7, #48]	@ 0x30
 8007726:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800772a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e6      	bne.n	8007706 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3308      	adds	r3, #8
 800773e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	60fb      	str	r3, [r7, #12]
   return(result);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 0301 	bic.w	r3, r3, #1
 800774e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3308      	adds	r3, #8
 8007756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007758:	61fa      	str	r2, [r7, #28]
 800775a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	69b9      	ldr	r1, [r7, #24]
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	617b      	str	r3, [r7, #20]
   return(result);
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e5      	bne.n	8007738 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2220      	movs	r2, #32
 8007770:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e011      	b.n	80077a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2220      	movs	r2, #32
 800778a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3758      	adds	r7, #88	@ 0x58
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	4613      	mov	r3, r2
 80077ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077bc:	e04f      	b.n	800785e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c4:	d04b      	beq.n	800785e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077c6:	f7f9 fd75 	bl	80012b4 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d302      	bcc.n	80077dc <UART_WaitOnFlagUntilTimeout+0x30>
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e04e      	b.n	800787e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d037      	beq.n	800785e <UART_WaitOnFlagUntilTimeout+0xb2>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b80      	cmp	r3, #128	@ 0x80
 80077f2:	d034      	beq.n	800785e <UART_WaitOnFlagUntilTimeout+0xb2>
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b40      	cmp	r3, #64	@ 0x40
 80077f8:	d031      	beq.n	800785e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b08      	cmp	r3, #8
 8007806:	d110      	bne.n	800782a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2208      	movs	r2, #8
 800780e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 f9c5 	bl	8007ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2208      	movs	r2, #8
 800781a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e029      	b.n	800787e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007838:	d111      	bne.n	800785e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 f9ab 	bl	8007ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2220      	movs	r2, #32
 800784e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e00f      	b.n	800787e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69da      	ldr	r2, [r3, #28]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4013      	ands	r3, r2
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	429a      	cmp	r2, r3
 800786c:	bf0c      	ite	eq
 800786e:	2301      	moveq	r3, #1
 8007870:	2300      	movne	r3, #0
 8007872:	b2db      	uxtb	r3, r3
 8007874:	461a      	mov	r2, r3
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	429a      	cmp	r2, r3
 800787a:	d0a0      	beq.n	80077be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007888:	b480      	push	{r7}
 800788a:	b097      	sub	sp, #92	@ 0x5c
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	88fa      	ldrh	r2, [r7, #6]
 80078a0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	88fa      	ldrh	r2, [r7, #6]
 80078a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ba:	d10e      	bne.n	80078da <UART_Start_Receive_IT+0x52>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d105      	bne.n	80078d0 <UART_Start_Receive_IT+0x48>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80078ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078ce:	e02d      	b.n	800792c <UART_Start_Receive_IT+0xa4>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	22ff      	movs	r2, #255	@ 0xff
 80078d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078d8:	e028      	b.n	800792c <UART_Start_Receive_IT+0xa4>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10d      	bne.n	80078fe <UART_Start_Receive_IT+0x76>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d104      	bne.n	80078f4 <UART_Start_Receive_IT+0x6c>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	22ff      	movs	r2, #255	@ 0xff
 80078ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078f2:	e01b      	b.n	800792c <UART_Start_Receive_IT+0xa4>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	227f      	movs	r2, #127	@ 0x7f
 80078f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80078fc:	e016      	b.n	800792c <UART_Start_Receive_IT+0xa4>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007906:	d10d      	bne.n	8007924 <UART_Start_Receive_IT+0x9c>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <UART_Start_Receive_IT+0x92>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	227f      	movs	r2, #127	@ 0x7f
 8007914:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007918:	e008      	b.n	800792c <UART_Start_Receive_IT+0xa4>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	223f      	movs	r2, #63	@ 0x3f
 800791e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007922:	e003      	b.n	800792c <UART_Start_Receive_IT+0xa4>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2222      	movs	r2, #34	@ 0x22
 8007938:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3308      	adds	r3, #8
 8007942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800794c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794e:	f043 0301 	orr.w	r3, r3, #1
 8007952:	657b      	str	r3, [r7, #84]	@ 0x54
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3308      	adds	r3, #8
 800795a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800795c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800795e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800796a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e5      	bne.n	800793c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007978:	d107      	bne.n	800798a <UART_Start_Receive_IT+0x102>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d103      	bne.n	800798a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4a21      	ldr	r2, [pc, #132]	@ (8007a0c <UART_Start_Receive_IT+0x184>)
 8007986:	669a      	str	r2, [r3, #104]	@ 0x68
 8007988:	e002      	b.n	8007990 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4a20      	ldr	r2, [pc, #128]	@ (8007a10 <UART_Start_Receive_IT+0x188>)
 800798e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d019      	beq.n	80079cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80079ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079b8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80079c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e6      	bne.n	8007998 <UART_Start_Receive_IT+0x110>
 80079ca:	e018      	b.n	80079fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	613b      	str	r3, [r7, #16]
   return(result);
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f043 0320 	orr.w	r3, r3, #32
 80079e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ea:	623b      	str	r3, [r7, #32]
 80079ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	69f9      	ldr	r1, [r7, #28]
 80079f0:	6a3a      	ldr	r2, [r7, #32]
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e6      	bne.n	80079cc <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	375c      	adds	r7, #92	@ 0x5c
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	0800808d 	.word	0x0800808d
 8007a10:	08007ed1 	.word	0x08007ed1

08007a14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b096      	sub	sp, #88	@ 0x58
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	88fa      	ldrh	r2, [r7, #6]
 8007a2c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2222      	movs	r2, #34	@ 0x22
 8007a3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d028      	beq.n	8007a9a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a4c:	4a3e      	ldr	r2, [pc, #248]	@ (8007b48 <UART_Start_Receive_DMA+0x134>)
 8007a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a54:	4a3d      	ldr	r2, [pc, #244]	@ (8007b4c <UART_Start_Receive_DMA+0x138>)
 8007a56:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a5c:	4a3c      	ldr	r2, [pc, #240]	@ (8007b50 <UART_Start_Receive_DMA+0x13c>)
 8007a5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a64:	2200      	movs	r2, #0
 8007a66:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3324      	adds	r3, #36	@ 0x24
 8007a72:	4619      	mov	r1, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a78:	461a      	mov	r2, r3
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	f7f9 fef8 	bl	8001870 <HAL_DMA_Start_IT>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d009      	beq.n	8007a9a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2210      	movs	r2, #16
 8007a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e051      	b.n	8007b3e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d018      	beq.n	8007ad4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aaa:	e853 3f00 	ldrex	r3, [r3]
 8007aae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ab6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ac2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e6      	bne.n	8007aa2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	f043 0301 	orr.w	r3, r3, #1
 8007aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3308      	adds	r3, #8
 8007af2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007af4:	637a      	str	r2, [r7, #52]	@ 0x34
 8007af6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007afa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e5      	bne.n	8007ad4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	e853 3f00 	ldrex	r3, [r3]
 8007b16:	613b      	str	r3, [r7, #16]
   return(result);
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3308      	adds	r3, #8
 8007b26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b28:	623a      	str	r2, [r7, #32]
 8007b2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2c:	69f9      	ldr	r1, [r7, #28]
 8007b2e:	6a3a      	ldr	r2, [r7, #32]
 8007b30:	e841 2300 	strex	r3, r2, [r1]
 8007b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e5      	bne.n	8007b08 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3758      	adds	r7, #88	@ 0x58
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	08007c69 	.word	0x08007c69
 8007b4c:	08007d95 	.word	0x08007d95
 8007b50:	08007dd3 	.word	0x08007dd3

08007b54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b089      	sub	sp, #36	@ 0x24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	e853 3f00 	ldrex	r3, [r3]
 8007b68:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007b70:	61fb      	str	r3, [r7, #28]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	61bb      	str	r3, [r7, #24]
 8007b7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7e:	6979      	ldr	r1, [r7, #20]
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	e841 2300 	strex	r3, r2, [r1]
 8007b86:	613b      	str	r3, [r7, #16]
   return(result);
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1e6      	bne.n	8007b5c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2220      	movs	r2, #32
 8007b92:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007b94:	bf00      	nop
 8007b96:	3724      	adds	r7, #36	@ 0x24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b095      	sub	sp, #84	@ 0x54
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e6      	bne.n	8007ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3308      	adds	r3, #8
 8007be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e5      	bne.n	8007bda <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d118      	bne.n	8007c48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	e853 3f00 	ldrex	r3, [r3]
 8007c22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f023 0310 	bic.w	r3, r3, #16
 8007c2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	461a      	mov	r2, r3
 8007c32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c34:	61bb      	str	r3, [r7, #24]
 8007c36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	6979      	ldr	r1, [r7, #20]
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	e841 2300 	strex	r3, r2, [r1]
 8007c40:	613b      	str	r3, [r7, #16]
   return(result);
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e6      	bne.n	8007c16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007c5c:	bf00      	nop
 8007c5e:	3754      	adds	r7, #84	@ 0x54
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b09c      	sub	sp, #112	@ 0x70
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c74:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0320 	and.w	r3, r3, #32
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d171      	bne.n	8007d68 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007caa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e6      	bne.n	8007c8c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd0:	f023 0301 	bic.w	r3, r3, #1
 8007cd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007cde:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ce0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ce4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e5      	bne.n	8007cbe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	623b      	str	r3, [r7, #32]
   return(result);
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d08:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3308      	adds	r3, #8
 8007d10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d12:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e5      	bne.n	8007cf2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d28:	2220      	movs	r2, #32
 8007d2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d118      	bne.n	8007d68 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0310 	bic.w	r3, r3, #16
 8007d4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	69b9      	ldr	r1, [r7, #24]
 8007d5a:	69fa      	ldr	r2, [r7, #28]
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	617b      	str	r3, [r7, #20]
   return(result);
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e6      	bne.n	8007d36 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d107      	bne.n	8007d86 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d80:	f7ff f964 	bl	800704c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d84:	e002      	b.n	8007d8c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007d86:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007d88:	f7ff f942 	bl	8007010 <HAL_UART_RxCpltCallback>
}
 8007d8c:	bf00      	nop
 8007d8e:	3770      	adds	r7, #112	@ 0x70
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2201      	movs	r2, #1
 8007da6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d109      	bne.n	8007dc4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	4619      	mov	r1, r3
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7ff f945 	bl	800704c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007dc2:	e002      	b.n	8007dca <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff f92d 	bl	8007024 <HAL_UART_RxHalfCpltCallback>
}
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b086      	sub	sp, #24
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dde:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007de4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007df8:	2b80      	cmp	r3, #128	@ 0x80
 8007dfa:	d109      	bne.n	8007e10 <UART_DMAError+0x3e>
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2b21      	cmp	r3, #33	@ 0x21
 8007e00:	d106      	bne.n	8007e10 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8007e0a:	6978      	ldr	r0, [r7, #20]
 8007e0c:	f7ff fea2 	bl	8007b54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1a:	2b40      	cmp	r3, #64	@ 0x40
 8007e1c:	d109      	bne.n	8007e32 <UART_DMAError+0x60>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b22      	cmp	r3, #34	@ 0x22
 8007e22:	d106      	bne.n	8007e32 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007e2c:	6978      	ldr	r0, [r7, #20]
 8007e2e:	f7ff feb7 	bl	8007ba0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e38:	f043 0210 	orr.w	r2, r3, #16
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e42:	6978      	ldr	r0, [r7, #20]
 8007e44:	f7ff f8f8 	bl	8007038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e48:	bf00      	nop
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f7ff f8e2 	bl	8007038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e98:	61fb      	str	r3, [r7, #28]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	61bb      	str	r3, [r7, #24]
 8007ea4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6979      	ldr	r1, [r7, #20]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e6      	bne.n	8007e84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff f89a 	bl	8006ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ec8:	bf00      	nop
 8007eca:	3720      	adds	r7, #32
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b09c      	sub	sp, #112	@ 0x70
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ede:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ee8:	2b22      	cmp	r3, #34	@ 0x22
 8007eea:	f040 80be 	bne.w	800806a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ef4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ef8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007efc:	b2d9      	uxtb	r1, r3
 8007efe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007f02:	b2da      	uxtb	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f08:	400a      	ands	r2, r1
 8007f0a:	b2d2      	uxtb	r2, r2
 8007f0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	3b01      	subs	r3, #1
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f040 80a3 	bne.w	800807e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f58:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f5e:	e841 2300 	strex	r3, r2, [r1]
 8007f62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e6      	bne.n	8007f38 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3308      	adds	r3, #8
 8007f70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f7c:	f023 0301 	bic.w	r3, r3, #1
 8007f80:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3308      	adds	r3, #8
 8007f88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007f8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e5      	bne.n	8007f6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a34      	ldr	r2, [pc, #208]	@ (8008088 <UART_RxISR_8BIT+0x1b8>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d01f      	beq.n	8007ffc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d018      	beq.n	8007ffc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	623b      	str	r3, [r7, #32]
   return(result);
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007fde:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e6      	bne.n	8007fca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008000:	2b01      	cmp	r3, #1
 8008002:	d12e      	bne.n	8008062 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	e853 3f00 	ldrex	r3, [r3]
 8008016:	60fb      	str	r3, [r7, #12]
   return(result);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0310 	bic.w	r3, r3, #16
 800801e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008028:	61fb      	str	r3, [r7, #28]
 800802a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	69b9      	ldr	r1, [r7, #24]
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	617b      	str	r3, [r7, #20]
   return(result);
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e6      	bne.n	800800a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	f003 0310 	and.w	r3, r3, #16
 8008046:	2b10      	cmp	r3, #16
 8008048:	d103      	bne.n	8008052 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2210      	movs	r2, #16
 8008050:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fe fff6 	bl	800704c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008060:	e00d      	b.n	800807e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7fe ffd4 	bl	8007010 <HAL_UART_RxCpltCallback>
}
 8008068:	e009      	b.n	800807e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	8b1b      	ldrh	r3, [r3, #24]
 8008070:	b29a      	uxth	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0208 	orr.w	r2, r2, #8
 800807a:	b292      	uxth	r2, r2
 800807c:	831a      	strh	r2, [r3, #24]
}
 800807e:	bf00      	nop
 8008080:	3770      	adds	r7, #112	@ 0x70
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	40008000 	.word	0x40008000

0800808c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b09c      	sub	sp, #112	@ 0x70
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800809a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080a4:	2b22      	cmp	r3, #34	@ 0x22
 80080a6:	f040 80be 	bne.w	8008226 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80080b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80080ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80080be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80080c2:	4013      	ands	r3, r2
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ce:	1c9a      	adds	r2, r3, #2
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080da:	b29b      	uxth	r3, r3
 80080dc:	3b01      	subs	r3, #1
 80080de:	b29a      	uxth	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 80a3 	bne.w	800823a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008102:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008108:	667b      	str	r3, [r7, #100]	@ 0x64
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008112:	657b      	str	r3, [r7, #84]	@ 0x54
 8008114:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008118:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e6      	bne.n	80080f4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3308      	adds	r3, #8
 800812c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	f023 0301 	bic.w	r3, r3, #1
 800813c:	663b      	str	r3, [r7, #96]	@ 0x60
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3308      	adds	r3, #8
 8008144:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008146:	643a      	str	r2, [r7, #64]	@ 0x40
 8008148:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800814c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e5      	bne.n	8008126 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2220      	movs	r2, #32
 800815e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a34      	ldr	r2, [pc, #208]	@ (8008244 <UART_RxISR_16BIT+0x1b8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d01f      	beq.n	80081b8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d018      	beq.n	80081b8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	61fb      	str	r3, [r7, #28]
   return(result);
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800819a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081a6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ac:	e841 2300 	strex	r3, r2, [r1]
 80081b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e6      	bne.n	8008186 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d12e      	bne.n	800821e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	e853 3f00 	ldrex	r3, [r3]
 80081d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f023 0310 	bic.w	r3, r3, #16
 80081da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	461a      	mov	r2, r3
 80081e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80081e4:	61bb      	str	r3, [r7, #24]
 80081e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	6979      	ldr	r1, [r7, #20]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	613b      	str	r3, [r7, #16]
   return(result);
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e6      	bne.n	80081c6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f003 0310 	and.w	r3, r3, #16
 8008202:	2b10      	cmp	r3, #16
 8008204:	d103      	bne.n	800820e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2210      	movs	r2, #16
 800820c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fe ff18 	bl	800704c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800821c:	e00d      	b.n	800823a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7fe fef6 	bl	8007010 <HAL_UART_RxCpltCallback>
}
 8008224:	e009      	b.n	800823a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	8b1b      	ldrh	r3, [r3, #24]
 800822c:	b29a      	uxth	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f042 0208 	orr.w	r2, r2, #8
 8008236:	b292      	uxth	r2, r2
 8008238:	831a      	strh	r2, [r3, #24]
}
 800823a:	bf00      	nop
 800823c:	3770      	adds	r7, #112	@ 0x70
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	40008000 	.word	0x40008000

08008248 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <acconeer_main_JJH>:
static int Hprintf(const char *format, ...);

int acconeer_main_JJH(int argc, char *argv[]);

int acconeer_main_JJH(int argc, char *argv[])
{
 800825c:	b580      	push	{r7, lr}
 800825e:	ed2d 8b02 	vpush	{d8}
 8008262:	b0ec      	sub	sp, #432	@ 0x1b0
 8008264:	af00      	add	r7, sp, #0
 8008266:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800826a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800826e:	6018      	str	r0, [r3, #0]
 8008270:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008274:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8008278:	6019      	str	r1, [r3, #0]
  (void)argc;
  (void)argv;
  distance_detector_resources_t resources = { 0 };
 800827a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800827e:	2224      	movs	r2, #36	@ 0x24
 8008280:	2100      	movs	r1, #0
 8008282:	4618      	mov	r0, r3
 8008284:	f00d fc3c 	bl	8015b00 <memset>

  char received_uart_data[MAX_BUFFER_SIZE];
  bool change_config = false;
 8008288:	2300      	movs	r3, #0
 800828a:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
  config_settings_t current_config;
  uint32_t startTime = HAL_GetTick();
 800828e:	f7f9 f811 	bl	80012b4 <HAL_GetTick>
 8008292:	f8c7 01a8 	str.w	r0, [r7, #424]	@ 0x1a8
  uint16_t update_counter = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6

  printf("--- INITIALIZATION ---\n");
 800829c:	48d9      	ldr	r0, [pc, #868]	@ (8008604 <acconeer_main_JJH+0x3a8>)
 800829e:	f00d faf1 	bl	8015884 <puts>

  printf("Acconeer software version %s\n", acc_version_get());
 80082a2:	f00b fa6b 	bl	801377c <acc_version_get>
 80082a6:	4603      	mov	r3, r0
 80082a8:	4619      	mov	r1, r3
 80082aa:	48d7      	ldr	r0, [pc, #860]	@ (8008608 <acconeer_main_JJH+0x3ac>)
 80082ac:	f00d fa7a 	bl	80157a4 <iprintf>

  const acc_hal_a121_t *hal = acc_hal_rss_integration_get_implementation();
 80082b0:	f000 ff30 	bl	8009114 <acc_hal_rss_integration_get_implementation>
 80082b4:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0

  if (!acc_rss_hal_register(hal))
 80082b8:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 80082bc:	f006 fcd4 	bl	800ec68 <acc_rss_hal_register>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f083 0301 	eor.w	r3, r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <acconeer_main_JJH+0x74>
  {
    return EXIT_FAILURE;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e192      	b.n	80085f6 <acconeer_main_JJH+0x39a>
  }

  resources.config = acc_detector_distance_config_create();
 80082d0:	f002 fc82 	bl	800abd8 <acc_detector_distance_config_create>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
  if (resources.config == NULL)
 80082da:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d109      	bne.n	80082f6 <acconeer_main_JJH+0x9a>
  {
    printf("acc_detector_distance_config_create() failed\n");
 80082e2:	48ca      	ldr	r0, [pc, #808]	@ (800860c <acconeer_main_JJH+0x3b0>)
 80082e4:	f00d face 	bl	8015884 <puts>
    cleanup(&resources);
 80082e8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 fada 	bl	80088a6 <cleanup>
    return EXIT_FAILURE;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e17f      	b.n	80085f6 <acconeer_main_JJH+0x39a>
  }

  set_config(resources.config, DISTANCE_PRESET_CONFIG_BALANCED);
 80082f6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80082fa:	2103      	movs	r1, #3
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fafd 	bl	80088fc <set_config>

  load_config(&current_config);
 8008302:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008306:	4618      	mov	r0, r3
 8008308:	f000 fa0a 	bl	8008720 <load_config>
  config_menu(&current_config, resources.config);
 800830c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8008310:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008314:	4611      	mov	r1, r2
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fa18 	bl	800874c <config_menu>

  uint32_t sleep_time_ms = (uint32_t)(1000.0f / DEFAULT_UPDATE_RATE);
 800831c:	f240 134d 	movw	r3, #333	@ 0x14d
 8008320:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

  Hprintf("SleepTimeMS: %i\n", sleep_time_ms);
 8008324:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8008328:	48b9      	ldr	r0, [pc, #740]	@ (8008610 <acconeer_main_JJH+0x3b4>)
 800832a:	f000 fa9b 	bl	8008864 <Hprintf>

  acc_integration_set_periodic_wakeup(sleep_time_ms);
 800832e:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8008332:	f001 fb75 	bl	8009a20 <acc_integration_set_periodic_wakeup>

  while(true){

    if (change_config){
 8008336:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 800833a:	2b00      	cmp	r3, #0
 800833c:	d022      	beq.n	8008384 <acconeer_main_JJH+0x128>
      cleanup(&resources);
 800833e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8008342:	4618      	mov	r0, r3
 8008344:	f000 faaf 	bl	80088a6 <cleanup>

      resources.config = acc_detector_distance_config_create();
 8008348:	f002 fc46 	bl	800abd8 <acc_detector_distance_config_create>
 800834c:	4603      	mov	r3, r0
 800834e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
      if (resources.config == NULL)
 8008352:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <acconeer_main_JJH+0x112>
      {
        printf("acc_detector_distance_config_create() failed\n");
 800835a:	48ac      	ldr	r0, [pc, #688]	@ (800860c <acconeer_main_JJH+0x3b0>)
 800835c:	f00d fa92 	bl	8015884 <puts>
        cleanup(&resources);
 8008360:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fa9e 	bl	80088a6 <cleanup>
        return EXIT_FAILURE;
 800836a:	2301      	movs	r3, #1
 800836c:	e143      	b.n	80085f6 <acconeer_main_JJH+0x39a>
      }

      config_menu(&current_config, resources.config);
 800836e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8008372:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008376:	4611      	mov	r1, r2
 8008378:	4618      	mov	r0, r3
 800837a:	f000 f9e7 	bl	800874c <config_menu>
      change_config = false;
 800837e:	2300      	movs	r3, #0
 8008380:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
    }

    if (!initialize_detector_resources(&resources))
 8008384:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fbbf 	bl	8008b0c <initialize_detector_resources>
 800838e:	4603      	mov	r3, r0
 8008390:	f083 0301 	eor.w	r3, r3, #1
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <acconeer_main_JJH+0x152>
    {
      printf("Initializing detector resources failed\n");
 800839a:	489e      	ldr	r0, [pc, #632]	@ (8008614 <acconeer_main_JJH+0x3b8>)
 800839c:	f00d fa72 	bl	8015884 <puts>
      cleanup(&resources);
 80083a0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 fa7e 	bl	80088a6 <cleanup>
      return EXIT_FAILURE;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e123      	b.n	80085f6 <acconeer_main_JJH+0x39a>

    // Print the configuration
//    acc_detector_distance_config_log(resources.handle, resources.config);

    /* Turn the sensor on */
    acc_hal_integration_sensor_supply_on(SENSOR_ID);
 80083ae:	2001      	movs	r0, #1
 80083b0:	f000 fe40 	bl	8009034 <acc_hal_integration_sensor_supply_on>
    acc_hal_integration_sensor_enable(SENSOR_ID);
 80083b4:	2001      	movs	r0, #1
 80083b6:	f000 fe51 	bl	800905c <acc_hal_integration_sensor_enable>

    resources.sensor = acc_sensor_create(SENSOR_ID);
 80083ba:	2001      	movs	r0, #1
 80083bc:	f007 f8fc 	bl	800f5b8 <acc_sensor_create>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    if (resources.sensor == NULL)
 80083c6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d109      	bne.n	80083e2 <acconeer_main_JJH+0x186>
    {
      printf("acc_sensor_create() failed\n");
 80083ce:	4892      	ldr	r0, [pc, #584]	@ (8008618 <acconeer_main_JJH+0x3bc>)
 80083d0:	f00d fa58 	bl	8015884 <puts>
      cleanup(&resources);
 80083d4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fa64 	bl	80088a6 <cleanup>
      return EXIT_FAILURE;
 80083de:	2301      	movs	r3, #1
 80083e0:	e109      	b.n	80085f6 <acconeer_main_JJH+0x39a>
    }

    acc_cal_result_t sensor_cal_result;

    if (!do_sensor_calibration(resources.sensor, &sensor_cal_result, resources.buffer, resources.buffer_size))
 80083e2:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 80083e6:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 80083ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80083ee:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80083f2:	f000 fbe5 	bl	8008bc0 <do_sensor_calibration>
 80083f6:	4603      	mov	r3, r0
 80083f8:	f083 0301 	eor.w	r3, r3, #1
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d009      	beq.n	8008416 <acconeer_main_JJH+0x1ba>
    {
      printf("Sensor calibration failed\n");
 8008402:	4886      	ldr	r0, [pc, #536]	@ (800861c <acconeer_main_JJH+0x3c0>)
 8008404:	f00d fa3e 	bl	8015884 <puts>
      cleanup(&resources);
 8008408:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800840c:	4618      	mov	r0, r3
 800840e:	f000 fa4a 	bl	80088a6 <cleanup>
      return EXIT_FAILURE;
 8008412:	2301      	movs	r3, #1
 8008414:	e0ef      	b.n	80085f6 <acconeer_main_JJH+0x39a>
    }

    if (!do_full_detector_calibration(&resources, &sensor_cal_result))
 8008416:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800841a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800841e:	4611      	mov	r1, r2
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fc22 	bl	8008c6a <do_full_detector_calibration>
 8008426:	4603      	mov	r3, r0
 8008428:	f083 0301 	eor.w	r3, r3, #1
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d009      	beq.n	8008446 <acconeer_main_JJH+0x1ea>
    {
      printf("Detector calibration failed\n");
 8008432:	487b      	ldr	r0, [pc, #492]	@ (8008620 <acconeer_main_JJH+0x3c4>)
 8008434:	f00d fa26 	bl	8015884 <puts>
      cleanup(&resources);
 8008438:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fa32 	bl	80088a6 <cleanup>
      return EXIT_FAILURE;
 8008442:	2301      	movs	r3, #1
 8008444:	e0d7      	b.n	80085f6 <acconeer_main_JJH+0x39a>
    }

    if (current_config.testing_update_rate){
 8008446:	f897 3150 	ldrb.w	r3, [r7, #336]	@ 0x150
 800844a:	2b00      	cmp	r3, #0
 800844c:	d006      	beq.n	800845c <acconeer_main_JJH+0x200>
      startTime = HAL_GetTick();
 800844e:	f7f8 ff31 	bl	80012b4 <HAL_GetTick>
 8008452:	f8c7 01a8 	str.w	r0, [r7, #424]	@ 0x1a8
      update_counter = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
    }

    acc_hal_integration_sensor_disable(SENSOR_ID);
 800845c:	2001      	movs	r0, #1
 800845e:	f000 fe11 	bl	8009084 <acc_hal_integration_sensor_disable>
    acc_hal_integration_sensor_enable(SENSOR_ID);
 8008462:	2001      	movs	r0, #1
 8008464:	f000 fdfa 	bl	800905c <acc_hal_integration_sensor_enable>

    while (!change_config)
 8008468:	e0bc      	b.n	80085e4 <acconeer_main_JJH+0x388>
    {
      acc_detector_distance_result_t result = { 0 };
 800846a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800846e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8008472:	4618      	mov	r0, r3
 8008474:	2364      	movs	r3, #100	@ 0x64
 8008476:	461a      	mov	r2, r3
 8008478:	2100      	movs	r1, #0
 800847a:	f00d fb41 	bl	8015b00 <memset>

      if (!do_detector_get_next(&resources, &sensor_cal_result, &result))
 800847e:	f107 020c 	add.w	r2, r7, #12
 8008482:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8008486:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fc6c 	bl	8008d68 <do_detector_get_next>
 8008490:	4603      	mov	r3, r0
 8008492:	f083 0301 	eor.w	r3, r3, #1
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b00      	cmp	r3, #0
 800849a:	d009      	beq.n	80084b0 <acconeer_main_JJH+0x254>
      {
        printf("Could not get next result\n");
 800849c:	4861      	ldr	r0, [pc, #388]	@ (8008624 <acconeer_main_JJH+0x3c8>)
 800849e:	f00d f9f1 	bl	8015884 <puts>
        cleanup(&resources);
 80084a2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 f9fd 	bl	80088a6 <cleanup>
        return EXIT_FAILURE;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e0a2      	b.n	80085f6 <acconeer_main_JJH+0x39a>
      }

      /* If "calibration needed" is indicated, the sensor needs to be recalibrated and the detector calibration updated */
      if (result.calibration_needed)
 80084b0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80084b4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80084b8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d038      	beq.n	8008532 <acconeer_main_JJH+0x2d6>
      {
        printf("Sensor recalibration and detector calibration update needed ... \n");
 80084c0:	4859      	ldr	r0, [pc, #356]	@ (8008628 <acconeer_main_JJH+0x3cc>)
 80084c2:	f00d f9df 	bl	8015884 <puts>

        if (!do_sensor_calibration(resources.sensor, &sensor_cal_result, resources.buffer, resources.buffer_size))
 80084c6:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 80084ca:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 80084ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80084d2:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80084d6:	f000 fb73 	bl	8008bc0 <do_sensor_calibration>
 80084da:	4603      	mov	r3, r0
 80084dc:	f083 0301 	eor.w	r3, r3, #1
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d009      	beq.n	80084fa <acconeer_main_JJH+0x29e>
        {
          printf("Sensor calibration failed\n");
 80084e6:	484d      	ldr	r0, [pc, #308]	@ (800861c <acconeer_main_JJH+0x3c0>)
 80084e8:	f00d f9cc 	bl	8015884 <puts>
          cleanup(&resources);
 80084ec:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 f9d8 	bl	80088a6 <cleanup>
          return EXIT_FAILURE;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e07d      	b.n	80085f6 <acconeer_main_JJH+0x39a>
        }

        /* Once the sensor is recalibrated, the detector calibration should be updated and measuring can continue. */
        if (!do_detector_calibration_update(&resources, &sensor_cal_result))
 80084fa:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80084fe:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8008502:	4611      	mov	r1, r2
 8008504:	4618      	mov	r0, r3
 8008506:	f000 fbf3 	bl	8008cf0 <do_detector_calibration_update>
 800850a:	4603      	mov	r3, r0
 800850c:	f083 0301 	eor.w	r3, r3, #1
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <acconeer_main_JJH+0x2ce>
        {
          printf("Detector calibration update failed\n");
 8008516:	4845      	ldr	r0, [pc, #276]	@ (800862c <acconeer_main_JJH+0x3d0>)
 8008518:	f00d f9b4 	bl	8015884 <puts>
          cleanup(&resources);
 800851c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8008520:	4618      	mov	r0, r3
 8008522:	f000 f9c0 	bl	80088a6 <cleanup>
          return EXIT_FAILURE;
 8008526:	2301      	movs	r3, #1
 8008528:	e065      	b.n	80085f6 <acconeer_main_JJH+0x39a>
        }

        printf("Sensor recalibration and detector calibration update done!\n");
 800852a:	4841      	ldr	r0, [pc, #260]	@ (8008630 <acconeer_main_JJH+0x3d4>)
 800852c:	f00d f9aa 	bl	8015884 <puts>
 8008530:	e011      	b.n	8008556 <acconeer_main_JJH+0x2fa>
      }

      else
      {
        acc_hal_integration_sensor_disable(SENSOR_ID);
 8008532:	2001      	movs	r0, #1
 8008534:	f000 fda6 	bl	8009084 <acc_hal_integration_sensor_disable>
        print_distance_result(&result);
 8008538:	f107 030c 	add.w	r3, r7, #12
 800853c:	4618      	mov	r0, r3
 800853e:	f000 fc9b 	bl	8008e78 <print_distance_result>
        acc_integration_sleep_until_periodic_wakeup();
 8008542:	f001 fb07 	bl	8009b54 <acc_integration_sleep_until_periodic_wakeup>
        acc_hal_integration_sensor_enable(SENSOR_ID);
 8008546:	2001      	movs	r0, #1
 8008548:	f000 fd88 	bl	800905c <acc_hal_integration_sensor_enable>
        update_counter++;
 800854c:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 8008550:	3301      	adds	r3, #1
 8008552:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
      }

      if (get_esp32_serial(received_uart_data, 1, false)){
 8008556:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 800855a:	2200      	movs	r2, #0
 800855c:	2101      	movs	r1, #1
 800855e:	4618      	mov	r0, r3
 8008560:	f000 f86c 	bl	800863c <get_esp32_serial>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <acconeer_main_JJH+0x314>
        change_config = true;
 800856a:	2301      	movs	r3, #1
 800856c:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
      }

      if (current_config.testing_update_rate && (update_counter >= 100 || HAL_GetTick() - startTime >= 5000)){
 8008570:	f897 3150 	ldrb.w	r3, [r7, #336]	@ 0x150
 8008574:	2b00      	cmp	r3, #0
 8008576:	d035      	beq.n	80085e4 <acconeer_main_JJH+0x388>
 8008578:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 800857c:	2b63      	cmp	r3, #99	@ 0x63
 800857e:	d809      	bhi.n	8008594 <acconeer_main_JJH+0x338>
 8008580:	f7f8 fe98 	bl	80012b4 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8008590:	4293      	cmp	r3, r2
 8008592:	d927      	bls.n	80085e4 <acconeer_main_JJH+0x388>
        current_config.update_rate = (float) update_counter * 1000 / (HAL_GetTick() - startTime);
 8008594:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a0:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8008634 <acconeer_main_JJH+0x3d8>
 80085a4:	ee27 8a87 	vmul.f32	s16, s15, s14
 80085a8:	f7f8 fe84 	bl	80012b4 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	ee07 3a90 	vmov	s15, r3
 80085b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80085bc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80085c0:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
        Hprintf("Rate: %f", current_config.update_rate);
 80085c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7f7 ffbd 	bl	8000548 <__aeabi_f2d>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4819      	ldr	r0, [pc, #100]	@ (8008638 <acconeer_main_JJH+0x3dc>)
 80085d4:	f000 f946 	bl	8008864 <Hprintf>
        current_config.testing_update_rate = false;
 80085d8:	2300      	movs	r3, #0
 80085da:	f887 3150 	strb.w	r3, [r7, #336]	@ 0x150
        change_config = true;
 80085de:	2301      	movs	r3, #1
 80085e0:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
    while (!change_config)
 80085e4:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 80085e8:	f083 0301 	eor.w	r3, r3, #1
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f47f af3b 	bne.w	800846a <acconeer_main_JJH+0x20e>
  while(true){
 80085f4:	e69f      	b.n	8008336 <acconeer_main_JJH+0xda>
  cleanup(&resources);

  printf("Done!\n");

  return EXIT_SUCCESS;
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
 80085fc:	46bd      	mov	sp, r7
 80085fe:	ecbd 8b02 	vpop	{d8}
 8008602:	bd80      	pop	{r7, pc}
 8008604:	080195a8 	.word	0x080195a8
 8008608:	080195c0 	.word	0x080195c0
 800860c:	080195e0 	.word	0x080195e0
 8008610:	08019610 	.word	0x08019610
 8008614:	08019624 	.word	0x08019624
 8008618:	0801964c 	.word	0x0801964c
 800861c:	08019668 	.word	0x08019668
 8008620:	08019684 	.word	0x08019684
 8008624:	080196a0 	.word	0x080196a0
 8008628:	080196bc 	.word	0x080196bc
 800862c:	08019700 	.word	0x08019700
 8008630:	08019724 	.word	0x08019724
 8008634:	447a0000 	.word	0x447a0000
 8008638:	08019760 	.word	0x08019760

0800863c <get_esp32_serial>:

static bool get_esp32_serial(char *result, uint16_t buf_size, bool wait_for_enter_key)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b08e      	sub	sp, #56	@ 0x38
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	807b      	strh	r3, [r7, #2]
 8008648:	4613      	mov	r3, r2
 800864a:	707b      	strb	r3, [r7, #1]
  uint8_t buffer[MAX_BUFFER_SIZE];
  HAL_StatusTypeDef status;
  uint16_t received = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint32_t startTime = HAL_GetTick();
 8008650:	f7f8 fe30 	bl	80012b4 <HAL_GetTick>
 8008654:	6338      	str	r0, [r7, #48]	@ 0x30

  if (__HAL_UART_GET_FLAG(&DEBUG_UART_HANDLE, UART_FLAG_RXNE) == SET){
 8008656:	4b31      	ldr	r3, [pc, #196]	@ (800871c <get_esp32_serial+0xe0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	f003 0320 	and.w	r3, r3, #32
 8008660:	2b20      	cmp	r3, #32
 8008662:	d156      	bne.n	8008712 <get_esp32_serial+0xd6>
    while (received < buf_size)
 8008664:	e041      	b.n	80086ea <get_esp32_serial+0xae>
    {
      if (__HAL_UART_GET_FLAG(&DEBUG_UART_HANDLE, UART_FLAG_RXNE) == SET)
 8008666:	4b2d      	ldr	r3, [pc, #180]	@ (800871c <get_esp32_serial+0xe0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	f003 0320 	and.w	r3, r3, #32
 8008670:	2b20      	cmp	r3, #32
 8008672:	d127      	bne.n	80086c4 <get_esp32_serial+0x88>
      {
        status = HAL_UART_Receive(&DEBUG_UART_HANDLE, &buffer[received], 1, 100);
 8008674:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008676:	f107 020c 	add.w	r2, r7, #12
 800867a:	18d1      	adds	r1, r2, r3
 800867c:	2364      	movs	r3, #100	@ 0x64
 800867e:	2201      	movs	r2, #1
 8008680:	4826      	ldr	r0, [pc, #152]	@ (800871c <get_esp32_serial+0xe0>)
 8008682:	f7fe f853 	bl	800672c <HAL_UART_Receive>
 8008686:	4603      	mov	r3, r0
 8008688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status == HAL_OK)
 800868c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008690:	2b00      	cmp	r3, #0
 8008692:	d117      	bne.n	80086c4 <get_esp32_serial+0x88>
        {
          startTime = HAL_GetTick() - 10;
 8008694:	f7f8 fe0e 	bl	80012b4 <HAL_GetTick>
 8008698:	4603      	mov	r3, r0
 800869a:	3b0a      	subs	r3, #10
 800869c:	633b      	str	r3, [r7, #48]	@ 0x30
          received++;
 800869e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086a0:	3301      	adds	r3, #1
 80086a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
          if (buffer[received - 1] == '\r')
 80086a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086a6:	3b01      	subs	r3, #1
 80086a8:	3338      	adds	r3, #56	@ 0x38
 80086aa:	443b      	add	r3, r7
 80086ac:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80086b0:	2b0d      	cmp	r3, #13
 80086b2:	d107      	bne.n	80086c4 <get_esp32_serial+0x88>
          {
            buffer[received - 1] = '\0';
 80086b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086b6:	3b01      	subs	r3, #1
 80086b8:	3338      	adds	r3, #56	@ 0x38
 80086ba:	443b      	add	r3, r7
 80086bc:	2200      	movs	r2, #0
 80086be:	f803 2c2c 	strb.w	r2, [r3, #-44]
            break;  // End of message
 80086c2:	e018      	b.n	80086f6 <get_esp32_serial+0xba>
          }
        }
      }

      // Check for timeout (e.g., 1000ms)
      if ((HAL_GetTick() - startTime > 1000) && !wait_for_enter_key)
 80086c4:	f7f8 fdf6 	bl	80012b4 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80086d2:	d90a      	bls.n	80086ea <get_esp32_serial+0xae>
 80086d4:	787b      	ldrb	r3, [r7, #1]
 80086d6:	f083 0301 	eor.w	r3, r3, #1
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d004      	beq.n	80086ea <get_esp32_serial+0xae>
      {
        if (received == 0)
 80086e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d106      	bne.n	80086f4 <get_esp32_serial+0xb8>
        {
          return false;  // No data received within timeout
 80086e6:	2300      	movs	r3, #0
 80086e8:	e014      	b.n	8008714 <get_esp32_serial+0xd8>
    while (received < buf_size)
 80086ea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80086ec:	887b      	ldrh	r3, [r7, #2]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d3b9      	bcc.n	8008666 <get_esp32_serial+0x2a>
 80086f2:	e000      	b.n	80086f6 <get_esp32_serial+0xba>
        }
        break;  // Partial message received
 80086f4:	bf00      	nop
      }
    }

    buffer[received] = '\0';  // Null-terminate the string
 80086f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80086f8:	3338      	adds	r3, #56	@ 0x38
 80086fa:	443b      	add	r3, r7
 80086fc:	2200      	movs	r2, #0
 80086fe:	f803 2c2c 	strb.w	r2, [r3, #-44]
    strcpy(result, (char*)buffer);
 8008702:	f107 030c 	add.w	r3, r7, #12
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f00d fa88 	bl	8015c1e <strcpy>
    return true;
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <get_esp32_serial+0xd8>
  }

  return false;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3738      	adds	r7, #56	@ 0x38
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	200005cc 	.word	0x200005cc

08008720 <load_config>:

static bool load_config(config_settings_t *config){
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
//  }
//
//  printf("Invalid config format. Default settings applied.\n");
//  return false;

  config->start_m = 0.2;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a06      	ldr	r2, [pc, #24]	@ (8008744 <load_config+0x24>)
 800872c:	601a      	str	r2, [r3, #0]
  config->end_m = 0.4;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a05      	ldr	r2, [pc, #20]	@ (8008748 <load_config+0x28>)
 8008732:	605a      	str	r2, [r3, #4]
}
 8008734:	bf00      	nop
 8008736:	4618      	mov	r0, r3
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	3e4ccccd 	.word	0x3e4ccccd
 8008748:	3ecccccd 	.word	0x3ecccccd

0800874c <config_menu>:

static void config_menu(config_settings_t *config, acc_detector_distance_config_t *detector_config){
 800874c:	b580      	push	{r7, lr}
 800874e:	b08c      	sub	sp, #48	@ 0x30
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  bool good_config = false;
 8008756:	2300      	movs	r3, #0
 8008758:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  bool good_value = false;
 800875c:	2300      	movs	r3, #0
 800875e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
//  Hprintf("          .#%%=::::::::*%%*====-:.        \n");
//  Hprintf("          *%%*::::::::=%%%%                \n");
//  Hprintf("        :%%#+-:::::::=#%%:                \n");
//  Hprintf("       -%%%%%%%%%%%%%%%%%%%%%%%%%%%%=                 \n");
//  Hprintf("\n");
  HAL_Delay(500);
 8008762:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008766:	f7f8 fdb1 	bl	80012cc <HAL_Delay>

  print_config_menu(config);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f891 	bl	8008892 <print_config_menu>

  while (!good_config){
 8008770:	e05d      	b.n	800882e <config_menu+0xe2>
    memset(&_received_uart_data, 0, MAX_BUFFER_SIZE);
 8008772:	f107 0308 	add.w	r3, r7, #8
 8008776:	2223      	movs	r2, #35	@ 0x23
 8008778:	2100      	movs	r1, #0
 800877a:	4618      	mov	r0, r3
 800877c:	f00d f9c0 	bl	8015b00 <memset>
    while (!get_esp32_serial(_received_uart_data, 1, false));
 8008780:	bf00      	nop
 8008782:	f107 0308 	add.w	r3, r7, #8
 8008786:	2200      	movs	r2, #0
 8008788:	2101      	movs	r1, #1
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff ff56 	bl	800863c <get_esp32_serial>
 8008790:	4603      	mov	r3, r0
 8008792:	f083 0301 	eor.w	r3, r3, #1
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1f2      	bne.n	8008782 <config_menu+0x36>
    printf("M918\n");
 800879c:	482a      	ldr	r0, [pc, #168]	@ (8008848 <config_menu+0xfc>)
 800879e:	f00d f871 	bl	8015884 <puts>
    HAL_Delay(50);
 80087a2:	2032      	movs	r0, #50	@ 0x32
 80087a4:	f7f8 fd92 	bl	80012cc <HAL_Delay>

    char config_char = tolower(_received_uart_data[0]);
 80087a8:	7a3b      	ldrb	r3, [r7, #8]
 80087aa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80087ae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80087b2:	3301      	adds	r3, #1
 80087b4:	4a25      	ldr	r2, [pc, #148]	@ (800884c <config_menu+0x100>)
 80087b6:	4413      	add	r3, r2
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d103      	bne.n	80087ca <config_menu+0x7e>
 80087c2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80087c6:	3320      	adds	r3, #32
 80087c8:	e001      	b.n	80087ce <config_menu+0x82>
 80087ca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80087ce:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    good_value = false;
 80087d2:	2300      	movs	r3, #0
 80087d4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    switch (config_char){
 80087d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80087dc:	2b61      	cmp	r3, #97	@ 0x61
 80087de:	d11f      	bne.n	8008820 <config_menu+0xd4>
//        break;
//      case 't':
//        config_value = CONFIG_THRESHOLD_SENSITIVITY;
//        break;
      case 'a':
        if (config->start_m >= config->end_m){
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	ed93 7a00 	vldr	s14, [r3]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80087ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f4:	db09      	blt.n	800880a <config_menu+0xbe>
          Hprintf("\nWARNING: Start of range is greater than end of range! This must be fixed before continuing.\n\n");
 80087f6:	4816      	ldr	r0, [pc, #88]	@ (8008850 <config_menu+0x104>)
 80087f8:	f000 f834 	bl	8008864 <Hprintf>
          Hprintf("\nInput is not accepted. Please send one of the characters above.\n");
 80087fc:	4815      	ldr	r0, [pc, #84]	@ (8008854 <config_menu+0x108>)
 80087fe:	f000 f831 	bl	8008864 <Hprintf>
          Hprintf("M917\n");
 8008802:	4815      	ldr	r0, [pc, #84]	@ (8008858 <config_menu+0x10c>)
 8008804:	f000 f82e 	bl	8008864 <Hprintf>
        else{
          good_config = true;
          config->testing_update_rate = true;
          Hprintf("\nTesting actual update rate...\n");
        }
        break;
 8008808:	e011      	b.n	800882e <config_menu+0xe2>
          good_config = true;
 800880a:	2301      	movs	r3, #1
 800880c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          config->testing_update_rate = true;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2020 	strb.w	r2, [r3, #32]
          Hprintf("\nTesting actual update rate...\n");
 8008818:	4810      	ldr	r0, [pc, #64]	@ (800885c <config_menu+0x110>)
 800881a:	f000 f823 	bl	8008864 <Hprintf>
        break;
 800881e:	e006      	b.n	800882e <config_menu+0xe2>
//          Hprintf("\nConfiguration saved to SD card. Returning to normal operations.\n");
//          Hprintf("Send any character to re-open configuration menu.\n");
//        }
//        break;
      default:
        Hprintf("\nInput is not accepted. Please send one of the characters above.\n\n");
 8008820:	480f      	ldr	r0, [pc, #60]	@ (8008860 <config_menu+0x114>)
 8008822:	f000 f81f 	bl	8008864 <Hprintf>
        Hprintf("M917\n");
 8008826:	480c      	ldr	r0, [pc, #48]	@ (8008858 <config_menu+0x10c>)
 8008828:	f000 f81c 	bl	8008864 <Hprintf>
        break;
 800882c:	bf00      	nop
  while (!good_config){
 800882e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008832:	f083 0301 	eor.w	r3, r3, #1
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	d19a      	bne.n	8008772 <config_menu+0x26>
    }
  }
}
 800883c:	bf00      	nop
 800883e:	bf00      	nop
 8008840:	3730      	adds	r7, #48	@ 0x30
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	0801976c 	.word	0x0801976c
 800884c:	0801ef8e 	.word	0x0801ef8e
 8008850:	08019774 	.word	0x08019774
 8008854:	080197d4 	.word	0x080197d4
 8008858:	08019818 	.word	0x08019818
 800885c:	08019820 	.word	0x08019820
 8008860:	08019840 	.word	0x08019840

08008864 <Hprintf>:

static int Hprintf(const char *format, ...) {
 8008864:	b40f      	push	{r0, r1, r2, r3}
 8008866:	b580      	push	{r7, lr}
 8008868:	b082      	sub	sp, #8
 800886a:	af00      	add	r7, sp, #0
  va_list args;
  int result;

  va_start(args, format);
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	603b      	str	r3, [r7, #0]
  result = vprintf(format, args);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6938      	ldr	r0, [r7, #16]
 8008876:	f00d f851 	bl	801591c <viprintf>
 800887a:	6078      	str	r0, [r7, #4]
  va_end(args);

  HAL_Delay(100);
 800887c:	2064      	movs	r0, #100	@ 0x64
 800887e:	f7f8 fd25 	bl	80012cc <HAL_Delay>
  return result;
 8008882:	687b      	ldr	r3, [r7, #4]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800888e:	b004      	add	sp, #16
 8008890:	4770      	bx	lr

08008892 <print_config_menu>:

static void print_config_menu(config_settings_t *config){
 8008892:	b480      	push	{r7}
 8008894:	b083      	sub	sp, #12
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
//  Hprintf("   Current value: %i (0: generic, 1: planar)\n", config->reflector_shape);
//  Hprintf("A: Measure the actual update rate.\n");
//  Hprintf("   Theoretical value: %.1f Hz\n", config->update_rate);
//  Hprintf("X: Exit the menu.\n\n");
//  Hprintf("M917\n");
}
 800889a:	bf00      	nop
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <cleanup>:
//    }
//    return (int)result;
}

static void cleanup(distance_detector_resources_t *resources)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  acc_hal_integration_sensor_disable(SENSOR_ID);
 80088ae:	2001      	movs	r0, #1
 80088b0:	f000 fbe8 	bl	8009084 <acc_hal_integration_sensor_disable>
  acc_hal_integration_sensor_supply_off(SENSOR_ID);
 80088b4:	2001      	movs	r0, #1
 80088b6:	f000 fbc7 	bl	8009048 <acc_hal_integration_sensor_supply_off>

  acc_detector_distance_config_destroy(resources->config);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	4618      	mov	r0, r3
 80088c0:	f002 f9a8 	bl	800ac14 <acc_detector_distance_config_destroy>
  acc_detector_distance_destroy(resources->handle);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f002 f9c5 	bl	800ac58 <acc_detector_distance_destroy>

  acc_integration_mem_free(resources->buffer);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f001 f991 	bl	8009bfa <acc_integration_mem_free>
  acc_integration_mem_free(resources->detector_cal_result_static);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	4618      	mov	r0, r3
 80088de:	f001 f98c 	bl	8009bfa <acc_integration_mem_free>

  if (resources->sensor != NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d004      	beq.n	80088f4 <cleanup+0x4e>
  {
    acc_sensor_destroy(resources->sensor);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f006 fe40 	bl	800f574 <acc_sensor_destroy>
  }
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <set_config>:


static void set_config(acc_detector_distance_config_t *detector_config, distance_preset_config_t preset)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	70fb      	strb	r3, [r7, #3]
  // Add configuration of the detector here
  switch (preset)
 8008908:	78fb      	ldrb	r3, [r7, #3]
 800890a:	2b04      	cmp	r3, #4
 800890c:	f200 80ef 	bhi.w	8008aee <set_config+0x1f2>
 8008910:	a201      	add	r2, pc, #4	@ (adr r2, 8008918 <set_config+0x1c>)
 8008912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008916:	bf00      	nop
 8008918:	0800892d 	.word	0x0800892d
 800891c:	08008987 	.word	0x08008987
 8008920:	080089e1 	.word	0x080089e1
 8008924:	08008a3b 	.word	0x08008a3b
 8008928:	08008a95 	.word	0x08008a95
  {
    case DISTANCE_PRESET_CONFIG_JJH_0:
      acc_detector_distance_config_start_set(detector_config, 0.1f);
 800892c:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 8008af8 <set_config+0x1fc>
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f002 fef1 	bl	800b718 <acc_detector_distance_config_start_set>
      acc_detector_distance_config_end_set(detector_config, 0.4f);
 8008936:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 8008afc <set_config+0x200>
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f002 fef8 	bl	800b730 <acc_detector_distance_config_end_set>
      acc_detector_distance_config_max_step_length_set(detector_config, 0U);
 8008940:	2100      	movs	r1, #0
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f002 ff00 	bl	800b748 <acc_detector_distance_config_max_step_length_set>
      acc_detector_distance_config_max_profile_set(detector_config, ACC_CONFIG_PROFILE_5);
 8008948:	2105      	movs	r1, #5
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f002 ff20 	bl	800b790 <acc_detector_distance_config_max_profile_set>
      acc_detector_distance_config_reflector_shape_set(detector_config, ACC_DETECTOR_DISTANCE_REFLECTOR_SHAPE_PLANAR);
 8008950:	2101      	movs	r1, #1
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f002 ff4c 	bl	800b7f0 <acc_detector_distance_config_reflector_shape_set>
      acc_detector_distance_config_peak_sorting_set(detector_config, ACC_DETECTOR_DISTANCE_PEAK_SORTING_STRONGEST);
 8008958:	2101      	movs	r1, #1
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f002 ff30 	bl	800b7c0 <acc_detector_distance_config_peak_sorting_set>
      acc_detector_distance_config_threshold_method_set(detector_config, ACC_DETECTOR_DISTANCE_THRESHOLD_METHOD_CFAR);
 8008960:	2103      	movs	r1, #3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f002 ff20 	bl	800b7a8 <acc_detector_distance_config_threshold_method_set>
      acc_detector_distance_config_threshold_sensitivity_set(detector_config, 0.5f);
 8008968:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f002 ff33 	bl	800b7d8 <acc_detector_distance_config_threshold_sensitivity_set>
      acc_detector_distance_config_signal_quality_set(detector_config, 35.0f);
 8008972:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 8008b00 <set_config+0x204>
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f002 fefe 	bl	800b778 <acc_detector_distance_config_signal_quality_set>
      acc_detector_distance_config_close_range_leakage_cancellation_set(detector_config, false);
 800897c:	2100      	movs	r1, #0
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f002 feee 	bl	800b760 <acc_detector_distance_config_close_range_leakage_cancellation_set>
      break;
 8008984:	e0b3      	b.n	8008aee <set_config+0x1f2>

    case DISTANCE_PRESET_CONFIG_JJH_1:
      acc_detector_distance_config_start_set(detector_config, 0.4f);
 8008986:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8008afc <set_config+0x200>
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f002 fec4 	bl	800b718 <acc_detector_distance_config_start_set>
      acc_detector_distance_config_end_set(detector_config, 0.8f);
 8008990:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8008b04 <set_config+0x208>
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f002 fecb 	bl	800b730 <acc_detector_distance_config_end_set>
      acc_detector_distance_config_max_step_length_set(detector_config, 0U);
 800899a:	2100      	movs	r1, #0
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f002 fed3 	bl	800b748 <acc_detector_distance_config_max_step_length_set>
      acc_detector_distance_config_max_profile_set(detector_config, ACC_CONFIG_PROFILE_5);
 80089a2:	2105      	movs	r1, #5
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f002 fef3 	bl	800b790 <acc_detector_distance_config_max_profile_set>
      acc_detector_distance_config_reflector_shape_set(detector_config, ACC_DETECTOR_DISTANCE_REFLECTOR_SHAPE_PLANAR);
 80089aa:	2101      	movs	r1, #1
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f002 ff1f 	bl	800b7f0 <acc_detector_distance_config_reflector_shape_set>
      acc_detector_distance_config_peak_sorting_set(detector_config, ACC_DETECTOR_DISTANCE_PEAK_SORTING_STRONGEST);
 80089b2:	2101      	movs	r1, #1
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f002 ff03 	bl	800b7c0 <acc_detector_distance_config_peak_sorting_set>
      acc_detector_distance_config_threshold_method_set(detector_config, ACC_DETECTOR_DISTANCE_THRESHOLD_METHOD_CFAR);
 80089ba:	2103      	movs	r1, #3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f002 fef3 	bl	800b7a8 <acc_detector_distance_config_threshold_method_set>
      acc_detector_distance_config_threshold_sensitivity_set(detector_config, 0.5f);
 80089c2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f002 ff06 	bl	800b7d8 <acc_detector_distance_config_threshold_sensitivity_set>
      acc_detector_distance_config_signal_quality_set(detector_config, 35.0f);
 80089cc:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8008b00 <set_config+0x204>
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f002 fed1 	bl	800b778 <acc_detector_distance_config_signal_quality_set>
      acc_detector_distance_config_close_range_leakage_cancellation_set(detector_config, false);
 80089d6:	2100      	movs	r1, #0
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f002 fec1 	bl	800b760 <acc_detector_distance_config_close_range_leakage_cancellation_set>
      break;
 80089de:	e086      	b.n	8008aee <set_config+0x1f2>

    case DISTANCE_PRESET_CONFIG_JJH_2:
      acc_detector_distance_config_start_set(detector_config, 0.8f);
 80089e0:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8008b04 <set_config+0x208>
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f002 fe97 	bl	800b718 <acc_detector_distance_config_start_set>
      acc_detector_distance_config_end_set(detector_config, 1.2f);
 80089ea:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8008b08 <set_config+0x20c>
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f002 fe9e 	bl	800b730 <acc_detector_distance_config_end_set>
      acc_detector_distance_config_max_step_length_set(detector_config, 0U);
 80089f4:	2100      	movs	r1, #0
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f002 fea6 	bl	800b748 <acc_detector_distance_config_max_step_length_set>
      acc_detector_distance_config_max_profile_set(detector_config, ACC_CONFIG_PROFILE_5);
 80089fc:	2105      	movs	r1, #5
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f002 fec6 	bl	800b790 <acc_detector_distance_config_max_profile_set>
      acc_detector_distance_config_reflector_shape_set(detector_config, ACC_DETECTOR_DISTANCE_REFLECTOR_SHAPE_PLANAR);
 8008a04:	2101      	movs	r1, #1
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f002 fef2 	bl	800b7f0 <acc_detector_distance_config_reflector_shape_set>
      acc_detector_distance_config_peak_sorting_set(detector_config, ACC_DETECTOR_DISTANCE_PEAK_SORTING_STRONGEST);
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f002 fed6 	bl	800b7c0 <acc_detector_distance_config_peak_sorting_set>
      acc_detector_distance_config_threshold_method_set(detector_config, ACC_DETECTOR_DISTANCE_THRESHOLD_METHOD_CFAR);
 8008a14:	2103      	movs	r1, #3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f002 fec6 	bl	800b7a8 <acc_detector_distance_config_threshold_method_set>
      acc_detector_distance_config_threshold_sensitivity_set(detector_config, 0.5f);
 8008a1c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f002 fed9 	bl	800b7d8 <acc_detector_distance_config_threshold_sensitivity_set>
      acc_detector_distance_config_signal_quality_set(detector_config, 35.0f);
 8008a26:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8008b00 <set_config+0x204>
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f002 fea4 	bl	800b778 <acc_detector_distance_config_signal_quality_set>
      acc_detector_distance_config_close_range_leakage_cancellation_set(detector_config, false);
 8008a30:	2100      	movs	r1, #0
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f002 fe94 	bl	800b760 <acc_detector_distance_config_close_range_leakage_cancellation_set>
      break;
 8008a38:	e059      	b.n	8008aee <set_config+0x1f2>

    case DISTANCE_PRESET_CONFIG_BALANCED:
      acc_detector_distance_config_start_set(detector_config, 0.25f);
 8008a3a:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f002 fe6a 	bl	800b718 <acc_detector_distance_config_start_set>
      acc_detector_distance_config_end_set(detector_config, 3.0f);
 8008a44:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f002 fe71 	bl	800b730 <acc_detector_distance_config_end_set>
      acc_detector_distance_config_max_step_length_set(detector_config, 0U);
 8008a4e:	2100      	movs	r1, #0
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f002 fe79 	bl	800b748 <acc_detector_distance_config_max_step_length_set>
      acc_detector_distance_config_max_profile_set(detector_config, ACC_CONFIG_PROFILE_5);
 8008a56:	2105      	movs	r1, #5
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f002 fe99 	bl	800b790 <acc_detector_distance_config_max_profile_set>
      acc_detector_distance_config_reflector_shape_set(detector_config, ACC_DETECTOR_DISTANCE_REFLECTOR_SHAPE_GENERIC);
 8008a5e:	2100      	movs	r1, #0
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f002 fec5 	bl	800b7f0 <acc_detector_distance_config_reflector_shape_set>
      acc_detector_distance_config_peak_sorting_set(detector_config, ACC_DETECTOR_DISTANCE_PEAK_SORTING_STRONGEST);
 8008a66:	2101      	movs	r1, #1
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f002 fea9 	bl	800b7c0 <acc_detector_distance_config_peak_sorting_set>
      acc_detector_distance_config_threshold_method_set(detector_config, ACC_DETECTOR_DISTANCE_THRESHOLD_METHOD_CFAR);
 8008a6e:	2103      	movs	r1, #3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f002 fe99 	bl	800b7a8 <acc_detector_distance_config_threshold_method_set>
      acc_detector_distance_config_threshold_sensitivity_set(detector_config, 0.5f);
 8008a76:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f002 feac 	bl	800b7d8 <acc_detector_distance_config_threshold_sensitivity_set>
      acc_detector_distance_config_signal_quality_set(detector_config, 15.0f);
 8008a80:	eeb2 0a0e 	vmov.f32	s0, #46	@ 0x41700000  15.0
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f002 fe77 	bl	800b778 <acc_detector_distance_config_signal_quality_set>
      acc_detector_distance_config_close_range_leakage_cancellation_set(detector_config, false);
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f002 fe67 	bl	800b760 <acc_detector_distance_config_close_range_leakage_cancellation_set>
      break;
 8008a92:	e02c      	b.n	8008aee <set_config+0x1f2>

    case DISTANCE_PRESET_CONFIG_HIGH_ACCURACY:
      acc_detector_distance_config_start_set(detector_config, 0.25f);
 8008a94:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f002 fe3d 	bl	800b718 <acc_detector_distance_config_start_set>
      acc_detector_distance_config_end_set(detector_config, 3.0f);
 8008a9e:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f002 fe44 	bl	800b730 <acc_detector_distance_config_end_set>
      acc_detector_distance_config_max_step_length_set(detector_config, 2U);
 8008aa8:	2102      	movs	r1, #2
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f002 fe4c 	bl	800b748 <acc_detector_distance_config_max_step_length_set>
      acc_detector_distance_config_max_profile_set(detector_config, ACC_CONFIG_PROFILE_3);
 8008ab0:	2103      	movs	r1, #3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f002 fe6c 	bl	800b790 <acc_detector_distance_config_max_profile_set>
      acc_detector_distance_config_reflector_shape_set(detector_config, ACC_DETECTOR_DISTANCE_REFLECTOR_SHAPE_GENERIC);
 8008ab8:	2100      	movs	r1, #0
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f002 fe98 	bl	800b7f0 <acc_detector_distance_config_reflector_shape_set>
      acc_detector_distance_config_peak_sorting_set(detector_config, ACC_DETECTOR_DISTANCE_PEAK_SORTING_STRONGEST);
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f002 fe7c 	bl	800b7c0 <acc_detector_distance_config_peak_sorting_set>
      acc_detector_distance_config_threshold_method_set(detector_config, ACC_DETECTOR_DISTANCE_THRESHOLD_METHOD_CFAR);
 8008ac8:	2103      	movs	r1, #3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f002 fe6c 	bl	800b7a8 <acc_detector_distance_config_threshold_method_set>
      acc_detector_distance_config_threshold_sensitivity_set(detector_config, 0.5f);
 8008ad0:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f002 fe7f 	bl	800b7d8 <acc_detector_distance_config_threshold_sensitivity_set>
      acc_detector_distance_config_signal_quality_set(detector_config, 20.0f);
 8008ada:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f002 fe4a 	bl	800b778 <acc_detector_distance_config_signal_quality_set>
      acc_detector_distance_config_close_range_leakage_cancellation_set(detector_config, false);
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f002 fe3a 	bl	800b760 <acc_detector_distance_config_close_range_leakage_cancellation_set>
      break;
 8008aec:	bf00      	nop
  }
}
 8008aee:	bf00      	nop
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	3dcccccd 	.word	0x3dcccccd
 8008afc:	3ecccccd 	.word	0x3ecccccd
 8008b00:	420c0000 	.word	0x420c0000
 8008b04:	3f4ccccd 	.word	0x3f4ccccd
 8008b08:	3f99999a 	.word	0x3f99999a

08008b0c <initialize_detector_resources>:


static bool initialize_detector_resources(distance_detector_resources_t *resources)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  resources->handle = acc_detector_distance_create(resources->config);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f002 f8f3 	bl	800ad04 <acc_detector_distance_create>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	609a      	str	r2, [r3, #8]
  if (resources->handle == NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d104      	bne.n	8008b36 <initialize_detector_resources+0x2a>
  {
    printf("acc_detector_distance_create() failed\n");
 8008b2c:	4820      	ldr	r0, [pc, #128]	@ (8008bb0 <initialize_detector_resources+0xa4>)
 8008b2e:	f00c fea9 	bl	8015884 <puts>
    return false;
 8008b32:	2300      	movs	r3, #0
 8008b34:	e037      	b.n	8008ba6 <initialize_detector_resources+0x9a>
  }

  if (!acc_detector_distance_get_sizes(resources->handle, &(resources->buffer_size), &(resources->detector_cal_result_static_size)))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6898      	ldr	r0, [r3, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f103 0110 	add.w	r1, r3, #16
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3318      	adds	r3, #24
 8008b44:	461a      	mov	r2, r3
 8008b46:	f002 f873 	bl	800ac30 <acc_detector_distance_get_sizes>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	f083 0301 	eor.w	r3, r3, #1
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d004      	beq.n	8008b60 <initialize_detector_resources+0x54>
  {
    printf("acc_detector_distance_get_sizes() failed\n");
 8008b56:	4817      	ldr	r0, [pc, #92]	@ (8008bb4 <initialize_detector_resources+0xa8>)
 8008b58:	f00c fe94 	bl	8015884 <puts>
    return false;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	e022      	b.n	8008ba6 <initialize_detector_resources+0x9a>
  }

  resources->buffer = acc_integration_mem_alloc(resources->buffer_size);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f001 f83c 	bl	8009be2 <acc_integration_mem_alloc>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	60da      	str	r2, [r3, #12]
  if (resources->buffer == NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <initialize_detector_resources+0x76>
  {
    printf("sensor buffer allocation failed\n");
 8008b78:	480f      	ldr	r0, [pc, #60]	@ (8008bb8 <initialize_detector_resources+0xac>)
 8008b7a:	f00c fe83 	bl	8015884 <puts>
    return false;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e011      	b.n	8008ba6 <initialize_detector_resources+0x9a>
  }

  resources->detector_cal_result_static = acc_integration_mem_alloc(resources->detector_cal_result_static_size);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 f82b 	bl	8009be2 <acc_integration_mem_alloc>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	615a      	str	r2, [r3, #20]
  if (resources->detector_cal_result_static == NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d104      	bne.n	8008ba4 <initialize_detector_resources+0x98>
  {
    printf("calibration buffer allocation failed\n");
 8008b9a:	4808      	ldr	r0, [pc, #32]	@ (8008bbc <initialize_detector_resources+0xb0>)
 8008b9c:	f00c fe72 	bl	8015884 <puts>
    return false;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	e000      	b.n	8008ba6 <initialize_detector_resources+0x9a>
  }

  return true;
 8008ba4:	2301      	movs	r3, #1
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	08019884 	.word	0x08019884
 8008bb4:	080198ac 	.word	0x080198ac
 8008bb8:	080198d8 	.word	0x080198d8
 8008bbc:	080198f8 	.word	0x080198f8

08008bc0 <do_sensor_calibration>:

static bool do_sensor_calibration(acc_sensor_t     *sensor,
                                  acc_cal_result_t *sensor_cal_result,
                                  void             *buffer,
                                  uint32_t         buffer_size)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	603b      	str	r3, [r7, #0]
  bool           status              = false;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	75fb      	strb	r3, [r7, #23]
  bool           cal_complete        = false;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	747b      	strb	r3, [r7, #17]
  const uint16_t calibration_retries = 1U;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	827b      	strh	r3, [r7, #18]

  // Random disturbances may cause the calibration to fail. At failure, retry at least once.
  for (uint16_t i = 0; !status && (i <= calibration_retries); i++)
 8008bda:	2300      	movs	r3, #0
 8008bdc:	82bb      	strh	r3, [r7, #20]
 8008bde:	e02c      	b.n	8008c3a <do_sensor_calibration+0x7a>
  {
    // Reset sensor before calibration by disabling/enabling it
    acc_hal_integration_sensor_disable(SENSOR_ID);
 8008be0:	2001      	movs	r0, #1
 8008be2:	f000 fa4f 	bl	8009084 <acc_hal_integration_sensor_disable>
    acc_hal_integration_sensor_enable(SENSOR_ID);
 8008be6:	2001      	movs	r0, #1
 8008be8:	f000 fa38 	bl	800905c <acc_hal_integration_sensor_enable>

    do
    {
      status = acc_sensor_calibrate(sensor, &cal_complete, sensor_cal_result, buffer, buffer_size);
 8008bec:	f107 0111 	add.w	r1, r7, #17
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f006 fd27 	bl	800f64c <acc_sensor_calibrate>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	75fb      	strb	r3, [r7, #23]

      if (status && !cal_complete)
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00c      	beq.n	8008c22 <do_sensor_calibration+0x62>
 8008c08:	7c7b      	ldrb	r3, [r7, #17]
 8008c0a:	f083 0301 	eor.w	r3, r3, #1
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d006      	beq.n	8008c22 <do_sensor_calibration+0x62>
      {
        status = acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS);
 8008c14:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8008c18:	2001      	movs	r0, #1
 8008c1a:	f000 fa47 	bl	80090ac <acc_hal_integration_wait_for_sensor_interrupt>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	75fb      	strb	r3, [r7, #23]
      }
    } while (status && !cal_complete);
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <do_sensor_calibration+0x74>
 8008c28:	7c7b      	ldrb	r3, [r7, #17]
 8008c2a:	f083 0301 	eor.w	r3, r3, #1
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1db      	bne.n	8008bec <do_sensor_calibration+0x2c>
  for (uint16_t i = 0; !status && (i <= calibration_retries); i++)
 8008c34:	8abb      	ldrh	r3, [r7, #20]
 8008c36:	3301      	adds	r3, #1
 8008c38:	82bb      	strh	r3, [r7, #20]
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
 8008c3c:	f083 0301 	eor.w	r3, r3, #1
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <do_sensor_calibration+0x8e>
 8008c46:	8aba      	ldrh	r2, [r7, #20]
 8008c48:	8a7b      	ldrh	r3, [r7, #18]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d9c8      	bls.n	8008be0 <do_sensor_calibration+0x20>
  }

  if (status)
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <do_sensor_calibration+0xa0>
  {
    /* Reset sensor after calibration by disabling/enabling it */
    acc_hal_integration_sensor_disable(SENSOR_ID);
 8008c54:	2001      	movs	r0, #1
 8008c56:	f000 fa15 	bl	8009084 <acc_hal_integration_sensor_disable>
    acc_hal_integration_sensor_enable(SENSOR_ID);
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	f000 f9fe 	bl	800905c <acc_hal_integration_sensor_enable>
  }

  return status;
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <do_full_detector_calibration>:


static bool do_full_detector_calibration(distance_detector_resources_t *resources,
                                         const acc_cal_result_t        *sensor_cal_result)
{
 8008c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c6c:	b08d      	sub	sp, #52	@ 0x34
 8008c6e:	af06      	add	r7, sp, #24
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
  bool done = false;
 8008c74:	2300      	movs	r3, #0
 8008c76:	75bb      	strb	r3, [r7, #22]
  bool status;

  do
  {
    status = acc_detector_distance_calibrate(resources->sensor,
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681d      	ldr	r5, [r3, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	689e      	ldr	r6, [r3, #8]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	607b      	str	r3, [r7, #4]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	6952      	ldr	r2, [r2, #20]
 8008c8e:	68f9      	ldr	r1, [r7, #12]
 8008c90:	6989      	ldr	r1, [r1, #24]
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	301c      	adds	r0, #28
 8008c96:	f107 0416 	add.w	r4, r7, #22
 8008c9a:	9404      	str	r4, [sp, #16]
 8008c9c:	9003      	str	r0, [sp, #12]
 8008c9e:	9102      	str	r1, [sp, #8]
 8008ca0:	9201      	str	r2, [sp, #4]
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	4631      	mov	r1, r6
 8008caa:	4628      	mov	r0, r5
 8008cac:	f002 f960 	bl	800af70 <acc_detector_distance_calibrate>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	75fb      	strb	r3, [r7, #23]
                                             resources->detector_cal_result_static,
                                             resources->detector_cal_result_static_size,
                                             &resources->detector_cal_result_dynamic,
                                             &done);

    if (status && !done)
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00c      	beq.n	8008cd4 <do_full_detector_calibration+0x6a>
 8008cba:	7dbb      	ldrb	r3, [r7, #22]
 8008cbc:	f083 0301 	eor.w	r3, r3, #1
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d006      	beq.n	8008cd4 <do_full_detector_calibration+0x6a>
    {
      status = acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS);
 8008cc6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8008cca:	2001      	movs	r0, #1
 8008ccc:	f000 f9ee 	bl	80090ac <acc_hal_integration_wait_for_sensor_interrupt>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	75fb      	strb	r3, [r7, #23]
    }
  } while (status && !done);
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d005      	beq.n	8008ce6 <do_full_detector_calibration+0x7c>
 8008cda:	7dbb      	ldrb	r3, [r7, #22]
 8008cdc:	f083 0301 	eor.w	r3, r3, #1
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1c8      	bne.n	8008c78 <do_full_detector_calibration+0xe>

  return status;
 8008ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	371c      	adds	r7, #28
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008cf0 <do_detector_calibration_update>:


static bool do_detector_calibration_update(distance_detector_resources_t *resources,
                                           const acc_cal_result_t        *sensor_cal_result)
{
 8008cf0:	b5b0      	push	{r4, r5, r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af04      	add	r7, sp, #16
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  bool done = false;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73bb      	strb	r3, [r7, #14]
  bool status;

  do
  {
    status = acc_detector_distance_update_calibration(resources->sensor,
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689c      	ldr	r4, [r3, #8]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68dd      	ldr	r5, [r3, #12]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	321c      	adds	r2, #28
 8008d12:	f107 010e 	add.w	r1, r7, #14
 8008d16:	9102      	str	r1, [sp, #8]
 8008d18:	9201      	str	r2, [sp, #4]
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	4621      	mov	r1, r4
 8008d22:	f002 fb1b 	bl	800b35c <acc_detector_distance_update_calibration>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73fb      	strb	r3, [r7, #15]
                                                      resources->buffer,
                                                      resources->buffer_size,
                                                      &resources->detector_cal_result_dynamic,
                                                      &done);

    if (status && !done)
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00c      	beq.n	8008d4a <do_detector_calibration_update+0x5a>
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	f083 0301 	eor.w	r3, r3, #1
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d006      	beq.n	8008d4a <do_detector_calibration_update+0x5a>
    {
      status = acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS);
 8008d3c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8008d40:	2001      	movs	r0, #1
 8008d42:	f000 f9b3 	bl	80090ac <acc_hal_integration_wait_for_sensor_interrupt>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73fb      	strb	r3, [r7, #15]
    }
  } while (status && !done);
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d005      	beq.n	8008d5c <do_detector_calibration_update+0x6c>
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	f083 0301 	eor.w	r3, r3, #1
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1d0      	bne.n	8008cfe <do_detector_calibration_update+0xe>

  return status;
 8008d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008d68 <do_detector_get_next>:


static bool do_detector_get_next(distance_detector_resources_t  *resources,
                                 const acc_cal_result_t         *sensor_cal_result,
                                 acc_detector_distance_result_t *result)
{
 8008d68:	b590      	push	{r4, r7, lr}
 8008d6a:	b089      	sub	sp, #36	@ 0x24
 8008d6c:	af02      	add	r7, sp, #8
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
  bool result_available = false;
 8008d74:	2300      	movs	r3, #0
 8008d76:	75fb      	strb	r3, [r7, #23]

  do
  {
    if (!acc_detector_distance_prepare(resources->handle, resources->config, resources->sensor, sensor_cal_result, resources->buffer,
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6898      	ldr	r0, [r3, #8]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6859      	ldr	r1, [r3, #4]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681c      	ldr	r4, [r3, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	6912      	ldr	r2, [r2, #16]
 8008d8c:	9201      	str	r2, [sp, #4]
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	4622      	mov	r2, r4
 8008d94:	f002 fb76 	bl	800b484 <acc_detector_distance_prepare>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	f083 0301 	eor.w	r3, r3, #1
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d004      	beq.n	8008dae <do_detector_get_next+0x46>
                                       resources->buffer_size))
    {
      printf("acc_detector_distance_prepare() failed\n");
 8008da4:	482f      	ldr	r0, [pc, #188]	@ (8008e64 <do_detector_get_next+0xfc>)
 8008da6:	f00c fd6d 	bl	8015884 <puts>
      return false;
 8008daa:	2300      	movs	r3, #0
 8008dac:	e056      	b.n	8008e5c <do_detector_get_next+0xf4>
    }

    if (!acc_sensor_measure(resources->sensor))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f006 fcd2 	bl	800f75c <acc_sensor_measure>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f083 0301 	eor.w	r3, r3, #1
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d004      	beq.n	8008dce <do_detector_get_next+0x66>
    {
      printf("acc_sensor_measure() failed\n");
 8008dc4:	4828      	ldr	r0, [pc, #160]	@ (8008e68 <do_detector_get_next+0x100>)
 8008dc6:	f00c fd5d 	bl	8015884 <puts>
      return false;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e046      	b.n	8008e5c <do_detector_get_next+0xf4>
    }

    if (!acc_hal_integration_wait_for_sensor_interrupt(SENSOR_ID, SENSOR_TIMEOUT_MS))
 8008dce:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8008dd2:	2001      	movs	r0, #1
 8008dd4:	f000 f96a 	bl	80090ac <acc_hal_integration_wait_for_sensor_interrupt>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	f083 0301 	eor.w	r3, r3, #1
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d004      	beq.n	8008dee <do_detector_get_next+0x86>
    {
      printf("Sensor interrupt timeout\n");
 8008de4:	4821      	ldr	r0, [pc, #132]	@ (8008e6c <do_detector_get_next+0x104>)
 8008de6:	f00c fd4d 	bl	8015884 <puts>
      return false;
 8008dea:	2300      	movs	r3, #0
 8008dec:	e036      	b.n	8008e5c <do_detector_get_next+0xf4>
    }

    if (!acc_sensor_read(resources->sensor, resources->buffer, resources->buffer_size))
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	68d9      	ldr	r1, [r3, #12]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f006 fcd6 	bl	800f7ac <acc_sensor_read>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f083 0301 	eor.w	r3, r3, #1
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d004      	beq.n	8008e16 <do_detector_get_next+0xae>
    {
      printf("acc_sensor_read() failed\n");
 8008e0c:	4818      	ldr	r0, [pc, #96]	@ (8008e70 <do_detector_get_next+0x108>)
 8008e0e:	f00c fd39 	bl	8015884 <puts>
      return false;
 8008e12:	2300      	movs	r3, #0
 8008e14:	e022      	b.n	8008e5c <do_detector_get_next+0xf4>
    }

    if (!acc_detector_distance_process(resources->handle, resources->buffer, resources->detector_cal_result_static,
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6898      	ldr	r0, [r3, #8]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	68d9      	ldr	r1, [r3, #12]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	695a      	ldr	r2, [r3, #20]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f103 041c 	add.w	r4, r3, #28
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	9301      	str	r3, [sp, #4]
 8008e2c:	f107 0317 	add.w	r3, r7, #23
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	4623      	mov	r3, r4
 8008e34:	f002 fb4c 	bl	800b4d0 <acc_detector_distance_process>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	f083 0301 	eor.w	r3, r3, #1
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d004      	beq.n	8008e4e <do_detector_get_next+0xe6>
                                       &resources->detector_cal_result_dynamic,
                                       &result_available, result))
    {
      printf("acc_detector_distance_process() failed\n");
 8008e44:	480b      	ldr	r0, [pc, #44]	@ (8008e74 <do_detector_get_next+0x10c>)
 8008e46:	f00c fd1d 	bl	8015884 <puts>
      return false;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e006      	b.n	8008e5c <do_detector_get_next+0xf4>
    }
  } while (!result_available);
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	f083 0301 	eor.w	r3, r3, #1
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d18e      	bne.n	8008d78 <do_detector_get_next+0x10>

  return true;
 8008e5a:	2301      	movs	r3, #1
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	371c      	adds	r7, #28
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd90      	pop	{r4, r7, pc}
 8008e64:	08019920 	.word	0x08019920
 8008e68:	08019948 	.word	0x08019948
 8008e6c:	08019964 	.word	0x08019964
 8008e70:	08019980 	.word	0x08019980
 8008e74:	0801999c 	.word	0x0801999c

08008e78 <print_distance_result>:


static void print_distance_result(const acc_detector_distance_result_t *result)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  printf("%d detected distances", result->num_distances);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008e86:	4619      	mov	r1, r3
 8008e88:	484b      	ldr	r0, [pc, #300]	@ (8008fb8 <print_distance_result+0x140>)
 8008e8a:	f00c fc8b 	bl	80157a4 <iprintf>
  if (result->num_distances > 0)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 8087 	beq.w	8008fa8 <print_distance_result+0x130>
  {
    printf(": ");
 8008e9a:	4848      	ldr	r0, [pc, #288]	@ (8008fbc <print_distance_result+0x144>)
 8008e9c:	f00c fc82 	bl	80157a4 <iprintf>

    for (uint8_t i = 0; i < result->num_distances; i++)
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73fb      	strb	r3, [r7, #15]
 8008ea4:	e079      	b.n	8008f9a <print_distance_result+0x122>
    {
      printf("%" PRIfloat " m ", ACC_LOG_FLOAT_TO_INTEGER(result->distances[i]));
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	edd3 7a00 	vldr	s15, [r3]
 8008eb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eba:	d501      	bpl.n	8008ec0 <print_distance_result+0x48>
 8008ebc:	4940      	ldr	r1, [pc, #256]	@ (8008fc0 <print_distance_result+0x148>)
 8008ebe:	e000      	b.n	8008ec2 <print_distance_result+0x4a>
 8008ec0:	4940      	ldr	r1, [pc, #256]	@ (8008fc4 <print_distance_result+0x14c>)
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	4413      	add	r3, r2
 8008eca:	edd3 7a00 	vldr	s15, [r3]
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	ed93 7a00 	vldr	s14, [r3]
 8008eda:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee2:	d502      	bpl.n	8008eea <print_distance_result+0x72>
 8008ee4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008ee8:	e001      	b.n	8008eee <print_distance_result+0x76>
 8008eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8008fc8 <print_distance_result+0x150>
 8008ef6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008efa:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	edd3 7a00 	vldr	s15, [r3]
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	ed93 7a00 	vldr	s14, [r3]
 8008f16:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1e:	d502      	bpl.n	8008f26 <print_distance_result+0xae>
 8008f20:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008f24:	e001      	b.n	8008f2a <print_distance_result+0xb2>
 8008f26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f2e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008fc8 <print_distance_result+0x150>
 8008f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	edd3 7a00 	vldr	s15, [r3]
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	edd3 6a00 	vldr	s13, [r3]
 8008f4e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f56:	d502      	bpl.n	8008f5e <print_distance_result+0xe6>
 8008f58:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8008f5c:	e001      	b.n	8008f62 <print_distance_result+0xea>
 8008f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008f66:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8008fc8 <print_distance_result+0x150>
 8008f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f7a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008fcc <print_distance_result+0x154>
 8008f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f86:	ee17 3a90 	vmov	r3, s15
 8008f8a:	ee16 2a10 	vmov	r2, s12
 8008f8e:	4810      	ldr	r0, [pc, #64]	@ (8008fd0 <print_distance_result+0x158>)
 8008f90:	f00c fc08 	bl	80157a4 <iprintf>
    for (uint8_t i = 0; i < result->num_distances; i++)
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	3301      	adds	r3, #1
 8008f98:	73fb      	strb	r3, [r7, #15]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008fa0:	7bfa      	ldrb	r2, [r7, #15]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	f4ff af7f 	bcc.w	8008ea6 <print_distance_result+0x2e>
    }
  }

  printf("\n");
 8008fa8:	200a      	movs	r0, #10
 8008faa:	f00c fc0d 	bl	80157c8 <putchar>
}
 8008fae:	bf00      	nop
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	080199c4 	.word	0x080199c4
 8008fbc:	080199dc 	.word	0x080199dc
 8008fc0:	080199e0 	.word	0x080199e0
 8008fc4:	080199e4 	.word	0x080199e4
 8008fc8:	350637bd 	.word	0x350637bd
 8008fcc:	49742400 	.word	0x49742400
 8008fd0:	080199e8 	.word	0x080199e8

08008fd4 <disable_interrupts>:
#define STM32_MAX_TRANSFER_SIZE 65535
#endif


static inline void disable_interrupts(void)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008fd8:	b672      	cpsid	i
}
 8008fda:	bf00      	nop
	__disable_irq();
}
 8008fdc:	bf00      	nop
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <enable_interrupts>:


static inline void enable_interrupts(void)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8008fea:	b662      	cpsie	i
}
 8008fec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008fee:	f3bf 8f6f 	isb	sy
}
 8008ff2:	bf00      	nop
	__enable_irq();
	__ISB();
}
 8008ff4:	bf00      	nop
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
	...

08009000 <acc_hal_integration_sensor_transfer16>:


static void acc_hal_integration_sensor_transfer16(acc_sensor_id_t sensor_id, uint16_t *buffer, size_t buffer_length)


{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af02      	add	r7, sp, #8
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	const uint32_t SPI_TRANSMIT_RECEIVE_TIMEOUT = 5000;
 800900c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009010:	617b      	str	r3, [r7, #20]

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}
#else
	HAL_SPI_TransmitReceive(&A121_SPI_HANDLE, (uint8_t *)buffer, (uint8_t *)buffer, buffer_length, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	b29a      	uxth	r2, r3
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	4613      	mov	r3, r2
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	68b9      	ldr	r1, [r7, #8]
 8009020:	4803      	ldr	r0, [pc, #12]	@ (8009030 <acc_hal_integration_sensor_transfer16+0x30>)
 8009022:	f7fc feec 	bl	8005dfe <HAL_SPI_TransmitReceive>

#endif
}
 8009026:	bf00      	nop
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	200004d8 	.word	0x200004d8

08009034 <acc_hal_integration_sensor_supply_on>:


void acc_hal_integration_sensor_supply_on(acc_sensor_id_t sensor_id)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <acc_hal_integration_sensor_supply_off>:


void acc_hal_integration_sensor_supply_off(acc_sensor_id_t sensor_id)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <acc_hal_integration_sensor_enable>:


void acc_hal_integration_sensor_enable(acc_sensor_id_t sensor_id)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 8009064:	2201      	movs	r2, #1
 8009066:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800906a:	4805      	ldr	r0, [pc, #20]	@ (8009080 <acc_hal_integration_sensor_enable+0x24>)
 800906c:	f7f9 f838 	bl	80020e0 <HAL_GPIO_WritePin>

	// Wait 2 ms to make sure that the sensor crystal have time to stabilize
	acc_integration_sleep_ms(2);
 8009070:	2002      	movs	r0, #2
 8009072:	f000 fc9d 	bl	80099b0 <acc_integration_sleep_ms>
}
 8009076:	bf00      	nop
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	48000400 	.word	0x48000400

08009084 <acc_hal_integration_sensor_disable>:


void acc_hal_integration_sensor_disable(acc_sensor_id_t sensor_id)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
	(void)sensor_id;  // Ignore parameter sensor_id

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 800908c:	2200      	movs	r2, #0
 800908e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009092:	4805      	ldr	r0, [pc, #20]	@ (80090a8 <acc_hal_integration_sensor_disable+0x24>)
 8009094:	f7f9 f824 	bl	80020e0 <HAL_GPIO_WritePin>

	// Wait after disable to leave the sensor in a known state
	// in case the application intends to enable the sensor directly
	acc_integration_sleep_ms(2);
 8009098:	2002      	movs	r0, #2
 800909a:	f000 fc89 	bl	80099b0 <acc_integration_sleep_ms>
}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	48000400 	.word	0x48000400

080090ac <acc_hal_integration_wait_for_sensor_interrupt>:


bool acc_hal_integration_wait_for_sensor_interrupt(acc_sensor_id_t sensor_id, uint32_t timeout_ms)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
	(void)sensor_id; // Ignore parameter sensor_id

	const uint32_t wait_begin_ms = HAL_GetTick();
 80090b6:	f7f8 f8fd 	bl	80012b4 <HAL_GetTick>
 80090ba:	60f8      	str	r0, [r7, #12]
	while ((HAL_GPIO_ReadPin(INTERRUPT_GPIO_Port, INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80090bc:	e00b      	b.n	80090d6 <acc_hal_integration_wait_for_sensor_interrupt+0x2a>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
	{
		// Wait for the GPIO interrupt
		disable_interrupts();
 80090be:	f7ff ff89 	bl	8008fd4 <disable_interrupts>
		// Check again so that IRQ did not occur
		if (HAL_GPIO_ReadPin(INTERRUPT_GPIO_Port, INTERRUPT_Pin) != GPIO_PIN_SET)
 80090c2:	2108      	movs	r1, #8
 80090c4:	4812      	ldr	r0, [pc, #72]	@ (8009110 <acc_hal_integration_wait_for_sensor_interrupt+0x64>)
 80090c6:	f7f8 fff3 	bl	80020b0 <HAL_GPIO_ReadPin>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d000      	beq.n	80090d2 <acc_hal_integration_wait_for_sensor_interrupt+0x26>
		{
			__WFI();
 80090d0:	bf30      	wfi
		}

		// Enable interrupts again to allow pending interrupt to be handled
		enable_interrupts();
 80090d2:	f7ff ff88 	bl	8008fe6 <enable_interrupts>
	while ((HAL_GPIO_ReadPin(INTERRUPT_GPIO_Port, INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80090d6:	2108      	movs	r1, #8
 80090d8:	480d      	ldr	r0, [pc, #52]	@ (8009110 <acc_hal_integration_wait_for_sensor_interrupt+0x64>)
 80090da:	f7f8 ffe9 	bl	80020b0 <HAL_GPIO_ReadPin>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d007      	beq.n	80090f4 <acc_hal_integration_wait_for_sensor_interrupt+0x48>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 80090e4:	f7f8 f8e6 	bl	80012b4 <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	1ad3      	subs	r3, r2, r3
	while ((HAL_GPIO_ReadPin(INTERRUPT_GPIO_Port, INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d8e4      	bhi.n	80090be <acc_hal_integration_wait_for_sensor_interrupt+0x12>
	}

	return HAL_GPIO_ReadPin(INTERRUPT_GPIO_Port, INTERRUPT_Pin) == GPIO_PIN_SET;
 80090f4:	2108      	movs	r1, #8
 80090f6:	4806      	ldr	r0, [pc, #24]	@ (8009110 <acc_hal_integration_wait_for_sensor_interrupt+0x64>)
 80090f8:	f7f8 ffda 	bl	80020b0 <HAL_GPIO_ReadPin>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b01      	cmp	r3, #1
 8009100:	bf0c      	ite	eq
 8009102:	2301      	moveq	r3, #1
 8009104:	2300      	movne	r3, #0
 8009106:	b2db      	uxtb	r3, r3
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	48000400 	.word	0x48000400

08009114 <acc_hal_rss_integration_get_implementation>:


const acc_hal_a121_t *acc_hal_rss_integration_get_implementation(void)
{
 8009114:	b480      	push	{r7}
 8009116:	af00      	add	r7, sp, #0
		.log      = acc_integration_log,

		.optimization.transfer16 = acc_hal_integration_sensor_transfer16,
	};

	return &val;
 8009118:	4b02      	ldr	r3, [pc, #8]	@ (8009124 <acc_hal_rss_integration_get_implementation+0x10>)
}
 800911a:	4618      	mov	r0, r3
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	08019af8 	.word	0x08019af8

08009128 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8009128:	b40c      	push	{r2, r3}
 800912a:	b580      	push	{r7, lr}
 800912c:	b0b4      	sub	sp, #208	@ 0xd0
 800912e:	af04      	add	r7, sp, #16
 8009130:	4603      	mov	r3, r0
 8009132:	6039      	str	r1, [r7, #0]
 8009134:	71fb      	strb	r3, [r7, #7]
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 8009136:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800913a:	60bb      	str	r3, [r7, #8]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 800913c:	f107 000c 	add.w	r0, r7, #12
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009146:	2196      	movs	r1, #150	@ 0x96
 8009148:	f00c fc1e 	bl	8015988 <vsniprintf>
 800914c:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

	if (ret >= LOG_BUFFER_MAX_SIZE)
 8009150:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009154:	2b95      	cmp	r3, #149	@ 0x95
 8009156:	dd0b      	ble.n	8009170 <acc_integration_log+0x48>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8009158:	232e      	movs	r3, #46	@ 0x2e
 800915a:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 800915e:	232e      	movs	r3, #46	@ 0x2e
 8009160:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 8009164:	232e      	movs	r3, #46	@ 0x2e
 8009166:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
	}

	uint32_t time_ms = acc_integration_get_time();
 8009170:	f000 fd30 	bl	8009bd4 <acc_integration_get_time>
 8009174:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
	char     level_ch;

	unsigned int timestamp    = time_ms;
 8009178:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800917c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8009180:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009184:	4a2c      	ldr	r2, [pc, #176]	@ (8009238 <acc_integration_log+0x110>)
 8009186:	fba2 2303 	umull	r2, r3, r2, r3
 800918a:	0d5b      	lsrs	r3, r3, #21
 800918c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8009190:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009194:	4a29      	ldr	r2, [pc, #164]	@ (800923c <acc_integration_log+0x114>)
 8009196:	fba2 2303 	umull	r2, r3, r2, r3
 800919a:	0b9a      	lsrs	r2, r3, #14
 800919c:	4b28      	ldr	r3, [pc, #160]	@ (8009240 <acc_integration_log+0x118>)
 800919e:	fba3 1302 	umull	r1, r3, r3, r2
 80091a2:	0959      	lsrs	r1, r3, #5
 80091a4:	460b      	mov	r3, r1
 80091a6:	011b      	lsls	r3, r3, #4
 80091a8:	1a5b      	subs	r3, r3, r1
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	unsigned int seconds      = timestamp / 1000 % 60;
 80091b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091b6:	4a23      	ldr	r2, [pc, #140]	@ (8009244 <acc_integration_log+0x11c>)
 80091b8:	fba2 2303 	umull	r2, r3, r2, r3
 80091bc:	099a      	lsrs	r2, r3, #6
 80091be:	4b20      	ldr	r3, [pc, #128]	@ (8009240 <acc_integration_log+0x118>)
 80091c0:	fba3 1302 	umull	r1, r3, r3, r2
 80091c4:	0959      	lsrs	r1, r3, #5
 80091c6:	460b      	mov	r3, r1
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	1a5b      	subs	r3, r3, r1
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	unsigned int milliseconds = timestamp % 1000;
 80091d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091d8:	4a1a      	ldr	r2, [pc, #104]	@ (8009244 <acc_integration_log+0x11c>)
 80091da:	fba2 1203 	umull	r1, r2, r2, r3
 80091de:	0992      	lsrs	r2, r2, #6
 80091e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80091e4:	fb01 f202 	mul.w	r2, r1, r2
 80091e8:	1a9b      	subs	r3, r3, r2
 80091ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 80091ee:	79fb      	ldrb	r3, [r7, #7]
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d803      	bhi.n	80091fc <acc_integration_log+0xd4>
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	4a14      	ldr	r2, [pc, #80]	@ (8009248 <acc_integration_log+0x120>)
 80091f8:	5cd3      	ldrb	r3, [r2, r3]
 80091fa:	e000      	b.n	80091fe <acc_integration_log+0xd6>
 80091fc:	233f      	movs	r3, #63	@ 0x3f
 80091fe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8009202:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8009206:	f107 020c 	add.w	r2, r7, #12
 800920a:	9203      	str	r2, [sp, #12]
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	9202      	str	r2, [sp, #8]
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800921c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009220:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8009224:	4809      	ldr	r0, [pc, #36]	@ (800924c <acc_integration_log+0x124>)
 8009226:	f00c fabd 	bl	80157a4 <iprintf>

	va_end(ap);
}
 800922a:	bf00      	nop
 800922c:	37c0      	adds	r7, #192	@ 0xc0
 800922e:	46bd      	mov	sp, r7
 8009230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009234:	b002      	add	sp, #8
 8009236:	4770      	bx	lr
 8009238:	95217cb1 	.word	0x95217cb1
 800923c:	45e7b273 	.word	0x45e7b273
 8009240:	88888889 	.word	0x88888889
 8009244:	10624dd3 	.word	0x10624dd3
 8009248:	08019a1c 	.word	0x08019a1c
 800924c:	080199f8 	.word	0x080199f8

08009250 <disable_interrupts>:
	uint32_t RCC_GPIO_CLK_ENABLE; /*!< GPIO Port Clock Enable               */
} gpio_config_t;


static inline void disable_interrupts(void)
{
 8009250:	b480      	push	{r7}
 8009252:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009254:	b672      	cpsid	i
}
 8009256:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009258:	f3bf 8f4f 	dsb	sy
}
 800925c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800925e:	f3bf 8f6f 	isb	sy
}
 8009262:	bf00      	nop
	__disable_irq();
	__DSB();
	__ISB();
}
 8009264:	bf00      	nop
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <enable_interrupts>:


static inline void enable_interrupts(void)
{
 800926e:	b480      	push	{r7}
 8009270:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8009272:	b662      	cpsie	i
}
 8009274:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009276:	f3bf 8f4f 	dsb	sy
}
 800927a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800927c:	f3bf 8f6f 	isb	sy
}
 8009280:	bf00      	nop
	__enable_irq();
	__DSB();
	__ISB();
}
 8009282:	bf00      	nop
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <rtc_time_to_tick>:
 *
 * @param[in] time RTC time
 * @return rtc ticks in ms
 */
static uint32_t rtc_time_to_tick(RTC_TimeTypeDef *time)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
	uint32_t rtc_ticks_ms = 0;
 8009294:	2300      	movs	r3, #0
 8009296:	60fb      	str	r3, [r7, #12]

	if (time->Hours)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d009      	beq.n	80092b4 <rtc_time_to_tick+0x28>
	{
		rtc_ticks_ms += time->Hours * 60 * 60 * 1000;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	461a      	mov	r2, r3
 80092a6:	4b1e      	ldr	r3, [pc, #120]	@ (8009320 <rtc_time_to_tick+0x94>)
 80092a8:	fb02 f303 	mul.w	r3, r2, r3
 80092ac:	461a      	mov	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
	}

	if (time->Minutes)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	785b      	ldrb	r3, [r3, #1]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00a      	beq.n	80092d2 <rtc_time_to_tick+0x46>
	{
		rtc_ticks_ms += time->Minutes * 60 * 1000;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	785b      	ldrb	r3, [r3, #1]
 80092c0:	461a      	mov	r2, r3
 80092c2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80092c6:	fb02 f303 	mul.w	r3, r2, r3
 80092ca:	461a      	mov	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4413      	add	r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]
	}

	if (time->Seconds)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	789b      	ldrb	r3, [r3, #2]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <rtc_time_to_tick+0x64>
	{
		rtc_ticks_ms += time->Seconds * 1000;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	789b      	ldrb	r3, [r3, #2]
 80092de:	461a      	mov	r2, r3
 80092e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80092e4:	fb02 f303 	mul.w	r3, r2, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	4413      	add	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]
	}

	rtc_ticks_ms += ((time->SecondFraction - time->SubSeconds) * 1000) / (time->SecondFraction + 1);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80092fe:	fb03 f202 	mul.w	r2, r3, r2
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	3301      	adds	r3, #1
 8009308:	fbb2 f3f3 	udiv	r3, r2, r3
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	4413      	add	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]

	return rtc_ticks_ms;
 8009312:	68fb      	ldr	r3, [r7, #12]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	0036ee80 	.word	0x0036ee80

08009324 <rtc_tick_to_time>:
 *
 * @param[in] tick rtc ticks in ms
 * @param[out] time RTC time
 */
static void rtc_tick_to_time(uint32_t tick, RTC_TimeTypeDef *time)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
	uint32_t rtc_ticks_ms = tick;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	60fb      	str	r3, [r7, #12]

	time->SecondFraction = MODULE_RTC_HANDLE.Init.SynchPrediv;
 8009332:	4b36      	ldr	r3, [pc, #216]	@ (800940c <rtc_tick_to_time+0xe8>)
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	609a      	str	r2, [r3, #8]

	time->Hours = (rtc_ticks_ms / (60 * 60 * 1000)) % 24;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	4a34      	ldr	r2, [pc, #208]	@ (8009410 <rtc_tick_to_time+0xec>)
 800933e:	fba2 2303 	umull	r2, r3, r2, r3
 8009342:	0d59      	lsrs	r1, r3, #21
 8009344:	4b33      	ldr	r3, [pc, #204]	@ (8009414 <rtc_tick_to_time+0xf0>)
 8009346:	fba3 2301 	umull	r2, r3, r3, r1
 800934a:	091a      	lsrs	r2, r3, #4
 800934c:	4613      	mov	r3, r2
 800934e:	005b      	lsls	r3, r3, #1
 8009350:	4413      	add	r3, r2
 8009352:	00db      	lsls	r3, r3, #3
 8009354:	1aca      	subs	r2, r1, r3
 8009356:	b2d2      	uxtb	r2, r2
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	701a      	strb	r2, [r3, #0]

	rtc_ticks_ms = rtc_ticks_ms % (60 * 60 * 1000);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4a2c      	ldr	r2, [pc, #176]	@ (8009410 <rtc_tick_to_time+0xec>)
 8009360:	fba2 1203 	umull	r1, r2, r2, r3
 8009364:	0d52      	lsrs	r2, r2, #21
 8009366:	492c      	ldr	r1, [pc, #176]	@ (8009418 <rtc_tick_to_time+0xf4>)
 8009368:	fb01 f202 	mul.w	r2, r1, r2
 800936c:	1a9b      	subs	r3, r3, r2
 800936e:	60fb      	str	r3, [r7, #12]

	time->Minutes = (rtc_ticks_ms / (60 * 1000)) % 60;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4a2a      	ldr	r2, [pc, #168]	@ (800941c <rtc_tick_to_time+0xf8>)
 8009374:	fba2 2303 	umull	r2, r3, r2, r3
 8009378:	0b99      	lsrs	r1, r3, #14
 800937a:	4b29      	ldr	r3, [pc, #164]	@ (8009420 <rtc_tick_to_time+0xfc>)
 800937c:	fba3 2301 	umull	r2, r3, r3, r1
 8009380:	095a      	lsrs	r2, r3, #5
 8009382:	4613      	mov	r3, r2
 8009384:	011b      	lsls	r3, r3, #4
 8009386:	1a9b      	subs	r3, r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	1aca      	subs	r2, r1, r3
 800938c:	b2d2      	uxtb	r2, r2
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	705a      	strb	r2, [r3, #1]

	rtc_ticks_ms = rtc_ticks_ms % (60 * 1000);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	4a21      	ldr	r2, [pc, #132]	@ (800941c <rtc_tick_to_time+0xf8>)
 8009396:	fba2 1203 	umull	r1, r2, r2, r3
 800939a:	0b92      	lsrs	r2, r2, #14
 800939c:	f64e 2160 	movw	r1, #60000	@ 0xea60
 80093a0:	fb01 f202 	mul.w	r2, r1, r2
 80093a4:	1a9b      	subs	r3, r3, r2
 80093a6:	60fb      	str	r3, [r7, #12]

	time->Seconds = (rtc_ticks_ms / 1000) % 60;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009424 <rtc_tick_to_time+0x100>)
 80093ac:	fba2 2303 	umull	r2, r3, r2, r3
 80093b0:	0999      	lsrs	r1, r3, #6
 80093b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009420 <rtc_tick_to_time+0xfc>)
 80093b4:	fba3 2301 	umull	r2, r3, r3, r1
 80093b8:	095a      	lsrs	r2, r3, #5
 80093ba:	4613      	mov	r3, r2
 80093bc:	011b      	lsls	r3, r3, #4
 80093be:	1a9b      	subs	r3, r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	1aca      	subs	r2, r1, r3
 80093c4:	b2d2      	uxtb	r2, r2
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	709a      	strb	r2, [r3, #2]

	rtc_ticks_ms = rtc_ticks_ms % 1000;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	4a15      	ldr	r2, [pc, #84]	@ (8009424 <rtc_tick_to_time+0x100>)
 80093ce:	fba2 1203 	umull	r1, r2, r2, r3
 80093d2:	0992      	lsrs	r2, r2, #6
 80093d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80093d8:	fb01 f202 	mul.w	r2, r1, r2
 80093dc:	1a9b      	subs	r3, r3, r2
 80093de:	60fb      	str	r3, [r7, #12]

	time->SubSeconds = time->SecondFraction - (rtc_ticks_ms * (time->SecondFraction + 1)) / 1000;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	689a      	ldr	r2, [r3, #8]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	3301      	adds	r3, #1
 80093ea:	68f9      	ldr	r1, [r7, #12]
 80093ec:	fb01 f303 	mul.w	r3, r1, r3
 80093f0:	490c      	ldr	r1, [pc, #48]	@ (8009424 <rtc_tick_to_time+0x100>)
 80093f2:	fba1 1303 	umull	r1, r3, r1, r3
 80093f6:	099b      	lsrs	r3, r3, #6
 80093f8:	1ad2      	subs	r2, r2, r3
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	605a      	str	r2, [r3, #4]
}
 80093fe:	bf00      	nop
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	200004b4 	.word	0x200004b4
 8009410:	95217cb1 	.word	0x95217cb1
 8009414:	aaaaaaab 	.word	0xaaaaaaab
 8009418:	0036ee80 	.word	0x0036ee80
 800941c:	45e7b273 	.word	0x45e7b273
 8009420:	88888889 	.word	0x88888889
 8009424:	10624dd3 	.word	0x10624dd3

08009428 <get_rtc_tick>:
 * @brief Get RTC ticks based on current RTC time
 *
 * @return The current RTC ticks in ms
 */
static uint32_t get_rtc_tick(void)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
	RTC_DateTypeDef rtc_date = { 0 };
 800942e:	2300      	movs	r3, #0
 8009430:	617b      	str	r3, [r7, #20]
	RTC_TimeTypeDef rtc_time = { 0 };
 8009432:	463b      	mov	r3, r7
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	605a      	str	r2, [r3, #4]
 800943a:	609a      	str	r2, [r3, #8]
 800943c:	60da      	str	r2, [r3, #12]
 800943e:	611a      	str	r2, [r3, #16]

	/*  Wait until any pending shift operation is completed */
	while ((MODULE_RTC_HANDLE.Instance->ISR & RTC_ISR_SHPF) != RESET)
 8009440:	bf00      	nop
 8009442:	4b13      	ldr	r3, [pc, #76]	@ (8009490 <get_rtc_tick+0x68>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f003 0308 	and.w	r3, r3, #8
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1f8      	bne.n	8009442 <get_rtc_tick+0x1a>
	{
		;
	}

	if (HAL_RTC_GetTime(&MODULE_RTC_HANDLE, &rtc_time, RTC_FORMAT_BIN) != HAL_OK)
 8009450:	463b      	mov	r3, r7
 8009452:	2200      	movs	r2, #0
 8009454:	4619      	mov	r1, r3
 8009456:	480e      	ldr	r0, [pc, #56]	@ (8009490 <get_rtc_tick+0x68>)
 8009458:	f7fb fecd 	bl	80051f6 <HAL_RTC_GetTime>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <get_rtc_tick+0x3e>
	{
		Error_Handler();
 8009462:	f000 fea5 	bl	800a1b0 <Error_Handler>
	}

	if (HAL_RTC_GetDate(&MODULE_RTC_HANDLE, &rtc_date, RTC_FORMAT_BIN) != HAL_OK)
 8009466:	f107 0314 	add.w	r3, r7, #20
 800946a:	2200      	movs	r2, #0
 800946c:	4619      	mov	r1, r3
 800946e:	4808      	ldr	r0, [pc, #32]	@ (8009490 <get_rtc_tick+0x68>)
 8009470:	f7fb ffa4 	bl	80053bc <HAL_RTC_GetDate>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <get_rtc_tick+0x56>
	{
		Error_Handler();
 800947a:	f000 fe99 	bl	800a1b0 <Error_Handler>
	}

	return rtc_time_to_tick(&rtc_time);
 800947e:	463b      	mov	r3, r7
 8009480:	4618      	mov	r0, r3
 8009482:	f7ff ff03 	bl	800928c <rtc_time_to_tick>
 8009486:	4603      	mov	r3, r0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	200004b4 	.word	0x200004b4

08009494 <update_system_tick>:
 *
 * @param[in] rtc_ticks_pre_sleep  rtc ticks before sleep was entered
 * @param[in] rtc_ticks_post_sleep rtc ticks after sleep was exited
 */
static void update_system_tick(uint32_t rtc_ticks_pre_sleep, uint32_t rtc_ticks_post_sleep)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
	// Take care of wrapping which will occur every 24h
	int32_t elapsed_ticks = (int32_t)rtc_ticks_post_sleep - rtc_ticks_pre_sleep;
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	60fb      	str	r3, [r7, #12]

	if (elapsed_ticks < 0)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	da03      	bge.n	80094b4 <update_system_tick+0x20>
	{
		elapsed_ticks = RTC_MAX_TIME_MS + elapsed_ticks;
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	4b07      	ldr	r3, [pc, #28]	@ (80094cc <update_system_tick+0x38>)
 80094b0:	4413      	add	r3, r2
 80094b2:	60fb      	str	r3, [r7, #12]
	}

	uwTick += (uint32_t)elapsed_ticks;
 80094b4:	4b06      	ldr	r3, [pc, #24]	@ (80094d0 <update_system_tick+0x3c>)
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4413      	add	r3, r2
 80094bc:	4a04      	ldr	r2, [pc, #16]	@ (80094d0 <update_system_tick+0x3c>)
 80094be:	6013      	str	r3, [r2, #0]
}
 80094c0:	bf00      	nop
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	05265c00 	.word	0x05265c00
 80094d0:	20000390 	.word	0x20000390

080094d4 <rtc_set_next_wakeup_time>:

/**
 * @brief Function for setting the next wakeup time from the RTC interrupt.
 */
static void rtc_set_next_wakeup_time(void)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08c      	sub	sp, #48	@ 0x30
 80094d8:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef alarm = { {0}, 0, 0, 0, 0, 0, 0};
 80094da:	1d3b      	adds	r3, r7, #4
 80094dc:	222c      	movs	r2, #44	@ 0x2c
 80094de:	2100      	movs	r1, #0
 80094e0:	4618      	mov	r0, r3
 80094e2:	f00c fb0d 	bl	8015b00 <memset>

	if (periodic_sleep_time_ms != 0)
 80094e6:	4b1f      	ldr	r3, [pc, #124]	@ (8009564 <rtc_set_next_wakeup_time+0x90>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d029      	beq.n	8009542 <rtc_set_next_wakeup_time+0x6e>
	{
		rtc_tick_to_time(get_rtc_tick() + periodic_sleep_time_ms, &alarm.AlarmTime);
 80094ee:	f7ff ff9b 	bl	8009428 <get_rtc_tick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	4b1b      	ldr	r3, [pc, #108]	@ (8009564 <rtc_set_next_wakeup_time+0x90>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4413      	add	r3, r2
 80094fa:	1d3a      	adds	r2, r7, #4
 80094fc:	4611      	mov	r1, r2
 80094fe:	4618      	mov	r0, r3
 8009500:	f7ff ff10 	bl	8009324 <rtc_tick_to_time>

		alarm.Alarm              = RTC_ALARM_A;
 8009504:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009508:	62fb      	str	r3, [r7, #44]	@ 0x2c
		alarm.AlarmMask          = RTC_ALARMMASK_DATEWEEKDAY;
 800950a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800950e:	61bb      	str	r3, [r7, #24]
		alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14;
 8009510:	f04f 6360 	mov.w	r3, #234881024	@ 0xe000000
 8009514:	623b      	str	r3, [r7, #32]

		if (HAL_RTC_DeactivateAlarm(&MODULE_RTC_HANDLE, RTC_ALARM_A) != HAL_OK)
 8009516:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800951a:	4813      	ldr	r0, [pc, #76]	@ (8009568 <rtc_set_next_wakeup_time+0x94>)
 800951c:	f7fc f8d8 	bl	80056d0 <HAL_RTC_DeactivateAlarm>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <rtc_set_next_wakeup_time+0x56>
		{
			Error_Handler();
 8009526:	f000 fe43 	bl	800a1b0 <Error_Handler>
		}

		if (HAL_RTC_SetAlarm_IT(&MODULE_RTC_HANDLE, &alarm, RTC_FORMAT_BIN) != HAL_OK)
 800952a:	1d3b      	adds	r3, r7, #4
 800952c:	2200      	movs	r2, #0
 800952e:	4619      	mov	r1, r3
 8009530:	480d      	ldr	r0, [pc, #52]	@ (8009568 <rtc_set_next_wakeup_time+0x94>)
 8009532:	f7fb ff91 	bl	8005458 <HAL_RTC_SetAlarm_IT>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00f      	beq.n	800955c <rtc_set_next_wakeup_time+0x88>
		{
			Error_Handler();
 800953c:	f000 fe38 	bl	800a1b0 <Error_Handler>
			Error_Handler();
		}

		rtc_alarm_triggered = false;
	}
}
 8009540:	e00c      	b.n	800955c <rtc_set_next_wakeup_time+0x88>
		if (HAL_RTC_DeactivateAlarm(&MODULE_RTC_HANDLE, RTC_ALARM_A) != HAL_OK)
 8009542:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009546:	4808      	ldr	r0, [pc, #32]	@ (8009568 <rtc_set_next_wakeup_time+0x94>)
 8009548:	f7fc f8c2 	bl	80056d0 <HAL_RTC_DeactivateAlarm>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <rtc_set_next_wakeup_time+0x82>
			Error_Handler();
 8009552:	f000 fe2d 	bl	800a1b0 <Error_Handler>
		rtc_alarm_triggered = false;
 8009556:	4b05      	ldr	r3, [pc, #20]	@ (800956c <rtc_set_next_wakeup_time+0x98>)
 8009558:	2200      	movs	r2, #0
 800955a:	701a      	strb	r2, [r3, #0]
}
 800955c:	bf00      	nop
 800955e:	3730      	adds	r7, #48	@ 0x30
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20000398 	.word	0x20000398
 8009568:	200004b4 	.word	0x200004b4
 800956c:	20000394 	.word	0x20000394

08009570 <enable_gpio_port_clock>:
 *
 * @param[in] gpio_bank GPIO port clock to set
 * @param[in] enable True to enable clock, False to disable
 */
static void enable_gpio_port_clock(GPIO_TypeDef *gpio_bank, bool enable)
{
 8009570:	b480      	push	{r7}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	70fb      	strb	r3, [r7, #3]
	if (gpio_bank == GPIOA)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009582:	d116      	bne.n	80095b2 <enable_gpio_port_clock+0x42>
	{
		if (enable)
 8009584:	78fb      	ldrb	r3, [r7, #3]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00c      	beq.n	80095a4 <enable_gpio_port_clock+0x34>
		{
			__HAL_RCC_GPIOA_CLK_ENABLE();
 800958a:	4b27      	ldr	r3, [pc, #156]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 800958c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800958e:	4a26      	ldr	r2, [pc, #152]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 8009590:	f043 0301 	orr.w	r3, r3, #1
 8009594:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009596:	4b24      	ldr	r3, [pc, #144]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 8009598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	697b      	ldr	r3, [r7, #20]
		else
		{
			__HAL_RCC_GPIOH_CLK_DISABLE();
		}
	}
}
 80095a2:	e03b      	b.n	800961c <enable_gpio_port_clock+0xac>
			__HAL_RCC_GPIOA_CLK_DISABLE();
 80095a4:	4b20      	ldr	r3, [pc, #128]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 80095a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095a8:	4a1f      	ldr	r2, [pc, #124]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 80095aa:	f023 0301 	bic.w	r3, r3, #1
 80095ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80095b0:	e034      	b.n	800961c <enable_gpio_port_clock+0xac>
	else if (gpio_bank == GPIOB)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a1d      	ldr	r2, [pc, #116]	@ (800962c <enable_gpio_port_clock+0xbc>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d116      	bne.n	80095e8 <enable_gpio_port_clock+0x78>
		if (enable)
 80095ba:	78fb      	ldrb	r3, [r7, #3]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00c      	beq.n	80095da <enable_gpio_port_clock+0x6a>
			__HAL_RCC_GPIOB_CLK_ENABLE();
 80095c0:	4b19      	ldr	r3, [pc, #100]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 80095c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095c4:	4a18      	ldr	r2, [pc, #96]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 80095c6:	f043 0302 	orr.w	r3, r3, #2
 80095ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095cc:	4b16      	ldr	r3, [pc, #88]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 80095ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095d0:	f003 0302 	and.w	r3, r3, #2
 80095d4:	613b      	str	r3, [r7, #16]
 80095d6:	693b      	ldr	r3, [r7, #16]
}
 80095d8:	e020      	b.n	800961c <enable_gpio_port_clock+0xac>
			__HAL_RCC_GPIOB_CLK_DISABLE();
 80095da:	4b13      	ldr	r3, [pc, #76]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 80095dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095de:	4a12      	ldr	r2, [pc, #72]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 80095e0:	f023 0302 	bic.w	r3, r3, #2
 80095e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80095e6:	e019      	b.n	800961c <enable_gpio_port_clock+0xac>
	else if (gpio_bank == GPIOH)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a11      	ldr	r2, [pc, #68]	@ (8009630 <enable_gpio_port_clock+0xc0>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d115      	bne.n	800961c <enable_gpio_port_clock+0xac>
		if (enable)
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00c      	beq.n	8009610 <enable_gpio_port_clock+0xa0>
			__HAL_RCC_GPIOH_CLK_ENABLE();
 80095f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 80095f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095fa:	4a0b      	ldr	r2, [pc, #44]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 80095fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009602:	4b09      	ldr	r3, [pc, #36]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 8009604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]
}
 800960e:	e005      	b.n	800961c <enable_gpio_port_clock+0xac>
			__HAL_RCC_GPIOH_CLK_DISABLE();
 8009610:	4b05      	ldr	r3, [pc, #20]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 8009612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009614:	4a04      	ldr	r2, [pc, #16]	@ (8009628 <enable_gpio_port_clock+0xb8>)
 8009616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800961a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800961c:	bf00      	nop
 800961e:	371c      	adds	r7, #28
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	40021000 	.word	0x40021000
 800962c:	48000400 	.word	0x48000400
 8009630:	48001c00 	.word	0x48001c00

08009634 <get_gpio_port_clock>:
 *
 * @param[in] gpio_bank GPIO bank to save
 * @return True if the GPIO port clock is enabled
 */
static bool get_gpio_port_clock(GPIO_TypeDef *gpio_bank)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
	if (gpio_bank == GPIOA)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009642:	d109      	bne.n	8009658 <get_gpio_port_clock+0x24>
	{
		return __HAL_RCC_GPIOA_IS_CLK_ENABLED();
 8009644:	4b16      	ldr	r3, [pc, #88]	@ (80096a0 <get_gpio_port_clock+0x6c>)
 8009646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	2b00      	cmp	r3, #0
 800964e:	bf14      	ite	ne
 8009650:	2301      	movne	r3, #1
 8009652:	2300      	moveq	r3, #0
 8009654:	b2db      	uxtb	r3, r3
 8009656:	e01e      	b.n	8009696 <get_gpio_port_clock+0x62>
	}
	else if (gpio_bank == GPIOB)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a12      	ldr	r2, [pc, #72]	@ (80096a4 <get_gpio_port_clock+0x70>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d109      	bne.n	8009674 <get_gpio_port_clock+0x40>
	{
		return __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 8009660:	4b0f      	ldr	r3, [pc, #60]	@ (80096a0 <get_gpio_port_clock+0x6c>)
 8009662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009664:	f003 0302 	and.w	r3, r3, #2
 8009668:	2b00      	cmp	r3, #0
 800966a:	bf14      	ite	ne
 800966c:	2301      	movne	r3, #1
 800966e:	2300      	moveq	r3, #0
 8009670:	b2db      	uxtb	r3, r3
 8009672:	e010      	b.n	8009696 <get_gpio_port_clock+0x62>
	}
	else if (gpio_bank == GPIOH)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a0c      	ldr	r2, [pc, #48]	@ (80096a8 <get_gpio_port_clock+0x74>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d109      	bne.n	8009690 <get_gpio_port_clock+0x5c>
	{
		return __HAL_RCC_GPIOH_IS_CLK_ENABLED();
 800967c:	4b08      	ldr	r3, [pc, #32]	@ (80096a0 <get_gpio_port_clock+0x6c>)
 800967e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009684:	2b00      	cmp	r3, #0
 8009686:	bf14      	ite	ne
 8009688:	2301      	movne	r3, #1
 800968a:	2300      	moveq	r3, #0
 800968c:	b2db      	uxtb	r3, r3
 800968e:	e002      	b.n	8009696 <get_gpio_port_clock+0x62>
	}

	/* We should never end up here */
	Error_Handler();
 8009690:	f000 fd8e 	bl	800a1b0 <Error_Handler>
	return false;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	40021000 	.word	0x40021000
 80096a4:	48000400 	.word	0x48000400
 80096a8:	48001c00 	.word	0x48001c00

080096ac <save_gpio_bank>:
 *
 * @param[in] gpio_bank GPIO bank to save
 * @param[out] config Variable for storing the GPIO bank registers
 */
static void save_gpio_bank(GPIO_TypeDef *gpio_bank, gpio_config_t *config)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
	config->MODER   = READ_REG(gpio_bank->MODER);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	601a      	str	r2, [r3, #0]
	config->OTYPER  = READ_REG(gpio_bank->OTYPER);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685a      	ldr	r2, [r3, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	605a      	str	r2, [r3, #4]
	config->OSPEEDR = READ_REG(gpio_bank->OSPEEDR);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	689a      	ldr	r2, [r3, #8]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	609a      	str	r2, [r3, #8]
	config->PUPDR   = READ_REG(gpio_bank->PUPDR);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68da      	ldr	r2, [r3, #12]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	60da      	str	r2, [r3, #12]
	config->AFR[0]  = READ_REG(gpio_bank->AFR[0]);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1a      	ldr	r2, [r3, #32]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	611a      	str	r2, [r3, #16]
	config->AFR[1]  = READ_REG(gpio_bank->AFR[1]);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	615a      	str	r2, [r3, #20]
}
 80096e6:	bf00      	nop
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <restore_gpio_bank>:
 *
 * @param[in] gpio_bank GPIO bank to restore
 * @param[in] config Variable that contains all the saved GPIO bank registers
 */
static void restore_gpio_bank(GPIO_TypeDef *gpio_bank, gpio_config_t *config)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	6039      	str	r1, [r7, #0]
	/* Enable GPIO port clock to be able to change the configuration */
	enable_gpio_port_clock(gpio_bank, true);
 80096fc:	2101      	movs	r1, #1
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7ff ff36 	bl	8009570 <enable_gpio_port_clock>

	WRITE_REG(gpio_bank->MODER, config->MODER);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	601a      	str	r2, [r3, #0]
	WRITE_REG(gpio_bank->OTYPER, config->OTYPER);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	605a      	str	r2, [r3, #4]
	WRITE_REG(gpio_bank->OSPEEDR, config->OSPEEDR);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	689a      	ldr	r2, [r3, #8]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	609a      	str	r2, [r3, #8]
	WRITE_REG(gpio_bank->PUPDR, config->PUPDR);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	60da      	str	r2, [r3, #12]
	WRITE_REG(gpio_bank->AFR[0], config->AFR[0]);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	621a      	str	r2, [r3, #32]
	WRITE_REG(gpio_bank->AFR[1], config->AFR[1]);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	695a      	ldr	r2, [r3, #20]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	625a      	str	r2, [r3, #36]	@ 0x24

	/* Restore GPIO port clock to what it was prior to suspending */
	enable_gpio_port_clock(gpio_bank, config->RCC_GPIO_CLK_ENABLE);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	2b00      	cmp	r3, #0
 800973a:	bf14      	ite	ne
 800973c:	2301      	movne	r3, #1
 800973e:	2300      	moveq	r3, #0
 8009740:	b2db      	uxtb	r3, r3
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7ff ff13 	bl	8009570 <enable_gpio_port_clock>
}
 800974a:	bf00      	nop
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <gpio_suspend>:
 * Set all GPIO pins in the lowest power consuming state according to AN4899
 * and disable all the port clocks.
 *
 */
static void gpio_suspend(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b088      	sub	sp, #32
 8009758:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructOff;

	/* Save Clocks */
	saved_gpio_status[0].RCC_GPIO_CLK_ENABLE = get_gpio_port_clock(GPIOA);
 800975a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800975e:	f7ff ff69 	bl	8009634 <get_gpio_port_clock>
 8009762:	4603      	mov	r3, r0
 8009764:	461a      	mov	r2, r3
 8009766:	4b43      	ldr	r3, [pc, #268]	@ (8009874 <gpio_suspend+0x120>)
 8009768:	61da      	str	r2, [r3, #28]
	saved_gpio_status[1].RCC_GPIO_CLK_ENABLE = get_gpio_port_clock(GPIOB);
 800976a:	4843      	ldr	r0, [pc, #268]	@ (8009878 <gpio_suspend+0x124>)
 800976c:	f7ff ff62 	bl	8009634 <get_gpio_port_clock>
 8009770:	4603      	mov	r3, r0
 8009772:	461a      	mov	r2, r3
 8009774:	4b3f      	ldr	r3, [pc, #252]	@ (8009874 <gpio_suspend+0x120>)
 8009776:	63da      	str	r2, [r3, #60]	@ 0x3c
	saved_gpio_status[2].RCC_GPIO_CLK_ENABLE = get_gpio_port_clock(GPIOH);
 8009778:	4840      	ldr	r0, [pc, #256]	@ (800987c <gpio_suspend+0x128>)
 800977a:	f7ff ff5b 	bl	8009634 <get_gpio_port_clock>
 800977e:	4603      	mov	r3, r0
 8009780:	461a      	mov	r2, r3
 8009782:	4b3c      	ldr	r3, [pc, #240]	@ (8009874 <gpio_suspend+0x120>)
 8009784:	65da      	str	r2, [r3, #92]	@ 0x5c

	/* Enable all GPIO port clocks now when we have saved the status */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8009786:	4b3e      	ldr	r3, [pc, #248]	@ (8009880 <gpio_suspend+0x12c>)
 8009788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800978a:	4a3d      	ldr	r2, [pc, #244]	@ (8009880 <gpio_suspend+0x12c>)
 800978c:	f043 0301 	orr.w	r3, r3, #1
 8009790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009792:	4b3b      	ldr	r3, [pc, #236]	@ (8009880 <gpio_suspend+0x12c>)
 8009794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	60bb      	str	r3, [r7, #8]
 800979c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800979e:	4b38      	ldr	r3, [pc, #224]	@ (8009880 <gpio_suspend+0x12c>)
 80097a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097a2:	4a37      	ldr	r2, [pc, #220]	@ (8009880 <gpio_suspend+0x12c>)
 80097a4:	f043 0302 	orr.w	r3, r3, #2
 80097a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097aa:	4b35      	ldr	r3, [pc, #212]	@ (8009880 <gpio_suspend+0x12c>)
 80097ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ae:	f003 0302 	and.w	r3, r3, #2
 80097b2:	607b      	str	r3, [r7, #4]
 80097b4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80097b6:	4b32      	ldr	r3, [pc, #200]	@ (8009880 <gpio_suspend+0x12c>)
 80097b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ba:	4a31      	ldr	r2, [pc, #196]	@ (8009880 <gpio_suspend+0x12c>)
 80097bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097c2:	4b2f      	ldr	r3, [pc, #188]	@ (8009880 <gpio_suspend+0x12c>)
 80097c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	683b      	ldr	r3, [r7, #0]

	/* Save all GPIO banks */
	save_gpio_bank(GPIOA, &saved_gpio_status[0]);
 80097ce:	4929      	ldr	r1, [pc, #164]	@ (8009874 <gpio_suspend+0x120>)
 80097d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80097d4:	f7ff ff6a 	bl	80096ac <save_gpio_bank>
	save_gpio_bank(GPIOB, &saved_gpio_status[1]);
 80097d8:	492a      	ldr	r1, [pc, #168]	@ (8009884 <gpio_suspend+0x130>)
 80097da:	4827      	ldr	r0, [pc, #156]	@ (8009878 <gpio_suspend+0x124>)
 80097dc:	f7ff ff66 	bl	80096ac <save_gpio_bank>
	save_gpio_bank(GPIOH, &saved_gpio_status[2]);
 80097e0:	4929      	ldr	r1, [pc, #164]	@ (8009888 <gpio_suspend+0x134>)
 80097e2:	4826      	ldr	r0, [pc, #152]	@ (800987c <gpio_suspend+0x128>)
 80097e4:	f7ff ff62 	bl	80096ac <save_gpio_bank>

	/* Set all unused GPIO pins in the lowest power consuming state according to AN4899*/
	GPIO_InitStructOff.Mode = GPIO_MODE_ANALOG;
 80097e8:	2303      	movs	r3, #3
 80097ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStructOff.Pull = GPIO_NOPULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	617b      	str	r3, [r7, #20]

	GPIO_InitStructOff.Pin = GPIO_PIN_All;
 80097f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80097f4:	60fb      	str	r3, [r7, #12]

	/* Leave the following pins on bank A unchanged */
	GPIO_InitStructOff.Pin &= (uint16_t) ~(SPI_SCK_Pin |
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 80097fc:	4013      	ands	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]
	                                       SPI_MISO_Pin |
	                                       SPI_MOSI_Pin);

	HAL_GPIO_Init(GPIOA, &GPIO_InitStructOff);
 8009800:	f107 030c 	add.w	r3, r7, #12
 8009804:	4619      	mov	r1, r3
 8009806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800980a:	f7f8 f9fd 	bl	8001c08 <HAL_GPIO_Init>

	GPIO_InitStructOff.Pin = GPIO_PIN_All;
 800980e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009812:	60fb      	str	r3, [r7, #12]

	/* Leave the following pins on bank B unchanged */
	GPIO_InitStructOff.Pin &= (uint16_t) ~(INTERRUPT_Pin |
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	f64e 73e5 	movw	r3, #61413	@ 0xefe5
 800981a:	4013      	ands	r3, r2
 800981c:	60fb      	str	r3, [r7, #12]
	                                       ENABLE_Pin |
	                                       MISC_GPIO1_Pin |
	                                       MISC_GPIO0_Pin);

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructOff);
 800981e:	f107 030c 	add.w	r3, r7, #12
 8009822:	4619      	mov	r1, r3
 8009824:	4814      	ldr	r0, [pc, #80]	@ (8009878 <gpio_suspend+0x124>)
 8009826:	f7f8 f9ef 	bl	8001c08 <HAL_GPIO_Init>

	GPIO_InitStructOff.Pin = GPIO_PIN_All;
 800982a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800982e:	60fb      	str	r3, [r7, #12]

	/* Leave the following pins on bank H unchanged */
	GPIO_InitStructOff.Pin &= (uint16_t) ~(I2C_ADDRESS_Pin |
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 8009836:	4013      	ands	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]
	                                       MISC_GPIO2_Pin);

	HAL_GPIO_Init(GPIOH, &GPIO_InitStructOff);
 800983a:	f107 030c 	add.w	r3, r7, #12
 800983e:	4619      	mov	r1, r3
 8009840:	480e      	ldr	r0, [pc, #56]	@ (800987c <gpio_suspend+0x128>)
 8009842:	f7f8 f9e1 	bl	8001c08 <HAL_GPIO_Init>

	/* Disable all GPIO port clocks */
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8009846:	4b0e      	ldr	r3, [pc, #56]	@ (8009880 <gpio_suspend+0x12c>)
 8009848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800984a:	4a0d      	ldr	r2, [pc, #52]	@ (8009880 <gpio_suspend+0x12c>)
 800984c:	f023 0301 	bic.w	r3, r3, #1
 8009850:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8009852:	4b0b      	ldr	r3, [pc, #44]	@ (8009880 <gpio_suspend+0x12c>)
 8009854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009856:	4a0a      	ldr	r2, [pc, #40]	@ (8009880 <gpio_suspend+0x12c>)
 8009858:	f023 0302 	bic.w	r3, r3, #2
 800985c:	64d3      	str	r3, [r2, #76]	@ 0x4c
	__HAL_RCC_GPIOH_CLK_DISABLE();
 800985e:	4b08      	ldr	r3, [pc, #32]	@ (8009880 <gpio_suspend+0x12c>)
 8009860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009862:	4a07      	ldr	r2, [pc, #28]	@ (8009880 <gpio_suspend+0x12c>)
 8009864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009868:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800986a:	bf00      	nop
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	2000039c 	.word	0x2000039c
 8009878:	48000400 	.word	0x48000400
 800987c:	48001c00 	.word	0x48001c00
 8009880:	40021000 	.word	0x40021000
 8009884:	200003bc 	.word	0x200003bc
 8009888:	200003dc 	.word	0x200003dc

0800988c <gpio_resume>:
 * @brief Resume GPIO driver
 *
 * @return Status
 */
static void gpio_resume(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
	/* Restore all GPIOS */
	restore_gpio_bank(GPIOA, &saved_gpio_status[0]);
 8009890:	4907      	ldr	r1, [pc, #28]	@ (80098b0 <gpio_resume+0x24>)
 8009892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009896:	f7ff ff2c 	bl	80096f2 <restore_gpio_bank>
	restore_gpio_bank(GPIOB, &saved_gpio_status[1]);
 800989a:	4906      	ldr	r1, [pc, #24]	@ (80098b4 <gpio_resume+0x28>)
 800989c:	4806      	ldr	r0, [pc, #24]	@ (80098b8 <gpio_resume+0x2c>)
 800989e:	f7ff ff28 	bl	80096f2 <restore_gpio_bank>
	restore_gpio_bank(GPIOH, &saved_gpio_status[2]);
 80098a2:	4906      	ldr	r1, [pc, #24]	@ (80098bc <gpio_resume+0x30>)
 80098a4:	4806      	ldr	r0, [pc, #24]	@ (80098c0 <gpio_resume+0x34>)
 80098a6:	f7ff ff24 	bl	80096f2 <restore_gpio_bank>
}
 80098aa:	bf00      	nop
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	2000039c 	.word	0x2000039c
 80098b4:	200003bc 	.word	0x200003bc
 80098b8:	48000400 	.word	0x48000400
 80098bc:	200003dc 	.word	0x200003dc
 80098c0:	48001c00 	.word	0x48001c00

080098c4 <HAL_RTC_AlarmAEventCallback>:

/**
 * @brief IRQ Handler for RTC Alarm
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *rtc)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
	(void)rtc;

	rtc_alarm_triggered = true;
 80098cc:	4b04      	ldr	r3, [pc, #16]	@ (80098e0 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80098ce:	2201      	movs	r2, #1
 80098d0:	701a      	strb	r2, [r3, #0]
	rtc_set_next_wakeup_time();
 80098d2:	f7ff fdff 	bl	80094d4 <rtc_set_next_wakeup_time>
}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20000394 	.word	0x20000394

080098e4 <HAL_RTCEx_WakeUpTimerEventCallback>:

/**
 * @brief IRQ Handler for RTC Wakeup
 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *rtc)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
	(void)rtc;

	rtc_wakeup_triggered = true;
 80098ec:	4b04      	ldr	r3, [pc, #16]	@ (8009900 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 80098ee:	2201      	movs	r2, #1
 80098f0:	701a      	strb	r2, [r3, #0]
}
 80098f2:	bf00      	nop
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	20000395 	.word	0x20000395

08009904 <acc_integration_enable_wake_up>:


static void acc_integration_enable_wake_up(uint32_t time_usec)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	uint32_t wakeup_clock;
	uint32_t wakeup_counter;

	rtc_wakeup_triggered = false;
 800990c:	4b1b      	ldr	r3, [pc, #108]	@ (800997c <acc_integration_enable_wake_up+0x78>)
 800990e:	2200      	movs	r2, #0
 8009910:	701a      	strb	r2, [r3, #0]
	// RTC_WAKEUPCLOCK_RTCCLK_DIV16 gives 1÷32000×16 = 500  us resolution and max 32s
	// RTC_WAKEUPCLOCK_RTCCLK_DIV8  gives 1÷32000×8  = 250  us resolution and max 16s
	// RTC_WAKEUPCLOCK_RTCCLK_DIV4  gives 1÷32000×4  = 125  us resolution and max 8s
	// RTC_WAKEUPCLOCK_RTCCLK_DIV2  gives 1÷32000×2  = 62.5 us resolution and max 4s
	// RTC_WAKEUPCLOCK_CK_SPRE_16BITS gives            1000 ms resolution and max 18h
	if (time_usec > 30000000)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a1a      	ldr	r2, [pc, #104]	@ (8009980 <acc_integration_enable_wake_up+0x7c>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d909      	bls.n	800992e <acc_integration_enable_wake_up+0x2a>
	{
		wakeup_clock   = RTC_WAKEUPCLOCK_CK_SPRE_16BITS;
 800991a:	2304      	movs	r3, #4
 800991c:	60fb      	str	r3, [r7, #12]
		wakeup_counter = (time_usec / 1000000) - 1;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a18      	ldr	r2, [pc, #96]	@ (8009984 <acc_integration_enable_wake_up+0x80>)
 8009922:	fba2 2303 	umull	r2, r3, r2, r3
 8009926:	0c9b      	lsrs	r3, r3, #18
 8009928:	3b01      	subs	r3, #1
 800992a:	60bb      	str	r3, [r7, #8]
 800992c:	e018      	b.n	8009960 <acc_integration_enable_wake_up+0x5c>
	}
	else if (time_usec > 100000)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a15      	ldr	r2, [pc, #84]	@ (8009988 <acc_integration_enable_wake_up+0x84>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d90a      	bls.n	800994c <acc_integration_enable_wake_up+0x48>
	{
		wakeup_clock   = RTC_WAKEUPCLOCK_RTCCLK_DIV16;
 8009936:	2300      	movs	r3, #0
 8009938:	60fb      	str	r3, [r7, #12]
		wakeup_counter = (time_usec * 2 / 1000) - 1;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	4a13      	ldr	r2, [pc, #76]	@ (800998c <acc_integration_enable_wake_up+0x88>)
 8009940:	fba2 2303 	umull	r2, r3, r2, r3
 8009944:	099b      	lsrs	r3, r3, #6
 8009946:	3b01      	subs	r3, #1
 8009948:	60bb      	str	r3, [r7, #8]
 800994a:	e009      	b.n	8009960 <acc_integration_enable_wake_up+0x5c>
	}
	else
	{
		wakeup_clock   = RTC_WAKEUPCLOCK_RTCCLK_DIV2;
 800994c:	2303      	movs	r3, #3
 800994e:	60fb      	str	r3, [r7, #12]
		wakeup_counter = (time_usec * 16 / 1000) - 1;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	011b      	lsls	r3, r3, #4
 8009954:	4a0d      	ldr	r2, [pc, #52]	@ (800998c <acc_integration_enable_wake_up+0x88>)
 8009956:	fba2 2303 	umull	r2, r3, r2, r3
 800995a:	099b      	lsrs	r3, r3, #6
 800995c:	3b01      	subs	r3, #1
 800995e:	60bb      	str	r3, [r7, #8]
	}

	if (HAL_RTCEx_SetWakeUpTimer_IT(&MODULE_RTC_HANDLE, wakeup_counter, wakeup_clock) != HAL_OK)
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	68b9      	ldr	r1, [r7, #8]
 8009964:	480a      	ldr	r0, [pc, #40]	@ (8009990 <acc_integration_enable_wake_up+0x8c>)
 8009966:	f7fc f85d 	bl	8005a24 <HAL_RTCEx_SetWakeUpTimer_IT>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <acc_integration_enable_wake_up+0x70>
	{
		Error_Handler();
 8009970:	f000 fc1e 	bl	800a1b0 <Error_Handler>
	}
}
 8009974:	bf00      	nop
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	20000395 	.word	0x20000395
 8009980:	01c9c380 	.word	0x01c9c380
 8009984:	431bde83 	.word	0x431bde83
 8009988:	000186a0 	.word	0x000186a0
 800998c:	10624dd3 	.word	0x10624dd3
 8009990:	200004b4 	.word	0x200004b4

08009994 <acc_integration_disable_wake_up>:


static void acc_integration_disable_wake_up(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_DeactivateWakeUpTimer(&MODULE_RTC_HANDLE) != HAL_OK)
 8009998:	4804      	ldr	r0, [pc, #16]	@ (80099ac <acc_integration_disable_wake_up+0x18>)
 800999a:	f7fc f8d7 	bl	8005b4c <HAL_RTCEx_DeactivateWakeUpTimer>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <acc_integration_disable_wake_up+0x14>
	{
		Error_Handler();
 80099a4:	f000 fc04 	bl	800a1b0 <Error_Handler>
	}
}
 80099a8:	bf00      	nop
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	200004b4 	.word	0x200004b4

080099b0 <acc_integration_sleep_ms>:


void acc_integration_sleep_ms(uint32_t time_msec)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	acc_integration_sleep_us(time_msec * 1000);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80099be:	fb02 f303 	mul.w	r3, r2, r3
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f804 	bl	80099d0 <acc_integration_sleep_us>
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <acc_integration_sleep_us>:


void acc_integration_sleep_us(uint32_t time_usec)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
	acc_integration_enable_wake_up(time_usec);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff ff93 	bl	8009904 <acc_integration_enable_wake_up>

	while (!rtc_wakeup_triggered)
 80099de:	e00c      	b.n	80099fa <acc_integration_sleep_us+0x2a>
	{
		// Turn off interrupts
		disable_interrupts();
 80099e0:	f7ff fc36 	bl	8009250 <disable_interrupts>

		if (!rtc_wakeup_triggered)
 80099e4:	4b0d      	ldr	r3, [pc, #52]	@ (8009a1c <acc_integration_sleep_us+0x4c>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	f083 0301 	eor.w	r3, r3, #1
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d000      	beq.n	80099f6 <acc_integration_sleep_us+0x26>
		{
			__WFI();
 80099f4:	bf30      	wfi
		}

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
 80099f6:	f7ff fc3a 	bl	800926e <enable_interrupts>
	while (!rtc_wakeup_triggered)
 80099fa:	4b08      	ldr	r3, [pc, #32]	@ (8009a1c <acc_integration_sleep_us+0x4c>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f083 0301 	eor.w	r3, r3, #1
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1ea      	bne.n	80099e0 <acc_integration_sleep_us+0x10>
	}

	rtc_wakeup_triggered = false;
 8009a0a:	4b04      	ldr	r3, [pc, #16]	@ (8009a1c <acc_integration_sleep_us+0x4c>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	701a      	strb	r2, [r3, #0]

	acc_integration_disable_wake_up();
 8009a10:	f7ff ffc0 	bl	8009994 <acc_integration_disable_wake_up>
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	20000395 	.word	0x20000395

08009a20 <acc_integration_set_periodic_wakeup>:


void acc_integration_set_periodic_wakeup(uint32_t time_msec)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
	periodic_sleep_time_ms = time_msec;
 8009a28:	4a04      	ldr	r2, [pc, #16]	@ (8009a3c <acc_integration_set_periodic_wakeup+0x1c>)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6013      	str	r3, [r2, #0]
	rtc_set_next_wakeup_time();
 8009a2e:	f7ff fd51 	bl	80094d4 <rtc_set_next_wakeup_time>
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000398 	.word	0x20000398

08009a40 <acc_integration_prepare_stop_1>:


static void acc_integration_prepare_stop_1(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
	HAL_RCC_GetOscConfig(&prepare_saved_rcc_oscinitstruct);
 8009a44:	4811      	ldr	r0, [pc, #68]	@ (8009a8c <acc_integration_prepare_stop_1+0x4c>)
 8009a46:	f7fa fe4b 	bl	80046e0 <HAL_RCC_GetOscConfig>
	HAL_RCC_GetClockConfig(&prepare_saved_rcc_clkinitstruct, &prepare_saved_flatency);
 8009a4a:	4911      	ldr	r1, [pc, #68]	@ (8009a90 <acc_integration_prepare_stop_1+0x50>)
 8009a4c:	4811      	ldr	r0, [pc, #68]	@ (8009a94 <acc_integration_prepare_stop_1+0x54>)
 8009a4e:	f7fa ff11 	bl	8004874 <HAL_RCC_GetClockConfig>

	prepare_saved_i2c_state = MODULE_I2C_HANDLE.State;
 8009a52:	4b11      	ldr	r3, [pc, #68]	@ (8009a98 <acc_integration_prepare_stop_1+0x58>)
 8009a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	4b10      	ldr	r3, [pc, #64]	@ (8009a9c <acc_integration_prepare_stop_1+0x5c>)
 8009a5c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_DeInit(&MODULE_I2C_HANDLE);
 8009a5e:	480e      	ldr	r0, [pc, #56]	@ (8009a98 <acc_integration_prepare_stop_1+0x58>)
 8009a60:	f7f8 fc14 	bl	800228c <HAL_I2C_DeInit>
	HAL_SPI_DeInit(&A121_SPI_HANDLE);
 8009a64:	480e      	ldr	r0, [pc, #56]	@ (8009aa0 <acc_integration_prepare_stop_1+0x60>)
 8009a66:	f7fc f9a2 	bl	8005dae <HAL_SPI_DeInit>
	prepare_saved_uart1_rx_state = MODULE_UART1_HANDLE.RxState;
 8009a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8009aa4 <acc_integration_prepare_stop_1+0x64>)
 8009a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a70:	4a0d      	ldr	r2, [pc, #52]	@ (8009aa8 <acc_integration_prepare_stop_1+0x68>)
 8009a72:	6013      	str	r3, [r2, #0]
	HAL_UART_DeInit(&MODULE_UART1_HANDLE);
 8009a74:	480b      	ldr	r0, [pc, #44]	@ (8009aa4 <acc_integration_prepare_stop_1+0x64>)
 8009a76:	f7fc fd93 	bl	80065a0 <HAL_UART_DeInit>
	HAL_UART_DeInit(&MODULE_UART2_HANDLE);
 8009a7a:	480c      	ldr	r0, [pc, #48]	@ (8009aac <acc_integration_prepare_stop_1+0x6c>)
 8009a7c:	f7fc fd90 	bl	80065a0 <HAL_UART_DeInit>

	gpio_suspend();
 8009a80:	f7ff fe68 	bl	8009754 <gpio_suspend>

	HAL_SuspendTick();
 8009a84:	f7f7 fc46 	bl	8001314 <HAL_SuspendTick>
}
 8009a88:	bf00      	nop
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	200003fc 	.word	0x200003fc
 8009a90:	20000454 	.word	0x20000454
 8009a94:	20000440 	.word	0x20000440
 8009a98:	20000460 	.word	0x20000460
 8009a9c:	2000045c 	.word	0x2000045c
 8009aa0:	200004d8 	.word	0x200004d8
 8009aa4:	20000654 	.word	0x20000654
 8009aa8:	20000458 	.word	0x20000458
 8009aac:	200005cc 	.word	0x200005cc

08009ab0 <acc_integration_resume_stop_1>:


static void acc_integration_resume_stop_1(void)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	af00      	add	r7, sp, #0
	HAL_ResumeTick();
 8009ab4:	f7f7 fc3e 	bl	8001334 <HAL_ResumeTick>

	HAL_RCC_OscConfig(&prepare_saved_rcc_oscinitstruct);
 8009ab8:	481d      	ldr	r0, [pc, #116]	@ (8009b30 <acc_integration_resume_stop_1+0x80>)
 8009aba:	f7fa f839 	bl	8003b30 <HAL_RCC_OscConfig>
	HAL_RCC_ClockConfig(&prepare_saved_rcc_clkinitstruct, prepare_saved_flatency);
 8009abe:	4b1d      	ldr	r3, [pc, #116]	@ (8009b34 <acc_integration_resume_stop_1+0x84>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	481c      	ldr	r0, [pc, #112]	@ (8009b38 <acc_integration_resume_stop_1+0x88>)
 8009ac6:	f7fa fc47 	bl	8004358 <HAL_RCC_ClockConfig>

	gpio_resume();
 8009aca:	f7ff fedf 	bl	800988c <gpio_resume>

	HAL_I2C_Init(&MODULE_I2C_HANDLE);
 8009ace:	481b      	ldr	r0, [pc, #108]	@ (8009b3c <acc_integration_resume_stop_1+0x8c>)
 8009ad0:	f7f8 fb41 	bl	8002156 <HAL_I2C_Init>
	if (prepare_saved_i2c_state == HAL_I2C_STATE_LISTEN)
 8009ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b40 <acc_integration_resume_stop_1+0x90>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	2b28      	cmp	r3, #40	@ 0x28
 8009ada:	d102      	bne.n	8009ae2 <acc_integration_resume_stop_1+0x32>
	{
		HAL_I2C_EnableListen_IT(&MODULE_I2C_HANDLE);
 8009adc:	4817      	ldr	r0, [pc, #92]	@ (8009b3c <acc_integration_resume_stop_1+0x8c>)
 8009ade:	f7f8 fc05 	bl	80022ec <HAL_I2C_EnableListen_IT>
	}

	HAL_SPI_Init(&A121_SPI_HANDLE);
 8009ae2:	4818      	ldr	r0, [pc, #96]	@ (8009b44 <acc_integration_resume_stop_1+0x94>)
 8009ae4:	f7fc f8c0 	bl	8005c68 <HAL_SPI_Init>
	HAL_UART_Init(&MODULE_UART1_HANDLE);
 8009ae8:	4817      	ldr	r0, [pc, #92]	@ (8009b48 <acc_integration_resume_stop_1+0x98>)
 8009aea:	f7fc fd0b 	bl	8006504 <HAL_UART_Init>

	if (prepare_saved_uart1_rx_state == HAL_UART_STATE_BUSY_RX)
 8009aee:	4b17      	ldr	r3, [pc, #92]	@ (8009b4c <acc_integration_resume_stop_1+0x9c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b22      	cmp	r3, #34	@ 0x22
 8009af4:	d116      	bne.n	8009b24 <acc_integration_resume_stop_1+0x74>
	{
		if (MODULE_UART1_HANDLE.hdmarx != NULL)
 8009af6:	4b14      	ldr	r3, [pc, #80]	@ (8009b48 <acc_integration_resume_stop_1+0x98>)
 8009af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d009      	beq.n	8009b12 <acc_integration_resume_stop_1+0x62>
		{
			HAL_UART_Receive_DMA(&MODULE_UART1_HANDLE, MODULE_UART1_HANDLE.pRxBuffPtr, MODULE_UART1_HANDLE.RxXferSize);
 8009afe:	4b12      	ldr	r3, [pc, #72]	@ (8009b48 <acc_integration_resume_stop_1+0x98>)
 8009b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b02:	4a11      	ldr	r2, [pc, #68]	@ (8009b48 <acc_integration_resume_stop_1+0x98>)
 8009b04:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
 8009b08:	4619      	mov	r1, r3
 8009b0a:	480f      	ldr	r0, [pc, #60]	@ (8009b48 <acc_integration_resume_stop_1+0x98>)
 8009b0c:	f7fc ff24 	bl	8006958 <HAL_UART_Receive_DMA>
 8009b10:	e008      	b.n	8009b24 <acc_integration_resume_stop_1+0x74>
		}
		else
		{
			HAL_UART_Receive_IT(&MODULE_UART1_HANDLE, MODULE_UART1_HANDLE.pRxBuffPtr, MODULE_UART1_HANDLE.RxXferSize);
 8009b12:	4b0d      	ldr	r3, [pc, #52]	@ (8009b48 <acc_integration_resume_stop_1+0x98>)
 8009b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b16:	4a0c      	ldr	r2, [pc, #48]	@ (8009b48 <acc_integration_resume_stop_1+0x98>)
 8009b18:	f8b2 2058 	ldrh.w	r2, [r2, #88]	@ 0x58
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	480a      	ldr	r0, [pc, #40]	@ (8009b48 <acc_integration_resume_stop_1+0x98>)
 8009b20:	f7fc fece 	bl	80068c0 <HAL_UART_Receive_IT>
		}
	}

	HAL_UART_Init(&MODULE_UART2_HANDLE);
 8009b24:	480a      	ldr	r0, [pc, #40]	@ (8009b50 <acc_integration_resume_stop_1+0xa0>)
 8009b26:	f7fc fced 	bl	8006504 <HAL_UART_Init>
}
 8009b2a:	bf00      	nop
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	200003fc 	.word	0x200003fc
 8009b34:	20000454 	.word	0x20000454
 8009b38:	20000440 	.word	0x20000440
 8009b3c:	20000460 	.word	0x20000460
 8009b40:	2000045c 	.word	0x2000045c
 8009b44:	200004d8 	.word	0x200004d8
 8009b48:	20000654 	.word	0x20000654
 8009b4c:	20000458 	.word	0x20000458
 8009b50:	200005cc 	.word	0x200005cc

08009b54 <acc_integration_sleep_until_periodic_wakeup>:


void acc_integration_sleep_until_periodic_wakeup(void)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
	// The periodic timer must be set prior to invoking this function
	if (periodic_sleep_time_ms != 0)
 8009b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8009bc8 <acc_integration_sleep_until_periodic_wakeup+0x74>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d02b      	beq.n	8009bba <acc_integration_sleep_until_periodic_wakeup+0x66>
	{
		acc_integration_prepare_stop_1();
 8009b62:	f7ff ff6d 	bl	8009a40 <acc_integration_prepare_stop_1>

		uint32_t rtc_ticks_pre_sleep = get_rtc_tick();
 8009b66:	f7ff fc5f 	bl	8009428 <get_rtc_tick>
 8009b6a:	6078      	str	r0, [r7, #4]

		while (!rtc_alarm_triggered)
 8009b6c:	e010      	b.n	8009b90 <acc_integration_sleep_until_periodic_wakeup+0x3c>
		{
			// Turn off interrupts
			disable_interrupts();
 8009b6e:	f7ff fb6f 	bl	8009250 <disable_interrupts>

			if (!rtc_alarm_triggered)
 8009b72:	4b16      	ldr	r3, [pc, #88]	@ (8009bcc <acc_integration_sleep_until_periodic_wakeup+0x78>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	f083 0301 	eor.w	r3, r3, #1
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d004      	beq.n	8009b8c <acc_integration_sleep_until_periodic_wakeup+0x38>
			{
				HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8009b82:	2101      	movs	r1, #1
 8009b84:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8009b88:	f7f9 ff01 	bl	800398e <HAL_PWR_EnterSTOPMode>
			}

			// Enable interrupt again, the ISR will execute directly after this
			enable_interrupts();
 8009b8c:	f7ff fb6f 	bl	800926e <enable_interrupts>
		while (!rtc_alarm_triggered)
 8009b90:	4b0e      	ldr	r3, [pc, #56]	@ (8009bcc <acc_integration_sleep_until_periodic_wakeup+0x78>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	f083 0301 	eor.w	r3, r3, #1
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1e6      	bne.n	8009b6e <acc_integration_sleep_until_periodic_wakeup+0x1a>
		}

		rtc_alarm_triggered = false;
 8009ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8009bcc <acc_integration_sleep_until_periodic_wakeup+0x78>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	701a      	strb	r2, [r3, #0]

		update_system_tick(rtc_ticks_pre_sleep, get_rtc_tick());
 8009ba6:	f7ff fc3f 	bl	8009428 <get_rtc_tick>
 8009baa:	4603      	mov	r3, r0
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7ff fc70 	bl	8009494 <update_system_tick>

		acc_integration_resume_stop_1();
 8009bb4:	f7ff ff7c 	bl	8009ab0 <acc_integration_resume_stop_1>
	}
	else
	{
		printf("acc_integration_set_periodic_wakeup must be called prior to calling this function\n");
	}
}
 8009bb8:	e002      	b.n	8009bc0 <acc_integration_sleep_until_periodic_wakeup+0x6c>
		printf("acc_integration_set_periodic_wakeup must be called prior to calling this function\n");
 8009bba:	4805      	ldr	r0, [pc, #20]	@ (8009bd0 <acc_integration_sleep_until_periodic_wakeup+0x7c>)
 8009bbc:	f00b fe62 	bl	8015884 <puts>
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	20000398 	.word	0x20000398
 8009bcc:	20000394 	.word	0x20000394
 8009bd0:	08019a24 	.word	0x08019a24

08009bd4 <acc_integration_get_time>:


uint32_t acc_integration_get_time(void)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8009bd8:	f7f7 fb6c 	bl	80012b4 <HAL_GetTick>
 8009bdc:	4603      	mov	r3, r0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <acc_integration_mem_alloc>:


void *acc_integration_mem_alloc(size_t size)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b082      	sub	sp, #8
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
	return malloc(size);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f00b f802 	bl	8014bf4 <malloc>
 8009bf0:	4603      	mov	r3, r0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <acc_integration_mem_free>:
	return calloc(nmemb, size);
}


void acc_integration_mem_free(void *ptr)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
	free(ptr);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f00a fffe 	bl	8014c04 <free>
}
 8009c08:	bf00      	nop
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <__NVIC_SystemReset>:
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009c14:	f3bf 8f4f 	dsb	sy
}
 8009c18:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009c1a:	4b06      	ldr	r3, [pc, #24]	@ (8009c34 <__NVIC_SystemReset+0x24>)
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009c22:	4904      	ldr	r1, [pc, #16]	@ (8009c34 <__NVIC_SystemReset+0x24>)
 8009c24:	4b04      	ldr	r3, [pc, #16]	@ (8009c38 <__NVIC_SystemReset+0x28>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c2a:	f3bf 8f4f 	dsb	sy
}
 8009c2e:	bf00      	nop
    __NOP();
 8009c30:	bf00      	nop
 8009c32:	e7fd      	b.n	8009c30 <__NVIC_SystemReset+0x20>
 8009c34:	e000ed00 	.word	0xe000ed00
 8009c38:	05fa0004 	.word	0x05fa0004

08009c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009c40:	f7f7 fad0 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009c44:	f000 f814 	bl	8009c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009c48:	f000 fa0a 	bl	800a060 <MX_GPIO_Init>
  MX_DMA_Init();
 8009c4c:	f000 f9d2 	bl	8009ff4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8009c50:	f000 f9a0 	bl	8009f94 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8009c54:	f000 f930 	bl	8009eb8 <MX_SPI1_Init>
  MX_I2C2_Init();
 8009c58:	f000 f85e 	bl	8009d18 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8009c5c:	f000 f96a 	bl	8009f34 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8009c60:	f000 f89a 	bl	8009d98 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

//  acconeer_main(0, NULL);
	acconeer_main_JJH(0, NULL);
 8009c64:	2100      	movs	r1, #0
 8009c66:	2000      	movs	r0, #0
 8009c68:	f7fe faf8 	bl	800825c <acconeer_main_JJH>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8009c6c:	bf00      	nop
 8009c6e:	e7fd      	b.n	8009c6c <main+0x30>

08009c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b096      	sub	sp, #88	@ 0x58
 8009c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009c76:	f107 0314 	add.w	r3, r7, #20
 8009c7a:	2244      	movs	r2, #68	@ 0x44
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f00b ff3e 	bl	8015b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009c84:	463b      	mov	r3, r7
 8009c86:	2200      	movs	r2, #0
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	605a      	str	r2, [r3, #4]
 8009c8c:	609a      	str	r2, [r3, #8]
 8009c8e:	60da      	str	r2, [r3, #12]
 8009c90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8009c92:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009c96:	f7f9 fe9f 	bl	80039d8 <HAL_PWREx_ControlVoltageScaling>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8009ca0:	f000 fa86 	bl	800a1b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8009ca4:	230a      	movs	r3, #10
 8009ca6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009ca8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009cae:	2310      	movs	r3, #16
 8009cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009cba:	2302      	movs	r3, #2
 8009cbc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8009cc2:	230a      	movs	r3, #10
 8009cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8009cc6:	2307      	movs	r3, #7
 8009cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009cca:	2302      	movs	r3, #2
 8009ccc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009cce:	2302      	movs	r3, #2
 8009cd0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009cd2:	f107 0314 	add.w	r3, r7, #20
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7f9 ff2a 	bl	8003b30 <HAL_RCC_OscConfig>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8009ce2:	f000 fa65 	bl	800a1b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009ce6:	230f      	movs	r3, #15
 8009ce8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009cea:	2303      	movs	r3, #3
 8009cec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009cfa:	463b      	mov	r3, r7
 8009cfc:	2104      	movs	r1, #4
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fa fb2a 	bl	8004358 <HAL_RCC_ClockConfig>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8009d0a:	f000 fa51 	bl	800a1b0 <Error_Handler>
  }
}
 8009d0e:	bf00      	nop
 8009d10:	3758      	adds	r7, #88	@ 0x58
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8009d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8009d8c <MX_I2C2_Init+0x74>)
 8009d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8009d90 <MX_I2C2_Init+0x78>)
 8009d20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8009d22:	4b1a      	ldr	r3, [pc, #104]	@ (8009d8c <MX_I2C2_Init+0x74>)
 8009d24:	4a1b      	ldr	r2, [pc, #108]	@ (8009d94 <MX_I2C2_Init+0x7c>)
 8009d26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 164;
 8009d28:	4b18      	ldr	r3, [pc, #96]	@ (8009d8c <MX_I2C2_Init+0x74>)
 8009d2a:	22a4      	movs	r2, #164	@ 0xa4
 8009d2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009d2e:	4b17      	ldr	r3, [pc, #92]	@ (8009d8c <MX_I2C2_Init+0x74>)
 8009d30:	2201      	movs	r2, #1
 8009d32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009d34:	4b15      	ldr	r3, [pc, #84]	@ (8009d8c <MX_I2C2_Init+0x74>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8009d3a:	4b14      	ldr	r3, [pc, #80]	@ (8009d8c <MX_I2C2_Init+0x74>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009d40:	4b12      	ldr	r3, [pc, #72]	@ (8009d8c <MX_I2C2_Init+0x74>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009d46:	4b11      	ldr	r3, [pc, #68]	@ (8009d8c <MX_I2C2_Init+0x74>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8009d8c <MX_I2C2_Init+0x74>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009d52:	480e      	ldr	r0, [pc, #56]	@ (8009d8c <MX_I2C2_Init+0x74>)
 8009d54:	f7f8 f9ff 	bl	8002156 <HAL_I2C_Init>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8009d5e:	f000 fa27 	bl	800a1b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009d62:	2100      	movs	r1, #0
 8009d64:	4809      	ldr	r0, [pc, #36]	@ (8009d8c <MX_I2C2_Init+0x74>)
 8009d66:	f7f9 fd7b 	bl	8003860 <HAL_I2CEx_ConfigAnalogFilter>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8009d70:	f000 fa1e 	bl	800a1b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009d74:	2100      	movs	r1, #0
 8009d76:	4805      	ldr	r0, [pc, #20]	@ (8009d8c <MX_I2C2_Init+0x74>)
 8009d78:	f7f9 fdbd 	bl	80038f6 <HAL_I2CEx_ConfigDigitalFilter>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8009d82:	f000 fa15 	bl	800a1b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8009d86:	bf00      	nop
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20000460 	.word	0x20000460
 8009d90:	40005800 	.word	0x40005800
 8009d94:	10d19ce4 	.word	0x10d19ce4

08009d98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b092      	sub	sp, #72	@ 0x48
 8009d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8009d9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	605a      	str	r2, [r3, #4]
 8009da8:	609a      	str	r2, [r3, #8]
 8009daa:	60da      	str	r2, [r3, #12]
 8009dac:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8009dae:	2300      	movs	r3, #0
 8009db0:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8009db2:	1d3b      	adds	r3, r7, #4
 8009db4:	222c      	movs	r2, #44	@ 0x2c
 8009db6:	2100      	movs	r1, #0
 8009db8:	4618      	mov	r0, r3
 8009dba:	f00b fea1 	bl	8015b00 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8009eb0 <MX_RTC_Init+0x118>)
 8009dc0:	4a3c      	ldr	r2, [pc, #240]	@ (8009eb4 <MX_RTC_Init+0x11c>)
 8009dc2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8009eb0 <MX_RTC_Init+0x118>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8009dca:	4b39      	ldr	r3, [pc, #228]	@ (8009eb0 <MX_RTC_Init+0x118>)
 8009dcc:	221f      	movs	r2, #31
 8009dce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8009dd0:	4b37      	ldr	r3, [pc, #220]	@ (8009eb0 <MX_RTC_Init+0x118>)
 8009dd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009dd6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009dd8:	4b35      	ldr	r3, [pc, #212]	@ (8009eb0 <MX_RTC_Init+0x118>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009dde:	4b34      	ldr	r3, [pc, #208]	@ (8009eb0 <MX_RTC_Init+0x118>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009de4:	4b32      	ldr	r3, [pc, #200]	@ (8009eb0 <MX_RTC_Init+0x118>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009dea:	4b31      	ldr	r3, [pc, #196]	@ (8009eb0 <MX_RTC_Init+0x118>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009df0:	482f      	ldr	r0, [pc, #188]	@ (8009eb0 <MX_RTC_Init+0x118>)
 8009df2:	f7fb f8db 	bl	8004fac <HAL_RTC_Init>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8009dfc:	f000 f9d8 	bl	800a1b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009e12:	2300      	movs	r3, #0
 8009e14:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009e16:	2300      	movs	r3, #0
 8009e18:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8009e1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009e1e:	2200      	movs	r2, #0
 8009e20:	4619      	mov	r1, r3
 8009e22:	4823      	ldr	r0, [pc, #140]	@ (8009eb0 <MX_RTC_Init+0x118>)
 8009e24:	f7fb f94a 	bl	80050bc <HAL_RTC_SetTime>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8009e2e:	f000 f9bf 	bl	800a1b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009e32:	2301      	movs	r3, #1
 8009e34:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 8009e44:	2300      	movs	r3, #0
 8009e46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8009e4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009e4e:	2200      	movs	r2, #0
 8009e50:	4619      	mov	r1, r3
 8009e52:	4817      	ldr	r0, [pc, #92]	@ (8009eb0 <MX_RTC_Init+0x118>)
 8009e54:	f7fb fa2b 	bl	80052ae <HAL_RTC_SetDate>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <MX_RTC_Init+0xca>
  {
    Error_Handler();
 8009e5e:	f000 f9a7 	bl	800a1b0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009e72:	2300      	movs	r3, #0
 8009e74:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009e76:	2300      	movs	r3, #0
 8009e78:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009e82:	2300      	movs	r3, #0
 8009e84:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8009e86:	2301      	movs	r3, #1
 8009e88:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8009e8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8009e92:	1d3b      	adds	r3, r7, #4
 8009e94:	2200      	movs	r2, #0
 8009e96:	4619      	mov	r1, r3
 8009e98:	4805      	ldr	r0, [pc, #20]	@ (8009eb0 <MX_RTC_Init+0x118>)
 8009e9a:	f7fb fadd 	bl	8005458 <HAL_RTC_SetAlarm_IT>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 8009ea4:	f000 f984 	bl	800a1b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009ea8:	bf00      	nop
 8009eaa:	3748      	adds	r7, #72	@ 0x48
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	200004b4 	.word	0x200004b4
 8009eb4:	40002800 	.word	0x40002800

08009eb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8009f30 <MX_SPI1_Init+0x78>)
 8009ec0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009ec4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009ec8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009eca:	4b18      	ldr	r3, [pc, #96]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8009ed0:	4b16      	ldr	r3, [pc, #88]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009ed2:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8009ed6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ed8:	4b14      	ldr	r3, [pc, #80]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009ede:	4b13      	ldr	r3, [pc, #76]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009ee4:	4b11      	ldr	r3, [pc, #68]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009eea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009eec:	4b0f      	ldr	r3, [pc, #60]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009efe:	4b0b      	ldr	r3, [pc, #44]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009f04:	4b09      	ldr	r3, [pc, #36]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009f06:	2207      	movs	r2, #7
 8009f08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009f0a:	4b08      	ldr	r3, [pc, #32]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009f10:	4b06      	ldr	r3, [pc, #24]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009f12:	2208      	movs	r2, #8
 8009f14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009f16:	4805      	ldr	r0, [pc, #20]	@ (8009f2c <MX_SPI1_Init+0x74>)
 8009f18:	f7fb fea6 	bl	8005c68 <HAL_SPI_Init>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8009f22:	f000 f945 	bl	800a1b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009f26:	bf00      	nop
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	200004d8 	.word	0x200004d8
 8009f30:	40013000 	.word	0x40013000

08009f34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009f38:	4b14      	ldr	r3, [pc, #80]	@ (8009f8c <MX_USART1_UART_Init+0x58>)
 8009f3a:	4a15      	ldr	r2, [pc, #84]	@ (8009f90 <MX_USART1_UART_Init+0x5c>)
 8009f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8009f3e:	4b13      	ldr	r3, [pc, #76]	@ (8009f8c <MX_USART1_UART_Init+0x58>)
 8009f40:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8009f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009f46:	4b11      	ldr	r3, [pc, #68]	@ (8009f8c <MX_USART1_UART_Init+0x58>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8009f8c <MX_USART1_UART_Init+0x58>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009f52:	4b0e      	ldr	r3, [pc, #56]	@ (8009f8c <MX_USART1_UART_Init+0x58>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009f58:	4b0c      	ldr	r3, [pc, #48]	@ (8009f8c <MX_USART1_UART_Init+0x58>)
 8009f5a:	220c      	movs	r2, #12
 8009f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009f8c <MX_USART1_UART_Init+0x58>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f64:	4b09      	ldr	r3, [pc, #36]	@ (8009f8c <MX_USART1_UART_Init+0x58>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009f6a:	4b08      	ldr	r3, [pc, #32]	@ (8009f8c <MX_USART1_UART_Init+0x58>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009f70:	4b06      	ldr	r3, [pc, #24]	@ (8009f8c <MX_USART1_UART_Init+0x58>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009f76:	4805      	ldr	r0, [pc, #20]	@ (8009f8c <MX_USART1_UART_Init+0x58>)
 8009f78:	f7fc fac4 	bl	8006504 <HAL_UART_Init>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8009f82:	f000 f915 	bl	800a1b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009f86:	bf00      	nop
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	200005cc 	.word	0x200005cc
 8009f90:	40013800 	.word	0x40013800

08009f94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009f98:	4b14      	ldr	r3, [pc, #80]	@ (8009fec <MX_USART2_UART_Init+0x58>)
 8009f9a:	4a15      	ldr	r2, [pc, #84]	@ (8009ff0 <MX_USART2_UART_Init+0x5c>)
 8009f9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009f9e:	4b13      	ldr	r3, [pc, #76]	@ (8009fec <MX_USART2_UART_Init+0x58>)
 8009fa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009fa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009fa6:	4b11      	ldr	r3, [pc, #68]	@ (8009fec <MX_USART2_UART_Init+0x58>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009fac:	4b0f      	ldr	r3, [pc, #60]	@ (8009fec <MX_USART2_UART_Init+0x58>)
 8009fae:	2200      	movs	r2, #0
 8009fb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8009fec <MX_USART2_UART_Init+0x58>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8009fec <MX_USART2_UART_Init+0x58>)
 8009fba:	220c      	movs	r2, #12
 8009fbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8009fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8009fec <MX_USART2_UART_Init+0x58>)
 8009fc0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8009fc4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009fc6:	4b09      	ldr	r3, [pc, #36]	@ (8009fec <MX_USART2_UART_Init+0x58>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009fcc:	4b07      	ldr	r3, [pc, #28]	@ (8009fec <MX_USART2_UART_Init+0x58>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009fd2:	4b06      	ldr	r3, [pc, #24]	@ (8009fec <MX_USART2_UART_Init+0x58>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009fd8:	4804      	ldr	r0, [pc, #16]	@ (8009fec <MX_USART2_UART_Init+0x58>)
 8009fda:	f7fc fa93 	bl	8006504 <HAL_UART_Init>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8009fe4:	f000 f8e4 	bl	800a1b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009fe8:	bf00      	nop
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20000654 	.word	0x20000654
 8009ff0:	40004400 	.word	0x40004400

08009ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009ffa:	4b18      	ldr	r3, [pc, #96]	@ (800a05c <MX_DMA_Init+0x68>)
 8009ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ffe:	4a17      	ldr	r2, [pc, #92]	@ (800a05c <MX_DMA_Init+0x68>)
 800a000:	f043 0301 	orr.w	r3, r3, #1
 800a004:	6493      	str	r3, [r2, #72]	@ 0x48
 800a006:	4b15      	ldr	r3, [pc, #84]	@ (800a05c <MX_DMA_Init+0x68>)
 800a008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a00a:	f003 0301 	and.w	r3, r3, #1
 800a00e:	607b      	str	r3, [r7, #4]
 800a010:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800a012:	2200      	movs	r2, #0
 800a014:	2100      	movs	r1, #0
 800a016:	200c      	movs	r0, #12
 800a018:	f7f7 fa9b 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a01c:	200c      	movs	r0, #12
 800a01e:	f7f7 fab4 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800a022:	2200      	movs	r2, #0
 800a024:	2100      	movs	r1, #0
 800a026:	200d      	movs	r0, #13
 800a028:	f7f7 fa93 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800a02c:	200d      	movs	r0, #13
 800a02e:	f7f7 faac 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800a032:	2200      	movs	r2, #0
 800a034:	2100      	movs	r1, #0
 800a036:	2010      	movs	r0, #16
 800a038:	f7f7 fa8b 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800a03c:	2010      	movs	r0, #16
 800a03e:	f7f7 faa4 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800a042:	2200      	movs	r2, #0
 800a044:	2100      	movs	r1, #0
 800a046:	2011      	movs	r0, #17
 800a048:	f7f7 fa83 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800a04c:	2011      	movs	r0, #17
 800a04e:	f7f7 fa9c 	bl	800158a <HAL_NVIC_EnableIRQ>

}
 800a052:	bf00      	nop
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	40021000 	.word	0x40021000

0800a060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b088      	sub	sp, #32
 800a064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a066:	f107 030c 	add.w	r3, r7, #12
 800a06a:	2200      	movs	r2, #0
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	605a      	str	r2, [r3, #4]
 800a070:	609a      	str	r2, [r3, #8]
 800a072:	60da      	str	r2, [r3, #12]
 800a074:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a076:	4b4b      	ldr	r3, [pc, #300]	@ (800a1a4 <MX_GPIO_Init+0x144>)
 800a078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a07a:	4a4a      	ldr	r2, [pc, #296]	@ (800a1a4 <MX_GPIO_Init+0x144>)
 800a07c:	f043 0302 	orr.w	r3, r3, #2
 800a080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a082:	4b48      	ldr	r3, [pc, #288]	@ (800a1a4 <MX_GPIO_Init+0x144>)
 800a084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	60bb      	str	r3, [r7, #8]
 800a08c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a08e:	4b45      	ldr	r3, [pc, #276]	@ (800a1a4 <MX_GPIO_Init+0x144>)
 800a090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a092:	4a44      	ldr	r2, [pc, #272]	@ (800a1a4 <MX_GPIO_Init+0x144>)
 800a094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a09a:	4b42      	ldr	r3, [pc, #264]	@ (800a1a4 <MX_GPIO_Init+0x144>)
 800a09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a09e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0a2:	607b      	str	r3, [r7, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0a6:	4b3f      	ldr	r3, [pc, #252]	@ (800a1a4 <MX_GPIO_Init+0x144>)
 800a0a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0aa:	4a3e      	ldr	r2, [pc, #248]	@ (800a1a4 <MX_GPIO_Init+0x144>)
 800a0ac:	f043 0301 	orr.w	r3, r3, #1
 800a0b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a0b2:	4b3c      	ldr	r3, [pc, #240]	@ (800a1a4 <MX_GPIO_Init+0x144>)
 800a0b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0b6:	f003 0301 	and.w	r3, r3, #1
 800a0ba:	603b      	str	r3, [r7, #0]
 800a0bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_INT_Pin|ENABLE_Pin|SPI_SS_Pin, GPIO_PIN_RESET);
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f241 2101 	movw	r1, #4609	@ 0x1201
 800a0c4:	4838      	ldr	r0, [pc, #224]	@ (800a1a8 <MX_GPIO_Init+0x148>)
 800a0c6:	f7f8 f80b 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MISC_GPIO1_GPIO_Port, MISC_GPIO1_Pin, GPIO_PIN_RESET);
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2110      	movs	r1, #16
 800a0ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a0d2:	f7f8 f805 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INTERRUPT_Pin */
  GPIO_InitStruct.Pin = INTERRUPT_Pin;
 800a0d6:	2308      	movs	r3, #8
 800a0d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a0da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800a0de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 800a0e4:	f107 030c 	add.w	r3, r7, #12
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	482f      	ldr	r0, [pc, #188]	@ (800a1a8 <MX_GPIO_Init+0x148>)
 800a0ec:	f7f7 fd8c 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : MISC_GPIO2_Pin I2C_ADDRESS_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|I2C_ADDRESS_Pin;
 800a0f0:	2309      	movs	r3, #9
 800a0f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a0fc:	f107 030c 	add.w	r3, r7, #12
 800a100:	4619      	mov	r1, r3
 800a102:	482a      	ldr	r0, [pc, #168]	@ (800a1ac <MX_GPIO_Init+0x14c>)
 800a104:	f7f7 fd80 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKE_UP_Pin */
  GPIO_InitStruct.Pin = WAKE_UP_Pin;
 800a108:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a10c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a10e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800a112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a114:	2302      	movs	r3, #2
 800a116:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 800a118:	f107 030c 	add.w	r3, r7, #12
 800a11c:	4619      	mov	r1, r3
 800a11e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a122:	f7f7 fd71 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_INT_Pin ENABLE_Pin SPI_SS_Pin */
  GPIO_InitStruct.Pin = MCU_INT_Pin|ENABLE_Pin|SPI_SS_Pin;
 800a126:	f241 2301 	movw	r3, #4609	@ 0x1201
 800a12a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a12c:	2301      	movs	r3, #1
 800a12e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a130:	2300      	movs	r3, #0
 800a132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a134:	2303      	movs	r3, #3
 800a136:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a138:	f107 030c 	add.w	r3, r7, #12
 800a13c:	4619      	mov	r1, r3
 800a13e:	481a      	ldr	r0, [pc, #104]	@ (800a1a8 <MX_GPIO_Init+0x148>)
 800a140:	f7f7 fd62 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISC_GPIO0_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO0_Pin;
 800a144:	2302      	movs	r3, #2
 800a146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a148:	2300      	movs	r3, #0
 800a14a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a14c:	2302      	movs	r3, #2
 800a14e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MISC_GPIO0_GPIO_Port, &GPIO_InitStruct);
 800a150:	f107 030c 	add.w	r3, r7, #12
 800a154:	4619      	mov	r1, r3
 800a156:	4814      	ldr	r0, [pc, #80]	@ (800a1a8 <MX_GPIO_Init+0x148>)
 800a158:	f7f7 fd56 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISC_GPIO1_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO1_Pin;
 800a15c:	2310      	movs	r3, #16
 800a15e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a160:	2301      	movs	r3, #1
 800a162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a164:	2302      	movs	r3, #2
 800a166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a168:	2303      	movs	r3, #3
 800a16a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MISC_GPIO1_GPIO_Port, &GPIO_InitStruct);
 800a16c:	f107 030c 	add.w	r3, r7, #12
 800a170:	4619      	mov	r1, r3
 800a172:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a176:	f7f7 fd47 	bl	8001c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800a17a:	2200      	movs	r2, #0
 800a17c:	2100      	movs	r1, #0
 800a17e:	2009      	movs	r0, #9
 800a180:	f7f7 f9e7 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800a184:	2009      	movs	r0, #9
 800a186:	f7f7 fa00 	bl	800158a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800a18a:	2200      	movs	r2, #0
 800a18c:	2100      	movs	r1, #0
 800a18e:	2028      	movs	r0, #40	@ 0x28
 800a190:	f7f7 f9df 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a194:	2028      	movs	r0, #40	@ 0x28
 800a196:	f7f7 f9f8 	bl	800158a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800a19a:	bf00      	nop
 800a19c:	3720      	adds	r7, #32
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	40021000 	.word	0x40021000
 800a1a8:	48000400 	.word	0x48000400
 800a1ac:	48001c00 	.word	0x48001c00

0800a1b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	NVIC_SystemReset();
 800a1b4:	f7ff fd2c 	bl	8009c10 <__NVIC_SystemReset>

0800a1b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1be:	4b0f      	ldr	r3, [pc, #60]	@ (800a1fc <HAL_MspInit+0x44>)
 800a1c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1c2:	4a0e      	ldr	r2, [pc, #56]	@ (800a1fc <HAL_MspInit+0x44>)
 800a1c4:	f043 0301 	orr.w	r3, r3, #1
 800a1c8:	6613      	str	r3, [r2, #96]	@ 0x60
 800a1ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a1fc <HAL_MspInit+0x44>)
 800a1cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	607b      	str	r3, [r7, #4]
 800a1d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a1d6:	4b09      	ldr	r3, [pc, #36]	@ (800a1fc <HAL_MspInit+0x44>)
 800a1d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1da:	4a08      	ldr	r2, [pc, #32]	@ (800a1fc <HAL_MspInit+0x44>)
 800a1dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1e0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1e2:	4b06      	ldr	r3, [pc, #24]	@ (800a1fc <HAL_MspInit+0x44>)
 800a1e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a1ee:	bf00      	nop
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	40021000 	.word	0x40021000

0800a200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b0a0      	sub	sp, #128	@ 0x80
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a208:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a20c:	2200      	movs	r2, #0
 800a20e:	601a      	str	r2, [r3, #0]
 800a210:	605a      	str	r2, [r3, #4]
 800a212:	609a      	str	r2, [r3, #8]
 800a214:	60da      	str	r2, [r3, #12]
 800a216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a218:	f107 0310 	add.w	r3, r7, #16
 800a21c:	225c      	movs	r2, #92	@ 0x5c
 800a21e:	2100      	movs	r1, #0
 800a220:	4618      	mov	r0, r3
 800a222:	f00b fc6d 	bl	8015b00 <memset>
  if(hi2c->Instance==I2C2)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a23      	ldr	r2, [pc, #140]	@ (800a2b8 <HAL_I2C_MspInit+0xb8>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d13e      	bne.n	800a2ae <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a230:	2380      	movs	r3, #128	@ 0x80
 800a232:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800a234:	2300      	movs	r3, #0
 800a236:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a238:	f107 0310 	add.w	r3, r7, #16
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fa fbab 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800a248:	f7ff ffb2 	bl	800a1b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a24c:	4b1b      	ldr	r3, [pc, #108]	@ (800a2bc <HAL_I2C_MspInit+0xbc>)
 800a24e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a250:	4a1a      	ldr	r2, [pc, #104]	@ (800a2bc <HAL_I2C_MspInit+0xbc>)
 800a252:	f043 0302 	orr.w	r3, r3, #2
 800a256:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a258:	4b18      	ldr	r3, [pc, #96]	@ (800a2bc <HAL_I2C_MspInit+0xbc>)
 800a25a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a25c:	f003 0302 	and.w	r3, r3, #2
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800a264:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a268:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a26a:	2312      	movs	r3, #18
 800a26c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a26e:	2301      	movs	r3, #1
 800a270:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a272:	2303      	movs	r3, #3
 800a274:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a276:	2304      	movs	r3, #4
 800a278:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a27a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a27e:	4619      	mov	r1, r3
 800a280:	480f      	ldr	r0, [pc, #60]	@ (800a2c0 <HAL_I2C_MspInit+0xc0>)
 800a282:	f7f7 fcc1 	bl	8001c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a286:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <HAL_I2C_MspInit+0xbc>)
 800a288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a28a:	4a0c      	ldr	r2, [pc, #48]	@ (800a2bc <HAL_I2C_MspInit+0xbc>)
 800a28c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a290:	6593      	str	r3, [r2, #88]	@ 0x58
 800a292:	4b0a      	ldr	r3, [pc, #40]	@ (800a2bc <HAL_I2C_MspInit+0xbc>)
 800a294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a29a:	60bb      	str	r3, [r7, #8]
 800a29c:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	2021      	movs	r0, #33	@ 0x21
 800a2a4:	f7f7 f955 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800a2a8:	2021      	movs	r0, #33	@ 0x21
 800a2aa:	f7f7 f96e 	bl	800158a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800a2ae:	bf00      	nop
 800a2b0:	3780      	adds	r7, #128	@ 0x80
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	40005800 	.word	0x40005800
 800a2bc:	40021000 	.word	0x40021000
 800a2c0:	48000400 	.word	0x48000400

0800a2c4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a0c      	ldr	r2, [pc, #48]	@ (800a304 <HAL_I2C_MspDeInit+0x40>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d112      	bne.n	800a2fc <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800a2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a308 <HAL_I2C_MspDeInit+0x44>)
 800a2d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2da:	4a0b      	ldr	r2, [pc, #44]	@ (800a308 <HAL_I2C_MspDeInit+0x44>)
 800a2dc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800a2e0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(I2C_SCL_GPIO_Port, I2C_SCL_Pin);
 800a2e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a2e6:	4809      	ldr	r0, [pc, #36]	@ (800a30c <HAL_I2C_MspDeInit+0x48>)
 800a2e8:	f7f7 fe08 	bl	8001efc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C_SDA_GPIO_Port, I2C_SDA_Pin);
 800a2ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a2f0:	4806      	ldr	r0, [pc, #24]	@ (800a30c <HAL_I2C_MspDeInit+0x48>)
 800a2f2:	f7f7 fe03 	bl	8001efc <HAL_GPIO_DeInit>

    /* I2C2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800a2f6:	2021      	movs	r0, #33	@ 0x21
 800a2f8:	f7f7 f955 	bl	80015a6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	40005800 	.word	0x40005800
 800a308:	40021000 	.word	0x40021000
 800a30c:	48000400 	.word	0x48000400

0800a310 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b09a      	sub	sp, #104	@ 0x68
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a318:	f107 030c 	add.w	r3, r7, #12
 800a31c:	225c      	movs	r2, #92	@ 0x5c
 800a31e:	2100      	movs	r1, #0
 800a320:	4618      	mov	r0, r3
 800a322:	f00b fbed 	bl	8015b00 <memset>
  if(hrtc->Instance==RTC)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a17      	ldr	r2, [pc, #92]	@ (800a388 <HAL_RTC_MspInit+0x78>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d127      	bne.n	800a380 <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a330:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a334:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a336:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a33a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a33c:	f107 030c 	add.w	r3, r7, #12
 800a340:	4618      	mov	r0, r3
 800a342:	f7fa fb29 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800a34c:	f7ff ff30 	bl	800a1b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a350:	4b0e      	ldr	r3, [pc, #56]	@ (800a38c <HAL_RTC_MspInit+0x7c>)
 800a352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a356:	4a0d      	ldr	r2, [pc, #52]	@ (800a38c <HAL_RTC_MspInit+0x7c>)
 800a358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a35c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800a360:	2200      	movs	r2, #0
 800a362:	2100      	movs	r1, #0
 800a364:	2003      	movs	r0, #3
 800a366:	f7f7 f8f4 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800a36a:	2003      	movs	r0, #3
 800a36c:	f7f7 f90d 	bl	800158a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800a370:	2200      	movs	r2, #0
 800a372:	2100      	movs	r1, #0
 800a374:	2029      	movs	r0, #41	@ 0x29
 800a376:	f7f7 f8ec 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800a37a:	2029      	movs	r0, #41	@ 0x29
 800a37c:	f7f7 f905 	bl	800158a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800a380:	bf00      	nop
 800a382:	3768      	adds	r7, #104	@ 0x68
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	40002800 	.word	0x40002800
 800a38c:	40021000 	.word	0x40021000

0800a390 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08a      	sub	sp, #40	@ 0x28
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a398:	f107 0314 	add.w	r3, r7, #20
 800a39c:	2200      	movs	r2, #0
 800a39e:	601a      	str	r2, [r3, #0]
 800a3a0:	605a      	str	r2, [r3, #4]
 800a3a2:	609a      	str	r2, [r3, #8]
 800a3a4:	60da      	str	r2, [r3, #12]
 800a3a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a42      	ldr	r2, [pc, #264]	@ (800a4b8 <HAL_SPI_MspInit+0x128>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d17e      	bne.n	800a4b0 <HAL_SPI_MspInit+0x120>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a3b2:	4b42      	ldr	r3, [pc, #264]	@ (800a4bc <HAL_SPI_MspInit+0x12c>)
 800a3b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3b6:	4a41      	ldr	r2, [pc, #260]	@ (800a4bc <HAL_SPI_MspInit+0x12c>)
 800a3b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a3bc:	6613      	str	r3, [r2, #96]	@ 0x60
 800a3be:	4b3f      	ldr	r3, [pc, #252]	@ (800a4bc <HAL_SPI_MspInit+0x12c>)
 800a3c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a3c6:	613b      	str	r3, [r7, #16]
 800a3c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3ca:	4b3c      	ldr	r3, [pc, #240]	@ (800a4bc <HAL_SPI_MspInit+0x12c>)
 800a3cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ce:	4a3b      	ldr	r2, [pc, #236]	@ (800a4bc <HAL_SPI_MspInit+0x12c>)
 800a3d0:	f043 0301 	orr.w	r3, r3, #1
 800a3d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a3d6:	4b39      	ldr	r3, [pc, #228]	@ (800a4bc <HAL_SPI_MspInit+0x12c>)
 800a3d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	60fb      	str	r3, [r7, #12]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI_MISO_Pin|SPI_SCK_Pin;
 800a3e2:	23e0      	movs	r3, #224	@ 0xe0
 800a3e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a3f2:	2305      	movs	r3, #5
 800a3f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3f6:	f107 0314 	add.w	r3, r7, #20
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a400:	f7f7 fc02 	bl	8001c08 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800a404:	4b2e      	ldr	r3, [pc, #184]	@ (800a4c0 <HAL_SPI_MspInit+0x130>)
 800a406:	4a2f      	ldr	r2, [pc, #188]	@ (800a4c4 <HAL_SPI_MspInit+0x134>)
 800a408:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 800a40a:	4b2d      	ldr	r3, [pc, #180]	@ (800a4c0 <HAL_SPI_MspInit+0x130>)
 800a40c:	2201      	movs	r2, #1
 800a40e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a410:	4b2b      	ldr	r3, [pc, #172]	@ (800a4c0 <HAL_SPI_MspInit+0x130>)
 800a412:	2200      	movs	r2, #0
 800a414:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a416:	4b2a      	ldr	r3, [pc, #168]	@ (800a4c0 <HAL_SPI_MspInit+0x130>)
 800a418:	2200      	movs	r2, #0
 800a41a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a41c:	4b28      	ldr	r3, [pc, #160]	@ (800a4c0 <HAL_SPI_MspInit+0x130>)
 800a41e:	2280      	movs	r2, #128	@ 0x80
 800a420:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a422:	4b27      	ldr	r3, [pc, #156]	@ (800a4c0 <HAL_SPI_MspInit+0x130>)
 800a424:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a428:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a42a:	4b25      	ldr	r3, [pc, #148]	@ (800a4c0 <HAL_SPI_MspInit+0x130>)
 800a42c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a430:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800a432:	4b23      	ldr	r3, [pc, #140]	@ (800a4c0 <HAL_SPI_MspInit+0x130>)
 800a434:	2200      	movs	r2, #0
 800a436:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a438:	4b21      	ldr	r3, [pc, #132]	@ (800a4c0 <HAL_SPI_MspInit+0x130>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800a43e:	4820      	ldr	r0, [pc, #128]	@ (800a4c0 <HAL_SPI_MspInit+0x130>)
 800a440:	f7f7 f8cc 	bl	80015dc <HAL_DMA_Init>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 800a44a:	f7ff feb1 	bl	800a1b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a1b      	ldr	r2, [pc, #108]	@ (800a4c0 <HAL_SPI_MspInit+0x130>)
 800a452:	659a      	str	r2, [r3, #88]	@ 0x58
 800a454:	4a1a      	ldr	r2, [pc, #104]	@ (800a4c0 <HAL_SPI_MspInit+0x130>)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800a45a:	4b1b      	ldr	r3, [pc, #108]	@ (800a4c8 <HAL_SPI_MspInit+0x138>)
 800a45c:	4a1b      	ldr	r2, [pc, #108]	@ (800a4cc <HAL_SPI_MspInit+0x13c>)
 800a45e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800a460:	4b19      	ldr	r3, [pc, #100]	@ (800a4c8 <HAL_SPI_MspInit+0x138>)
 800a462:	2201      	movs	r2, #1
 800a464:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a466:	4b18      	ldr	r3, [pc, #96]	@ (800a4c8 <HAL_SPI_MspInit+0x138>)
 800a468:	2210      	movs	r2, #16
 800a46a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a46c:	4b16      	ldr	r3, [pc, #88]	@ (800a4c8 <HAL_SPI_MspInit+0x138>)
 800a46e:	2200      	movs	r2, #0
 800a470:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a472:	4b15      	ldr	r3, [pc, #84]	@ (800a4c8 <HAL_SPI_MspInit+0x138>)
 800a474:	2280      	movs	r2, #128	@ 0x80
 800a476:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a478:	4b13      	ldr	r3, [pc, #76]	@ (800a4c8 <HAL_SPI_MspInit+0x138>)
 800a47a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a47e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a480:	4b11      	ldr	r3, [pc, #68]	@ (800a4c8 <HAL_SPI_MspInit+0x138>)
 800a482:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a486:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800a488:	4b0f      	ldr	r3, [pc, #60]	@ (800a4c8 <HAL_SPI_MspInit+0x138>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a48e:	4b0e      	ldr	r3, [pc, #56]	@ (800a4c8 <HAL_SPI_MspInit+0x138>)
 800a490:	2200      	movs	r2, #0
 800a492:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800a494:	480c      	ldr	r0, [pc, #48]	@ (800a4c8 <HAL_SPI_MspInit+0x138>)
 800a496:	f7f7 f8a1 	bl	80015dc <HAL_DMA_Init>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 800a4a0:	f7ff fe86 	bl	800a1b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a08      	ldr	r2, [pc, #32]	@ (800a4c8 <HAL_SPI_MspInit+0x138>)
 800a4a8:	655a      	str	r2, [r3, #84]	@ 0x54
 800a4aa:	4a07      	ldr	r2, [pc, #28]	@ (800a4c8 <HAL_SPI_MspInit+0x138>)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800a4b0:	bf00      	nop
 800a4b2:	3728      	adds	r7, #40	@ 0x28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	40013000 	.word	0x40013000
 800a4bc:	40021000 	.word	0x40021000
 800a4c0:	2000053c 	.word	0x2000053c
 800a4c4:	4002001c 	.word	0x4002001c
 800a4c8:	20000584 	.word	0x20000584
 800a4cc:	40020030 	.word	0x40020030

0800a4d0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a0d      	ldr	r2, [pc, #52]	@ (800a514 <HAL_SPI_MspDeInit+0x44>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d114      	bne.n	800a50c <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800a4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a518 <HAL_SPI_MspDeInit+0x48>)
 800a4e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4e6:	4a0c      	ldr	r2, [pc, #48]	@ (800a518 <HAL_SPI_MspDeInit+0x48>)
 800a4e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4ec:	6613      	str	r3, [r2, #96]	@ 0x60
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOA, SPI_MOSI_Pin|SPI_MISO_Pin|SPI_SCK_Pin);
 800a4ee:	21e0      	movs	r1, #224	@ 0xe0
 800a4f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a4f4:	f7f7 fd02 	bl	8001efc <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7f7 f925 	bl	800174c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a506:	4618      	mov	r0, r3
 800a508:	f7f7 f920 	bl	800174c <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800a50c:	bf00      	nop
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	40013000 	.word	0x40013000
 800a518:	40021000 	.word	0x40021000

0800a51c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b0a2      	sub	sp, #136	@ 0x88
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a524:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	605a      	str	r2, [r3, #4]
 800a52e:	609a      	str	r2, [r3, #8]
 800a530:	60da      	str	r2, [r3, #12]
 800a532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a534:	f107 0318 	add.w	r3, r7, #24
 800a538:	225c      	movs	r2, #92	@ 0x5c
 800a53a:	2100      	movs	r1, #0
 800a53c:	4618      	mov	r0, r3
 800a53e:	f00b fadf 	bl	8015b00 <memset>
  if(huart->Instance==USART1)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a6d      	ldr	r2, [pc, #436]	@ (800a6fc <HAL_UART_MspInit+0x1e0>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d13a      	bne.n	800a5c2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a54c:	2301      	movs	r3, #1
 800a54e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a550:	2300      	movs	r3, #0
 800a552:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a554:	f107 0318 	add.w	r3, r7, #24
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fa fa1d 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a564:	f7ff fe24 	bl	800a1b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a568:	4b65      	ldr	r3, [pc, #404]	@ (800a700 <HAL_UART_MspInit+0x1e4>)
 800a56a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a56c:	4a64      	ldr	r2, [pc, #400]	@ (800a700 <HAL_UART_MspInit+0x1e4>)
 800a56e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a572:	6613      	str	r3, [r2, #96]	@ 0x60
 800a574:	4b62      	ldr	r3, [pc, #392]	@ (800a700 <HAL_UART_MspInit+0x1e4>)
 800a576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a57c:	617b      	str	r3, [r7, #20]
 800a57e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a580:	4b5f      	ldr	r3, [pc, #380]	@ (800a700 <HAL_UART_MspInit+0x1e4>)
 800a582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a584:	4a5e      	ldr	r2, [pc, #376]	@ (800a700 <HAL_UART_MspInit+0x1e4>)
 800a586:	f043 0301 	orr.w	r3, r3, #1
 800a58a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a58c:	4b5c      	ldr	r3, [pc, #368]	@ (800a700 <HAL_UART_MspInit+0x1e4>)
 800a58e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a590:	f003 0301 	and.w	r3, r3, #1
 800a594:	613b      	str	r3, [r7, #16]
 800a596:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_RX_Pin|DEBUG_UART_TX_Pin;
 800a598:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800a59c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a59e:	2302      	movs	r3, #2
 800a5a0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a5ac:	2307      	movs	r3, #7
 800a5ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5b2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a5bc:	f7f7 fb24 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800a5c0:	e098      	b.n	800a6f4 <HAL_UART_MspInit+0x1d8>
  else if(huart->Instance==USART2)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a4f      	ldr	r2, [pc, #316]	@ (800a704 <HAL_UART_MspInit+0x1e8>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	f040 8093 	bne.w	800a6f4 <HAL_UART_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a5ce:	2302      	movs	r3, #2
 800a5d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a5d6:	f107 0318 	add.w	r3, r7, #24
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fa f9dc 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <HAL_UART_MspInit+0xce>
      Error_Handler();
 800a5e6:	f7ff fde3 	bl	800a1b0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a5ea:	4b45      	ldr	r3, [pc, #276]	@ (800a700 <HAL_UART_MspInit+0x1e4>)
 800a5ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5ee:	4a44      	ldr	r2, [pc, #272]	@ (800a700 <HAL_UART_MspInit+0x1e4>)
 800a5f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5f4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5f6:	4b42      	ldr	r3, [pc, #264]	@ (800a700 <HAL_UART_MspInit+0x1e4>)
 800a5f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5fe:	60fb      	str	r3, [r7, #12]
 800a600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a602:	4b3f      	ldr	r3, [pc, #252]	@ (800a700 <HAL_UART_MspInit+0x1e4>)
 800a604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a606:	4a3e      	ldr	r2, [pc, #248]	@ (800a700 <HAL_UART_MspInit+0x1e4>)
 800a608:	f043 0301 	orr.w	r3, r3, #1
 800a60c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a60e:	4b3c      	ldr	r3, [pc, #240]	@ (800a700 <HAL_UART_MspInit+0x1e4>)
 800a610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	60bb      	str	r3, [r7, #8]
 800a618:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin|UART_CTS_Pin|UART_RTS_Pin;
 800a61a:	230f      	movs	r3, #15
 800a61c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a61e:	2302      	movs	r3, #2
 800a620:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a622:	2300      	movs	r3, #0
 800a624:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a626:	2303      	movs	r3, #3
 800a628:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a62c:	2307      	movs	r3, #7
 800a62e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a632:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800a636:	4619      	mov	r1, r3
 800a638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a63c:	f7f7 fae4 	bl	8001c08 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800a640:	4b31      	ldr	r3, [pc, #196]	@ (800a708 <HAL_UART_MspInit+0x1ec>)
 800a642:	4a32      	ldr	r2, [pc, #200]	@ (800a70c <HAL_UART_MspInit+0x1f0>)
 800a644:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800a646:	4b30      	ldr	r3, [pc, #192]	@ (800a708 <HAL_UART_MspInit+0x1ec>)
 800a648:	2202      	movs	r2, #2
 800a64a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a64c:	4b2e      	ldr	r3, [pc, #184]	@ (800a708 <HAL_UART_MspInit+0x1ec>)
 800a64e:	2200      	movs	r2, #0
 800a650:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a652:	4b2d      	ldr	r3, [pc, #180]	@ (800a708 <HAL_UART_MspInit+0x1ec>)
 800a654:	2200      	movs	r2, #0
 800a656:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a658:	4b2b      	ldr	r3, [pc, #172]	@ (800a708 <HAL_UART_MspInit+0x1ec>)
 800a65a:	2280      	movs	r2, #128	@ 0x80
 800a65c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a65e:	4b2a      	ldr	r3, [pc, #168]	@ (800a708 <HAL_UART_MspInit+0x1ec>)
 800a660:	2200      	movs	r2, #0
 800a662:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a664:	4b28      	ldr	r3, [pc, #160]	@ (800a708 <HAL_UART_MspInit+0x1ec>)
 800a666:	2200      	movs	r2, #0
 800a668:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800a66a:	4b27      	ldr	r3, [pc, #156]	@ (800a708 <HAL_UART_MspInit+0x1ec>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a670:	4b25      	ldr	r3, [pc, #148]	@ (800a708 <HAL_UART_MspInit+0x1ec>)
 800a672:	2200      	movs	r2, #0
 800a674:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a676:	4824      	ldr	r0, [pc, #144]	@ (800a708 <HAL_UART_MspInit+0x1ec>)
 800a678:	f7f6 ffb0 	bl	80015dc <HAL_DMA_Init>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <HAL_UART_MspInit+0x16a>
      Error_Handler();
 800a682:	f7ff fd95 	bl	800a1b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a1f      	ldr	r2, [pc, #124]	@ (800a708 <HAL_UART_MspInit+0x1ec>)
 800a68a:	675a      	str	r2, [r3, #116]	@ 0x74
 800a68c:	4a1e      	ldr	r2, [pc, #120]	@ (800a708 <HAL_UART_MspInit+0x1ec>)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800a692:	4b1f      	ldr	r3, [pc, #124]	@ (800a710 <HAL_UART_MspInit+0x1f4>)
 800a694:	4a1f      	ldr	r2, [pc, #124]	@ (800a714 <HAL_UART_MspInit+0x1f8>)
 800a696:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800a698:	4b1d      	ldr	r3, [pc, #116]	@ (800a710 <HAL_UART_MspInit+0x1f4>)
 800a69a:	2202      	movs	r2, #2
 800a69c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a69e:	4b1c      	ldr	r3, [pc, #112]	@ (800a710 <HAL_UART_MspInit+0x1f4>)
 800a6a0:	2210      	movs	r2, #16
 800a6a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a6a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a710 <HAL_UART_MspInit+0x1f4>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a6aa:	4b19      	ldr	r3, [pc, #100]	@ (800a710 <HAL_UART_MspInit+0x1f4>)
 800a6ac:	2280      	movs	r2, #128	@ 0x80
 800a6ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a6b0:	4b17      	ldr	r3, [pc, #92]	@ (800a710 <HAL_UART_MspInit+0x1f4>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a6b6:	4b16      	ldr	r3, [pc, #88]	@ (800a710 <HAL_UART_MspInit+0x1f4>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800a6bc:	4b14      	ldr	r3, [pc, #80]	@ (800a710 <HAL_UART_MspInit+0x1f4>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a6c2:	4b13      	ldr	r3, [pc, #76]	@ (800a710 <HAL_UART_MspInit+0x1f4>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800a6c8:	4811      	ldr	r0, [pc, #68]	@ (800a710 <HAL_UART_MspInit+0x1f4>)
 800a6ca:	f7f6 ff87 	bl	80015dc <HAL_DMA_Init>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 800a6d4:	f7ff fd6c 	bl	800a1b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a0d      	ldr	r2, [pc, #52]	@ (800a710 <HAL_UART_MspInit+0x1f4>)
 800a6dc:	671a      	str	r2, [r3, #112]	@ 0x70
 800a6de:	4a0c      	ldr	r2, [pc, #48]	@ (800a710 <HAL_UART_MspInit+0x1f4>)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	2026      	movs	r0, #38	@ 0x26
 800a6ea:	f7f6 ff32 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a6ee:	2026      	movs	r0, #38	@ 0x26
 800a6f0:	f7f6 ff4b 	bl	800158a <HAL_NVIC_EnableIRQ>
}
 800a6f4:	bf00      	nop
 800a6f6:	3788      	adds	r7, #136	@ 0x88
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	40013800 	.word	0x40013800
 800a700:	40021000 	.word	0x40021000
 800a704:	40004400 	.word	0x40004400
 800a708:	200006dc 	.word	0x200006dc
 800a70c:	4002006c 	.word	0x4002006c
 800a710:	20000724 	.word	0x20000724
 800a714:	40020080 	.word	0x40020080

0800a718 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a18      	ldr	r2, [pc, #96]	@ (800a788 <HAL_UART_MspDeInit+0x70>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d10c      	bne.n	800a744 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800a72a:	4b18      	ldr	r3, [pc, #96]	@ (800a78c <HAL_UART_MspDeInit+0x74>)
 800a72c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a72e:	4a17      	ldr	r2, [pc, #92]	@ (800a78c <HAL_UART_MspDeInit+0x74>)
 800a730:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a734:	6613      	str	r3, [r2, #96]	@ 0x60

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, DEBUG_UART_RX_Pin|DEBUG_UART_TX_Pin);
 800a736:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a73a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a73e:	f7f7 fbdd 	bl	8001efc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800a742:	e01c      	b.n	800a77e <HAL_UART_MspDeInit+0x66>
  else if(huart->Instance==USART2)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a11      	ldr	r2, [pc, #68]	@ (800a790 <HAL_UART_MspDeInit+0x78>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d117      	bne.n	800a77e <HAL_UART_MspDeInit+0x66>
    __HAL_RCC_USART2_CLK_DISABLE();
 800a74e:	4b0f      	ldr	r3, [pc, #60]	@ (800a78c <HAL_UART_MspDeInit+0x74>)
 800a750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a752:	4a0e      	ldr	r2, [pc, #56]	@ (800a78c <HAL_UART_MspDeInit+0x74>)
 800a754:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a758:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOA, UART_RX_Pin|UART_TX_Pin|UART_CTS_Pin|UART_RTS_Pin);
 800a75a:	210f      	movs	r1, #15
 800a75c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a760:	f7f7 fbcc 	bl	8001efc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a768:	4618      	mov	r0, r3
 800a76a:	f7f6 ffef 	bl	800174c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a772:	4618      	mov	r0, r3
 800a774:	f7f6 ffea 	bl	800174c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800a778:	2026      	movs	r0, #38	@ 0x26
 800a77a:	f7f6 ff14 	bl	80015a6 <HAL_NVIC_DisableIRQ>
}
 800a77e:	bf00      	nop
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	40013800 	.word	0x40013800
 800a78c:	40021000 	.word	0x40021000
 800a790:	40004400 	.word	0x40004400

0800a794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a794:	b480      	push	{r7}
 800a796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800a798:	bf00      	nop
 800a79a:	e7fd      	b.n	800a798 <NMI_Handler+0x4>

0800a79c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a79c:	b480      	push	{r7}
 800a79e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a7a0:	bf00      	nop
 800a7a2:	e7fd      	b.n	800a7a0 <HardFault_Handler+0x4>

0800a7a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a7a8:	bf00      	nop
 800a7aa:	e7fd      	b.n	800a7a8 <MemManage_Handler+0x4>

0800a7ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a7b0:	bf00      	nop
 800a7b2:	e7fd      	b.n	800a7b0 <BusFault_Handler+0x4>

0800a7b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a7b8:	bf00      	nop
 800a7ba:	e7fd      	b.n	800a7b8 <UsageFault_Handler+0x4>

0800a7bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a7c0:	bf00      	nop
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr

0800a7ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a7ca:	b480      	push	{r7}
 800a7cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a7ce:	bf00      	nop
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a7dc:	bf00      	nop
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a7ea:	f7f6 fd4f 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 800a7ee:	bf00      	nop
 800a7f0:	bd80      	pop	{r7, pc}
	...

0800a7f4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800a7f8:	4802      	ldr	r0, [pc, #8]	@ (800a804 <RTC_WKUP_IRQHandler+0x10>)
 800a7fa:	f7fb fa05 	bl	8005c08 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800a7fe:	bf00      	nop
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	200004b4 	.word	0x200004b4

0800a808 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERRUPT_Pin);
 800a80c:	2008      	movs	r0, #8
 800a80e:	f7f7 fc7f 	bl	8002110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800a812:	bf00      	nop
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800a81c:	4802      	ldr	r0, [pc, #8]	@ (800a828 <DMA1_Channel2_IRQHandler+0x10>)
 800a81e:	f7f7 f906 	bl	8001a2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800a822:	bf00      	nop
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	2000053c 	.word	0x2000053c

0800a82c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800a830:	4802      	ldr	r0, [pc, #8]	@ (800a83c <DMA1_Channel3_IRQHandler+0x10>)
 800a832:	f7f7 f8fc 	bl	8001a2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800a836:	bf00      	nop
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20000584 	.word	0x20000584

0800a840 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800a844:	4802      	ldr	r0, [pc, #8]	@ (800a850 <DMA1_Channel6_IRQHandler+0x10>)
 800a846:	f7f7 f8f2 	bl	8001a2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800a84a:	bf00      	nop
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	200006dc 	.word	0x200006dc

0800a854 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800a858:	4802      	ldr	r0, [pc, #8]	@ (800a864 <DMA1_Channel7_IRQHandler+0x10>)
 800a85a:	f7f7 f8e8 	bl	8001a2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800a85e:	bf00      	nop
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20000724 	.word	0x20000724

0800a868 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800a86c:	4802      	ldr	r0, [pc, #8]	@ (800a878 <I2C2_EV_IRQHandler+0x10>)
 800a86e:	f7f7 fd5d 	bl	800232c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800a872:	bf00      	nop
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	20000460 	.word	0x20000460

0800a87c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a880:	4802      	ldr	r0, [pc, #8]	@ (800a88c <USART2_IRQHandler+0x10>)
 800a882:	f7fc f8b5 	bl	80069f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a886:	bf00      	nop
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	20000654 	.word	0x20000654

0800a890 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WAKE_UP_Pin);
 800a894:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a898:	f7f7 fc3a 	bl	8002110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a89c:	bf00      	nop
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800a8a4:	4802      	ldr	r0, [pc, #8]	@ (800a8b0 <RTC_Alarm_IRQHandler+0x10>)
 800a8a6:	f7fa ffa7 	bl	80057f8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800a8aa:	bf00      	nop
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	200004b4 	.word	0x200004b4

0800a8b4 <_fstat>:

extern UART_HandleTypeDef DEBUG_UART_HANDLE;


int _fstat(int file, struct stat *st)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
	(void)file;

	st->st_mode = S_IFCHR;
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a8c4:	605a      	str	r2, [r3, #4]
	return 0;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <_close>:


int _close(int file)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	(void)file;

	return -1;
 800a8dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <_getpid>:


int _getpid(void)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	af00      	add	r7, sp, #0
	return 1;
 800a8f0:	2301      	movs	r3, #1
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <_isatty>:


int _isatty(int file)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
	(void)file;

	return 1;
 800a904:	2301      	movs	r3, #1
}
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <_lseek>:


int _lseek(int file, int ptr, int dir)
{
 800a912:	b480      	push	{r7}
 800a914:	b085      	sub	sp, #20
 800a916:	af00      	add	r7, sp, #0
 800a918:	60f8      	str	r0, [r7, #12]
 800a91a:	60b9      	str	r1, [r7, #8]
 800a91c:	607a      	str	r2, [r7, #4]
	(void)file;
	(void)ptr;
	(void)dir;

	return 0;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <_kill>:


int _kill(int pid, int sig)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
	(void)pid;
	(void)sig;

	errno = EINVAL;
 800a936:	f00b f945 	bl	8015bc4 <__errno>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2216      	movs	r2, #22
 800a93e:	601a      	str	r2, [r3, #0]
	return -1;
 800a940:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <_read>:


int _read(int file, char *ptr, int len)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
	(void)file;
	(void)ptr;
	(void)len;

	return -1;
 800a958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <_write>:


int _write(int file, char *ptr, int len)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
	(void)file;
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t *)ptr, len, 0xFFFF);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	b29a      	uxth	r2, r3
 800a978:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a97c:	68b9      	ldr	r1, [r7, #8]
 800a97e:	4804      	ldr	r0, [pc, #16]	@ (800a990 <_write+0x28>)
 800a980:	f7fb fe4b 	bl	800661a <HAL_UART_Transmit>
	return len;
 800a984:	687b      	ldr	r3, [r7, #4]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	200005cc 	.word	0x200005cc

0800a994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a99c:	4a14      	ldr	r2, [pc, #80]	@ (800a9f0 <_sbrk+0x5c>)
 800a99e:	4b15      	ldr	r3, [pc, #84]	@ (800a9f4 <_sbrk+0x60>)
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a9a8:	4b13      	ldr	r3, [pc, #76]	@ (800a9f8 <_sbrk+0x64>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d102      	bne.n	800a9b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a9b0:	4b11      	ldr	r3, [pc, #68]	@ (800a9f8 <_sbrk+0x64>)
 800a9b2:	4a12      	ldr	r2, [pc, #72]	@ (800a9fc <_sbrk+0x68>)
 800a9b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a9b6:	4b10      	ldr	r3, [pc, #64]	@ (800a9f8 <_sbrk+0x64>)
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4413      	add	r3, r2
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d207      	bcs.n	800a9d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a9c4:	f00b f8fe 	bl	8015bc4 <__errno>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	220c      	movs	r2, #12
 800a9cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d2:	e009      	b.n	800a9e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a9d4:	4b08      	ldr	r3, [pc, #32]	@ (800a9f8 <_sbrk+0x64>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a9da:	4b07      	ldr	r3, [pc, #28]	@ (800a9f8 <_sbrk+0x64>)
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	4a05      	ldr	r2, [pc, #20]	@ (800a9f8 <_sbrk+0x64>)
 800a9e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3718      	adds	r7, #24
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	20010000 	.word	0x20010000
 800a9f4:	00001400 	.word	0x00001400
 800a9f8:	2000076c 	.word	0x2000076c
 800a9fc:	200008e8 	.word	0x200008e8

0800aa00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800aa00:	b480      	push	{r7}
 800aa02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800aa04:	4b06      	ldr	r3, [pc, #24]	@ (800aa20 <SystemInit+0x20>)
 800aa06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa0a:	4a05      	ldr	r2, [pc, #20]	@ (800aa20 <SystemInit+0x20>)
 800aa0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800aa14:	bf00      	nop
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	e000ed00 	.word	0xe000ed00

0800aa24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800aa24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800aa5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800aa28:	f7ff ffea 	bl	800aa00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800aa2c:	480c      	ldr	r0, [pc, #48]	@ (800aa60 <LoopForever+0x6>)
  ldr r1, =_edata
 800aa2e:	490d      	ldr	r1, [pc, #52]	@ (800aa64 <LoopForever+0xa>)
  ldr r2, =_sidata
 800aa30:	4a0d      	ldr	r2, [pc, #52]	@ (800aa68 <LoopForever+0xe>)
  movs r3, #0
 800aa32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800aa34:	e002      	b.n	800aa3c <LoopCopyDataInit>

0800aa36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aa36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aa38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aa3a:	3304      	adds	r3, #4

0800aa3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aa3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aa3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aa40:	d3f9      	bcc.n	800aa36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aa42:	4a0a      	ldr	r2, [pc, #40]	@ (800aa6c <LoopForever+0x12>)
  ldr r4, =_ebss
 800aa44:	4c0a      	ldr	r4, [pc, #40]	@ (800aa70 <LoopForever+0x16>)
  movs r3, #0
 800aa46:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aa48:	e001      	b.n	800aa4e <LoopFillZerobss>

0800aa4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aa4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aa4c:	3204      	adds	r2, #4

0800aa4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aa4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aa50:	d3fb      	bcc.n	800aa4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800aa52:	f00b f8bd 	bl	8015bd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800aa56:	f7ff f8f1 	bl	8009c3c <main>

0800aa5a <LoopForever>:

LoopForever:
    b LoopForever
 800aa5a:	e7fe      	b.n	800aa5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800aa5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800aa60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aa64:	20000374 	.word	0x20000374
  ldr r2, =_sidata
 800aa68:	0801f730 	.word	0x0801f730
  ldr r2, =_sbss
 800aa6c:	20000374 	.word	0x20000374
  ldr r4, =_ebss
 800aa70:	200008e4 	.word	0x200008e4

0800aa74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800aa74:	e7fe      	b.n	800aa74 <ADC1_IRQHandler>
	...

0800aa78 <create_measurement_resources>:
 800aa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	4605      	mov	r5, r0
 800aa80:	4688      	mov	r8, r1
 800aa82:	4616      	mov	r6, r2
 800aa84:	461f      	mov	r7, r3
 800aa86:	f004 f91d 	bl	800ecc4 <acc_config_create>
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	b300      	cbz	r0, 800aad0 <create_measurement_resources+0x58>
 800aa8e:	2d01      	cmp	r5, #1
 800aa90:	f108 0004 	add.w	r0, r8, #4
 800aa94:	4621      	mov	r1, r4
 800aa96:	d10a      	bne.n	800aaae <create_measurement_resources+0x36>
 800aa98:	f004 f8aa 	bl	800ebf0 <acc_detector_distance_translation_get_far_range_sensor_config>
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	b95d      	cbnz	r5, 800aab8 <create_measurement_resources+0x40>
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f004 f927 	bl	800ecf4 <acc_config_destroy>
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	b002      	add	sp, #8
 800aaaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaae:	f003 ffd5 	bl	800ea5c <acc_detector_distance_translation_get_close_range_sensor_config>
 800aab2:	4605      	mov	r5, r0
 800aab4:	2d00      	cmp	r5, #0
 800aab6:	d0f3      	beq.n	800aaa0 <create_measurement_resources+0x28>
 800aab8:	9908      	ldr	r1, [sp, #32]
 800aaba:	4620      	mov	r0, r4
 800aabc:	f004 fcae 	bl	800f41c <acc_processing_create>
 800aac0:	4603      	mov	r3, r0
 800aac2:	b150      	cbz	r0, 800aada <create_measurement_resources+0x62>
 800aac4:	4628      	mov	r0, r5
 800aac6:	6034      	str	r4, [r6, #0]
 800aac8:	603b      	str	r3, [r7, #0]
 800aaca:	b002      	add	sp, #8
 800aacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad0:	4605      	mov	r5, r0
 800aad2:	4628      	mov	r0, r5
 800aad4:	b002      	add	sp, #8
 800aad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aada:	4620      	mov	r0, r4
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	f004 f909 	bl	800ecf4 <acc_config_destroy>
 800aae2:	9b01      	ldr	r3, [sp, #4]
 800aae4:	461d      	mov	r5, r3
 800aae6:	e7de      	b.n	800aaa6 <create_measurement_resources+0x2e>

0800aae8 <create_noise_calibration_resources>:
 800aae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaec:	4606      	mov	r6, r0
 800aaee:	4688      	mov	r8, r1
 800aaf0:	4617      	mov	r7, r2
 800aaf2:	461d      	mov	r5, r3
 800aaf4:	f004 f8e6 	bl	800ecc4 <acc_config_create>
 800aaf8:	4604      	mov	r4, r0
 800aafa:	b160      	cbz	r0, 800ab16 <create_noise_calibration_resources+0x2e>
 800aafc:	4631      	mov	r1, r6
 800aafe:	f002 f94d 	bl	800cd9c <acc_detector_distance_calibration_noise_settings_set>
 800ab02:	4629      	mov	r1, r5
 800ab04:	4620      	mov	r0, r4
 800ab06:	f004 fc89 	bl	800f41c <acc_processing_create>
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	b128      	cbz	r0, 800ab1a <create_noise_calibration_resources+0x32>
 800ab0e:	f8c8 4000 	str.w	r4, [r8]
 800ab12:	2001      	movs	r0, #1
 800ab14:	603d      	str	r5, [r7, #0]
 800ab16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f004 f8ea 	bl	800ecf4 <acc_config_destroy>
 800ab20:	4628      	mov	r0, r5
 800ab22:	e7f8      	b.n	800ab16 <create_noise_calibration_resources+0x2e>

0800ab24 <prepare_and_measure>:
 800ab24:	b510      	push	{r4, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	9c04      	ldr	r4, [sp, #16]
 800ab2a:	9400      	str	r4, [sp, #0]
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	f004 fdbf 	bl	800f6b0 <acc_sensor_prepare>
 800ab32:	b908      	cbnz	r0, 800ab38 <prepare_and_measure+0x14>
 800ab34:	b002      	add	sp, #8
 800ab36:	bd10      	pop	{r4, pc}
 800ab38:	4620      	mov	r0, r4
 800ab3a:	b002      	add	sp, #8
 800ab3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab40:	f004 be0c 	b.w	800f75c <acc_sensor_measure>

0800ab44 <validate_distance_config.part.0>:
 800ab44:	4b02      	ldr	r3, [pc, #8]	@ (800ab50 <validate_distance_config.part.0+0xc>)
 800ab46:	4a03      	ldr	r2, [pc, #12]	@ (800ab54 <validate_distance_config.part.0+0x10>)
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	4903      	ldr	r1, [pc, #12]	@ (800ab58 <validate_distance_config.part.0+0x14>)
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	4718      	bx	r3
 800ab50:	200008cc 	.word	0x200008cc
 800ab54:	08019b58 	.word	0x08019b58
 800ab58:	08019b70 	.word	0x08019b70

0800ab5c <validate_distance_handle.part.0>:
 800ab5c:	4b02      	ldr	r3, [pc, #8]	@ (800ab68 <validate_distance_handle.part.0+0xc>)
 800ab5e:	4a03      	ldr	r2, [pc, #12]	@ (800ab6c <validate_distance_handle.part.0+0x10>)
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	4903      	ldr	r1, [pc, #12]	@ (800ab70 <validate_distance_handle.part.0+0x14>)
 800ab64:	2000      	movs	r0, #0
 800ab66:	4718      	bx	r3
 800ab68:	200008cc 	.word	0x200008cc
 800ab6c:	08019b84 	.word	0x08019b84
 800ab70:	08019b70 	.word	0x08019b70

0800ab74 <detector_has_close_range>:
 800ab74:	b508      	push	{r3, lr}
 800ab76:	b118      	cbz	r0, 800ab80 <detector_has_close_range+0xc>
 800ab78:	4b06      	ldr	r3, [pc, #24]	@ (800ab94 <detector_has_close_range+0x20>)
 800ab7a:	6802      	ldr	r2, [r0, #0]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d003      	beq.n	800ab88 <detector_has_close_range+0x14>
 800ab80:	f7ff ffec 	bl	800ab5c <validate_distance_handle.part.0>
 800ab84:	2000      	movs	r0, #0
 800ab86:	bd08      	pop	{r3, pc}
 800ab88:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 800ab8a:	3800      	subs	r0, #0
 800ab8c:	bf18      	it	ne
 800ab8e:	2001      	movne	r0, #1
 800ab90:	bd08      	pop	{r3, pc}
 800ab92:	bf00      	nop
 800ab94:	acc0d130 	.word	0xacc0d130

0800ab98 <detector_has_far_range>:
 800ab98:	b508      	push	{r3, lr}
 800ab9a:	b118      	cbz	r0, 800aba4 <detector_has_far_range+0xc>
 800ab9c:	4b06      	ldr	r3, [pc, #24]	@ (800abb8 <detector_has_far_range+0x20>)
 800ab9e:	6802      	ldr	r2, [r0, #0]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d003      	beq.n	800abac <detector_has_far_range+0x14>
 800aba4:	f7ff ffda 	bl	800ab5c <validate_distance_handle.part.0>
 800aba8:	2000      	movs	r0, #0
 800abaa:	bd08      	pop	{r3, pc}
 800abac:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 800abae:	3800      	subs	r0, #0
 800abb0:	bf18      	it	ne
 800abb2:	2001      	movne	r0, #1
 800abb4:	bd08      	pop	{r3, pc}
 800abb6:	bf00      	nop
 800abb8:	acc0d130 	.word	0xacc0d130

0800abbc <decide_next_measurement_type>:
 800abbc:	b508      	push	{r3, lr}
 800abbe:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800abc2:	b91b      	cbnz	r3, 800abcc <decide_next_measurement_type+0x10>
 800abc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800abc8:	f7ff bfe6 	b.w	800ab98 <detector_has_far_range>
 800abcc:	f7ff ffd2 	bl	800ab74 <detector_has_close_range>
 800abd0:	f080 0001 	eor.w	r0, r0, #1
 800abd4:	b2c0      	uxtb	r0, r0
 800abd6:	bd08      	pop	{r3, pc}

0800abd8 <acc_detector_distance_config_create>:
 800abd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abda:	490b      	ldr	r1, [pc, #44]	@ (800ac08 <acc_detector_distance_config_create+0x30>)
 800abdc:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800abe0:	202c      	movs	r0, #44	@ 0x2c
 800abe2:	f006 fc15 	bl	8011410 <acc_rss_integration_mem_alloc_debug>
 800abe6:	4606      	mov	r6, r0
 800abe8:	b160      	cbz	r0, 800ac04 <acc_detector_distance_config_create+0x2c>
 800abea:	4d08      	ldr	r5, [pc, #32]	@ (800ac0c <acc_detector_distance_config_create+0x34>)
 800abec:	4f08      	ldr	r7, [pc, #32]	@ (800ac10 <acc_detector_distance_config_create+0x38>)
 800abee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abf0:	4634      	mov	r4, r6
 800abf2:	f844 7b04 	str.w	r7, [r4], #4
 800abf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ac00:	e884 0003 	stmia.w	r4, {r0, r1}
 800ac04:	4630      	mov	r0, r6
 800ac06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac08:	08019b70 	.word	0x08019b70
 800ac0c:	08019a78 	.word	0x08019a78
 800ac10:	acc0d150 	.word	0xacc0d150

0800ac14 <acc_detector_distance_config_destroy>:
 800ac14:	b118      	cbz	r0, 800ac1e <acc_detector_distance_config_destroy+0xa>
 800ac16:	4a05      	ldr	r2, [pc, #20]	@ (800ac2c <acc_detector_distance_config_destroy+0x18>)
 800ac18:	6801      	ldr	r1, [r0, #0]
 800ac1a:	4291      	cmp	r1, r2
 800ac1c:	d001      	beq.n	800ac22 <acc_detector_distance_config_destroy+0xe>
 800ac1e:	f7ff bf91 	b.w	800ab44 <validate_distance_config.part.0>
 800ac22:	2200      	movs	r2, #0
 800ac24:	6002      	str	r2, [r0, #0]
 800ac26:	f006 bc33 	b.w	8011490 <acc_rss_integration_mem_free>
 800ac2a:	bf00      	nop
 800ac2c:	acc0d150 	.word	0xacc0d150

0800ac30 <acc_detector_distance_get_sizes>:
 800ac30:	b510      	push	{r4, lr}
 800ac32:	b118      	cbz	r0, 800ac3c <acc_detector_distance_get_sizes+0xc>
 800ac34:	4b07      	ldr	r3, [pc, #28]	@ (800ac54 <acc_detector_distance_get_sizes+0x24>)
 800ac36:	6804      	ldr	r4, [r0, #0]
 800ac38:	429c      	cmp	r4, r3
 800ac3a:	d003      	beq.n	800ac44 <acc_detector_distance_get_sizes+0x14>
 800ac3c:	f7ff ff8e 	bl	800ab5c <validate_distance_handle.part.0>
 800ac40:	2000      	movs	r0, #0
 800ac42:	bd10      	pop	{r4, pc}
 800ac44:	6883      	ldr	r3, [r0, #8]
 800ac46:	6904      	ldr	r4, [r0, #16]
 800ac48:	4423      	add	r3, r4
 800ac4a:	600b      	str	r3, [r1, #0]
 800ac4c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ac4e:	6013      	str	r3, [r2, #0]
 800ac50:	2001      	movs	r0, #1
 800ac52:	bd10      	pop	{r4, pc}
 800ac54:	acc0d130 	.word	0xacc0d130

0800ac58 <acc_detector_distance_destroy>:
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d04f      	beq.n	800acfc <acc_detector_distance_destroy+0xa4>
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	6802      	ldr	r2, [r0, #0]
 800ac60:	4b27      	ldr	r3, [pc, #156]	@ (800ad00 <acc_detector_distance_destroy+0xa8>)
 800ac62:	429a      	cmp	r2, r3
 800ac64:	4604      	mov	r4, r0
 800ac66:	d003      	beq.n	800ac70 <acc_detector_distance_destroy+0x18>
 800ac68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac6c:	f7ff bf76 	b.w	800ab5c <validate_distance_handle.part.0>
 800ac70:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 800ac72:	2500      	movs	r5, #0
 800ac74:	6025      	str	r5, [r4, #0]
 800ac76:	b110      	cbz	r0, 800ac7e <acc_detector_distance_destroy+0x26>
 800ac78:	f004 f83c 	bl	800ecf4 <acc_config_destroy>
 800ac7c:	6525      	str	r5, [r4, #80]	@ 0x50
 800ac7e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800ac80:	b118      	cbz	r0, 800ac8a <acc_detector_distance_destroy+0x32>
 800ac82:	f004 fba7 	bl	800f3d4 <acc_processing_destroy>
 800ac86:	2300      	movs	r3, #0
 800ac88:	6663      	str	r3, [r4, #100]	@ 0x64
 800ac8a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800ac8c:	b118      	cbz	r0, 800ac96 <acc_detector_distance_destroy+0x3e>
 800ac8e:	f004 f831 	bl	800ecf4 <acc_config_destroy>
 800ac92:	2300      	movs	r3, #0
 800ac94:	6563      	str	r3, [r4, #84]	@ 0x54
 800ac96:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800ac98:	b118      	cbz	r0, 800aca2 <acc_detector_distance_destroy+0x4a>
 800ac9a:	f004 fb9b 	bl	800f3d4 <acc_processing_destroy>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	66a3      	str	r3, [r4, #104]	@ 0x68
 800aca2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800aca4:	b118      	cbz	r0, 800acae <acc_detector_distance_destroy+0x56>
 800aca6:	f004 f825 	bl	800ecf4 <acc_config_destroy>
 800acaa:	2300      	movs	r3, #0
 800acac:	6463      	str	r3, [r4, #68]	@ 0x44
 800acae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acb0:	b118      	cbz	r0, 800acba <acc_detector_distance_destroy+0x62>
 800acb2:	f004 fb8f 	bl	800f3d4 <acc_processing_destroy>
 800acb6:	2300      	movs	r3, #0
 800acb8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800acba:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800acbc:	b118      	cbz	r0, 800acc6 <acc_detector_distance_destroy+0x6e>
 800acbe:	f004 f819 	bl	800ecf4 <acc_config_destroy>
 800acc2:	2300      	movs	r3, #0
 800acc4:	64a3      	str	r3, [r4, #72]	@ 0x48
 800acc6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800acc8:	b118      	cbz	r0, 800acd2 <acc_detector_distance_destroy+0x7a>
 800acca:	f004 fb83 	bl	800f3d4 <acc_processing_destroy>
 800acce:	2300      	movs	r3, #0
 800acd0:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800acd2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800acd4:	b118      	cbz	r0, 800acde <acc_detector_distance_destroy+0x86>
 800acd6:	f004 f80d 	bl	800ecf4 <acc_config_destroy>
 800acda:	2300      	movs	r3, #0
 800acdc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800acde:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800ace0:	b118      	cbz	r0, 800acea <acc_detector_distance_destroy+0x92>
 800ace2:	f004 fb77 	bl	800f3d4 <acc_processing_destroy>
 800ace6:	2300      	movs	r3, #0
 800ace8:	6623      	str	r3, [r4, #96]	@ 0x60
 800acea:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800acec:	b108      	cbz	r0, 800acf2 <acc_detector_distance_destroy+0x9a>
 800acee:	f000 fe3b 	bl	800b968 <acc_detector_distance_aggregator_destroy>
 800acf2:	4620      	mov	r0, r4
 800acf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acf8:	f006 bbca 	b.w	8011490 <acc_rss_integration_mem_free>
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	acc0d130 	.word	0xacc0d130

0800ad04 <acc_detector_distance_create>:
 800ad04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad08:	b0ac      	sub	sp, #176	@ 0xb0
 800ad0a:	b120      	cbz	r0, 800ad16 <acc_detector_distance_create+0x12>
 800ad0c:	4b93      	ldr	r3, [pc, #588]	@ (800af5c <acc_detector_distance_create+0x258>)
 800ad0e:	6802      	ldr	r2, [r0, #0]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	4606      	mov	r6, r0
 800ad14:	d013      	beq.n	800ad3e <acc_detector_distance_create+0x3a>
 800ad16:	f7ff ff15 	bl	800ab44 <validate_distance_config.part.0>
 800ad1a:	2400      	movs	r4, #0
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ad22:	4b8f      	ldr	r3, [pc, #572]	@ (800af60 <acc_detector_distance_create+0x25c>)
 800ad24:	4a8f      	ldr	r2, [pc, #572]	@ (800af64 <acc_detector_distance_create+0x260>)
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	498f      	ldr	r1, [pc, #572]	@ (800af68 <acc_detector_distance_create+0x264>)
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	4798      	blx	r3
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7ff ff92 	bl	800ac58 <acc_detector_distance_destroy>
 800ad34:	2400      	movs	r4, #0
 800ad36:	4620      	mov	r0, r4
 800ad38:	b02c      	add	sp, #176	@ 0xb0
 800ad3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3e:	4a8a      	ldr	r2, [pc, #552]	@ (800af68 <acc_detector_distance_create+0x264>)
 800ad40:	f240 139b 	movw	r3, #411	@ 0x19b
 800ad44:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800ad48:	2001      	movs	r0, #1
 800ad4a:	f006 fb85 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 800ad4e:	4604      	mov	r4, r0
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d0e3      	beq.n	800ad1c <acc_detector_distance_create+0x18>
 800ad54:	4b85      	ldr	r3, [pc, #532]	@ (800af6c <acc_detector_distance_create+0x268>)
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	2500      	movs	r5, #0
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	228c      	movs	r2, #140	@ 0x8c
 800ad5e:	f106 0804 	add.w	r8, r6, #4
 800ad62:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
 800ad66:	f8a4 5106 	strh.w	r5, [r4, #262]	@ 0x106
 800ad6a:	a809      	add	r0, sp, #36	@ 0x24
 800ad6c:	f00a fec8 	bl	8015b00 <memset>
 800ad70:	4640      	mov	r0, r8
 800ad72:	f003 fdc9 	bl	800e908 <acc_detector_distance_translation_get_num_processor_specifications>
 800ad76:	4607      	mov	r7, r0
 800ad78:	463a      	mov	r2, r7
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	a909      	add	r1, sp, #36	@ 0x24
 800ad7e:	f003 fdd1 	bl	800e924 <acc_detector_distance_translation_get_processor_specifications>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d0ca      	beq.n	800ad1c <acc_detector_distance_create+0x18>
 800ad86:	b1e7      	cbz	r7, 800adc2 <acc_detector_distance_create+0xbe>
 800ad88:	1e7b      	subs	r3, r7, #1
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ad92:	aa10      	add	r2, sp, #64	@ 0x40
 800ad94:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ad98:	4688      	mov	r8, r1
 800ad9a:	ab09      	add	r3, sp, #36	@ 0x24
 800ad9c:	e005      	b.n	800adaa <acc_detector_distance_create+0xa6>
 800ad9e:	331c      	adds	r3, #28
 800ada0:	2a01      	cmp	r2, #1
 800ada2:	bf08      	it	eq
 800ada4:	4601      	moveq	r1, r0
 800ada6:	429d      	cmp	r5, r3
 800ada8:	d006      	beq.n	800adb8 <acc_detector_distance_create+0xb4>
 800adaa:	785a      	ldrb	r2, [r3, #1]
 800adac:	2a00      	cmp	r2, #0
 800adae:	d1f6      	bne.n	800ad9e <acc_detector_distance_create+0x9a>
 800adb0:	331c      	adds	r3, #28
 800adb2:	429d      	cmp	r5, r3
 800adb4:	4680      	mov	r8, r0
 800adb6:	d1f8      	bne.n	800adaa <acc_detector_distance_create+0xa6>
 800adb8:	2900      	cmp	r1, #0
 800adba:	d12e      	bne.n	800ae1a <acc_detector_distance_create+0x116>
 800adbc:	f1b8 0f00 	cmp.w	r8, #0
 800adc0:	d14a      	bne.n	800ae58 <acc_detector_distance_create+0x154>
 800adc2:	f04f 0800 	mov.w	r8, #0
 800adc6:	e9d4 1214 	ldrd	r1, r2, [r4, #80]	@ 0x50
 800adca:	9700      	str	r7, [sp, #0]
 800adcc:	7d70      	ldrb	r0, [r6, #21]
 800adce:	ab09      	add	r3, sp, #36	@ 0x24
 800add0:	f000 fd3a 	bl	800b848 <acc_detector_distance_aggregator_create>
 800add4:	63e0      	str	r0, [r4, #60]	@ 0x3c
 800add6:	2800      	cmp	r0, #0
 800add8:	d0a0      	beq.n	800ad1c <acc_detector_distance_create+0x18>
 800adda:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800addc:	2300      	movs	r3, #0
 800adde:	6063      	str	r3, [r4, #4]
 800ade0:	9004      	str	r0, [sp, #16]
 800ade2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800ade4:	9205      	str	r2, [sp, #20]
 800ade6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ade8:	9206      	str	r2, [sp, #24]
 800adea:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 800adec:	9207      	str	r2, [sp, #28]
 800adee:	469a      	mov	sl, r3
 800adf0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800adf2:	9308      	str	r3, [sp, #32]
 800adf4:	46d1      	mov	r9, sl
 800adf6:	2501      	movs	r5, #1
 800adf8:	a903      	add	r1, sp, #12
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d04d      	beq.n	800ae9a <acc_detector_distance_create+0x196>
 800adfe:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae02:	f003 ff35 	bl	800ec70 <acc_rss_get_buffer_size>
 800ae06:	4607      	mov	r7, r0
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d142      	bne.n	800ae92 <acc_detector_distance_create+0x18e>
 800ae0c:	4650      	mov	r0, sl
 800ae0e:	f006 fa93 	bl	8011338 <acc_detector_utils_align_size_32bit>
 800ae12:	60a0      	str	r0, [r4, #8]
 800ae14:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800ae18:	e783      	b.n	800ad22 <acc_detector_distance_create+0x1e>
 800ae1a:	f104 03dc 	add.w	r3, r4, #220	@ 0xdc
 800ae1e:	2001      	movs	r0, #1
 800ae20:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 800ae24:	f104 0254 	add.w	r2, r4, #84	@ 0x54
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 800ae30:	f7ff fe22 	bl	800aa78 <create_measurement_resources>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	f43f af71 	beq.w	800ad1c <acc_detector_distance_create+0x18>
 800ae3a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800ae3c:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800ae40:	f104 0260 	add.w	r2, r4, #96	@ 0x60
 800ae44:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 800ae48:	f7ff fe4e 	bl	800aae8 <create_noise_calibration_resources>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	f43f af65 	beq.w	800ad1c <acc_detector_distance_create+0x18>
 800ae52:	f1b8 0f00 	cmp.w	r8, #0
 800ae56:	d0b4      	beq.n	800adc2 <acc_detector_distance_create+0xbe>
 800ae58:	f104 03c0 	add.w	r3, r4, #192	@ 0xc0
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
 800ae62:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	4631      	mov	r1, r6
 800ae6a:	f104 0364 	add.w	r3, r4, #100	@ 0x64
 800ae6e:	f7ff fe03 	bl	800aa78 <create_measurement_resources>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	f43f af52 	beq.w	800ad1c <acc_detector_distance_create+0x18>
 800ae78:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800ae7a:	f104 0388 	add.w	r3, r4, #136	@ 0x88
 800ae7e:	f104 025c 	add.w	r2, r4, #92	@ 0x5c
 800ae82:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 800ae86:	f7ff fe2f 	bl	800aae8 <create_noise_calibration_resources>
 800ae8a:	4680      	mov	r8, r0
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	d19a      	bne.n	800adc6 <acc_detector_distance_create+0xc2>
 800ae90:	e744      	b.n	800ad1c <acc_detector_distance_create+0x18>
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	459a      	cmp	sl, r3
 800ae96:	bf38      	it	cc
 800ae98:	469a      	movcc	sl, r3
 800ae9a:	2d05      	cmp	r5, #5
 800ae9c:	d007      	beq.n	800aeae <acc_detector_distance_create+0x1aa>
 800ae9e:	ab2c      	add	r3, sp, #176	@ 0xb0
 800aea0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800aea4:	3501      	adds	r5, #1
 800aea6:	f853 0ca0 	ldr.w	r0, [r3, #-160]
 800aeaa:	b2ad      	uxth	r5, r5
 800aeac:	e7a4      	b.n	800adf8 <acc_detector_distance_create+0xf4>
 800aeae:	4650      	mov	r0, sl
 800aeb0:	f006 fa42 	bl	8011338 <acc_detector_utils_align_size_32bit>
 800aeb4:	2700      	movs	r7, #0
 800aeb6:	60a0      	str	r0, [r4, #8]
 800aeb8:	a903      	add	r1, sp, #12
 800aeba:	e9cd 7703 	strd	r7, r7, [sp, #12]
 800aebe:	aa04      	add	r2, sp, #16
 800aec0:	60e0      	str	r0, [r4, #12]
 800aec2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800aec4:	f000 fcac 	bl	800b820 <acc_detector_distance_aggregator_get_sizes>
 800aec8:	4605      	mov	r5, r0
 800aeca:	2800      	cmp	r0, #0
 800aecc:	f43f af29 	beq.w	800ad22 <acc_detector_distance_create+0x1e>
 800aed0:	9b03      	ldr	r3, [sp, #12]
 800aed2:	7527      	strb	r7, [r4, #20]
 800aed4:	f5b3 6fee 	cmp.w	r3, #1904	@ 0x770
 800aed8:	bf38      	it	cc
 800aeda:	f44f 63ee 	movcc.w	r3, #1904	@ 0x770
 800aede:	6123      	str	r3, [r4, #16]
 800aee0:	4620      	mov	r0, r4
 800aee2:	f7ff fe47 	bl	800ab74 <detector_has_close_range>
 800aee6:	4607      	mov	r7, r0
 800aee8:	4620      	mov	r0, r4
 800aeea:	f7ff fe55 	bl	800ab98 <detector_has_far_range>
 800aeee:	b118      	cbz	r0, 800aef8 <acc_detector_distance_create+0x1f4>
 800aef0:	7d35      	ldrb	r5, [r6, #20]
 800aef2:	3d02      	subs	r5, #2
 800aef4:	bf18      	it	ne
 800aef6:	2501      	movne	r5, #1
 800aef8:	f087 0301 	eor.w	r3, r7, #1
 800aefc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800af00:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
 800af04:	4620      	mov	r0, r4
 800af06:	f7ff fe47 	bl	800ab98 <detector_has_far_range>
 800af0a:	b9f0      	cbnz	r0, 800af4a <acc_detector_distance_create+0x246>
 800af0c:	4602      	mov	r2, r0
 800af0e:	9b04      	ldr	r3, [sp, #16]
 800af10:	4641      	mov	r1, r8
 800af12:	f104 0018 	add.w	r0, r4, #24
 800af16:	f001 fe51 	bl	800cbbc <acc_detector_distance_cal_result_static_map_init>
 800af1a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800af1e:	f001 fe63 	bl	800cbe8 <acc_detector_distance_cal_result_dynamic_map_init>
 800af22:	f003 fecf 	bl	800ecc4 <acc_config_create>
 800af26:	4605      	mov	r5, r0
 800af28:	2800      	cmp	r0, #0
 800af2a:	f43f aefa 	beq.w	800ad22 <acc_detector_distance_create+0x1e>
 800af2e:	f001 fea1 	bl	800cc74 <acc_detector_distance_calibration_offset_settings_set>
 800af32:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 800af36:	4628      	mov	r0, r5
 800af38:	f004 fa70 	bl	800f41c <acc_processing_create>
 800af3c:	b150      	cbz	r0, 800af54 <acc_detector_distance_create+0x250>
 800af3e:	65a0      	str	r0, [r4, #88]	@ 0x58
 800af40:	4620      	mov	r0, r4
 800af42:	6465      	str	r5, [r4, #68]	@ 0x44
 800af44:	b02c      	add	sp, #176	@ 0xb0
 800af46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af4a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800af4c:	f003 ff00 	bl	800ed50 <acc_config_num_subsweeps_get>
 800af50:	4602      	mov	r2, r0
 800af52:	e7dc      	b.n	800af0e <acc_detector_distance_create+0x20a>
 800af54:	4628      	mov	r0, r5
 800af56:	f003 fecd 	bl	800ecf4 <acc_config_destroy>
 800af5a:	e6e2      	b.n	800ad22 <acc_detector_distance_create+0x1e>
 800af5c:	acc0d150 	.word	0xacc0d150
 800af60:	200008cc 	.word	0x200008cc
 800af64:	08019b9c 	.word	0x08019b9c
 800af68:	08019b70 	.word	0x08019b70
 800af6c:	acc0d130 	.word	0xacc0d130

0800af70 <acc_detector_distance_calibrate>:
 800af70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af74:	b08d      	sub	sp, #52	@ 0x34
 800af76:	2400      	movs	r4, #0
 800af78:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 800af7c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af7e:	b131      	cbz	r1, 800af8e <acc_detector_distance_calibrate+0x1e>
 800af80:	4617      	mov	r7, r2
 800af82:	4698      	mov	r8, r3
 800af84:	680a      	ldr	r2, [r1, #0]
 800af86:	4bb5      	ldr	r3, [pc, #724]	@ (800b25c <acc_detector_distance_calibrate+0x2ec>)
 800af88:	429a      	cmp	r2, r3
 800af8a:	460d      	mov	r5, r1
 800af8c:	d005      	beq.n	800af9a <acc_detector_distance_calibrate+0x2a>
 800af8e:	f7ff fde5 	bl	800ab5c <validate_distance_handle.part.0>
 800af92:	2000      	movs	r0, #0
 800af94:	b00d      	add	sp, #52	@ 0x34
 800af96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9a:	aa08      	add	r2, sp, #32
 800af9c:	4606      	mov	r6, r0
 800af9e:	a907      	add	r1, sp, #28
 800afa0:	4628      	mov	r0, r5
 800afa2:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800afa6:	f7ff fe43 	bl	800ac30 <acc_detector_distance_get_sizes>
 800afaa:	9b07      	ldr	r3, [sp, #28]
 800afac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800afae:	4293      	cmp	r3, r2
 800afb0:	d80d      	bhi.n	800afce <acc_detector_distance_calibrate+0x5e>
 800afb2:	9b08      	ldr	r3, [sp, #32]
 800afb4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d214      	bcs.n	800afe4 <acc_detector_distance_calibrate+0x74>
 800afba:	4da9      	ldr	r5, [pc, #676]	@ (800b260 <acc_detector_distance_calibrate+0x2f0>)
 800afbc:	692b      	ldr	r3, [r5, #16]
 800afbe:	4aa9      	ldr	r2, [pc, #676]	@ (800b264 <acc_detector_distance_calibrate+0x2f4>)
 800afc0:	49a9      	ldr	r1, [pc, #676]	@ (800b268 <acc_detector_distance_calibrate+0x2f8>)
 800afc2:	2000      	movs	r0, #0
 800afc4:	4798      	blx	r3
 800afc6:	2000      	movs	r0, #0
 800afc8:	b00d      	add	sp, #52	@ 0x34
 800afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afce:	4da4      	ldr	r5, [pc, #656]	@ (800b260 <acc_detector_distance_calibrate+0x2f0>)
 800afd0:	4aa6      	ldr	r2, [pc, #664]	@ (800b26c <acc_detector_distance_calibrate+0x2fc>)
 800afd2:	692b      	ldr	r3, [r5, #16]
 800afd4:	49a4      	ldr	r1, [pc, #656]	@ (800b268 <acc_detector_distance_calibrate+0x2f8>)
 800afd6:	4620      	mov	r0, r4
 800afd8:	4798      	blx	r3
 800afda:	9b08      	ldr	r3, [sp, #32]
 800afdc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800afde:	429a      	cmp	r2, r3
 800afe0:	d3ec      	bcc.n	800afbc <acc_detector_distance_calibrate+0x4c>
 800afe2:	e7d6      	b.n	800af92 <acc_detector_distance_calibrate+0x22>
 800afe4:	7d2b      	ldrb	r3, [r5, #20]
 800afe6:	2b05      	cmp	r3, #5
 800afe8:	f200 81a7 	bhi.w	800b33a <acc_detector_distance_calibrate+0x3ca>
 800afec:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aff0:	00fc0140 	.word	0x00fc0140
 800aff4:	008000c1 	.word	0x008000c1
 800aff8:	00060013 	.word	0x00060013
 800affc:	f006 fa5c 	bl	80114b8 <acc_rss_integration_log_level>
 800b000:	2800      	cmp	r0, #0
 800b002:	f040 814d 	bne.w	800b2a0 <acc_detector_distance_calibrate+0x330>
 800b006:	7d2b      	ldrb	r3, [r5, #20]
 800b008:	2b05      	cmp	r3, #5
 800b00a:	f000 813f 	beq.w	800b28c <acc_detector_distance_calibrate+0x31c>
 800b00e:	2001      	movs	r0, #1
 800b010:	b00d      	add	sp, #52	@ 0x34
 800b012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b016:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b018:	4641      	mov	r1, r8
 800b01a:	4630      	mov	r0, r6
 800b01c:	f004 fbc6 	bl	800f7ac <acc_sensor_read>
 800b020:	2800      	cmp	r0, #0
 800b022:	d0b6      	beq.n	800af92 <acc_detector_distance_calibrate+0x22>
 800b024:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f040 8140 	bne.w	800b2ae <acc_detector_distance_calibrate+0x33e>
 800b02e:	6e68      	ldr	r0, [r5, #100]	@ 0x64
 800b030:	aa09      	add	r2, sp, #36	@ 0x24
 800b032:	4641      	mov	r1, r8
 800b034:	f004 f992 	bl	800f35c <acc_processing_execute>
 800b038:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 800b03c:	b143      	cbz	r3, 800b050 <acc_detector_distance_calibrate+0xe0>
 800b03e:	f895 2040 	ldrb.w	r2, [r5, #64]	@ 0x40
 800b042:	2a00      	cmp	r2, #0
 800b044:	f040 8138 	bne.w	800b2b8 <acc_detector_distance_calibrate+0x348>
 800b048:	f105 01c0 	add.w	r1, r5, #192	@ 0xc0
 800b04c:	a809      	add	r0, sp, #36	@ 0x24
 800b04e:	4798      	blx	r3
 800b050:	f895 4040 	ldrb.w	r4, [r5, #64]	@ 0x40
 800b054:	68eb      	ldr	r3, [r5, #12]
 800b056:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b058:	f8d5 a03c 	ldr.w	sl, [r5, #60]	@ 0x3c
 800b05c:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 800b060:	f105 0918 	add.w	r9, r5, #24
 800b064:	4622      	mov	r2, r4
 800b066:	f04f 0c00 	mov.w	ip, #0
 800b06a:	4443      	add	r3, r8
 800b06c:	4649      	mov	r1, r9
 800b06e:	9304      	str	r3, [sp, #16]
 800b070:	f88d c020 	strb.w	ip, [sp, #32]
 800b074:	f001 fdea 	bl	800cc4c <acc_detector_distance_cal_result_bg_noise_array_get>
 800b078:	4649      	mov	r1, r9
 800b07a:	4603      	mov	r3, r0
 800b07c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b07e:	9305      	str	r3, [sp, #20]
 800b080:	f001 fdf4 	bl	800cc6c <acc_detector_distance_cal_result_aggregator_partition_get>
 800b084:	9b04      	ldr	r3, [sp, #16]
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	4621      	mov	r1, r4
 800b08a:	ac08      	add	r4, sp, #32
 800b08c:	9001      	str	r0, [sp, #4]
 800b08e:	9b05      	ldr	r3, [sp, #20]
 800b090:	9402      	str	r4, [sp, #8]
 800b092:	465a      	mov	r2, fp
 800b094:	4650      	mov	r0, sl
 800b096:	f000 fc81 	bl	800b99c <acc_detector_distance_aggregator_calibrate>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f43f af7a 	beq.w	800af94 <acc_detector_distance_calibrate+0x24>
 800b0a0:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 800b0a4:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800b0a8:	442b      	add	r3, r5
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b0b0:	f7ff fd84 	bl	800abbc <decide_next_measurement_type>
 800b0b4:	182b      	adds	r3, r5, r0
 800b0b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0ba:	b90b      	cbnz	r3, 800b0c0 <acc_detector_distance_calibrate+0x150>
 800b0bc:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
 800b0c0:	f895 3041 	ldrb.w	r3, [r5, #65]	@ 0x41
 800b0c4:	b123      	cbz	r3, 800b0d0 <acc_detector_distance_calibrate+0x160>
 800b0c6:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f040 8122 	bne.w	800b314 <acc_detector_distance_calibrate+0x3a4>
 800b0d0:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f040 8109 	bne.w	800b2ec <acc_detector_distance_calibrate+0x37c>
 800b0da:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800b0dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	463a      	mov	r2, r7
 800b0e2:	4643      	mov	r3, r8
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f7ff fd1d 	bl	800ab24 <prepare_and_measure>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d18b      	bne.n	800b006 <acc_detector_distance_calibrate+0x96>
 800b0ee:	e750      	b.n	800af92 <acc_detector_distance_calibrate+0x22>
 800b0f0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b0f2:	4641      	mov	r1, r8
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f004 fb59 	bl	800f7ac <acc_sensor_read>
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	f43f af49 	beq.w	800af92 <acc_detector_distance_calibrate+0x22>
 800b100:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 800b102:	aa09      	add	r2, sp, #36	@ 0x24
 800b104:	4641      	mov	r1, r8
 800b106:	f004 f929 	bl	800f35c <acc_processing_execute>
 800b10a:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 800b10e:	b11b      	cbz	r3, 800b118 <acc_detector_distance_calibrate+0x1a8>
 800b110:	a809      	add	r0, sp, #36	@ 0x24
 800b112:	f105 01a4 	add.w	r1, r5, #164	@ 0xa4
 800b116:	4798      	blx	r3
 800b118:	f105 0418 	add.w	r4, r5, #24
 800b11c:	4621      	mov	r1, r4
 800b11e:	2201      	movs	r2, #1
 800b120:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b122:	f001 fd93 	bl	800cc4c <acc_detector_distance_cal_result_bg_noise_array_get>
 800b126:	68ea      	ldr	r2, [r5, #12]
 800b128:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800b12a:	4603      	mov	r3, r0
 800b12c:	4442      	add	r2, r8
 800b12e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b130:	f001 feb6 	bl	800cea0 <acc_detector_distance_calibration_noise_process>
 800b134:	2800      	cmp	r0, #0
 800b136:	f43f af2c 	beq.w	800af92 <acc_detector_distance_calibrate+0x22>
 800b13a:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 800b13c:	f000 fc80 	bl	800ba40 <acc_detector_distance_aggregator_calibration_needed>
 800b140:	2800      	cmp	r0, #0
 800b142:	f000 80da 	beq.w	800b2fa <acc_detector_distance_calibrate+0x38a>
 800b146:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f000 80d3 	beq.w	800b2f6 <acc_detector_distance_calibrate+0x386>
 800b150:	2b01      	cmp	r3, #1
 800b152:	f040 80f0 	bne.w	800b336 <acc_detector_distance_calibrate+0x3c6>
 800b156:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800b158:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	463a      	mov	r2, r7
 800b15e:	4643      	mov	r3, r8
 800b160:	4630      	mov	r0, r6
 800b162:	f7ff fcdf 	bl	800ab24 <prepare_and_measure>
 800b166:	2800      	cmp	r0, #0
 800b168:	f43f af13 	beq.w	800af92 <acc_detector_distance_calibrate+0x22>
 800b16c:	2304      	movs	r3, #4
 800b16e:	752b      	strb	r3, [r5, #20]
 800b170:	e74d      	b.n	800b00e <acc_detector_distance_calibrate+0x9e>
 800b172:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b174:	4641      	mov	r1, r8
 800b176:	4630      	mov	r0, r6
 800b178:	f004 fb18 	bl	800f7ac <acc_sensor_read>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	f43f af08 	beq.w	800af92 <acc_detector_distance_calibrate+0x22>
 800b182:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
 800b184:	aa09      	add	r2, sp, #36	@ 0x24
 800b186:	4641      	mov	r1, r8
 800b188:	f004 f8e8 	bl	800f35c <acc_processing_execute>
 800b18c:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 800b190:	b11b      	cbz	r3, 800b19a <acc_detector_distance_calibrate+0x22a>
 800b192:	a809      	add	r0, sp, #36	@ 0x24
 800b194:	f105 0188 	add.w	r1, r5, #136	@ 0x88
 800b198:	4798      	blx	r3
 800b19a:	f105 0418 	add.w	r4, r5, #24
 800b19e:	4621      	mov	r1, r4
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b1a4:	f001 fd52 	bl	800cc4c <acc_detector_distance_cal_result_bg_noise_array_get>
 800b1a8:	68ea      	ldr	r2, [r5, #12]
 800b1aa:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	4442      	add	r2, r8
 800b1b0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b1b2:	f001 fe75 	bl	800cea0 <acc_detector_distance_calibration_noise_process>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f43f aeeb 	beq.w	800af92 <acc_detector_distance_calibrate+0x22>
 800b1bc:	4628      	mov	r0, r5
 800b1be:	f7ff fceb 	bl	800ab98 <detector_has_far_range>
 800b1c2:	4681      	mov	r9, r0
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	f040 8083 	bne.w	800b2d0 <acc_detector_distance_calibrate+0x360>
 800b1ca:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 800b1cc:	f000 fc38 	bl	800ba40 <acc_detector_distance_aggregator_calibration_needed>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	f000 809c 	beq.w	800b30e <acc_detector_distance_calibrate+0x39e>
 800b1d6:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f000 808b 	beq.w	800b2f6 <acc_detector_distance_calibrate+0x386>
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d0b8      	beq.n	800b156 <acc_detector_distance_calibrate+0x1e6>
 800b1e4:	4649      	mov	r1, r9
 800b1e6:	e7b7      	b.n	800b158 <acc_detector_distance_calibrate+0x1e8>
 800b1e8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b1ea:	4641      	mov	r1, r8
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	f004 fadd 	bl	800f7ac <acc_sensor_read>
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	f43f aecd 	beq.w	800af92 <acc_detector_distance_calibrate+0x22>
 800b1f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1fa:	aa09      	add	r2, sp, #36	@ 0x24
 800b1fc:	4641      	mov	r1, r8
 800b1fe:	f004 f8ad 	bl	800f35c <acc_processing_execute>
 800b202:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 800b206:	b11b      	cbz	r3, 800b210 <acc_detector_distance_calibrate+0x2a0>
 800b208:	a809      	add	r0, sp, #36	@ 0x24
 800b20a:	f105 016c 	add.w	r1, r5, #108	@ 0x6c
 800b20e:	4798      	blx	r3
 800b210:	f105 0938 	add.w	r9, r5, #56	@ 0x38
 800b214:	4649      	mov	r1, r9
 800b216:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b218:	f001 fd24 	bl	800cc64 <acc_detector_distance_cal_result_loopback_peak_distance_get>
 800b21c:	68e9      	ldr	r1, [r5, #12]
 800b21e:	4604      	mov	r4, r0
 800b220:	4441      	add	r1, r8
 800b222:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b224:	f001 fd5a 	bl	800ccdc <acc_detector_distance_calibration_offset_process>
 800b228:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b22a:	ed84 0a00 	vstr	s0, [r4]
 800b22e:	4649      	mov	r1, r9
 800b230:	f001 fd02 	bl	800cc38 <acc_detector_distance_cal_result_dynamic_crc_set>
 800b234:	4628      	mov	r0, r5
 800b236:	f7ff fc9d 	bl	800ab74 <detector_has_close_range>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d042      	beq.n	800b2c4 <acc_detector_distance_calibrate+0x354>
 800b23e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800b244:	4643      	mov	r3, r8
 800b246:	463a      	mov	r2, r7
 800b248:	4630      	mov	r0, r6
 800b24a:	f7ff fc6b 	bl	800ab24 <prepare_and_measure>
 800b24e:	2800      	cmp	r0, #0
 800b250:	f43f ae9f 	beq.w	800af92 <acc_detector_distance_calibrate+0x22>
 800b254:	2302      	movs	r3, #2
 800b256:	752b      	strb	r3, [r5, #20]
 800b258:	e6d9      	b.n	800b00e <acc_detector_distance_calibrate+0x9e>
 800b25a:	bf00      	nop
 800b25c:	acc0d130 	.word	0xacc0d130
 800b260:	200008cc 	.word	0x200008cc
 800b264:	08019bd8 	.word	0x08019bd8
 800b268:	08019b70 	.word	0x08019b70
 800b26c:	08019bc0 	.word	0x08019bc0
 800b270:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 800b276:	4643      	mov	r3, r8
 800b278:	463a      	mov	r2, r7
 800b27a:	4630      	mov	r0, r6
 800b27c:	f7ff fc52 	bl	800ab24 <prepare_and_measure>
 800b280:	2800      	cmp	r0, #0
 800b282:	f43f ae86 	beq.w	800af92 <acc_detector_distance_calibrate+0x22>
 800b286:	2301      	movs	r3, #1
 800b288:	752b      	strb	r3, [r5, #20]
 800b28a:	e6c0      	b.n	800b00e <acc_detector_distance_calibrate+0x9e>
 800b28c:	f105 0418 	add.w	r4, r5, #24
 800b290:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b292:	4621      	mov	r1, r4
 800b294:	f001 fcc8 	bl	800cc28 <acc_detector_distance_cal_result_static_crc_set>
 800b298:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b29a:	2001      	movs	r0, #1
 800b29c:	7018      	strb	r0, [r3, #0]
 800b29e:	e679      	b.n	800af94 <acc_detector_distance_calibrate+0x24>
 800b2a0:	4b2a      	ldr	r3, [pc, #168]	@ (800b34c <acc_detector_distance_calibrate+0x3dc>)
 800b2a2:	4a2b      	ldr	r2, [pc, #172]	@ (800b350 <acc_detector_distance_calibrate+0x3e0>)
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	492b      	ldr	r1, [pc, #172]	@ (800b354 <acc_detector_distance_calibrate+0x3e4>)
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	4798      	blx	r3
 800b2ac:	e6ab      	b.n	800b006 <acc_detector_distance_calibrate+0x96>
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	bf0c      	ite	eq
 800b2b2:	6ea8      	ldreq	r0, [r5, #104]	@ 0x68
 800b2b4:	2000      	movne	r0, #0
 800b2b6:	e6bb      	b.n	800b030 <acc_detector_distance_calibrate+0xc0>
 800b2b8:	2a01      	cmp	r2, #1
 800b2ba:	bf0c      	ite	eq
 800b2bc:	f105 01dc 	addeq.w	r1, r5, #220	@ 0xdc
 800b2c0:	2100      	movne	r1, #0
 800b2c2:	e6c3      	b.n	800b04c <acc_detector_distance_calibrate+0xdc>
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	f7ff fc67 	bl	800ab98 <detector_has_far_range>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	f43f ae61 	beq.w	800af92 <acc_detector_distance_calibrate+0x22>
 800b2d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b2d6:	4643      	mov	r3, r8
 800b2d8:	463a      	mov	r2, r7
 800b2da:	4630      	mov	r0, r6
 800b2dc:	f7ff fc22 	bl	800ab24 <prepare_and_measure>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	f43f ae56 	beq.w	800af92 <acc_detector_distance_calibrate+0x22>
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	752b      	strb	r3, [r5, #20]
 800b2ea:	e690      	b.n	800b00e <acc_detector_distance_calibrate+0x9e>
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	bf0c      	ite	eq
 800b2f0:	6d69      	ldreq	r1, [r5, #84]	@ 0x54
 800b2f2:	2100      	movne	r1, #0
 800b2f4:	e6f2      	b.n	800b0dc <acc_detector_distance_calibrate+0x16c>
 800b2f6:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800b2f8:	e72e      	b.n	800b158 <acc_detector_distance_calibrate+0x1e8>
 800b2fa:	2305      	movs	r3, #5
 800b2fc:	752b      	strb	r3, [r5, #20]
 800b2fe:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b300:	4621      	mov	r1, r4
 800b302:	f001 fcab 	bl	800cc5c <acc_detector_distance_cal_result_reference_temperature_get>
 800b306:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800b30a:	8003      	strh	r3, [r0, #0]
 800b30c:	e67b      	b.n	800b006 <acc_detector_distance_calibrate+0x96>
 800b30e:	2305      	movs	r3, #5
 800b310:	752b      	strb	r3, [r5, #20]
 800b312:	e7bd      	b.n	800b290 <acc_detector_distance_calibrate+0x320>
 800b314:	2305      	movs	r3, #5
 800b316:	752b      	strb	r3, [r5, #20]
 800b318:	4628      	mov	r0, r5
 800b31a:	f7ff fc2b 	bl	800ab74 <detector_has_close_range>
 800b31e:	f080 0001 	eor.w	r0, r0, #1
 800b322:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
 800b326:	4649      	mov	r1, r9
 800b328:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800b32a:	f001 fc97 	bl	800cc5c <acc_detector_distance_cal_result_reference_temperature_get>
 800b32e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800b332:	8003      	strh	r3, [r0, #0]
 800b334:	e667      	b.n	800b006 <acc_detector_distance_calibrate+0x96>
 800b336:	2100      	movs	r1, #0
 800b338:	e70e      	b.n	800b158 <acc_detector_distance_calibrate+0x1e8>
 800b33a:	4b04      	ldr	r3, [pc, #16]	@ (800b34c <acc_detector_distance_calibrate+0x3dc>)
 800b33c:	4a06      	ldr	r2, [pc, #24]	@ (800b358 <acc_detector_distance_calibrate+0x3e8>)
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	4904      	ldr	r1, [pc, #16]	@ (800b354 <acc_detector_distance_calibrate+0x3e4>)
 800b342:	2000      	movs	r0, #0
 800b344:	4798      	blx	r3
 800b346:	2000      	movs	r0, #0
 800b348:	e624      	b.n	800af94 <acc_detector_distance_calibrate+0x24>
 800b34a:	bf00      	nop
 800b34c:	200008cc 	.word	0x200008cc
 800b350:	08019bfc 	.word	0x08019bfc
 800b354:	08019b70 	.word	0x08019b70
 800b358:	08019c3c 	.word	0x08019c3c

0800b35c <acc_detector_distance_update_calibration>:
 800b35c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b360:	b089      	sub	sp, #36	@ 0x24
 800b362:	2400      	movs	r4, #0
 800b364:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 800b366:	9407      	str	r4, [sp, #28]
 800b368:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800b36c:	7034      	strb	r4, [r6, #0]
 800b36e:	b131      	cbz	r1, 800b37e <acc_detector_distance_update_calibration+0x22>
 800b370:	4691      	mov	r9, r2
 800b372:	461f      	mov	r7, r3
 800b374:	680a      	ldr	r2, [r1, #0]
 800b376:	4b3d      	ldr	r3, [pc, #244]	@ (800b46c <acc_detector_distance_update_calibration+0x110>)
 800b378:	429a      	cmp	r2, r3
 800b37a:	460d      	mov	r5, r1
 800b37c:	d006      	beq.n	800b38c <acc_detector_distance_update_calibration+0x30>
 800b37e:	f7ff fbed 	bl	800ab5c <validate_distance_handle.part.0>
 800b382:	2400      	movs	r4, #0
 800b384:	4620      	mov	r0, r4
 800b386:	b009      	add	sp, #36	@ 0x24
 800b388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b38c:	aa04      	add	r2, sp, #16
 800b38e:	4680      	mov	r8, r0
 800b390:	a903      	add	r1, sp, #12
 800b392:	4628      	mov	r0, r5
 800b394:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800b398:	f7ff fc4a 	bl	800ac30 <acc_detector_distance_get_sizes>
 800b39c:	9b03      	ldr	r3, [sp, #12]
 800b39e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d909      	bls.n	800b3b8 <acc_detector_distance_update_calibration+0x5c>
 800b3a4:	4b32      	ldr	r3, [pc, #200]	@ (800b470 <acc_detector_distance_update_calibration+0x114>)
 800b3a6:	4a33      	ldr	r2, [pc, #204]	@ (800b474 <acc_detector_distance_update_calibration+0x118>)
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	4933      	ldr	r1, [pc, #204]	@ (800b478 <acc_detector_distance_update_calibration+0x11c>)
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	4798      	blx	r3
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	b009      	add	sp, #36	@ 0x24
 800b3b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3b8:	7d2b      	ldrb	r3, [r5, #20]
 800b3ba:	2b05      	cmp	r3, #5
 800b3bc:	d84f      	bhi.n	800b45e <acc_detector_distance_update_calibration+0x102>
 800b3be:	e8df f003 	tbb	[pc, r3]
 800b3c2:	1b0e      	.short	0x1b0e
 800b3c4:	0e030303 	.word	0x0e030303
 800b3c8:	f006 f876 	bl	80114b8 <acc_rss_integration_log_level>
 800b3cc:	b1d8      	cbz	r0, 800b406 <acc_detector_distance_update_calibration+0xaa>
 800b3ce:	4b28      	ldr	r3, [pc, #160]	@ (800b470 <acc_detector_distance_update_calibration+0x114>)
 800b3d0:	4a2a      	ldr	r2, [pc, #168]	@ (800b47c <acc_detector_distance_update_calibration+0x120>)
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	4928      	ldr	r1, [pc, #160]	@ (800b478 <acc_detector_distance_update_calibration+0x11c>)
 800b3d6:	2001      	movs	r0, #1
 800b3d8:	4798      	blx	r3
 800b3da:	2400      	movs	r4, #0
 800b3dc:	e7d2      	b.n	800b384 <acc_detector_distance_update_calibration+0x28>
 800b3de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 800b3e4:	463b      	mov	r3, r7
 800b3e6:	464a      	mov	r2, r9
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	f7ff fb9b 	bl	800ab24 <prepare_and_measure>
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	b148      	cbz	r0, 800b406 <acc_detector_distance_update_calibration+0xaa>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	752b      	strb	r3, [r5, #20]
 800b3f6:	e7c5      	b.n	800b384 <acc_detector_distance_update_calibration+0x28>
 800b3f8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	4639      	mov	r1, r7
 800b3fe:	f004 f9d5 	bl	800f7ac <acc_sensor_read>
 800b402:	4604      	mov	r4, r0
 800b404:	b920      	cbnz	r0, 800b410 <acc_detector_distance_update_calibration+0xb4>
 800b406:	2400      	movs	r4, #0
 800b408:	4620      	mov	r0, r4
 800b40a:	b009      	add	sp, #36	@ 0x24
 800b40c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b412:	aa05      	add	r2, sp, #20
 800b414:	4639      	mov	r1, r7
 800b416:	f003 ffa1 	bl	800f35c <acc_processing_execute>
 800b41a:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 800b41e:	b11b      	cbz	r3, 800b428 <acc_detector_distance_update_calibration+0xcc>
 800b420:	a805      	add	r0, sp, #20
 800b422:	f105 016c 	add.w	r1, r5, #108	@ 0x6c
 800b426:	4798      	blx	r3
 800b428:	f105 0838 	add.w	r8, r5, #56	@ 0x38
 800b42c:	4641      	mov	r1, r8
 800b42e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b430:	f001 fc18 	bl	800cc64 <acc_detector_distance_cal_result_loopback_peak_distance_get>
 800b434:	68e9      	ldr	r1, [r5, #12]
 800b436:	4603      	mov	r3, r0
 800b438:	4439      	add	r1, r7
 800b43a:	9807      	ldr	r0, [sp, #28]
 800b43c:	461f      	mov	r7, r3
 800b43e:	f001 fc4d 	bl	800ccdc <acc_detector_distance_calibration_offset_process>
 800b442:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b444:	ed87 0a00 	vstr	s0, [r7]
 800b448:	4641      	mov	r1, r8
 800b44a:	f001 fbf5 	bl	800cc38 <acc_detector_distance_cal_result_dynamic_crc_set>
 800b44e:	2205      	movs	r2, #5
 800b450:	2301      	movs	r3, #1
 800b452:	4620      	mov	r0, r4
 800b454:	752a      	strb	r2, [r5, #20]
 800b456:	7033      	strb	r3, [r6, #0]
 800b458:	b009      	add	sp, #36	@ 0x24
 800b45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b45e:	4b04      	ldr	r3, [pc, #16]	@ (800b470 <acc_detector_distance_update_calibration+0x114>)
 800b460:	4a07      	ldr	r2, [pc, #28]	@ (800b480 <acc_detector_distance_update_calibration+0x124>)
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	4904      	ldr	r1, [pc, #16]	@ (800b478 <acc_detector_distance_update_calibration+0x11c>)
 800b466:	2000      	movs	r0, #0
 800b468:	4798      	blx	r3
 800b46a:	e7cc      	b.n	800b406 <acc_detector_distance_update_calibration+0xaa>
 800b46c:	acc0d130 	.word	0xacc0d130
 800b470:	200008cc 	.word	0x200008cc
 800b474:	08019bc0 	.word	0x08019bc0
 800b478:	08019b70 	.word	0x08019b70
 800b47c:	08019c5c 	.word	0x08019c5c
 800b480:	08019c3c 	.word	0x08019c3c

0800b484 <acc_detector_distance_prepare>:
 800b484:	b570      	push	{r4, r5, r6, lr}
 800b486:	4614      	mov	r4, r2
 800b488:	461a      	mov	r2, r3
 800b48a:	e9dd 3504 	ldrd	r3, r5, [sp, #16]
 800b48e:	b118      	cbz	r0, 800b498 <acc_detector_distance_prepare+0x14>
 800b490:	490e      	ldr	r1, [pc, #56]	@ (800b4cc <acc_detector_distance_prepare+0x48>)
 800b492:	6806      	ldr	r6, [r0, #0]
 800b494:	428e      	cmp	r6, r1
 800b496:	d003      	beq.n	800b4a0 <acc_detector_distance_prepare+0x1c>
 800b498:	f7ff fb60 	bl	800ab5c <validate_distance_handle.part.0>
 800b49c:	2000      	movs	r0, #0
 800b49e:	bd70      	pop	{r4, r5, r6, pc}
 800b4a0:	f890 1040 	ldrb.w	r1, [r0, #64]	@ 0x40
 800b4a4:	b151      	cbz	r1, 800b4bc <acc_detector_distance_prepare+0x38>
 800b4a6:	2901      	cmp	r1, #1
 800b4a8:	bf08      	it	eq
 800b4aa:	6d41      	ldreq	r1, [r0, #84]	@ 0x54
 800b4ac:	9504      	str	r5, [sp, #16]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	bf18      	it	ne
 800b4b2:	2100      	movne	r1, #0
 800b4b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b4b8:	f004 b8fa 	b.w	800f6b0 <acc_sensor_prepare>
 800b4bc:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800b4be:	9504      	str	r5, [sp, #16]
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b4c6:	f004 b8f3 	b.w	800f6b0 <acc_sensor_prepare>
 800b4ca:	bf00      	nop
 800b4cc:	acc0d130 	.word	0xacc0d130

0800b4d0 <acc_detector_distance_process>:
 800b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d4:	b0b7      	sub	sp, #220	@ 0xdc
 800b4d6:	4698      	mov	r8, r3
 800b4d8:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 800b4da:	2500      	movs	r5, #0
 800b4dc:	701d      	strb	r5, [r3, #0]
 800b4de:	b128      	cbz	r0, 800b4ec <acc_detector_distance_process+0x1c>
 800b4e0:	4b87      	ldr	r3, [pc, #540]	@ (800b700 <acc_detector_distance_process+0x230>)
 800b4e2:	4616      	mov	r6, r2
 800b4e4:	6802      	ldr	r2, [r0, #0]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	d006      	beq.n	800b4fa <acc_detector_distance_process+0x2a>
 800b4ec:	f7ff fb36 	bl	800ab5c <validate_distance_handle.part.0>
 800b4f0:	2500      	movs	r5, #0
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	b037      	add	sp, #220	@ 0xdc
 800b4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fa:	f100 0a18 	add.w	sl, r0, #24
 800b4fe:	460f      	mov	r7, r1
 800b500:	4630      	mov	r0, r6
 800b502:	4651      	mov	r1, sl
 800b504:	f001 fb76 	bl	800cbf4 <acc_detector_distance_cal_result_static_validate>
 800b508:	4605      	mov	r5, r0
 800b50a:	b940      	cbnz	r0, 800b51e <acc_detector_distance_process+0x4e>
 800b50c:	4b7d      	ldr	r3, [pc, #500]	@ (800b704 <acc_detector_distance_process+0x234>)
 800b50e:	4a7e      	ldr	r2, [pc, #504]	@ (800b708 <acc_detector_distance_process+0x238>)
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	497e      	ldr	r1, [pc, #504]	@ (800b70c <acc_detector_distance_process+0x23c>)
 800b514:	4798      	blx	r3
 800b516:	4628      	mov	r0, r5
 800b518:	b037      	add	sp, #220	@ 0xdc
 800b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51e:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 800b522:	4659      	mov	r1, fp
 800b524:	4640      	mov	r0, r8
 800b526:	f001 fb71 	bl	800cc0c <acc_detector_distance_cal_result_dynamic_validate>
 800b52a:	4605      	mov	r5, r0
 800b52c:	b940      	cbnz	r0, 800b540 <acc_detector_distance_process+0x70>
 800b52e:	4b75      	ldr	r3, [pc, #468]	@ (800b704 <acc_detector_distance_process+0x234>)
 800b530:	4a77      	ldr	r2, [pc, #476]	@ (800b710 <acc_detector_distance_process+0x240>)
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	4975      	ldr	r1, [pc, #468]	@ (800b70c <acc_detector_distance_process+0x23c>)
 800b536:	4798      	blx	r3
 800b538:	4628      	mov	r0, r5
 800b53a:	b037      	add	sp, #220	@ 0xdc
 800b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b540:	4620      	mov	r0, r4
 800b542:	f7ff fb3b 	bl	800abbc <decide_next_measurement_type>
 800b546:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800b54a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b54c:	b91b      	cbnz	r3, 800b556 <acc_detector_distance_process+0x86>
 800b54e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b550:	1e5d      	subs	r5, r3, #1
 800b552:	bf18      	it	ne
 800b554:	2501      	movne	r5, #1
 800b556:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 800b558:	f04f 0900 	mov.w	r9, #0
 800b55c:	701d      	strb	r5, [r3, #0]
 800b55e:	22a4      	movs	r2, #164	@ 0xa4
 800b560:	4649      	mov	r1, r9
 800b562:	f8c4 90f8 	str.w	r9, [r4, #248]	@ 0xf8
 800b566:	f8c4 90fc 	str.w	r9, [r4, #252]	@ 0xfc
 800b56a:	f8c4 9100 	str.w	r9, [r4, #256]	@ 0x100
 800b56e:	a80d      	add	r0, sp, #52	@ 0x34
 800b570:	f00a fac6 	bl	8015b00 <memset>
 800b574:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800b578:	f104 02f8 	add.w	r2, r4, #248	@ 0xf8
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d066      	beq.n	800b64e <acc_detector_distance_process+0x17e>
 800b580:	2b01      	cmp	r3, #1
 800b582:	bf0c      	ite	eq
 800b584:	6ea0      	ldreq	r0, [r4, #104]	@ 0x68
 800b586:	4648      	movne	r0, r9
 800b588:	4639      	mov	r1, r7
 800b58a:	9206      	str	r2, [sp, #24]
 800b58c:	f003 fee6 	bl	800f35c <acc_processing_execute>
 800b590:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b592:	9a06      	ldr	r2, [sp, #24]
 800b594:	659a      	str	r2, [r3, #88]	@ 0x58
 800b596:	f894 9040 	ldrb.w	r9, [r4, #64]	@ 0x40
 800b59a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
 800b59e:	f1b9 0f00 	cmp.w	r9, #0
 800b5a2:	d156      	bne.n	800b652 <acc_detector_distance_process+0x182>
 800b5a4:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b5a6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800b5a8:	6601      	str	r1, [r0, #96]	@ 0x60
 800b5aa:	f104 01c0 	add.w	r1, r4, #192	@ 0xc0
 800b5ae:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800b5b0:	b11b      	cbz	r3, 800b5ba <acc_detector_distance_process+0xea>
 800b5b2:	4610      	mov	r0, r2
 800b5b4:	4798      	blx	r3
 800b5b6:	f894 9040 	ldrb.w	r9, [r4, #64]	@ 0x40
 800b5ba:	f894 20fa 	ldrb.w	r2, [r4, #250]	@ 0xfa
 800b5be:	2a00      	cmp	r2, #0
 800b5c0:	f000 8083 	beq.w	800b6ca <acc_detector_distance_process+0x1fa>
 800b5c4:	f9b4 30fc 	ldrsh.w	r3, [r4, #252]	@ 0xfc
 800b5c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5ca:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
 800b5ce:	68e3      	ldr	r3, [r4, #12]
 800b5d0:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
 800b5d4:	18fb      	adds	r3, r7, r3
 800b5d6:	464a      	mov	r2, r9
 800b5d8:	4651      	mov	r1, sl
 800b5da:	9306      	str	r3, [sp, #24]
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 800b5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5e4:	6be7      	ldr	r7, [r4, #60]	@ 0x3c
 800b5e6:	f001 fb31 	bl	800cc4c <acc_detector_distance_cal_result_bg_noise_array_get>
 800b5ea:	4651      	mov	r1, sl
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	9208      	str	r2, [sp, #32]
 800b5f2:	f001 fb33 	bl	800cc5c <acc_detector_distance_cal_result_reference_temperature_get>
 800b5f6:	4684      	mov	ip, r0
 800b5f8:	4659      	mov	r1, fp
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	f9bc 8000 	ldrsh.w	r8, [ip]
 800b600:	f001 fb30 	bl	800cc64 <acc_detector_distance_cal_result_loopback_peak_distance_get>
 800b604:	ed90 0a00 	vldr	s0, [r0]
 800b608:	4651      	mov	r1, sl
 800b60a:	4630      	mov	r0, r6
 800b60c:	ed8d 0a07 	vstr	s0, [sp, #28]
 800b610:	f001 fb2c 	bl	800cc6c <acc_detector_distance_cal_result_aggregator_partition_get>
 800b614:	9a08      	ldr	r2, [sp, #32]
 800b616:	9b06      	ldr	r3, [sp, #24]
 800b618:	9201      	str	r2, [sp, #4]
 800b61a:	aa0d      	add	r2, sp, #52	@ 0x34
 800b61c:	9205      	str	r2, [sp, #20]
 800b61e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b620:	9004      	str	r0, [sp, #16]
 800b622:	e9cd 8302 	strd	r8, r3, [sp, #8]
 800b626:	9200      	str	r2, [sp, #0]
 800b628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b62a:	ed9d 0a07 	vldr	s0, [sp, #28]
 800b62e:	4638      	mov	r0, r7
 800b630:	4649      	mov	r1, r9
 800b632:	462a      	mov	r2, r5
 800b634:	f000 fa26 	bl	800ba84 <acc_detector_distance_aggregator_process>
 800b638:	b9b8      	cbnz	r0, 800b66a <acc_detector_distance_process+0x19a>
 800b63a:	4932      	ldr	r1, [pc, #200]	@ (800b704 <acc_detector_distance_process+0x234>)
 800b63c:	4a35      	ldr	r2, [pc, #212]	@ (800b714 <acc_detector_distance_process+0x244>)
 800b63e:	690c      	ldr	r4, [r1, #16]
 800b640:	4932      	ldr	r1, [pc, #200]	@ (800b70c <acc_detector_distance_process+0x23c>)
 800b642:	4605      	mov	r5, r0
 800b644:	47a0      	blx	r4
 800b646:	4628      	mov	r0, r5
 800b648:	b037      	add	sp, #220	@ 0xdc
 800b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800b650:	e79a      	b.n	800b588 <acc_detector_distance_process+0xb8>
 800b652:	f1b9 0f01 	cmp.w	r9, #1
 800b656:	d148      	bne.n	800b6ea <acc_detector_distance_process+0x21a>
 800b658:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b65a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b65c:	6601      	str	r1, [r0, #96]	@ 0x60
 800b65e:	f104 01dc 	add.w	r1, r4, #220	@ 0xdc
 800b662:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1a4      	bne.n	800b5b2 <acc_detector_distance_process+0xe2>
 800b668:	e7a7      	b.n	800b5ba <acc_detector_distance_process+0xea>
 800b66a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b66c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
 800b670:	2d00      	cmp	r5, #0
 800b672:	d042      	beq.n	800b6fa <acc_detector_distance_process+0x22a>
 800b674:	f8bd 70d4 	ldrh.w	r7, [sp, #212]	@ 0xd4
 800b678:	2f09      	cmp	r7, #9
 800b67a:	d831      	bhi.n	800b6e0 <acc_detector_distance_process+0x210>
 800b67c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b67e:	f883 7050 	strb.w	r7, [r3, #80]	@ 0x50
 800b682:	b167      	cbz	r7, 800b69e <acc_detector_distance_process+0x1ce>
 800b684:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b686:	a90d      	add	r1, sp, #52	@ 0x34
 800b688:	2300      	movs	r3, #0
 800b68a:	f851 0b04 	ldr.w	r0, [r1], #4
 800b68e:	f842 0b04 	str.w	r0, [r2], #4
 800b692:	3301      	adds	r3, #1
 800b694:	b298      	uxth	r0, r3
 800b696:	6cce      	ldr	r6, [r1, #76]	@ 0x4c
 800b698:	6256      	str	r6, [r2, #36]	@ 0x24
 800b69a:	42b8      	cmp	r0, r7
 800b69c:	d3f5      	bcc.n	800b68a <acc_detector_distance_process+0x1ba>
 800b69e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b6a0:	f8b4 1106 	ldrh.w	r1, [r4, #262]	@ 0x106
 800b6a4:	f894 2104 	ldrb.w	r2, [r4, #260]	@ 0x104
 800b6a8:	f89d 30d6 	ldrb.w	r3, [sp, #214]	@ 0xd6
 800b6ac:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
 800b6b0:	f8a0 1054 	strh.w	r1, [r0, #84]	@ 0x54
 800b6b4:	f880 2052 	strb.w	r2, [r0, #82]	@ 0x52
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
 800b6c0:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
 800b6c4:	b037      	add	sp, #220	@ 0xdc
 800b6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ca:	f894 2104 	ldrb.w	r2, [r4, #260]	@ 0x104
 800b6ce:	f9b4 30fc 	ldrsh.w	r3, [r4, #252]	@ 0xfc
 800b6d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6d4:	2a00      	cmp	r2, #0
 800b6d6:	f47f af7a 	bne.w	800b5ce <acc_detector_distance_process+0xfe>
 800b6da:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
 800b6de:	e776      	b.n	800b5ce <acc_detector_distance_process+0xfe>
 800b6e0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b6e2:	270a      	movs	r7, #10
 800b6e4:	f883 7050 	strb.w	r7, [r3, #80]	@ 0x50
 800b6e8:	e7cc      	b.n	800b684 <acc_detector_distance_process+0x1b4>
 800b6ea:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	e9c0 1117 	strd	r1, r1, [r0, #92]	@ 0x5c
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f47f af5d 	bne.w	800b5b2 <acc_detector_distance_process+0xe2>
 800b6f8:	e75f      	b.n	800b5ba <acc_detector_distance_process+0xea>
 800b6fa:	4605      	mov	r5, r0
 800b6fc:	e6f9      	b.n	800b4f2 <acc_detector_distance_process+0x22>
 800b6fe:	bf00      	nop
 800b700:	acc0d130 	.word	0xacc0d130
 800b704:	200008cc 	.word	0x200008cc
 800b708:	08019c80 	.word	0x08019c80
 800b70c:	08019b70 	.word	0x08019b70
 800b710:	08019ca8 	.word	0x08019ca8
 800b714:	08019cd0 	.word	0x08019cd0

0800b718 <acc_detector_distance_config_start_set>:
 800b718:	b118      	cbz	r0, 800b722 <acc_detector_distance_config_start_set+0xa>
 800b71a:	4b04      	ldr	r3, [pc, #16]	@ (800b72c <acc_detector_distance_config_start_set+0x14>)
 800b71c:	6802      	ldr	r2, [r0, #0]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d001      	beq.n	800b726 <acc_detector_distance_config_start_set+0xe>
 800b722:	f7ff ba0f 	b.w	800ab44 <validate_distance_config.part.0>
 800b726:	ed80 0a01 	vstr	s0, [r0, #4]
 800b72a:	4770      	bx	lr
 800b72c:	acc0d150 	.word	0xacc0d150

0800b730 <acc_detector_distance_config_end_set>:
 800b730:	b118      	cbz	r0, 800b73a <acc_detector_distance_config_end_set+0xa>
 800b732:	4b04      	ldr	r3, [pc, #16]	@ (800b744 <acc_detector_distance_config_end_set+0x14>)
 800b734:	6802      	ldr	r2, [r0, #0]
 800b736:	429a      	cmp	r2, r3
 800b738:	d001      	beq.n	800b73e <acc_detector_distance_config_end_set+0xe>
 800b73a:	f7ff ba03 	b.w	800ab44 <validate_distance_config.part.0>
 800b73e:	ed80 0a02 	vstr	s0, [r0, #8]
 800b742:	4770      	bx	lr
 800b744:	acc0d150 	.word	0xacc0d150

0800b748 <acc_detector_distance_config_max_step_length_set>:
 800b748:	b118      	cbz	r0, 800b752 <acc_detector_distance_config_max_step_length_set+0xa>
 800b74a:	4b04      	ldr	r3, [pc, #16]	@ (800b75c <acc_detector_distance_config_max_step_length_set+0x14>)
 800b74c:	6802      	ldr	r2, [r0, #0]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d001      	beq.n	800b756 <acc_detector_distance_config_max_step_length_set+0xe>
 800b752:	f7ff b9f7 	b.w	800ab44 <validate_distance_config.part.0>
 800b756:	8181      	strh	r1, [r0, #12]
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	acc0d150 	.word	0xacc0d150

0800b760 <acc_detector_distance_config_close_range_leakage_cancellation_set>:
 800b760:	b118      	cbz	r0, 800b76a <acc_detector_distance_config_close_range_leakage_cancellation_set+0xa>
 800b762:	4b04      	ldr	r3, [pc, #16]	@ (800b774 <acc_detector_distance_config_close_range_leakage_cancellation_set+0x14>)
 800b764:	6802      	ldr	r2, [r0, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	d001      	beq.n	800b76e <acc_detector_distance_config_close_range_leakage_cancellation_set+0xe>
 800b76a:	f7ff b9eb 	b.w	800ab44 <validate_distance_config.part.0>
 800b76e:	f880 1028 	strb.w	r1, [r0, #40]	@ 0x28
 800b772:	4770      	bx	lr
 800b774:	acc0d150 	.word	0xacc0d150

0800b778 <acc_detector_distance_config_signal_quality_set>:
 800b778:	b118      	cbz	r0, 800b782 <acc_detector_distance_config_signal_quality_set+0xa>
 800b77a:	4b04      	ldr	r3, [pc, #16]	@ (800b78c <acc_detector_distance_config_signal_quality_set+0x14>)
 800b77c:	6802      	ldr	r2, [r0, #0]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d001      	beq.n	800b786 <acc_detector_distance_config_signal_quality_set+0xe>
 800b782:	f7ff b9df 	b.w	800ab44 <validate_distance_config.part.0>
 800b786:	ed80 0a04 	vstr	s0, [r0, #16]
 800b78a:	4770      	bx	lr
 800b78c:	acc0d150 	.word	0xacc0d150

0800b790 <acc_detector_distance_config_max_profile_set>:
 800b790:	b118      	cbz	r0, 800b79a <acc_detector_distance_config_max_profile_set+0xa>
 800b792:	4b04      	ldr	r3, [pc, #16]	@ (800b7a4 <acc_detector_distance_config_max_profile_set+0x14>)
 800b794:	6802      	ldr	r2, [r0, #0]
 800b796:	429a      	cmp	r2, r3
 800b798:	d001      	beq.n	800b79e <acc_detector_distance_config_max_profile_set+0xe>
 800b79a:	f7ff b9d3 	b.w	800ab44 <validate_distance_config.part.0>
 800b79e:	7381      	strb	r1, [r0, #14]
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	acc0d150 	.word	0xacc0d150

0800b7a8 <acc_detector_distance_config_threshold_method_set>:
 800b7a8:	b118      	cbz	r0, 800b7b2 <acc_detector_distance_config_threshold_method_set+0xa>
 800b7aa:	4b04      	ldr	r3, [pc, #16]	@ (800b7bc <acc_detector_distance_config_threshold_method_set+0x14>)
 800b7ac:	6802      	ldr	r2, [r0, #0]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d001      	beq.n	800b7b6 <acc_detector_distance_config_threshold_method_set+0xe>
 800b7b2:	f7ff b9c7 	b.w	800ab44 <validate_distance_config.part.0>
 800b7b6:	7501      	strb	r1, [r0, #20]
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	acc0d150 	.word	0xacc0d150

0800b7c0 <acc_detector_distance_config_peak_sorting_set>:
 800b7c0:	b118      	cbz	r0, 800b7ca <acc_detector_distance_config_peak_sorting_set+0xa>
 800b7c2:	4b04      	ldr	r3, [pc, #16]	@ (800b7d4 <acc_detector_distance_config_peak_sorting_set+0x14>)
 800b7c4:	6802      	ldr	r2, [r0, #0]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d001      	beq.n	800b7ce <acc_detector_distance_config_peak_sorting_set+0xe>
 800b7ca:	f7ff b9bb 	b.w	800ab44 <validate_distance_config.part.0>
 800b7ce:	7541      	strb	r1, [r0, #21]
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	acc0d150 	.word	0xacc0d150

0800b7d8 <acc_detector_distance_config_threshold_sensitivity_set>:
 800b7d8:	b118      	cbz	r0, 800b7e2 <acc_detector_distance_config_threshold_sensitivity_set+0xa>
 800b7da:	4b04      	ldr	r3, [pc, #16]	@ (800b7ec <acc_detector_distance_config_threshold_sensitivity_set+0x14>)
 800b7dc:	6802      	ldr	r2, [r0, #0]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d001      	beq.n	800b7e6 <acc_detector_distance_config_threshold_sensitivity_set+0xe>
 800b7e2:	f7ff b9af 	b.w	800ab44 <validate_distance_config.part.0>
 800b7e6:	ed80 0a09 	vstr	s0, [r0, #36]	@ 0x24
 800b7ea:	4770      	bx	lr
 800b7ec:	acc0d150 	.word	0xacc0d150

0800b7f0 <acc_detector_distance_config_reflector_shape_set>:
 800b7f0:	b118      	cbz	r0, 800b7fa <acc_detector_distance_config_reflector_shape_set+0xa>
 800b7f2:	4b04      	ldr	r3, [pc, #16]	@ (800b804 <acc_detector_distance_config_reflector_shape_set+0x14>)
 800b7f4:	6802      	ldr	r2, [r0, #0]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d001      	beq.n	800b7fe <acc_detector_distance_config_reflector_shape_set+0xe>
 800b7fa:	f7ff b9a3 	b.w	800ab44 <validate_distance_config.part.0>
 800b7fe:	7581      	strb	r1, [r0, #22]
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	acc0d150 	.word	0xacc0d150

0800b808 <validate_aggregator_handle.part.0>:
 800b808:	4b02      	ldr	r3, [pc, #8]	@ (800b814 <validate_aggregator_handle.part.0+0xc>)
 800b80a:	4a03      	ldr	r2, [pc, #12]	@ (800b818 <validate_aggregator_handle.part.0+0x10>)
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	4903      	ldr	r1, [pc, #12]	@ (800b81c <validate_aggregator_handle.part.0+0x14>)
 800b810:	2000      	movs	r0, #0
 800b812:	4718      	bx	r3
 800b814:	200008cc 	.word	0x200008cc
 800b818:	08019cec 	.word	0x08019cec
 800b81c:	08019d08 	.word	0x08019d08

0800b820 <acc_detector_distance_aggregator_get_sizes>:
 800b820:	b510      	push	{r4, lr}
 800b822:	b118      	cbz	r0, 800b82c <acc_detector_distance_aggregator_get_sizes+0xc>
 800b824:	4b07      	ldr	r3, [pc, #28]	@ (800b844 <acc_detector_distance_aggregator_get_sizes+0x24>)
 800b826:	6804      	ldr	r4, [r0, #0]
 800b828:	429c      	cmp	r4, r3
 800b82a:	d003      	beq.n	800b834 <acc_detector_distance_aggregator_get_sizes+0x14>
 800b82c:	f7ff ffec 	bl	800b808 <validate_aggregator_handle.part.0>
 800b830:	2000      	movs	r0, #0
 800b832:	bd10      	pop	{r4, pc}
 800b834:	f8d0 32cc 	ldr.w	r3, [r0, #716]	@ 0x2cc
 800b838:	600b      	str	r3, [r1, #0]
 800b83a:	f8d0 32d0 	ldr.w	r3, [r0, #720]	@ 0x2d0
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	2001      	movs	r0, #1
 800b842:	bd10      	pop	{r4, pc}
 800b844:	acc0d152 	.word	0xacc0d152

0800b848 <acc_detector_distance_aggregator_create>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	b08b      	sub	sp, #44	@ 0x2c
 800b84e:	4605      	mov	r5, r0
 800b850:	468a      	mov	sl, r1
 800b852:	4693      	mov	fp, r2
 800b854:	461c      	mov	r4, r3
 800b856:	4a40      	ldr	r2, [pc, #256]	@ (800b958 <acc_detector_distance_aggregator_create+0x110>)
 800b858:	f8bd 7050 	ldrh.w	r7, [sp, #80]	@ 0x50
 800b85c:	238c      	movs	r3, #140	@ 0x8c
 800b85e:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 800b862:	2001      	movs	r0, #1
 800b864:	f005 fdf8 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 800b868:	4606      	mov	r6, r0
 800b86a:	2800      	cmp	r0, #0
 800b86c:	d06b      	beq.n	800b946 <acc_detector_distance_aggregator_create+0xfe>
 800b86e:	4b3b      	ldr	r3, [pc, #236]	@ (800b95c <acc_detector_distance_aggregator_create+0x114>)
 800b870:	f8a0 7044 	strh.w	r7, [r0, #68]	@ 0x44
 800b874:	7105      	strb	r5, [r0, #4]
 800b876:	6003      	str	r3, [r0, #0]
 800b878:	46b8      	mov	r8, r7
 800b87a:	2f00      	cmp	r7, #0
 800b87c:	d05d      	beq.n	800b93a <acc_detector_distance_aggregator_create+0xf2>
 800b87e:	3f01      	subs	r7, #1
 800b880:	b2ba      	uxth	r2, r7
 800b882:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b886:	2700      	movs	r7, #0
 800b888:	f102 030c 	add.w	r3, r2, #12
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	3414      	adds	r4, #20
 800b890:	46b8      	mov	r8, r7
 800b892:	46b9      	mov	r9, r7
 800b894:	f100 0508 	add.w	r5, r0, #8
 800b898:	9001      	str	r0, [sp, #4]
 800b89a:	f1a4 0e14 	sub.w	lr, r4, #20
 800b89e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b8a2:	f10d 0c14 	add.w	ip, sp, #20
 800b8a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8aa:	f89d 1015 	ldrb.w	r1, [sp, #21]
 800b8ae:	f8de 6000 	ldr.w	r6, [lr]
 800b8b2:	7923      	ldrb	r3, [r4, #4]
 800b8b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b8b8:	2900      	cmp	r1, #0
 800b8ba:	bf0c      	ite	eq
 800b8bc:	4651      	moveq	r1, sl
 800b8be:	4659      	movne	r1, fp
 800b8c0:	4622      	mov	r2, r4
 800b8c2:	a805      	add	r0, sp, #20
 800b8c4:	f8cd 9010 	str.w	r9, [sp, #16]
 800b8c8:	f8cc 6000 	str.w	r6, [ip]
 800b8cc:	f001 fcb0 	bl	800d230 <acc_detector_distance_processor_create>
 800b8d0:	f845 0b04 	str.w	r0, [r5], #4
 800b8d4:	b9c8      	cbnz	r0, 800b90a <acc_detector_distance_aggregator_create+0xc2>
 800b8d6:	9e01      	ldr	r6, [sp, #4]
 800b8d8:	f8b6 3044 	ldrh.w	r3, [r6, #68]	@ 0x44
 800b8dc:	2400      	movs	r4, #0
 800b8de:	6034      	str	r4, [r6, #0]
 800b8e0:	b15b      	cbz	r3, 800b8fa <acc_detector_distance_aggregator_create+0xb2>
 800b8e2:	1ca3      	adds	r3, r4, #2
 800b8e4:	3401      	adds	r4, #1
 800b8e6:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 800b8ea:	f001 fe35 	bl	800d558 <acc_detector_distance_processor_destroy>
 800b8ee:	f8b6 2044 	ldrh.w	r2, [r6, #68]	@ 0x44
 800b8f2:	b2e3      	uxtb	r3, r4
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	461c      	mov	r4, r3
 800b8f8:	d8f3      	bhi.n	800b8e2 <acc_detector_distance_aggregator_create+0x9a>
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	f005 fdc8 	bl	8011490 <acc_rss_integration_mem_free>
 800b900:	2600      	movs	r6, #0
 800b902:	4630      	mov	r0, r6
 800b904:	b00b      	add	sp, #44	@ 0x2c
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90a:	aa04      	add	r2, sp, #16
 800b90c:	a903      	add	r1, sp, #12
 800b90e:	f8c5 8010 	str.w	r8, [r5, #16]
 800b912:	626f      	str	r7, [r5, #36]	@ 0x24
 800b914:	f001 fc6e 	bl	800d1f4 <acc_detector_distance_processor_get_sizes>
 800b918:	4606      	mov	r6, r0
 800b91a:	9803      	ldr	r0, [sp, #12]
 800b91c:	f005 fd0c 	bl	8011338 <acc_detector_utils_align_size_32bit>
 800b920:	4602      	mov	r2, r0
 800b922:	9804      	ldr	r0, [sp, #16]
 800b924:	4490      	add	r8, r2
 800b926:	f005 fd07 	bl	8011338 <acc_detector_utils_align_size_32bit>
 800b92a:	341c      	adds	r4, #28
 800b92c:	4407      	add	r7, r0
 800b92e:	2e00      	cmp	r6, #0
 800b930:	d0d1      	beq.n	800b8d6 <acc_detector_distance_aggregator_create+0x8e>
 800b932:	9b00      	ldr	r3, [sp, #0]
 800b934:	429d      	cmp	r5, r3
 800b936:	d1b0      	bne.n	800b89a <acc_detector_distance_aggregator_create+0x52>
 800b938:	9e01      	ldr	r6, [sp, #4]
 800b93a:	4630      	mov	r0, r6
 800b93c:	e9c6 87b3 	strd	r8, r7, [r6, #716]	@ 0x2cc
 800b940:	b00b      	add	sp, #44	@ 0x2c
 800b942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b946:	4b06      	ldr	r3, [pc, #24]	@ (800b960 <acc_detector_distance_aggregator_create+0x118>)
 800b948:	4a06      	ldr	r2, [pc, #24]	@ (800b964 <acc_detector_distance_aggregator_create+0x11c>)
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	4902      	ldr	r1, [pc, #8]	@ (800b958 <acc_detector_distance_aggregator_create+0x110>)
 800b94e:	4798      	blx	r3
 800b950:	4630      	mov	r0, r6
 800b952:	b00b      	add	sp, #44	@ 0x2c
 800b954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b958:	08019d08 	.word	0x08019d08
 800b95c:	acc0d152 	.word	0xacc0d152
 800b960:	200008cc 	.word	0x200008cc
 800b964:	08019d28 	.word	0x08019d28

0800b968 <acc_detector_distance_aggregator_destroy>:
 800b968:	b1b8      	cbz	r0, 800b99a <acc_detector_distance_aggregator_destroy+0x32>
 800b96a:	b538      	push	{r3, r4, r5, lr}
 800b96c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 800b970:	2400      	movs	r4, #0
 800b972:	4605      	mov	r5, r0
 800b974:	6004      	str	r4, [r0, #0]
 800b976:	b15b      	cbz	r3, 800b990 <acc_detector_distance_aggregator_destroy+0x28>
 800b978:	1ca3      	adds	r3, r4, #2
 800b97a:	3401      	adds	r4, #1
 800b97c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800b980:	f001 fdea 	bl	800d558 <acc_detector_distance_processor_destroy>
 800b984:	f8b5 2044 	ldrh.w	r2, [r5, #68]	@ 0x44
 800b988:	b2e3      	uxtb	r3, r4
 800b98a:	429a      	cmp	r2, r3
 800b98c:	461c      	mov	r4, r3
 800b98e:	d8f3      	bhi.n	800b978 <acc_detector_distance_aggregator_destroy+0x10>
 800b990:	4628      	mov	r0, r5
 800b992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b996:	f005 bd7b 	b.w	8011490 <acc_rss_integration_mem_free>
 800b99a:	4770      	bx	lr

0800b99c <acc_detector_distance_aggregator_calibrate>:
 800b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	4606      	mov	r6, r0
 800b9a2:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
 800b9a6:	b087      	sub	sp, #28
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d045      	beq.n	800ba38 <acc_detector_distance_aggregator_calibrate+0x9c>
 800b9ac:	469a      	mov	sl, r3
 800b9ae:	2400      	movs	r4, #0
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	4688      	mov	r8, r1
 800b9b4:	4691      	mov	r9, r2
 800b9b6:	46a3      	mov	fp, r4
 800b9b8:	9303      	str	r3, [sp, #12]
 800b9ba:	e004      	b.n	800b9c6 <acc_detector_distance_aggregator_calibrate+0x2a>
 800b9bc:	f8b6 2044 	ldrh.w	r2, [r6, #68]	@ 0x44
 800b9c0:	b2a3      	uxth	r3, r4
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d930      	bls.n	800ba28 <acc_detector_distance_aggregator_calibrate+0x8c>
 800b9c6:	b2a5      	uxth	r5, r4
 800b9c8:	1cab      	adds	r3, r5, #2
 800b9ca:	3401      	adds	r4, #1
 800b9cc:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f001 fdc7 	bl	800d564 <acc_detector_distance_processor_calibration_needed>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d0f0      	beq.n	800b9bc <acc_detector_distance_aggregator_calibrate+0x20>
 800b9da:	4638      	mov	r0, r7
 800b9dc:	f002 fa4c 	bl	800de78 <acc_detector_distance_processor_measurement_type_get>
 800b9e0:	4686      	mov	lr, r0
 800b9e2:	45c6      	cmp	lr, r8
 800b9e4:	eb06 0c85 	add.w	ip, r6, r5, lsl #2
 800b9e8:	4652      	mov	r2, sl
 800b9ea:	4649      	mov	r1, r9
 800b9ec:	4638      	mov	r0, r7
 800b9ee:	d1e5      	bne.n	800b9bc <acc_detector_distance_aggregator_calibrate+0x20>
 800b9f0:	f10d 0717 	add.w	r7, sp, #23
 800b9f4:	f8dc 5030 	ldr.w	r5, [ip, #48]	@ 0x30
 800b9f8:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800b9fc:	9701      	str	r7, [sp, #4]
 800b9fe:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800ba00:	f88d b017 	strb.w	fp, [sp, #23]
 800ba04:	443d      	add	r5, r7
 800ba06:	9500      	str	r5, [sp, #0]
 800ba08:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800ba0a:	442b      	add	r3, r5
 800ba0c:	f001 fdc8 	bl	800d5a0 <acc_detector_distance_processor_calibrate>
 800ba10:	b178      	cbz	r0, 800ba32 <acc_detector_distance_aggregator_calibrate+0x96>
 800ba12:	9b03      	ldr	r3, [sp, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d0d1      	beq.n	800b9bc <acc_detector_distance_aggregator_calibrate+0x20>
 800ba18:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800ba1c:	f8b6 2044 	ldrh.w	r2, [r6, #68]	@ 0x44
 800ba20:	9303      	str	r3, [sp, #12]
 800ba22:	b2a3      	uxth	r3, r4
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d8ce      	bhi.n	800b9c6 <acc_detector_distance_aggregator_calibrate+0x2a>
 800ba28:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	9b03      	ldr	r3, [sp, #12]
 800ba2e:	7013      	strb	r3, [r2, #0]
 800ba30:	2001      	movs	r0, #1
 800ba32:	b007      	add	sp, #28
 800ba34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba38:	2301      	movs	r3, #1
 800ba3a:	9303      	str	r3, [sp, #12]
 800ba3c:	e7f4      	b.n	800ba28 <acc_detector_distance_aggregator_calibrate+0x8c>
 800ba3e:	bf00      	nop

0800ba40 <acc_detector_distance_aggregator_calibration_needed>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	b120      	cbz	r0, 800ba4e <acc_detector_distance_aggregator_calibration_needed+0xe>
 800ba44:	4b0e      	ldr	r3, [pc, #56]	@ (800ba80 <acc_detector_distance_aggregator_calibration_needed+0x40>)
 800ba46:	6802      	ldr	r2, [r0, #0]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	4605      	mov	r5, r0
 800ba4c:	d003      	beq.n	800ba56 <acc_detector_distance_aggregator_calibration_needed+0x16>
 800ba4e:	f7ff fedb 	bl	800b808 <validate_aggregator_handle.part.0>
 800ba52:	2000      	movs	r0, #0
 800ba54:	bd38      	pop	{r3, r4, r5, pc}
 800ba56:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d0f9      	beq.n	800ba52 <acc_detector_distance_aggregator_calibration_needed+0x12>
 800ba5e:	2400      	movs	r4, #0
 800ba60:	e003      	b.n	800ba6a <acc_detector_distance_aggregator_calibration_needed+0x2a>
 800ba62:	f8b5 3044 	ldrh.w	r3, [r5, #68]	@ 0x44
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d9f3      	bls.n	800ba52 <acc_detector_distance_aggregator_calibration_needed+0x12>
 800ba6a:	b2a3      	uxth	r3, r4
 800ba6c:	3302      	adds	r3, #2
 800ba6e:	3401      	adds	r4, #1
 800ba70:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800ba74:	f001 fd76 	bl	800d564 <acc_detector_distance_processor_calibration_needed>
 800ba78:	b2a2      	uxth	r2, r4
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d0f1      	beq.n	800ba62 <acc_detector_distance_aggregator_calibration_needed+0x22>
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}
 800ba80:	acc0d152 	.word	0xacc0d152

0800ba84 <acc_detector_distance_aggregator_process>:
 800ba84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba88:	ed2d 8b02 	vpush	{d8}
 800ba8c:	f5ad 7d5b 	sub.w	sp, sp, #876	@ 0x36c
 800ba90:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba92:	f9bd 2398 	ldrsh.w	r2, [sp, #920]	@ 0x398
 800ba96:	9207      	str	r2, [sp, #28]
 800ba98:	f9bd 23a0 	ldrsh.w	r2, [sp, #928]	@ 0x3a0
 800ba9c:	9105      	str	r1, [sp, #20]
 800ba9e:	9208      	str	r2, [sp, #32]
 800baa0:	9306      	str	r3, [sp, #24]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 80c1 	beq.w	800bc2a <acc_detector_distance_aggregator_process+0x1a6>
 800baa8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 800baac:	4605      	mov	r5, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f000 80b0 	beq.w	800bc14 <acc_detector_distance_aggregator_process+0x190>
 800bab4:	f04f 0a00 	mov.w	sl, #0
 800bab8:	eeb0 8a40 	vmov.f32	s16, s0
 800babc:	46d3      	mov	fp, sl
 800babe:	f04f 0901 	mov.w	r9, #1
 800bac2:	e008      	b.n	800bad6 <acc_detector_distance_aggregator_process+0x52>
 800bac4:	f8b5 3044 	ldrh.w	r3, [r5, #68]	@ 0x44
 800bac8:	f10a 0a01 	add.w	sl, sl, #1
 800bacc:	fa1f fb8a 	uxth.w	fp, sl
 800bad0:	455b      	cmp	r3, fp
 800bad2:	f240 809c 	bls.w	800bc0e <acc_detector_distance_aggregator_process+0x18a>
 800bad6:	fa1f f88a 	uxth.w	r8, sl
 800bada:	f108 0302 	add.w	r3, r8, #2
 800bade:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
 800bae2:	4638      	mov	r0, r7
 800bae4:	f002 f9c8 	bl	800de78 <acc_detector_distance_processor_measurement_type_get>
 800bae8:	9b05      	ldr	r3, [sp, #20]
 800baea:	4298      	cmp	r0, r3
 800baec:	d1ea      	bne.n	800bac4 <acc_detector_distance_aggregator_process+0x40>
 800baee:	ae0b      	add	r6, sp, #44	@ 0x2c
 800baf0:	2100      	movs	r1, #0
 800baf2:	2250      	movs	r2, #80	@ 0x50
 800baf4:	6031      	str	r1, [r6, #0]
 800baf6:	60b1      	str	r1, [r6, #8]
 800baf8:	6131      	str	r1, [r6, #16]
 800bafa:	61b1      	str	r1, [r6, #24]
 800bafc:	a812      	add	r0, sp, #72	@ 0x48
 800bafe:	f009 ffff 	bl	8015b00 <memset>
 800bb02:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800bb06:	2100      	movs	r1, #0
 800bb08:	2250      	movs	r2, #80	@ 0x50
 800bb0a:	a826      	add	r0, sp, #152	@ 0x98
 800bb0c:	f009 fff8 	bl	8015b00 <memset>
 800bb10:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800bb14:	2100      	movs	r1, #0
 800bb16:	4648      	mov	r0, r9
 800bb18:	2250      	movs	r2, #80	@ 0x50
 800bb1a:	f009 fff1 	bl	8015b00 <memset>
 800bb1e:	9603      	str	r6, [sp, #12]
 800bb20:	9908      	ldr	r1, [sp, #32]
 800bb22:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 800bb26:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800bb2a:	9100      	str	r1, [sp, #0]
 800bb2c:	99ea      	ldr	r1, [sp, #936]	@ 0x3a8
 800bb2e:	440a      	add	r2, r1
 800bb30:	99e9      	ldr	r1, [sp, #932]	@ 0x3a4
 800bb32:	ac26      	add	r4, sp, #152	@ 0x98
 800bb34:	440b      	add	r3, r1
 800bb36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bb3a:	f04f 0c14 	mov.w	ip, #20
 800bb3e:	60f4      	str	r4, [r6, #12]
 800bb40:	ac12      	add	r4, sp, #72	@ 0x48
 800bb42:	9be7      	ldr	r3, [sp, #924]	@ 0x39c
 800bb44:	f8c6 9014 	str.w	r9, [r6, #20]
 800bb48:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800bb4c:	eeb0 0a48 	vmov.f32	s0, s16
 800bb50:	4638      	mov	r0, r7
 800bb52:	6074      	str	r4, [r6, #4]
 800bb54:	f8a6 c000 	strh.w	ip, [r6]
 800bb58:	f001 fe60 	bl	800d81c <acc_detector_distance_processor_process>
 800bb5c:	8933      	ldrh	r3, [r6, #8]
 800bb5e:	4681      	mov	r9, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d044      	beq.n	800bbee <acc_detector_distance_aggregator_process+0x16a>
 800bb64:	6871      	ldr	r1, [r6, #4]
 800bb66:	68f2      	ldr	r2, [r6, #12]
 800bb68:	6973      	ldr	r3, [r6, #20]
 800bb6a:	6809      	ldr	r1, [r1, #0]
 800bb6c:	f8d2 e000 	ldr.w	lr, [r2]
 800bb70:	f8d3 8000 	ldr.w	r8, [r3]
 800bb74:	b398      	cbz	r0, 800bbde <acc_detector_distance_aggregator_process+0x15a>
 800bb76:	f8b5 c2c8 	ldrh.w	ip, [r5, #712]	@ 0x2c8
 800bb7a:	2400      	movs	r4, #0
 800bb7c:	e029      	b.n	800bbd2 <acc_detector_distance_aggregator_process+0x14e>
 800bb7e:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
 800bb82:	6499      	str	r1, [r3, #72]	@ 0x48
 800bb84:	f8c3 e04c 	str.w	lr, [r3, #76]	@ 0x4c
 800bb88:	f002 f98e 	bl	800dea8 <acc_detector_distance_processor_profile_get>
 800bb8c:	f8b5 82c8 	ldrh.w	r8, [r5, #712]	@ 0x2c8
 800bb90:	f005 faf2 	bl	8011178 <acc_detector_utils_get_fwhm>
 800bb94:	f8b5 c2c8 	ldrh.w	ip, [r5, #712]	@ 0x2c8
 800bb98:	8933      	ldrh	r3, [r6, #8]
 800bb9a:	3401      	adds	r4, #1
 800bb9c:	f10c 0c01 	add.w	ip, ip, #1
 800bba0:	b2a4      	uxth	r4, r4
 800bba2:	eb05 1808 	add.w	r8, r5, r8, lsl #4
 800bba6:	fa1f fc8c 	uxth.w	ip, ip
 800bbaa:	42a3      	cmp	r3, r4
 800bbac:	ed88 0a15 	vstr	s0, [r8, #84]	@ 0x54
 800bbb0:	f8a5 c2c8 	strh.w	ip, [r5, #712]	@ 0x2c8
 800bbb4:	d91b      	bls.n	800bbee <acc_detector_distance_aggregator_process+0x16a>
 800bbb6:	6871      	ldr	r1, [r6, #4]
 800bbb8:	68f2      	ldr	r2, [r6, #12]
 800bbba:	6973      	ldr	r3, [r6, #20]
 800bbbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bbc0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800bbc4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bbc8:	6809      	ldr	r1, [r1, #0]
 800bbca:	f8d2 e000 	ldr.w	lr, [r2]
 800bbce:	f8d3 8000 	ldr.w	r8, [r3]
 800bbd2:	f1bc 0f27 	cmp.w	ip, #39	@ 0x27
 800bbd6:	eb05 130c 	add.w	r3, r5, ip, lsl #4
 800bbda:	4638      	mov	r0, r7
 800bbdc:	d9cf      	bls.n	800bb7e <acc_detector_distance_aggregator_process+0xfa>
 800bbde:	4b38      	ldr	r3, [pc, #224]	@ (800bcc0 <acc_detector_distance_aggregator_process+0x23c>)
 800bbe0:	4a38      	ldr	r2, [pc, #224]	@ (800bcc4 <acc_detector_distance_aggregator_process+0x240>)
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	4938      	ldr	r1, [pc, #224]	@ (800bcc8 <acc_detector_distance_aggregator_process+0x244>)
 800bbe6:	2000      	movs	r0, #0
 800bbe8:	4798      	blx	r3
 800bbea:	f04f 0900 	mov.w	r9, #0
 800bbee:	f1bb 0f00 	cmp.w	fp, #0
 800bbf2:	f47f af67 	bne.w	800bac4 <acc_detector_distance_aggregator_process+0x40>
 800bbf6:	7eb3      	ldrb	r3, [r6, #26]
 800bbf8:	f885 32ca 	strb.w	r3, [r5, #714]	@ 0x2ca
 800bbfc:	f10a 0a01 	add.w	sl, sl, #1
 800bc00:	f8b5 3044 	ldrh.w	r3, [r5, #68]	@ 0x44
 800bc04:	fa1f fb8a 	uxth.w	fp, sl
 800bc08:	455b      	cmp	r3, fp
 800bc0a:	f63f af64 	bhi.w	800bad6 <acc_detector_distance_aggregator_process+0x52>
 800bc0e:	f1b9 0f00 	cmp.w	r9, #0
 800bc12:	d003      	beq.n	800bc1c <acc_detector_distance_aggregator_process+0x198>
 800bc14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc16:	b98b      	cbnz	r3, 800bc3c <acc_detector_distance_aggregator_process+0x1b8>
 800bc18:	f04f 0901 	mov.w	r9, #1
 800bc1c:	4648      	mov	r0, r9
 800bc1e:	f50d 7d5b 	add.w	sp, sp, #876	@ 0x36c
 800bc22:	ecbd 8b02 	vpop	{d8}
 800bc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800bc2e:	4648      	mov	r0, r9
 800bc30:	f50d 7d5b 	add.w	sp, sp, #876	@ 0x36c
 800bc34:	ecbd 8b02 	vpop	{d8}
 800bc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3c:	f8b5 12c8 	ldrh.w	r1, [r5, #712]	@ 0x2c8
 800bc40:	792e      	ldrb	r6, [r5, #4]
 800bc42:	ac26      	add	r4, sp, #152	@ 0x98
 800bc44:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2700      	movs	r7, #0
 800bc4c:	e9cd 0105 	strd	r0, r1, [sp, #20]
 800bc50:	f000 fcc6 	bl	800c5e0 <acc_detector_distance_alg_peak_inplace_sort>
 800bc54:	9400      	str	r4, [sp, #0]
 800bc56:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800bc5a:	aa3a      	add	r2, sp, #232	@ 0xe8
 800bc5c:	2328      	movs	r3, #40	@ 0x28
 800bc5e:	8027      	strh	r7, [r4, #0]
 800bc60:	f000 fd12 	bl	800c688 <acc_detector_distance_alg_merge_peaks>
 800bc64:	2e01      	cmp	r6, #1
 800bc66:	d025      	beq.n	800bcb4 <acc_detector_distance_aggregator_process+0x230>
 800bc68:	8821      	ldrh	r1, [r4, #0]
 800bc6a:	9beb      	ldr	r3, [sp, #940]	@ 0x3ac
 800bc6c:	f8a3 10a0 	strh.w	r1, [r3, #160]	@ 0xa0
 800bc70:	b179      	cbz	r1, 800bc92 <acc_detector_distance_aggregator_process+0x20e>
 800bc72:	9beb      	ldr	r3, [sp, #940]	@ 0x3ac
 800bc74:	3901      	subs	r1, #1
 800bc76:	b289      	uxth	r1, r1
 800bc78:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800bc7c:	aa3a      	add	r2, sp, #232	@ 0xe8
 800bc7e:	6810      	ldr	r0, [r2, #0]
 800bc80:	6018      	str	r0, [r3, #0]
 800bc82:	4618      	mov	r0, r3
 800bc84:	3304      	adds	r3, #4
 800bc86:	6894      	ldr	r4, [r2, #8]
 800bc88:	64dc      	str	r4, [r3, #76]	@ 0x4c
 800bc8a:	4281      	cmp	r1, r0
 800bc8c:	f102 0210 	add.w	r2, r2, #16
 800bc90:	d1f5      	bne.n	800bc7e <acc_detector_distance_aggregator_process+0x1fa>
 800bc92:	9aeb      	ldr	r2, [sp, #940]	@ 0x3ac
 800bc94:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 800bc98:	f895 32ca 	ldrb.w	r3, [r5, #714]	@ 0x2ca
 800bc9c:	f882 30a2 	strb.w	r3, [r2, #162]	@ 0xa2
 800bca0:	4648      	mov	r0, r9
 800bca2:	2300      	movs	r3, #0
 800bca4:	f8a5 32c8 	strh.w	r3, [r5, #712]	@ 0x2c8
 800bca8:	f50d 7d5b 	add.w	sp, sp, #876	@ 0x36c
 800bcac:	ecbd 8b02 	vpop	{d8}
 800bcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb4:	8821      	ldrh	r1, [r4, #0]
 800bcb6:	4632      	mov	r2, r6
 800bcb8:	a83a      	add	r0, sp, #232	@ 0xe8
 800bcba:	f000 fc91 	bl	800c5e0 <acc_detector_distance_alg_peak_inplace_sort>
 800bcbe:	e7d3      	b.n	800bc68 <acc_detector_distance_aggregator_process+0x1e4>
 800bcc0:	200008cc 	.word	0x200008cc
 800bcc4:	08019d48 	.word	0x08019d48
 800bcc8:	08019d08 	.word	0x08019d08

0800bccc <reverse>:
 800bccc:	ea5f 0c51 	movs.w	ip, r1, lsr #1
 800bcd0:	d01d      	beq.n	800bd0e <reverse+0x42>
 800bcd2:	b4f0      	push	{r4, r5, r6, r7}
 800bcd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bcd8:	fa1f f38c 	uxth.w	r3, ip
 800bcdc:	3901      	subs	r1, #1
 800bcde:	f100 0c08 	add.w	ip, r0, #8
 800bce2:	eb0c 0cc3 	add.w	ip, ip, r3, lsl #3
 800bce6:	b28a      	uxth	r2, r1
 800bce8:	4603      	mov	r3, r0
 800bcea:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800bcee:	681d      	ldr	r5, [r3, #0]
 800bcf0:	680f      	ldr	r7, [r1, #0]
 800bcf2:	684e      	ldr	r6, [r1, #4]
 800bcf4:	685c      	ldr	r4, [r3, #4]
 800bcf6:	f843 7b08 	str.w	r7, [r3], #8
 800bcfa:	3a01      	subs	r2, #1
 800bcfc:	4563      	cmp	r3, ip
 800bcfe:	f843 6c04 	str.w	r6, [r3, #-4]
 800bd02:	b292      	uxth	r2, r2
 800bd04:	600d      	str	r5, [r1, #0]
 800bd06:	604c      	str	r4, [r1, #4]
 800bd08:	d1ef      	bne.n	800bcea <reverse+0x1e>
 800bd0a:	bcf0      	pop	{r4, r5, r6, r7}
 800bd0c:	4770      	bx	lr
 800bd0e:	4770      	bx	lr

0800bd10 <merge_peak_range.part.0>:
 800bd10:	b410      	push	{r4}
 800bd12:	2400      	movs	r4, #0
 800bd14:	ed92 7a03 	vldr	s14, [r2, #12]
 800bd18:	601c      	str	r4, [r3, #0]
 800bd1a:	605c      	str	r4, [r3, #4]
 800bd1c:	609c      	str	r4, [r3, #8]
 800bd1e:	60dc      	str	r4, [r3, #12]
 800bd20:	2900      	cmp	r1, #0
 800bd22:	d042      	beq.n	800bdaa <merge_peak_range.part.0+0x9a>
 800bd24:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800bdb8 <merge_peak_range.part.0+0xa8>
 800bd28:	1e4c      	subs	r4, r1, #1
 800bd2a:	fa10 f484 	uxtah	r4, r0, r4
 800bd2e:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800bd32:	eef0 6a67 	vmov.f32	s13, s15
 800bd36:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800bd3a:	eeb0 6a67 	vmov.f32	s12, s15
 800bd3e:	e000      	b.n	800bd42 <merge_peak_range.part.0+0x32>
 800bd40:	4602      	mov	r2, r0
 800bd42:	edd2 5a00 	vldr	s11, [r2]
 800bd46:	ee36 6a25 	vadd.f32	s12, s12, s11
 800bd4a:	f102 0010 	add.w	r0, r2, #16
 800bd4e:	ed83 6a00 	vstr	s12, [r3]
 800bd52:	edd2 5a01 	vldr	s11, [r2, #4]
 800bd56:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800bd5a:	edc3 6a01 	vstr	s13, [r3, #4]
 800bd5e:	edd2 5a02 	vldr	s11, [r2, #8]
 800bd62:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800bd66:	edc3 7a02 	vstr	s15, [r3, #8]
 800bd6a:	edd2 5a03 	vldr	s11, [r2, #12]
 800bd6e:	eef4 5a47 	vcmp.f32	s11, s14
 800bd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd76:	bfc8      	it	gt
 800bd78:	eeb0 7a65 	vmovgt.f32	s14, s11
 800bd7c:	4294      	cmp	r4, r2
 800bd7e:	d1df      	bne.n	800bd40 <merge_peak_range.part.0+0x30>
 800bd80:	ee05 1a90 	vmov	s11, r1
 800bd84:	eef8 5a65 	vcvt.f32.u32	s11, s11
 800bd88:	ed83 7a03 	vstr	s14, [r3, #12]
 800bd8c:	ee86 5a25 	vdiv.f32	s10, s12, s11
 800bd90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd94:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 800bd98:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bd9c:	ed83 5a00 	vstr	s10, [r3]
 800bda0:	ed83 6a01 	vstr	s12, [r3, #4]
 800bda4:	ed83 7a02 	vstr	s14, [r3, #8]
 800bda8:	4770      	bx	lr
 800bdaa:	eddf 7a03 	vldr	s15, [pc, #12]	@ 800bdb8 <merge_peak_range.part.0+0xa8>
 800bdae:	eef0 6a67 	vmov.f32	s13, s15
 800bdb2:	eeb0 6a67 	vmov.f32	s12, s15
 800bdb6:	e7e3      	b.n	800bd80 <merge_peak_range.part.0+0x70>
 800bdb8:	00000000 	.word	0x00000000

0800bdbc <acc_detector_distance_alg_complex_filter>:
 800bdbc:	ed91 7a00 	vldr	s14, [r1]
 800bdc0:	ed92 6a00 	vldr	s12, [r2]
 800bdc4:	edd2 6a01 	vldr	s13, [r2, #4]
 800bdc8:	edd1 4a01 	vldr	s9, [r1, #4]
 800bdcc:	ee67 5a06 	vmul.f32	s11, s14, s12
 800bdd0:	ee26 4a24 	vmul.f32	s8, s12, s9
 800bdd4:	ee67 7a26 	vmul.f32	s15, s14, s13
 800bdd8:	ee66 4aa4 	vmul.f32	s9, s13, s9
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d042      	beq.n	800be66 <acc_detector_distance_alg_complex_filter+0xaa>
 800bde0:	3b01      	subs	r3, #1
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	ed2d 8b02 	vpush	{d8}
 800bde8:	edd0 1a00 	vldr	s3, [r0]
 800bdec:	ed90 2a01 	vldr	s4, [r0, #4]
 800bdf0:	edd0 2a02 	vldr	s5, [r0, #8]
 800bdf4:	ed90 3a03 	vldr	s6, [r0, #12]
 800bdf8:	edd0 3a04 	vldr	s7, [r0, #16]
 800bdfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800be00:	e004      	b.n	800be0c <acc_detector_distance_alg_complex_filter+0x50>
 800be02:	edd2 6a03 	vldr	s13, [r2, #12]
 800be06:	ed92 6a02 	vldr	s12, [r2, #8]
 800be0a:	3208      	adds	r2, #8
 800be0c:	ee21 5a86 	vmul.f32	s10, s3, s12
 800be10:	ee21 7aa6 	vmul.f32	s14, s3, s13
 800be14:	ee35 5a25 	vadd.f32	s10, s10, s11
 800be18:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be1c:	ee62 5a06 	vmul.f32	s11, s4, s12
 800be20:	ee62 7a26 	vmul.f32	s15, s4, s13
 800be24:	ee75 5a84 	vadd.f32	s11, s11, s8
 800be28:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800be2c:	ee23 8a05 	vmul.f32	s16, s6, s10
 800be30:	ee23 0a85 	vmul.f32	s0, s7, s10
 800be34:	ee22 6a86 	vmul.f32	s12, s5, s12
 800be38:	ee63 0a07 	vmul.f32	s1, s6, s14
 800be3c:	ee23 1a87 	vmul.f32	s2, s7, s14
 800be40:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800be44:	429a      	cmp	r2, r3
 800be46:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800be4a:	ee36 4a40 	vsub.f32	s8, s12, s0
 800be4e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800be52:	ee76 4ac1 	vsub.f32	s9, s13, s2
 800be56:	ed82 5a00 	vstr	s10, [r2]
 800be5a:	ed82 7a01 	vstr	s14, [r2, #4]
 800be5e:	d1d0      	bne.n	800be02 <acc_detector_distance_alg_complex_filter+0x46>
 800be60:	ecbd 8b02 	vpop	{d8}
 800be64:	4770      	bx	lr
 800be66:	4770      	bx	lr

0800be68 <acc_detector_distance_alg_odd_padding_add>:
 800be68:	b4f0      	push	{r4, r5, r6, r7}
 800be6a:	1e57      	subs	r7, r2, #1
 800be6c:	1a3f      	subs	r7, r7, r0
 800be6e:	2800      	cmp	r0, #0
 800be70:	d043      	beq.n	800befa <acc_detector_distance_alg_odd_padding_add+0x92>
 800be72:	b2bf      	uxth	r7, r7
 800be74:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
 800be78:	eb01 05c7 	add.w	r5, r1, r7, lsl #3
 800be7c:	2401      	movs	r4, #1
 800be7e:	1902      	adds	r2, r0, r4
 800be80:	ed96 7a01 	vldr	s14, [r6, #4]
 800be84:	edd6 7a00 	vldr	s15, [r6]
 800be88:	b292      	uxth	r2, r2
 800be8a:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800be8e:	0063      	lsls	r3, r4, #1
 800be90:	ed9c 6a01 	vldr	s12, [ip, #4]
 800be94:	eddc 6a00 	vldr	s13, [ip]
 800be98:	b29b      	uxth	r3, r3
 800be9a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800be9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bea2:	1ad2      	subs	r2, r2, r3
 800bea4:	ee37 7a46 	vsub.f32	s14, s14, s12
 800bea8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800beac:	b292      	uxth	r2, r2
 800beae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800beb2:	ed82 7a01 	vstr	s14, [r2, #4]
 800beb6:	edc2 7a00 	vstr	s15, [r2]
 800beba:	1b3a      	subs	r2, r7, r4
 800bebc:	ed95 7a01 	vldr	s14, [r5, #4]
 800bec0:	edd5 7a00 	vldr	s15, [r5]
 800bec4:	b292      	uxth	r2, r2
 800bec6:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800beca:	ed9c 6a01 	vldr	s12, [ip, #4]
 800bece:	eddc 6a00 	vldr	s13, [ip]
 800bed2:	ee37 7a07 	vadd.f32	s14, s14, s14
 800bed6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800beda:	4413      	add	r3, r2
 800bedc:	3401      	adds	r4, #1
 800bede:	ee37 7a46 	vsub.f32	s14, s14, s12
 800bee2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	b2a4      	uxth	r4, r4
 800beea:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800beee:	42a0      	cmp	r0, r4
 800bef0:	ed83 7a01 	vstr	s14, [r3, #4]
 800bef4:	edc3 7a00 	vstr	s15, [r3]
 800bef8:	d2c1      	bcs.n	800be7e <acc_detector_distance_alg_odd_padding_add+0x16>
 800befa:	bcf0      	pop	{r4, r5, r6, r7}
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop

0800bf00 <acc_detector_distance_alg_filter_steady_state_calculate>:
 800bf00:	ed90 5a03 	vldr	s10, [r0, #12]
 800bf04:	edd0 7a04 	vldr	s15, [r0, #16]
 800bf08:	ed90 6a00 	vldr	s12, [r0]
 800bf0c:	ed90 7a01 	vldr	s14, [r0, #4]
 800bf10:	edd0 5a02 	vldr	s11, [r0, #8]
 800bf14:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 800bf18:	ee75 6a04 	vadd.f32	s13, s10, s8
 800bf1c:	ee65 4a06 	vmul.f32	s9, s10, s12
 800bf20:	ee76 3aa7 	vadd.f32	s7, s13, s15
 800bf24:	ee27 5a86 	vmul.f32	s10, s15, s12
 800bf28:	ee84 6a23 	vdiv.f32	s12, s8, s7
 800bf2c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800bf30:	ee66 6a86 	vmul.f32	s13, s13, s12
 800bf34:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800bf38:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800bf3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf40:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800bf44:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bf48:	ee25 6a86 	vmul.f32	s12, s11, s12
 800bf4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf50:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bf54:	edc1 7a01 	vstr	s15, [r1, #4]
 800bf58:	ed81 7a00 	vstr	s14, [r1]
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop

0800bf60 <acc_detector_distance_alg_filtfilt>:
 800bf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf64:	2b09      	cmp	r3, #9
 800bf66:	b084      	sub	sp, #16
 800bf68:	d80a      	bhi.n	800bf80 <acc_detector_distance_alg_filtfilt+0x20>
 800bf6a:	4924      	ldr	r1, [pc, #144]	@ (800bffc <acc_detector_distance_alg_filtfilt+0x9c>)
 800bf6c:	4a24      	ldr	r2, [pc, #144]	@ (800c000 <acc_detector_distance_alg_filtfilt+0xa0>)
 800bf6e:	690c      	ldr	r4, [r1, #16]
 800bf70:	4924      	ldr	r1, [pc, #144]	@ (800c004 <acc_detector_distance_alg_filtfilt+0xa4>)
 800bf72:	200a      	movs	r0, #10
 800bf74:	9000      	str	r0, [sp, #0]
 800bf76:	2000      	movs	r0, #0
 800bf78:	47a0      	blx	r4
 800bf7a:	b004      	add	sp, #16
 800bf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf80:	1e5c      	subs	r4, r3, #1
 800bf82:	4680      	mov	r8, r0
 800bf84:	461f      	mov	r7, r3
 800bf86:	4616      	mov	r6, r2
 800bf88:	b2a4      	uxth	r4, r4
 800bf8a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800bf8e:	f104 0509 	add.w	r5, r4, #9
 800bf92:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800bf96:	b2ad      	uxth	r5, r5
 800bf98:	3c01      	subs	r4, #1
 800bf9a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 800bf9e:	b2a4      	uxth	r4, r4
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	606b      	str	r3, [r5, #4]
 800bfa6:	4284      	cmp	r4, r0
 800bfa8:	602a      	str	r2, [r5, #0]
 800bfaa:	d1f0      	bne.n	800bf8e <acc_detector_distance_alg_filtfilt+0x2e>
 800bfac:	f107 0412 	add.w	r4, r7, #18
 800bfb0:	b2a4      	uxth	r4, r4
 800bfb2:	4622      	mov	r2, r4
 800bfb4:	4631      	mov	r1, r6
 800bfb6:	2009      	movs	r0, #9
 800bfb8:	f7ff ff56 	bl	800be68 <acc_detector_distance_alg_odd_padding_add>
 800bfbc:	4640      	mov	r0, r8
 800bfbe:	a902      	add	r1, sp, #8
 800bfc0:	f7ff ff9e 	bl	800bf00 <acc_detector_distance_alg_filter_steady_state_calculate>
 800bfc4:	4623      	mov	r3, r4
 800bfc6:	4632      	mov	r2, r6
 800bfc8:	a902      	add	r1, sp, #8
 800bfca:	f7ff fef7 	bl	800bdbc <acc_detector_distance_alg_complex_filter>
 800bfce:	4621      	mov	r1, r4
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	f7ff fe7b 	bl	800bccc <reverse>
 800bfd6:	4632      	mov	r2, r6
 800bfd8:	4623      	mov	r3, r4
 800bfda:	a902      	add	r1, sp, #8
 800bfdc:	4640      	mov	r0, r8
 800bfde:	f7ff feed 	bl	800bdbc <acc_detector_distance_alg_complex_filter>
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	f7ff fe71 	bl	800bccc <reverse>
 800bfea:	00fa      	lsls	r2, r7, #3
 800bfec:	f106 0148 	add.w	r1, r6, #72	@ 0x48
 800bff0:	b004      	add	sp, #16
 800bff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bff6:	f009 bd69 	b.w	8015acc <memmove>
 800bffa:	bf00      	nop
 800bffc:	200008cc 	.word	0x200008cc
 800c000:	08019d60 	.word	0x08019d60
 800c004:	08019d94 	.word	0x08019d94

0800c008 <acc_detector_distance_alg_get_distance_filter_edge_margin>:
 800c008:	b500      	push	{lr}
 800c00a:	b083      	sub	sp, #12
 800c00c:	9101      	str	r1, [sp, #4]
 800c00e:	b919      	cbnz	r1, 800c018 <acc_detector_distance_alg_get_distance_filter_edge_margin+0x10>
 800c010:	2001      	movs	r0, #1
 800c012:	b003      	add	sp, #12
 800c014:	f85d fb04 	ldr.w	pc, [sp], #4
 800c018:	f005 f8ae 	bl	8011178 <acc_detector_utils_get_fwhm>
 800c01c:	eddd 7a01 	vldr	s15, [sp, #4]
 800c020:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800c040 <acc_detector_distance_alg_get_distance_filter_edge_margin+0x38>
 800c024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c02c:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800c030:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c034:	ee17 3a10 	vmov	r3, s14
 800c038:	b298      	uxth	r0, r3
 800c03a:	b003      	add	sp, #12
 800c03c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c040:	3b23d70a 	.word	0x3b23d70a

0800c044 <acc_detector_distance_alg_calculate_biquad_coeffs>:
 800c044:	b510      	push	{r4, lr}
 800c046:	4604      	mov	r4, r0
 800c048:	b3e8      	cbz	r0, 800c0c6 <acc_detector_distance_alg_calculate_biquad_coeffs+0x82>
 800c04a:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800c0dc <acc_detector_distance_alg_calculate_biquad_coeffs+0x98>
 800c04e:	eeb0 7ac0 	vabs.f32	s14, s0
 800c052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05a:	dc35      	bgt.n	800c0c8 <acc_detector_distance_alg_calculate_biquad_coeffs+0x84>
 800c05c:	eddf 7a20 	vldr	s15, [pc, #128]	@ 800c0e0 <acc_detector_distance_alg_calculate_biquad_coeffs+0x9c>
 800c060:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c064:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c068:	f00b fe6a 	bl	8017d40 <cosf>
 800c06c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c070:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c074:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c078:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 800c0e4 <acc_detector_distance_alg_calculate_biquad_coeffs+0xa0>
 800c07c:	eeb1 6ac7 	vsqrt.f32	s12, s14
 800c080:	ee37 5ac0 	vsub.f32	s10, s15, s0
 800c084:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c088:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800c08c:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 800c090:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c094:	ee65 5a25 	vmul.f32	s11, s10, s11
 800c098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c09c:	ee20 0a26 	vmul.f32	s0, s0, s13
 800c0a0:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800c0a4:	eec0 6a06 	vdiv.f32	s13, s0, s12
 800c0a8:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800c0ac:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800c0b0:	2001      	movs	r0, #1
 800c0b2:	edc4 7a00 	vstr	s15, [r4]
 800c0b6:	edc4 5a01 	vstr	s11, [r4, #4]
 800c0ba:	edc4 7a02 	vstr	s15, [r4, #8]
 800c0be:	edc4 6a03 	vstr	s13, [r4, #12]
 800c0c2:	ed84 7a04 	vstr	s14, [r4, #16]
 800c0c6:	bd10      	pop	{r4, pc}
 800c0c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0cc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c0d0:	eef0 7a47 	vmov.f32	s15, s14
 800c0d4:	eef0 5a66 	vmov.f32	s11, s13
 800c0d8:	e7ea      	b.n	800c0b0 <acc_detector_distance_alg_calculate_biquad_coeffs+0x6c>
 800c0da:	bf00      	nop
 800c0dc:	3effffde 	.word	0x3effffde
 800c0e0:	40490fdb 	.word	0x40490fdb
 800c0e4:	3fb504f3 	.word	0x3fb504f3

0800c0e8 <acc_detector_distance_alg_get_distance_filter_coeffs>:
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	4614      	mov	r4, r2
 800c0ee:	9101      	str	r1, [sp, #4]
 800c0f0:	f005 f842 	bl	8011178 <acc_detector_utils_get_fwhm>
 800c0f4:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c130 <acc_detector_distance_alg_get_distance_filter_coeffs+0x48>
 800c0f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c100:	dc02      	bgt.n	800c108 <acc_detector_distance_alg_get_distance_filter_coeffs+0x20>
 800c102:	2000      	movs	r0, #0
 800c104:	b002      	add	sp, #8
 800c106:	bd10      	pop	{r4, pc}
 800c108:	eddd 7a01 	vldr	s15, [sp, #4]
 800c10c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800c134 <acc_detector_distance_alg_get_distance_filter_coeffs+0x4c>
 800c110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c114:	4620      	mov	r0, r4
 800c116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c11a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c11e:	eec7 6a80 	vdiv.f32	s13, s15, s0
 800c122:	ee26 0a87 	vmul.f32	s0, s13, s14
 800c126:	b002      	add	sp, #8
 800c128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c12c:	f7ff bf8a 	b.w	800c044 <acc_detector_distance_alg_calculate_biquad_coeffs>
 800c130:	3727c5ac 	.word	0x3727c5ac
 800c134:	3b23d70a 	.word	0x3b23d70a

0800c138 <acc_detector_distance_alg_calculate_cfar>:
 800c138:	b430      	push	{r4, r5}
 800c13a:	18d4      	adds	r4, r2, r3
 800c13c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 800c140:	b2a4      	uxth	r4, r4
 800c142:	42ac      	cmp	r4, r5
 800c144:	d82f      	bhi.n	800c1a6 <acc_detector_distance_alg_calculate_cfar+0x6e>
 800c146:	1b09      	subs	r1, r1, r4
 800c148:	b289      	uxth	r1, r1
 800c14a:	42a9      	cmp	r1, r5
 800c14c:	d92b      	bls.n	800c1a6 <acc_detector_distance_alg_calculate_cfar+0x6e>
 800c14e:	1aec      	subs	r4, r5, r3
 800c150:	3501      	adds	r5, #1
 800c152:	1aa4      	subs	r4, r4, r2
 800c154:	442a      	add	r2, r5
 800c156:	b2a4      	uxth	r4, r4
 800c158:	b292      	uxth	r2, r2
 800c15a:	b343      	cbz	r3, 800c1ae <acc_detector_distance_alg_calculate_cfar+0x76>
 800c15c:	1e59      	subs	r1, r3, #1
 800c15e:	fa14 f581 	uxtah	r5, r4, r1
 800c162:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800c1b4 <acc_detector_distance_alg_calculate_cfar+0x7c>
 800c166:	1d01      	adds	r1, r0, #4
 800c168:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c16c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800c170:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800c174:	ecf0 6a01 	vldmia	r0!, {s13}
 800c178:	ecb2 7a01 	vldmia	r2!, {s14}
 800c17c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c180:	4281      	cmp	r1, r0
 800c182:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c186:	d1f5      	bne.n	800c174 <acc_detector_distance_alg_calculate_cfar+0x3c>
 800c188:	005b      	lsls	r3, r3, #1
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	b17b      	cbz	r3, 800c1ae <acc_detector_distance_alg_calculate_cfar+0x76>
 800c18e:	ee07 3a10 	vmov	s14, r3
 800c192:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800c196:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c19a:	bc30      	pop	{r4, r5}
 800c19c:	ee20 0a20 	vmul.f32	s0, s0, s1
 800c1a0:	ee30 0a26 	vadd.f32	s0, s0, s13
 800c1a4:	4770      	bx	lr
 800c1a6:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 800c1b8 <acc_detector_distance_alg_calculate_cfar+0x80>
 800c1aa:	bc30      	pop	{r4, r5}
 800c1ac:	4770      	bx	lr
 800c1ae:	eddf 6a01 	vldr	s13, [pc, #4]	@ 800c1b4 <acc_detector_distance_alg_calculate_cfar+0x7c>
 800c1b2:	e7f2      	b.n	800c19a <acc_detector_distance_alg_calculate_cfar+0x62>
 800c1b4:	00000000 	.word	0x00000000
 800c1b8:	7f7fffff 	.word	0x7f7fffff

0800c1bc <acc_detector_distance_alg_cfar_window_length>:
 800c1bc:	ee07 0a90 	vmov	s15, r0
 800c1c0:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800c204 <acc_detector_distance_alg_cfar_window_length+0x48>
 800c1c4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800c208 <acc_detector_distance_alg_cfar_window_length+0x4c>
 800c1c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c1d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d8:	dc01      	bgt.n	800c1de <acc_detector_distance_alg_cfar_window_length+0x22>
 800c1da:	2001      	movs	r0, #1
 800c1dc:	4770      	bx	lr
 800c1de:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800c1e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c1e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1ea:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800c1ee:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f6:	ddf0      	ble.n	800c1da <acc_detector_distance_alg_cfar_window_length+0x1e>
 800c1f8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c1fc:	ee17 3a10 	vmov	r3, s14
 800c200:	b298      	uxth	r0, r3
 800c202:	4770      	bx	lr
 800c204:	3b23d70a 	.word	0x3b23d70a
 800c208:	3727c5ac 	.word	0x3727c5ac

0800c20c <acc_detector_distance_alg_cfar_guard_half_length>:
 800c20c:	ee07 0a90 	vmov	s15, r0
 800c210:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 800c250 <acc_detector_distance_alg_cfar_guard_half_length+0x44>
 800c214:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800c254 <acc_detector_distance_alg_cfar_guard_half_length+0x48>
 800c218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c21c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c220:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c228:	dd0f      	ble.n	800c24a <acc_detector_distance_alg_cfar_guard_half_length+0x3e>
 800c22a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c22e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c232:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c236:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c23a:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800c23e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c242:	ee17 3a90 	vmov	r3, s15
 800c246:	b298      	uxth	r0, r3
 800c248:	4770      	bx	lr
 800c24a:	2001      	movs	r0, #1
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	3b23d70a 	.word	0x3b23d70a
 800c254:	3727c5ac 	.word	0x3727c5ac

0800c258 <acc_detector_distance_alg_cfar_margin>:
 800c258:	ee07 0a90 	vmov	s15, r0
 800c25c:	eddf 6a19 	vldr	s13, [pc, #100]	@ 800c2c4 <acc_detector_distance_alg_cfar_margin+0x6c>
 800c260:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c2c8 <acc_detector_distance_alg_cfar_margin+0x70>
 800c264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c268:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c26c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c274:	dc01      	bgt.n	800c27a <acc_detector_distance_alg_cfar_margin+0x22>
 800c276:	2002      	movs	r0, #2
 800c278:	4770      	bx	lr
 800c27a:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 800c27e:	ee60 6a26 	vmul.f32	s13, s0, s13
 800c282:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800c286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c28a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800c28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c292:	dd15      	ble.n	800c2c0 <acc_detector_distance_alg_cfar_margin+0x68>
 800c294:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c298:	ee17 3a10 	vmov	r3, s14
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800c2a2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c2a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c2aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c2ae:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800c2b2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c2b6:	ee17 0a90 	vmov	r0, s15
 800c2ba:	4418      	add	r0, r3
 800c2bc:	b280      	uxth	r0, r0
 800c2be:	4770      	bx	lr
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e7ec      	b.n	800c29e <acc_detector_distance_alg_cfar_margin+0x46>
 800c2c4:	3b23d70a 	.word	0x3b23d70a
 800c2c8:	3727c5ac 	.word	0x3727c5ac

0800c2cc <acc_detector_distance_alg_calculate_threshold_recording>:
 800c2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d0:	b083      	sub	sp, #12
 800c2d2:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 800c2d6:	f8bd e038 	ldrh.w	lr, [sp, #56]	@ 0x38
 800c2da:	2c00      	cmp	r4, #0
 800c2dc:	d065      	beq.n	800c3aa <acc_detector_distance_alg_calculate_threshold_recording+0xde>
 800c2de:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800c2e0:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800c3b8 <acc_detector_distance_alg_calculate_threshold_recording+0xec>
 800c2e4:	ed9f 5a35 	vldr	s10, [pc, #212]	@ 800c3bc <acc_detector_distance_alg_calculate_threshold_recording+0xf0>
 800c2e8:	3c01      	subs	r4, #1
 800c2ea:	b2a4      	uxth	r4, r4
 800c2ec:	f107 0802 	add.w	r8, r7, #2
 800c2f0:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 800c2f4:	1d0c      	adds	r4, r1, #4
 800c2f6:	f04f 0c00 	mov.w	ip, #0
 800c2fa:	9401      	str	r4, [sp, #4]
 800c2fc:	e003      	b.n	800c306 <acc_detector_distance_alg_calculate_threshold_recording+0x3a>
 800c2fe:	4547      	cmp	r7, r8
 800c300:	f10c 0c04 	add.w	ip, ip, #4
 800c304:	d051      	beq.n	800c3aa <acc_detector_distance_alg_calculate_threshold_recording+0xde>
 800c306:	f837 6f02 	ldrh.w	r6, [r7, #2]!
 800c30a:	eba6 040e 	sub.w	r4, r6, lr
 800c30e:	b2a4      	uxth	r4, r4
 800c310:	4294      	cmp	r4, r2
 800c312:	d8f4      	bhi.n	800c2fe <acc_detector_distance_alg_calculate_threshold_recording+0x32>
 800c314:	f837 9c02 	ldrh.w	r9, [r7, #-2]
 800c318:	eba9 050e 	sub.w	r5, r9, lr
 800c31c:	b2ad      	uxth	r5, r5
 800c31e:	42a5      	cmp	r5, r4
 800c320:	d246      	bcs.n	800c3b0 <acc_detector_distance_alg_calculate_threshold_recording+0xe4>
 800c322:	ebae 0a09 	sub.w	sl, lr, r9
 800c326:	eb03 0b0c 	add.w	fp, r3, ip
 800c32a:	3c01      	subs	r4, #1
 800c32c:	4454      	add	r4, sl
 800c32e:	ed9b 6a00 	vldr	s12, [fp]
 800c332:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800c3b8 <acc_detector_distance_alg_calculate_threshold_recording+0xec>
 800c336:	fa15 fa84 	uxtah	sl, r5, r4
 800c33a:	9c01      	ldr	r4, [sp, #4]
 800c33c:	ee26 6a06 	vmul.f32	s12, s12, s12
 800c340:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800c344:	eb01 0a85 	add.w	sl, r1, r5, lsl #2
 800c348:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c34c:	ecfa 7a01 	vldmia	sl!, {s15}
 800c350:	ecb5 7a01 	vldmia	r5!, {s14}
 800c354:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c358:	eef0 6ac7 	vabs.f32	s13, s14
 800c35c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c368:	eef4 6ac5 	vcmpe.f32	s13, s10
 800c36c:	bfd8      	it	le
 800c36e:	eef0 7a64 	vmovle.f32	s15, s9
 800c372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c376:	dd05      	ble.n	800c384 <acc_detector_distance_alg_calculate_threshold_recording+0xb8>
 800c378:	eef1 6ae7 	vsqrt.f32	s13, s15
 800c37c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c380:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800c384:	4554      	cmp	r4, sl
 800c386:	d1e1      	bne.n	800c34c <acc_detector_distance_alg_calculate_threshold_recording+0x80>
 800c388:	eba6 0609 	sub.w	r6, r6, r9
 800c38c:	b2b6      	uxth	r6, r6
 800c38e:	ee07 6a90 	vmov	s15, r6
 800c392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c396:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 800c398:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 800c39c:	4464      	add	r4, ip
 800c39e:	4547      	cmp	r7, r8
 800c3a0:	f10c 0c04 	add.w	ip, ip, #4
 800c3a4:	ed84 7a00 	vstr	s14, [r4]
 800c3a8:	d1ad      	bne.n	800c306 <acc_detector_distance_alg_calculate_threshold_recording+0x3a>
 800c3aa:	b003      	add	sp, #12
 800c3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b0:	eddf 5a01 	vldr	s11, [pc, #4]	@ 800c3b8 <acc_detector_distance_alg_calculate_threshold_recording+0xec>
 800c3b4:	e7e8      	b.n	800c388 <acc_detector_distance_alg_calculate_threshold_recording+0xbc>
 800c3b6:	bf00      	nop
 800c3b8:	00000000 	.word	0x00000000
 800c3bc:	3727c5ac 	.word	0x3727c5ac

0800c3c0 <acc_detector_distance_alg_interpolate_peaks>:
 800c3c0:	b4f0      	push	{r4, r5, r6, r7}
 800c3c2:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 800c3c6:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 800c3ca:	ee05 4a10 	vmov	s10, r4
 800c3ce:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f000 8086 	beq.w	800c4e4 <acc_detector_distance_alg_interpolate_peaks+0x124>
 800c3d8:	2f00      	cmp	r7, #0
 800c3da:	f000 8083 	beq.w	800c4e4 <acc_detector_distance_alg_interpolate_peaks+0x124>
 800c3de:	3f01      	subs	r7, #1
 800c3e0:	1e5e      	subs	r6, r3, #1
 800c3e2:	b2bf      	uxth	r7, r7
 800c3e4:	b2b6      	uxth	r6, r6
 800c3e6:	ee04 4a10 	vmov	s8, r4
 800c3ea:	eb02 0747 	add.w	r7, r2, r7, lsl #1
 800c3ee:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 800c3f2:	f101 3cff 	add.w	ip, r1, #4294967295
 800c3f6:	3a02      	subs	r2, #2
 800c3f8:	e9dd 4107 	ldrd	r4, r1, [sp, #28]
 800c3fc:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 800c400:	eefe 3a00 	vmov.f32	s7, #224	@ 0xbf000000 -0.5
 800c404:	e00f      	b.n	800c426 <acc_detector_distance_alg_interpolate_peaks+0x66>
 800c406:	eef8 7ac5 	vcvt.f32.s32	s15, s10
 800c40a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c40e:	edc4 7a00 	vstr	s15, [r4]
 800c412:	6803      	ldr	r3, [r0, #0]
 800c414:	600b      	str	r3, [r1, #0]
 800c416:	42b2      	cmp	r2, r6
 800c418:	f104 0404 	add.w	r4, r4, #4
 800c41c:	f101 0104 	add.w	r1, r1, #4
 800c420:	d060      	beq.n	800c4e4 <acc_detector_distance_alg_interpolate_peaks+0x124>
 800c422:	42ba      	cmp	r2, r7
 800c424:	d05e      	beq.n	800c4e4 <acc_detector_distance_alg_interpolate_peaks+0x124>
 800c426:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d0eb      	beq.n	800c406 <acc_detector_distance_alg_interpolate_peaks+0x46>
 800c42e:	1c5d      	adds	r5, r3, #1
 800c430:	4563      	cmp	r3, ip
 800c432:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800c436:	d2ee      	bcs.n	800c416 <acc_detector_distance_alg_interpolate_peaks+0x56>
 800c438:	ee07 3a90 	vmov	s15, r3
 800c43c:	ed15 6a02 	vldr	s12, [r5, #-8]
 800c440:	edd5 5a00 	vldr	s11, [r5]
 800c444:	ed55 6a01 	vldr	s13, [r5, #-4]
 800c448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c44c:	ee35 7ae6 	vsub.f32	s14, s11, s13
 800c450:	ee37 3ae4 	vsub.f32	s6, s15, s9
 800c454:	ee76 5a65 	vsub.f32	s11, s12, s11
 800c458:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c45c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800c460:	ee77 2aa4 	vadd.f32	s5, s15, s9
 800c464:	ee27 7a03 	vmul.f32	s14, s14, s6
 800c468:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c46c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c470:	ee62 5aa6 	vmul.f32	s11, s5, s13
 800c474:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800c478:	ee37 7a25 	vadd.f32	s14, s14, s11
 800c47c:	eef8 5a44 	vcvt.f32.u32	s11, s8
 800c480:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c484:	42b2      	cmp	r2, r6
 800c486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c48a:	ee37 2a07 	vadd.f32	s4, s14, s14
 800c48e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c492:	ee63 6a07 	vmul.f32	s13, s6, s14
 800c496:	eef1 1a67 	vneg.f32	s3, s15
 800c49a:	eec1 2a82 	vdiv.f32	s5, s3, s4
 800c49e:	f104 0404 	add.w	r4, r4, #4
 800c4a2:	f101 0104 	add.w	r1, r1, #4
 800c4a6:	ee66 6a83 	vmul.f32	s13, s13, s6
 800c4aa:	ee27 7a22 	vmul.f32	s14, s14, s5
 800c4ae:	ee36 6a66 	vsub.f32	s12, s12, s13
 800c4b2:	ee23 3a27 	vmul.f32	s6, s6, s15
 800c4b6:	ee27 7a22 	vmul.f32	s14, s14, s5
 800c4ba:	ee65 6aa2 	vmul.f32	s13, s11, s5
 800c4be:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800c4c2:	eef8 5ac5 	vcvt.f32.s32	s11, s10
 800c4c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4ca:	ee36 6a43 	vsub.f32	s12, s12, s6
 800c4ce:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800c4d2:	ee76 7a27 	vadd.f32	s15, s12, s15
 800c4d6:	ee27 7a00 	vmul.f32	s14, s14, s0
 800c4da:	ed04 7a01 	vstr	s14, [r4, #-4]
 800c4de:	ed41 7a01 	vstr	s15, [r1, #-4]
 800c4e2:	d19e      	bne.n	800c422 <acc_detector_distance_alg_interpolate_peaks+0x62>
 800c4e4:	bcf0      	pop	{r4, r5, r6, r7}
 800c4e6:	4770      	bx	lr

0800c4e8 <acc_detector_distance_alg_find_peaks>:
 800c4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	b083      	sub	sp, #12
 800c4ee:	2901      	cmp	r1, #1
 800c4f0:	f8bd b030 	ldrh.w	fp, [sp, #48]	@ 0x30
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	d96d      	bls.n	800c5d4 <acc_detector_distance_alg_find_peaks+0xec>
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	469a      	mov	sl, r3
 800c4fc:	f04f 0800 	mov.w	r8, #0
 800c500:	f06f 4940 	mvn.w	r9, #3221225472	@ 0xc0000000
 800c504:	1e4e      	subs	r6, r1, #1
 800c506:	e010      	b.n	800c52a <acc_detector_distance_alg_find_peaks+0x42>
 800c508:	eb03 0409 	add.w	r4, r3, r9
 800c50c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800c510:	ed94 7a00 	vldr	s14, [r4]
 800c514:	edd4 7a01 	vldr	s15, [r4, #4]
 800c518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c520:	db21      	blt.n	800c566 <acc_detector_distance_alg_find_peaks+0x7e>
 800c522:	3301      	adds	r3, #1
 800c524:	b29b      	uxth	r3, r3
 800c526:	428b      	cmp	r3, r1
 800c528:	d216      	bcs.n	800c558 <acc_detector_distance_alg_find_peaks+0x70>
 800c52a:	1e5c      	subs	r4, r3, #1
 800c52c:	0965      	lsrs	r5, r4, #5
 800c52e:	f004 041f 	and.w	r4, r4, #31
 800c532:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 800c536:	fa25 f404 	lsr.w	r4, r5, r4
 800c53a:	07e7      	lsls	r7, r4, #31
 800c53c:	d5f1      	bpl.n	800c522 <acc_detector_distance_alg_find_peaks+0x3a>
 800c53e:	095d      	lsrs	r5, r3, #5
 800c540:	f003 041f 	and.w	r4, r3, #31
 800c544:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 800c548:	fa25 f404 	lsr.w	r4, r5, r4
 800c54c:	07e5      	lsls	r5, r4, #31
 800c54e:	d4db      	bmi.n	800c508 <acc_detector_distance_alg_find_peaks+0x20>
 800c550:	3302      	adds	r3, #2
 800c552:	b29b      	uxth	r3, r3
 800c554:	428b      	cmp	r3, r1
 800c556:	d3e8      	bcc.n	800c52a <acc_detector_distance_alg_find_peaks+0x42>
 800c558:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c55a:	4650      	mov	r0, sl
 800c55c:	f8a3 8000 	strh.w	r8, [r3]
 800c560:	b003      	add	sp, #12
 800c562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c566:	1c5c      	adds	r4, r3, #1
 800c568:	469c      	mov	ip, r3
 800c56a:	b2a3      	uxth	r3, r4
 800c56c:	42b3      	cmp	r3, r6
 800c56e:	ea4f 1453 	mov.w	r4, r3, lsr #5
 800c572:	f003 0e1f 	and.w	lr, r3, #31
 800c576:	d2d6      	bcs.n	800c526 <acc_detector_distance_alg_find_peaks+0x3e>
 800c578:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 800c57c:	fa24 f40e 	lsr.w	r4, r4, lr
 800c580:	07e4      	lsls	r4, r4, #31
 800c582:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800c586:	eb00 058c 	add.w	r5, r0, ip, lsl #2
 800c58a:	d5cc      	bpl.n	800c526 <acc_detector_distance_alg_find_peaks+0x3e>
 800c58c:	ed97 7a00 	vldr	s14, [r7]
 800c590:	edd5 7a00 	vldr	s15, [r5]
 800c594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59c:	f103 0401 	add.w	r4, r3, #1
 800c5a0:	dce2      	bgt.n	800c568 <acc_detector_distance_alg_find_peaks+0x80>
 800c5a2:	d5e2      	bpl.n	800c56a <acc_detector_distance_alg_find_peaks+0x82>
 800c5a4:	f10c 0401 	add.w	r4, ip, #1
 800c5a8:	0965      	lsrs	r5, r4, #5
 800c5aa:	f004 041f 	and.w	r4, r4, #31
 800c5ae:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 800c5b2:	fa25 f404 	lsr.w	r4, r5, r4
 800c5b6:	07e4      	lsls	r4, r4, #31
 800c5b8:	d5b5      	bpl.n	800c526 <acc_detector_distance_alg_find_peaks+0x3e>
 800c5ba:	45d8      	cmp	r8, fp
 800c5bc:	d207      	bcs.n	800c5ce <acc_detector_distance_alg_find_peaks+0xe6>
 800c5be:	9d01      	ldr	r5, [sp, #4]
 800c5c0:	f108 0401 	add.w	r4, r8, #1
 800c5c4:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 800c5c8:	fa1f f884 	uxth.w	r8, r4
 800c5cc:	e7ab      	b.n	800c526 <acc_detector_distance_alg_find_peaks+0x3e>
 800c5ce:	f04f 0a00 	mov.w	sl, #0
 800c5d2:	e7a8      	b.n	800c526 <acc_detector_distance_alg_find_peaks+0x3e>
 800c5d4:	f04f 0800 	mov.w	r8, #0
 800c5d8:	f04f 0a01 	mov.w	sl, #1
 800c5dc:	e7bc      	b.n	800c558 <acc_detector_distance_alg_find_peaks+0x70>
 800c5de:	bf00      	nop

0800c5e0 <acc_detector_distance_alg_peak_inplace_sort>:
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	d045      	beq.n	800c670 <acc_detector_distance_alg_peak_inplace_sort+0x90>
 800c5e4:	2900      	cmp	r1, #0
 800c5e6:	d043      	beq.n	800c670 <acc_detector_distance_alg_peak_inplace_sort+0x90>
 800c5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ec:	f1b1 0a01 	subs.w	sl, r1, #1
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	d03a      	beq.n	800c66a <acc_detector_distance_alg_peak_inplace_sort+0x8a>
 800c5f4:	f04f 0900 	mov.w	r9, #0
 800c5f8:	4696      	mov	lr, r2
 800c5fa:	4684      	mov	ip, r0
 800c5fc:	46c8      	mov	r8, r9
 800c5fe:	466f      	mov	r7, sp
 800c600:	ebba 0808 	subs.w	r8, sl, r8
 800c604:	d02a      	beq.n	800c65c <acc_detector_distance_alg_peak_inplace_sort+0x7c>
 800c606:	2600      	movs	r6, #0
 800c608:	4634      	mov	r4, r6
 800c60a:	eb0c 1504 	add.w	r5, ip, r4, lsl #4
 800c60e:	eb0c 1404 	add.w	r4, ip, r4, lsl #4
 800c612:	3510      	adds	r5, #16
 800c614:	ed94 7a00 	vldr	s14, [r4]
 800c618:	ed94 6a02 	vldr	s12, [r4, #8]
 800c61c:	edd5 7a00 	vldr	s15, [r5]
 800c620:	edd5 6a02 	vldr	s13, [r5, #8]
 800c624:	f1be 0f00 	cmp.w	lr, #0
 800c628:	d123      	bne.n	800c672 <acc_detector_distance_alg_peak_inplace_sort+0x92>
 800c62a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c632:	bfcc      	ite	gt
 800c634:	2301      	movgt	r3, #1
 800c636:	2300      	movle	r3, #0
 800c638:	b15b      	cbz	r3, 800c652 <acc_detector_distance_alg_peak_inplace_sort+0x72>
 800c63a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c63e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800c642:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c64a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800c64e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800c652:	3601      	adds	r6, #1
 800c654:	b2b6      	uxth	r6, r6
 800c656:	4546      	cmp	r6, r8
 800c658:	4634      	mov	r4, r6
 800c65a:	d3d6      	bcc.n	800c60a <acc_detector_distance_alg_peak_inplace_sort+0x2a>
 800c65c:	f109 0901 	add.w	r9, r9, #1
 800c660:	fa1f f989 	uxth.w	r9, r9
 800c664:	45d1      	cmp	r9, sl
 800c666:	46c8      	mov	r8, r9
 800c668:	d3ca      	bcc.n	800c600 <acc_detector_distance_alg_peak_inplace_sort+0x20>
 800c66a:	b004      	add	sp, #16
 800c66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c670:	4770      	bx	lr
 800c672:	f1be 0f01 	cmp.w	lr, #1
 800c676:	d1ec      	bne.n	800c652 <acc_detector_distance_alg_peak_inplace_sort+0x72>
 800c678:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800c67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c680:	bf4c      	ite	mi
 800c682:	2301      	movmi	r3, #1
 800c684:	2300      	movpl	r3, #0
 800c686:	e7d7      	b.n	800c638 <acc_detector_distance_alg_peak_inplace_sort+0x58>

0800c688 <acc_detector_distance_alg_merge_peaks>:
 800c688:	2800      	cmp	r0, #0
 800c68a:	d03e      	beq.n	800c70a <acc_detector_distance_alg_merge_peaks+0x82>
 800c68c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c690:	4691      	mov	r9, r2
 800c692:	b3ba      	cbz	r2, 800c704 <acc_detector_distance_alg_merge_peaks+0x7c>
 800c694:	4698      	mov	r8, r3
 800c696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c698:	b3a3      	cbz	r3, 800c704 <acc_detector_distance_alg_merge_peaks+0x7c>
 800c69a:	2901      	cmp	r1, #1
 800c69c:	468a      	mov	sl, r1
 800c69e:	4607      	mov	r7, r0
 800c6a0:	d935      	bls.n	800c70e <acc_detector_distance_alg_merge_peaks+0x86>
 800c6a2:	2400      	movs	r4, #0
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	4626      	mov	r6, r4
 800c6a8:	4625      	mov	r5, r4
 800c6aa:	f101 3bff 	add.w	fp, r1, #4294967295
 800c6ae:	e00b      	b.n	800c6c8 <acc_detector_distance_alg_merge_peaks+0x40>
 800c6b0:	463a      	mov	r2, r7
 800c6b2:	eb09 1306 	add.w	r3, r9, r6, lsl #4
 800c6b6:	b329      	cbz	r1, 800c704 <acc_detector_distance_alg_merge_peaks+0x7c>
 800c6b8:	3601      	adds	r6, #1
 800c6ba:	f7ff fb29 	bl	800bd10 <merge_peak_range.part.0>
 800c6be:	b2b6      	uxth	r6, r6
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	455c      	cmp	r4, fp
 800c6c4:	4625      	mov	r5, r4
 800c6c6:	d224      	bcs.n	800c712 <acc_detector_distance_alg_merge_peaks+0x8a>
 800c6c8:	eb07 1305 	add.w	r3, r7, r5, lsl #4
 800c6cc:	edd3 6a07 	vldr	s13, [r3, #28]
 800c6d0:	edd3 7a03 	vldr	s15, [r3, #12]
 800c6d4:	ed93 7a04 	vldr	s14, [r3, #16]
 800c6d8:	ed93 6a00 	vldr	s12, [r3]
 800c6dc:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6e4:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c6e8:	bf58      	it	pl
 800c6ea:	eef0 7a66 	vmovpl.f32	s15, s13
 800c6ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c6f2:	3401      	adds	r4, #1
 800c6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f8:	b2a4      	uxth	r4, r4
 800c6fa:	d4e2      	bmi.n	800c6c2 <acc_detector_distance_alg_merge_peaks+0x3a>
 800c6fc:	1a21      	subs	r1, r4, r0
 800c6fe:	45b0      	cmp	r8, r6
 800c700:	b289      	uxth	r1, r1
 800c702:	d8d5      	bhi.n	800c6b0 <acc_detector_distance_alg_merge_peaks+0x28>
 800c704:	2000      	movs	r0, #0
 800c706:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c70a:	2000      	movs	r0, #0
 800c70c:	4770      	bx	lr
 800c70e:	2000      	movs	r0, #0
 800c710:	4606      	mov	r6, r0
 800c712:	4582      	cmp	sl, r0
 800c714:	d90b      	bls.n	800c72e <acc_detector_distance_alg_merge_peaks+0xa6>
 800c716:	45b0      	cmp	r8, r6
 800c718:	d9f4      	bls.n	800c704 <acc_detector_distance_alg_merge_peaks+0x7c>
 800c71a:	ebaa 0100 	sub.w	r1, sl, r0
 800c71e:	eb09 1306 	add.w	r3, r9, r6, lsl #4
 800c722:	b289      	uxth	r1, r1
 800c724:	463a      	mov	r2, r7
 800c726:	f7ff faf3 	bl	800bd10 <merge_peak_range.part.0>
 800c72a:	3601      	adds	r6, #1
 800c72c:	b2b6      	uxth	r6, r6
 800c72e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c730:	2001      	movs	r0, #1
 800c732:	801e      	strh	r6, [r3, #0]
 800c734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c738 <acc_detector_distance_alg_get_loopback_peak_offset>:
 800c738:	3801      	subs	r0, #1
 800c73a:	f111 0f19 	cmn.w	r1, #25
 800c73e:	b2c0      	uxtb	r0, r0
 800c740:	da10      	bge.n	800c764 <acc_detector_distance_alg_get_loopback_peak_offset+0x2c>
 800c742:	2804      	cmp	r0, #4
 800c744:	d82a      	bhi.n	800c79c <acc_detector_distance_alg_get_loopback_peak_offset+0x64>
 800c746:	4a2d      	ldr	r2, [pc, #180]	@ (800c7fc <acc_detector_distance_alg_get_loopback_peak_offset+0xc4>)
 800c748:	4b2d      	ldr	r3, [pc, #180]	@ (800c800 <acc_detector_distance_alg_get_loopback_peak_offset+0xc8>)
 800c74a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800c74e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c752:	edd2 7a00 	vldr	s15, [r2]
 800c756:	ed90 7a00 	vldr	s14, [r0]
 800c75a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c75e:	ee30 0a07 	vadd.f32	s0, s0, s14
 800c762:	4770      	bx	lr
 800c764:	292c      	cmp	r1, #44	@ 0x2c
 800c766:	dc0a      	bgt.n	800c77e <acc_detector_distance_alg_get_loopback_peak_offset+0x46>
 800c768:	2804      	cmp	r0, #4
 800c76a:	d920      	bls.n	800c7ae <acc_detector_distance_alg_get_loopback_peak_offset+0x76>
 800c76c:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c804 <acc_detector_distance_alg_get_loopback_peak_offset+0xcc>
 800c770:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800c808 <acc_detector_distance_alg_get_loopback_peak_offset+0xd0>
 800c774:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c778:	ee30 0a07 	vadd.f32	s0, s0, s14
 800c77c:	4770      	bx	lr
 800c77e:	294f      	cmp	r1, #79	@ 0x4f
 800c780:	dc24      	bgt.n	800c7cc <acc_detector_distance_alg_get_loopback_peak_offset+0x94>
 800c782:	2804      	cmp	r0, #4
 800c784:	d834      	bhi.n	800c7f0 <acc_detector_distance_alg_get_loopback_peak_offset+0xb8>
 800c786:	4a21      	ldr	r2, [pc, #132]	@ (800c80c <acc_detector_distance_alg_get_loopback_peak_offset+0xd4>)
 800c788:	4b21      	ldr	r3, [pc, #132]	@ (800c810 <acc_detector_distance_alg_get_loopback_peak_offset+0xd8>)
 800c78a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800c78e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c792:	edd2 7a00 	vldr	s15, [r2]
 800c796:	ed90 7a00 	vldr	s14, [r0]
 800c79a:	e7de      	b.n	800c75a <acc_detector_distance_alg_get_loopback_peak_offset+0x22>
 800c79c:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 800c814 <acc_detector_distance_alg_get_loopback_peak_offset+0xdc>
 800c7a0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800c818 <acc_detector_distance_alg_get_loopback_peak_offset+0xe0>
 800c7a4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c7a8:	ee30 0a07 	vadd.f32	s0, s0, s14
 800c7ac:	4770      	bx	lr
 800c7ae:	4a1b      	ldr	r2, [pc, #108]	@ (800c81c <acc_detector_distance_alg_get_loopback_peak_offset+0xe4>)
 800c7b0:	4b1b      	ldr	r3, [pc, #108]	@ (800c820 <acc_detector_distance_alg_get_loopback_peak_offset+0xe8>)
 800c7b2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800c7b6:	edd2 7a00 	vldr	s15, [r2]
 800c7ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c7be:	ed90 7a00 	vldr	s14, [r0]
 800c7c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c7c6:	ee30 0a07 	vadd.f32	s0, s0, s14
 800c7ca:	4770      	bx	lr
 800c7cc:	2803      	cmp	r0, #3
 800c7ce:	d80a      	bhi.n	800c7e6 <acc_detector_distance_alg_get_loopback_peak_offset+0xae>
 800c7d0:	4a14      	ldr	r2, [pc, #80]	@ (800c824 <acc_detector_distance_alg_get_loopback_peak_offset+0xec>)
 800c7d2:	4b15      	ldr	r3, [pc, #84]	@ (800c828 <acc_detector_distance_alg_get_loopback_peak_offset+0xf0>)
 800c7d4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800c7d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c7dc:	edd2 7a00 	vldr	s15, [r2]
 800c7e0:	ed90 7a00 	vldr	s14, [r0]
 800c7e4:	e7b9      	b.n	800c75a <acc_detector_distance_alg_get_loopback_peak_offset+0x22>
 800c7e6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800c82c <acc_detector_distance_alg_get_loopback_peak_offset+0xf4>
 800c7ea:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c830 <acc_detector_distance_alg_get_loopback_peak_offset+0xf8>
 800c7ee:	e7b4      	b.n	800c75a <acc_detector_distance_alg_get_loopback_peak_offset+0x22>
 800c7f0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800c834 <acc_detector_distance_alg_get_loopback_peak_offset+0xfc>
 800c7f4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800c838 <acc_detector_distance_alg_get_loopback_peak_offset+0x100>
 800c7f8:	e7af      	b.n	800c75a <acc_detector_distance_alg_get_loopback_peak_offset+0x22>
 800c7fa:	bf00      	nop
 800c7fc:	08019dac 	.word	0x08019dac
 800c800:	08019dc0 	.word	0x08019dc0
 800c804:	3f0e255f 	.word	0x3f0e255f
 800c808:	3bcebc3b 	.word	0x3bcebc3b
 800c80c:	08019dfc 	.word	0x08019dfc
 800c810:	08019e10 	.word	0x08019e10
 800c814:	3f505015 	.word	0x3f505015
 800c818:	3c4276c8 	.word	0x3c4276c8
 800c81c:	08019dd4 	.word	0x08019dd4
 800c820:	08019de8 	.word	0x08019de8
 800c824:	08019e24 	.word	0x08019e24
 800c828:	08019e34 	.word	0x08019e34
 800c82c:	bc0085e2 	.word	0xbc0085e2
 800c830:	3ea52be3 	.word	0x3ea52be3
 800c834:	3b225c36 	.word	0x3b225c36
 800c838:	3ececaf1 	.word	0x3ececaf1

0800c83c <acc_detector_distance_alg_phase_comp_mean_sweep>:
 800c83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c840:	ed2d 8b08 	vpush	{d8-d11}
 800c844:	b087      	sub	sp, #28
 800c846:	469b      	mov	fp, r3
 800c848:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 800c84c:	9104      	str	r1, [sp, #16]
 800c84e:	460c      	mov	r4, r1
 800c850:	9305      	str	r3, [sp, #20]
 800c852:	f89d 1070 	ldrb.w	r1, [sp, #112]	@ 0x70
 800c856:	2800      	cmp	r0, #0
 800c858:	f000 80b9 	beq.w	800c9ce <acc_detector_distance_alg_phase_comp_mean_sweep+0x192>
 800c85c:	4681      	mov	r9, r0
 800c85e:	4690      	mov	r8, r2
 800c860:	4620      	mov	r0, r4
 800c862:	1e62      	subs	r2, r4, #1
 800c864:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800c866:	f8cd b00c 	str.w	fp, [sp, #12]
 800c86a:	444b      	add	r3, r9
 800c86c:	ee07 0a90 	vmov	s15, r0
 800c870:	fa1f fb83 	uxth.w	fp, r3
 800c874:	b292      	uxth	r2, r2
 800c876:	2300      	movs	r3, #0
 800c878:	3404      	adds	r4, #4
 800c87a:	eb04 0a82 	add.w	sl, r4, r2, lsl #2
 800c87e:	9302      	str	r3, [sp, #8]
 800c880:	eeb8 9a67 	vcvt.f32.u32	s18, s15
 800c884:	465b      	mov	r3, fp
 800c886:	eddf 8a7a 	vldr	s17, [pc, #488]	@ 800ca70 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 800c88a:	46d3      	mov	fp, sl
 800c88c:	46ca      	mov	sl, r9
 800c88e:	4699      	mov	r9, r3
 800c890:	ed9f aa77 	vldr	s20, [pc, #476]	@ 800ca70 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 800c894:	9b04      	ldr	r3, [sp, #16]
 800c896:	eef0 aa4a 	vmov.f32	s21, s20
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d077      	beq.n	800c98e <acc_detector_distance_alg_phase_comp_mean_sweep+0x152>
 800c89e:	9b05      	ldr	r3, [sp, #20]
 800c8a0:	9d02      	ldr	r5, [sp, #8]
 800c8a2:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	@ 0x60
 800c8a6:	195c      	adds	r4, r3, r5
 800c8a8:	eef0 aa4a 	vmov.f32	s21, s20
 800c8ac:	464b      	mov	r3, r9
 800c8ae:	b2a4      	uxth	r4, r4
 800c8b0:	4689      	mov	r9, r1
 800c8b2:	f1b9 0f00 	cmp.w	r9, #0
 800c8b6:	f040 808f 	bne.w	800c9d8 <acc_detector_distance_alg_phase_comp_mean_sweep+0x19c>
 800c8ba:	ed97 0a00 	vldr	s0, [r7]
 800c8be:	edd6 7a00 	vldr	s15, [r6]
 800c8c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c8c6:	ee27 0aa8 	vmul.f32	s0, s15, s17
 800c8ca:	ee78 0ae7 	vsub.f32	s1, s17, s15
 800c8ce:	ee30 0a28 	vadd.f32	s0, s0, s17
 800c8d2:	eef4 0a40 	vcmp.f32	s1, s0
 800c8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8da:	f180 8090 	bvs.w	800c9fe <acc_detector_distance_alg_phase_comp_mean_sweep+0x1c2>
 800c8de:	9301      	str	r3, [sp, #4]
 800c8e0:	f00b fb46 	bl	8017f70 <cexpf>
 800c8e4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800c8e6:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 800c8ea:	eeb0 ba60 	vmov.f32	s22, s1
 800c8ee:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800c8f2:	ee07 3a90 	vmov	s15, r3
 800c8f6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800c8f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8fc:	f933 3025 	ldrsh.w	r3, [r3, r5, lsl #2]
 800c900:	ee27 7aa8 	vmul.f32	s14, s15, s17
 800c904:	ee77 1aa8 	vadd.f32	s3, s15, s17
 800c908:	ee08 3a10 	vmov	s16, r3
 800c90c:	eeb4 7a61 	vcmp.f32	s14, s3
 800c910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c914:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800c918:	9b01      	ldr	r3, [sp, #4]
 800c91a:	eef0 9a40 	vmov.f32	s19, s0
 800c91e:	f180 808a 	bvs.w	800ca36 <acc_detector_distance_alg_phase_comp_mean_sweep+0x1fa>
 800c922:	ee38 8a07 	vadd.f32	s16, s16, s14
 800c926:	ee71 1aa8 	vadd.f32	s3, s3, s17
 800c92a:	ee29 7a88 	vmul.f32	s14, s19, s16
 800c92e:	ee2b 6a21 	vmul.f32	s12, s22, s3
 800c932:	ee69 7aa1 	vmul.f32	s15, s19, s3
 800c936:	ee6b 6a08 	vmul.f32	s13, s22, s16
 800c93a:	ee37 6a46 	vsub.f32	s12, s14, s12
 800c93e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800c942:	eeb4 6a66 	vcmp.f32	s12, s13
 800c946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c94a:	d665      	bvs.n	800ca18 <acc_detector_distance_alg_phase_comp_mean_sweep+0x1dc>
 800c94c:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 800c950:	f938 1024 	ldrsh.w	r1, [r8, r4, lsl #2]
 800c954:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800c958:	ee07 1a10 	vmov	s14, r1
 800c95c:	ee07 2a90 	vmov	s15, r2
 800c960:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c968:	ee37 7a46 	vsub.f32	s14, s14, s12
 800c96c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c970:	ee7a aa87 	vadd.f32	s21, s21, s14
 800c974:	ee3a aa27 	vadd.f32	s20, s20, s15
 800c978:	3604      	adds	r6, #4
 800c97a:	441c      	add	r4, r3
 800c97c:	4455      	add	r5, sl
 800c97e:	45b3      	cmp	fp, r6
 800c980:	b2a4      	uxth	r4, r4
 800c982:	b2ad      	uxth	r5, r5
 800c984:	f107 0704 	add.w	r7, r7, #4
 800c988:	d193      	bne.n	800c8b2 <acc_detector_distance_alg_phase_comp_mean_sweep+0x76>
 800c98a:	4649      	mov	r1, r9
 800c98c:	4699      	mov	r9, r3
 800c98e:	ee8a 0a09 	vdiv.f32	s0, s20, s18
 800c992:	ee8a 8a89 	vdiv.f32	s16, s21, s18
 800c996:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c99a:	ee70 0a28 	vadd.f32	s1, s0, s17
 800c99e:	eef4 7a60 	vcmp.f32	s15, s1
 800c9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a6:	d656      	bvs.n	800ca56 <acc_detector_distance_alg_phase_comp_mean_sweep+0x21a>
 800c9a8:	9b02      	ldr	r3, [sp, #8]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	b298      	uxth	r0, r3
 800c9ae:	ee38 8a27 	vadd.f32	s16, s16, s15
 800c9b2:	9b03      	ldr	r3, [sp, #12]
 800c9b4:	9002      	str	r0, [sp, #8]
 800c9b6:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800c9ba:	ed83 8a00 	vstr	s16, [r3]
 800c9be:	edc3 0a01 	vstr	s1, [r3, #4]
 800c9c2:	4582      	cmp	sl, r0
 800c9c4:	f103 0308 	add.w	r3, r3, #8
 800c9c8:	9303      	str	r3, [sp, #12]
 800c9ca:	f47f af61 	bne.w	800c890 <acc_detector_distance_alg_phase_comp_mean_sweep+0x54>
 800c9ce:	b007      	add	sp, #28
 800c9d0:	ecbd 8b08 	vpop	{d8-d11}
 800c9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d8:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 800c9dc:	f938 1024 	ldrsh.w	r1, [r8, r4, lsl #2]
 800c9e0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800c9e4:	ee07 1a10 	vmov	s14, r1
 800c9e8:	ee07 2a90 	vmov	s15, r2
 800c9ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c9f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9f4:	ee7a aa87 	vadd.f32	s21, s21, s14
 800c9f8:	ee3a aa27 	vadd.f32	s20, s20, s15
 800c9fc:	e7bc      	b.n	800c978 <acc_detector_distance_alg_phase_comp_mean_sweep+0x13c>
 800c9fe:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800ca70 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 800ca02:	9301      	str	r3, [sp, #4]
 800ca04:	eeb0 0a67 	vmov.f32	s0, s15
 800ca08:	eeff 1a00 	vmov.f32	s3, #240	@ 0xbf800000 -1.0
 800ca0c:	eeb0 1a68 	vmov.f32	s2, s17
 800ca10:	f7f4 f902 	bl	8000c18 <__mulsc3>
 800ca14:	9b01      	ldr	r3, [sp, #4]
 800ca16:	e762      	b.n	800c8de <acc_detector_distance_alg_phase_comp_mean_sweep+0xa2>
 800ca18:	eeb0 1a48 	vmov.f32	s2, s16
 800ca1c:	eef0 0a4b 	vmov.f32	s1, s22
 800ca20:	eeb0 0a69 	vmov.f32	s0, s19
 800ca24:	9301      	str	r3, [sp, #4]
 800ca26:	f7f4 f8f7 	bl	8000c18 <__mulsc3>
 800ca2a:	9b01      	ldr	r3, [sp, #4]
 800ca2c:	eeb0 6a40 	vmov.f32	s12, s0
 800ca30:	eef0 6a60 	vmov.f32	s13, s1
 800ca34:	e78a      	b.n	800c94c <acc_detector_distance_alg_phase_comp_mean_sweep+0x110>
 800ca36:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800ca3a:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 800ca70 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 800ca3e:	eeb0 0a67 	vmov.f32	s0, s15
 800ca42:	eeb0 1a68 	vmov.f32	s2, s17
 800ca46:	f7f4 f8e7 	bl	8000c18 <__mulsc3>
 800ca4a:	9b01      	ldr	r3, [sp, #4]
 800ca4c:	eeb0 7a40 	vmov.f32	s14, s0
 800ca50:	eef0 1a60 	vmov.f32	s3, s1
 800ca54:	e765      	b.n	800c922 <acc_detector_distance_alg_phase_comp_mean_sweep+0xe6>
 800ca56:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800ca70 <acc_detector_distance_alg_phase_comp_mean_sweep+0x234>
 800ca5a:	9101      	str	r1, [sp, #4]
 800ca5c:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800ca60:	eeb0 1a68 	vmov.f32	s2, s17
 800ca64:	f7f4 f8d8 	bl	8000c18 <__mulsc3>
 800ca68:	9901      	ldr	r1, [sp, #4]
 800ca6a:	eef0 7a40 	vmov.f32	s15, s0
 800ca6e:	e79b      	b.n	800c9a8 <acc_detector_distance_alg_phase_comp_mean_sweep+0x16c>
 800ca70:	00000000 	.word	0x00000000

0800ca74 <acc_detector_distance_alg_argmaxf>:
 800ca74:	b1c9      	cbz	r1, 800caaa <acc_detector_distance_alg_argmaxf+0x36>
 800ca76:	2300      	movs	r3, #0
 800ca78:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800cab0 <acc_detector_distance_alg_argmaxf+0x3c>
 800ca7c:	b410      	push	{r4}
 800ca7e:	461a      	mov	r2, r3
 800ca80:	4604      	mov	r4, r0
 800ca82:	4618      	mov	r0, r3
 800ca84:	ecf4 7a01 	vldmia	r4!, {s15}
 800ca88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca90:	f103 0301 	add.w	r3, r3, #1
 800ca94:	bfc8      	it	gt
 800ca96:	4610      	movgt	r0, r2
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	bfc8      	it	gt
 800ca9c:	eeb0 7a67 	vmovgt.f32	s14, s15
 800caa0:	4291      	cmp	r1, r2
 800caa2:	d8ef      	bhi.n	800ca84 <acc_detector_distance_alg_argmaxf+0x10>
 800caa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800caa8:	4770      	bx	lr
 800caaa:	4608      	mov	r0, r1
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	00000000 	.word	0x00000000

0800cab4 <acc_detector_distance_alg_zero_mean_stdf>:
 800cab4:	b1b9      	cbz	r1, 800cae6 <acc_detector_distance_alg_zero_mean_stdf+0x32>
 800cab6:	1e4b      	subs	r3, r1, #1
 800cab8:	1d02      	adds	r2, r0, #4
 800caba:	b29b      	uxth	r3, r3
 800cabc:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800caec <acc_detector_distance_alg_zero_mean_stdf+0x38>
 800cac0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cac4:	ecf0 7a01 	vldmia	r0!, {s15}
 800cac8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cacc:	4283      	cmp	r3, r0
 800cace:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cad2:	d1f7      	bne.n	800cac4 <acc_detector_distance_alg_zero_mean_stdf+0x10>
 800cad4:	ee07 1a90 	vmov	s15, r1
 800cad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cadc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800cae0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cae4:	4770      	bx	lr
 800cae6:	ed9f 7a01 	vldr	s14, [pc, #4]	@ 800caec <acc_detector_distance_alg_zero_mean_stdf+0x38>
 800caea:	e7f3      	b.n	800cad4 <acc_detector_distance_alg_zero_mean_stdf+0x20>
 800caec:	00000000 	.word	0x00000000

0800caf0 <acc_detector_distance_alg_calc_processing_gain>:
 800caf0:	b508      	push	{r3, lr}
 800caf2:	ed2d 8b02 	vpush	{d8}
 800caf6:	ee08 1a10 	vmov	s16, r1
 800cafa:	f004 fb3d 	bl	8011178 <acc_detector_utils_get_fwhm>
 800cafe:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800cbb4 <acc_detector_distance_alg_calc_processing_gain+0xc4>
 800cb02:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800cb06:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cb0a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800cb0e:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800cb12:	f00b fa65 	bl	8017fe0 <floorf>
 800cb16:	eeb0 8a00 	vmov.f32	s16, #0	@ 0x40000000  2.0
 800cb1a:	ee30 8a08 	vadd.f32	s16, s0, s16
 800cb1e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800cb22:	ee28 0a00 	vmul.f32	s0, s16, s0
 800cb26:	f00b fa5b 	bl	8017fe0 <floorf>
 800cb2a:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 800cb2e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800cb32:	ee17 3a10 	vmov	r3, s14
 800cb36:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800cb3a:	ee70 5a46 	vsub.f32	s11, s0, s12
 800cb3e:	b298      	uxth	r0, r3
 800cb40:	ee17 3a90 	vmov	r3, s15
 800cb44:	eec6 6a25 	vdiv.f32	s13, s12, s11
 800cb48:	b299      	uxth	r1, r3
 800cb4a:	b380      	cbz	r0, 800cbae <acc_detector_distance_alg_calc_processing_gain+0xbe>
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	4613      	mov	r3, r2
 800cb50:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800cbb8 <acc_detector_distance_alg_calc_processing_gain+0xc8>
 800cb54:	ee07 3a90 	vmov	s15, r3
 800cb58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb5c:	3201      	adds	r2, #1
 800cb5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cb62:	b293      	uxth	r3, r2
 800cb64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cb68:	4283      	cmp	r3, r0
 800cb6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cb6e:	d3f1      	bcc.n	800cb54 <acc_detector_distance_alg_calc_processing_gain+0x64>
 800cb70:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cb74:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cb78:	ee38 8a67 	vsub.f32	s16, s16, s15
 800cb7c:	1a09      	subs	r1, r1, r0
 800cb7e:	2900      	cmp	r1, #0
 800cb80:	eec7 6a88 	vdiv.f32	s13, s15, s16
 800cb84:	dd0e      	ble.n	800cba4 <acc_detector_distance_alg_calc_processing_gain+0xb4>
 800cb86:	2300      	movs	r3, #0
 800cb88:	1c5a      	adds	r2, r3, #1
 800cb8a:	ee07 3a90 	vmov	s15, r3
 800cb8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb92:	b293      	uxth	r3, r2
 800cb94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cb98:	428b      	cmp	r3, r1
 800cb9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cb9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cba2:	dbf1      	blt.n	800cb88 <acc_detector_distance_alg_calc_processing_gain+0x98>
 800cba4:	ecbd 8b02 	vpop	{d8}
 800cba8:	eeb0 0a47 	vmov.f32	s0, s14
 800cbac:	bd08      	pop	{r3, pc}
 800cbae:	ed9f 7a02 	vldr	s14, [pc, #8]	@ 800cbb8 <acc_detector_distance_alg_calc_processing_gain+0xc8>
 800cbb2:	e7dd      	b.n	800cb70 <acc_detector_distance_alg_calc_processing_gain+0x80>
 800cbb4:	3b23d70a 	.word	0x3b23d70a
 800cbb8:	00000000 	.word	0x00000000

0800cbbc <acc_detector_distance_cal_result_static_map_init>:
 800cbbc:	b410      	push	{r4}
 800cbbe:	b121      	cbz	r1, 800cbca <acc_detector_distance_cal_result_static_map_init+0xe>
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	2401      	movs	r4, #1
 800cbc4:	6001      	str	r1, [r0, #0]
 800cbc6:	8084      	strh	r4, [r0, #4]
 800cbc8:	2104      	movs	r1, #4
 800cbca:	b11a      	cbz	r2, 800cbd4 <acc_detector_distance_cal_result_static_map_init+0x18>
 800cbcc:	6081      	str	r1, [r0, #8]
 800cbce:	8182      	strh	r2, [r0, #12]
 800cbd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cbd4:	1d0a      	adds	r2, r1, #4
 800cbd6:	4413      	add	r3, r2
 800cbd8:	1d1c      	adds	r4, r3, #4
 800cbda:	e9c0 3406 	strd	r3, r4, [r0, #24]
 800cbde:	6101      	str	r1, [r0, #16]
 800cbe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbe4:	6142      	str	r2, [r0, #20]
 800cbe6:	4770      	bx	lr

0800cbe8 <acc_detector_distance_cal_result_dynamic_map_init>:
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2301      	movs	r3, #1
 800cbec:	8002      	strh	r2, [r0, #0]
 800cbee:	8043      	strh	r3, [r0, #2]
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop

0800cbf4 <acc_detector_distance_cal_result_static_validate>:
 800cbf4:	b148      	cbz	r0, 800cc0a <acc_detector_distance_cal_result_static_validate+0x16>
 800cbf6:	6989      	ldr	r1, [r1, #24]
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	5844      	ldr	r4, [r0, r1]
 800cbfc:	f006 fe32 	bl	8013864 <acc_alg_basic_util_crc32>
 800cc00:	1a20      	subs	r0, r4, r0
 800cc02:	fab0 f080 	clz	r0, r0
 800cc06:	0940      	lsrs	r0, r0, #5
 800cc08:	bd10      	pop	{r4, pc}
 800cc0a:	4770      	bx	lr

0800cc0c <acc_detector_distance_cal_result_dynamic_validate>:
 800cc0c:	b158      	cbz	r0, 800cc26 <acc_detector_distance_cal_result_dynamic_validate+0x1a>
 800cc0e:	8849      	ldrh	r1, [r1, #2]
 800cc10:	b510      	push	{r4, lr}
 800cc12:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 800cc16:	0089      	lsls	r1, r1, #2
 800cc18:	f006 fe24 	bl	8013864 <acc_alg_basic_util_crc32>
 800cc1c:	1a20      	subs	r0, r4, r0
 800cc1e:	fab0 f080 	clz	r0, r0
 800cc22:	0940      	lsrs	r0, r0, #5
 800cc24:	bd10      	pop	{r4, pc}
 800cc26:	4770      	bx	lr

0800cc28 <acc_detector_distance_cal_result_static_crc_set>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	698d      	ldr	r5, [r1, #24]
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	4604      	mov	r4, r0
 800cc30:	f006 fe18 	bl	8013864 <acc_alg_basic_util_crc32>
 800cc34:	5160      	str	r0, [r4, r5]
 800cc36:	bd38      	pop	{r3, r4, r5, pc}

0800cc38 <acc_detector_distance_cal_result_dynamic_crc_set>:
 800cc38:	b538      	push	{r3, r4, r5, lr}
 800cc3a:	884d      	ldrh	r5, [r1, #2]
 800cc3c:	00a9      	lsls	r1, r5, #2
 800cc3e:	4604      	mov	r4, r0
 800cc40:	f006 fe10 	bl	8013864 <acc_alg_basic_util_crc32>
 800cc44:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800cc48:	bd38      	pop	{r3, r4, r5, pc}
 800cc4a:	bf00      	nop

0800cc4c <acc_detector_distance_cal_result_bg_noise_array_get>:
 800cc4c:	b912      	cbnz	r2, 800cc54 <acc_detector_distance_cal_result_bg_noise_array_get+0x8>
 800cc4e:	680b      	ldr	r3, [r1, #0]
 800cc50:	4418      	add	r0, r3
 800cc52:	4770      	bx	lr
 800cc54:	688b      	ldr	r3, [r1, #8]
 800cc56:	4418      	add	r0, r3
 800cc58:	4770      	bx	lr
 800cc5a:	bf00      	nop

0800cc5c <acc_detector_distance_cal_result_reference_temperature_get>:
 800cc5c:	690b      	ldr	r3, [r1, #16]
 800cc5e:	4418      	add	r0, r3
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop

0800cc64 <acc_detector_distance_cal_result_loopback_peak_distance_get>:
 800cc64:	880b      	ldrh	r3, [r1, #0]
 800cc66:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800cc6a:	4770      	bx	lr

0800cc6c <acc_detector_distance_cal_result_aggregator_partition_get>:
 800cc6c:	694b      	ldr	r3, [r1, #20]
 800cc6e:	4418      	add	r0, r3
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop

0800cc74 <acc_detector_distance_calibration_offset_settings_set>:
 800cc74:	b510      	push	{r4, lr}
 800cc76:	f06f 011d 	mvn.w	r1, #29
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	f002 fa80 	bl	800f180 <acc_config_start_point_set>
 800cc80:	4620      	mov	r0, r4
 800cc82:	2132      	movs	r1, #50	@ 0x32
 800cc84:	f002 fa80 	bl	800f188 <acc_config_num_points_set>
 800cc88:	4620      	mov	r0, r4
 800cc8a:	2101      	movs	r1, #1
 800cc8c:	f002 fa80 	bl	800f190 <acc_config_step_length_set>
 800cc90:	4620      	mov	r0, r4
 800cc92:	2140      	movs	r1, #64	@ 0x40
 800cc94:	f002 fa84 	bl	800f1a0 <acc_config_hwaas_set>
 800cc98:	4620      	mov	r0, r4
 800cc9a:	2110      	movs	r1, #16
 800cc9c:	f002 fa84 	bl	800f1a8 <acc_config_receiver_gain_set>
 800cca0:	4620      	mov	r0, r4
 800cca2:	2101      	movs	r1, #1
 800cca4:	f002 fa84 	bl	800f1b0 <acc_config_enable_tx_set>
 800cca8:	4620      	mov	r0, r4
 800ccaa:	2101      	movs	r1, #1
 800ccac:	f002 fa84 	bl	800f1b8 <acc_config_phase_enhancement_set>
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	f002 fb3e 	bl	800f334 <acc_config_enable_loopback_set>
 800ccb8:	4620      	mov	r0, r4
 800ccba:	2101      	movs	r1, #1
 800ccbc:	f002 fa6c 	bl	800f198 <acc_config_profile_set>
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	2102      	movs	r1, #2
 800ccc4:	f002 fb10 	bl	800f2e8 <acc_config_prf_set>
 800ccc8:	4620      	mov	r0, r4
 800ccca:	2101      	movs	r1, #1
 800cccc:	f002 fa78 	bl	800f1c0 <acc_config_sweeps_per_frame_set>
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	2101      	movs	r1, #1
 800ccd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccd8:	f002 b824 	b.w	800ed24 <acc_config_num_subsweeps_set>

0800ccdc <acc_detector_distance_calibration_offset_process>:
 800ccdc:	b570      	push	{r4, r5, r6, lr}
 800ccde:	ed2d 8b02 	vpush	{d8}
 800cce2:	460d      	mov	r5, r1
 800cce4:	b08e      	sub	sp, #56	@ 0x38
 800cce6:	2101      	movs	r1, #1
 800cce8:	2300      	movs	r3, #0
 800ccea:	4604      	mov	r4, r0
 800ccec:	aa09      	add	r2, sp, #36	@ 0x24
 800ccee:	4608      	mov	r0, r1
 800ccf0:	ed9f 8a28 	vldr	s16, [pc, #160]	@ 800cd94 <acc_detector_distance_calibration_offset_process+0xb8>
 800ccf4:	930d      	str	r3, [sp, #52]	@ 0x34
 800ccf6:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 800ccfa:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 800ccfe:	f7ff f9f3 	bl	800c0e8 <acc_detector_distance_alg_get_distance_filter_coeffs>
 800cd02:	4620      	mov	r0, r4
 800cd04:	f104 02c8 	add.w	r2, r4, #200	@ 0xc8
 800cd08:	462b      	mov	r3, r5
 800cd0a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800cd0e:	ee07 1a10 	vmov	s14, r1
 800cd12:	f930 1b04 	ldrsh.w	r1, [r0], #4
 800cd16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cd1a:	ee07 1a90 	vmov	s15, r1
 800cd1e:	ee67 6a08 	vmul.f32	s13, s14, s16
 800cd22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd26:	4282      	cmp	r2, r0
 800cd28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd2c:	ed83 7a01 	vstr	s14, [r3, #4]
 800cd30:	edc3 7a00 	vstr	s15, [r3]
 800cd34:	f103 0308 	add.w	r3, r3, #8
 800cd38:	d1e7      	bne.n	800cd0a <acc_detector_distance_calibration_offset_process+0x2e>
 800cd3a:	a809      	add	r0, sp, #36	@ 0x24
 800cd3c:	462a      	mov	r2, r5
 800cd3e:	4629      	mov	r1, r5
 800cd40:	2332      	movs	r3, #50	@ 0x32
 800cd42:	f7ff f90d 	bl	800bf60 <acc_detector_distance_alg_filtfilt>
 800cd46:	462a      	mov	r2, r5
 800cd48:	2332      	movs	r3, #50	@ 0x32
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	f004 fa85 	bl	801125c <acc_detector_utils_get_abs_sweep>
 800cd52:	2132      	movs	r1, #50	@ 0x32
 800cd54:	4628      	mov	r0, r5
 800cd56:	f7ff fe8d 	bl	800ca74 <acc_detector_distance_alg_argmaxf>
 800cd5a:	ae08      	add	r6, sp, #32
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	2301      	movs	r3, #1
 800cd60:	ac07      	add	r4, sp, #28
 800cd62:	f06f 011d 	mvn.w	r1, #29
 800cd66:	9100      	str	r1, [sp, #0]
 800cd68:	f8ad 201a 	strh.w	r2, [sp, #26]
 800cd6c:	e9cd 4603 	strd	r4, r6, [sp, #12]
 800cd70:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800cd74:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800cd98 <acc_detector_distance_calibration_offset_process+0xbc>
 800cd78:	ed8d 8a07 	vstr	s16, [sp, #28]
 800cd7c:	4628      	mov	r0, r5
 800cd7e:	f10d 021a 	add.w	r2, sp, #26
 800cd82:	2132      	movs	r1, #50	@ 0x32
 800cd84:	f7ff fb1c 	bl	800c3c0 <acc_detector_distance_alg_interpolate_peaks>
 800cd88:	ed9d 0a07 	vldr	s0, [sp, #28]
 800cd8c:	b00e      	add	sp, #56	@ 0x38
 800cd8e:	ecbd 8b02 	vpop	{d8}
 800cd92:	bd70      	pop	{r4, r5, r6, pc}
 800cd94:	00000000 	.word	0x00000000
 800cd98:	3b23d70a 	.word	0x3b23d70a

0800cd9c <acc_detector_distance_calibration_noise_settings_set>:
 800cd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda0:	ed2d 8b02 	vpush	{d8}
 800cda4:	460e      	mov	r6, r1
 800cda6:	b085      	sub	sp, #20
 800cda8:	2101      	movs	r1, #1
 800cdaa:	4605      	mov	r5, r0
 800cdac:	f002 fa08 	bl	800f1c0 <acc_config_sweeps_per_frame_set>
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	f001 ffcd 	bl	800ed50 <acc_config_num_subsweeps_get>
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	4603      	mov	r3, r0
 800cdba:	4630      	mov	r0, r6
 800cdbc:	461f      	mov	r7, r3
 800cdbe:	9303      	str	r3, [sp, #12]
 800cdc0:	f002 fa4e 	bl	800f260 <acc_config_subsweep_enable_loopback_get>
 800cdc4:	1a39      	subs	r1, r7, r0
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	b2c9      	uxtb	r1, r1
 800cdca:	4628      	mov	r0, r5
 800cdcc:	f001 ffaa 	bl	800ed24 <acc_config_num_subsweeps_set>
 800cdd0:	42a7      	cmp	r7, r4
 800cdd2:	d960      	bls.n	800ce96 <acc_detector_distance_calibration_noise_settings_set+0xfa>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	4621      	mov	r1, r4
 800cdda:	4630      	mov	r0, r6
 800cddc:	f002 f904 	bl	800efe8 <acc_config_subsweep_hwaas_get>
 800cde0:	4621      	mov	r1, r4
 800cde2:	4603      	mov	r3, r0
 800cde4:	4630      	mov	r0, r6
 800cde6:	9302      	str	r3, [sp, #8]
 800cde8:	f002 f942 	bl	800f070 <acc_config_subsweep_receiver_gain_get>
 800cdec:	4621      	mov	r1, r4
 800cdee:	4683      	mov	fp, r0
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	f002 f9a3 	bl	800f13c <acc_config_subsweep_phase_enhancement_get>
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	4682      	mov	sl, r0
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	f002 fa30 	bl	800f260 <acc_config_subsweep_enable_loopback_get>
 800ce00:	4621      	mov	r1, r4
 800ce02:	4681      	mov	r9, r0
 800ce04:	4630      	mov	r0, r6
 800ce06:	ee08 9a10 	vmov	s16, r9
 800ce0a:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800ce0e:	f002 f8a7 	bl	800ef60 <acc_config_subsweep_profile_get>
 800ce12:	4621      	mov	r1, r4
 800ce14:	4680      	mov	r8, r0
 800ce16:	4630      	mov	r0, r6
 800ce18:	f002 fa6a 	bl	800f2f0 <acc_config_subsweep_prf_get>
 800ce1c:	464a      	mov	r2, r9
 800ce1e:	4607      	mov	r7, r0
 800ce20:	2100      	movs	r1, #0
 800ce22:	4628      	mov	r0, r5
 800ce24:	f002 f946 	bl	800f0b4 <acc_config_subsweep_enable_tx_set>
 800ce28:	464a      	mov	r2, r9
 800ce2a:	2101      	movs	r1, #1
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	f002 f831 	bl	800ee94 <acc_config_subsweep_step_length_set>
 800ce32:	464a      	mov	r2, r9
 800ce34:	2100      	movs	r1, #0
 800ce36:	4628      	mov	r0, r5
 800ce38:	f001 ffa4 	bl	800ed84 <acc_config_subsweep_start_point_set>
 800ce3c:	464a      	mov	r2, r9
 800ce3e:	21dc      	movs	r1, #220	@ 0xdc
 800ce40:	4628      	mov	r0, r5
 800ce42:	f001 ffe3 	bl	800ee0c <acc_config_subsweep_num_points_set>
 800ce46:	9b02      	ldr	r3, [sp, #8]
 800ce48:	464a      	mov	r2, r9
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	f002 f8a9 	bl	800efa4 <acc_config_subsweep_hwaas_set>
 800ce52:	464a      	mov	r2, r9
 800ce54:	4659      	mov	r1, fp
 800ce56:	4628      	mov	r0, r5
 800ce58:	f002 f8e8 	bl	800f02c <acc_config_subsweep_receiver_gain_set>
 800ce5c:	464a      	mov	r2, r9
 800ce5e:	4651      	mov	r1, sl
 800ce60:	4628      	mov	r0, r5
 800ce62:	f002 f949 	bl	800f0f8 <acc_config_subsweep_phase_enhancement_set>
 800ce66:	ee18 1a10 	vmov	r1, s16
 800ce6a:	464a      	mov	r2, r9
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	f002 f9d5 	bl	800f21c <acc_config_subsweep_enable_loopback_set>
 800ce72:	464a      	mov	r2, r9
 800ce74:	4641      	mov	r1, r8
 800ce76:	4628      	mov	r0, r5
 800ce78:	f002 f850 	bl	800ef1c <acc_config_subsweep_profile_set>
 800ce7c:	464a      	mov	r2, r9
 800ce7e:	4639      	mov	r1, r7
 800ce80:	4628      	mov	r0, r5
 800ce82:	f002 fa0f 	bl	800f2a4 <acc_config_subsweep_prf_set>
 800ce86:	9b01      	ldr	r3, [sp, #4]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	3401      	adds	r4, #1
 800ce8c:	9301      	str	r3, [sp, #4]
 800ce8e:	9b03      	ldr	r3, [sp, #12]
 800ce90:	b2e4      	uxtb	r4, r4
 800ce92:	42a3      	cmp	r3, r4
 800ce94:	d1a0      	bne.n	800cdd8 <acc_detector_distance_calibration_noise_settings_set+0x3c>
 800ce96:	b005      	add	sp, #20
 800ce98:	ecbd 8b02 	vpop	{d8}
 800ce9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cea0 <acc_detector_distance_calibration_noise_process>:
 800cea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea4:	ed2d 8b02 	vpush	{d8}
 800cea8:	4604      	mov	r4, r0
 800ceaa:	b089      	sub	sp, #36	@ 0x24
 800ceac:	4608      	mov	r0, r1
 800ceae:	4689      	mov	r9, r1
 800ceb0:	4616      	mov	r6, r2
 800ceb2:	4698      	mov	r8, r3
 800ceb4:	f001 ff4c 	bl	800ed50 <acc_config_num_subsweeps_get>
 800ceb8:	2100      	movs	r1, #0
 800ceba:	4682      	mov	sl, r0
 800cebc:	4648      	mov	r0, r9
 800cebe:	f002 f9cf 	bl	800f260 <acc_config_subsweep_enable_loopback_get>
 800cec2:	4582      	cmp	sl, r0
 800cec4:	d952      	bls.n	800cf6c <acc_detector_distance_calibration_noise_process+0xcc>
 800cec6:	ed9f 8a2c 	vldr	s16, [pc, #176]	@ 800cf78 <acc_detector_distance_calibration_noise_process+0xd8>
 800ceca:	4605      	mov	r5, r0
 800cecc:	f504 745c 	add.w	r4, r4, #880	@ 0x370
 800ced0:	4629      	mov	r1, r5
 800ced2:	4648      	mov	r0, r9
 800ced4:	f002 f844 	bl	800ef60 <acc_config_subsweep_profile_get>
 800ced8:	4629      	mov	r1, r5
 800ceda:	4683      	mov	fp, r0
 800cedc:	4648      	mov	r0, r9
 800cede:	f001 fffb 	bl	800eed8 <acc_config_subsweep_step_length_get>
 800cee2:	4601      	mov	r1, r0
 800cee4:	9001      	str	r0, [sp, #4]
 800cee6:	4658      	mov	r0, fp
 800cee8:	f7ff f88e 	bl	800c008 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 800ceec:	9901      	ldr	r1, [sp, #4]
 800ceee:	4607      	mov	r7, r0
 800cef0:	aa03      	add	r2, sp, #12
 800cef2:	4658      	mov	r0, fp
 800cef4:	f7ff f8f8 	bl	800c0e8 <acc_detector_distance_alg_get_distance_filter_coeffs>
 800cef8:	b3c8      	cbz	r0, 800cf6e <acc_detector_distance_calibration_noise_process+0xce>
 800cefa:	f5a4 725c 	sub.w	r2, r4, #880	@ 0x370
 800cefe:	4633      	mov	r3, r6
 800cf00:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800cf04:	ee07 1a10 	vmov	s14, r1
 800cf08:	f932 1b04 	ldrsh.w	r1, [r2], #4
 800cf0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cf10:	ee07 1a90 	vmov	s15, r1
 800cf14:	ee67 6a08 	vmul.f32	s13, s14, s16
 800cf18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf1c:	42a2      	cmp	r2, r4
 800cf1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf22:	ed83 7a01 	vstr	s14, [r3, #4]
 800cf26:	edc3 7a00 	vstr	s15, [r3]
 800cf2a:	f103 0308 	add.w	r3, r3, #8
 800cf2e:	d1e7      	bne.n	800cf00 <acc_detector_distance_calibration_noise_process+0x60>
 800cf30:	f1c7 0b6e 	rsb	fp, r7, #110	@ 0x6e
 800cf34:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800cf38:	23dc      	movs	r3, #220	@ 0xdc
 800cf3a:	4632      	mov	r2, r6
 800cf3c:	4631      	mov	r1, r6
 800cf3e:	a803      	add	r0, sp, #12
 800cf40:	fa1f fb8b 	uxth.w	fp, fp
 800cf44:	f7ff f80c 	bl	800bf60 <acc_detector_distance_alg_filtfilt>
 800cf48:	4639      	mov	r1, r7
 800cf4a:	465b      	mov	r3, fp
 800cf4c:	4632      	mov	r2, r6
 800cf4e:	4630      	mov	r0, r6
 800cf50:	f004 f984 	bl	801125c <acc_detector_utils_get_abs_sweep>
 800cf54:	4659      	mov	r1, fp
 800cf56:	4630      	mov	r0, r6
 800cf58:	f7ff fdac 	bl	800cab4 <acc_detector_distance_alg_zero_mean_stdf>
 800cf5c:	3501      	adds	r5, #1
 800cf5e:	b2ed      	uxtb	r5, r5
 800cf60:	45aa      	cmp	sl, r5
 800cf62:	f504 745c 	add.w	r4, r4, #880	@ 0x370
 800cf66:	eca8 0a01 	vstmia	r8!, {s0}
 800cf6a:	d8b1      	bhi.n	800ced0 <acc_detector_distance_calibration_noise_process+0x30>
 800cf6c:	2001      	movs	r0, #1
 800cf6e:	b009      	add	sp, #36	@ 0x24
 800cf70:	ecbd 8b02 	vpop	{d8}
 800cf74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf78:	00000000 	.word	0x00000000

0800cf7c <get_radar_equation_parameters_for_distance>:
 800cf7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf80:	4607      	mov	r7, r0
 800cf82:	ed2d 8b02 	vpush	{d8}
 800cf86:	460d      	mov	r5, r1
 800cf88:	461e      	mov	r6, r3
 800cf8a:	b982      	cbnz	r2, 800cfae <get_radar_equation_parameters_for_distance+0x32>
 800cf8c:	3210      	adds	r2, #16
 800cf8e:	2001      	movs	r0, #1
 800cf90:	f837 3012 	ldrh.w	r3, [r7, r2, lsl #1]
 800cf94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf96:	ee07 3a90 	vmov	s15, r3
 800cf9a:	ecbd 8b02 	vpop	{d8}
 800cf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa2:	edc6 7a00 	vstr	s15, [r6]
 800cfa6:	682b      	ldr	r3, [r5, #0]
 800cfa8:	6013      	str	r3, [r2, #0]
 800cfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfae:	f04f 0900 	mov.w	r9, #0
 800cfb2:	f890 801d 	ldrb.w	r8, [r0, #29]
 800cfb6:	eeb0 8a40 	vmov.f32	s16, s0
 800cfba:	464c      	mov	r4, r9
 800cfbc:	2001      	movs	r0, #1
 800cfbe:	f002 fa9f 	bl	800f500 <acc_processing_points_to_meter>
 800cfc2:	eb07 0344 	add.w	r3, r7, r4, lsl #1
 800cfc6:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800cfc8:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800cfca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfcc:	fb12 f201 	smulbb	r2, r2, r1
 800cfd0:	fa13 f282 	uxtah	r2, r3, r2
 800cfd4:	ee07 2a90 	vmov	s15, r2
 800cfd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfdc:	f109 0901 	add.w	r9, r9, #1
 800cfe0:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cfe4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cfe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfec:	d40e      	bmi.n	800d00c <get_radar_equation_parameters_for_distance+0x90>
 800cfee:	fa5f f489 	uxtb.w	r4, r9
 800cff2:	45a0      	cmp	r8, r4
 800cff4:	d2e2      	bcs.n	800cfbc <get_radar_equation_parameters_for_distance+0x40>
 800cff6:	4b0b      	ldr	r3, [pc, #44]	@ (800d024 <get_radar_equation_parameters_for_distance+0xa8>)
 800cff8:	4a0b      	ldr	r2, [pc, #44]	@ (800d028 <get_radar_equation_parameters_for_distance+0xac>)
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	490b      	ldr	r1, [pc, #44]	@ (800d02c <get_radar_equation_parameters_for_distance+0xb0>)
 800cffe:	2000      	movs	r0, #0
 800d000:	4798      	blx	r3
 800d002:	ecbd 8b02 	vpop	{d8}
 800d006:	2000      	movs	r0, #0
 800d008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d00c:	2c00      	cmp	r4, #0
 800d00e:	d0f2      	beq.n	800cff6 <get_radar_equation_parameters_for_distance+0x7a>
 800d010:	1e62      	subs	r2, r4, #1
 800d012:	b2d2      	uxtb	r2, r2
 800d014:	2a03      	cmp	r2, #3
 800d016:	d8ee      	bhi.n	800cff6 <get_radar_equation_parameters_for_distance+0x7a>
 800d018:	18bb      	adds	r3, r7, r2
 800d01a:	7e5b      	ldrb	r3, [r3, #25]
 800d01c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800d020:	e7b4      	b.n	800cf8c <get_radar_equation_parameters_for_distance+0x10>
 800d022:	bf00      	nop
 800d024:	200008cc 	.word	0x200008cc
 800d028:	08019e44 	.word	0x08019e44
 800d02c:	08019e68 	.word	0x08019e68

0800d030 <map_cal_result_data>:
 800d030:	7903      	ldrb	r3, [r0, #4]
 800d032:	2b02      	cmp	r3, #2
 800d034:	b430      	push	{r4, r5}
 800d036:	d113      	bne.n	800d060 <map_cal_result_data+0x30>
 800d038:	f8d0 5098 	ldr.w	r5, [r0, #152]	@ 0x98
 800d03c:	f8d0 40a4 	ldr.w	r4, [r0, #164]	@ 0xa4
 800d040:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 800d044:	f8d0 30d4 	ldr.w	r3, [r0, #212]	@ 0xd4
 800d048:	440d      	add	r5, r1
 800d04a:	440c      	add	r4, r1
 800d04c:	440a      	add	r2, r1
 800d04e:	440b      	add	r3, r1
 800d050:	f8c0 509c 	str.w	r5, [r0, #156]	@ 0x9c
 800d054:	f8c0 40a8 	str.w	r4, [r0, #168]	@ 0xa8
 800d058:	f8c0 20cc 	str.w	r2, [r0, #204]	@ 0xcc
 800d05c:	f8c0 30d8 	str.w	r3, [r0, #216]	@ 0xd8
 800d060:	7943      	ldrb	r3, [r0, #5]
 800d062:	b94b      	cbnz	r3, 800d078 <map_cal_result_data+0x48>
 800d064:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 800d068:	f8d0 20bc 	ldr.w	r2, [r0, #188]	@ 0xbc
 800d06c:	440b      	add	r3, r1
 800d06e:	4411      	add	r1, r2
 800d070:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
 800d074:	f8c0 10c0 	str.w	r1, [r0, #192]	@ 0xc0
 800d078:	bc30      	pop	{r4, r5}
 800d07a:	4770      	bx	lr

0800d07c <reset_calibration_state.part.0>:
 800d07c:	b430      	push	{r4, r5}
 800d07e:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800d080:	b18d      	cbz	r5, 800d0a6 <reset_calibration_state.part.0+0x2a>
 800d082:	f8d0 20cc 	ldr.w	r2, [r0, #204]	@ 0xcc
 800d086:	f8d0 40d8 	ldr.w	r4, [r0, #216]	@ 0xd8
 800d08a:	3d01      	subs	r5, #1
 800d08c:	b2ad      	uxth	r5, r5
 800d08e:	1d13      	adds	r3, r2, #4
 800d090:	2100      	movs	r1, #0
 800d092:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d096:	e000      	b.n	800d09a <reset_calibration_state.part.0+0x1e>
 800d098:	3304      	adds	r3, #4
 800d09a:	42ab      	cmp	r3, r5
 800d09c:	6011      	str	r1, [r2, #0]
 800d09e:	f844 1b04 	str.w	r1, [r4], #4
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	d1f8      	bne.n	800d098 <reset_calibration_state.part.0+0x1c>
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	bc30      	pop	{r4, r5}
 800d0ac:	f8a0 206a 	strh.w	r2, [r0, #106]	@ 0x6a
 800d0b0:	f880 306c 	strb.w	r3, [r0, #108]	@ 0x6c
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop

0800d0b8 <process_subsweeps>:
 800d0b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0bc:	f8b0 4066 	ldrh.w	r4, [r0, #102]	@ 0x66
 800d0c0:	b091      	sub	sp, #68	@ 0x44
 800d0c2:	4605      	mov	r5, r0
 800d0c4:	7940      	ldrb	r0, [r0, #5]
 800d0c6:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800d0ca:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800d0ce:	b388      	cbz	r0, 800d134 <process_subsweeps+0x7c>
 800d0d0:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 800d0d2:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 800d0d4:	b303      	cbz	r3, 800d118 <process_subsweeps+0x60>
 800d0d6:	1e58      	subs	r0, r3, #1
 800d0d8:	b280      	uxth	r0, r0
 800d0da:	3001      	adds	r0, #1
 800d0dc:	ed9f 6a43 	vldr	s12, [pc, #268]	@ 800d1ec <process_subsweeps+0x134>
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800d0e6:	4614      	mov	r4, r2
 800d0e8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800d0ec:	ee07 6a10 	vmov	s14, r6
 800d0f0:	f931 6b04 	ldrsh.w	r6, [r1], #4
 800d0f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d0f8:	ee07 6a90 	vmov	s15, r6
 800d0fc:	ee67 6a06 	vmul.f32	s13, s14, s12
 800d100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d104:	4288      	cmp	r0, r1
 800d106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d10a:	ed84 7a01 	vstr	s14, [r4, #4]
 800d10e:	edc4 7a00 	vstr	s15, [r4]
 800d112:	f104 0408 	add.w	r4, r4, #8
 800d116:	d1e7      	bne.n	800d0e8 <process_subsweeps+0x30>
 800d118:	4611      	mov	r1, r2
 800d11a:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d11e:	f7fe ff1f 	bl	800bf60 <acc_detector_distance_alg_filtfilt>
 800d122:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 800d124:	8f2b      	ldrh	r3, [r5, #56]	@ 0x38
 800d126:	8f69      	ldrh	r1, [r5, #58]	@ 0x3a
 800d128:	4610      	mov	r0, r2
 800d12a:	f004 f897 	bl	801125c <acc_detector_utils_get_abs_sweep>
 800d12e:	b011      	add	sp, #68	@ 0x44
 800d130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d134:	f8b5 c030 	ldrh.w	ip, [r5, #48]	@ 0x30
 800d138:	f10c 0c01 	add.w	ip, ip, #1
 800d13c:	4698      	mov	r8, r3
 800d13e:	4617      	mov	r7, r2
 800d140:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800d144:	2301      	movs	r3, #1
 800d146:	aa06      	add	r2, sp, #24
 800d148:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d14c:	3301      	adds	r3, #1
 800d14e:	6808      	ldr	r0, [r1, #0]
 800d150:	f842 0c04 	str.w	r0, [r2, #-4]
 800d154:	2b0b      	cmp	r3, #11
 800d156:	4461      	add	r1, ip
 800d158:	d1f5      	bne.n	800d146 <process_subsweeps+0x8e>
 800d15a:	a806      	add	r0, sp, #24
 800d15c:	220a      	movs	r2, #10
 800d15e:	4639      	mov	r1, r7
 800d160:	f004 f894 	bl	801128c <acc_detector_utils_get_complex_angle>
 800d164:	b186      	cbz	r6, 800d188 <process_subsweeps+0xd0>
 800d166:	ed95 7a17 	vldr	s14, [r5, #92]	@ 0x5c
 800d16a:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800d1f0 <process_subsweeps+0x138>
 800d16e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d172:	463b      	mov	r3, r7
 800d174:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800d178:	edd3 7a00 	vldr	s15, [r3]
 800d17c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d180:	ece3 7a01 	vstmia	r3!, {s15}
 800d184:	429a      	cmp	r2, r3
 800d186:	d1f7      	bne.n	800d178 <process_subsweeps+0xc0>
 800d188:	f1b8 0f00 	cmp.w	r8, #0
 800d18c:	d019      	beq.n	800d1c2 <process_subsweeps+0x10a>
 800d18e:	f04f 0900 	mov.w	r9, #0
 800d192:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 800d194:	f8d5 60b4 	ldr.w	r6, [r5, #180]	@ 0xb4
 800d198:	1c51      	adds	r1, r2, #1
 800d19a:	fb11 f109 	smulbb	r1, r1, r9
 800d19e:	b289      	uxth	r1, r1
 800d1a0:	eba1 0009 	sub.w	r0, r1, r9
 800d1a4:	3101      	adds	r1, #1
 800d1a6:	b280      	uxth	r0, r0
 800d1a8:	b289      	uxth	r1, r1
 800d1aa:	0092      	lsls	r2, r2, #2
 800d1ac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d1b0:	f109 0901 	add.w	r9, r9, #1
 800d1b4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800d1b8:	f008 fd39 	bl	8015c2e <memcpy>
 800d1bc:	f1b9 0f0a 	cmp.w	r9, #10
 800d1c0:	d1e7      	bne.n	800d192 <process_subsweeps+0xda>
 800d1c2:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800d1c6:	f8cd 8010 	str.w	r8, [sp, #16]
 800d1ca:	2001      	movs	r0, #1
 800d1cc:	f8d5 30c0 	ldr.w	r3, [r5, #192]	@ 0xc0
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800d1d6:	9701      	str	r7, [sp, #4]
 800d1d8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800d1da:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
 800d1dc:	4622      	mov	r2, r4
 800d1de:	210a      	movs	r1, #10
 800d1e0:	f7ff fb2c 	bl	800c83c <acc_detector_distance_alg_phase_comp_mean_sweep>
 800d1e4:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 800d1e6:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 800d1e8:	e796      	b.n	800d118 <process_subsweeps+0x60>
 800d1ea:	bf00      	nop
 800d1ec:	00000000 	.word	0x00000000
 800d1f0:	3d4ccccd 	.word	0x3d4ccccd

0800d1f4 <acc_detector_distance_processor_get_sizes>:
 800d1f4:	b510      	push	{r4, lr}
 800d1f6:	b118      	cbz	r0, 800d200 <acc_detector_distance_processor_get_sizes+0xc>
 800d1f8:	4b09      	ldr	r3, [pc, #36]	@ (800d220 <acc_detector_distance_processor_get_sizes+0x2c>)
 800d1fa:	6804      	ldr	r4, [r0, #0]
 800d1fc:	429c      	cmp	r4, r3
 800d1fe:	d007      	beq.n	800d210 <acc_detector_distance_processor_get_sizes+0x1c>
 800d200:	4b08      	ldr	r3, [pc, #32]	@ (800d224 <acc_detector_distance_processor_get_sizes+0x30>)
 800d202:	4a09      	ldr	r2, [pc, #36]	@ (800d228 <acc_detector_distance_processor_get_sizes+0x34>)
 800d204:	691b      	ldr	r3, [r3, #16]
 800d206:	4909      	ldr	r1, [pc, #36]	@ (800d22c <acc_detector_distance_processor_get_sizes+0x38>)
 800d208:	2000      	movs	r0, #0
 800d20a:	4798      	blx	r3
 800d20c:	2000      	movs	r0, #0
 800d20e:	bd10      	pop	{r4, pc}
 800d210:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 800d214:	600b      	str	r3, [r1, #0]
 800d216:	f8d0 30e0 	ldr.w	r3, [r0, #224]	@ 0xe0
 800d21a:	6013      	str	r3, [r2, #0]
 800d21c:	2001      	movs	r0, #1
 800d21e:	bd10      	pop	{r4, pc}
 800d220:	0fa1afe1 	.word	0x0fa1afe1
 800d224:	200008cc 	.word	0x200008cc
 800d228:	08019e84 	.word	0x08019e84
 800d22c:	08019e68 	.word	0x08019e68

0800d230 <acc_detector_distance_processor_create>:
 800d230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d234:	2b04      	cmp	r3, #4
 800d236:	ed2d 8b02 	vpush	{d8}
 800d23a:	d90b      	bls.n	800d254 <acc_detector_distance_processor_create+0x24>
 800d23c:	4bbc      	ldr	r3, [pc, #752]	@ (800d530 <acc_detector_distance_processor_create+0x300>)
 800d23e:	4abd      	ldr	r2, [pc, #756]	@ (800d534 <acc_detector_distance_processor_create+0x304>)
 800d240:	691b      	ldr	r3, [r3, #16]
 800d242:	49bd      	ldr	r1, [pc, #756]	@ (800d538 <acc_detector_distance_processor_create+0x308>)
 800d244:	2000      	movs	r0, #0
 800d246:	4798      	blx	r3
 800d248:	2400      	movs	r4, #0
 800d24a:	ecbd 8b02 	vpop	{d8}
 800d24e:	4620      	mov	r0, r4
 800d250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d254:	461f      	mov	r7, r3
 800d256:	4680      	mov	r8, r0
 800d258:	460d      	mov	r5, r1
 800d25a:	4616      	mov	r6, r2
 800d25c:	f240 13f1 	movw	r3, #497	@ 0x1f1
 800d260:	4ab5      	ldr	r2, [pc, #724]	@ (800d538 <acc_detector_distance_processor_create+0x308>)
 800d262:	21e4      	movs	r1, #228	@ 0xe4
 800d264:	2001      	movs	r0, #1
 800d266:	f004 f8f7 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 800d26a:	4604      	mov	r4, r0
 800d26c:	2800      	cmp	r0, #0
 800d26e:	f000 814f 	beq.w	800d510 <acc_detector_distance_processor_create+0x2e0>
 800d272:	46c6      	mov	lr, r8
 800d274:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d278:	46a4      	mov	ip, r4
 800d27a:	f8df 92d8 	ldr.w	r9, [pc, #728]	@ 800d554 <acc_detector_distance_processor_create+0x324>
 800d27e:	f84c 9b04 	str.w	r9, [ip], #4
 800d282:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d286:	f8de 3000 	ldr.w	r3, [lr]
 800d28a:	f8cc 3000 	str.w	r3, [ip]
 800d28e:	7767      	strb	r7, [r4, #29]
 800d290:	b15f      	cbz	r7, 800d2aa <acc_detector_distance_processor_create+0x7a>
 800d292:	1e78      	subs	r0, r7, #1
 800d294:	fa56 f080 	uxtab	r0, r6, r0
 800d298:	1e72      	subs	r2, r6, #1
 800d29a:	f104 0319 	add.w	r3, r4, #25
 800d29e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800d2a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d2a6:	4290      	cmp	r0, r2
 800d2a8:	d1f9      	bne.n	800d29e <acc_detector_distance_processor_create+0x6e>
 800d2aa:	7966      	ldrb	r6, [r4, #5]
 800d2ac:	2e00      	cmp	r6, #0
 800d2ae:	d160      	bne.n	800d372 <acc_detector_distance_processor_create+0x142>
 800d2b0:	7ea1      	ldrb	r1, [r4, #26]
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f001 fd88 	bl	800edc8 <acc_config_subsweep_start_point_get>
 800d2b8:	7ea1      	ldrb	r1, [r4, #26]
 800d2ba:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800d2bc:	4628      	mov	r0, r5
 800d2be:	f001 fe0b 	bl	800eed8 <acc_config_subsweep_step_length_get>
 800d2c2:	7ea1      	ldrb	r1, [r4, #26]
 800d2c4:	8520      	strh	r0, [r4, #40]	@ 0x28
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	f001 fe4a 	bl	800ef60 <acc_config_subsweep_profile_get>
 800d2cc:	f104 091a 	add.w	r9, r4, #26
 800d2d0:	77a0      	strb	r0, [r4, #30]
 800d2d2:	8626      	strh	r6, [r4, #48]	@ 0x30
 800d2d4:	2701      	movs	r7, #1
 800d2d6:	f109 39ff 	add.w	r9, r9, #4294967295
 800d2da:	f104 0a20 	add.w	sl, r4, #32
 800d2de:	2600      	movs	r6, #0
 800d2e0:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	f001 fdb3 	bl	800ee50 <acc_config_subsweep_num_points_get>
 800d2ea:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800d2ec:	4418      	add	r0, r3
 800d2ee:	8620      	strh	r0, [r4, #48]	@ 0x30
 800d2f0:	f899 1000 	ldrb.w	r1, [r9]
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	f001 fe77 	bl	800efe8 <acc_config_subsweep_hwaas_get>
 800d2fa:	3601      	adds	r6, #1
 800d2fc:	f82a 0b02 	strh.w	r0, [sl], #2
 800d300:	b2f6      	uxtb	r6, r6
 800d302:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800d304:	f8aa 301c 	strh.w	r3, [sl, #28]
 800d308:	42be      	cmp	r6, r7
 800d30a:	d3e9      	bcc.n	800d2e0 <acc_detector_distance_processor_create+0xb0>
 800d30c:	7962      	ldrb	r2, [r4, #5]
 800d30e:	2a00      	cmp	r2, #0
 800d310:	d15b      	bne.n	800d3ca <acc_detector_distance_processor_create+0x19a>
 800d312:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800d314:	f8a4 2066 	strh.w	r2, [r4, #102]	@ 0x66
 800d318:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d31c:	005b      	lsls	r3, r3, #1
 800d31e:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 800d322:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800d324:	7fa0      	ldrb	r0, [r4, #30]
 800d326:	f7fe fe6f 	bl	800c008 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 800d32a:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 800d32c:	8760      	strh	r0, [r4, #58]	@ 0x3a
 800d32e:	ebb2 0f40 	cmp.w	r2, r0, lsl #1
 800d332:	4603      	mov	r3, r0
 800d334:	ea4f 0540 	mov.w	r5, r0, lsl #1
 800d338:	d931      	bls.n	800d39e <acc_detector_distance_processor_create+0x16e>
 800d33a:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 800d33e:	87a0      	strh	r0, [r4, #60]	@ 0x3c
 800d340:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 800d342:	4288      	cmp	r0, r1
 800d344:	d85a      	bhi.n	800d3fc <acc_detector_distance_processor_create+0x1cc>
 800d346:	1a09      	subs	r1, r1, r0
 800d348:	87b9      	strh	r1, [r7, #60]	@ 0x3c
 800d34a:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800d34c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d34e:	7fa0      	ldrb	r0, [r4, #30]
 800d350:	1b52      	subs	r2, r2, r5
 800d352:	fb01 6303 	mla	r3, r1, r3, r6
 800d356:	8722      	strh	r2, [r4, #56]	@ 0x38
 800d358:	6363      	str	r3, [r4, #52]	@ 0x34
 800d35a:	f104 0248 	add.w	r2, r4, #72	@ 0x48
 800d35e:	f7fe fec3 	bl	800c0e8 <acc_detector_distance_alg_get_distance_filter_coeffs>
 800d362:	2800      	cmp	r0, #0
 800d364:	d151      	bne.n	800d40a <acc_detector_distance_processor_create+0x1da>
 800d366:	4d72      	ldr	r5, [pc, #456]	@ (800d530 <acc_detector_distance_processor_create+0x300>)
 800d368:	4a74      	ldr	r2, [pc, #464]	@ (800d53c <acc_detector_distance_processor_create+0x30c>)
 800d36a:	692b      	ldr	r3, [r5, #16]
 800d36c:	4972      	ldr	r1, [pc, #456]	@ (800d538 <acc_detector_distance_processor_create+0x308>)
 800d36e:	4798      	blx	r3
 800d370:	e01b      	b.n	800d3aa <acc_detector_distance_processor_create+0x17a>
 800d372:	7e61      	ldrb	r1, [r4, #25]
 800d374:	4628      	mov	r0, r5
 800d376:	f001 fd27 	bl	800edc8 <acc_config_subsweep_start_point_get>
 800d37a:	7e61      	ldrb	r1, [r4, #25]
 800d37c:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800d37e:	4628      	mov	r0, r5
 800d380:	f001 fdaa 	bl	800eed8 <acc_config_subsweep_step_length_get>
 800d384:	7e61      	ldrb	r1, [r4, #25]
 800d386:	8520      	strh	r0, [r4, #40]	@ 0x28
 800d388:	4628      	mov	r0, r5
 800d38a:	f001 fde9 	bl	800ef60 <acc_config_subsweep_profile_get>
 800d38e:	2300      	movs	r3, #0
 800d390:	77a0      	strb	r0, [r4, #30]
 800d392:	8623      	strh	r3, [r4, #48]	@ 0x30
 800d394:	2f00      	cmp	r7, #0
 800d396:	d0b9      	beq.n	800d30c <acc_detector_distance_processor_create+0xdc>
 800d398:	f104 0919 	add.w	r9, r4, #25
 800d39c:	e79b      	b.n	800d2d6 <acc_detector_distance_processor_create+0xa6>
 800d39e:	4d64      	ldr	r5, [pc, #400]	@ (800d530 <acc_detector_distance_processor_create+0x300>)
 800d3a0:	4a67      	ldr	r2, [pc, #412]	@ (800d540 <acc_detector_distance_processor_create+0x310>)
 800d3a2:	692b      	ldr	r3, [r5, #16]
 800d3a4:	4964      	ldr	r1, [pc, #400]	@ (800d538 <acc_detector_distance_processor_create+0x308>)
 800d3a6:	2000      	movs	r0, #0
 800d3a8:	4798      	blx	r3
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	692b      	ldr	r3, [r5, #16]
 800d3ae:	4a65      	ldr	r2, [pc, #404]	@ (800d544 <acc_detector_distance_processor_create+0x314>)
 800d3b0:	4961      	ldr	r1, [pc, #388]	@ (800d538 <acc_detector_distance_processor_create+0x308>)
 800d3b2:	4605      	mov	r5, r0
 800d3b4:	4798      	blx	r3
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	6025      	str	r5, [r4, #0]
 800d3ba:	f004 f869 	bl	8011490 <acc_rss_integration_mem_free>
 800d3be:	ecbd 8b02 	vpop	{d8}
 800d3c2:	462c      	mov	r4, r5
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ca:	f894 9019 	ldrb.w	r9, [r4, #25]
 800d3ce:	2600      	movs	r6, #0
 800d3d0:	f8a4 6066 	strh.w	r6, [r4, #102]	@ 0x66
 800d3d4:	4631      	mov	r1, r6
 800d3d6:	f1b9 0f00 	cmp.w	r9, #0
 800d3da:	d00b      	beq.n	800d3f4 <acc_detector_distance_processor_create+0x1c4>
 800d3dc:	4628      	mov	r0, r5
 800d3de:	f001 fd37 	bl	800ee50 <acc_config_subsweep_num_points_get>
 800d3e2:	3601      	adds	r6, #1
 800d3e4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800d3e8:	b2f1      	uxtb	r1, r6
 800d3ea:	4403      	add	r3, r0
 800d3ec:	4589      	cmp	r9, r1
 800d3ee:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
 800d3f2:	d8f3      	bhi.n	800d3dc <acc_detector_distance_processor_create+0x1ac>
 800d3f4:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800d3f6:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 800d3fa:	e792      	b.n	800d322 <acc_detector_distance_processor_create+0xf2>
 800d3fc:	4d4c      	ldr	r5, [pc, #304]	@ (800d530 <acc_detector_distance_processor_create+0x300>)
 800d3fe:	4a52      	ldr	r2, [pc, #328]	@ (800d548 <acc_detector_distance_processor_create+0x318>)
 800d400:	692b      	ldr	r3, [r5, #16]
 800d402:	494d      	ldr	r1, [pc, #308]	@ (800d538 <acc_detector_distance_processor_create+0x308>)
 800d404:	2000      	movs	r0, #0
 800d406:	4798      	blx	r3
 800d408:	e7cf      	b.n	800d3aa <acc_detector_distance_processor_create+0x17a>
 800d40a:	edd4 7a02 	vldr	s15, [r4, #8]
 800d40e:	7923      	ldrb	r3, [r4, #4]
 800d410:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800d414:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d418:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d41c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d420:	2b02      	cmp	r3, #2
 800d422:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
 800d426:	d917      	bls.n	800d458 <acc_detector_distance_processor_create+0x228>
 800d428:	2b03      	cmp	r3, #3
 800d42a:	d17a      	bne.n	800d522 <acc_detector_distance_processor_create+0x2f2>
 800d42c:	7fa0      	ldrb	r0, [r4, #30]
 800d42e:	f003 fea3 	bl	8011178 <acc_detector_utils_get_fwhm>
 800d432:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800d434:	eeb0 8a40 	vmov.f32	s16, s0
 800d438:	f7fe fec0 	bl	800c1bc <acc_detector_distance_alg_cfar_window_length>
 800d43c:	eeb0 0a48 	vmov.f32	s0, s16
 800d440:	f8a4 0060 	strh.w	r0, [r4, #96]	@ 0x60
 800d444:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800d446:	f7fe fee1 	bl	800c20c <acc_detector_distance_alg_cfar_guard_half_length>
 800d44a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 800d44e:	f8a4 0062 	strh.w	r0, [r4, #98]	@ 0x62
 800d452:	4403      	add	r3, r0
 800d454:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 800d458:	f898 3000 	ldrb.w	r3, [r8]
 800d45c:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800d45e:	2b02      	cmp	r3, #2
 800d460:	d03b      	beq.n	800d4da <acc_detector_distance_processor_create+0x2aa>
 800d462:	2200      	movs	r2, #0
 800d464:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d468:	b32b      	cbz	r3, 800d4b6 <acc_detector_distance_processor_create+0x286>
 800d46a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800d46c:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 800d470:	3312      	adds	r3, #18
 800d472:	005b      	lsls	r3, r3, #1
 800d474:	ecbd 8b02 	vpop	{d8}
 800d478:	b29b      	uxth	r3, r3
 800d47a:	f101 001f 	add.w	r0, r1, #31
 800d47e:	084a      	lsrs	r2, r1, #1
 800d480:	0940      	lsrs	r0, r0, #5
 800d482:	009d      	lsls	r5, r3, #2
 800d484:	0789      	lsls	r1, r1, #30
 800d486:	bf48      	it	mi
 800d488:	3201      	addmi	r2, #1
 800d48a:	f8a4 3078 	strh.w	r3, [r4, #120]	@ 0x78
 800d48e:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 800d492:	67e5      	str	r5, [r4, #124]	@ 0x7c
 800d494:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 800d498:	2500      	movs	r5, #0
 800d49a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800d49e:	2101      	movs	r1, #1
 800d4a0:	f8a4 0084 	strh.w	r0, [r4, #132]	@ 0x84
 800d4a4:	6725      	str	r5, [r4, #112]	@ 0x70
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800d4ac:	f8a4 2090 	strh.w	r2, [r4, #144]	@ 0x90
 800d4b0:	7621      	strb	r1, [r4, #24]
 800d4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b6:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800d4b8:	f8c4 20b0 	str.w	r2, [r4, #176]	@ 0xb0
 800d4bc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800d4c0:	0040      	lsls	r0, r0, #1
 800d4c2:	b280      	uxth	r0, r0
 800d4c4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800d4c8:	250a      	movs	r5, #10
 800d4ca:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
 800d4ce:	f8a4 00b8 	strh.w	r0, [r4, #184]	@ 0xb8
 800d4d2:	3228      	adds	r2, #40	@ 0x28
 800d4d4:	f8a4 50c4 	strh.w	r5, [r4, #196]	@ 0xc4
 800d4d8:	e7c8      	b.n	800d46c <acc_detector_distance_processor_create+0x23c>
 800d4da:	7963      	ldrb	r3, [r4, #5]
 800d4dc:	f8a4 10a0 	strh.w	r1, [r4, #160]	@ 0xa0
 800d4e0:	008a      	lsls	r2, r1, #2
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	f8c4 20a4 	str.w	r2, [r4, #164]	@ 0xa4
 800d4e8:	f8c4 0098 	str.w	r0, [r4, #152]	@ 0x98
 800d4ec:	b1b3      	cbz	r3, 800d51c <acc_detector_distance_processor_create+0x2ec>
 800d4ee:	7f63      	ldrb	r3, [r4, #29]
 800d4f0:	b29d      	uxth	r5, r3
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	4413      	add	r3, r2
 800d4f6:	18d0      	adds	r0, r2, r3
 800d4f8:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
 800d4fc:	f8c4 00d4 	str.w	r0, [r4, #212]	@ 0xd4
 800d500:	4402      	add	r2, r0
 800d502:	f8a4 50ac 	strh.w	r5, [r4, #172]	@ 0xac
 800d506:	f8a4 10d0 	strh.w	r1, [r4, #208]	@ 0xd0
 800d50a:	f8a4 10dc 	strh.w	r1, [r4, #220]	@ 0xdc
 800d50e:	e7a9      	b.n	800d464 <acc_detector_distance_processor_create+0x234>
 800d510:	4b07      	ldr	r3, [pc, #28]	@ (800d530 <acc_detector_distance_processor_create+0x300>)
 800d512:	4a0e      	ldr	r2, [pc, #56]	@ (800d54c <acc_detector_distance_processor_create+0x31c>)
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	4908      	ldr	r1, [pc, #32]	@ (800d538 <acc_detector_distance_processor_create+0x308>)
 800d518:	4798      	blx	r3
 800d51a:	e696      	b.n	800d24a <acc_detector_distance_processor_create+0x1a>
 800d51c:	2304      	movs	r3, #4
 800d51e:	2501      	movs	r5, #1
 800d520:	e7e8      	b.n	800d4f4 <acc_detector_distance_processor_create+0x2c4>
 800d522:	4d03      	ldr	r5, [pc, #12]	@ (800d530 <acc_detector_distance_processor_create+0x300>)
 800d524:	4a0a      	ldr	r2, [pc, #40]	@ (800d550 <acc_detector_distance_processor_create+0x320>)
 800d526:	692b      	ldr	r3, [r5, #16]
 800d528:	4903      	ldr	r1, [pc, #12]	@ (800d538 <acc_detector_distance_processor_create+0x308>)
 800d52a:	2000      	movs	r0, #0
 800d52c:	4798      	blx	r3
 800d52e:	e73c      	b.n	800d3aa <acc_detector_distance_processor_create+0x17a>
 800d530:	200008cc 	.word	0x200008cc
 800d534:	08019ea0 	.word	0x08019ea0
 800d538:	08019e68 	.word	0x08019e68
 800d53c:	08019f4c 	.word	0x08019f4c
 800d540:	08019ee4 	.word	0x08019ee4
 800d544:	08019f90 	.word	0x08019f90
 800d548:	08019f1c 	.word	0x08019f1c
 800d54c:	08019ebc 	.word	0x08019ebc
 800d550:	08019f74 	.word	0x08019f74
 800d554:	0fa1afe1 	.word	0x0fa1afe1

0800d558 <acc_detector_distance_processor_destroy>:
 800d558:	b118      	cbz	r0, 800d562 <acc_detector_distance_processor_destroy+0xa>
 800d55a:	2200      	movs	r2, #0
 800d55c:	6002      	str	r2, [r0, #0]
 800d55e:	f003 bf97 	b.w	8011490 <acc_rss_integration_mem_free>
 800d562:	4770      	bx	lr

0800d564 <acc_detector_distance_processor_calibration_needed>:
 800d564:	b508      	push	{r3, lr}
 800d566:	b118      	cbz	r0, 800d570 <acc_detector_distance_processor_calibration_needed+0xc>
 800d568:	4b09      	ldr	r3, [pc, #36]	@ (800d590 <acc_detector_distance_processor_calibration_needed+0x2c>)
 800d56a:	6802      	ldr	r2, [r0, #0]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d007      	beq.n	800d580 <acc_detector_distance_processor_calibration_needed+0x1c>
 800d570:	4b08      	ldr	r3, [pc, #32]	@ (800d594 <acc_detector_distance_processor_calibration_needed+0x30>)
 800d572:	4a09      	ldr	r2, [pc, #36]	@ (800d598 <acc_detector_distance_processor_calibration_needed+0x34>)
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	4909      	ldr	r1, [pc, #36]	@ (800d59c <acc_detector_distance_processor_calibration_needed+0x38>)
 800d578:	2000      	movs	r0, #0
 800d57a:	4798      	blx	r3
 800d57c:	2000      	movs	r0, #0
 800d57e:	bd08      	pop	{r3, pc}
 800d580:	7900      	ldrb	r0, [r0, #4]
 800d582:	f1a0 0002 	sub.w	r0, r0, #2
 800d586:	fab0 f080 	clz	r0, r0
 800d58a:	0940      	lsrs	r0, r0, #5
 800d58c:	bd08      	pop	{r3, pc}
 800d58e:	bf00      	nop
 800d590:	0fa1afe1 	.word	0x0fa1afe1
 800d594:	200008cc 	.word	0x200008cc
 800d598:	08019e84 	.word	0x08019e84
 800d59c:	08019e68 	.word	0x08019e68

0800d5a0 <acc_detector_distance_processor_calibrate>:
 800d5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a4:	b092      	sub	sp, #72	@ 0x48
 800d5a6:	b130      	cbz	r0, 800d5b6 <acc_detector_distance_processor_calibrate+0x16>
 800d5a8:	460d      	mov	r5, r1
 800d5aa:	4616      	mov	r6, r2
 800d5ac:	6801      	ldr	r1, [r0, #0]
 800d5ae:	4a96      	ldr	r2, [pc, #600]	@ (800d808 <acc_detector_distance_processor_calibrate+0x268>)
 800d5b0:	4291      	cmp	r1, r2
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	d009      	beq.n	800d5ca <acc_detector_distance_processor_calibrate+0x2a>
 800d5b6:	4b95      	ldr	r3, [pc, #596]	@ (800d80c <acc_detector_distance_processor_calibrate+0x26c>)
 800d5b8:	4a95      	ldr	r2, [pc, #596]	@ (800d810 <acc_detector_distance_processor_calibrate+0x270>)
 800d5ba:	691b      	ldr	r3, [r3, #16]
 800d5bc:	4995      	ldr	r1, [pc, #596]	@ (800d814 <acc_detector_distance_processor_calibrate+0x274>)
 800d5be:	2000      	movs	r0, #0
 800d5c0:	4798      	blx	r3
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	b012      	add	sp, #72	@ 0x48
 800d5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ca:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800d5ce:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 800d5d0:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800d5d2:	441f      	add	r7, r3
 800d5d4:	441a      	add	r2, r3
 800d5d6:	440b      	add	r3, r1
 800d5d8:	6747      	str	r7, [r0, #116]	@ 0x74
 800d5da:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
 800d5de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5e0:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
 800d5e4:	f7ff fd24 	bl	800d030 <map_cal_result_data>
 800d5e8:	7e03      	ldrb	r3, [r0, #24]
 800d5ea:	7947      	ldrb	r7, [r0, #5]
 800d5ec:	b15b      	cbz	r3, 800d606 <acc_detector_distance_processor_calibrate+0x66>
 800d5ee:	b90f      	cbnz	r7, 800d5f4 <acc_detector_distance_processor_calibrate+0x54>
 800d5f0:	f880 706d 	strb.w	r7, [r0, #109]	@ 0x6d
 800d5f4:	7923      	ldrb	r3, [r4, #4]
 800d5f6:	2b02      	cmp	r3, #2
 800d5f8:	d103      	bne.n	800d602 <acc_detector_distance_processor_calibrate+0x62>
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f7ff fd3e 	bl	800d07c <reset_calibration_state.part.0>
 800d600:	7967      	ldrb	r7, [r4, #5]
 800d602:	2300      	movs	r3, #0
 800d604:	7623      	strb	r3, [r4, #24]
 800d606:	bb2f      	cbnz	r7, 800d654 <acc_detector_distance_processor_calibrate+0xb4>
 800d608:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800d60c:	bb13      	cbnz	r3, 800d654 <acc_detector_distance_processor_calibrate+0xb4>
 800d60e:	2228      	movs	r2, #40	@ 0x28
 800d610:	4639      	mov	r1, r7
 800d612:	a808      	add	r0, sp, #32
 800d614:	f008 fa74 	bl	8015b00 <memset>
 800d618:	2301      	movs	r3, #1
 800d61a:	4629      	mov	r1, r5
 800d61c:	aa08      	add	r2, sp, #32
 800d61e:	4620      	mov	r0, r4
 800d620:	9700      	str	r7, [sp, #0]
 800d622:	f7ff fd49 	bl	800d0b8 <process_subsweeps>
 800d626:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	@ 0xc4
 800d62a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 800d62e:	0092      	lsls	r2, r2, #2
 800d630:	a908      	add	r1, sp, #32
 800d632:	f008 fafc 	bl	8015c2e <memcpy>
 800d636:	7963      	ldrb	r3, [r4, #5]
 800d638:	2201      	movs	r2, #1
 800d63a:	f884 206d 	strb.w	r2, [r4, #109]	@ 0x6d
 800d63e:	b34b      	cbz	r3, 800d694 <acc_detector_distance_processor_calibrate+0xf4>
 800d640:	7923      	ldrb	r3, [r4, #4]
 800d642:	2b02      	cmp	r3, #2
 800d644:	d026      	beq.n	800d694 <acc_detector_distance_processor_calibrate+0xf4>
 800d646:	2300      	movs	r3, #0
 800d648:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d64a:	2001      	movs	r0, #1
 800d64c:	7013      	strb	r3, [r2, #0]
 800d64e:	b012      	add	sp, #72	@ 0x48
 800d650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d654:	7923      	ldrb	r3, [r4, #4]
 800d656:	2b02      	cmp	r3, #2
 800d658:	d021      	beq.n	800d69e <acc_detector_distance_processor_calibrate+0xfe>
 800d65a:	2228      	movs	r2, #40	@ 0x28
 800d65c:	2100      	movs	r1, #0
 800d65e:	a808      	add	r0, sp, #32
 800d660:	f008 fa4e 	bl	8015b00 <memset>
 800d664:	2300      	movs	r3, #0
 800d666:	aa08      	add	r2, sp, #32
 800d668:	4629      	mov	r1, r5
 800d66a:	9300      	str	r3, [sp, #0]
 800d66c:	4620      	mov	r0, r4
 800d66e:	f7ff fd23 	bl	800d0b8 <process_subsweeps>
 800d672:	f003 ff21 	bl	80114b8 <acc_rss_integration_log_level>
 800d676:	2801      	cmp	r0, #1
 800d678:	d905      	bls.n	800d686 <acc_detector_distance_processor_calibrate+0xe6>
 800d67a:	4b64      	ldr	r3, [pc, #400]	@ (800d80c <acc_detector_distance_processor_calibrate+0x26c>)
 800d67c:	4a66      	ldr	r2, [pc, #408]	@ (800d818 <acc_detector_distance_processor_calibrate+0x278>)
 800d67e:	691b      	ldr	r3, [r3, #16]
 800d680:	4964      	ldr	r1, [pc, #400]	@ (800d814 <acc_detector_distance_processor_calibrate+0x274>)
 800d682:	2002      	movs	r0, #2
 800d684:	4798      	blx	r3
 800d686:	7961      	ldrb	r1, [r4, #5]
 800d688:	2900      	cmp	r1, #0
 800d68a:	d1d9      	bne.n	800d640 <acc_detector_distance_processor_calibrate+0xa0>
 800d68c:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800d690:	2b00      	cmp	r3, #0
 800d692:	d0d5      	beq.n	800d640 <acc_detector_distance_processor_calibrate+0xa0>
 800d694:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d1d5      	bne.n	800d648 <acc_detector_distance_processor_calibrate+0xa8>
 800d69c:	e7d3      	b.n	800d646 <acc_detector_distance_processor_calibrate+0xa6>
 800d69e:	f894 706c 	ldrb.w	r7, [r4, #108]	@ 0x6c
 800d6a2:	2f00      	cmp	r7, #0
 800d6a4:	d1d9      	bne.n	800d65a <acc_detector_distance_processor_calibrate+0xba>
 800d6a6:	2228      	movs	r2, #40	@ 0x28
 800d6a8:	4639      	mov	r1, r7
 800d6aa:	a808      	add	r0, sp, #32
 800d6ac:	f04f 0801 	mov.w	r8, #1
 800d6b0:	f008 fa26 	bl	8015b00 <memset>
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	aa08      	add	r2, sp, #32
 800d6b8:	f8cd 8000 	str.w	r8, [sp]
 800d6bc:	463b      	mov	r3, r7
 800d6be:	4620      	mov	r0, r4
 800d6c0:	f7ff fcfa 	bl	800d0b8 <process_subsweeps>
 800d6c4:	7961      	ldrb	r1, [r4, #5]
 800d6c6:	e9cd 7704 	strd	r7, r7, [sp, #16]
 800d6ca:	e9cd 7706 	strd	r7, r7, [sp, #24]
 800d6ce:	2900      	cmp	r1, #0
 800d6d0:	f000 808c 	beq.w	800d7ec <acc_detector_distance_processor_calibrate+0x24c>
 800d6d4:	f894 801d 	ldrb.w	r8, [r4, #29]
 800d6d8:	fa1f f588 	uxth.w	r5, r8
 800d6dc:	f1b8 0f00 	cmp.w	r8, #0
 800d6e0:	f000 808f 	beq.w	800d802 <acc_detector_distance_processor_calibrate+0x262>
 800d6e4:	3d01      	subs	r5, #1
 800d6e6:	f104 031a 	add.w	r3, r4, #26
 800d6ea:	fa13 f585 	uxtah	r5, r3, r5
 800d6ee:	f104 0219 	add.w	r2, r4, #25
 800d6f2:	a804      	add	r0, sp, #16
 800d6f4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d6f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d6fc:	42aa      	cmp	r2, r5
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f840 3b04 	str.w	r3, [r0], #4
 800d704:	d1f6      	bne.n	800d6f4 <acc_detector_distance_processor_calibrate+0x154>
 800d706:	8f22      	ldrh	r2, [r4, #56]	@ 0x38
 800d708:	2a00      	cmp	r2, #0
 800d70a:	d072      	beq.n	800d7f2 <acc_detector_distance_processor_calibrate+0x252>
 800d70c:	f8d4 70cc 	ldr.w	r7, [r4, #204]	@ 0xcc
 800d710:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800d712:	f8d4 c0d8 	ldr.w	ip, [r4, #216]	@ 0xd8
 800d716:	f102 39ff 	add.w	r9, r2, #4294967295
 800d71a:	fa1f f989 	uxth.w	r9, r9
 800d71e:	1d3e      	adds	r6, r7, #4
 800d720:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
 800d724:	463b      	mov	r3, r7
 800d726:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800d72a:	468e      	mov	lr, r1
 800d72c:	460d      	mov	r5, r1
 800d72e:	4660      	mov	r0, ip
 800d730:	ed95 7a00 	vldr	s14, [r5]
 800d734:	edd3 7a00 	vldr	s15, [r3]
 800d738:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d73c:	ece3 7a01 	vstmia	r3!, {s15}
 800d740:	ecf5 7a01 	vldmia	r5!, {s15}
 800d744:	ed90 7a00 	vldr	s14, [r0]
 800d748:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d74c:	459a      	cmp	sl, r3
 800d74e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d752:	ece0 7a01 	vstmia	r0!, {s15}
 800d756:	d1eb      	bne.n	800d730 <acc_detector_distance_processor_calibrate+0x190>
 800d758:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d939      	bls.n	800d7d4 <acc_detector_distance_processor_calibrate+0x234>
 800d760:	1e58      	subs	r0, r3, #1
 800d762:	b280      	uxth	r0, r0
 800d764:	ee07 0a90 	vmov	s15, r0
 800d768:	ee07 3a10 	vmov	s14, r3
 800d76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d770:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800d774:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800d778:	eec6 5aa7 	vdiv.f32	s11, s13, s15
 800d77c:	1d03      	adds	r3, r0, #4
 800d77e:	4499      	add	r9, r3
 800d780:	4603      	mov	r3, r0
 800d782:	edd7 7a00 	vldr	s15, [r7]
 800d786:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d78a:	4637      	mov	r7, r6
 800d78c:	3604      	adds	r6, #4
 800d78e:	eca3 7a01 	vstmia	r3!, {s14}
 800d792:	ecbc 6a01 	vldmia	ip!, {s12}
 800d796:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800d79a:	4599      	cmp	r9, r3
 800d79c:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d7a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7a4:	eef0 7ae7 	vabs.f32	s15, s15
 800d7a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800d7ac:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800d7b0:	ecae 7a01 	vstmia	lr!, {s14}
 800d7b4:	d1e5      	bne.n	800d782 <acc_detector_distance_processor_calibrate+0x1e2>
 800d7b6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800d7ba:	f8cd 8000 	str.w	r8, [sp]
 800d7be:	8f66      	ldrh	r6, [r4, #58]	@ 0x3a
 800d7c0:	9303      	str	r3, [sp, #12]
 800d7c2:	f104 053c 	add.w	r5, r4, #60	@ 0x3c
 800d7c6:	ab04      	add	r3, sp, #16
 800d7c8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800d7cc:	f7fe fd7e 	bl	800c2cc <acc_detector_distance_alg_calculate_threshold_recording>
 800d7d0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800d7d4:	7961      	ldrb	r1, [r4, #5]
 800d7d6:	8aa2      	ldrh	r2, [r4, #20]
 800d7d8:	1c58      	adds	r0, r3, #1
 800d7da:	1ad3      	subs	r3, r2, r3
 800d7dc:	fab3 f383 	clz	r3, r3
 800d7e0:	095b      	lsrs	r3, r3, #5
 800d7e2:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
 800d7e6:	f8a4 006a 	strh.w	r0, [r4, #106]	@ 0x6a
 800d7ea:	e74d      	b.n	800d688 <acc_detector_distance_processor_calibrate+0xe8>
 800d7ec:	6833      	ldr	r3, [r6, #0]
 800d7ee:	9304      	str	r3, [sp, #16]
 800d7f0:	e789      	b.n	800d706 <acc_detector_distance_processor_calibrate+0x166>
 800d7f2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d9ed      	bls.n	800d7d6 <acc_detector_distance_processor_calibrate+0x236>
 800d7fa:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800d7fe:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800d800:	e7d9      	b.n	800d7b6 <acc_detector_distance_processor_calibrate+0x216>
 800d802:	46a8      	mov	r8, r5
 800d804:	e77f      	b.n	800d706 <acc_detector_distance_processor_calibrate+0x166>
 800d806:	bf00      	nop
 800d808:	0fa1afe1 	.word	0x0fa1afe1
 800d80c:	200008cc 	.word	0x200008cc
 800d810:	08019e84 	.word	0x08019e84
 800d814:	08019e68 	.word	0x08019e68
 800d818:	08019fb4 	.word	0x08019fb4

0800d81c <acc_detector_distance_processor_process>:
 800d81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d820:	ed2d 8b0a 	vpush	{d8-d12}
 800d824:	b09b      	sub	sp, #108	@ 0x6c
 800d826:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	@ 0xb8
 800d82a:	9207      	str	r2, [sp, #28]
 800d82c:	b128      	cbz	r0, 800d83a <acc_detector_distance_processor_process+0x1e>
 800d82e:	6802      	ldr	r2, [r0, #0]
 800d830:	461f      	mov	r7, r3
 800d832:	4ba4      	ldr	r3, [pc, #656]	@ (800dac4 <acc_detector_distance_processor_process+0x2a8>)
 800d834:	429a      	cmp	r2, r3
 800d836:	4604      	mov	r4, r0
 800d838:	d00b      	beq.n	800d852 <acc_detector_distance_processor_process+0x36>
 800d83a:	4ba3      	ldr	r3, [pc, #652]	@ (800dac8 <acc_detector_distance_processor_process+0x2ac>)
 800d83c:	4aa3      	ldr	r2, [pc, #652]	@ (800dacc <acc_detector_distance_processor_process+0x2b0>)
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	49a3      	ldr	r1, [pc, #652]	@ (800dad0 <acc_detector_distance_processor_process+0x2b4>)
 800d842:	2000      	movs	r0, #0
 800d844:	4798      	blx	r3
 800d846:	2000      	movs	r0, #0
 800d848:	b01b      	add	sp, #108	@ 0x6c
 800d84a:	ecbd 8b0a 	vpop	{d8-d12}
 800d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d852:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 800d854:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800d856:	f8d0 5088 	ldr.w	r5, [r0, #136]	@ 0x88
 800d85a:	4689      	mov	r9, r1
 800d85c:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 800d85e:	440b      	add	r3, r1
 800d860:	440a      	add	r2, r1
 800d862:	440d      	add	r5, r1
 800d864:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 800d868:	6742      	str	r2, [r0, #116]	@ 0x74
 800d86a:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 800d86c:	f8c0 508c 	str.w	r5, [r0, #140]	@ 0x8c
 800d870:	eeb0 9a40 	vmov.f32	s18, s0
 800d874:	f7ff fbdc 	bl	800d030 <map_cal_result_data>
 800d878:	2100      	movs	r1, #0
 800d87a:	460e      	mov	r6, r1
 800d87c:	2228      	movs	r2, #40	@ 0x28
 800d87e:	a810      	add	r0, sp, #64	@ 0x40
 800d880:	f008 f93e 	bl	8015b00 <memset>
 800d884:	4649      	mov	r1, r9
 800d886:	aa10      	add	r2, sp, #64	@ 0x40
 800d888:	9600      	str	r6, [sp, #0]
 800d88a:	4633      	mov	r3, r6
 800d88c:	4620      	mov	r0, r4
 800d88e:	f7ff fc13 	bl	800d0b8 <process_subsweeps>
 800d892:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800d894:	f8ad 602e 	strh.w	r6, [sp, #46]	@ 0x2e
 800d898:	2900      	cmp	r1, #0
 800d89a:	f000 811d 	beq.w	800dad8 <acc_detector_distance_processor_process+0x2bc>
 800d89e:	2301      	movs	r3, #1
 800d8a0:	eddf 9a8c 	vldr	s19, [pc, #560]	@ 800dad4 <acc_detector_distance_processor_process+0x2b8>
 800d8a4:	9308      	str	r3, [sp, #32]
 800d8a6:	4635      	mov	r5, r6
 800d8a8:	7923      	ldrb	r3, [r4, #4]
 800d8aa:	2b03      	cmp	r3, #3
 800d8ac:	f200 82cc 	bhi.w	800de48 <acc_detector_distance_processor_process+0x62c>
 800d8b0:	e8df f003 	tbb	[pc, r3]
 800d8b4:	02257bc9 	.word	0x02257bc9
 800d8b8:	7963      	ldrb	r3, [r4, #5]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	f000 80ef 	beq.w	800da9e <acc_detector_distance_processor_process+0x282>
 800d8c0:	f894 c01d 	ldrb.w	ip, [r4, #29]
 800d8c4:	eeb0 0a69 	vmov.f32	s0, s19
 800d8c8:	f1bc 0f00 	cmp.w	ip, #0
 800d8cc:	f000 80e9 	beq.w	800daa2 <acc_detector_distance_processor_process+0x286>
 800d8d0:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	f104 0e19 	add.w	lr, r4, #25
 800d8da:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d8de:	42a8      	cmp	r0, r5
 800d8e0:	d808      	bhi.n	800d8f4 <acc_detector_distance_processor_process+0xd8>
 800d8e2:	8810      	ldrh	r0, [r2, #0]
 800d8e4:	42a8      	cmp	r0, r5
 800d8e6:	d905      	bls.n	800d8f4 <acc_detector_distance_processor_process+0xd8>
 800d8e8:	f81e 0003 	ldrb.w	r0, [lr, r3]
 800d8ec:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800d8f0:	ed90 0a00 	vldr	s0, [r0]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	b298      	uxth	r0, r3
 800d8f8:	4584      	cmp	ip, r0
 800d8fa:	d8ee      	bhi.n	800d8da <acc_detector_distance_processor_process+0xbe>
 800d8fc:	e0d1      	b.n	800daa2 <acc_detector_distance_processor_process+0x286>
 800d8fe:	ab0d      	add	r3, sp, #52	@ 0x34
 800d900:	9300      	str	r3, [sp, #0]
 800d902:	7fa2      	ldrb	r2, [r4, #30]
 800d904:	9907      	ldr	r1, [sp, #28]
 800d906:	ab0c      	add	r3, sp, #48	@ 0x30
 800d908:	4640      	mov	r0, r8
 800d90a:	f001 fdfb 	bl	800f504 <acc_processing_get_temperature_adjustment_factors>
 800d90e:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800d912:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800d914:	ed9d 0a0c 	vldr	s0, [sp, #48]	@ 0x30
 800d918:	7960      	ldrb	r0, [r4, #5]
 800d91a:	ed9d 6a0d 	vldr	s12, [sp, #52]	@ 0x34
 800d91e:	b2b3      	uxth	r3, r6
 800d920:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800d924:	edd1 7a00 	vldr	s15, [r1]
 800d928:	442a      	add	r2, r5
 800d92a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d92e:	b292      	uxth	r2, r2
 800d930:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d934:	2800      	cmp	r0, #0
 800d936:	f040 808c 	bne.w	800da52 <acc_detector_distance_processor_process+0x236>
 800d93a:	edd7 7a00 	vldr	s15, [r7]
 800d93e:	f894 901d 	ldrb.w	r9, [r4, #29]
 800d942:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800d946:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800d94a:	f1b9 0f00 	cmp.w	r9, #0
 800d94e:	f000 8224 	beq.w	800dd9a <acc_detector_distance_processor_process+0x57e>
 800d952:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800d956:	eeb0 7a69 	vmov.f32	s14, s19
 800d95a:	f04f 0e00 	mov.w	lr, #0
 800d95e:	f831 bb02 	ldrh.w	fp, [r1], #2
 800d962:	f10e 0e01 	add.w	lr, lr, #1
 800d966:	455a      	cmp	r2, fp
 800d968:	fa1f fa8e 	uxth.w	sl, lr
 800d96c:	d305      	bcc.n	800d97a <acc_detector_distance_processor_process+0x15e>
 800d96e:	f8b1 b000 	ldrh.w	fp, [r1]
 800d972:	4593      	cmp	fp, r2
 800d974:	bf88      	it	hi
 800d976:	ed90 7a00 	vldrhi	s14, [r0]
 800d97a:	45d1      	cmp	r9, sl
 800d97c:	f100 0004 	add.w	r0, r0, #4
 800d980:	d8ed      	bhi.n	800d95e <acc_detector_distance_processor_process+0x142>
 800d982:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d986:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d98a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800d98e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d992:	ed94 6a17 	vldr	s12, [r4, #92]	@ 0x5c
 800d996:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800d998:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d99c:	eef1 7ac7 	vsqrt.f32	s15, s14
 800d9a0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d9a4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d9a8:	e024      	b.n	800d9f4 <acc_detector_distance_processor_process+0x1d8>
 800d9aa:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800d9ac:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d9ae:	fb13 f305 	smulbb	r3, r3, r5
 800d9b2:	fa12 f383 	uxtah	r3, r2, r3
 800d9b6:	ee08 3a10 	vmov	s16, r3
 800d9ba:	2001      	movs	r0, #1
 800d9bc:	f001 fda0 	bl	800f500 <acc_processing_points_to_meter>
 800d9c0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800d9c4:	ab0e      	add	r3, sp, #56	@ 0x38
 800d9c6:	ee28 8a00 	vmul.f32	s16, s16, s0
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	7962      	ldrb	r2, [r4, #5]
 800d9ce:	edd4 aa04 	vldr	s21, [r4, #16]
 800d9d2:	eeb0 0a48 	vmov.f32	s0, s16
 800d9d6:	ab0f      	add	r3, sp, #60	@ 0x3c
 800d9d8:	4639      	mov	r1, r7
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f7ff face 	bl	800cf7c <get_radar_equation_parameters_for_distance>
 800d9e0:	9008      	str	r0, [sp, #32]
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	f040 8130 	bne.w	800dc48 <acc_detector_distance_processor_process+0x42c>
 800d9e8:	eef0 7a69 	vmov.f32	s15, s19
 800d9ec:	b2b3      	uxth	r3, r6
 800d9ee:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800d9f0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d9f4:	f8d4 e074 	ldr.w	lr, [r4, #116]	@ 0x74
 800d9f8:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800d9fc:	44f4      	add	ip, lr
 800d9fe:	ed9c 7a00 	vldr	s14, [ip]
 800da02:	095b      	lsrs	r3, r3, #5
 800da04:	f005 0c1f 	and.w	ip, r5, #31
 800da08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800da0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da10:	2501      	movs	r5, #1
 800da12:	fa05 f50c 	lsl.w	r5, r5, ip
 800da16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da1a:	bfcc      	ite	gt
 800da1c:	4305      	orrgt	r5, r0
 800da1e:	ea20 0505 	bicle.w	r5, r0, r5
 800da22:	3601      	adds	r6, #1
 800da24:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800da28:	b2b5      	uxth	r5, r6
 800da2a:	42a9      	cmp	r1, r5
 800da2c:	f63f af3c 	bhi.w	800d8a8 <acc_detector_distance_processor_process+0x8c>
 800da30:	4613      	mov	r3, r2
 800da32:	9a08      	ldr	r2, [sp, #32]
 800da34:	4670      	mov	r0, lr
 800da36:	2a00      	cmp	r2, #0
 800da38:	d151      	bne.n	800dade <acc_detector_distance_processor_process+0x2c2>
 800da3a:	2001      	movs	r0, #1
 800da3c:	b01b      	add	sp, #108	@ 0x6c
 800da3e:	ecbd 8b0a 	vpop	{d8-d12}
 800da42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da46:	b2b3      	uxth	r3, r6
 800da48:	edd4 7a03 	vldr	s15, [r4, #12]
 800da4c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800da50:	e7d0      	b.n	800d9f4 <acc_detector_distance_processor_process+0x1d8>
 800da52:	f894 901d 	ldrb.w	r9, [r4, #29]
 800da56:	f1b9 0f00 	cmp.w	r9, #0
 800da5a:	f000 81a1 	beq.w	800dda0 <acc_detector_distance_processor_process+0x584>
 800da5e:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800da62:	eef0 7a69 	vmov.f32	s15, s19
 800da66:	468e      	mov	lr, r1
 800da68:	2000      	movs	r0, #0
 800da6a:	f104 0b19 	add.w	fp, r4, #25
 800da6e:	f83e ab02 	ldrh.w	sl, [lr], #2
 800da72:	4552      	cmp	r2, sl
 800da74:	d309      	bcc.n	800da8a <acc_detector_distance_processor_process+0x26e>
 800da76:	f8be a000 	ldrh.w	sl, [lr]
 800da7a:	4592      	cmp	sl, r2
 800da7c:	d905      	bls.n	800da8a <acc_detector_distance_processor_process+0x26e>
 800da7e:	f81b a000 	ldrb.w	sl, [fp, r0]
 800da82:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
 800da86:	edda 7a00 	vldr	s15, [sl]
 800da8a:	3001      	adds	r0, #1
 800da8c:	fa1f fa80 	uxth.w	sl, r0
 800da90:	45d1      	cmp	r9, sl
 800da92:	d8ec      	bhi.n	800da6e <acc_detector_distance_processor_process+0x252>
 800da94:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800da98:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 800da9c:	e75b      	b.n	800d956 <acc_detector_distance_processor_process+0x13a>
 800da9e:	ed97 0a00 	vldr	s0, [r7]
 800daa2:	9500      	str	r5, [sp, #0]
 800daa4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 800daa8:	edd4 0a17 	vldr	s1, [r4, #92]	@ 0x5c
 800daac:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 800dab0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800dab2:	f7fe fb41 	bl	800c138 <acc_detector_distance_alg_calculate_cfar>
 800dab6:	b2b3      	uxth	r3, r6
 800dab8:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800daba:	eef0 7a40 	vmov.f32	s15, s0
 800dabe:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800dac2:	e797      	b.n	800d9f4 <acc_detector_distance_processor_process+0x1d8>
 800dac4:	0fa1afe1 	.word	0x0fa1afe1
 800dac8:	200008cc 	.word	0x200008cc
 800dacc:	08019e84 	.word	0x08019e84
 800dad0:	08019e68 	.word	0x08019e68
 800dad4:	00000000 	.word	0x00000000
 800dad8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800dada:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dade:	f8b4 5090 	ldrh.w	r5, [r4, #144]	@ 0x90
 800dae2:	9500      	str	r5, [sp, #0]
 800dae4:	f10d 022e 	add.w	r2, sp, #46	@ 0x2e
 800dae8:	9201      	str	r2, [sp, #4]
 800daea:	461a      	mov	r2, r3
 800daec:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800daf0:	f7fe fcfa 	bl	800c4e8 <acc_detector_distance_alg_find_peaks>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	f000 810e 	beq.w	800dd16 <acc_detector_distance_processor_process+0x4fa>
 800dafa:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800dafc:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800db00:	881b      	ldrh	r3, [r3, #0]
 800db02:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800db04:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800db08:	8d26      	ldrh	r6, [r4, #40]	@ 0x28
 800db0a:	f8d4 9074 	ldr.w	r9, [r4, #116]	@ 0x74
 800db0e:	f9b4 a034 	ldrsh.w	sl, [r4, #52]	@ 0x34
 800db12:	9108      	str	r1, [sp, #32]
 800db14:	42ab      	cmp	r3, r5
 800db16:	f04f 0001 	mov.w	r0, #1
 800db1a:	bf3c      	itt	cc
 800db1c:	461d      	movcc	r5, r3
 800db1e:	f8ad 302e 	strhcc.w	r3, [sp, #46]	@ 0x2e
 800db22:	9207      	str	r2, [sp, #28]
 800db24:	f001 fcec 	bl	800f500 <acc_processing_points_to_meter>
 800db28:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800db2a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800db2e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800db32:	9601      	str	r6, [sp, #4]
 800db34:	881e      	ldrh	r6, [r3, #0]
 800db36:	9602      	str	r6, [sp, #8]
 800db38:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 800db3c:	462b      	mov	r3, r5
 800db3e:	e9cd ce03 	strd	ip, lr, [sp, #12]
 800db42:	f8cd a000 	str.w	sl, [sp]
 800db46:	4648      	mov	r0, r9
 800db48:	f7fe fc3a 	bl	800c3c0 <acc_detector_distance_alg_interpolate_peaks>
 800db4c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800db50:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 800db52:	8113      	strh	r3, [r2, #8]
 800db54:	8213      	strh	r3, [r2, #16]
 800db56:	8313      	strh	r3, [r2, #24]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d036      	beq.n	800dbca <acc_detector_distance_processor_process+0x3ae>
 800db5c:	4613      	mov	r3, r2
 800db5e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800db62:	6852      	ldr	r2, [r2, #4]
 800db64:	ed5f 9a25 	vldr	s19, [pc, #-148]	@ 800dad4 <acc_detector_distance_processor_process+0x2b8>
 800db68:	f8cd a01c 	str.w	sl, [sp, #28]
 800db6c:	2600      	movs	r6, #0
 800db6e:	eeb3 aa04 	vmov.f32	s20, #52	@ 0x41a00000  20.0
 800db72:	4699      	mov	r9, r3
 800db74:	46ba      	mov	sl, r7
 800db76:	b2b5      	uxth	r5, r6
 800db78:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800db7c:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800db80:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800db84:	ed92 8a00 	vldr	s16, [r2]
 800db88:	7962      	ldrb	r2, [r4, #5]
 800db8a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800db8e:	edd3 8a00 	vldr	s17, [r3]
 800db92:	9b07      	ldr	r3, [sp, #28]
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	eeb0 0a48 	vmov.f32	s0, s16
 800db9a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800db9c:	4651      	mov	r1, sl
 800db9e:	4620      	mov	r0, r4
 800dba0:	00ad      	lsls	r5, r5, #2
 800dba2:	f7ff f9eb 	bl	800cf7c <get_radar_equation_parameters_for_distance>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	f040 80bb 	bne.w	800dd22 <acc_detector_distance_processor_process+0x506>
 800dbac:	7fa0      	ldrb	r0, [r4, #30]
 800dbae:	4641      	mov	r1, r8
 800dbb0:	eeb0 0a49 	vmov.f32	s0, s18
 800dbb4:	f7fe fdc0 	bl	800c738 <acc_detector_distance_alg_get_loopback_peak_offset>
 800dbb8:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	441d      	add	r5, r3
 800dbbe:	edd5 7a00 	vldr	s15, [r5]
 800dbc2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800dbc6:	ed85 0a00 	vstr	s0, [r5]
 800dbca:	7923      	ldrb	r3, [r4, #4]
 800dbcc:	2b03      	cmp	r3, #3
 800dbce:	f000 8136 	beq.w	800de3e <acc_detector_distance_processor_process+0x622>
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	4608      	mov	r0, r1
 800dbd6:	460a      	mov	r2, r1
 800dbd8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800dbda:	1a5b      	subs	r3, r3, r1
 800dbdc:	2b05      	cmp	r3, #5
 800dbde:	f240 80e4 	bls.w	800ddaa <acc_detector_distance_processor_process+0x58e>
 800dbe2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dbe6:	0940      	lsrs	r0, r0, #5
 800dbe8:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 800dbec:	f002 031f 	and.w	r3, r2, #31
 800dbf0:	40d9      	lsrs	r1, r3
 800dbf2:	f011 0101 	ands.w	r1, r1, #1
 800dbf6:	d024      	beq.n	800dc42 <acc_detector_distance_processor_process+0x426>
 800dbf8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800dbfa:	ed1f 7a4a 	vldr	s14, [pc, #-296]	@ 800dad4 <acc_detector_distance_processor_process+0x2b8>
 800dbfe:	f103 000c 	add.w	r0, r3, #12
 800dc02:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800dc06:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 800dc0a:	0094      	lsls	r4, r2, #2
 800dc0c:	ecf1 7a01 	vldmia	r1!, {s15}
 800dc10:	4288      	cmp	r0, r1
 800dc12:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc16:	d1f9      	bne.n	800dc0c <acc_detector_distance_processor_process+0x3f0>
 800dc18:	3203      	adds	r2, #3
 800dc1a:	f103 0118 	add.w	r1, r3, #24
 800dc1e:	ed5f 7a53 	vldr	s15, [pc, #-332]	@ 800dad4 <acc_detector_distance_processor_process+0x2b8>
 800dc22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800dc26:	190a      	adds	r2, r1, r4
 800dc28:	ecf3 6a01 	vldmia	r3!, {s13}
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc32:	d1f9      	bne.n	800dc28 <acc_detector_distance_processor_process+0x40c>
 800dc34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc3c:	bfac      	ite	ge
 800dc3e:	2101      	movge	r1, #1
 800dc40:	2100      	movlt	r1, #0
 800dc42:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800dc44:	7699      	strb	r1, [r3, #26]
 800dc46:	e6f8      	b.n	800da3a <acc_detector_distance_processor_process+0x21e>
 800dc48:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800dc4a:	79a0      	ldrb	r0, [r4, #6]
 800dc4c:	f894 901e 	ldrb.w	r9, [r4, #30]
 800dc50:	9109      	str	r1, [sp, #36]	@ 0x24
 800dc52:	f000 ffed 	bl	800ec30 <acc_detector_distance_utils_reflector_shape_exponent_get>
 800dc56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc58:	ed9d ba0e 	vldr	s22, [sp, #56]	@ 0x38
 800dc5c:	4648      	mov	r0, r9
 800dc5e:	eeb0 aa40 	vmov.f32	s20, s0
 800dc62:	f7fe ff45 	bl	800caf0 <acc_detector_distance_alg_calc_processing_gain>
 800dc66:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc6e:	f77f aebb 	ble.w	800d9e8 <acc_detector_distance_processor_process+0x1cc>
 800dc72:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 800dc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc7a:	f77f aeb5 	ble.w	800d9e8 <acc_detector_distance_processor_process+0x1cc>
 800dc7e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800dc82:	f00a f8ff 	bl	8017e84 <fmaxf>
 800dc86:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800dc8a:	eef0 8a40 	vmov.f32	s17, s0
 800dc8e:	ed9d 0a0f 	vldr	s0, [sp, #60]	@ 0x3c
 800dc92:	f00a f8f7 	bl	8017e84 <fmaxf>
 800dc96:	eeb0 ca40 	vmov.f32	s24, s0
 800dc9a:	eeb0 0a68 	vmov.f32	s0, s17
 800dc9e:	f009 fef5 	bl	8017a8c <log10f>
 800dca2:	eef0 8a40 	vmov.f32	s17, s0
 800dca6:	eeb0 0a4b 	vmov.f32	s0, s22
 800dcaa:	f009 feef 	bl	8017a8c <log10f>
 800dcae:	4648      	mov	r0, r9
 800dcb0:	eeb0 ba40 	vmov.f32	s22, s0
 800dcb4:	f003 fa70 	bl	8011198 <acc_detector_utils_radar_loop_gain_per_hwaas>
 800dcb8:	eef0 ba40 	vmov.f32	s23, s0
 800dcbc:	eeb0 0a4c 	vmov.f32	s0, s24
 800dcc0:	f009 fee4 	bl	8017a8c <log10f>
 800dcc4:	eef0 6a40 	vmov.f32	s13, s0
 800dcc8:	eeb0 0a48 	vmov.f32	s0, s16
 800dccc:	eeb0 8a66 	vmov.f32	s16, s13
 800dcd0:	f009 fedc 	bl	8017a8c <log10f>
 800dcd4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800dcd8:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800dcdc:	ee68 6a06 	vmul.f32	s13, s16, s12
 800dce0:	ee68 8a86 	vmul.f32	s17, s17, s12
 800dce4:	ee2b ba20 	vmul.f32	s22, s22, s1
 800dce8:	ee36 8aab 	vadd.f32	s16, s13, s23
 800dcec:	ee78 8a8b 	vadd.f32	s17, s17, s22
 800dcf0:	ee6a 6a06 	vmul.f32	s13, s20, s12
 800dcf4:	ee78 7a88 	vadd.f32	s15, s17, s16
 800dcf8:	ee26 7a80 	vmul.f32	s14, s13, s0
 800dcfc:	eeb0 0a46 	vmov.f32	s0, s12
 800dd00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd04:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800dd08:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800dd0c:	f009 feec 	bl	8017ae8 <powf>
 800dd10:	eef0 7a40 	vmov.f32	s15, s0
 800dd14:	e66a      	b.n	800d9ec <acc_detector_distance_processor_process+0x1d0>
 800dd16:	4b54      	ldr	r3, [pc, #336]	@ (800de68 <acc_detector_distance_processor_process+0x64c>)
 800dd18:	4a54      	ldr	r2, [pc, #336]	@ (800de6c <acc_detector_distance_processor_process+0x650>)
 800dd1a:	691b      	ldr	r3, [r3, #16]
 800dd1c:	4954      	ldr	r1, [pc, #336]	@ (800de70 <acc_detector_distance_processor_process+0x654>)
 800dd1e:	4798      	blx	r3
 800dd20:	e68b      	b.n	800da3a <acc_detector_distance_processor_process+0x21e>
 800dd22:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800dd24:	79a0      	ldrb	r0, [r4, #6]
 800dd26:	f894 b01e 	ldrb.w	fp, [r4, #30]
 800dd2a:	9108      	str	r1, [sp, #32]
 800dd2c:	f000 ff80 	bl	800ec30 <acc_detector_distance_utils_reflector_shape_exponent_get>
 800dd30:	9908      	ldr	r1, [sp, #32]
 800dd32:	ed9d ba0e 	vldr	s22, [sp, #56]	@ 0x38
 800dd36:	4658      	mov	r0, fp
 800dd38:	eef0 aa40 	vmov.f32	s21, s0
 800dd3c:	f7fe fed8 	bl	800caf0 <acc_detector_distance_alg_calc_processing_gain>
 800dd40:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dd44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd48:	dd0b      	ble.n	800dd62 <acc_detector_distance_processor_process+0x546>
 800dd4a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800dd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd52:	dd06      	ble.n	800dd62 <acc_detector_distance_processor_process+0x546>
 800dd54:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 800dd58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd5c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800dd60:	dc25      	bgt.n	800ddae <acc_detector_distance_processor_process+0x592>
 800dd62:	eeb0 0a69 	vmov.f32	s0, s19
 800dd66:	442f      	add	r7, r5
 800dd68:	ed87 0a00 	vstr	s0, [r7]
 800dd6c:	4641      	mov	r1, r8
 800dd6e:	7fa0      	ldrb	r0, [r4, #30]
 800dd70:	eeb0 0a49 	vmov.f32	s0, s18
 800dd74:	f7fe fce0 	bl	800c738 <acc_detector_distance_alg_get_loopback_peak_offset>
 800dd78:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800dd7c:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800dd80:	4415      	add	r5, r2
 800dd82:	edd5 7a00 	vldr	s15, [r5]
 800dd86:	3601      	adds	r6, #1
 800dd88:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800dd8c:	b2b3      	uxth	r3, r6
 800dd8e:	4299      	cmp	r1, r3
 800dd90:	ed85 0a00 	vstr	s0, [r5]
 800dd94:	f63f aeef 	bhi.w	800db76 <acc_detector_distance_processor_process+0x35a>
 800dd98:	e717      	b.n	800dbca <acc_detector_distance_processor_process+0x3ae>
 800dd9a:	eeb0 7a69 	vmov.f32	s14, s19
 800dd9e:	e5f2      	b.n	800d986 <acc_detector_distance_processor_process+0x16a>
 800dda0:	eeb0 7a69 	vmov.f32	s14, s19
 800dda4:	eef0 6a69 	vmov.f32	s13, s19
 800dda8:	e5ed      	b.n	800d986 <acc_detector_distance_processor_process+0x16a>
 800ddaa:	2100      	movs	r1, #0
 800ddac:	e749      	b.n	800dc42 <acc_detector_distance_processor_process+0x426>
 800ddae:	f00a f869 	bl	8017e84 <fmaxf>
 800ddb2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800ddb6:	eef0 ba40 	vmov.f32	s23, s0
 800ddba:	ed9d 0a0f 	vldr	s0, [sp, #60]	@ 0x3c
 800ddbe:	f00a f861 	bl	8017e84 <fmaxf>
 800ddc2:	eef0 ca40 	vmov.f32	s25, s0
 800ddc6:	eeb0 0a6b 	vmov.f32	s0, s23
 800ddca:	f009 fe5f 	bl	8017a8c <log10f>
 800ddce:	eef0 ba40 	vmov.f32	s23, s0
 800ddd2:	eeb0 0a68 	vmov.f32	s0, s17
 800ddd6:	f009 fe59 	bl	8017a8c <log10f>
 800ddda:	eef0 8a40 	vmov.f32	s17, s0
 800ddde:	eeb0 0a4b 	vmov.f32	s0, s22
 800dde2:	f009 fe53 	bl	8017a8c <log10f>
 800dde6:	4658      	mov	r0, fp
 800dde8:	eeb0 ba40 	vmov.f32	s22, s0
 800ddec:	f003 f9d4 	bl	8011198 <acc_detector_utils_radar_loop_gain_per_hwaas>
 800ddf0:	eeb0 ca40 	vmov.f32	s24, s0
 800ddf4:	eeb0 0a6c 	vmov.f32	s0, s25
 800ddf8:	f009 fe48 	bl	8017a8c <log10f>
 800ddfc:	eef0 7a40 	vmov.f32	s15, s0
 800de00:	eeb0 0a48 	vmov.f32	s0, s16
 800de04:	eeb0 8a67 	vmov.f32	s16, s15
 800de08:	f009 fe40 	bl	8017a8c <log10f>
 800de0c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800de10:	ee68 7a8a 	vmul.f32	s15, s17, s20
 800de14:	ee2b ba0a 	vmul.f32	s22, s22, s20
 800de18:	ee28 8a26 	vmul.f32	s16, s16, s13
 800de1c:	ee77 7acb 	vsub.f32	s15, s15, s22
 800de20:	ee38 7a0c 	vadd.f32	s14, s16, s24
 800de24:	ee6a aaa6 	vmul.f32	s21, s21, s13
 800de28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800de2c:	ee6a aa80 	vmul.f32	s21, s21, s0
 800de30:	ee2b 0aa6 	vmul.f32	s0, s23, s13
 800de34:	ee77 7aaa 	vadd.f32	s15, s15, s21
 800de38:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800de3c:	e793      	b.n	800dd66 <acc_detector_distance_processor_process+0x54a>
 800de3e:	f8b4 2064 	ldrh.w	r2, [r4, #100]	@ 0x64
 800de42:	4610      	mov	r0, r2
 800de44:	0051      	lsls	r1, r2, #1
 800de46:	e6c7      	b.n	800dbd8 <acc_detector_distance_processor_process+0x3bc>
 800de48:	4b07      	ldr	r3, [pc, #28]	@ (800de68 <acc_detector_distance_processor_process+0x64c>)
 800de4a:	4a0a      	ldr	r2, [pc, #40]	@ (800de74 <acc_detector_distance_processor_process+0x658>)
 800de4c:	691b      	ldr	r3, [r3, #16]
 800de4e:	4908      	ldr	r1, [pc, #32]	@ (800de70 <acc_detector_distance_processor_process+0x654>)
 800de50:	2000      	movs	r0, #0
 800de52:	4798      	blx	r3
 800de54:	b2b3      	uxth	r3, r6
 800de56:	2200      	movs	r2, #0
 800de58:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800de5a:	9208      	str	r2, [sp, #32]
 800de5c:	eef0 7a69 	vmov.f32	s15, s19
 800de60:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800de64:	e5c6      	b.n	800d9f4 <acc_detector_distance_processor_process+0x1d8>
 800de66:	bf00      	nop
 800de68:	200008cc 	.word	0x200008cc
 800de6c:	08019fcc 	.word	0x08019fcc
 800de70:	08019e68 	.word	0x08019e68
 800de74:	08019f74 	.word	0x08019f74

0800de78 <acc_detector_distance_processor_measurement_type_get>:
 800de78:	b508      	push	{r3, lr}
 800de7a:	b118      	cbz	r0, 800de84 <acc_detector_distance_processor_measurement_type_get+0xc>
 800de7c:	4b06      	ldr	r3, [pc, #24]	@ (800de98 <acc_detector_distance_processor_measurement_type_get+0x20>)
 800de7e:	6802      	ldr	r2, [r0, #0]
 800de80:	429a      	cmp	r2, r3
 800de82:	d007      	beq.n	800de94 <acc_detector_distance_processor_measurement_type_get+0x1c>
 800de84:	4b05      	ldr	r3, [pc, #20]	@ (800de9c <acc_detector_distance_processor_measurement_type_get+0x24>)
 800de86:	4a06      	ldr	r2, [pc, #24]	@ (800dea0 <acc_detector_distance_processor_measurement_type_get+0x28>)
 800de88:	691b      	ldr	r3, [r3, #16]
 800de8a:	4906      	ldr	r1, [pc, #24]	@ (800dea4 <acc_detector_distance_processor_measurement_type_get+0x2c>)
 800de8c:	2000      	movs	r0, #0
 800de8e:	4798      	blx	r3
 800de90:	2000      	movs	r0, #0
 800de92:	bd08      	pop	{r3, pc}
 800de94:	7940      	ldrb	r0, [r0, #5]
 800de96:	bd08      	pop	{r3, pc}
 800de98:	0fa1afe1 	.word	0x0fa1afe1
 800de9c:	200008cc 	.word	0x200008cc
 800dea0:	08019e84 	.word	0x08019e84
 800dea4:	08019e68 	.word	0x08019e68

0800dea8 <acc_detector_distance_processor_profile_get>:
 800dea8:	b508      	push	{r3, lr}
 800deaa:	b118      	cbz	r0, 800deb4 <acc_detector_distance_processor_profile_get+0xc>
 800deac:	4b06      	ldr	r3, [pc, #24]	@ (800dec8 <acc_detector_distance_processor_profile_get+0x20>)
 800deae:	6802      	ldr	r2, [r0, #0]
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d007      	beq.n	800dec4 <acc_detector_distance_processor_profile_get+0x1c>
 800deb4:	4b05      	ldr	r3, [pc, #20]	@ (800decc <acc_detector_distance_processor_profile_get+0x24>)
 800deb6:	4a06      	ldr	r2, [pc, #24]	@ (800ded0 <acc_detector_distance_processor_profile_get+0x28>)
 800deb8:	691b      	ldr	r3, [r3, #16]
 800deba:	4906      	ldr	r1, [pc, #24]	@ (800ded4 <acc_detector_distance_processor_profile_get+0x2c>)
 800debc:	2000      	movs	r0, #0
 800debe:	4798      	blx	r3
 800dec0:	2001      	movs	r0, #1
 800dec2:	bd08      	pop	{r3, pc}
 800dec4:	7f80      	ldrb	r0, [r0, #30]
 800dec6:	bd08      	pop	{r3, pc}
 800dec8:	0fa1afe1 	.word	0x0fa1afe1
 800decc:	200008cc 	.word	0x200008cc
 800ded0:	08019e84 	.word	0x08019e84
 800ded4:	08019e68 	.word	0x08019e68

0800ded8 <validate_distance_settings>:
 800ded8:	edd0 7a00 	vldr	s15, [r0]
 800dedc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee4:	b510      	push	{r4, lr}
 800dee6:	4604      	mov	r4, r0
 800dee8:	d45c      	bmi.n	800dfa4 <validate_distance_settings+0xcc>
 800deea:	2001      	movs	r0, #1
 800deec:	edd4 7a01 	vldr	s15, [r4, #4]
 800def0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800def4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800def8:	d508      	bpl.n	800df0c <validate_distance_settings+0x34>
 800defa:	4b2e      	ldr	r3, [pc, #184]	@ (800dfb4 <validate_distance_settings+0xdc>)
 800defc:	4a2e      	ldr	r2, [pc, #184]	@ (800dfb8 <validate_distance_settings+0xe0>)
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	492e      	ldr	r1, [pc, #184]	@ (800dfbc <validate_distance_settings+0xe4>)
 800df02:	2000      	movs	r0, #0
 800df04:	4798      	blx	r3
 800df06:	edd4 7a01 	vldr	s15, [r4, #4]
 800df0a:	2000      	movs	r0, #0
 800df0c:	ed94 7a00 	vldr	s14, [r4]
 800df10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df18:	dd08      	ble.n	800df2c <validate_distance_settings+0x54>
 800df1a:	4b26      	ldr	r3, [pc, #152]	@ (800dfb4 <validate_distance_settings+0xdc>)
 800df1c:	4a28      	ldr	r2, [pc, #160]	@ (800dfc0 <validate_distance_settings+0xe8>)
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	4926      	ldr	r1, [pc, #152]	@ (800dfbc <validate_distance_settings+0xe4>)
 800df22:	2000      	movs	r0, #0
 800df24:	4798      	blx	r3
 800df26:	edd4 7a01 	vldr	s15, [r4, #4]
 800df2a:	2000      	movs	r0, #0
 800df2c:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 800df30:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df38:	dd06      	ble.n	800df48 <validate_distance_settings+0x70>
 800df3a:	4b1e      	ldr	r3, [pc, #120]	@ (800dfb4 <validate_distance_settings+0xdc>)
 800df3c:	4a21      	ldr	r2, [pc, #132]	@ (800dfc4 <validate_distance_settings+0xec>)
 800df3e:	691b      	ldr	r3, [r3, #16]
 800df40:	491e      	ldr	r1, [pc, #120]	@ (800dfbc <validate_distance_settings+0xe4>)
 800df42:	2000      	movs	r0, #0
 800df44:	4798      	blx	r3
 800df46:	2000      	movs	r0, #0
 800df48:	edd4 7a03 	vldr	s15, [r4, #12]
 800df4c:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 800df50:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df58:	d41c      	bmi.n	800df94 <validate_distance_settings+0xbc>
 800df5a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800dfc8 <validate_distance_settings+0xf0>
 800df5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df66:	dc15      	bgt.n	800df94 <validate_distance_settings+0xbc>
 800df68:	edd4 7a08 	vldr	s15, [r4, #32]
 800df6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df74:	d406      	bmi.n	800df84 <validate_distance_settings+0xac>
 800df76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df82:	dd06      	ble.n	800df92 <validate_distance_settings+0xba>
 800df84:	4b0b      	ldr	r3, [pc, #44]	@ (800dfb4 <validate_distance_settings+0xdc>)
 800df86:	4a11      	ldr	r2, [pc, #68]	@ (800dfcc <validate_distance_settings+0xf4>)
 800df88:	691b      	ldr	r3, [r3, #16]
 800df8a:	490c      	ldr	r1, [pc, #48]	@ (800dfbc <validate_distance_settings+0xe4>)
 800df8c:	2000      	movs	r0, #0
 800df8e:	4798      	blx	r3
 800df90:	2000      	movs	r0, #0
 800df92:	bd10      	pop	{r4, pc}
 800df94:	4b07      	ldr	r3, [pc, #28]	@ (800dfb4 <validate_distance_settings+0xdc>)
 800df96:	4a0e      	ldr	r2, [pc, #56]	@ (800dfd0 <validate_distance_settings+0xf8>)
 800df98:	691b      	ldr	r3, [r3, #16]
 800df9a:	4908      	ldr	r1, [pc, #32]	@ (800dfbc <validate_distance_settings+0xe4>)
 800df9c:	2000      	movs	r0, #0
 800df9e:	4798      	blx	r3
 800dfa0:	2000      	movs	r0, #0
 800dfa2:	e7e1      	b.n	800df68 <validate_distance_settings+0x90>
 800dfa4:	4b03      	ldr	r3, [pc, #12]	@ (800dfb4 <validate_distance_settings+0xdc>)
 800dfa6:	4a0b      	ldr	r2, [pc, #44]	@ (800dfd4 <validate_distance_settings+0xfc>)
 800dfa8:	691b      	ldr	r3, [r3, #16]
 800dfaa:	4904      	ldr	r1, [pc, #16]	@ (800dfbc <validate_distance_settings+0xe4>)
 800dfac:	2000      	movs	r0, #0
 800dfae:	4798      	blx	r3
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	e79b      	b.n	800deec <validate_distance_settings+0x14>
 800dfb4:	200008cc 	.word	0x200008cc
 800dfb8:	0801a024 	.word	0x0801a024
 800dfbc:	0801a000 	.word	0x0801a000
 800dfc0:	0801a03c 	.word	0x0801a03c
 800dfc4:	0801a058 	.word	0x0801a058
 800dfc8:	420c0000 	.word	0x420c0000
 800dfcc:	0801a0ac 	.word	0x0801a0ac
 800dfd0:	0801a080 	.word	0x0801a080
 800dfd4:	08019fe4 	.word	0x08019fe4

0800dfd8 <sg_get_breakpoint_margin.constprop.0>:
 800dfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfdc:	460d      	mov	r5, r1
 800dfde:	4617      	mov	r7, r2
 800dfe0:	461e      	mov	r6, r3
 800dfe2:	4680      	mov	r8, r0
 800dfe4:	f7fe f810 	bl	800c008 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 800dfe8:	fb15 f400 	smulbb	r4, r5, r0
 800dfec:	b2a4      	uxth	r4, r4
 800dfee:	b10f      	cbz	r7, 800dff4 <sg_get_breakpoint_margin.constprop.0+0x1c>
 800dff0:	0064      	lsls	r4, r4, #1
 800dff2:	b2a4      	uxth	r4, r4
 800dff4:	2e03      	cmp	r6, #3
 800dff6:	d002      	beq.n	800dffe <sg_get_breakpoint_margin.constprop.0+0x26>
 800dff8:	4620      	mov	r0, r4
 800dffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dffe:	4640      	mov	r0, r8
 800e000:	f003 f8ba 	bl	8011178 <acc_detector_utils_get_fwhm>
 800e004:	4628      	mov	r0, r5
 800e006:	f7fe f927 	bl	800c258 <acc_detector_distance_alg_cfar_margin>
 800e00a:	fb15 4000 	smlabb	r0, r5, r0, r4
 800e00e:	b284      	uxth	r4, r0
 800e010:	4620      	mov	r0, r4
 800e012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e016:	bf00      	nop

0800e018 <acc_detector_distance_translation_limit_step_length>:
 800e018:	b510      	push	{r4, lr}
 800e01a:	460c      	mov	r4, r1
 800e01c:	f003 f8ac 	bl	8011178 <acc_detector_utils_get_fwhm>
 800e020:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e088 <acc_detector_distance_translation_limit_step_length+0x70>
 800e024:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800e028:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800e02c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e034:	ee17 3a90 	vmov	r3, s15
 800e038:	b298      	uxth	r0, r3
 800e03a:	b114      	cbz	r4, 800e042 <acc_detector_distance_translation_limit_step_length+0x2a>
 800e03c:	42a0      	cmp	r0, r4
 800e03e:	bf28      	it	cs
 800e040:	4620      	movcs	r0, r4
 800e042:	2818      	cmp	r0, #24
 800e044:	d817      	bhi.n	800e076 <acc_detector_distance_translation_limit_step_length+0x5e>
 800e046:	b1a0      	cbz	r0, 800e072 <acc_detector_distance_translation_limit_step_length+0x5a>
 800e048:	2218      	movs	r2, #24
 800e04a:	fbb2 f3f0 	udiv	r3, r2, r0
 800e04e:	fb00 f303 	mul.w	r3, r0, r3
 800e052:	1ad3      	subs	r3, r2, r3
 800e054:	b29b      	uxth	r3, r3
 800e056:	b943      	cbnz	r3, 800e06a <acc_detector_distance_translation_limit_step_length+0x52>
 800e058:	e00c      	b.n	800e074 <acc_detector_distance_translation_limit_step_length+0x5c>
 800e05a:	fbb2 f3f0 	udiv	r3, r2, r0
 800e05e:	fb00 f303 	mul.w	r3, r0, r3
 800e062:	f1c3 0318 	rsb	r3, r3, #24
 800e066:	b29b      	uxth	r3, r3
 800e068:	b123      	cbz	r3, 800e074 <acc_detector_distance_translation_limit_step_length+0x5c>
 800e06a:	3801      	subs	r0, #1
 800e06c:	b280      	uxth	r0, r0
 800e06e:	2800      	cmp	r0, #0
 800e070:	d1f3      	bne.n	800e05a <acc_detector_distance_translation_limit_step_length+0x42>
 800e072:	2001      	movs	r0, #1
 800e074:	bd10      	pop	{r4, pc}
 800e076:	4b05      	ldr	r3, [pc, #20]	@ (800e08c <acc_detector_distance_translation_limit_step_length+0x74>)
 800e078:	fba3 3000 	umull	r3, r0, r3, r0
 800e07c:	0900      	lsrs	r0, r0, #4
 800e07e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800e082:	00c0      	lsls	r0, r0, #3
 800e084:	b280      	uxth	r0, r0
 800e086:	bd10      	pop	{r4, pc}
 800e088:	3b23d70a 	.word	0x3b23d70a
 800e08c:	aaaaaaab 	.word	0xaaaaaaab

0800e090 <acc_detector_distance_translation_calc_leakage_free_min_dist>:
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	ed2d 8b02 	vpush	{d8}
 800e096:	4614      	mov	r4, r2
 800e098:	460e      	mov	r6, r1
 800e09a:	4605      	mov	r5, r0
 800e09c:	f003 f8ce 	bl	801123c <acc_detector_utils_min_leakage_free_dist>
 800e0a0:	2c03      	cmp	r4, #3
 800e0a2:	eeb0 8a40 	vmov.f32	s16, s0
 800e0a6:	d004      	beq.n	800e0b2 <acc_detector_distance_translation_calc_leakage_free_min_dist+0x22>
 800e0a8:	eeb0 0a48 	vmov.f32	s0, s16
 800e0ac:	ecbd 8b02 	vpop	{d8}
 800e0b0:	bd70      	pop	{r4, r5, r6, pc}
 800e0b2:	4631      	mov	r1, r6
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	f7ff ffaf 	bl	800e018 <acc_detector_distance_translation_limit_step_length>
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	4628      	mov	r0, r5
 800e0be:	f003 f85b 	bl	8011178 <acc_detector_utils_get_fwhm>
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f7fe f8c8 	bl	800c258 <acc_detector_distance_alg_cfar_margin>
 800e0c8:	ee07 4a90 	vmov	s15, r4
 800e0cc:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800e0f4 <acc_detector_distance_translation_calc_leakage_free_min_dist+0x64>
 800e0d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0d4:	ee07 0a10 	vmov	s14, r0
 800e0d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e0dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e0e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e0e4:	ee38 8a27 	vadd.f32	s16, s16, s15
 800e0e8:	eeb0 0a48 	vmov.f32	s0, s16
 800e0ec:	ecbd 8b02 	vpop	{d8}
 800e0f0:	bd70      	pop	{r4, r5, r6, pc}
 800e0f2:	bf00      	nop
 800e0f4:	3b23d70a 	.word	0x3b23d70a

0800e0f8 <will_have_transition>:
 800e0f8:	b510      	push	{r4, lr}
 800e0fa:	ed2d 8b02 	vpush	{d8}
 800e0fe:	4604      	mov	r4, r0
 800e100:	7c02      	ldrb	r2, [r0, #16]
 800e102:	8901      	ldrh	r1, [r0, #8]
 800e104:	7a80      	ldrb	r0, [r0, #10]
 800e106:	f7ff ffc3 	bl	800e090 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 800e10a:	7c22      	ldrb	r2, [r4, #16]
 800e10c:	8921      	ldrh	r1, [r4, #8]
 800e10e:	2001      	movs	r0, #1
 800e110:	eeb0 8a40 	vmov.f32	s16, s0
 800e114:	f7ff ffbc 	bl	800e090 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 800e118:	edd4 7a01 	vldr	s15, [r4, #4]
 800e11c:	eef4 7ac0 	vcmpe.f32	s15, s0
 800e120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e124:	dc06      	bgt.n	800e134 <will_have_transition+0x3c>
 800e126:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800e12a:	b11b      	cbz	r3, 800e134 <will_have_transition+0x3c>
 800e12c:	ecbd 8b02 	vpop	{d8}
 800e130:	2000      	movs	r0, #0
 800e132:	bd10      	pop	{r4, pc}
 800e134:	edd4 7a00 	vldr	s15, [r4]
 800e138:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e140:	d5f4      	bpl.n	800e12c <will_have_transition+0x34>
 800e142:	ecbd 8b02 	vpop	{d8}
 800e146:	7aa0      	ldrb	r0, [r4, #10]
 800e148:	3801      	subs	r0, #1
 800e14a:	bf18      	it	ne
 800e14c:	2001      	movne	r0, #1
 800e14e:	bd10      	pop	{r4, pc}

0800e150 <acc_detector_distance_translation_calculate_hwaas>:
 800e150:	b500      	push	{lr}
 800e152:	ed2d 8b04 	vpush	{d8-d9}
 800e156:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800e15a:	b083      	sub	sp, #12
 800e15c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e160:	9001      	str	r0, [sp, #4]
 800e162:	d80b      	bhi.n	800e17c <acc_detector_distance_translation_calculate_hwaas+0x2c>
 800e164:	4b2a      	ldr	r3, [pc, #168]	@ (800e210 <acc_detector_distance_translation_calculate_hwaas+0xc0>)
 800e166:	4a2b      	ldr	r2, [pc, #172]	@ (800e214 <acc_detector_distance_translation_calculate_hwaas+0xc4>)
 800e168:	691b      	ldr	r3, [r3, #16]
 800e16a:	492b      	ldr	r1, [pc, #172]	@ (800e218 <acc_detector_distance_translation_calculate_hwaas+0xc8>)
 800e16c:	2000      	movs	r0, #0
 800e16e:	4798      	blx	r3
 800e170:	2000      	movs	r0, #0
 800e172:	b003      	add	sp, #12
 800e174:	ecbd 8b04 	vpop	{d8-d9}
 800e178:	f85d fb04 	ldr.w	pc, [sp], #4
 800e17c:	4608      	mov	r0, r1
 800e17e:	eeb0 9a41 	vmov.f32	s18, s2
 800e182:	eef0 8a60 	vmov.f32	s17, s1
 800e186:	eef0 9a40 	vmov.f32	s19, s0
 800e18a:	f000 fd51 	bl	800ec30 <acc_detector_distance_utils_reflector_shape_exponent_get>
 800e18e:	eddd 7a01 	vldr	s15, [sp, #4]
 800e192:	eddf 0a22 	vldr	s1, [pc, #136]	@ 800e21c <acc_detector_distance_translation_calculate_hwaas+0xcc>
 800e196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e19a:	eeb0 8a40 	vmov.f32	s16, s0
 800e19e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800e1a2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e1a6:	f009 fe6d 	bl	8017e84 <fmaxf>
 800e1aa:	f009 fc6f 	bl	8017a8c <log10f>
 800e1ae:	eeb0 7a40 	vmov.f32	s14, s0
 800e1b2:	eeb0 0a68 	vmov.f32	s0, s17
 800e1b6:	eef0 8a47 	vmov.f32	s17, s14
 800e1ba:	f009 fc67 	bl	8017a8c <log10f>
 800e1be:	eeb0 1a40 	vmov.f32	s2, s0
 800e1c2:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800e1c6:	ee68 6a00 	vmul.f32	s13, s16, s0
 800e1ca:	ee26 7aa8 	vmul.f32	s14, s13, s17
 800e1ce:	ee77 7a29 	vadd.f32	s15, s14, s19
 800e1d2:	ee37 8ac1 	vsub.f32	s16, s15, s2
 800e1d6:	ee78 0a49 	vsub.f32	s1, s16, s18
 800e1da:	eec0 0a80 	vdiv.f32	s1, s1, s0
 800e1de:	f009 fc83 	bl	8017ae8 <powf>
 800e1e2:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800e1e6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e1ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e1ee:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800e1f2:	ee10 2a10 	vmov	r2, s0
 800e1f6:	b290      	uxth	r0, r2
 800e1f8:	2801      	cmp	r0, #1
 800e1fa:	bf38      	it	cc
 800e1fc:	2001      	movcc	r0, #1
 800e1fe:	4298      	cmp	r0, r3
 800e200:	bf28      	it	cs
 800e202:	4618      	movcs	r0, r3
 800e204:	b003      	add	sp, #12
 800e206:	ecbd 8b04 	vpop	{d8-d9}
 800e20a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e20e:	bf00      	nop
 800e210:	200008cc 	.word	0x200008cc
 800e214:	0801a0dc 	.word	0x0801a0dc
 800e218:	0801a000 	.word	0x0801a000
 800e21c:	3b23d70a 	.word	0x3b23d70a

0800e220 <create_group_plans>:
 800e220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e224:	ed2d 8b08 	vpush	{d8-d11}
 800e228:	4604      	mov	r4, r0
 800e22a:	ed90 8a00 	vldr	s16, [r0]
 800e22e:	7c02      	ldrb	r2, [r0, #16]
 800e230:	b08b      	sub	sp, #44	@ 0x2c
 800e232:	460d      	mov	r5, r1
 800e234:	8901      	ldrh	r1, [r0, #8]
 800e236:	2001      	movs	r0, #1
 800e238:	f7ff ff2a 	bl	800e090 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 800e23c:	eeb4 8ac0 	vcmpe.f32	s16, s0
 800e240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e244:	d52b      	bpl.n	800e29e <create_group_plans+0x7e>
 800e246:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800e24a:	9301      	str	r3, [sp, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d147      	bne.n	800e2e0 <create_group_plans+0xc0>
 800e250:	4620      	mov	r0, r4
 800e252:	f7ff ff51 	bl	800e0f8 <will_have_transition>
 800e256:	f894 a00a 	ldrb.w	sl, [r4, #10]
 800e25a:	4606      	mov	r6, r0
 800e25c:	bb48      	cbnz	r0, 800e2b2 <create_group_plans+0x92>
 800e25e:	4607      	mov	r7, r0
 800e260:	4650      	mov	r0, sl
 800e262:	7c22      	ldrb	r2, [r4, #16]
 800e264:	8921      	ldrh	r1, [r4, #8]
 800e266:	f7ff ff13 	bl	800e090 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 800e26a:	edd4 7a01 	vldr	s15, [r4, #4]
 800e26e:	7aa0      	ldrb	r0, [r4, #10]
 800e270:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e278:	d527      	bpl.n	800e2ca <create_group_plans+0xaa>
 800e27a:	7c22      	ldrb	r2, [r4, #16]
 800e27c:	8921      	ldrh	r1, [r4, #8]
 800e27e:	f7ff ff07 	bl	800e090 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 800e282:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800e286:	eef0 0a40 	vmov.f32	s1, s0
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f040 8094 	bne.w	800e3b8 <create_group_plans+0x198>
 800e290:	7aa3      	ldrb	r3, [r4, #10]
 800e292:	2b01      	cmp	r3, #1
 800e294:	f040 8090 	bne.w	800e3b8 <create_group_plans+0x198>
 800e298:	ed94 0a00 	vldr	s0, [r4]
 800e29c:	e090      	b.n	800e3c0 <create_group_plans+0x1a0>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	9301      	str	r3, [sp, #4]
 800e2a4:	f7ff ff28 	bl	800e0f8 <will_have_transition>
 800e2a8:	f894 a00a 	ldrb.w	sl, [r4, #10]
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	d0d5      	beq.n	800e25e <create_group_plans+0x3e>
 800e2b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e2b6:	2b04      	cmp	r3, #4
 800e2b8:	f200 828f 	bhi.w	800e7da <create_group_plans+0x5ba>
 800e2bc:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e2c0:	0174016c 	.word	0x0174016c
 800e2c4:	02520256 	.word	0x02520256
 800e2c8:	0246      	.short	0x0246
 800e2ca:	2801      	cmp	r0, #1
 800e2cc:	d0d5      	beq.n	800e27a <create_group_plans+0x5a>
 800e2ce:	9b01      	ldr	r3, [sp, #4]
 800e2d0:	b103      	cbz	r3, 800e2d4 <create_group_plans+0xb4>
 800e2d2:	2601      	movs	r6, #1
 800e2d4:	4630      	mov	r0, r6
 800e2d6:	b00b      	add	sp, #44	@ 0x2c
 800e2d8:	ecbd 8b08 	vpop	{d8-d11}
 800e2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e0:	8921      	ldrh	r1, [r4, #8]
 800e2e2:	2001      	movs	r0, #1
 800e2e4:	f7ff fe98 	bl	800e018 <acc_detector_distance_translation_limit_step_length>
 800e2e8:	4606      	mov	r6, r0
 800e2ea:	4601      	mov	r1, r0
 800e2ec:	2001      	movs	r0, #1
 800e2ee:	f7fe fbff 	bl	800caf0 <acc_detector_distance_alg_calc_processing_gain>
 800e2f2:	2001      	movs	r0, #1
 800e2f4:	4680      	mov	r8, r0
 800e2f6:	eeb0 8a40 	vmov.f32	s16, s0
 800e2fa:	f002 ff4d 	bl	8011198 <acc_detector_utils_radar_loop_gain_per_hwaas>
 800e2fe:	4631      	mov	r1, r6
 800e300:	f885 8002 	strb.w	r8, [r5, #2]
 800e304:	4640      	mov	r0, r8
 800e306:	802e      	strh	r6, [r5, #0]
 800e308:	eef0 8a40 	vmov.f32	s17, s0
 800e30c:	f7fd fe7c 	bl	800c008 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 800e310:	4607      	mov	r7, r0
 800e312:	4620      	mov	r0, r4
 800e314:	f7ff fef0 	bl	800e0f8 <will_have_transition>
 800e318:	4631      	mov	r1, r6
 800e31a:	4681      	mov	r9, r0
 800e31c:	4640      	mov	r0, r8
 800e31e:	f7fd fe73 	bl	800c008 <acc_detector_distance_alg_get_distance_filter_edge_margin>
 800e322:	fb16 f000 	smulbb	r0, r6, r0
 800e326:	fa1f f880 	uxth.w	r8, r0
 800e32a:	f1b9 0f00 	cmp.w	r9, #0
 800e32e:	d003      	beq.n	800e338 <create_group_plans+0x118>
 800e330:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800e334:	fa1f f888 	uxth.w	r8, r8
 800e338:	7c22      	ldrb	r2, [r4, #16]
 800e33a:	8921      	ldrh	r1, [r4, #8]
 800e33c:	ed94 9a01 	vldr	s18, [r4, #4]
 800e340:	2001      	movs	r0, #1
 800e342:	f7ff fea5 	bl	800e090 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 800e346:	eef0 0a40 	vmov.f32	s1, s0
 800e34a:	eeb0 0a49 	vmov.f32	s0, s18
 800e34e:	f009 fdb6 	bl	8017ebe <fminf>
 800e352:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 800e5c8 <create_group_plans+0x3a8>
 800e356:	ed94 6a00 	vldr	s12, [r4]
 800e35a:	eec0 7a26 	vdiv.f32	s15, s0, s13
 800e35e:	2302      	movs	r3, #2
 800e360:	75ab      	strb	r3, [r5, #22]
 800e362:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e36a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800e36e:	ee17 3a90 	vmov	r3, s15
 800e372:	ee17 2a10 	vmov	r2, s14
 800e376:	b29b      	uxth	r3, r3
 800e378:	fbb3 f3f6 	udiv	r3, r3, r6
 800e37c:	fb13 f306 	smulbb	r3, r3, r6
 800e380:	b29b      	uxth	r3, r3
 800e382:	b290      	uxth	r0, r2
 800e384:	fbb0 f0f6 	udiv	r0, r0, r6
 800e388:	1bc7      	subs	r7, r0, r7
 800e38a:	4498      	add	r8, r3
 800e38c:	fb17 f606 	smulbb	r6, r7, r6
 800e390:	f8a5 8006 	strh.w	r8, [r5, #6]
 800e394:	80ae      	strh	r6, [r5, #4]
 800e396:	b218      	sxth	r0, r3
 800e398:	7ca1      	ldrb	r1, [r4, #18]
 800e39a:	ed94 0a03 	vldr	s0, [r4, #12]
 800e39e:	eeb0 1a68 	vmov.f32	s2, s17
 800e3a2:	eef0 0a48 	vmov.f32	s1, s16
 800e3a6:	f7ff fed3 	bl	800e150 <acc_detector_distance_translation_calculate_hwaas>
 800e3aa:	f895 30c0 	ldrb.w	r3, [r5, #192]	@ 0xc0
 800e3ae:	81e8      	strh	r0, [r5, #14]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	f885 30c0 	strb.w	r3, [r5, #192]	@ 0xc0
 800e3b6:	e74b      	b.n	800e250 <create_group_plans+0x30>
 800e3b8:	ed94 0a00 	vldr	s0, [r4]
 800e3bc:	f009 fd62 	bl	8017e84 <fmaxf>
 800e3c0:	edd4 6a01 	vldr	s13, [r4, #4]
 800e3c4:	eef4 6ac0 	vcmpe.f32	s13, s0
 800e3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3cc:	f100 80cf 	bmi.w	800e56e <create_group_plans+0x34e>
 800e3d0:	f1c7 0a05 	rsb	sl, r7, #5
 800e3d4:	fa5f fa8a 	uxtb.w	sl, sl
 800e3d8:	f1ba 0f01 	cmp.w	sl, #1
 800e3dc:	f240 80c7 	bls.w	800e56e <create_group_plans+0x34e>
 800e3e0:	ee07 aa90 	vmov	s15, sl
 800e3e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e3ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3f0:	ee36 6ac0 	vsub.f32	s12, s13, s0
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	f10a 31ff 	add.w	r1, sl, #4294967295
 800e400:	a80a      	add	r0, sp, #40	@ 0x28
 800e402:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e406:	ee07 3a90 	vmov	s15, r3
 800e40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e40e:	3301      	adds	r3, #1
 800e410:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e414:	b29b      	uxth	r3, r3
 800e416:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e41a:	428b      	cmp	r3, r1
 800e41c:	ed42 7a05 	vstr	s15, [r2, #-20]	@ 0xffffffec
 800e420:	461a      	mov	r2, r3
 800e422:	d3ed      	bcc.n	800e400 <create_group_plans+0x1e0>
 800e424:	eb00 038a 	add.w	r3, r0, sl, lsl #2
 800e428:	ed43 6a06 	vstr	s13, [r3, #-24]	@ 0xffffffe8
 800e42c:	8921      	ldrh	r1, [r4, #8]
 800e42e:	7aa0      	ldrb	r0, [r4, #10]
 800e430:	f7ff fdf2 	bl	800e018 <acc_detector_distance_translation_limit_step_length>
 800e434:	4601      	mov	r1, r0
 800e436:	4680      	mov	r8, r0
 800e438:	7aa0      	ldrb	r0, [r4, #10]
 800e43a:	f7fe fb59 	bl	800caf0 <acc_detector_distance_alg_calc_processing_gain>
 800e43e:	7aa0      	ldrb	r0, [r4, #10]
 800e440:	eef0 8a40 	vmov.f32	s17, s0
 800e444:	f002 fea8 	bl	8011198 <acc_detector_utils_radar_loop_gain_per_hwaas>
 800e448:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800e44c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800e450:	f894 900a 	ldrb.w	r9, [r4, #10]
 800e454:	f883 9062 	strb.w	r9, [r3, #98]	@ 0x62
 800e458:	f1c7 0204 	rsb	r2, r7, #4
 800e45c:	f8a3 8060 	strh.w	r8, [r3, #96]	@ 0x60
 800e460:	f883 a076 	strb.w	sl, [r3, #118]	@ 0x76
 800e464:	f012 0fff 	tst.w	r2, #255	@ 0xff
 800e468:	ea4f 0347 	mov.w	r3, r7, lsl #1
 800e46c:	eeb0 9a40 	vmov.f32	s18, s0
 800e470:	9302      	str	r3, [sp, #8]
 800e472:	f000 8189 	beq.w	800e788 <create_group_plans+0x568>
 800e476:	f04f 0a18 	mov.w	sl, #24
 800e47a:	f1c7 0903 	rsb	r9, r7, #3
 800e47e:	fb0a 5a07 	mla	sl, sl, r7, r5
 800e482:	fa5f f989 	uxtb.w	r9, r9
 800e486:	ab06      	add	r3, sp, #24
 800e488:	ed9f 8a4f 	vldr	s16, [pc, #316]	@ 800e5c8 <create_group_plans+0x3a8>
 800e48c:	f10a 0a64 	add.w	sl, sl, #100	@ 0x64
 800e490:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800e494:	f10d 0b14 	add.w	fp, sp, #20
 800e498:	eddb 6a00 	vldr	s13, [fp]
 800e49c:	ed94 0a03 	vldr	s0, [r4, #12]
 800e4a0:	ed9b 7a01 	vldr	s14, [fp, #4]
 800e4a4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800e4a8:	f10b 0b04 	add.w	fp, fp, #4
 800e4ac:	ee86 7a88 	vdiv.f32	s14, s13, s16
 800e4b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4b4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800e4b8:	ee17 3a90 	vmov	r3, s15
 800e4bc:	b298      	uxth	r0, r3
 800e4be:	ee17 3a10 	vmov	r3, s14
 800e4c2:	fbb0 f0f8 	udiv	r0, r0, r8
 800e4c6:	fb10 f008 	smulbb	r0, r0, r8
 800e4ca:	b200      	sxth	r0, r0
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	fbb3 f3f8 	udiv	r3, r3, r8
 800e4d2:	fb13 f308 	smulbb	r3, r3, r8
 800e4d6:	f8aa 3000 	strh.w	r3, [sl]
 800e4da:	f82a 0f02 	strh.w	r0, [sl, #2]!
 800e4de:	eeb0 1a49 	vmov.f32	s2, s18
 800e4e2:	7ca1      	ldrb	r1, [r4, #18]
 800e4e4:	eef0 0a68 	vmov.f32	s1, s17
 800e4e8:	f7ff fe32 	bl	800e150 <acc_detector_distance_translation_calculate_hwaas>
 800e4ec:	45cb      	cmp	fp, r9
 800e4ee:	f8aa 0008 	strh.w	r0, [sl, #8]
 800e4f2:	d1d1      	bne.n	800e498 <create_group_plans+0x278>
 800e4f4:	9b02      	ldr	r3, [sp, #8]
 800e4f6:	f894 900a 	ldrb.w	r9, [r4, #10]
 800e4fa:	19d8      	adds	r0, r3, r7
 800e4fc:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
 800e500:	f89c 3076 	ldrb.w	r3, [ip, #118]	@ 0x76
 800e504:	2b02      	cmp	r3, #2
 800e506:	f240 813f 	bls.w	800e788 <create_group_plans+0x568>
 800e50a:	0080      	lsls	r0, r0, #2
 800e50c:	2102      	movs	r1, #2
 800e50e:	e009      	b.n	800e524 <create_group_plans+0x304>
 800e510:	3101      	adds	r1, #1
 800e512:	f89c 3076 	ldrb.w	r3, [ip, #118]	@ 0x76
 800e516:	b289      	uxth	r1, r1
 800e518:	428b      	cmp	r3, r1
 800e51a:	f240 8135 	bls.w	800e788 <create_group_plans+0x568>
 800e51e:	2b02      	cmp	r3, #2
 800e520:	f240 8132 	bls.w	800e788 <create_group_plans+0x568>
 800e524:	1842      	adds	r2, r0, r1
 800e526:	eb05 0e42 	add.w	lr, r5, r2, lsl #1
 800e52a:	460a      	mov	r2, r1
 800e52c:	f9be a064 	ldrsh.w	sl, [lr, #100]	@ 0x64
 800e530:	f9be e062 	ldrsh.w	lr, [lr, #98]	@ 0x62
 800e534:	45f2      	cmp	sl, lr
 800e536:	d1eb      	bne.n	800e510 <create_group_plans+0x2f0>
 800e538:	f103 3eff 	add.w	lr, r3, #4294967295
 800e53c:	4571      	cmp	r1, lr
 800e53e:	bf38      	it	cc
 800e540:	460b      	movcc	r3, r1
 800e542:	d20f      	bcs.n	800e564 <create_group_plans+0x344>
 800e544:	4402      	add	r2, r0
 800e546:	eb00 0a03 	add.w	sl, r0, r3
 800e54a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800e54e:	3301      	adds	r3, #1
 800e550:	b29b      	uxth	r3, r3
 800e552:	eb05 0a4a 	add.w	sl, r5, sl, lsl #1
 800e556:	f9b2 2066 	ldrsh.w	r2, [r2, #102]	@ 0x66
 800e55a:	f8aa 2064 	strh.w	r2, [sl, #100]	@ 0x64
 800e55e:	4573      	cmp	r3, lr
 800e560:	461a      	mov	r2, r3
 800e562:	d3ef      	bcc.n	800e544 <create_group_plans+0x324>
 800e564:	fa5f f38e 	uxtb.w	r3, lr
 800e568:	f88c 3076 	strb.w	r3, [ip, #118]	@ 0x76
 800e56c:	e7d4      	b.n	800e518 <create_group_plans+0x2f8>
 800e56e:	4b17      	ldr	r3, [pc, #92]	@ (800e5cc <create_group_plans+0x3ac>)
 800e570:	4a17      	ldr	r2, [pc, #92]	@ (800e5d0 <create_group_plans+0x3b0>)
 800e572:	691b      	ldr	r3, [r3, #16]
 800e574:	4917      	ldr	r1, [pc, #92]	@ (800e5d4 <create_group_plans+0x3b4>)
 800e576:	2000      	movs	r0, #0
 800e578:	4798      	blx	r3
 800e57a:	2200      	movs	r2, #0
 800e57c:	f895 30c1 	ldrb.w	r3, [r5, #193]	@ 0xc1
 800e580:	3301      	adds	r3, #1
 800e582:	f885 30c1 	strb.w	r3, [r5, #193]	@ 0xc1
 800e586:	9b01      	ldr	r3, [sp, #4]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f47f aea2 	bne.w	800e2d2 <create_group_plans+0xb2>
 800e58e:	2e00      	cmp	r6, #0
 800e590:	f47f ae9f 	bne.w	800e2d2 <create_group_plans+0xb2>
 800e594:	4616      	mov	r6, r2
 800e596:	e69d      	b.n	800e2d4 <create_group_plans+0xb4>
 800e598:	2600      	movs	r6, #0
 800e59a:	4637      	mov	r7, r6
 800e59c:	f895 30c1 	ldrb.w	r3, [r5, #193]	@ 0xc1
 800e5a0:	443b      	add	r3, r7
 800e5a2:	f885 30c1 	strb.w	r3, [r5, #193]	@ 0xc1
 800e5a6:	e65b      	b.n	800e260 <create_group_plans+0x40>
 800e5a8:	f240 2301 	movw	r3, #513	@ 0x201
 800e5ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	9302      	str	r3, [sp, #8]
 800e5b4:	2700      	movs	r7, #0
 800e5b6:	eddf aa04 	vldr	s21, [pc, #16]	@ 800e5c8 <create_group_plans+0x3a8>
 800e5ba:	9503      	str	r5, [sp, #12]
 800e5bc:	46b9      	mov	r9, r7
 800e5be:	f105 0b60 	add.w	fp, r5, #96	@ 0x60
 800e5c2:	f04f 0801 	mov.w	r8, #1
 800e5c6:	e09d      	b.n	800e704 <create_group_plans+0x4e4>
 800e5c8:	3b23d70a 	.word	0x3b23d70a
 800e5cc:	200008cc 	.word	0x200008cc
 800e5d0:	0801a104 	.word	0x0801a104
 800e5d4:	0801a000 	.word	0x0801a000
 800e5d8:	edd4 9a01 	vldr	s19, [r4, #4]
 800e5dc:	eeb4 9ae9 	vcmpe.f32	s18, s19
 800e5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5e4:	f140 80a4 	bpl.w	800e730 <create_group_plans+0x510>
 800e5e8:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800e5ec:	b903      	cbnz	r3, 800e5f0 <create_group_plans+0x3d0>
 800e5ee:	b13f      	cbz	r7, 800e600 <create_group_plans+0x3e0>
 800e5f0:	eeb0 0a68 	vmov.f32	s0, s17
 800e5f4:	eef0 0a49 	vmov.f32	s1, s18
 800e5f8:	f009 fc44 	bl	8017e84 <fmaxf>
 800e5fc:	eef0 8a40 	vmov.f32	s17, s0
 800e600:	eef0 0a48 	vmov.f32	s1, s16
 800e604:	eeb0 0a69 	vmov.f32	s0, s19
 800e608:	f009 fc59 	bl	8017ebe <fminf>
 800e60c:	8921      	ldrh	r1, [r4, #8]
 800e60e:	4640      	mov	r0, r8
 800e610:	eeb0 9a40 	vmov.f32	s18, s0
 800e614:	f7ff fd00 	bl	800e018 <acc_detector_distance_translation_limit_step_length>
 800e618:	4601      	mov	r1, r0
 800e61a:	4606      	mov	r6, r0
 800e61c:	4640      	mov	r0, r8
 800e61e:	f7fe fa67 	bl	800caf0 <acc_detector_distance_alg_calc_processing_gain>
 800e622:	4640      	mov	r0, r8
 800e624:	eef0 9a40 	vmov.f32	s19, s0
 800e628:	f002 fdb6 	bl	8011198 <acc_detector_utils_radar_loop_gain_per_hwaas>
 800e62c:	7c22      	ldrb	r2, [r4, #16]
 800e62e:	8921      	ldrh	r1, [r4, #8]
 800e630:	ed94 ba00 	vldr	s22, [r4]
 800e634:	2001      	movs	r0, #1
 800e636:	eeb0 aa40 	vmov.f32	s20, s0
 800e63a:	f7ff fd29 	bl	800e090 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 800e63e:	eeb4 bac0 	vcmpe.f32	s22, s0
 800e642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e646:	d502      	bpl.n	800e64e <create_group_plans+0x42e>
 800e648:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800e64c:	b912      	cbnz	r2, 800e654 <create_group_plans+0x434>
 800e64e:	1e3a      	subs	r2, r7, #0
 800e650:	bf18      	it	ne
 800e652:	2201      	movne	r2, #1
 800e654:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800e658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65c:	4631      	mov	r1, r6
 800e65e:	7c23      	ldrb	r3, [r4, #16]
 800e660:	4640      	mov	r0, r8
 800e662:	bf4c      	ite	mi
 800e664:	f04f 0a01 	movmi.w	sl, #1
 800e668:	f04f 0a00 	movpl.w	sl, #0
 800e66c:	f7ff fcb4 	bl	800dfd8 <sg_get_breakpoint_margin.constprop.0>
 800e670:	4652      	mov	r2, sl
 800e672:	4684      	mov	ip, r0
 800e674:	4631      	mov	r1, r6
 800e676:	7c23      	ldrb	r3, [r4, #16]
 800e678:	4640      	mov	r0, r8
 800e67a:	46e2      	mov	sl, ip
 800e67c:	f7ff fcac 	bl	800dfd8 <sg_get_breakpoint_margin.constprop.0>
 800e680:	ee89 7a2a 	vdiv.f32	s14, s18, s21
 800e684:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800e688:	eb0b 05c3 	add.w	r5, fp, r3, lsl #3
 800e68c:	f82b 6033 	strh.w	r6, [fp, r3, lsl #3]
 800e690:	f04f 0302 	mov.w	r3, #2
 800e694:	75ab      	strb	r3, [r5, #22]
 800e696:	f885 8002 	strb.w	r8, [r5, #2]
 800e69a:	3701      	adds	r7, #1
 800e69c:	b2ff      	uxtb	r7, r7
 800e69e:	eec8 7aaa 	vdiv.f32	s15, s17, s21
 800e6a2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800e6a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6aa:	ee17 3a10 	vmov	r3, s14
 800e6ae:	ee17 2a90 	vmov	r2, s15
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	fbb3 f3f6 	udiv	r3, r3, r6
 800e6b8:	fb13 f306 	smulbb	r3, r3, r6
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	b291      	uxth	r1, r2
 800e6c0:	fbb1 f1f6 	udiv	r1, r1, r6
 800e6c4:	fb11 f606 	smulbb	r6, r1, r6
 800e6c8:	4418      	add	r0, r3
 800e6ca:	eba6 0a0a 	sub.w	sl, r6, sl
 800e6ce:	80e8      	strh	r0, [r5, #6]
 800e6d0:	f8a5 a004 	strh.w	sl, [r5, #4]
 800e6d4:	7ca1      	ldrb	r1, [r4, #18]
 800e6d6:	ed94 0a03 	vldr	s0, [r4, #12]
 800e6da:	b218      	sxth	r0, r3
 800e6dc:	eeb0 1a4a 	vmov.f32	s2, s20
 800e6e0:	eef0 0a69 	vmov.f32	s1, s19
 800e6e4:	f7ff fd34 	bl	800e150 <acc_detector_distance_translation_calculate_hwaas>
 800e6e8:	81e8      	strh	r0, [r5, #14]
 800e6ea:	9b02      	ldr	r3, [sp, #8]
 800e6ec:	f109 0901 	add.w	r9, r9, #1
 800e6f0:	fa1f f989 	uxth.w	r9, r9
 800e6f4:	4599      	cmp	r9, r3
 800e6f6:	d240      	bcs.n	800e77a <create_group_plans+0x55a>
 800e6f8:	ab0a      	add	r3, sp, #40	@ 0x28
 800e6fa:	444b      	add	r3, r9
 800e6fc:	f813 8c14 	ldrb.w	r8, [r3, #-20]
 800e700:	f813 ac13 	ldrb.w	sl, [r3, #-19]
 800e704:	7c22      	ldrb	r2, [r4, #16]
 800e706:	8921      	ldrh	r1, [r4, #8]
 800e708:	4640      	mov	r0, r8
 800e70a:	f7ff fcc1 	bl	800e090 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 800e70e:	7c22      	ldrb	r2, [r4, #16]
 800e710:	8921      	ldrh	r1, [r4, #8]
 800e712:	4650      	mov	r0, sl
 800e714:	eeb0 9a40 	vmov.f32	s18, s0
 800e718:	f7ff fcba 	bl	800e090 <acc_detector_distance_translation_calc_leakage_free_min_dist>
 800e71c:	edd4 8a00 	vldr	s17, [r4]
 800e720:	eeb4 0ae8 	vcmpe.f32	s0, s17
 800e724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e728:	eeb0 8a40 	vmov.f32	s16, s0
 800e72c:	f73f af54 	bgt.w	800e5d8 <create_group_plans+0x3b8>
 800e730:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1d8      	bne.n	800e6ea <create_group_plans+0x4ca>
 800e738:	2f00      	cmp	r7, #0
 800e73a:	d1d6      	bne.n	800e6ea <create_group_plans+0x4ca>
 800e73c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e744:	ddd1      	ble.n	800e6ea <create_group_plans+0x4ca>
 800e746:	edd4 9a01 	vldr	s19, [r4, #4]
 800e74a:	e759      	b.n	800e600 <create_group_plans+0x3e0>
 800e74c:	f240 3201 	movw	r2, #769	@ 0x301
 800e750:	2305      	movs	r3, #5
 800e752:	f88d 3016 	strb.w	r3, [sp, #22]
 800e756:	2302      	movs	r3, #2
 800e758:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e75c:	f04f 0a03 	mov.w	sl, #3
 800e760:	9302      	str	r3, [sp, #8]
 800e762:	e727      	b.n	800e5b4 <create_group_plans+0x394>
 800e764:	f240 3201 	movw	r2, #769	@ 0x301
 800e768:	2304      	movs	r3, #4
 800e76a:	e7f2      	b.n	800e752 <create_group_plans+0x532>
 800e76c:	f240 3301 	movw	r3, #769	@ 0x301
 800e770:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e774:	2301      	movs	r3, #1
 800e776:	9302      	str	r3, [sp, #8]
 800e778:	e71c      	b.n	800e5b4 <create_group_plans+0x394>
 800e77a:	1e3e      	subs	r6, r7, #0
 800e77c:	9d03      	ldr	r5, [sp, #12]
 800e77e:	f894 a00a 	ldrb.w	sl, [r4, #10]
 800e782:	bf18      	it	ne
 800e784:	2601      	movne	r6, #1
 800e786:	e709      	b.n	800e59c <create_group_plans+0x37c>
 800e788:	4620      	mov	r0, r4
 800e78a:	f7ff fcb5 	bl	800e0f8 <will_have_transition>
 800e78e:	7c23      	ldrb	r3, [r4, #16]
 800e790:	4602      	mov	r2, r0
 800e792:	4641      	mov	r1, r8
 800e794:	4648      	mov	r0, r9
 800e796:	f7ff fc1f 	bl	800dfd8 <sg_get_breakpoint_margin.constprop.0>
 800e79a:	7c23      	ldrb	r3, [r4, #16]
 800e79c:	4684      	mov	ip, r0
 800e79e:	4641      	mov	r1, r8
 800e7a0:	7aa0      	ldrb	r0, [r4, #10]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	4664      	mov	r4, ip
 800e7a6:	f7ff fc17 	bl	800dfd8 <sg_get_breakpoint_margin.constprop.0>
 800e7aa:	9b02      	ldr	r3, [sp, #8]
 800e7ac:	443b      	add	r3, r7
 800e7ae:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
 800e7b2:	230c      	movs	r3, #12
 800e7b4:	f89b 1076 	ldrb.w	r1, [fp, #118]	@ 0x76
 800e7b8:	f8bb 2064 	ldrh.w	r2, [fp, #100]	@ 0x64
 800e7bc:	3901      	subs	r1, #1
 800e7be:	fb13 1707 	smlabb	r7, r3, r7, r1
 800e7c2:	1b14      	subs	r4, r2, r4
 800e7c4:	eb05 0747 	add.w	r7, r5, r7, lsl #1
 800e7c8:	f8ab 4064 	strh.w	r4, [fp, #100]	@ 0x64
 800e7cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800e7d0:	4418      	add	r0, r3
 800e7d2:	f8a7 0064 	strh.w	r0, [r7, #100]	@ 0x64
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	e6d0      	b.n	800e57c <create_group_plans+0x35c>
 800e7da:	4b05      	ldr	r3, [pc, #20]	@ (800e7f0 <create_group_plans+0x5d0>)
 800e7dc:	4a05      	ldr	r2, [pc, #20]	@ (800e7f4 <create_group_plans+0x5d4>)
 800e7de:	691b      	ldr	r3, [r3, #16]
 800e7e0:	4905      	ldr	r1, [pc, #20]	@ (800e7f8 <create_group_plans+0x5d8>)
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	4606      	mov	r6, r0
 800e7e6:	4637      	mov	r7, r6
 800e7e8:	4798      	blx	r3
 800e7ea:	f894 a00a 	ldrb.w	sl, [r4, #10]
 800e7ee:	e6d5      	b.n	800e59c <create_group_plans+0x37c>
 800e7f0:	200008cc 	.word	0x200008cc
 800e7f4:	0801a0f4 	.word	0x0801a0f4
 800e7f8:	0801a000 	.word	0x0801a000

0800e7fc <processor_specs_translate>:
 800e7fc:	2a00      	cmp	r2, #0
 800e7fe:	d07a      	beq.n	800e8f6 <processor_specs_translate+0xfa>
 800e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e804:	b0b3      	sub	sp, #204	@ 0xcc
 800e806:	4617      	mov	r7, r2
 800e808:	4606      	mov	r6, r0
 800e80a:	4688      	mov	r8, r1
 800e80c:	a801      	add	r0, sp, #4
 800e80e:	2100      	movs	r1, #0
 800e810:	22c2      	movs	r2, #194	@ 0xc2
 800e812:	f007 f975 	bl	8015b00 <memset>
 800e816:	a901      	add	r1, sp, #4
 800e818:	4638      	mov	r0, r7
 800e81a:	f7ff fd01 	bl	800e220 <create_group_plans>
 800e81e:	2800      	cmp	r0, #0
 800e820:	d065      	beq.n	800e8ee <processor_specs_translate+0xf2>
 800e822:	f89d 00c4 	ldrb.w	r0, [sp, #196]	@ 0xc4
 800e826:	b1a0      	cbz	r0, 800e852 <processor_specs_translate+0x56>
 800e828:	2e00      	cmp	r6, #0
 800e82a:	d066      	beq.n	800e8fa <processor_specs_translate+0xfe>
 800e82c:	4540      	cmp	r0, r8
 800e82e:	d864      	bhi.n	800e8fa <processor_specs_translate+0xfe>
 800e830:	2302      	movs	r3, #2
 800e832:	8033      	strh	r3, [r6, #0]
 800e834:	6a3a      	ldr	r2, [r7, #32]
 800e836:	6072      	str	r2, [r6, #4]
 800e838:	7cba      	ldrb	r2, [r7, #18]
 800e83a:	70b2      	strb	r2, [r6, #2]
 800e83c:	69b9      	ldr	r1, [r7, #24]
 800e83e:	69fa      	ldr	r2, [r7, #28]
 800e840:	60b1      	str	r1, [r6, #8]
 800e842:	8ab9      	ldrh	r1, [r7, #20]
 800e844:	60f2      	str	r2, [r6, #12]
 800e846:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e84a:	7633      	strb	r3, [r6, #24]
 800e84c:	8231      	strh	r1, [r6, #16]
 800e84e:	82b2      	strh	r2, [r6, #20]
 800e850:	2001      	movs	r0, #1
 800e852:	f89d 30c5 	ldrb.w	r3, [sp, #197]	@ 0xc5
 800e856:	b1e3      	cbz	r3, 800e892 <processor_specs_translate+0x96>
 800e858:	f103 3cff 	add.w	ip, r3, #4294967295
 800e85c:	fa1f fc8c 	uxth.w	ip, ip
 800e860:	aa07      	add	r2, sp, #28
 800e862:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800e866:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
 800e86a:	ab01      	add	r3, sp, #4
 800e86c:	2200      	movs	r2, #0
 800e86e:	f04f 0e01 	mov.w	lr, #1
 800e872:	b10e      	cbz	r6, 800e878 <processor_specs_translate+0x7c>
 800e874:	4580      	cmp	r8, r0
 800e876:	d90c      	bls.n	800e892 <processor_specs_translate+0x96>
 800e878:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
 800e87c:	b131      	cbz	r1, 800e88c <processor_specs_translate+0x90>
 800e87e:	1e4c      	subs	r4, r1, #1
 800e880:	f014 05ff 	ands.w	r5, r4, #255	@ 0xff
 800e884:	d002      	beq.n	800e88c <processor_specs_translate+0x90>
 800e886:	b93e      	cbnz	r6, 800e898 <processor_specs_translate+0x9c>
 800e888:	3001      	adds	r0, #1
 800e88a:	b280      	uxth	r0, r0
 800e88c:	3318      	adds	r3, #24
 800e88e:	459c      	cmp	ip, r3
 800e890:	d1ef      	bne.n	800e872 <processor_specs_translate+0x76>
 800e892:	b033      	add	sp, #204	@ 0xcc
 800e894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e898:	ebc0 0ac0 	rsb	sl, r0, r0, lsl #3
 800e89c:	eb06 048a 	add.w	r4, r6, sl, lsl #2
 800e8a0:	f102 39ff 	add.w	r9, r2, #4294967295
 800e8a4:	f884 e001 	strb.w	lr, [r4, #1]
 800e8a8:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800e8ac:	f8c4 b004 	str.w	fp, [r4, #4]
 800e8b0:	f897 b012 	ldrb.w	fp, [r7, #18]
 800e8b4:	f884 b002 	strb.w	fp, [r4, #2]
 800e8b8:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800e8bc:	edd7 7a06 	vldr	s15, [r7, #24]
 800e8c0:	f8c4 b00c 	str.w	fp, [r4, #12]
 800e8c4:	f8b7 b014 	ldrh.w	fp, [r7, #20]
 800e8c8:	edc4 7a02 	vstr	s15, [r4, #8]
 800e8cc:	f8a4 b010 	strh.w	fp, [r4, #16]
 800e8d0:	f897 b010 	ldrb.w	fp, [r7, #16]
 800e8d4:	f806 b02a 	strb.w	fp, [r6, sl, lsl #2]
 800e8d8:	4449      	add	r1, r9
 800e8da:	7625      	strb	r5, [r4, #24]
 800e8dc:	b2c9      	uxtb	r1, r1
 800e8de:	3414      	adds	r4, #20
 800e8e0:	1c55      	adds	r5, r2, #1
 800e8e2:	f804 2b01 	strb.w	r2, [r4], #1
 800e8e6:	b2ea      	uxtb	r2, r5
 800e8e8:	428a      	cmp	r2, r1
 800e8ea:	d1f9      	bne.n	800e8e0 <processor_specs_translate+0xe4>
 800e8ec:	e7cc      	b.n	800e888 <processor_specs_translate+0x8c>
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	b033      	add	sp, #204	@ 0xcc
 800e8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	4770      	bx	lr
 800e8fa:	f89d 30c5 	ldrb.w	r3, [sp, #197]	@ 0xc5
 800e8fe:	2001      	movs	r0, #1
 800e900:	2b00      	cmp	r3, #0
 800e902:	d1a9      	bne.n	800e858 <processor_specs_translate+0x5c>
 800e904:	e7c5      	b.n	800e892 <processor_specs_translate+0x96>
 800e906:	bf00      	nop

0800e908 <acc_detector_distance_translation_get_num_processor_specifications>:
 800e908:	b510      	push	{r4, lr}
 800e90a:	4604      	mov	r4, r0
 800e90c:	f7ff fae4 	bl	800ded8 <validate_distance_settings>
 800e910:	b900      	cbnz	r0, 800e914 <acc_detector_distance_translation_get_num_processor_specifications+0xc>
 800e912:	bd10      	pop	{r4, pc}
 800e914:	2100      	movs	r1, #0
 800e916:	4622      	mov	r2, r4
 800e918:	4608      	mov	r0, r1
 800e91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e91e:	f7ff bf6d 	b.w	800e7fc <processor_specs_translate>
 800e922:	bf00      	nop

0800e924 <acc_detector_distance_translation_get_processor_specifications>:
 800e924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e926:	460d      	mov	r5, r1
 800e928:	4616      	mov	r6, r2
 800e92a:	4607      	mov	r7, r0
 800e92c:	f7ff fad4 	bl	800ded8 <validate_distance_settings>
 800e930:	4604      	mov	r4, r0
 800e932:	b908      	cbnz	r0, 800e938 <acc_detector_distance_translation_get_processor_specifications+0x14>
 800e934:	4620      	mov	r0, r4
 800e936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e938:	463a      	mov	r2, r7
 800e93a:	4631      	mov	r1, r6
 800e93c:	4628      	mov	r0, r5
 800e93e:	f7ff ff5d 	bl	800e7fc <processor_specs_translate>
 800e942:	4620      	mov	r0, r4
 800e944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e946:	bf00      	nop

0800e948 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config>:
 800e948:	2900      	cmp	r1, #0
 800e94a:	d053      	beq.n	800e9f4 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xac>
 800e94c:	4603      	mov	r3, r0
 800e94e:	2800      	cmp	r0, #0
 800e950:	d050      	beq.n	800e9f4 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xac>
 800e952:	f890 20c0 	ldrb.w	r2, [r0, #192]	@ 0xc0
 800e956:	2a00      	cmp	r2, #0
 800e958:	d04c      	beq.n	800e9f4 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xac>
 800e95a:	7d82      	ldrb	r2, [r0, #22]
 800e95c:	2a01      	cmp	r2, #1
 800e95e:	d949      	bls.n	800e9f4 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xac>
 800e960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e964:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 800e968:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 800e96c:	42ae      	cmp	r6, r5
 800e96e:	da3e      	bge.n	800e9ee <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xa6>
 800e970:	460c      	mov	r4, r1
 800e972:	4620      	mov	r0, r4
 800e974:	210a      	movs	r1, #10
 800e976:	89df      	ldrh	r7, [r3, #14]
 800e978:	f8b3 9000 	ldrh.w	r9, [r3]
 800e97c:	f893 8002 	ldrb.w	r8, [r3, #2]
 800e980:	f000 fc1e 	bl	800f1c0 <acc_config_sweeps_per_frame_set>
 800e984:	2102      	movs	r1, #2
 800e986:	4620      	mov	r0, r4
 800e988:	f000 f9cc 	bl	800ed24 <acc_config_num_subsweeps_set>
 800e98c:	2200      	movs	r2, #0
 800e98e:	4611      	mov	r1, r2
 800e990:	4620      	mov	r0, r4
 800e992:	f000 f9f7 	bl	800ed84 <acc_config_subsweep_start_point_set>
 800e996:	2200      	movs	r2, #0
 800e998:	2101      	movs	r1, #1
 800e99a:	4620      	mov	r0, r4
 800e99c:	f000 fa36 	bl	800ee0c <acc_config_subsweep_num_points_set>
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	2101      	movs	r1, #1
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f000 fa75 	bl	800ee94 <acc_config_subsweep_step_length_set>
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	2104      	movs	r1, #4
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f000 fab4 	bl	800ef1c <acc_config_subsweep_profile_set>
 800e9b4:	4639      	mov	r1, r7
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	f000 faf3 	bl	800efa4 <acc_config_subsweep_hwaas_set>
 800e9be:	2200      	movs	r2, #0
 800e9c0:	210f      	movs	r1, #15
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f000 fb32 	bl	800f02c <acc_config_subsweep_receiver_gain_set>
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	2101      	movs	r1, #1
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	f000 fb93 	bl	800f0f8 <acc_config_subsweep_phase_enhancement_set>
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	2101      	movs	r1, #1
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f000 fc20 	bl	800f21c <acc_config_subsweep_enable_loopback_set>
 800e9dc:	2102      	movs	r1, #2
 800e9de:	2200      	movs	r2, #0
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	f000 fc5f 	bl	800f2a4 <acc_config_subsweep_prf_set>
 800e9e6:	1bab      	subs	r3, r5, r6
 800e9e8:	b299      	uxth	r1, r3
 800e9ea:	041b      	lsls	r3, r3, #16
 800e9ec:	d504      	bpl.n	800e9f8 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config+0xb0>
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9f4:	2000      	movs	r0, #0
 800e9f6:	4770      	bx	lr
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	fbb1 faf9 	udiv	sl, r1, r9
 800e9fe:	2201      	movs	r2, #1
 800ea00:	4631      	mov	r1, r6
 800ea02:	f000 f9bf 	bl	800ed84 <acc_config_subsweep_start_point_set>
 800ea06:	4651      	mov	r1, sl
 800ea08:	4620      	mov	r0, r4
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	f000 f9fe 	bl	800ee0c <acc_config_subsweep_num_points_set>
 800ea10:	4649      	mov	r1, r9
 800ea12:	4620      	mov	r0, r4
 800ea14:	2201      	movs	r2, #1
 800ea16:	f000 fa3d 	bl	800ee94 <acc_config_subsweep_step_length_set>
 800ea1a:	4641      	mov	r1, r8
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	2201      	movs	r2, #1
 800ea20:	f000 fa7c 	bl	800ef1c <acc_config_subsweep_profile_set>
 800ea24:	4639      	mov	r1, r7
 800ea26:	4620      	mov	r0, r4
 800ea28:	2201      	movs	r2, #1
 800ea2a:	f000 fabb 	bl	800efa4 <acc_config_subsweep_hwaas_set>
 800ea2e:	4620      	mov	r0, r4
 800ea30:	2201      	movs	r2, #1
 800ea32:	2105      	movs	r1, #5
 800ea34:	f000 fafa 	bl	800f02c <acc_config_subsweep_receiver_gain_set>
 800ea38:	2201      	movs	r2, #1
 800ea3a:	4611      	mov	r1, r2
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	f000 fb5b 	bl	800f0f8 <acc_config_subsweep_phase_enhancement_set>
 800ea42:	4641      	mov	r1, r8
 800ea44:	4628      	mov	r0, r5
 800ea46:	f002 fbb7 	bl	80111b8 <acc_detector_utils_select_prf>
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	4601      	mov	r1, r0
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f000 fc28 	bl	800f2a4 <acc_config_subsweep_prf_set>
 800ea54:	2001      	movs	r0, #1
 800ea56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea5a:	bf00      	nop

0800ea5c <acc_detector_distance_translation_get_close_range_sensor_config>:
 800ea5c:	b530      	push	{r4, r5, lr}
 800ea5e:	b0b3      	sub	sp, #204	@ 0xcc
 800ea60:	460d      	mov	r5, r1
 800ea62:	4604      	mov	r4, r0
 800ea64:	f7ff fa38 	bl	800ded8 <validate_distance_settings>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	f8ad 30c4 	strh.w	r3, [sp, #196]	@ 0xc4
 800ea6e:	b910      	cbnz	r0, 800ea76 <acc_detector_distance_translation_get_close_range_sensor_config+0x1a>
 800ea70:	2000      	movs	r0, #0
 800ea72:	b033      	add	sp, #204	@ 0xcc
 800ea74:	bd30      	pop	{r4, r5, pc}
 800ea76:	4620      	mov	r0, r4
 800ea78:	a901      	add	r1, sp, #4
 800ea7a:	f7ff fbd1 	bl	800e220 <create_group_plans>
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	d0f6      	beq.n	800ea70 <acc_detector_distance_translation_get_close_range_sensor_config+0x14>
 800ea82:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d0f2      	beq.n	800ea70 <acc_detector_distance_translation_get_close_range_sensor_config+0x14>
 800ea8a:	4629      	mov	r1, r5
 800ea8c:	a801      	add	r0, sp, #4
 800ea8e:	f7ff ff5b 	bl	800e948 <acc_detector_distance_translation_sensor_plan_get_close_range_sensor_config>
 800ea92:	b033      	add	sp, #204	@ 0xcc
 800ea94:	bd30      	pop	{r4, r5, pc}
 800ea96:	bf00      	nop

0800ea98 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config>:
 800ea98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9c:	b08b      	sub	sp, #44	@ 0x2c
 800ea9e:	460d      	mov	r5, r1
 800eaa0:	9003      	str	r0, [sp, #12]
 800eaa2:	2800      	cmp	r0, #0
 800eaa4:	f000 80a0 	beq.w	800ebe8 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x150>
 800eaa8:	2900      	cmp	r1, #0
 800eaaa:	d03c      	beq.n	800eb26 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x8e>
 800eaac:	f890 40c1 	ldrb.w	r4, [r0, #193]	@ 0xc1
 800eab0:	b384      	cbz	r4, 800eb14 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7c>
 800eab2:	2300      	movs	r3, #0
 800eab4:	2101      	movs	r1, #1
 800eab6:	4628      	mov	r0, r5
 800eab8:	461c      	mov	r4, r3
 800eaba:	9302      	str	r3, [sp, #8]
 800eabc:	f000 fb80 	bl	800f1c0 <acc_config_sweeps_per_frame_set>
 800eac0:	9b03      	ldr	r3, [sp, #12]
 800eac2:	f893 70c1 	ldrb.w	r7, [r3, #193]	@ 0xc1
 800eac6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800eaca:	46b8      	mov	r8, r7
 800eacc:	4543      	cmp	r3, r8
 800eace:	f080 8089 	bcs.w	800ebe4 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x14c>
 800ead2:	9f03      	ldr	r7, [sp, #12]
 800ead4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ead8:	eb07 0ec3 	add.w	lr, r7, r3, lsl #3
 800eadc:	00de      	lsls	r6, r3, #3
 800eade:	f85e 0f60 	ldr.w	r0, [lr, #96]!
 800eae2:	f8de 1004 	ldr.w	r1, [lr, #4]
 800eae6:	f8de 2008 	ldr.w	r2, [lr, #8]
 800eaea:	f8de 300c 	ldr.w	r3, [lr, #12]
 800eaee:	f10d 0c10 	add.w	ip, sp, #16
 800eaf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eaf6:	3660      	adds	r6, #96	@ 0x60
 800eaf8:	463a      	mov	r2, r7
 800eafa:	4432      	add	r2, r6
 800eafc:	f8de 0010 	ldr.w	r0, [lr, #16]
 800eb00:	f8de 1014 	ldr.w	r1, [lr, #20]
 800eb04:	7d93      	ldrb	r3, [r2, #22]
 800eb06:	f837 9006 	ldrh.w	r9, [r7, r6]
 800eb0a:	f892 a002 	ldrb.w	sl, [r2, #2]
 800eb0e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800eb12:	b95b      	cbnz	r3, 800eb2c <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x94>
 800eb14:	2600      	movs	r6, #0
 800eb16:	4628      	mov	r0, r5
 800eb18:	4621      	mov	r1, r4
 800eb1a:	f000 f903 	bl	800ed24 <acc_config_num_subsweeps_set>
 800eb1e:	4630      	mov	r0, r6
 800eb20:	b00b      	add	sp, #44	@ 0x2c
 800eb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb26:	460c      	mov	r4, r1
 800eb28:	460e      	mov	r6, r1
 800eb2a:	e7f4      	b.n	800eb16 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7e>
 800eb2c:	3b01      	subs	r3, #1
 800eb2e:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800eb32:	fa5f fb83 	uxtb.w	fp, r3
 800eb36:	d04d      	beq.n	800ebd4 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x13c>
 800eb38:	2c03      	cmp	r4, #3
 800eb3a:	d8eb      	bhi.n	800eb14 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7c>
 800eb3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb40:	fa1f fb8b 	uxth.w	fp, fp
 800eb44:	f10d 0316 	add.w	r3, sp, #22
 800eb48:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 800eb4c:	9301      	str	r3, [sp, #4]
 800eb4e:	ae05      	add	r6, sp, #20
 800eb50:	e001      	b.n	800eb56 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0xbe>
 800eb52:	2c04      	cmp	r4, #4
 800eb54:	d0de      	beq.n	800eb14 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7c>
 800eb56:	f9b6 b000 	ldrsh.w	fp, [r6]
 800eb5a:	f936 7f02 	ldrsh.w	r7, [r6, #2]!
 800eb5e:	eba7 030b 	sub.w	r3, r7, fp
 800eb62:	b299      	uxth	r1, r3
 800eb64:	041b      	lsls	r3, r3, #16
 800eb66:	4622      	mov	r2, r4
 800eb68:	4628      	mov	r0, r5
 800eb6a:	d4d3      	bmi.n	800eb14 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7c>
 800eb6c:	fbb1 f8f9 	udiv	r8, r1, r9
 800eb70:	8931      	ldrh	r1, [r6, #8]
 800eb72:	f000 fa17 	bl	800efa4 <acc_config_subsweep_hwaas_set>
 800eb76:	4622      	mov	r2, r4
 800eb78:	4659      	mov	r1, fp
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	f000 f902 	bl	800ed84 <acc_config_subsweep_start_point_set>
 800eb80:	4622      	mov	r2, r4
 800eb82:	4641      	mov	r1, r8
 800eb84:	4628      	mov	r0, r5
 800eb86:	f000 f941 	bl	800ee0c <acc_config_subsweep_num_points_set>
 800eb8a:	4622      	mov	r2, r4
 800eb8c:	4649      	mov	r1, r9
 800eb8e:	4628      	mov	r0, r5
 800eb90:	f000 f980 	bl	800ee94 <acc_config_subsweep_step_length_set>
 800eb94:	4622      	mov	r2, r4
 800eb96:	4651      	mov	r1, sl
 800eb98:	4628      	mov	r0, r5
 800eb9a:	f000 f9bf 	bl	800ef1c <acc_config_subsweep_profile_set>
 800eb9e:	4622      	mov	r2, r4
 800eba0:	210a      	movs	r1, #10
 800eba2:	4628      	mov	r0, r5
 800eba4:	f000 fa42 	bl	800f02c <acc_config_subsweep_receiver_gain_set>
 800eba8:	4622      	mov	r2, r4
 800ebaa:	2101      	movs	r1, #1
 800ebac:	4628      	mov	r0, r5
 800ebae:	f000 faa3 	bl	800f0f8 <acc_config_subsweep_phase_enhancement_set>
 800ebb2:	4651      	mov	r1, sl
 800ebb4:	4638      	mov	r0, r7
 800ebb6:	f002 faff 	bl	80111b8 <acc_detector_utils_select_prf>
 800ebba:	4622      	mov	r2, r4
 800ebbc:	4601      	mov	r1, r0
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	f000 fb70 	bl	800f2a4 <acc_config_subsweep_prf_set>
 800ebc4:	9b01      	ldr	r3, [sp, #4]
 800ebc6:	3401      	adds	r4, #1
 800ebc8:	42b3      	cmp	r3, r6
 800ebca:	b2e4      	uxtb	r4, r4
 800ebcc:	d1c1      	bne.n	800eb52 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0xba>
 800ebce:	9b03      	ldr	r3, [sp, #12]
 800ebd0:	f893 80c1 	ldrb.w	r8, [r3, #193]	@ 0xc1
 800ebd4:	9b02      	ldr	r3, [sp, #8]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	9302      	str	r3, [sp, #8]
 800ebda:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ebde:	4543      	cmp	r3, r8
 800ebe0:	f4ff af77 	bcc.w	800ead2 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x3a>
 800ebe4:	2601      	movs	r6, #1
 800ebe6:	e796      	b.n	800eb16 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7e>
 800ebe8:	9c03      	ldr	r4, [sp, #12]
 800ebea:	4626      	mov	r6, r4
 800ebec:	e793      	b.n	800eb16 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config+0x7e>
 800ebee:	bf00      	nop

0800ebf0 <acc_detector_distance_translation_get_far_range_sensor_config>:
 800ebf0:	b570      	push	{r4, r5, r6, lr}
 800ebf2:	b0b2      	sub	sp, #200	@ 0xc8
 800ebf4:	460e      	mov	r6, r1
 800ebf6:	4605      	mov	r5, r0
 800ebf8:	f7ff f96e 	bl	800ded8 <validate_distance_settings>
 800ebfc:	22c2      	movs	r2, #194	@ 0xc2
 800ebfe:	4604      	mov	r4, r0
 800ec00:	2100      	movs	r1, #0
 800ec02:	a801      	add	r0, sp, #4
 800ec04:	f006 ff7c 	bl	8015b00 <memset>
 800ec08:	b914      	cbnz	r4, 800ec10 <acc_detector_distance_translation_get_far_range_sensor_config+0x20>
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	b032      	add	sp, #200	@ 0xc8
 800ec0e:	bd70      	pop	{r4, r5, r6, pc}
 800ec10:	4628      	mov	r0, r5
 800ec12:	a901      	add	r1, sp, #4
 800ec14:	f7ff fb04 	bl	800e220 <create_group_plans>
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	d0f6      	beq.n	800ec0a <acc_detector_distance_translation_get_far_range_sensor_config+0x1a>
 800ec1c:	f89d 30c5 	ldrb.w	r3, [sp, #197]	@ 0xc5
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d0f2      	beq.n	800ec0a <acc_detector_distance_translation_get_far_range_sensor_config+0x1a>
 800ec24:	4631      	mov	r1, r6
 800ec26:	a801      	add	r0, sp, #4
 800ec28:	f7ff ff36 	bl	800ea98 <acc_detector_distance_translation_sensor_plan_get_far_range_sensor_config>
 800ec2c:	b032      	add	sp, #200	@ 0xc8
 800ec2e:	bd70      	pop	{r4, r5, r6, pc}

0800ec30 <acc_detector_distance_utils_reflector_shape_exponent_get>:
 800ec30:	b170      	cbz	r0, 800ec50 <acc_detector_distance_utils_reflector_shape_exponent_get+0x20>
 800ec32:	2801      	cmp	r0, #1
 800ec34:	d009      	beq.n	800ec4a <acc_detector_distance_utils_reflector_shape_exponent_get+0x1a>
 800ec36:	b508      	push	{r3, lr}
 800ec38:	4b07      	ldr	r3, [pc, #28]	@ (800ec58 <acc_detector_distance_utils_reflector_shape_exponent_get+0x28>)
 800ec3a:	4a08      	ldr	r2, [pc, #32]	@ (800ec5c <acc_detector_distance_utils_reflector_shape_exponent_get+0x2c>)
 800ec3c:	691b      	ldr	r3, [r3, #16]
 800ec3e:	4908      	ldr	r1, [pc, #32]	@ (800ec60 <acc_detector_distance_utils_reflector_shape_exponent_get+0x30>)
 800ec40:	2000      	movs	r0, #0
 800ec42:	4798      	blx	r3
 800ec44:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800ec64 <acc_detector_distance_utils_reflector_shape_exponent_get+0x34>
 800ec48:	bd08      	pop	{r3, pc}
 800ec4a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800ec4e:	4770      	bx	lr
 800ec50:	eeb1 0a00 	vmov.f32	s0, #16	@ 0x40800000  4.0
 800ec54:	4770      	bx	lr
 800ec56:	bf00      	nop
 800ec58:	200008cc 	.word	0x200008cc
 800ec5c:	0801a128 	.word	0x0801a128
 800ec60:	0801a140 	.word	0x0801a140
 800ec64:	00000000 	.word	0x00000000

0800ec68 <acc_rss_hal_register>:
 800ec68:	b108      	cbz	r0, 800ec6e <acc_rss_hal_register+0x6>
 800ec6a:	f002 bb69 	b.w	8011340 <acc_rss_integration_register_a121>
 800ec6e:	4770      	bx	lr

0800ec70 <acc_rss_get_buffer_size>:
 800ec70:	b510      	push	{r4, lr}
 800ec72:	460c      	mov	r4, r1
 800ec74:	f000 faba 	bl	800f1ec <acc_config_get_settings>
 800ec78:	b158      	cbz	r0, 800ec92 <acc_rss_get_buffer_size+0x22>
 800ec7a:	b124      	cbz	r4, 800ec86 <acc_rss_get_buffer_size+0x16>
 800ec7c:	4621      	mov	r1, r4
 800ec7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec82:	f002 bc3f 	b.w	8011504 <acc_pipeline_get_buffer_size>
 800ec86:	4b04      	ldr	r3, [pc, #16]	@ (800ec98 <acc_rss_get_buffer_size+0x28>)
 800ec88:	4a04      	ldr	r2, [pc, #16]	@ (800ec9c <acc_rss_get_buffer_size+0x2c>)
 800ec8a:	691b      	ldr	r3, [r3, #16]
 800ec8c:	4904      	ldr	r1, [pc, #16]	@ (800eca0 <acc_rss_get_buffer_size+0x30>)
 800ec8e:	4620      	mov	r0, r4
 800ec90:	4798      	blx	r3
 800ec92:	2000      	movs	r0, #0
 800ec94:	bd10      	pop	{r4, pc}
 800ec96:	bf00      	nop
 800ec98:	200008cc 	.word	0x200008cc
 800ec9c:	0801a158 	.word	0x0801a158
 800eca0:	0801a174 	.word	0x0801a174

0800eca4 <acc_config_subsweep_validate.part.0>:
 800eca4:	b508      	push	{r3, lr}
 800eca6:	4b04      	ldr	r3, [pc, #16]	@ (800ecb8 <acc_config_subsweep_validate.part.0+0x14>)
 800eca8:	4a04      	ldr	r2, [pc, #16]	@ (800ecbc <acc_config_subsweep_validate.part.0+0x18>)
 800ecaa:	691b      	ldr	r3, [r3, #16]
 800ecac:	4904      	ldr	r1, [pc, #16]	@ (800ecc0 <acc_config_subsweep_validate.part.0+0x1c>)
 800ecae:	2000      	movs	r0, #0
 800ecb0:	4798      	blx	r3
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	bd08      	pop	{r3, pc}
 800ecb6:	bf00      	nop
 800ecb8:	200008cc 	.word	0x200008cc
 800ecbc:	0801a180 	.word	0x0801a180
 800ecc0:	0801a198 	.word	0x0801a198

0800ecc4 <acc_config_create>:
 800ecc4:	b510      	push	{r4, lr}
 800ecc6:	4a08      	ldr	r2, [pc, #32]	@ (800ece8 <acc_config_create+0x24>)
 800ecc8:	2356      	movs	r3, #86	@ 0x56
 800ecca:	215c      	movs	r1, #92	@ 0x5c
 800eccc:	2001      	movs	r0, #1
 800ecce:	f002 fbc3 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	b130      	cbz	r0, 800ece4 <acc_config_create+0x20>
 800ecd6:	4b05      	ldr	r3, [pc, #20]	@ (800ecec <acc_config_create+0x28>)
 800ecd8:	f840 3b04 	str.w	r3, [r0], #4
 800ecdc:	4904      	ldr	r1, [pc, #16]	@ (800ecf0 <acc_config_create+0x2c>)
 800ecde:	2258      	movs	r2, #88	@ 0x58
 800ece0:	f006 ffa5 	bl	8015c2e <memcpy>
 800ece4:	4620      	mov	r0, r4
 800ece6:	bd10      	pop	{r4, pc}
 800ece8:	0801a198 	.word	0x0801a198
 800ecec:	1337b00f 	.word	0x1337b00f
 800ecf0:	0801a3ac 	.word	0x0801a3ac

0800ecf4 <acc_config_destroy>:
 800ecf4:	b118      	cbz	r0, 800ecfe <acc_config_destroy+0xa>
 800ecf6:	4a07      	ldr	r2, [pc, #28]	@ (800ed14 <acc_config_destroy+0x20>)
 800ecf8:	6801      	ldr	r1, [r0, #0]
 800ecfa:	4291      	cmp	r1, r2
 800ecfc:	d005      	beq.n	800ed0a <acc_config_destroy+0x16>
 800ecfe:	4b06      	ldr	r3, [pc, #24]	@ (800ed18 <acc_config_destroy+0x24>)
 800ed00:	4a06      	ldr	r2, [pc, #24]	@ (800ed1c <acc_config_destroy+0x28>)
 800ed02:	691b      	ldr	r3, [r3, #16]
 800ed04:	4906      	ldr	r1, [pc, #24]	@ (800ed20 <acc_config_destroy+0x2c>)
 800ed06:	2000      	movs	r0, #0
 800ed08:	4718      	bx	r3
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	6002      	str	r2, [r0, #0]
 800ed0e:	f002 bbbf 	b.w	8011490 <acc_rss_integration_mem_free>
 800ed12:	bf00      	nop
 800ed14:	1337b00f 	.word	0x1337b00f
 800ed18:	200008cc 	.word	0x200008cc
 800ed1c:	0801a394 	.word	0x0801a394
 800ed20:	0801a198 	.word	0x0801a198

0800ed24 <acc_config_num_subsweeps_set>:
 800ed24:	b118      	cbz	r0, 800ed2e <acc_config_num_subsweeps_set+0xa>
 800ed26:	4b06      	ldr	r3, [pc, #24]	@ (800ed40 <acc_config_num_subsweeps_set+0x1c>)
 800ed28:	6802      	ldr	r2, [r0, #0]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d005      	beq.n	800ed3a <acc_config_num_subsweeps_set+0x16>
 800ed2e:	4b05      	ldr	r3, [pc, #20]	@ (800ed44 <acc_config_num_subsweeps_set+0x20>)
 800ed30:	4a05      	ldr	r2, [pc, #20]	@ (800ed48 <acc_config_num_subsweeps_set+0x24>)
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	4905      	ldr	r1, [pc, #20]	@ (800ed4c <acc_config_num_subsweeps_set+0x28>)
 800ed36:	2000      	movs	r0, #0
 800ed38:	4718      	bx	r3
 800ed3a:	f880 1052 	strb.w	r1, [r0, #82]	@ 0x52
 800ed3e:	4770      	bx	lr
 800ed40:	1337b00f 	.word	0x1337b00f
 800ed44:	200008cc 	.word	0x200008cc
 800ed48:	0801a394 	.word	0x0801a394
 800ed4c:	0801a198 	.word	0x0801a198

0800ed50 <acc_config_num_subsweeps_get>:
 800ed50:	b508      	push	{r3, lr}
 800ed52:	b118      	cbz	r0, 800ed5c <acc_config_num_subsweeps_get+0xc>
 800ed54:	4b07      	ldr	r3, [pc, #28]	@ (800ed74 <acc_config_num_subsweeps_get+0x24>)
 800ed56:	6802      	ldr	r2, [r0, #0]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d007      	beq.n	800ed6c <acc_config_num_subsweeps_get+0x1c>
 800ed5c:	4b06      	ldr	r3, [pc, #24]	@ (800ed78 <acc_config_num_subsweeps_get+0x28>)
 800ed5e:	4a07      	ldr	r2, [pc, #28]	@ (800ed7c <acc_config_num_subsweeps_get+0x2c>)
 800ed60:	691b      	ldr	r3, [r3, #16]
 800ed62:	4907      	ldr	r1, [pc, #28]	@ (800ed80 <acc_config_num_subsweeps_get+0x30>)
 800ed64:	2000      	movs	r0, #0
 800ed66:	4798      	blx	r3
 800ed68:	2001      	movs	r0, #1
 800ed6a:	bd08      	pop	{r3, pc}
 800ed6c:	f890 0052 	ldrb.w	r0, [r0, #82]	@ 0x52
 800ed70:	bd08      	pop	{r3, pc}
 800ed72:	bf00      	nop
 800ed74:	1337b00f 	.word	0x1337b00f
 800ed78:	200008cc 	.word	0x200008cc
 800ed7c:	0801a394 	.word	0x0801a394
 800ed80:	0801a198 	.word	0x0801a198

0800ed84 <acc_config_subsweep_start_point_set>:
 800ed84:	b570      	push	{r4, r5, r6, lr}
 800ed86:	b120      	cbz	r0, 800ed92 <acc_config_subsweep_start_point_set+0xe>
 800ed88:	4b0b      	ldr	r3, [pc, #44]	@ (800edb8 <acc_config_subsweep_start_point_set+0x34>)
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	6800      	ldr	r0, [r0, #0]
 800ed8e:	4298      	cmp	r0, r3
 800ed90:	d007      	beq.n	800eda2 <acc_config_subsweep_start_point_set+0x1e>
 800ed92:	4b0a      	ldr	r3, [pc, #40]	@ (800edbc <acc_config_subsweep_start_point_set+0x38>)
 800ed94:	4a0a      	ldr	r2, [pc, #40]	@ (800edc0 <acc_config_subsweep_start_point_set+0x3c>)
 800ed96:	691b      	ldr	r3, [r3, #16]
 800ed98:	490a      	ldr	r1, [pc, #40]	@ (800edc4 <acc_config_subsweep_start_point_set+0x40>)
 800ed9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed9e:	2000      	movs	r0, #0
 800eda0:	4718      	bx	r3
 800eda2:	2a03      	cmp	r2, #3
 800eda4:	460d      	mov	r5, r1
 800eda6:	4616      	mov	r6, r2
 800eda8:	d902      	bls.n	800edb0 <acc_config_subsweep_start_point_set+0x2c>
 800edaa:	f7ff ff7b 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800edae:	b110      	cbz	r0, 800edb6 <acc_config_subsweep_start_point_set+0x32>
 800edb0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800edb4:	6065      	str	r5, [r4, #4]
 800edb6:	bd70      	pop	{r4, r5, r6, pc}
 800edb8:	1337b00f 	.word	0x1337b00f
 800edbc:	200008cc 	.word	0x200008cc
 800edc0:	0801a394 	.word	0x0801a394
 800edc4:	0801a198 	.word	0x0801a198

0800edc8 <acc_config_subsweep_start_point_get>:
 800edc8:	b538      	push	{r3, r4, r5, lr}
 800edca:	b120      	cbz	r0, 800edd6 <acc_config_subsweep_start_point_get+0xe>
 800edcc:	4b0b      	ldr	r3, [pc, #44]	@ (800edfc <acc_config_subsweep_start_point_get+0x34>)
 800edce:	6802      	ldr	r2, [r0, #0]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	4604      	mov	r4, r0
 800edd4:	d007      	beq.n	800ede6 <acc_config_subsweep_start_point_get+0x1e>
 800edd6:	4b0a      	ldr	r3, [pc, #40]	@ (800ee00 <acc_config_subsweep_start_point_get+0x38>)
 800edd8:	4a0a      	ldr	r2, [pc, #40]	@ (800ee04 <acc_config_subsweep_start_point_get+0x3c>)
 800edda:	691b      	ldr	r3, [r3, #16]
 800eddc:	490a      	ldr	r1, [pc, #40]	@ (800ee08 <acc_config_subsweep_start_point_get+0x40>)
 800edde:	2000      	movs	r0, #0
 800ede0:	4798      	blx	r3
 800ede2:	2000      	movs	r0, #0
 800ede4:	bd38      	pop	{r3, r4, r5, pc}
 800ede6:	2903      	cmp	r1, #3
 800ede8:	460d      	mov	r5, r1
 800edea:	d903      	bls.n	800edf4 <acc_config_subsweep_start_point_get+0x2c>
 800edec:	f7ff ff5a 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800edf0:	2800      	cmp	r0, #0
 800edf2:	d0f7      	beq.n	800ede4 <acc_config_subsweep_start_point_get+0x1c>
 800edf4:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800edf8:	6860      	ldr	r0, [r4, #4]
 800edfa:	bd38      	pop	{r3, r4, r5, pc}
 800edfc:	1337b00f 	.word	0x1337b00f
 800ee00:	200008cc 	.word	0x200008cc
 800ee04:	0801a394 	.word	0x0801a394
 800ee08:	0801a198 	.word	0x0801a198

0800ee0c <acc_config_subsweep_num_points_set>:
 800ee0c:	b570      	push	{r4, r5, r6, lr}
 800ee0e:	b120      	cbz	r0, 800ee1a <acc_config_subsweep_num_points_set+0xe>
 800ee10:	4b0b      	ldr	r3, [pc, #44]	@ (800ee40 <acc_config_subsweep_num_points_set+0x34>)
 800ee12:	4604      	mov	r4, r0
 800ee14:	6800      	ldr	r0, [r0, #0]
 800ee16:	4298      	cmp	r0, r3
 800ee18:	d007      	beq.n	800ee2a <acc_config_subsweep_num_points_set+0x1e>
 800ee1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ee44 <acc_config_subsweep_num_points_set+0x38>)
 800ee1c:	4a0a      	ldr	r2, [pc, #40]	@ (800ee48 <acc_config_subsweep_num_points_set+0x3c>)
 800ee1e:	691b      	ldr	r3, [r3, #16]
 800ee20:	490a      	ldr	r1, [pc, #40]	@ (800ee4c <acc_config_subsweep_num_points_set+0x40>)
 800ee22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee26:	2000      	movs	r0, #0
 800ee28:	4718      	bx	r3
 800ee2a:	2a03      	cmp	r2, #3
 800ee2c:	460d      	mov	r5, r1
 800ee2e:	4616      	mov	r6, r2
 800ee30:	d902      	bls.n	800ee38 <acc_config_subsweep_num_points_set+0x2c>
 800ee32:	f7ff ff37 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800ee36:	b110      	cbz	r0, 800ee3e <acc_config_subsweep_num_points_set+0x32>
 800ee38:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800ee3c:	8125      	strh	r5, [r4, #8]
 800ee3e:	bd70      	pop	{r4, r5, r6, pc}
 800ee40:	1337b00f 	.word	0x1337b00f
 800ee44:	200008cc 	.word	0x200008cc
 800ee48:	0801a394 	.word	0x0801a394
 800ee4c:	0801a198 	.word	0x0801a198

0800ee50 <acc_config_subsweep_num_points_get>:
 800ee50:	b538      	push	{r3, r4, r5, lr}
 800ee52:	b120      	cbz	r0, 800ee5e <acc_config_subsweep_num_points_get+0xe>
 800ee54:	4b0b      	ldr	r3, [pc, #44]	@ (800ee84 <acc_config_subsweep_num_points_get+0x34>)
 800ee56:	6802      	ldr	r2, [r0, #0]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	d007      	beq.n	800ee6e <acc_config_subsweep_num_points_get+0x1e>
 800ee5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ee88 <acc_config_subsweep_num_points_get+0x38>)
 800ee60:	4a0a      	ldr	r2, [pc, #40]	@ (800ee8c <acc_config_subsweep_num_points_get+0x3c>)
 800ee62:	691b      	ldr	r3, [r3, #16]
 800ee64:	490a      	ldr	r1, [pc, #40]	@ (800ee90 <acc_config_subsweep_num_points_get+0x40>)
 800ee66:	2000      	movs	r0, #0
 800ee68:	4798      	blx	r3
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	bd38      	pop	{r3, r4, r5, pc}
 800ee6e:	2903      	cmp	r1, #3
 800ee70:	460d      	mov	r5, r1
 800ee72:	d903      	bls.n	800ee7c <acc_config_subsweep_num_points_get+0x2c>
 800ee74:	f7ff ff16 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d0f7      	beq.n	800ee6c <acc_config_subsweep_num_points_get+0x1c>
 800ee7c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800ee80:	8920      	ldrh	r0, [r4, #8]
 800ee82:	bd38      	pop	{r3, r4, r5, pc}
 800ee84:	1337b00f 	.word	0x1337b00f
 800ee88:	200008cc 	.word	0x200008cc
 800ee8c:	0801a394 	.word	0x0801a394
 800ee90:	0801a198 	.word	0x0801a198

0800ee94 <acc_config_subsweep_step_length_set>:
 800ee94:	b570      	push	{r4, r5, r6, lr}
 800ee96:	b120      	cbz	r0, 800eea2 <acc_config_subsweep_step_length_set+0xe>
 800ee98:	4b0b      	ldr	r3, [pc, #44]	@ (800eec8 <acc_config_subsweep_step_length_set+0x34>)
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	6800      	ldr	r0, [r0, #0]
 800ee9e:	4298      	cmp	r0, r3
 800eea0:	d007      	beq.n	800eeb2 <acc_config_subsweep_step_length_set+0x1e>
 800eea2:	4b0a      	ldr	r3, [pc, #40]	@ (800eecc <acc_config_subsweep_step_length_set+0x38>)
 800eea4:	4a0a      	ldr	r2, [pc, #40]	@ (800eed0 <acc_config_subsweep_step_length_set+0x3c>)
 800eea6:	691b      	ldr	r3, [r3, #16]
 800eea8:	490a      	ldr	r1, [pc, #40]	@ (800eed4 <acc_config_subsweep_step_length_set+0x40>)
 800eeaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eeae:	2000      	movs	r0, #0
 800eeb0:	4718      	bx	r3
 800eeb2:	2a03      	cmp	r2, #3
 800eeb4:	460d      	mov	r5, r1
 800eeb6:	4616      	mov	r6, r2
 800eeb8:	d902      	bls.n	800eec0 <acc_config_subsweep_step_length_set+0x2c>
 800eeba:	f7ff fef3 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800eebe:	b110      	cbz	r0, 800eec6 <acc_config_subsweep_step_length_set+0x32>
 800eec0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800eec4:	8165      	strh	r5, [r4, #10]
 800eec6:	bd70      	pop	{r4, r5, r6, pc}
 800eec8:	1337b00f 	.word	0x1337b00f
 800eecc:	200008cc 	.word	0x200008cc
 800eed0:	0801a394 	.word	0x0801a394
 800eed4:	0801a198 	.word	0x0801a198

0800eed8 <acc_config_subsweep_step_length_get>:
 800eed8:	b538      	push	{r3, r4, r5, lr}
 800eeda:	b120      	cbz	r0, 800eee6 <acc_config_subsweep_step_length_get+0xe>
 800eedc:	4b0b      	ldr	r3, [pc, #44]	@ (800ef0c <acc_config_subsweep_step_length_get+0x34>)
 800eede:	6802      	ldr	r2, [r0, #0]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	4604      	mov	r4, r0
 800eee4:	d007      	beq.n	800eef6 <acc_config_subsweep_step_length_get+0x1e>
 800eee6:	4b0a      	ldr	r3, [pc, #40]	@ (800ef10 <acc_config_subsweep_step_length_get+0x38>)
 800eee8:	4a0a      	ldr	r2, [pc, #40]	@ (800ef14 <acc_config_subsweep_step_length_get+0x3c>)
 800eeea:	691b      	ldr	r3, [r3, #16]
 800eeec:	490a      	ldr	r1, [pc, #40]	@ (800ef18 <acc_config_subsweep_step_length_get+0x40>)
 800eeee:	2000      	movs	r0, #0
 800eef0:	4798      	blx	r3
 800eef2:	2000      	movs	r0, #0
 800eef4:	bd38      	pop	{r3, r4, r5, pc}
 800eef6:	2903      	cmp	r1, #3
 800eef8:	460d      	mov	r5, r1
 800eefa:	d903      	bls.n	800ef04 <acc_config_subsweep_step_length_get+0x2c>
 800eefc:	f7ff fed2 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800ef00:	2800      	cmp	r0, #0
 800ef02:	d0f7      	beq.n	800eef4 <acc_config_subsweep_step_length_get+0x1c>
 800ef04:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800ef08:	8960      	ldrh	r0, [r4, #10]
 800ef0a:	bd38      	pop	{r3, r4, r5, pc}
 800ef0c:	1337b00f 	.word	0x1337b00f
 800ef10:	200008cc 	.word	0x200008cc
 800ef14:	0801a394 	.word	0x0801a394
 800ef18:	0801a198 	.word	0x0801a198

0800ef1c <acc_config_subsweep_profile_set>:
 800ef1c:	b570      	push	{r4, r5, r6, lr}
 800ef1e:	b120      	cbz	r0, 800ef2a <acc_config_subsweep_profile_set+0xe>
 800ef20:	4b0b      	ldr	r3, [pc, #44]	@ (800ef50 <acc_config_subsweep_profile_set+0x34>)
 800ef22:	4604      	mov	r4, r0
 800ef24:	6800      	ldr	r0, [r0, #0]
 800ef26:	4298      	cmp	r0, r3
 800ef28:	d007      	beq.n	800ef3a <acc_config_subsweep_profile_set+0x1e>
 800ef2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ef54 <acc_config_subsweep_profile_set+0x38>)
 800ef2c:	4a0a      	ldr	r2, [pc, #40]	@ (800ef58 <acc_config_subsweep_profile_set+0x3c>)
 800ef2e:	691b      	ldr	r3, [r3, #16]
 800ef30:	490a      	ldr	r1, [pc, #40]	@ (800ef5c <acc_config_subsweep_profile_set+0x40>)
 800ef32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef36:	2000      	movs	r0, #0
 800ef38:	4718      	bx	r3
 800ef3a:	2a03      	cmp	r2, #3
 800ef3c:	460d      	mov	r5, r1
 800ef3e:	4616      	mov	r6, r2
 800ef40:	d902      	bls.n	800ef48 <acc_config_subsweep_profile_set+0x2c>
 800ef42:	f7ff feaf 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800ef46:	b110      	cbz	r0, 800ef4e <acc_config_subsweep_profile_set+0x32>
 800ef48:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800ef4c:	74e5      	strb	r5, [r4, #19]
 800ef4e:	bd70      	pop	{r4, r5, r6, pc}
 800ef50:	1337b00f 	.word	0x1337b00f
 800ef54:	200008cc 	.word	0x200008cc
 800ef58:	0801a394 	.word	0x0801a394
 800ef5c:	0801a198 	.word	0x0801a198

0800ef60 <acc_config_subsweep_profile_get>:
 800ef60:	b538      	push	{r3, r4, r5, lr}
 800ef62:	b120      	cbz	r0, 800ef6e <acc_config_subsweep_profile_get+0xe>
 800ef64:	4b0b      	ldr	r3, [pc, #44]	@ (800ef94 <acc_config_subsweep_profile_get+0x34>)
 800ef66:	6802      	ldr	r2, [r0, #0]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	d007      	beq.n	800ef7e <acc_config_subsweep_profile_get+0x1e>
 800ef6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ef98 <acc_config_subsweep_profile_get+0x38>)
 800ef70:	4a0a      	ldr	r2, [pc, #40]	@ (800ef9c <acc_config_subsweep_profile_get+0x3c>)
 800ef72:	691b      	ldr	r3, [r3, #16]
 800ef74:	490a      	ldr	r1, [pc, #40]	@ (800efa0 <acc_config_subsweep_profile_get+0x40>)
 800ef76:	2000      	movs	r0, #0
 800ef78:	4798      	blx	r3
 800ef7a:	2002      	movs	r0, #2
 800ef7c:	bd38      	pop	{r3, r4, r5, pc}
 800ef7e:	2903      	cmp	r1, #3
 800ef80:	460d      	mov	r5, r1
 800ef82:	d903      	bls.n	800ef8c <acc_config_subsweep_profile_get+0x2c>
 800ef84:	f7ff fe8e 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d0f6      	beq.n	800ef7a <acc_config_subsweep_profile_get+0x1a>
 800ef8c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800ef90:	7ce0      	ldrb	r0, [r4, #19]
 800ef92:	bd38      	pop	{r3, r4, r5, pc}
 800ef94:	1337b00f 	.word	0x1337b00f
 800ef98:	200008cc 	.word	0x200008cc
 800ef9c:	0801a394 	.word	0x0801a394
 800efa0:	0801a198 	.word	0x0801a198

0800efa4 <acc_config_subsweep_hwaas_set>:
 800efa4:	b570      	push	{r4, r5, r6, lr}
 800efa6:	b120      	cbz	r0, 800efb2 <acc_config_subsweep_hwaas_set+0xe>
 800efa8:	4b0b      	ldr	r3, [pc, #44]	@ (800efd8 <acc_config_subsweep_hwaas_set+0x34>)
 800efaa:	4604      	mov	r4, r0
 800efac:	6800      	ldr	r0, [r0, #0]
 800efae:	4298      	cmp	r0, r3
 800efb0:	d007      	beq.n	800efc2 <acc_config_subsweep_hwaas_set+0x1e>
 800efb2:	4b0a      	ldr	r3, [pc, #40]	@ (800efdc <acc_config_subsweep_hwaas_set+0x38>)
 800efb4:	4a0a      	ldr	r2, [pc, #40]	@ (800efe0 <acc_config_subsweep_hwaas_set+0x3c>)
 800efb6:	691b      	ldr	r3, [r3, #16]
 800efb8:	490a      	ldr	r1, [pc, #40]	@ (800efe4 <acc_config_subsweep_hwaas_set+0x40>)
 800efba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efbe:	2000      	movs	r0, #0
 800efc0:	4718      	bx	r3
 800efc2:	2a03      	cmp	r2, #3
 800efc4:	460d      	mov	r5, r1
 800efc6:	4616      	mov	r6, r2
 800efc8:	d902      	bls.n	800efd0 <acc_config_subsweep_hwaas_set+0x2c>
 800efca:	f7ff fe6b 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800efce:	b110      	cbz	r0, 800efd6 <acc_config_subsweep_hwaas_set+0x32>
 800efd0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800efd4:	81a5      	strh	r5, [r4, #12]
 800efd6:	bd70      	pop	{r4, r5, r6, pc}
 800efd8:	1337b00f 	.word	0x1337b00f
 800efdc:	200008cc 	.word	0x200008cc
 800efe0:	0801a394 	.word	0x0801a394
 800efe4:	0801a198 	.word	0x0801a198

0800efe8 <acc_config_subsweep_hwaas_get>:
 800efe8:	b538      	push	{r3, r4, r5, lr}
 800efea:	b120      	cbz	r0, 800eff6 <acc_config_subsweep_hwaas_get+0xe>
 800efec:	4b0b      	ldr	r3, [pc, #44]	@ (800f01c <acc_config_subsweep_hwaas_get+0x34>)
 800efee:	6802      	ldr	r2, [r0, #0]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	4604      	mov	r4, r0
 800eff4:	d007      	beq.n	800f006 <acc_config_subsweep_hwaas_get+0x1e>
 800eff6:	4b0a      	ldr	r3, [pc, #40]	@ (800f020 <acc_config_subsweep_hwaas_get+0x38>)
 800eff8:	4a0a      	ldr	r2, [pc, #40]	@ (800f024 <acc_config_subsweep_hwaas_get+0x3c>)
 800effa:	691b      	ldr	r3, [r3, #16]
 800effc:	490a      	ldr	r1, [pc, #40]	@ (800f028 <acc_config_subsweep_hwaas_get+0x40>)
 800effe:	2000      	movs	r0, #0
 800f000:	4798      	blx	r3
 800f002:	2000      	movs	r0, #0
 800f004:	bd38      	pop	{r3, r4, r5, pc}
 800f006:	2903      	cmp	r1, #3
 800f008:	460d      	mov	r5, r1
 800f00a:	d903      	bls.n	800f014 <acc_config_subsweep_hwaas_get+0x2c>
 800f00c:	f7ff fe4a 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800f010:	2800      	cmp	r0, #0
 800f012:	d0f7      	beq.n	800f004 <acc_config_subsweep_hwaas_get+0x1c>
 800f014:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800f018:	89a0      	ldrh	r0, [r4, #12]
 800f01a:	bd38      	pop	{r3, r4, r5, pc}
 800f01c:	1337b00f 	.word	0x1337b00f
 800f020:	200008cc 	.word	0x200008cc
 800f024:	0801a394 	.word	0x0801a394
 800f028:	0801a198 	.word	0x0801a198

0800f02c <acc_config_subsweep_receiver_gain_set>:
 800f02c:	b570      	push	{r4, r5, r6, lr}
 800f02e:	b120      	cbz	r0, 800f03a <acc_config_subsweep_receiver_gain_set+0xe>
 800f030:	4b0b      	ldr	r3, [pc, #44]	@ (800f060 <acc_config_subsweep_receiver_gain_set+0x34>)
 800f032:	4604      	mov	r4, r0
 800f034:	6800      	ldr	r0, [r0, #0]
 800f036:	4298      	cmp	r0, r3
 800f038:	d007      	beq.n	800f04a <acc_config_subsweep_receiver_gain_set+0x1e>
 800f03a:	4b0a      	ldr	r3, [pc, #40]	@ (800f064 <acc_config_subsweep_receiver_gain_set+0x38>)
 800f03c:	4a0a      	ldr	r2, [pc, #40]	@ (800f068 <acc_config_subsweep_receiver_gain_set+0x3c>)
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	490a      	ldr	r1, [pc, #40]	@ (800f06c <acc_config_subsweep_receiver_gain_set+0x40>)
 800f042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f046:	2000      	movs	r0, #0
 800f048:	4718      	bx	r3
 800f04a:	2a03      	cmp	r2, #3
 800f04c:	460d      	mov	r5, r1
 800f04e:	4616      	mov	r6, r2
 800f050:	d902      	bls.n	800f058 <acc_config_subsweep_receiver_gain_set+0x2c>
 800f052:	f7ff fe27 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800f056:	b110      	cbz	r0, 800f05e <acc_config_subsweep_receiver_gain_set+0x32>
 800f058:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800f05c:	73a5      	strb	r5, [r4, #14]
 800f05e:	bd70      	pop	{r4, r5, r6, pc}
 800f060:	1337b00f 	.word	0x1337b00f
 800f064:	200008cc 	.word	0x200008cc
 800f068:	0801a394 	.word	0x0801a394
 800f06c:	0801a198 	.word	0x0801a198

0800f070 <acc_config_subsweep_receiver_gain_get>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	b120      	cbz	r0, 800f07e <acc_config_subsweep_receiver_gain_get+0xe>
 800f074:	4b0b      	ldr	r3, [pc, #44]	@ (800f0a4 <acc_config_subsweep_receiver_gain_get+0x34>)
 800f076:	6802      	ldr	r2, [r0, #0]
 800f078:	429a      	cmp	r2, r3
 800f07a:	4604      	mov	r4, r0
 800f07c:	d007      	beq.n	800f08e <acc_config_subsweep_receiver_gain_get+0x1e>
 800f07e:	4b0a      	ldr	r3, [pc, #40]	@ (800f0a8 <acc_config_subsweep_receiver_gain_get+0x38>)
 800f080:	4a0a      	ldr	r2, [pc, #40]	@ (800f0ac <acc_config_subsweep_receiver_gain_get+0x3c>)
 800f082:	691b      	ldr	r3, [r3, #16]
 800f084:	490a      	ldr	r1, [pc, #40]	@ (800f0b0 <acc_config_subsweep_receiver_gain_get+0x40>)
 800f086:	2000      	movs	r0, #0
 800f088:	4798      	blx	r3
 800f08a:	2000      	movs	r0, #0
 800f08c:	bd38      	pop	{r3, r4, r5, pc}
 800f08e:	2903      	cmp	r1, #3
 800f090:	460d      	mov	r5, r1
 800f092:	d903      	bls.n	800f09c <acc_config_subsweep_receiver_gain_get+0x2c>
 800f094:	f7ff fe06 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800f098:	2800      	cmp	r0, #0
 800f09a:	d0f7      	beq.n	800f08c <acc_config_subsweep_receiver_gain_get+0x1c>
 800f09c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800f0a0:	7ba0      	ldrb	r0, [r4, #14]
 800f0a2:	bd38      	pop	{r3, r4, r5, pc}
 800f0a4:	1337b00f 	.word	0x1337b00f
 800f0a8:	200008cc 	.word	0x200008cc
 800f0ac:	0801a394 	.word	0x0801a394
 800f0b0:	0801a198 	.word	0x0801a198

0800f0b4 <acc_config_subsweep_enable_tx_set>:
 800f0b4:	b570      	push	{r4, r5, r6, lr}
 800f0b6:	b120      	cbz	r0, 800f0c2 <acc_config_subsweep_enable_tx_set+0xe>
 800f0b8:	4b0b      	ldr	r3, [pc, #44]	@ (800f0e8 <acc_config_subsweep_enable_tx_set+0x34>)
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	6800      	ldr	r0, [r0, #0]
 800f0be:	4298      	cmp	r0, r3
 800f0c0:	d007      	beq.n	800f0d2 <acc_config_subsweep_enable_tx_set+0x1e>
 800f0c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f0ec <acc_config_subsweep_enable_tx_set+0x38>)
 800f0c4:	4a0a      	ldr	r2, [pc, #40]	@ (800f0f0 <acc_config_subsweep_enable_tx_set+0x3c>)
 800f0c6:	691b      	ldr	r3, [r3, #16]
 800f0c8:	490a      	ldr	r1, [pc, #40]	@ (800f0f4 <acc_config_subsweep_enable_tx_set+0x40>)
 800f0ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f0ce:	2000      	movs	r0, #0
 800f0d0:	4718      	bx	r3
 800f0d2:	2a03      	cmp	r2, #3
 800f0d4:	460d      	mov	r5, r1
 800f0d6:	4616      	mov	r6, r2
 800f0d8:	d902      	bls.n	800f0e0 <acc_config_subsweep_enable_tx_set+0x2c>
 800f0da:	f7ff fde3 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800f0de:	b110      	cbz	r0, 800f0e6 <acc_config_subsweep_enable_tx_set+0x32>
 800f0e0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800f0e4:	73e5      	strb	r5, [r4, #15]
 800f0e6:	bd70      	pop	{r4, r5, r6, pc}
 800f0e8:	1337b00f 	.word	0x1337b00f
 800f0ec:	200008cc 	.word	0x200008cc
 800f0f0:	0801a394 	.word	0x0801a394
 800f0f4:	0801a198 	.word	0x0801a198

0800f0f8 <acc_config_subsweep_phase_enhancement_set>:
 800f0f8:	b570      	push	{r4, r5, r6, lr}
 800f0fa:	b120      	cbz	r0, 800f106 <acc_config_subsweep_phase_enhancement_set+0xe>
 800f0fc:	4b0b      	ldr	r3, [pc, #44]	@ (800f12c <acc_config_subsweep_phase_enhancement_set+0x34>)
 800f0fe:	4604      	mov	r4, r0
 800f100:	6800      	ldr	r0, [r0, #0]
 800f102:	4298      	cmp	r0, r3
 800f104:	d007      	beq.n	800f116 <acc_config_subsweep_phase_enhancement_set+0x1e>
 800f106:	4b0a      	ldr	r3, [pc, #40]	@ (800f130 <acc_config_subsweep_phase_enhancement_set+0x38>)
 800f108:	4a0a      	ldr	r2, [pc, #40]	@ (800f134 <acc_config_subsweep_phase_enhancement_set+0x3c>)
 800f10a:	691b      	ldr	r3, [r3, #16]
 800f10c:	490a      	ldr	r1, [pc, #40]	@ (800f138 <acc_config_subsweep_phase_enhancement_set+0x40>)
 800f10e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f112:	2000      	movs	r0, #0
 800f114:	4718      	bx	r3
 800f116:	2a03      	cmp	r2, #3
 800f118:	460d      	mov	r5, r1
 800f11a:	4616      	mov	r6, r2
 800f11c:	d902      	bls.n	800f124 <acc_config_subsweep_phase_enhancement_set+0x2c>
 800f11e:	f7ff fdc1 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800f122:	b110      	cbz	r0, 800f12a <acc_config_subsweep_phase_enhancement_set+0x32>
 800f124:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800f128:	7425      	strb	r5, [r4, #16]
 800f12a:	bd70      	pop	{r4, r5, r6, pc}
 800f12c:	1337b00f 	.word	0x1337b00f
 800f130:	200008cc 	.word	0x200008cc
 800f134:	0801a394 	.word	0x0801a394
 800f138:	0801a198 	.word	0x0801a198

0800f13c <acc_config_subsweep_phase_enhancement_get>:
 800f13c:	b538      	push	{r3, r4, r5, lr}
 800f13e:	b120      	cbz	r0, 800f14a <acc_config_subsweep_phase_enhancement_get+0xe>
 800f140:	4b0b      	ldr	r3, [pc, #44]	@ (800f170 <acc_config_subsweep_phase_enhancement_get+0x34>)
 800f142:	6802      	ldr	r2, [r0, #0]
 800f144:	429a      	cmp	r2, r3
 800f146:	4604      	mov	r4, r0
 800f148:	d007      	beq.n	800f15a <acc_config_subsweep_phase_enhancement_get+0x1e>
 800f14a:	4b0a      	ldr	r3, [pc, #40]	@ (800f174 <acc_config_subsweep_phase_enhancement_get+0x38>)
 800f14c:	4a0a      	ldr	r2, [pc, #40]	@ (800f178 <acc_config_subsweep_phase_enhancement_get+0x3c>)
 800f14e:	691b      	ldr	r3, [r3, #16]
 800f150:	490a      	ldr	r1, [pc, #40]	@ (800f17c <acc_config_subsweep_phase_enhancement_get+0x40>)
 800f152:	2000      	movs	r0, #0
 800f154:	4798      	blx	r3
 800f156:	2000      	movs	r0, #0
 800f158:	bd38      	pop	{r3, r4, r5, pc}
 800f15a:	2903      	cmp	r1, #3
 800f15c:	460d      	mov	r5, r1
 800f15e:	d903      	bls.n	800f168 <acc_config_subsweep_phase_enhancement_get+0x2c>
 800f160:	f7ff fda0 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800f164:	2800      	cmp	r0, #0
 800f166:	d0f7      	beq.n	800f158 <acc_config_subsweep_phase_enhancement_get+0x1c>
 800f168:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800f16c:	7c20      	ldrb	r0, [r4, #16]
 800f16e:	bd38      	pop	{r3, r4, r5, pc}
 800f170:	1337b00f 	.word	0x1337b00f
 800f174:	200008cc 	.word	0x200008cc
 800f178:	0801a394 	.word	0x0801a394
 800f17c:	0801a198 	.word	0x0801a198

0800f180 <acc_config_start_point_set>:
 800f180:	2200      	movs	r2, #0
 800f182:	f7ff bdff 	b.w	800ed84 <acc_config_subsweep_start_point_set>
 800f186:	bf00      	nop

0800f188 <acc_config_num_points_set>:
 800f188:	2200      	movs	r2, #0
 800f18a:	f7ff be3f 	b.w	800ee0c <acc_config_subsweep_num_points_set>
 800f18e:	bf00      	nop

0800f190 <acc_config_step_length_set>:
 800f190:	2200      	movs	r2, #0
 800f192:	f7ff be7f 	b.w	800ee94 <acc_config_subsweep_step_length_set>
 800f196:	bf00      	nop

0800f198 <acc_config_profile_set>:
 800f198:	2200      	movs	r2, #0
 800f19a:	f7ff bebf 	b.w	800ef1c <acc_config_subsweep_profile_set>
 800f19e:	bf00      	nop

0800f1a0 <acc_config_hwaas_set>:
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f7ff beff 	b.w	800efa4 <acc_config_subsweep_hwaas_set>
 800f1a6:	bf00      	nop

0800f1a8 <acc_config_receiver_gain_set>:
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f7ff bf3f 	b.w	800f02c <acc_config_subsweep_receiver_gain_set>
 800f1ae:	bf00      	nop

0800f1b0 <acc_config_enable_tx_set>:
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f7ff bf7f 	b.w	800f0b4 <acc_config_subsweep_enable_tx_set>
 800f1b6:	bf00      	nop

0800f1b8 <acc_config_phase_enhancement_set>:
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f7ff bf9d 	b.w	800f0f8 <acc_config_subsweep_phase_enhancement_set>
 800f1be:	bf00      	nop

0800f1c0 <acc_config_sweeps_per_frame_set>:
 800f1c0:	b118      	cbz	r0, 800f1ca <acc_config_sweeps_per_frame_set+0xa>
 800f1c2:	4b06      	ldr	r3, [pc, #24]	@ (800f1dc <acc_config_sweeps_per_frame_set+0x1c>)
 800f1c4:	6802      	ldr	r2, [r0, #0]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d005      	beq.n	800f1d6 <acc_config_sweeps_per_frame_set+0x16>
 800f1ca:	4b05      	ldr	r3, [pc, #20]	@ (800f1e0 <acc_config_sweeps_per_frame_set+0x20>)
 800f1cc:	4a05      	ldr	r2, [pc, #20]	@ (800f1e4 <acc_config_sweeps_per_frame_set+0x24>)
 800f1ce:	691b      	ldr	r3, [r3, #16]
 800f1d0:	4905      	ldr	r1, [pc, #20]	@ (800f1e8 <acc_config_sweeps_per_frame_set+0x28>)
 800f1d2:	2000      	movs	r0, #0
 800f1d4:	4718      	bx	r3
 800f1d6:	f8a0 104c 	strh.w	r1, [r0, #76]	@ 0x4c
 800f1da:	4770      	bx	lr
 800f1dc:	1337b00f 	.word	0x1337b00f
 800f1e0:	200008cc 	.word	0x200008cc
 800f1e4:	0801a394 	.word	0x0801a394
 800f1e8:	0801a198 	.word	0x0801a198

0800f1ec <acc_config_get_settings>:
 800f1ec:	b508      	push	{r3, lr}
 800f1ee:	b118      	cbz	r0, 800f1f8 <acc_config_get_settings+0xc>
 800f1f0:	4b06      	ldr	r3, [pc, #24]	@ (800f20c <acc_config_get_settings+0x20>)
 800f1f2:	6802      	ldr	r2, [r0, #0]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d007      	beq.n	800f208 <acc_config_get_settings+0x1c>
 800f1f8:	4b05      	ldr	r3, [pc, #20]	@ (800f210 <acc_config_get_settings+0x24>)
 800f1fa:	4a06      	ldr	r2, [pc, #24]	@ (800f214 <acc_config_get_settings+0x28>)
 800f1fc:	691b      	ldr	r3, [r3, #16]
 800f1fe:	4906      	ldr	r1, [pc, #24]	@ (800f218 <acc_config_get_settings+0x2c>)
 800f200:	2000      	movs	r0, #0
 800f202:	4798      	blx	r3
 800f204:	2000      	movs	r0, #0
 800f206:	bd08      	pop	{r3, pc}
 800f208:	3004      	adds	r0, #4
 800f20a:	bd08      	pop	{r3, pc}
 800f20c:	1337b00f 	.word	0x1337b00f
 800f210:	200008cc 	.word	0x200008cc
 800f214:	0801a394 	.word	0x0801a394
 800f218:	0801a198 	.word	0x0801a198

0800f21c <acc_config_subsweep_enable_loopback_set>:
 800f21c:	b570      	push	{r4, r5, r6, lr}
 800f21e:	b120      	cbz	r0, 800f22a <acc_config_subsweep_enable_loopback_set+0xe>
 800f220:	4b0b      	ldr	r3, [pc, #44]	@ (800f250 <acc_config_subsweep_enable_loopback_set+0x34>)
 800f222:	4604      	mov	r4, r0
 800f224:	6800      	ldr	r0, [r0, #0]
 800f226:	4298      	cmp	r0, r3
 800f228:	d007      	beq.n	800f23a <acc_config_subsweep_enable_loopback_set+0x1e>
 800f22a:	4b0a      	ldr	r3, [pc, #40]	@ (800f254 <acc_config_subsweep_enable_loopback_set+0x38>)
 800f22c:	4a0a      	ldr	r2, [pc, #40]	@ (800f258 <acc_config_subsweep_enable_loopback_set+0x3c>)
 800f22e:	691b      	ldr	r3, [r3, #16]
 800f230:	490a      	ldr	r1, [pc, #40]	@ (800f25c <acc_config_subsweep_enable_loopback_set+0x40>)
 800f232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f236:	2000      	movs	r0, #0
 800f238:	4718      	bx	r3
 800f23a:	2a03      	cmp	r2, #3
 800f23c:	460d      	mov	r5, r1
 800f23e:	4616      	mov	r6, r2
 800f240:	d902      	bls.n	800f248 <acc_config_subsweep_enable_loopback_set+0x2c>
 800f242:	f7ff fd2f 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800f246:	b110      	cbz	r0, 800f24e <acc_config_subsweep_enable_loopback_set+0x32>
 800f248:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800f24c:	7465      	strb	r5, [r4, #17]
 800f24e:	bd70      	pop	{r4, r5, r6, pc}
 800f250:	1337b00f 	.word	0x1337b00f
 800f254:	200008cc 	.word	0x200008cc
 800f258:	0801a394 	.word	0x0801a394
 800f25c:	0801a198 	.word	0x0801a198

0800f260 <acc_config_subsweep_enable_loopback_get>:
 800f260:	b538      	push	{r3, r4, r5, lr}
 800f262:	b120      	cbz	r0, 800f26e <acc_config_subsweep_enable_loopback_get+0xe>
 800f264:	4b0b      	ldr	r3, [pc, #44]	@ (800f294 <acc_config_subsweep_enable_loopback_get+0x34>)
 800f266:	6802      	ldr	r2, [r0, #0]
 800f268:	429a      	cmp	r2, r3
 800f26a:	4604      	mov	r4, r0
 800f26c:	d007      	beq.n	800f27e <acc_config_subsweep_enable_loopback_get+0x1e>
 800f26e:	4b0a      	ldr	r3, [pc, #40]	@ (800f298 <acc_config_subsweep_enable_loopback_get+0x38>)
 800f270:	4a0a      	ldr	r2, [pc, #40]	@ (800f29c <acc_config_subsweep_enable_loopback_get+0x3c>)
 800f272:	691b      	ldr	r3, [r3, #16]
 800f274:	490a      	ldr	r1, [pc, #40]	@ (800f2a0 <acc_config_subsweep_enable_loopback_get+0x40>)
 800f276:	2000      	movs	r0, #0
 800f278:	4798      	blx	r3
 800f27a:	2000      	movs	r0, #0
 800f27c:	bd38      	pop	{r3, r4, r5, pc}
 800f27e:	2903      	cmp	r1, #3
 800f280:	460d      	mov	r5, r1
 800f282:	d903      	bls.n	800f28c <acc_config_subsweep_enable_loopback_get+0x2c>
 800f284:	f7ff fd0e 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800f288:	2800      	cmp	r0, #0
 800f28a:	d0f7      	beq.n	800f27c <acc_config_subsweep_enable_loopback_get+0x1c>
 800f28c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800f290:	7c60      	ldrb	r0, [r4, #17]
 800f292:	bd38      	pop	{r3, r4, r5, pc}
 800f294:	1337b00f 	.word	0x1337b00f
 800f298:	200008cc 	.word	0x200008cc
 800f29c:	0801a394 	.word	0x0801a394
 800f2a0:	0801a198 	.word	0x0801a198

0800f2a4 <acc_config_subsweep_prf_set>:
 800f2a4:	b570      	push	{r4, r5, r6, lr}
 800f2a6:	b120      	cbz	r0, 800f2b2 <acc_config_subsweep_prf_set+0xe>
 800f2a8:	4b0b      	ldr	r3, [pc, #44]	@ (800f2d8 <acc_config_subsweep_prf_set+0x34>)
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	6800      	ldr	r0, [r0, #0]
 800f2ae:	4298      	cmp	r0, r3
 800f2b0:	d007      	beq.n	800f2c2 <acc_config_subsweep_prf_set+0x1e>
 800f2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800f2dc <acc_config_subsweep_prf_set+0x38>)
 800f2b4:	4a0a      	ldr	r2, [pc, #40]	@ (800f2e0 <acc_config_subsweep_prf_set+0x3c>)
 800f2b6:	691b      	ldr	r3, [r3, #16]
 800f2b8:	490a      	ldr	r1, [pc, #40]	@ (800f2e4 <acc_config_subsweep_prf_set+0x40>)
 800f2ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2be:	2000      	movs	r0, #0
 800f2c0:	4718      	bx	r3
 800f2c2:	2a03      	cmp	r2, #3
 800f2c4:	460d      	mov	r5, r1
 800f2c6:	4616      	mov	r6, r2
 800f2c8:	d902      	bls.n	800f2d0 <acc_config_subsweep_prf_set+0x2c>
 800f2ca:	f7ff fceb 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800f2ce:	b110      	cbz	r0, 800f2d6 <acc_config_subsweep_prf_set+0x32>
 800f2d0:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 800f2d4:	74a5      	strb	r5, [r4, #18]
 800f2d6:	bd70      	pop	{r4, r5, r6, pc}
 800f2d8:	1337b00f 	.word	0x1337b00f
 800f2dc:	200008cc 	.word	0x200008cc
 800f2e0:	0801a394 	.word	0x0801a394
 800f2e4:	0801a198 	.word	0x0801a198

0800f2e8 <acc_config_prf_set>:
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f7ff bfdb 	b.w	800f2a4 <acc_config_subsweep_prf_set>
 800f2ee:	bf00      	nop

0800f2f0 <acc_config_subsweep_prf_get>:
 800f2f0:	b538      	push	{r3, r4, r5, lr}
 800f2f2:	b120      	cbz	r0, 800f2fe <acc_config_subsweep_prf_get+0xe>
 800f2f4:	4b0b      	ldr	r3, [pc, #44]	@ (800f324 <acc_config_subsweep_prf_get+0x34>)
 800f2f6:	6802      	ldr	r2, [r0, #0]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	d007      	beq.n	800f30e <acc_config_subsweep_prf_get+0x1e>
 800f2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800f328 <acc_config_subsweep_prf_get+0x38>)
 800f300:	4a0a      	ldr	r2, [pc, #40]	@ (800f32c <acc_config_subsweep_prf_get+0x3c>)
 800f302:	691b      	ldr	r3, [r3, #16]
 800f304:	490a      	ldr	r1, [pc, #40]	@ (800f330 <acc_config_subsweep_prf_get+0x40>)
 800f306:	2000      	movs	r0, #0
 800f308:	4798      	blx	r3
 800f30a:	2000      	movs	r0, #0
 800f30c:	bd38      	pop	{r3, r4, r5, pc}
 800f30e:	2903      	cmp	r1, #3
 800f310:	460d      	mov	r5, r1
 800f312:	d903      	bls.n	800f31c <acc_config_subsweep_prf_get+0x2c>
 800f314:	f7ff fcc6 	bl	800eca4 <acc_config_subsweep_validate.part.0>
 800f318:	2800      	cmp	r0, #0
 800f31a:	d0f7      	beq.n	800f30c <acc_config_subsweep_prf_get+0x1c>
 800f31c:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800f320:	7ca0      	ldrb	r0, [r4, #18]
 800f322:	bd38      	pop	{r3, r4, r5, pc}
 800f324:	1337b00f 	.word	0x1337b00f
 800f328:	200008cc 	.word	0x200008cc
 800f32c:	0801a394 	.word	0x0801a394
 800f330:	0801a198 	.word	0x0801a198

0800f334 <acc_config_enable_loopback_set>:
 800f334:	2200      	movs	r2, #0
 800f336:	f7ff bf71 	b.w	800f21c <acc_config_subsweep_enable_loopback_set>
 800f33a:	bf00      	nop

0800f33c <data_callback>:
 800f33c:	b470      	push	{r4, r5, r6}
 800f33e:	888c      	ldrh	r4, [r1, #4]
 800f340:	6893      	ldr	r3, [r2, #8]
 800f342:	890e      	ldrh	r6, [r1, #8]
 800f344:	798d      	ldrb	r5, [r1, #6]
 800f346:	79ca      	ldrb	r2, [r1, #7]
 800f348:	709a      	strb	r2, [r3, #2]
 800f34a:	3c00      	subs	r4, #0
 800f34c:	bf18      	it	ne
 800f34e:	2401      	movne	r4, #1
 800f350:	809e      	strh	r6, [r3, #4]
 800f352:	701c      	strb	r4, [r3, #0]
 800f354:	705d      	strb	r5, [r3, #1]
 800f356:	6098      	str	r0, [r3, #8]
 800f358:	bc70      	pop	{r4, r5, r6}
 800f35a:	4770      	bx	lr

0800f35c <acc_processing_execute>:
 800f35c:	b570      	push	{r4, r5, r6, lr}
 800f35e:	4615      	mov	r5, r2
 800f360:	460e      	mov	r6, r1
 800f362:	b120      	cbz	r0, 800f36e <acc_processing_execute+0x12>
 800f364:	4b15      	ldr	r3, [pc, #84]	@ (800f3bc <acc_processing_execute+0x60>)
 800f366:	6802      	ldr	r2, [r0, #0]
 800f368:	429a      	cmp	r2, r3
 800f36a:	4604      	mov	r4, r0
 800f36c:	d008      	beq.n	800f380 <acc_processing_execute+0x24>
 800f36e:	4c14      	ldr	r4, [pc, #80]	@ (800f3c0 <acc_processing_execute+0x64>)
 800f370:	4a14      	ldr	r2, [pc, #80]	@ (800f3c4 <acc_processing_execute+0x68>)
 800f372:	6923      	ldr	r3, [r4, #16]
 800f374:	4914      	ldr	r1, [pc, #80]	@ (800f3c8 <acc_processing_execute+0x6c>)
 800f376:	2000      	movs	r0, #0
 800f378:	4798      	blx	r3
 800f37a:	b176      	cbz	r6, 800f39a <acc_processing_execute+0x3e>
 800f37c:	b1a5      	cbz	r5, 800f3a8 <acc_processing_execute+0x4c>
 800f37e:	bd70      	pop	{r4, r5, r6, pc}
 800f380:	b151      	cbz	r1, 800f398 <acc_processing_execute+0x3c>
 800f382:	b1c5      	cbz	r5, 800f3b6 <acc_processing_execute+0x5a>
 800f384:	6085      	str	r5, [r0, #8]
 800f386:	6840      	ldr	r0, [r0, #4]
 800f388:	f002 fa2e 	bl	80117e8 <acc_pipeline_a121_prepare_memory>
 800f38c:	6863      	ldr	r3, [r4, #4]
 800f38e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f392:	e9d3 0200 	ldrd	r0, r2, [r3]
 800f396:	4710      	bx	r2
 800f398:	4c09      	ldr	r4, [pc, #36]	@ (800f3c0 <acc_processing_execute+0x64>)
 800f39a:	6923      	ldr	r3, [r4, #16]
 800f39c:	4a0b      	ldr	r2, [pc, #44]	@ (800f3cc <acc_processing_execute+0x70>)
 800f39e:	490a      	ldr	r1, [pc, #40]	@ (800f3c8 <acc_processing_execute+0x6c>)
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	4798      	blx	r3
 800f3a4:	2d00      	cmp	r5, #0
 800f3a6:	d1ea      	bne.n	800f37e <acc_processing_execute+0x22>
 800f3a8:	6923      	ldr	r3, [r4, #16]
 800f3aa:	4a09      	ldr	r2, [pc, #36]	@ (800f3d0 <acc_processing_execute+0x74>)
 800f3ac:	4906      	ldr	r1, [pc, #24]	@ (800f3c8 <acc_processing_execute+0x6c>)
 800f3ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3b2:	2000      	movs	r0, #0
 800f3b4:	4718      	bx	r3
 800f3b6:	4c02      	ldr	r4, [pc, #8]	@ (800f3c0 <acc_processing_execute+0x64>)
 800f3b8:	e7f6      	b.n	800f3a8 <acc_processing_execute+0x4c>
 800f3ba:	bf00      	nop
 800f3bc:	1337b00d 	.word	0x1337b00d
 800f3c0:	200008cc 	.word	0x200008cc
 800f3c4:	0801a428 	.word	0x0801a428
 800f3c8:	0801a41c 	.word	0x0801a41c
 800f3cc:	0801a444 	.word	0x0801a444
 800f3d0:	0801a404 	.word	0x0801a404

0800f3d4 <acc_processing_destroy>:
 800f3d4:	b510      	push	{r4, lr}
 800f3d6:	b120      	cbz	r0, 800f3e2 <acc_processing_destroy+0xe>
 800f3d8:	4b0c      	ldr	r3, [pc, #48]	@ (800f40c <acc_processing_destroy+0x38>)
 800f3da:	6802      	ldr	r2, [r0, #0]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	4604      	mov	r4, r0
 800f3e0:	d007      	beq.n	800f3f2 <acc_processing_destroy+0x1e>
 800f3e2:	4b0b      	ldr	r3, [pc, #44]	@ (800f410 <acc_processing_destroy+0x3c>)
 800f3e4:	4a0b      	ldr	r2, [pc, #44]	@ (800f414 <acc_processing_destroy+0x40>)
 800f3e6:	691b      	ldr	r3, [r3, #16]
 800f3e8:	490b      	ldr	r1, [pc, #44]	@ (800f418 <acc_processing_destroy+0x44>)
 800f3ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3ee:	2000      	movs	r0, #0
 800f3f0:	4718      	bx	r3
 800f3f2:	6840      	ldr	r0, [r0, #4]
 800f3f4:	b118      	cbz	r0, 800f3fe <acc_processing_destroy+0x2a>
 800f3f6:	68c3      	ldr	r3, [r0, #12]
 800f3f8:	4798      	blx	r3
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	6063      	str	r3, [r4, #4]
 800f3fe:	2300      	movs	r3, #0
 800f400:	6023      	str	r3, [r4, #0]
 800f402:	4620      	mov	r0, r4
 800f404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f408:	f002 b842 	b.w	8011490 <acc_rss_integration_mem_free>
 800f40c:	1337b00d 	.word	0x1337b00d
 800f410:	200008cc 	.word	0x200008cc
 800f414:	0801a428 	.word	0x0801a428
 800f418:	0801a41c 	.word	0x0801a41c

0800f41c <acc_processing_create>:
 800f41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f420:	b088      	sub	sp, #32
 800f422:	460c      	mov	r4, r1
 800f424:	f7ff fee2 	bl	800f1ec <acc_config_get_settings>
 800f428:	2800      	cmp	r0, #0
 800f42a:	d050      	beq.n	800f4ce <acc_processing_create+0xb2>
 800f42c:	2c00      	cmp	r4, #0
 800f42e:	d043      	beq.n	800f4b8 <acc_processing_create+0x9c>
 800f430:	4a2e      	ldr	r2, [pc, #184]	@ (800f4ec <acc_processing_create+0xd0>)
 800f432:	4606      	mov	r6, r0
 800f434:	2367      	movs	r3, #103	@ 0x67
 800f436:	2110      	movs	r1, #16
 800f438:	2001      	movs	r0, #1
 800f43a:	f002 f80d 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 800f43e:	4605      	mov	r5, r0
 800f440:	2800      	cmp	r0, #0
 800f442:	d044      	beq.n	800f4ce <acc_processing_create+0xb2>
 800f444:	4b2a      	ldr	r3, [pc, #168]	@ (800f4f0 <acc_processing_create+0xd4>)
 800f446:	6003      	str	r3, [r0, #0]
 800f448:	f10d 080c 	add.w	r8, sp, #12
 800f44c:	4b29      	ldr	r3, [pc, #164]	@ (800f4f4 <acc_processing_create+0xd8>)
 800f44e:	9600      	str	r6, [sp, #0]
 800f450:	4641      	mov	r1, r8
 800f452:	4668      	mov	r0, sp
 800f454:	e9cd 3501 	strd	r3, r5, [sp, #4]
 800f458:	f002 f860 	bl	801151c <acc_pipeline_a121_assemble>
 800f45c:	4607      	mov	r7, r0
 800f45e:	6068      	str	r0, [r5, #4]
 800f460:	2800      	cmp	r0, #0
 800f462:	d03e      	beq.n	800f4e2 <acc_processing_create+0xc6>
 800f464:	2300      	movs	r3, #0
 800f466:	8063      	strh	r3, [r4, #2]
 800f468:	f896 104e 	ldrb.w	r1, [r6, #78]	@ 0x4e
 800f46c:	461a      	mov	r2, r3
 800f46e:	469c      	mov	ip, r3
 800f470:	1d20      	adds	r0, r4, #4
 800f472:	b2df      	uxtb	r7, r3
 800f474:	42b9      	cmp	r1, r7
 800f476:	d92f      	bls.n	800f4d8 <acc_processing_create+0xbc>
 800f478:	f838 7013 	ldrh.w	r7, [r8, r3, lsl #1]
 800f47c:	8002      	strh	r2, [r0, #0]
 800f47e:	443a      	add	r2, r7
 800f480:	b292      	uxth	r2, r2
 800f482:	8062      	strh	r2, [r4, #2]
 800f484:	8107      	strh	r7, [r0, #8]
 800f486:	3301      	adds	r3, #1
 800f488:	2b04      	cmp	r3, #4
 800f48a:	f100 0002 	add.w	r0, r0, #2
 800f48e:	d1f0      	bne.n	800f472 <acc_processing_create+0x56>
 800f490:	f8b6 3048 	ldrh.w	r3, [r6, #72]	@ 0x48
 800f494:	9905      	ldr	r1, [sp, #20]
 800f496:	6161      	str	r1, [r4, #20]
 800f498:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f49c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 800f4a0:	7620      	strb	r0, [r4, #24]
 800f4a2:	fb13 f202 	smulbb	r2, r3, r2
 800f4a6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800f4aa:	8022      	strh	r2, [r4, #0]
 800f4ac:	81a9      	strh	r1, [r5, #12]
 800f4ae:	81eb      	strh	r3, [r5, #14]
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	b008      	add	sp, #32
 800f4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4b8:	4b0f      	ldr	r3, [pc, #60]	@ (800f4f8 <acc_processing_create+0xdc>)
 800f4ba:	4a10      	ldr	r2, [pc, #64]	@ (800f4fc <acc_processing_create+0xe0>)
 800f4bc:	691b      	ldr	r3, [r3, #16]
 800f4be:	490b      	ldr	r1, [pc, #44]	@ (800f4ec <acc_processing_create+0xd0>)
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	4798      	blx	r3
 800f4c4:	4625      	mov	r5, r4
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	b008      	add	sp, #32
 800f4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ce:	2500      	movs	r5, #0
 800f4d0:	4628      	mov	r0, r5
 800f4d2:	b008      	add	sp, #32
 800f4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4d8:	f8a0 c000 	strh.w	ip, [r0]
 800f4dc:	f8a0 c008 	strh.w	ip, [r0, #8]
 800f4e0:	e7d1      	b.n	800f486 <acc_processing_create+0x6a>
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	f7ff ff76 	bl	800f3d4 <acc_processing_destroy>
 800f4e8:	463d      	mov	r5, r7
 800f4ea:	e7e1      	b.n	800f4b0 <acc_processing_create+0x94>
 800f4ec:	0801a41c 	.word	0x0801a41c
 800f4f0:	1337b00d 	.word	0x1337b00d
 800f4f4:	0800f33d 	.word	0x0800f33d
 800f4f8:	200008cc 	.word	0x200008cc
 800f4fc:	0801a45c 	.word	0x0801a45c

0800f500 <acc_processing_points_to_meter>:
 800f500:	f002 bbfe 	b.w	8011d00 <acc_radar_engine_a121_points_to_meter>

0800f504 <acc_processing_get_temperature_adjustment_factors>:
 800f504:	3a01      	subs	r2, #1
 800f506:	b538      	push	{r3, r4, r5, lr}
 800f508:	b2d2      	uxtb	r2, r2
 800f50a:	2a04      	cmp	r2, #4
 800f50c:	eba1 0100 	sub.w	r1, r1, r0
 800f510:	461c      	mov	r4, r3
 800f512:	b209      	sxth	r1, r1
 800f514:	bf94      	ite	ls
 800f516:	4b13      	ldrls	r3, [pc, #76]	@ (800f564 <acc_processing_get_temperature_adjustment_factors+0x60>)
 800f518:	eddf 7a13 	vldrhi	s15, [pc, #76]	@ 800f568 <acc_processing_get_temperature_adjustment_factors+0x64>
 800f51c:	ee07 1a10 	vmov	s14, r1
 800f520:	bf98      	it	ls
 800f522:	eb03 0282 	addls.w	r2, r3, r2, lsl #2
 800f526:	ed2d 8b02 	vpush	{d8}
 800f52a:	bf98      	it	ls
 800f52c:	edd2 7a00 	vldrls	s15, [r2]
 800f530:	9d06      	ldr	r5, [sp, #24]
 800f532:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 800f536:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800f53a:	eec8 0a27 	vdiv.f32	s1, s16, s15
 800f53e:	eef1 0a60 	vneg.f32	s1, s1
 800f542:	f008 fad1 	bl	8017ae8 <powf>
 800f546:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800f56c <acc_processing_get_temperature_adjustment_factors+0x68>
 800f54a:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f570 <acc_processing_get_temperature_adjustment_factors+0x6c>
 800f54e:	ed84 0a00 	vstr	s0, [r4]
 800f552:	ee28 8a07 	vmul.f32	s16, s16, s14
 800f556:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f55a:	ed85 8a00 	vstr	s16, [r5]
 800f55e:	ecbd 8b02 	vpop	{d8}
 800f562:	bd38      	pop	{r3, r4, r5, pc}
 800f564:	0801a474 	.word	0x0801a474
 800f568:	42ac0000 	.word	0x42ac0000
 800f56c:	bb343958 	.word	0xbb343958
 800f570:	3f7c408e 	.word	0x3f7c408e

0800f574 <acc_sensor_destroy>:
 800f574:	b510      	push	{r4, lr}
 800f576:	b120      	cbz	r0, 800f582 <acc_sensor_destroy+0xe>
 800f578:	4b0b      	ldr	r3, [pc, #44]	@ (800f5a8 <acc_sensor_destroy+0x34>)
 800f57a:	6802      	ldr	r2, [r0, #0]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	4604      	mov	r4, r0
 800f580:	d007      	beq.n	800f592 <acc_sensor_destroy+0x1e>
 800f582:	4b0a      	ldr	r3, [pc, #40]	@ (800f5ac <acc_sensor_destroy+0x38>)
 800f584:	4a0a      	ldr	r2, [pc, #40]	@ (800f5b0 <acc_sensor_destroy+0x3c>)
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	490a      	ldr	r1, [pc, #40]	@ (800f5b4 <acc_sensor_destroy+0x40>)
 800f58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f58e:	2000      	movs	r0, #0
 800f590:	4718      	bx	r3
 800f592:	2300      	movs	r3, #0
 800f594:	6003      	str	r3, [r0, #0]
 800f596:	6900      	ldr	r0, [r0, #16]
 800f598:	f002 f95e 	bl	8011858 <acc_radar_engine_a121_context_destroy>
 800f59c:	4620      	mov	r0, r4
 800f59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5a2:	f001 bf75 	b.w	8011490 <acc_rss_integration_mem_free>
 800f5a6:	bf00      	nop
 800f5a8:	1337b00e 	.word	0x1337b00e
 800f5ac:	200008cc 	.word	0x200008cc
 800f5b0:	0801a488 	.word	0x0801a488
 800f5b4:	0801a4a0 	.word	0x0801a4a0

0800f5b8 <acc_sensor_create>:
 800f5b8:	b570      	push	{r4, r5, r6, lr}
 800f5ba:	4a20      	ldr	r2, [pc, #128]	@ (800f63c <acc_sensor_create+0x84>)
 800f5bc:	4606      	mov	r6, r0
 800f5be:	233b      	movs	r3, #59	@ 0x3b
 800f5c0:	2114      	movs	r1, #20
 800f5c2:	2001      	movs	r0, #1
 800f5c4:	f001 ff48 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 800f5c8:	b378      	cbz	r0, 800f62a <acc_sensor_create+0x72>
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	f002 f932 	bl	8011834 <acc_radar_engine_a121_context_create>
 800f5d0:	4605      	mov	r5, r0
 800f5d2:	6120      	str	r0, [r4, #16]
 800f5d4:	b360      	cbz	r0, 800f630 <acc_sensor_create+0x78>
 800f5d6:	4b1a      	ldr	r3, [pc, #104]	@ (800f640 <acc_sensor_create+0x88>)
 800f5d8:	60a6      	str	r6, [r4, #8]
 800f5da:	2100      	movs	r1, #0
 800f5dc:	e9c4 3100 	strd	r3, r1, [r4]
 800f5e0:	7361      	strb	r1, [r4, #13]
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	f002 f9e2 	bl	80119ac <acc_radar_engine_a121_check_asic_id>
 800f5e8:	4605      	mov	r5, r0
 800f5ea:	b168      	cbz	r0, 800f608 <acc_sensor_create+0x50>
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	f002 f9df 	bl	80119b0 <acc_radar_engine_a121_is_sensor_running>
 800f5f2:	4605      	mov	r5, r0
 800f5f4:	b980      	cbnz	r0, 800f618 <acc_sensor_create+0x60>
 800f5f6:	68a0      	ldr	r0, [r4, #8]
 800f5f8:	f002 fb84 	bl	8011d04 <acc_radar_engine_a121_init_interrupts>
 800f5fc:	68a0      	ldr	r0, [r4, #8]
 800f5fe:	4629      	mov	r1, r5
 800f600:	f002 fb82 	bl	8011d08 <acc_radar_engine_a121_hibernate_off>
 800f604:	4620      	mov	r0, r4
 800f606:	bd70      	pop	{r4, r5, r6, pc}
 800f608:	4620      	mov	r0, r4
 800f60a:	f7ff ffb3 	bl	800f574 <acc_sensor_destroy>
 800f60e:	4630      	mov	r0, r6
 800f610:	f002 f9ce 	bl	80119b0 <acc_radar_engine_a121_is_sensor_running>
 800f614:	b148      	cbz	r0, 800f62a <acc_sensor_create+0x72>
 800f616:	462c      	mov	r4, r5
 800f618:	4b0a      	ldr	r3, [pc, #40]	@ (800f644 <acc_sensor_create+0x8c>)
 800f61a:	4a0b      	ldr	r2, [pc, #44]	@ (800f648 <acc_sensor_create+0x90>)
 800f61c:	691b      	ldr	r3, [r3, #16]
 800f61e:	4907      	ldr	r1, [pc, #28]	@ (800f63c <acc_sensor_create+0x84>)
 800f620:	2000      	movs	r0, #0
 800f622:	4798      	blx	r3
 800f624:	4620      	mov	r0, r4
 800f626:	f7ff ffa5 	bl	800f574 <acc_sensor_destroy>
 800f62a:	2400      	movs	r4, #0
 800f62c:	4620      	mov	r0, r4
 800f62e:	bd70      	pop	{r4, r5, r6, pc}
 800f630:	4620      	mov	r0, r4
 800f632:	f001 ff2d 	bl	8011490 <acc_rss_integration_mem_free>
 800f636:	462c      	mov	r4, r5
 800f638:	e7f8      	b.n	800f62c <acc_sensor_create+0x74>
 800f63a:	bf00      	nop
 800f63c:	0801a4a0 	.word	0x0801a4a0
 800f640:	1337b00e 	.word	0x1337b00e
 800f644:	200008cc 	.word	0x200008cc
 800f648:	0801a4a8 	.word	0x0801a4a8

0800f64c <acc_sensor_calibrate>:
 800f64c:	b530      	push	{r4, r5, lr}
 800f64e:	b083      	sub	sp, #12
 800f650:	b128      	cbz	r0, 800f65e <acc_sensor_calibrate+0x12>
 800f652:	460d      	mov	r5, r1
 800f654:	4604      	mov	r4, r0
 800f656:	4912      	ldr	r1, [pc, #72]	@ (800f6a0 <acc_sensor_calibrate+0x54>)
 800f658:	6800      	ldr	r0, [r0, #0]
 800f65a:	4288      	cmp	r0, r1
 800f65c:	d008      	beq.n	800f670 <acc_sensor_calibrate+0x24>
 800f65e:	4b11      	ldr	r3, [pc, #68]	@ (800f6a4 <acc_sensor_calibrate+0x58>)
 800f660:	4a11      	ldr	r2, [pc, #68]	@ (800f6a8 <acc_sensor_calibrate+0x5c>)
 800f662:	691b      	ldr	r3, [r3, #16]
 800f664:	4911      	ldr	r1, [pc, #68]	@ (800f6ac <acc_sensor_calibrate+0x60>)
 800f666:	2000      	movs	r0, #0
 800f668:	4798      	blx	r3
 800f66a:	2000      	movs	r0, #0
 800f66c:	b003      	add	sp, #12
 800f66e:	bd30      	pop	{r4, r5, pc}
 800f670:	2d00      	cmp	r5, #0
 800f672:	d0fa      	beq.n	800f66a <acc_sensor_calibrate+0x1e>
 800f674:	2a00      	cmp	r2, #0
 800f676:	d0f8      	beq.n	800f66a <acc_sensor_calibrate+0x1e>
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d0f6      	beq.n	800f66a <acc_sensor_calibrate+0x1e>
 800f67c:	9200      	str	r2, [sp, #0]
 800f67e:	4619      	mov	r1, r3
 800f680:	9a06      	ldr	r2, [sp, #24]
 800f682:	68a0      	ldr	r0, [r4, #8]
 800f684:	f104 030d 	add.w	r3, r4, #13
 800f688:	f000 f8d0 	bl	800f82c <acc_calibration_a121_calibrate>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d0ec      	beq.n	800f66a <acc_sensor_calibrate+0x1e>
 800f690:	7b63      	ldrb	r3, [r4, #13]
 800f692:	2b0a      	cmp	r3, #10
 800f694:	bf0c      	ite	eq
 800f696:	2301      	moveq	r3, #1
 800f698:	2300      	movne	r3, #0
 800f69a:	702b      	strb	r3, [r5, #0]
 800f69c:	e7e6      	b.n	800f66c <acc_sensor_calibrate+0x20>
 800f69e:	bf00      	nop
 800f6a0:	1337b00e 	.word	0x1337b00e
 800f6a4:	200008cc 	.word	0x200008cc
 800f6a8:	0801a488 	.word	0x0801a488
 800f6ac:	0801a4a0 	.word	0x0801a4a0

0800f6b0 <acc_sensor_prepare>:
 800f6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6b2:	b085      	sub	sp, #20
 800f6b4:	b130      	cbz	r0, 800f6c4 <acc_sensor_prepare+0x14>
 800f6b6:	4616      	mov	r6, r2
 800f6b8:	461f      	mov	r7, r3
 800f6ba:	6802      	ldr	r2, [r0, #0]
 800f6bc:	4b22      	ldr	r3, [pc, #136]	@ (800f748 <acc_sensor_prepare+0x98>)
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	d008      	beq.n	800f6d6 <acc_sensor_prepare+0x26>
 800f6c4:	4b21      	ldr	r3, [pc, #132]	@ (800f74c <acc_sensor_prepare+0x9c>)
 800f6c6:	4a22      	ldr	r2, [pc, #136]	@ (800f750 <acc_sensor_prepare+0xa0>)
 800f6c8:	691b      	ldr	r3, [r3, #16]
 800f6ca:	4922      	ldr	r1, [pc, #136]	@ (800f754 <acc_sensor_prepare+0xa4>)
 800f6cc:	2000      	movs	r0, #0
 800f6ce:	4798      	blx	r3
 800f6d0:	2000      	movs	r0, #0
 800f6d2:	b005      	add	sp, #20
 800f6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6d6:	b1f6      	cbz	r6, 800f716 <acc_sensor_prepare+0x66>
 800f6d8:	4630      	mov	r0, r6
 800f6da:	460d      	mov	r5, r1
 800f6dc:	f000 fc42 	bl	800ff64 <acc_calibration_a121_validate_calibration>
 800f6e0:	b1c8      	cbz	r0, 800f716 <acc_sensor_prepare+0x66>
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	f7ff fd82 	bl	800f1ec <acc_config_get_settings>
 800f6e8:	4605      	mov	r5, r0
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	d0f1      	beq.n	800f6d2 <acc_sensor_prepare+0x22>
 800f6ee:	68a0      	ldr	r0, [r4, #8]
 800f6f0:	f002 f95e 	bl	80119b0 <acc_radar_engine_a121_is_sensor_running>
 800f6f4:	7320      	strb	r0, [r4, #12]
 800f6f6:	b188      	cbz	r0, 800f71c <acc_sensor_prepare+0x6c>
 800f6f8:	9700      	str	r7, [sp, #0]
 800f6fa:	6923      	ldr	r3, [r4, #16]
 800f6fc:	1d20      	adds	r0, r4, #4
 800f6fe:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800f702:	1da2      	adds	r2, r4, #6
 800f704:	9203      	str	r2, [sp, #12]
 800f706:	68a0      	ldr	r0, [r4, #8]
 800f708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f70a:	4632      	mov	r2, r6
 800f70c:	4629      	mov	r1, r5
 800f70e:	f002 fa3d 	bl	8011b8c <acc_radar_engine_a121_reconfigure>
 800f712:	b005      	add	sp, #20
 800f714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f716:	4b0d      	ldr	r3, [pc, #52]	@ (800f74c <acc_sensor_prepare+0x9c>)
 800f718:	4a0f      	ldr	r2, [pc, #60]	@ (800f758 <acc_sensor_prepare+0xa8>)
 800f71a:	e7d5      	b.n	800f6c8 <acc_sensor_prepare+0x18>
 800f71c:	68a0      	ldr	r0, [r4, #8]
 800f71e:	f002 faf5 	bl	8011d0c <acc_radar_engine_a121_is_hibernate>
 800f722:	7b23      	ldrb	r3, [r4, #12]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d1e7      	bne.n	800f6f8 <acc_sensor_prepare+0x48>
 800f728:	2800      	cmp	r0, #0
 800f72a:	d1e5      	bne.n	800f6f8 <acc_sensor_prepare+0x48>
 800f72c:	9700      	str	r7, [sp, #0]
 800f72e:	6923      	ldr	r3, [r4, #16]
 800f730:	1d20      	adds	r0, r4, #4
 800f732:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800f736:	1da2      	adds	r2, r4, #6
 800f738:	9203      	str	r2, [sp, #12]
 800f73a:	68a0      	ldr	r0, [r4, #8]
 800f73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f73e:	4632      	mov	r2, r6
 800f740:	4629      	mov	r1, r5
 800f742:	f002 f983 	bl	8011a4c <acc_radar_engine_a121_prepare>
 800f746:	e7c4      	b.n	800f6d2 <acc_sensor_prepare+0x22>
 800f748:	1337b00e 	.word	0x1337b00e
 800f74c:	200008cc 	.word	0x200008cc
 800f750:	0801a488 	.word	0x0801a488
 800f754:	0801a4a0 	.word	0x0801a4a0
 800f758:	0801a4c4 	.word	0x0801a4c4

0800f75c <acc_sensor_measure>:
 800f75c:	b510      	push	{r4, lr}
 800f75e:	b120      	cbz	r0, 800f76a <acc_sensor_measure+0xe>
 800f760:	4b0e      	ldr	r3, [pc, #56]	@ (800f79c <acc_sensor_measure+0x40>)
 800f762:	6802      	ldr	r2, [r0, #0]
 800f764:	429a      	cmp	r2, r3
 800f766:	4604      	mov	r4, r0
 800f768:	d007      	beq.n	800f77a <acc_sensor_measure+0x1e>
 800f76a:	4b0d      	ldr	r3, [pc, #52]	@ (800f7a0 <acc_sensor_measure+0x44>)
 800f76c:	4a0d      	ldr	r2, [pc, #52]	@ (800f7a4 <acc_sensor_measure+0x48>)
 800f76e:	691b      	ldr	r3, [r3, #16]
 800f770:	490d      	ldr	r1, [pc, #52]	@ (800f7a8 <acc_sensor_measure+0x4c>)
 800f772:	2000      	movs	r0, #0
 800f774:	4798      	blx	r3
 800f776:	2000      	movs	r0, #0
 800f778:	bd10      	pop	{r4, pc}
 800f77a:	7b03      	ldrb	r3, [r0, #12]
 800f77c:	b93b      	cbnz	r3, 800f78e <acc_sensor_measure+0x32>
 800f77e:	6880      	ldr	r0, [r0, #8]
 800f780:	f002 f86e 	bl	8011860 <acc_radar_engine_a121_run_program>
 800f784:	2800      	cmp	r0, #0
 800f786:	d0f7      	beq.n	800f778 <acc_sensor_measure+0x1c>
 800f788:	2301      	movs	r3, #1
 800f78a:	7323      	strb	r3, [r4, #12]
 800f78c:	bd10      	pop	{r4, pc}
 800f78e:	6901      	ldr	r1, [r0, #16]
 800f790:	6880      	ldr	r0, [r0, #8]
 800f792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f796:	f002 b865 	b.w	8011864 <acc_radar_engine_a121_measure>
 800f79a:	bf00      	nop
 800f79c:	1337b00e 	.word	0x1337b00e
 800f7a0:	200008cc 	.word	0x200008cc
 800f7a4:	0801a488 	.word	0x0801a488
 800f7a8:	0801a4a0 	.word	0x0801a4a0

0800f7ac <acc_sensor_read>:
 800f7ac:	b530      	push	{r4, r5, lr}
 800f7ae:	b085      	sub	sp, #20
 800f7b0:	b128      	cbz	r0, 800f7be <acc_sensor_read+0x12>
 800f7b2:	4b19      	ldr	r3, [pc, #100]	@ (800f818 <acc_sensor_read+0x6c>)
 800f7b4:	460d      	mov	r5, r1
 800f7b6:	6801      	ldr	r1, [r0, #0]
 800f7b8:	4299      	cmp	r1, r3
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	d008      	beq.n	800f7d0 <acc_sensor_read+0x24>
 800f7be:	4b17      	ldr	r3, [pc, #92]	@ (800f81c <acc_sensor_read+0x70>)
 800f7c0:	4a17      	ldr	r2, [pc, #92]	@ (800f820 <acc_sensor_read+0x74>)
 800f7c2:	691b      	ldr	r3, [r3, #16]
 800f7c4:	4917      	ldr	r1, [pc, #92]	@ (800f824 <acc_sensor_read+0x78>)
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	4798      	blx	r3
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	b005      	add	sp, #20
 800f7ce:	bd30      	pop	{r4, r5, pc}
 800f7d0:	8883      	ldrh	r3, [r0, #4]
 800f7d2:	88c1      	ldrh	r1, [r0, #6]
 800f7d4:	440b      	add	r3, r1
 800f7d6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800f7da:	d319      	bcc.n	800f810 <acc_sensor_read+0x64>
 800f7dc:	6901      	ldr	r1, [r0, #16]
 800f7de:	6880      	ldr	r0, [r0, #8]
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	f10d 020f 	add.w	r2, sp, #15
 800f7e6:	f88d 300f 	strb.w	r3, [sp, #15]
 800f7ea:	f002 f875 	bl	80118d8 <acc_radar_engine_a121_verify_radar_data_ready>
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	d0ec      	beq.n	800f7cc <acc_sensor_read+0x20>
 800f7f2:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800f7f6:	6920      	ldr	r0, [r4, #16]
 800f7f8:	462a      	mov	r2, r5
 800f7fa:	f002 f8ad 	bl	8011958 <acc_radar_engine_a121_update_buffer_header>
 800f7fe:	9500      	str	r5, [sp, #0]
 800f800:	88e3      	ldrh	r3, [r4, #6]
 800f802:	88a2      	ldrh	r2, [r4, #4]
 800f804:	6921      	ldr	r1, [r4, #16]
 800f806:	68a0      	ldr	r0, [r4, #8]
 800f808:	f002 f844 	bl	8011894 <acc_radar_engine_a121_transfer_data>
 800f80c:	b005      	add	sp, #20
 800f80e:	bd30      	pop	{r4, r5, pc}
 800f810:	4b02      	ldr	r3, [pc, #8]	@ (800f81c <acc_sensor_read+0x70>)
 800f812:	4a05      	ldr	r2, [pc, #20]	@ (800f828 <acc_sensor_read+0x7c>)
 800f814:	e7d5      	b.n	800f7c2 <acc_sensor_read+0x16>
 800f816:	bf00      	nop
 800f818:	1337b00e 	.word	0x1337b00e
 800f81c:	200008cc 	.word	0x200008cc
 800f820:	0801a488 	.word	0x0801a488
 800f824:	0801a4a0 	.word	0x0801a4a0
 800f828:	0801a4d8 	.word	0x0801a4d8

0800f82c <acc_calibration_a121_calibrate>:
 800f82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f830:	461c      	mov	r4, r3
 800f832:	b091      	sub	sp, #68	@ 0x44
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800f838:	4605      	mov	r5, r0
 800f83a:	4688      	mov	r8, r1
 800f83c:	4616      	mov	r6, r2
 800f83e:	2b0a      	cmp	r3, #10
 800f840:	d859      	bhi.n	800f8f6 <acc_calibration_a121_calibrate+0xca>
 800f842:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f846:	0065      	.short	0x0065
 800f848:	00f2009d 	.word	0x00f2009d
 800f84c:	000b015d 	.word	0x000b015d
 800f850:	020701d3 	.word	0x020701d3
 800f854:	029b0266 	.word	0x029b0266
 800f858:	006502d1 	.word	0x006502d1
 800f85c:	f001 fc08 	bl	8011070 <acc_a121_cal_session_ack_program>
 800f860:	2800      	cmp	r0, #0
 800f862:	f000 808b 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800f866:	aa08      	add	r2, sp, #32
 800f868:	4641      	mov	r1, r8
 800f86a:	4628      	mov	r0, r5
 800f86c:	f001 fc52 	bl	8011114 <acc_a121_cal_session_get_4_bba_vga_program_data>
 800f870:	48bd      	ldr	r0, [pc, #756]	@ (800fb68 <acc_calibration_a121_calibrate+0x33c>)
 800f872:	f8df b300 	ldr.w	fp, [pc, #768]	@ 800fb74 <acc_calibration_a121_calibrate+0x348>
 800f876:	4629      	mov	r1, r5
 800f878:	f004 fc52 	bl	8014120 <acc_diagnostic_log_scalar>
 800f87c:	49bb      	ldr	r1, [pc, #748]	@ (800fb6c <acc_calibration_a121_calibrate+0x340>)
 800f87e:	48bc      	ldr	r0, [pc, #752]	@ (800fb70 <acc_calibration_a121_calibrate+0x344>)
 800f880:	f004 fc46 	bl	8014110 <acc_diagnostic_log_array>
 800f884:	9808      	ldr	r0, [sp, #32]
 800f886:	2150      	movs	r1, #80	@ 0x50
 800f888:	f004 fc5a 	bl	8014140 <acc_diagnostic_log_data_i16>
 800f88c:	f107 0a0a 	add.w	sl, r7, #10
 800f890:	f04f 0900 	mov.w	r9, #0
 800f894:	9808      	ldr	r0, [sp, #32]
 800f896:	a905      	add	r1, sp, #20
 800f898:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800f89c:	f000 fcc8 	bl	8010230 <acc_cal_algorithms_bba_cal_ctrl>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	f109 0230 	add.w	r2, r9, #48	@ 0x30
 800f8a6:	48b3      	ldr	r0, [pc, #716]	@ (800fb74 <acc_calibration_a121_calibrate+0x348>)
 800f8a8:	f109 0901 	add.w	r9, r9, #1
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d065      	beq.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800f8b0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800f8b4:	f88b 200d 	strb.w	r2, [fp, #13]
 800f8b8:	f004 fc32 	bl	8014120 <acc_diagnostic_log_scalar>
 800f8bc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f8c0:	f82a 3f02 	strh.w	r3, [sl, #2]!
 800f8c4:	f1b9 0f0a 	cmp.w	r9, #10
 800f8c8:	d1e4      	bne.n	800f894 <acc_calibration_a121_calibrate+0x68>
 800f8ca:	48ab      	ldr	r0, [pc, #684]	@ (800fb78 <acc_calibration_a121_calibrate+0x34c>)
 800f8cc:	f004 fc18 	bl	8014100 <acc_diagnostic_log_set_scope>
 800f8d0:	4baa      	ldr	r3, [pc, #680]	@ (800fb7c <acc_calibration_a121_calibrate+0x350>)
 800f8d2:	9300      	str	r3, [sp, #0]
 800f8d4:	2260      	movs	r2, #96	@ 0x60
 800f8d6:	9201      	str	r2, [sp, #4]
 800f8d8:	4641      	mov	r1, r8
 800f8da:	4632      	mov	r2, r6
 800f8dc:	2300      	movs	r3, #0
 800f8de:	4628      	mov	r0, r5
 800f8e0:	f002 fbc6 	bl	8012070 <acc_sensor_protocol_a121_load_lut>
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	f040 82f7 	bne.w	800fed8 <acc_calibration_a121_calibrate+0x6ac>
 800f8ea:	4ba5      	ldr	r3, [pc, #660]	@ (800fb80 <acc_calibration_a121_calibrate+0x354>)
 800f8ec:	4aa5      	ldr	r2, [pc, #660]	@ (800fb84 <acc_calibration_a121_calibrate+0x358>)
 800f8ee:	691b      	ldr	r3, [r3, #16]
 800f8f0:	49a5      	ldr	r1, [pc, #660]	@ (800fb88 <acc_calibration_a121_calibrate+0x35c>)
 800f8f2:	4798      	blx	r3
 800f8f4:	7823      	ldrb	r3, [r4, #0]
 800f8f6:	49a2      	ldr	r1, [pc, #648]	@ (800fb80 <acc_calibration_a121_calibrate+0x354>)
 800f8f8:	4aa4      	ldr	r2, [pc, #656]	@ (800fb8c <acc_calibration_a121_calibrate+0x360>)
 800f8fa:	690e      	ldr	r6, [r1, #16]
 800f8fc:	49a2      	ldr	r1, [pc, #648]	@ (800fb88 <acc_calibration_a121_calibrate+0x35c>)
 800f8fe:	2000      	movs	r0, #0
 800f900:	4605      	mov	r5, r0
 800f902:	47b0      	blx	r6
 800f904:	462b      	mov	r3, r5
 800f906:	4628      	mov	r0, r5
 800f908:	7023      	strb	r3, [r4, #0]
 800f90a:	b011      	add	sp, #68	@ 0x44
 800f90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f910:	228c      	movs	r2, #140	@ 0x8c
 800f912:	2100      	movs	r1, #0
 800f914:	4638      	mov	r0, r7
 800f916:	f006 f8f3 	bl	8015b00 <memset>
 800f91a:	f001 fd47 	bl	80113ac <acc_rss_integration_get_sensor_reference_frequency>
 800f91e:	ee07 0a90 	vmov	s15, r0
 800f922:	f107 0a80 	add.w	sl, r7, #128	@ 0x80
 800f926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f92a:	4651      	mov	r1, sl
 800f92c:	a808      	add	r0, sp, #32
 800f92e:	edcd 7a08 	vstr	s15, [sp, #32]
 800f932:	f004 fa9f 	bl	8013e74 <acc_cpd_pll_divisors_calculate>
 800f936:	4681      	mov	r9, r0
 800f938:	4895      	ldr	r0, [pc, #596]	@ (800fb90 <acc_calibration_a121_calibrate+0x364>)
 800f93a:	f004 fbe1 	bl	8014100 <acc_diagnostic_log_set_scope>
 800f93e:	488a      	ldr	r0, [pc, #552]	@ (800fb68 <acc_calibration_a121_calibrate+0x33c>)
 800f940:	4629      	mov	r1, r5
 800f942:	f004 fbed 	bl	8014120 <acc_diagnostic_log_scalar>
 800f946:	f8b7 1082 	ldrh.w	r1, [r7, #130]	@ 0x82
 800f94a:	4892      	ldr	r0, [pc, #584]	@ (800fb94 <acc_calibration_a121_calibrate+0x368>)
 800f94c:	f004 fbe8 	bl	8014120 <acc_diagnostic_log_scalar>
 800f950:	f8b7 1084 	ldrh.w	r1, [r7, #132]	@ 0x84
 800f954:	4890      	ldr	r0, [pc, #576]	@ (800fb98 <acc_calibration_a121_calibrate+0x36c>)
 800f956:	f004 fbe3 	bl	8014120 <acc_diagnostic_log_scalar>
 800f95a:	f8b7 1086 	ldrh.w	r1, [r7, #134]	@ 0x86
 800f95e:	488f      	ldr	r0, [pc, #572]	@ (800fb9c <acc_calibration_a121_calibrate+0x370>)
 800f960:	f004 fbde 	bl	8014120 <acc_diagnostic_log_scalar>
 800f964:	488e      	ldr	r0, [pc, #568]	@ (800fba0 <acc_calibration_a121_calibrate+0x374>)
 800f966:	f8b7 1080 	ldrh.w	r1, [r7, #128]	@ 0x80
 800f96a:	f004 fbd9 	bl	8014120 <acc_diagnostic_log_scalar>
 800f96e:	488d      	ldr	r0, [pc, #564]	@ (800fba4 <acc_calibration_a121_calibrate+0x378>)
 800f970:	f004 fbc6 	bl	8014100 <acc_diagnostic_log_set_scope>
 800f974:	f1b9 0f00 	cmp.w	r9, #0
 800f978:	f040 82a2 	bne.w	800fec0 <acc_calibration_a121_calibrate+0x694>
 800f97c:	7823      	ldrb	r3, [r4, #0]
 800f97e:	e7ba      	b.n	800f8f6 <acc_calibration_a121_calibrate+0xca>
 800f980:	f001 fb76 	bl	8011070 <acc_a121_cal_session_ack_program>
 800f984:	2800      	cmp	r0, #0
 800f986:	d0f9      	beq.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800f988:	aa08      	add	r2, sp, #32
 800f98a:	ab05      	add	r3, sp, #20
 800f98c:	e9cd 3200 	strd	r3, r2, [sp]
 800f990:	4641      	mov	r1, r8
 800f992:	ab03      	add	r3, sp, #12
 800f994:	f10d 020e 	add.w	r2, sp, #14
 800f998:	4628      	mov	r0, r5
 800f99a:	f001 fb8b 	bl	80110b4 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>
 800f99e:	4872      	ldr	r0, [pc, #456]	@ (800fb68 <acc_calibration_a121_calibrate+0x33c>)
 800f9a0:	4629      	mov	r1, r5
 800f9a2:	f004 fbbd 	bl	8014120 <acc_diagnostic_log_scalar>
 800f9a6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800f9aa:	487f      	ldr	r0, [pc, #508]	@ (800fba8 <acc_calibration_a121_calibrate+0x37c>)
 800f9ac:	f004 fbb8 	bl	8014120 <acc_diagnostic_log_scalar>
 800f9b0:	496e      	ldr	r1, [pc, #440]	@ (800fb6c <acc_calibration_a121_calibrate+0x340>)
 800f9b2:	487e      	ldr	r0, [pc, #504]	@ (800fbac <acc_calibration_a121_calibrate+0x380>)
 800f9b4:	f004 fbac 	bl	8014110 <acc_diagnostic_log_array>
 800f9b8:	9808      	ldr	r0, [sp, #32]
 800f9ba:	2110      	movs	r1, #16
 800f9bc:	f004 fbb8 	bl	8014130 <acc_diagnostic_log_data_u16>
 800f9c0:	9a08      	ldr	r2, [sp, #32]
 800f9c2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800f9c6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800f9ca:	ab04      	add	r3, sp, #16
 800f9cc:	f000 fad6 	bl	800ff7c <acc_cal_algorithms_pll_cbank>
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	d0d3      	beq.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800f9d4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800f9d8:	f000 fe4e 	bl	8010678 <acc_cal_algorithms_wavelet_duration_p1>
 800f9dc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800f9e0:	4606      	mov	r6, r0
 800f9e2:	4873      	ldr	r0, [pc, #460]	@ (800fbb0 <acc_calibration_a121_calibrate+0x384>)
 800f9e4:	f004 fb9c 	bl	8014120 <acc_diagnostic_log_scalar>
 800f9e8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800f9ec:	4871      	ldr	r0, [pc, #452]	@ (800fbb4 <acc_calibration_a121_calibrate+0x388>)
 800f9ee:	f004 fb97 	bl	8014120 <acc_diagnostic_log_scalar>
 800f9f2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800f9f6:	4870      	ldr	r0, [pc, #448]	@ (800fbb8 <acc_calibration_a121_calibrate+0x38c>)
 800f9f8:	f004 fb92 	bl	8014120 <acc_diagnostic_log_scalar>
 800f9fc:	486f      	ldr	r0, [pc, #444]	@ (800fbbc <acc_calibration_a121_calibrate+0x390>)
 800f9fe:	4631      	mov	r1, r6
 800fa00:	f004 fb8e 	bl	8014120 <acc_diagnostic_log_scalar>
 800fa04:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800fa08:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800fa0c:	803b      	strh	r3, [r7, #0]
 800fa0e:	4628      	mov	r0, r5
 800fa10:	84be      	strh	r6, [r7, #36]	@ 0x24
 800fa12:	8079      	strh	r1, [r7, #2]
 800fa14:	f001 f99c 	bl	8010d50 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>
 800fa18:	4605      	mov	r5, r0
 800fa1a:	2302      	movs	r3, #2
 800fa1c:	2d00      	cmp	r5, #0
 800fa1e:	d0ad      	beq.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800fa20:	4628      	mov	r0, r5
 800fa22:	7023      	strb	r3, [r4, #0]
 800fa24:	b011      	add	sp, #68	@ 0x44
 800fa26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2a:	f001 fb21 	bl	8011070 <acc_a121_cal_session_ack_program>
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d0a4      	beq.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800fa32:	ab08      	add	r3, sp, #32
 800fa34:	aa05      	add	r2, sp, #20
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	4641      	mov	r1, r8
 800fa3a:	ab04      	add	r3, sp, #16
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	f001 fb51 	bl	80110e4 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>
 800fa42:	494a      	ldr	r1, [pc, #296]	@ (800fb6c <acc_calibration_a121_calibrate+0x340>)
 800fa44:	485e      	ldr	r0, [pc, #376]	@ (800fbc0 <acc_calibration_a121_calibrate+0x394>)
 800fa46:	f004 fb63 	bl	8014110 <acc_diagnostic_log_array>
 800fa4a:	9805      	ldr	r0, [sp, #20]
 800fa4c:	2110      	movs	r1, #16
 800fa4e:	f004 fb77 	bl	8014140 <acc_diagnostic_log_data_i16>
 800fa52:	9805      	ldr	r0, [sp, #20]
 800fa54:	a903      	add	r1, sp, #12
 800fa56:	f000 facb 	bl	800fff0 <acc_cal_algorithms_pll_ibias>
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	d08e      	beq.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800fa5e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800fa62:	4858      	ldr	r0, [pc, #352]	@ (800fbc4 <acc_calibration_a121_calibrate+0x398>)
 800fa64:	f004 fb5c 	bl	8014120 <acc_diagnostic_log_scalar>
 800fa68:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800fa6c:	80bb      	strh	r3, [r7, #4]
 800fa6e:	4856      	ldr	r0, [pc, #344]	@ (800fbc8 <acc_calibration_a121_calibrate+0x39c>)
 800fa70:	f004 fb46 	bl	8014100 <acc_diagnostic_log_set_scope>
 800fa74:	483c      	ldr	r0, [pc, #240]	@ (800fb68 <acc_calibration_a121_calibrate+0x33c>)
 800fa76:	4629      	mov	r1, r5
 800fa78:	f004 fb52 	bl	8014120 <acc_diagnostic_log_scalar>
 800fa7c:	493b      	ldr	r1, [pc, #236]	@ (800fb6c <acc_calibration_a121_calibrate+0x340>)
 800fa7e:	4853      	ldr	r0, [pc, #332]	@ (800fbcc <acc_calibration_a121_calibrate+0x3a0>)
 800fa80:	f004 fb46 	bl	8014110 <acc_diagnostic_log_array>
 800fa84:	9808      	ldr	r0, [sp, #32]
 800fa86:	2130      	movs	r1, #48	@ 0x30
 800fa88:	f004 fb52 	bl	8014130 <acc_diagnostic_log_data_u16>
 800fa8c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800fa90:	484f      	ldr	r0, [pc, #316]	@ (800fbd0 <acc_calibration_a121_calibrate+0x3a4>)
 800fa92:	f004 fb45 	bl	8014120 <acc_diagnostic_log_scalar>
 800fa96:	9908      	ldr	r1, [sp, #32]
 800fa98:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 800fa9c:	f10d 020e 	add.w	r2, sp, #14
 800faa0:	f000 faf0 	bl	8010084 <acc_cal_algorithms_vfast2_ldo>
 800faa4:	2800      	cmp	r0, #0
 800faa6:	f43f af69 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800faaa:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800faae:	4849      	ldr	r0, [pc, #292]	@ (800fbd4 <acc_calibration_a121_calibrate+0x3a8>)
 800fab0:	f004 fb36 	bl	8014120 <acc_diagnostic_log_scalar>
 800fab4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800fab8:	4847      	ldr	r0, [pc, #284]	@ (800fbd8 <acc_calibration_a121_calibrate+0x3ac>)
 800faba:	817b      	strh	r3, [r7, #10]
 800fabc:	f004 fb20 	bl	8014100 <acc_diagnostic_log_set_scope>
 800fac0:	2001      	movs	r0, #1
 800fac2:	ab02      	add	r3, sp, #8
 800fac4:	e9cd 3000 	strd	r3, r0, [sp]
 800fac8:	4632      	mov	r2, r6
 800faca:	4641      	mov	r1, r8
 800facc:	f44f 567e 	mov.w	r6, #16256	@ 0x3f80
 800fad0:	2300      	movs	r3, #0
 800fad2:	4628      	mov	r0, r5
 800fad4:	f8ad 6008 	strh.w	r6, [sp, #8]
 800fad8:	f002 faca 	bl	8012070 <acc_sensor_protocol_a121_load_lut>
 800fadc:	b920      	cbnz	r0, 800fae8 <acc_calibration_a121_calibrate+0x2bc>
 800fade:	4b28      	ldr	r3, [pc, #160]	@ (800fb80 <acc_calibration_a121_calibrate+0x354>)
 800fae0:	4a3e      	ldr	r2, [pc, #248]	@ (800fbdc <acc_calibration_a121_calibrate+0x3b0>)
 800fae2:	691b      	ldr	r3, [r3, #16]
 800fae4:	4928      	ldr	r1, [pc, #160]	@ (800fb88 <acc_calibration_a121_calibrate+0x35c>)
 800fae6:	4798      	blx	r3
 800fae8:	4628      	mov	r0, r5
 800faea:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800faee:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800faf2:	f001 f94b 	bl	8010d8c <acc_a121_cal_session_start_3_delay_cbank_program>
 800faf6:	4605      	mov	r5, r0
 800faf8:	2303      	movs	r3, #3
 800fafa:	2d00      	cmp	r5, #0
 800fafc:	d190      	bne.n	800fa20 <acc_calibration_a121_calibrate+0x1f4>
 800fafe:	e73d      	b.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800fb00:	2300      	movs	r3, #0
 800fb02:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fb06:	f001 fab3 	bl	8011070 <acc_a121_cal_session_ack_program>
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	f43f af36 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fb10:	aa08      	add	r2, sp, #32
 800fb12:	4641      	mov	r1, r8
 800fb14:	4628      	mov	r0, r5
 800fb16:	f001 faf5 	bl	8011104 <acc_a121_cal_session_get_3_delay_cbank_program_data>
 800fb1a:	4813      	ldr	r0, [pc, #76]	@ (800fb68 <acc_calibration_a121_calibrate+0x33c>)
 800fb1c:	4629      	mov	r1, r5
 800fb1e:	f004 faff 	bl	8014120 <acc_diagnostic_log_scalar>
 800fb22:	4912      	ldr	r1, [pc, #72]	@ (800fb6c <acc_calibration_a121_calibrate+0x340>)
 800fb24:	482e      	ldr	r0, [pc, #184]	@ (800fbe0 <acc_calibration_a121_calibrate+0x3b4>)
 800fb26:	f004 faf3 	bl	8014110 <acc_diagnostic_log_array>
 800fb2a:	9808      	ldr	r0, [sp, #32]
 800fb2c:	2120      	movs	r1, #32
 800fb2e:	f004 fb07 	bl	8014140 <acc_diagnostic_log_data_i16>
 800fb32:	9808      	ldr	r0, [sp, #32]
 800fb34:	a905      	add	r1, sp, #20
 800fb36:	f000 faf1 	bl	801011c <acc_cal_algorithms_delay_cbank>
 800fb3a:	2800      	cmp	r0, #0
 800fb3c:	f43f af1e 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fb40:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800fb44:	4827      	ldr	r0, [pc, #156]	@ (800fbe4 <acc_calibration_a121_calibrate+0x3b8>)
 800fb46:	f004 faeb 	bl	8014120 <acc_diagnostic_log_scalar>
 800fb4a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800fb4e:	80fb      	strh	r3, [r7, #6]
 800fb50:	4825      	ldr	r0, [pc, #148]	@ (800fbe8 <acc_calibration_a121_calibrate+0x3bc>)
 800fb52:	f004 fad5 	bl	8014100 <acc_diagnostic_log_set_scope>
 800fb56:	4628      	mov	r0, r5
 800fb58:	f001 f946 	bl	8010de8 <acc_a121_cal_session_start_4_bba_vga_program>
 800fb5c:	4605      	mov	r5, r0
 800fb5e:	2304      	movs	r3, #4
 800fb60:	2d00      	cmp	r5, #0
 800fb62:	f47f af5d 	bne.w	800fa20 <acc_calibration_a121_calibrate+0x1f4>
 800fb66:	e709      	b.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800fb68:	0801a4f0 	.word	0x0801a4f0
 800fb6c:	0801ac70 	.word	0x0801ac70
 800fb70:	0801a69c 	.word	0x0801a69c
 800fb74:	2000000c 	.word	0x2000000c
 800fb78:	0801a6b4 	.word	0x0801a6b4
 800fb7c:	0801cb78 	.word	0x0801cb78
 800fb80:	200008cc 	.word	0x200008cc
 800fb84:	0801a6cc 	.word	0x0801a6cc
 800fb88:	0801a644 	.word	0x0801a644
 800fb8c:	0801a96c 	.word	0x0801a96c
 800fb90:	0801b2b0 	.word	0x0801b2b0
 800fb94:	0801a4fc 	.word	0x0801a4fc
 800fb98:	0801a50c 	.word	0x0801a50c
 800fb9c:	0801a518 	.word	0x0801a518
 800fba0:	0801a524 	.word	0x0801a524
 800fba4:	0801a534 	.word	0x0801a534
 800fba8:	0801a544 	.word	0x0801a544
 800fbac:	0801a550 	.word	0x0801a550
 800fbb0:	0801a56c 	.word	0x0801a56c
 800fbb4:	0801a578 	.word	0x0801a578
 800fbb8:	0801a580 	.word	0x0801a580
 800fbbc:	0801a58c 	.word	0x0801a58c
 800fbc0:	0801a598 	.word	0x0801a598
 800fbc4:	0801a5b8 	.word	0x0801a5b8
 800fbc8:	0801a5c4 	.word	0x0801a5c4
 800fbcc:	0801a5dc 	.word	0x0801a5dc
 800fbd0:	0801a5f0 	.word	0x0801a5f0
 800fbd4:	0801a5fc 	.word	0x0801a5fc
 800fbd8:	0801a608 	.word	0x0801a608
 800fbdc:	0801a620 	.word	0x0801a620
 800fbe0:	0801a658 	.word	0x0801a658
 800fbe4:	0801a67c 	.word	0x0801a67c
 800fbe8:	0801a688 	.word	0x0801a688
 800fbec:	f001 fa40 	bl	8011070 <acc_a121_cal_session_ack_program>
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	f43f aec3 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fbf6:	aa08      	add	r2, sp, #32
 800fbf8:	4641      	mov	r1, r8
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	f001 fa92 	bl	8011124 <acc_a121_cal_session_get_5_area_index_program_data>
 800fc00:	49bb      	ldr	r1, [pc, #748]	@ (800fef0 <acc_calibration_a121_calibrate+0x6c4>)
 800fc02:	48bc      	ldr	r0, [pc, #752]	@ (800fef4 <acc_calibration_a121_calibrate+0x6c8>)
 800fc04:	f004 fa84 	bl	8014110 <acc_diagnostic_log_array>
 800fc08:	9808      	ldr	r0, [sp, #32]
 800fc0a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800fc0e:	f004 fa97 	bl	8014140 <acc_diagnostic_log_data_i16>
 800fc12:	9808      	ldr	r0, [sp, #32]
 800fc14:	a905      	add	r1, sp, #20
 800fc16:	f000 fb7b 	bl	8010310 <acc_cal_algorithms_area_index>
 800fc1a:	2800      	cmp	r0, #0
 800fc1c:	f43f aeae 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fc20:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800fc24:	48b4      	ldr	r0, [pc, #720]	@ (800fef8 <acc_calibration_a121_calibrate+0x6cc>)
 800fc26:	f004 fa7b 	bl	8014120 <acc_diagnostic_log_scalar>
 800fc2a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800fc2e:	813b      	strh	r3, [r7, #8]
 800fc30:	48b2      	ldr	r0, [pc, #712]	@ (800fefc <acc_calibration_a121_calibrate+0x6d0>)
 800fc32:	f004 fa65 	bl	8014100 <acc_diagnostic_log_set_scope>
 800fc36:	8938      	ldrh	r0, [r7, #8]
 800fc38:	aa08      	add	r2, sp, #32
 800fc3a:	2160      	movs	r1, #96	@ 0x60
 800fc3c:	f004 fa00 	bl	8014040 <acc_dll_calculate_area_settings>
 800fc40:	4628      	mov	r0, r5
 800fc42:	a908      	add	r1, sp, #32
 800fc44:	f001 f924 	bl	8010e90 <acc_a121_cal_session_start_6_tx_freq_program>
 800fc48:	4605      	mov	r5, r0
 800fc4a:	2306      	movs	r3, #6
 800fc4c:	2d00      	cmp	r5, #0
 800fc4e:	f47f aee7 	bne.w	800fa20 <acc_calibration_a121_calibrate+0x1f4>
 800fc52:	e693      	b.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800fc54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc58:	f8ad 3010 	strh.w	r3, [sp, #16]
 800fc5c:	f001 fa08 	bl	8011070 <acc_a121_cal_session_ack_program>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	f43f ae8b 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fc66:	f001 fba1 	bl	80113ac <acc_rss_integration_get_sensor_reference_frequency>
 800fc6a:	4ea5      	ldr	r6, [pc, #660]	@ (800ff00 <acc_calibration_a121_calibrate+0x6d4>)
 800fc6c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800fc70:	f8df 92ec 	ldr.w	r9, [pc, #748]	@ 800ff60 <acc_calibration_a121_calibrate+0x734>
 800fc74:	fba6 2600 	umull	r2, r6, r6, r0
 800fc78:	4641      	mov	r1, r8
 800fc7a:	aa05      	add	r2, sp, #20
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	09b6      	lsrs	r6, r6, #6
 800fc80:	fb06 f603 	mul.w	r6, r6, r3
 800fc84:	f001 fa58 	bl	8011138 <acc_a121_cal_session_get_6_tx_freq_program_data>
 800fc88:	4999      	ldr	r1, [pc, #612]	@ (800fef0 <acc_calibration_a121_calibrate+0x6c4>)
 800fc8a:	489e      	ldr	r0, [pc, #632]	@ (800ff04 <acc_calibration_a121_calibrate+0x6d8>)
 800fc8c:	f004 fa40 	bl	8014110 <acc_diagnostic_log_array>
 800fc90:	9805      	ldr	r0, [sp, #20]
 800fc92:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800fc96:	f004 fa53 	bl	8014140 <acc_diagnostic_log_data_i16>
 800fc9a:	ab04      	add	r3, sp, #16
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	9300      	str	r3, [sp, #0]
 800fca0:	4a99      	ldr	r2, [pc, #612]	@ (800ff08 <acc_calibration_a121_calibrate+0x6dc>)
 800fca2:	9905      	ldr	r1, [sp, #20]
 800fca4:	ab08      	add	r3, sp, #32
 800fca6:	f000 fd27 	bl	80106f8 <acc_cal_algorithms_tx_freq_ctrl>
 800fcaa:	46cb      	mov	fp, r9
 800fcac:	4682      	mov	sl, r0
 800fcae:	f10d 081c 	add.w	r8, sp, #28
 800fcb2:	2630      	movs	r6, #48	@ 0x30
 800fcb4:	f889 600c 	strb.w	r6, [r9, #12]
 800fcb8:	3601      	adds	r6, #1
 800fcba:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800fcbe:	4658      	mov	r0, fp
 800fcc0:	b2f6      	uxtb	r6, r6
 800fcc2:	f004 fa2d 	bl	8014120 <acc_diagnostic_log_scalar>
 800fcc6:	2e38      	cmp	r6, #56	@ 0x38
 800fcc8:	d1f4      	bne.n	800fcb4 <acc_calibration_a121_calibrate+0x488>
 800fcca:	f1ba 0f00 	cmp.w	sl, #0
 800fcce:	f43f ae55 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fcd2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800fcd6:	488d      	ldr	r0, [pc, #564]	@ (800ff0c <acc_calibration_a121_calibrate+0x6e0>)
 800fcd8:	f004 fa22 	bl	8014120 <acc_diagnostic_log_scalar>
 800fcdc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800fce0:	488b      	ldr	r0, [pc, #556]	@ (800ff10 <acc_calibration_a121_calibrate+0x6e4>)
 800fce2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800fce4:	f004 fa0c 	bl	8014100 <acc_diagnostic_log_set_scope>
 800fce8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800fcec:	4628      	mov	r0, r5
 800fcee:	f001 f95f 	bl	8010fb0 <acc_a121_cal_session_start_7_rx_freq_program>
 800fcf2:	2800      	cmp	r0, #0
 800fcf4:	f43f ae42 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fcf8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800fcfc:	9805      	ldr	r0, [sp, #20]
 800fcfe:	2201      	movs	r2, #1
 800fd00:	2100      	movs	r1, #0
 800fd02:	f000 fbcd 	bl	80104a0 <acc_cal_algorithms_iq_imbalance>
 800fd06:	4605      	mov	r5, r0
 800fd08:	2307      	movs	r3, #7
 800fd0a:	2d00      	cmp	r5, #0
 800fd0c:	f47f ae88 	bne.w	800fa20 <acc_calibration_a121_calibrate+0x1f4>
 800fd10:	e634      	b.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800fd12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd16:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fd1a:	f001 f9a9 	bl	8011070 <acc_a121_cal_session_ack_program>
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	f43f ae2c 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fd24:	aa08      	add	r2, sp, #32
 800fd26:	4641      	mov	r1, r8
 800fd28:	4628      	mov	r0, r5
 800fd2a:	f001 fa07 	bl	801113c <acc_a121_cal_session_get_7_rx_freq_program_data>
 800fd2e:	4970      	ldr	r1, [pc, #448]	@ (800fef0 <acc_calibration_a121_calibrate+0x6c4>)
 800fd30:	4878      	ldr	r0, [pc, #480]	@ (800ff14 <acc_calibration_a121_calibrate+0x6e8>)
 800fd32:	f004 f9ed 	bl	8014110 <acc_diagnostic_log_array>
 800fd36:	9808      	ldr	r0, [sp, #32]
 800fd38:	2110      	movs	r1, #16
 800fd3a:	f004 fa01 	bl	8014140 <acc_diagnostic_log_data_i16>
 800fd3e:	9808      	ldr	r0, [sp, #32]
 800fd40:	aa05      	add	r2, sp, #20
 800fd42:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800fd46:	f000 fc55 	bl	80105f4 <acc_cal_algorithms_rx_freq_ctrl>
 800fd4a:	2800      	cmp	r0, #0
 800fd4c:	f43f ae16 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fd50:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800fd54:	4870      	ldr	r0, [pc, #448]	@ (800ff18 <acc_calibration_a121_calibrate+0x6ec>)
 800fd56:	f004 f9e3 	bl	8014120 <acc_diagnostic_log_scalar>
 800fd5a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800fd5e:	843b      	strh	r3, [r7, #32]
 800fd60:	486e      	ldr	r0, [pc, #440]	@ (800ff1c <acc_calibration_a121_calibrate+0x6f0>)
 800fd62:	f004 f9cd 	bl	8014100 <acc_diagnostic_log_set_scope>
 800fd66:	4628      	mov	r0, r5
 800fd68:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800fd6c:	f001 f93e 	bl	8010fec <acc_a121_cal_session_start_8_phase_enhancement_program>
 800fd70:	4605      	mov	r5, r0
 800fd72:	2308      	movs	r3, #8
 800fd74:	2d00      	cmp	r5, #0
 800fd76:	f47f ae53 	bne.w	800fa20 <acc_calibration_a121_calibrate+0x1f4>
 800fd7a:	e5ff      	b.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800fd7c:	f001 f978 	bl	8011070 <acc_a121_cal_session_ack_program>
 800fd80:	2800      	cmp	r0, #0
 800fd82:	f43f adfb 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fd86:	aa08      	add	r2, sp, #32
 800fd88:	4641      	mov	r1, r8
 800fd8a:	4628      	mov	r0, r5
 800fd8c:	f001 f9de 	bl	801114c <acc_a121_cal_session_get_8_phase_enhancement_program_data>
 800fd90:	4957      	ldr	r1, [pc, #348]	@ (800fef0 <acc_calibration_a121_calibrate+0x6c4>)
 800fd92:	4863      	ldr	r0, [pc, #396]	@ (800ff20 <acc_calibration_a121_calibrate+0x6f4>)
 800fd94:	f004 f9bc 	bl	8014110 <acc_diagnostic_log_array>
 800fd98:	f107 0626 	add.w	r6, r7, #38	@ 0x26
 800fd9c:	9808      	ldr	r0, [sp, #32]
 800fd9e:	2160      	movs	r1, #96	@ 0x60
 800fda0:	f004 f9ce 	bl	8014140 <acc_diagnostic_log_data_i16>
 800fda4:	9808      	ldr	r0, [sp, #32]
 800fda6:	4631      	mov	r1, r6
 800fda8:	f107 0256 	add.w	r2, r7, #86	@ 0x56
 800fdac:	f000 fd34 	bl	8010818 <acc_cal_algorithms_phase_enhancement>
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	f43f ade3 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fdb6:	494e      	ldr	r1, [pc, #312]	@ (800fef0 <acc_calibration_a121_calibrate+0x6c4>)
 800fdb8:	485a      	ldr	r0, [pc, #360]	@ (800ff24 <acc_calibration_a121_calibrate+0x6f8>)
 800fdba:	f004 f9a9 	bl	8014110 <acc_diagnostic_log_array>
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	2118      	movs	r1, #24
 800fdc2:	f004 f9bd 	bl	8014140 <acc_diagnostic_log_data_i16>
 800fdc6:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	@ 0x56
 800fdca:	4857      	ldr	r0, [pc, #348]	@ (800ff28 <acc_calibration_a121_calibrate+0x6fc>)
 800fdcc:	f004 f9a8 	bl	8014120 <acc_diagnostic_log_scalar>
 800fdd0:	4856      	ldr	r0, [pc, #344]	@ (800ff2c <acc_calibration_a121_calibrate+0x700>)
 800fdd2:	f004 f995 	bl	8014100 <acc_diagnostic_log_set_scope>
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	f001 f946 	bl	8011068 <acc_a121_cal_session_start_9_pulseshaper_program>
 800fddc:	4605      	mov	r5, r0
 800fdde:	2309      	movs	r3, #9
 800fde0:	2d00      	cmp	r5, #0
 800fde2:	f47f ae1d 	bne.w	800fa20 <acc_calibration_a121_calibrate+0x1f4>
 800fde6:	e5c9      	b.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800fde8:	f001 f942 	bl	8011070 <acc_a121_cal_session_ack_program>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	f43f adc5 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fdf2:	aa08      	add	r2, sp, #32
 800fdf4:	ab04      	add	r3, sp, #16
 800fdf6:	4641      	mov	r1, r8
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	f001 f9af 	bl	801115c <acc_a121_cal_session_get_9_pulseshaper_program_data>
 800fdfe:	493c      	ldr	r1, [pc, #240]	@ (800fef0 <acc_calibration_a121_calibrate+0x6c4>)
 800fe00:	484b      	ldr	r0, [pc, #300]	@ (800ff30 <acc_calibration_a121_calibrate+0x704>)
 800fe02:	f004 f985 	bl	8014110 <acc_diagnostic_log_array>
 800fe06:	9808      	ldr	r0, [sp, #32]
 800fe08:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800fe0c:	f004 f990 	bl	8014130 <acc_diagnostic_log_data_u16>
 800fe10:	9808      	ldr	r0, [sp, #32]
 800fe12:	a905      	add	r1, sp, #20
 800fe14:	f000 fe58 	bl	8010ac8 <acc_cal_algorithms_pulseshaper_wavelet>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	f43f adaf 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fe1e:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 800fe22:	9b07      	ldr	r3, [sp, #28]
 800fe24:	667b      	str	r3, [r7, #100]	@ 0x64
 800fe26:	e9c7 2117 	strd	r2, r1, [r7, #92]	@ 0x5c
 800fe2a:	4842      	ldr	r0, [pc, #264]	@ (800ff34 <acc_calibration_a121_calibrate+0x708>)
 800fe2c:	f004 f978 	bl	8014120 <acc_diagnostic_log_scalar>
 800fe30:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fe32:	4841      	ldr	r0, [pc, #260]	@ (800ff38 <acc_calibration_a121_calibrate+0x70c>)
 800fe34:	f004 f974 	bl	8014120 <acc_diagnostic_log_scalar>
 800fe38:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800fe3a:	4840      	ldr	r0, [pc, #256]	@ (800ff3c <acc_calibration_a121_calibrate+0x710>)
 800fe3c:	f004 f970 	bl	8014120 <acc_diagnostic_log_scalar>
 800fe40:	483f      	ldr	r0, [pc, #252]	@ (800ff40 <acc_calibration_a121_calibrate+0x714>)
 800fe42:	f004 f95d 	bl	8014100 <acc_diagnostic_log_set_scope>
 800fe46:	492a      	ldr	r1, [pc, #168]	@ (800fef0 <acc_calibration_a121_calibrate+0x6c4>)
 800fe48:	483e      	ldr	r0, [pc, #248]	@ (800ff44 <acc_calibration_a121_calibrate+0x718>)
 800fe4a:	f004 f961 	bl	8014110 <acc_diagnostic_log_array>
 800fe4e:	9804      	ldr	r0, [sp, #16]
 800fe50:	f44f 7158 	mov.w	r1, #864	@ 0x360
 800fe54:	f004 f96c 	bl	8014130 <acc_diagnostic_log_data_u16>
 800fe58:	9804      	ldr	r0, [sp, #16]
 800fe5a:	a908      	add	r1, sp, #32
 800fe5c:	f000 fe7c 	bl	8010b58 <acc_cal_algorithms_pulseshaper_supply>
 800fe60:	4605      	mov	r5, r0
 800fe62:	2800      	cmp	r0, #0
 800fe64:	f43f ad8a 	beq.w	800f97c <acc_calibration_a121_calibrate+0x150>
 800fe68:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800fe6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe6e:	66b9      	str	r1, [r7, #104]	@ 0x68
 800fe70:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fe72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe74:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fe76:	673b      	str	r3, [r7, #112]	@ 0x70
 800fe78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fe7c:	e9c7 121d 	strd	r1, r2, [r7, #116]	@ 0x74
 800fe80:	4638      	mov	r0, r7
 800fe82:	218c      	movs	r1, #140	@ 0x8c
 800fe84:	f003 fcee 	bl	8013864 <acc_alg_basic_util_crc32>
 800fe88:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fe8a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800fe8e:	482e      	ldr	r0, [pc, #184]	@ (800ff48 <acc_calibration_a121_calibrate+0x71c>)
 800fe90:	f004 f946 	bl	8014120 <acc_diagnostic_log_scalar>
 800fe94:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fe96:	482d      	ldr	r0, [pc, #180]	@ (800ff4c <acc_calibration_a121_calibrate+0x720>)
 800fe98:	f004 f942 	bl	8014120 <acc_diagnostic_log_scalar>
 800fe9c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800fe9e:	482c      	ldr	r0, [pc, #176]	@ (800ff50 <acc_calibration_a121_calibrate+0x724>)
 800fea0:	f004 f93e 	bl	8014120 <acc_diagnostic_log_scalar>
 800fea4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800fea6:	482b      	ldr	r0, [pc, #172]	@ (800ff54 <acc_calibration_a121_calibrate+0x728>)
 800fea8:	f004 f93a 	bl	8014120 <acc_diagnostic_log_scalar>
 800feac:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800feae:	482a      	ldr	r0, [pc, #168]	@ (800ff58 <acc_calibration_a121_calibrate+0x72c>)
 800feb0:	f004 f936 	bl	8014120 <acc_diagnostic_log_scalar>
 800feb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800feb6:	4829      	ldr	r0, [pc, #164]	@ (800ff5c <acc_calibration_a121_calibrate+0x730>)
 800feb8:	f004 f932 	bl	8014120 <acc_diagnostic_log_scalar>
 800febc:	230a      	movs	r3, #10
 800febe:	e522      	b.n	800f906 <acc_calibration_a121_calibrate+0xda>
 800fec0:	4653      	mov	r3, sl
 800fec2:	4628      	mov	r0, r5
 800fec4:	4632      	mov	r2, r6
 800fec6:	4641      	mov	r1, r8
 800fec8:	f000 feca 	bl	8010c60 <acc_a121_cal_session_start_1_pll_cbank_temp_program>
 800fecc:	4605      	mov	r5, r0
 800fece:	2301      	movs	r3, #1
 800fed0:	2d00      	cmp	r5, #0
 800fed2:	f47f ada5 	bne.w	800fa20 <acc_calibration_a121_calibrate+0x1f4>
 800fed6:	e551      	b.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800fed8:	4628      	mov	r0, r5
 800feda:	88fa      	ldrh	r2, [r7, #6]
 800fedc:	f107 010c 	add.w	r1, r7, #12
 800fee0:	f000 ff86 	bl	8010df0 <acc_a121_cal_session_start_5_area_index_program>
 800fee4:	4605      	mov	r5, r0
 800fee6:	2305      	movs	r3, #5
 800fee8:	2d00      	cmp	r5, #0
 800feea:	f47f ad99 	bne.w	800fa20 <acc_calibration_a121_calibrate+0x1f4>
 800feee:	e545      	b.n	800f97c <acc_calibration_a121_calibrate+0x150>
 800fef0:	0801ac70 	.word	0x0801ac70
 800fef4:	0801a6f8 	.word	0x0801a6f8
 800fef8:	0801a71c 	.word	0x0801a71c
 800fefc:	0801a728 	.word	0x0801a728
 800ff00:	10624dd3 	.word	0x10624dd3
 800ff04:	0801a744 	.word	0x0801a744
 800ff08:	039b2820 	.word	0x039b2820
 800ff0c:	0801a768 	.word	0x0801a768
 800ff10:	0801a778 	.word	0x0801a778
 800ff14:	0801a794 	.word	0x0801a794
 800ff18:	0801a7b8 	.word	0x0801a7b8
 800ff1c:	0801a7c8 	.word	0x0801a7c8
 800ff20:	0801a7e8 	.word	0x0801a7e8
 800ff24:	0801a814 	.word	0x0801a814
 800ff28:	0801a840 	.word	0x0801a840
 800ff2c:	0801a85c 	.word	0x0801a85c
 800ff30:	0801a874 	.word	0x0801a874
 800ff34:	0801a888 	.word	0x0801a888
 800ff38:	0801a89c 	.word	0x0801a89c
 800ff3c:	0801a8b0 	.word	0x0801a8b0
 800ff40:	0801a8c0 	.word	0x0801a8c0
 800ff44:	0801a8d8 	.word	0x0801a8d8
 800ff48:	0801a8ec 	.word	0x0801a8ec
 800ff4c:	0801a900 	.word	0x0801a900
 800ff50:	0801a914 	.word	0x0801a914
 800ff54:	0801a928 	.word	0x0801a928
 800ff58:	0801a93c 	.word	0x0801a93c
 800ff5c:	0801a954 	.word	0x0801a954
 800ff60:	2000001c 	.word	0x2000001c

0800ff64 <acc_calibration_a121_validate_calibration>:
 800ff64:	b510      	push	{r4, lr}
 800ff66:	218c      	movs	r1, #140	@ 0x8c
 800ff68:	4604      	mov	r4, r0
 800ff6a:	f003 fc7b 	bl	8013864 <acc_alg_basic_util_crc32>
 800ff6e:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800ff72:	1a18      	subs	r0, r3, r0
 800ff74:	fab0 f080 	clz	r0, r0
 800ff78:	0940      	lsrs	r0, r0, #5
 800ff7a:	bd10      	pop	{r4, pc}

0800ff7c <acc_cal_algorithms_pll_cbank>:
 800ff7c:	b4f0      	push	{r4, r5, r6, r7}
 800ff7e:	2400      	movs	r4, #0
 800ff80:	46a4      	mov	ip, r4
 800ff82:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800ff86:	fa40 f504 	asr.w	r5, r0, r4
 800ff8a:	07ed      	lsls	r5, r5, #31
 800ff8c:	b2a6      	uxth	r6, r4
 800ff8e:	d50a      	bpl.n	800ffa6 <acc_cal_algorithms_pll_cbank+0x2a>
 800ff90:	f832 5014 	ldrh.w	r5, [r2, r4, lsl #1]
 800ff94:	1a6d      	subs	r5, r5, r1
 800ff96:	2d00      	cmp	r5, #0
 800ff98:	bfb8      	it	lt
 800ff9a:	426d      	neglt	r5, r5
 800ff9c:	b2ad      	uxth	r5, r5
 800ff9e:	42bd      	cmp	r5, r7
 800ffa0:	bf3c      	itt	cc
 800ffa2:	462f      	movcc	r7, r5
 800ffa4:	46b4      	movcc	ip, r6
 800ffa6:	3401      	adds	r4, #1
 800ffa8:	2c10      	cmp	r4, #16
 800ffaa:	d1ec      	bne.n	800ff86 <acc_cal_algorithms_pll_cbank+0xa>
 800ffac:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ffb0:	290d      	cmp	r1, #13
 800ffb2:	d80c      	bhi.n	800ffce <acc_cal_algorithms_pll_cbank+0x52>
 800ffb4:	f10c 4100 	add.w	r1, ip, #2147483648	@ 0x80000000
 800ffb8:	3901      	subs	r1, #1
 800ffba:	eb02 0541 	add.w	r5, r2, r1, lsl #1
 800ffbe:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800ffc2:	8869      	ldrh	r1, [r5, #2]
 800ffc4:	f241 3487 	movw	r4, #4999	@ 0x1387
 800ffc8:	1a52      	subs	r2, r2, r1
 800ffca:	42a2      	cmp	r2, r4
 800ffcc:	dc02      	bgt.n	800ffd4 <acc_cal_algorithms_pll_cbank+0x58>
 800ffce:	2000      	movs	r0, #0
 800ffd0:	bcf0      	pop	{r4, r5, r6, r7}
 800ffd2:	4770      	bx	lr
 800ffd4:	88aa      	ldrh	r2, [r5, #4]
 800ffd6:	1a89      	subs	r1, r1, r2
 800ffd8:	42a1      	cmp	r1, r4
 800ffda:	ddf8      	ble.n	800ffce <acc_cal_algorithms_pll_cbank+0x52>
 800ffdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ffe0:	4290      	cmp	r0, r2
 800ffe2:	d0f4      	beq.n	800ffce <acc_cal_algorithms_pll_cbank+0x52>
 800ffe4:	2001      	movs	r0, #1
 800ffe6:	bcf0      	pop	{r4, r5, r6, r7}
 800ffe8:	f8a3 c000 	strh.w	ip, [r3]
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop

0800fff0 <acc_cal_algorithms_pll_ibias>:
 800fff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fff4:	2400      	movs	r4, #0
 800fff6:	f1a0 0c02 	sub.w	ip, r0, #2
 800fffa:	4625      	mov	r5, r4
 800fffc:	4627      	mov	r7, r4
 800fffe:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8010002:	e01b      	b.n	801003c <acc_cal_algorithms_pll_ibias+0x4c>
 8010004:	f930 8014 	ldrsh.w	r8, [r0, r4, lsl #1]
 8010008:	f93c a014 	ldrsh.w	sl, [ip, r4, lsl #1]
 801000c:	f508 727a 	add.w	r2, r8, #1000	@ 0x3e8
 8010010:	eba8 080a 	sub.w	r8, r8, sl
 8010014:	4598      	cmp	r8, r3
 8010016:	db30      	blt.n	801007a <acc_cal_algorithms_pll_ibias+0x8a>
 8010018:	45c8      	cmp	r8, r9
 801001a:	dc2e      	bgt.n	801007a <acc_cal_algorithms_pll_ibias+0x8a>
 801001c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8010020:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8010024:	b29b      	uxth	r3, r3
 8010026:	42b3      	cmp	r3, r6
 8010028:	d204      	bcs.n	8010034 <acc_cal_algorithms_pll_ibias+0x44>
 801002a:	ea4f 058e 	mov.w	r5, lr, lsl #2
 801002e:	461e      	mov	r6, r3
 8010030:	b2ad      	uxth	r5, r5
 8010032:	2701      	movs	r7, #1
 8010034:	f1be 0f0f 	cmp.w	lr, #15
 8010038:	d018      	beq.n	801006c <acc_cal_algorithms_pll_ibias+0x7c>
 801003a:	3401      	adds	r4, #1
 801003c:	1e63      	subs	r3, r4, #1
 801003e:	fb03 f303 	mul.w	r3, r3, r3
 8010042:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8010046:	005a      	lsls	r2, r3, #1
 8010048:	f502 7916 	add.w	r9, r2, #600	@ 0x258
 801004c:	3bc8      	subs	r3, #200	@ 0xc8
 801004e:	fa1f fe84 	uxth.w	lr, r4
 8010052:	2c00      	cmp	r4, #0
 8010054:	d1d6      	bne.n	8010004 <acc_cal_algorithms_pll_ibias+0x14>
 8010056:	f9b0 3000 	ldrsh.w	r3, [r0]
 801005a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801005e:	2b00      	cmp	r3, #0
 8010060:	bfb8      	it	lt
 8010062:	425b      	neglt	r3, r3
 8010064:	b29b      	uxth	r3, r3
 8010066:	42b3      	cmp	r3, r6
 8010068:	d3df      	bcc.n	801002a <acc_cal_algorithms_pll_ibias+0x3a>
 801006a:	e7e6      	b.n	801003a <acc_cal_algorithms_pll_ibias+0x4a>
 801006c:	b117      	cbz	r7, 8010074 <acc_cal_algorithms_pll_ibias+0x84>
 801006e:	f085 0530 	eor.w	r5, r5, #48	@ 0x30
 8010072:	800d      	strh	r5, [r1, #0]
 8010074:	4638      	mov	r0, r7
 8010076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801007a:	2700      	movs	r7, #0
 801007c:	4638      	mov	r0, r7
 801007e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010082:	bf00      	nop

08010084 <acc_cal_algorithms_vfast2_ldo>:
 8010084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010088:	f8b1 305e 	ldrh.w	r3, [r1, #94]	@ 0x5e
 801008c:	880c      	ldrh	r4, [r1, #0]
 801008e:	b083      	sub	sp, #12
 8010090:	1b1b      	subs	r3, r3, r4
 8010092:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8010096:	9201      	str	r2, [sp, #4]
 8010098:	db3a      	blt.n	8010110 <acc_cal_algorithms_vfast2_ldo+0x8c>
 801009a:	4a1f      	ldr	r2, [pc, #124]	@ (8010118 <acc_cal_algorithms_vfast2_ldo+0x94>)
 801009c:	ea4f 4803 	mov.w	r8, r3, lsl #16
 80100a0:	fba2 3808 	umull	r3, r8, r2, r8
 80100a4:	2500      	movs	r5, #0
 80100a6:	4681      	mov	r9, r0
 80100a8:	460e      	mov	r6, r1
 80100aa:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80100ae:	46ab      	mov	fp, r5
 80100b0:	46a2      	mov	sl, r4
 80100b2:	2210      	movs	r2, #16
 80100b4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80100b8:	2001      	movs	r0, #1
 80100ba:	e009      	b.n	80100d0 <acc_cal_algorithms_vfast2_ldo+0x4c>
 80100bc:	3201      	adds	r2, #1
 80100be:	b292      	uxth	r2, r2
 80100c0:	458e      	cmp	lr, r1
 80100c2:	bf38      	it	cc
 80100c4:	2000      	movcc	r0, #0
 80100c6:	2a40      	cmp	r2, #64	@ 0x40
 80100c8:	4445      	add	r5, r8
 80100ca:	d01a      	beq.n	8010102 <acc_cal_algorithms_vfast2_ldo+0x7e>
 80100cc:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 80100d0:	eba4 0309 	sub.w	r3, r4, r9
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	bfb8      	it	lt
 80100d8:	425b      	neglt	r3, r3
 80100da:	b29b      	uxth	r3, r3
 80100dc:	eb0a 4115 	add.w	r1, sl, r5, lsr #16
 80100e0:	4563      	cmp	r3, ip
 80100e2:	f501 7748 	add.w	r7, r1, #800	@ 0x320
 80100e6:	bf3c      	itt	cc
 80100e8:	469c      	movcc	ip, r3
 80100ea:	4693      	movcc	fp, r2
 80100ec:	42bc      	cmp	r4, r7
 80100ee:	f504 7e48 	add.w	lr, r4, #800	@ 0x320
 80100f2:	d9e3      	bls.n	80100bc <acc_cal_algorithms_vfast2_ldo+0x38>
 80100f4:	3201      	adds	r2, #1
 80100f6:	b292      	uxth	r2, r2
 80100f8:	2a40      	cmp	r2, #64	@ 0x40
 80100fa:	f04f 0000 	mov.w	r0, #0
 80100fe:	4445      	add	r5, r8
 8010100:	d1e4      	bne.n	80100cc <acc_cal_algorithms_vfast2_ldo+0x48>
 8010102:	b130      	cbz	r0, 8010112 <acc_cal_algorithms_vfast2_ldo+0x8e>
 8010104:	9b01      	ldr	r3, [sp, #4]
 8010106:	f8a3 b000 	strh.w	fp, [r3]
 801010a:	b003      	add	sp, #12
 801010c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010110:	2000      	movs	r0, #0
 8010112:	b003      	add	sp, #12
 8010114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010118:	aaaaaaab 	.word	0xaaaaaaab

0801011c <acc_cal_algorithms_delay_cbank>:
 801011c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801011e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010122:	460e      	mov	r6, r1
 8010124:	b0b1      	sub	sp, #196	@ 0xc4
 8010126:	4611      	mov	r1, r2
 8010128:	4605      	mov	r5, r0
 801012a:	2401      	movs	r4, #1
 801012c:	2700      	movs	r7, #0
 801012e:	e008      	b.n	8010142 <acc_cal_algorithms_delay_cbank+0x26>
 8010130:	428a      	cmp	r2, r1
 8010132:	bfa8      	it	ge
 8010134:	4627      	movge	r7, r4
 8010136:	f104 0401 	add.w	r4, r4, #1
 801013a:	bfa8      	it	ge
 801013c:	4611      	movge	r1, r2
 801013e:	2c20      	cmp	r4, #32
 8010140:	d00c      	beq.n	801015c <acc_cal_algorithms_delay_cbank+0x40>
 8010142:	4613      	mov	r3, r2
 8010144:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 8010148:	f5c3 7348 	rsb	r3, r3, #800	@ 0x320
 801014c:	4413      	add	r3, r2
 801014e:	b29b      	uxth	r3, r3
 8010150:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010154:	d9ec      	bls.n	8010130 <acc_cal_algorithms_delay_cbank+0x14>
 8010156:	2000      	movs	r0, #0
 8010158:	b031      	add	sp, #196	@ 0xc4
 801015a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801015c:	2f07      	cmp	r7, #7
 801015e:	d85f      	bhi.n	8010220 <acc_cal_algorithms_delay_cbank+0x104>
 8010160:	2300      	movs	r3, #0
 8010162:	f107 0208 	add.w	r2, r7, #8
 8010166:	1ad2      	subs	r2, r2, r3
 8010168:	af03      	add	r7, sp, #12
 801016a:	b30a      	cbz	r2, 80101b0 <acc_cal_algorithms_delay_cbank+0x94>
 801016c:	18d5      	adds	r5, r2, r3
 801016e:	4639      	mov	r1, r7
 8010170:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010174:	eb00 0443 	add.w	r4, r0, r3, lsl #1
 8010178:	f934 0b02 	ldrsh.w	r0, [r4], #2
 801017c:	ee07 0a10 	vmov	s14, r0
 8010180:	fb03 f003 	mul.w	r0, r3, r3
 8010184:	ee06 3a90 	vmov	s13, r3
 8010188:	ee07 0a90 	vmov	s15, r0
 801018c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010194:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8010198:	42a5      	cmp	r5, r4
 801019a:	ed81 7a00 	vstr	s14, [r1]
 801019e:	edc1 7a01 	vstr	s15, [r1, #4]
 80101a2:	edc1 6a02 	vstr	s13, [r1, #8]
 80101a6:	f103 0301 	add.w	r3, r3, #1
 80101aa:	f101 010c 	add.w	r1, r1, #12
 80101ae:	d1e3      	bne.n	8010178 <acc_cal_algorithms_delay_cbank+0x5c>
 80101b0:	4638      	mov	r0, r7
 80101b2:	4669      	mov	r1, sp
 80101b4:	f003 fb72 	bl	801389c <acc_alg_least_square_fit>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d0cc      	beq.n	8010156 <acc_cal_algorithms_delay_cbank+0x3a>
 80101bc:	ed9d 6a00 	vldr	s12, [sp]
 80101c0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80101c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c8:	d0c5      	beq.n	8010156 <acc_cal_algorithms_delay_cbank+0x3a>
 80101ca:	eddd 6a01 	vldr	s13, [sp, #4]
 80101ce:	eef5 6a40 	vcmp.f32	s13, #0.0
 80101d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101d6:	d0be      	beq.n	8010156 <acc_cal_algorithms_delay_cbank+0x3a>
 80101d8:	eddd 7a02 	vldr	s15, [sp, #8]
 80101dc:	eef1 7a67 	vneg.f32	s15, s15
 80101e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80101e4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80101e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ec:	dbb3      	blt.n	8010156 <acc_cal_algorithms_delay_cbank+0x3a>
 80101ee:	eef1 6a66 	vneg.f32	s13, s13
 80101f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80101f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80101fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101fe:	d5aa      	bpl.n	8010156 <acc_cal_algorithms_delay_cbank+0x3a>
 8010200:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801020c:	ee17 3a90 	vmov	r3, s15
 8010210:	b29b      	uxth	r3, r3
 8010212:	2b3f      	cmp	r3, #63	@ 0x3f
 8010214:	d89f      	bhi.n	8010156 <acc_cal_algorithms_delay_cbank+0x3a>
 8010216:	085b      	lsrs	r3, r3, #1
 8010218:	f083 0310 	eor.w	r3, r3, #16
 801021c:	8033      	strh	r3, [r6, #0]
 801021e:	e79b      	b.n	8010158 <acc_cal_algorithms_delay_cbank+0x3c>
 8010220:	1ffb      	subs	r3, r7, #7
 8010222:	2f17      	cmp	r7, #23
 8010224:	bf88      	it	hi
 8010226:	f1c3 0220 	rsbhi	r2, r3, #32
 801022a:	d89d      	bhi.n	8010168 <acc_cal_algorithms_delay_cbank+0x4c>
 801022c:	e799      	b.n	8010162 <acc_cal_algorithms_delay_cbank+0x46>
 801022e:	bf00      	nop

08010230 <acc_cal_algorithms_bba_cal_ctrl>:
 8010230:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 801030c <acc_cal_algorithms_bba_cal_ctrl+0xdc>
 8010234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010238:	f04f 0e00 	mov.w	lr, #0
 801023c:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 8010240:	f9b0 4000 	ldrsh.w	r4, [r0]
 8010244:	4665      	mov	r5, ip
 8010246:	46f0      	mov	r8, lr
 8010248:	463e      	mov	r6, r7
 801024a:	f06f 021b 	mvn.w	r2, #27
 801024e:	e014      	b.n	801027a <acc_cal_algorithms_bba_cal_ctrl+0x4a>
 8010250:	42a7      	cmp	r7, r4
 8010252:	bfc4      	itt	gt
 8010254:	4627      	movgt	r7, r4
 8010256:	4696      	movgt	lr, r2
 8010258:	2a1c      	cmp	r2, #28
 801025a:	4603      	mov	r3, r0
 801025c:	d016      	beq.n	801028c <acc_cal_algorithms_bba_cal_ctrl+0x5c>
 801025e:	881b      	ldrh	r3, [r3, #0]
 8010260:	f930 4f02 	ldrsh.w	r4, [r0, #2]!
 8010264:	1ae3      	subs	r3, r4, r3
 8010266:	b21b      	sxth	r3, r3
 8010268:	429e      	cmp	r6, r3
 801026a:	f102 0208 	add.w	r2, r2, #8
 801026e:	bfa8      	it	ge
 8010270:	461e      	movge	r6, r3
 8010272:	429d      	cmp	r5, r3
 8010274:	b212      	sxth	r2, r2
 8010276:	bfb8      	it	lt
 8010278:	461d      	movlt	r5, r3
 801027a:	2c00      	cmp	r4, #0
 801027c:	dae8      	bge.n	8010250 <acc_cal_algorithms_bba_cal_ctrl+0x20>
 801027e:	45a4      	cmp	ip, r4
 8010280:	daea      	bge.n	8010258 <acc_cal_algorithms_bba_cal_ctrl+0x28>
 8010282:	2a1c      	cmp	r2, #28
 8010284:	46a4      	mov	ip, r4
 8010286:	4690      	mov	r8, r2
 8010288:	4603      	mov	r3, r0
 801028a:	d1e8      	bne.n	801025e <acc_cal_algorithms_bba_cal_ctrl+0x2e>
 801028c:	f5a5 551c 	sub.w	r5, r5, #9984	@ 0x2700
 8010290:	3d10      	subs	r5, #16
 8010292:	b2ad      	uxth	r5, r5
 8010294:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010298:	429d      	cmp	r5, r3
 801029a:	d800      	bhi.n	801029e <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 801029c:	b116      	cbz	r6, 80102a4 <acc_cal_algorithms_bba_cal_ctrl+0x74>
 801029e:	2000      	movs	r0, #0
 80102a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a4:	f51c 4f00 	cmn.w	ip, #32768	@ 0x8000
 80102a8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80102ac:	d011      	beq.n	80102d2 <acc_cal_algorithms_bba_cal_ctrl+0xa2>
 80102ae:	429f      	cmp	r7, r3
 80102b0:	d029      	beq.n	8010306 <acc_cal_algorithms_bba_cal_ctrl+0xd6>
 80102b2:	ebae 0e08 	sub.w	lr, lr, r8
 80102b6:	f1be 0f08 	cmp.w	lr, #8
 80102ba:	d1f0      	bne.n	801029e <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 80102bc:	eba7 070c 	sub.w	r7, r7, ip
 80102c0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80102c4:	fb9c f7f7 	sdiv	r7, ip, r7
 80102c8:	eba8 0e07 	sub.w	lr, r8, r7
 80102cc:	fa0f fe8e 	sxth.w	lr, lr
 80102d0:	e001      	b.n	80102d6 <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 80102d2:	429f      	cmp	r7, r3
 80102d4:	d0e3      	beq.n	801029e <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 80102d6:	f1be 0f00 	cmp.w	lr, #0
 80102da:	db07      	blt.n	80102ec <acc_cal_algorithms_bba_cal_ctrl+0xbc>
 80102dc:	f1be 0f1f 	cmp.w	lr, #31
 80102e0:	dcdd      	bgt.n	801029e <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 80102e2:	f8a1 e000 	strh.w	lr, [r1]
 80102e6:	2001      	movs	r0, #1
 80102e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ec:	f1ce 0e00 	rsb	lr, lr, #0
 80102f0:	fa1f fe8e 	uxth.w	lr, lr
 80102f4:	f1be 0f1f 	cmp.w	lr, #31
 80102f8:	d8d1      	bhi.n	801029e <acc_cal_algorithms_bba_cal_ctrl+0x6e>
 80102fa:	f04e 0e20 	orr.w	lr, lr, #32
 80102fe:	f8a1 e000 	strh.w	lr, [r1]
 8010302:	2001      	movs	r0, #1
 8010304:	e7cc      	b.n	80102a0 <acc_cal_algorithms_bba_cal_ctrl+0x70>
 8010306:	46c6      	mov	lr, r8
 8010308:	e7e5      	b.n	80102d6 <acc_cal_algorithms_bba_cal_ctrl+0xa6>
 801030a:	bf00      	nop
 801030c:	ffff8000 	.word	0xffff8000

08010310 <acc_cal_algorithms_area_index>:
 8010310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010314:	f5ad 7d7f 	sub.w	sp, sp, #1020	@ 0x3fc
 8010318:	ab05      	add	r3, sp, #20
 801031a:	f500 62c0 	add.w	r2, r0, #1536	@ 0x600
 801031e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010322:	9304      	str	r3, [sp, #16]
 8010324:	4c5c      	ldr	r4, [pc, #368]	@ (8010498 <acc_cal_algorithms_area_index+0x188>)
 8010326:	4d5d      	ldr	r5, [pc, #372]	@ (801049c <acc_cal_algorithms_area_index+0x18c>)
 8010328:	9105      	str	r1, [sp, #20]
 801032a:	2300      	movs	r3, #0
 801032c:	4681      	mov	r9, r0
 801032e:	9301      	str	r3, [sp, #4]
 8010330:	f10d 0898 	add.w	r8, sp, #152	@ 0x98
 8010334:	af3d      	add	r7, sp, #244	@ 0xf4
 8010336:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801033a:	464e      	mov	r6, r9
 801033c:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 8010340:	f936 0b04 	ldrsh.w	r0, [r6], #4
 8010344:	f003 fa1e 	bl	8013784 <acc_alg_atan2_q16>
 8010348:	f84a 0b04 	str.w	r0, [sl], #4
 801034c:	45c2      	cmp	sl, r8
 801034e:	d1f5      	bne.n	801033c <acc_cal_algorithms_area_index+0x2c>
 8010350:	f10d 0b94 	add.w	fp, sp, #148	@ 0x94
 8010354:	46da      	mov	sl, fp
 8010356:	464e      	mov	r6, r9
 8010358:	f9b6 1062 	ldrsh.w	r1, [r6, #98]	@ 0x62
 801035c:	f9b6 0060 	ldrsh.w	r0, [r6, #96]	@ 0x60
 8010360:	f003 fa10 	bl	8013784 <acc_alg_atan2_q16>
 8010364:	f84a 0f04 	str.w	r0, [sl, #4]!
 8010368:	4557      	cmp	r7, sl
 801036a:	f106 0604 	add.w	r6, r6, #4
 801036e:	d1f3      	bne.n	8010358 <acc_cal_algorithms_area_index+0x48>
 8010370:	9a01      	ldr	r2, [sp, #4]
 8010372:	ab3e      	add	r3, sp, #248	@ 0xf8
 8010374:	ae0d      	add	r6, sp, #52	@ 0x34
 8010376:	1898      	adds	r0, r3, r2
 8010378:	2100      	movs	r1, #0
 801037a:	f85b 3f04 	ldr.w	r3, [fp, #4]!
 801037e:	f856 2f04 	ldr.w	r2, [r6, #4]!
 8010382:	1a9b      	subs	r3, r3, r2
 8010384:	42a3      	cmp	r3, r4
 8010386:	dd61      	ble.n	801044c <acc_cal_algorithms_area_index+0x13c>
 8010388:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 801038c:	3b7e      	subs	r3, #126	@ 0x7e
 801038e:	42a3      	cmp	r3, r4
 8010390:	dcfa      	bgt.n	8010388 <acc_cal_algorithms_area_index+0x78>
 8010392:	2b00      	cmp	r3, #0
 8010394:	bfb8      	it	lt
 8010396:	425b      	neglt	r3, r3
 8010398:	4299      	cmp	r1, r3
 801039a:	bfb8      	it	lt
 801039c:	4619      	movlt	r1, r3
 801039e:	45bb      	cmp	fp, r7
 80103a0:	f840 3b04 	str.w	r3, [r0], #4
 80103a4:	d1e9      	bne.n	801037a <acc_cal_algorithms_area_index+0x6a>
 80103a6:	9b02      	ldr	r3, [sp, #8]
 80103a8:	1049      	asrs	r1, r1, #1
 80103aa:	f843 1f04 	str.w	r1, [r3, #4]!
 80103ae:	9302      	str	r3, [sp, #8]
 80103b0:	9b01      	ldr	r3, [sp, #4]
 80103b2:	3360      	adds	r3, #96	@ 0x60
 80103b4:	9301      	str	r3, [sp, #4]
 80103b6:	9b03      	ldr	r3, [sp, #12]
 80103b8:	f109 09c0 	add.w	r9, r9, #192	@ 0xc0
 80103bc:	4599      	cmp	r9, r3
 80103be:	d1ba      	bne.n	8010336 <acc_cal_algorithms_area_index+0x26>
 80103c0:	2300      	movs	r3, #0
 80103c2:	9c04      	ldr	r4, [sp, #16]
 80103c4:	4618      	mov	r0, r3
 80103c6:	4619      	mov	r1, r3
 80103c8:	f854 2f04 	ldr.w	r2, [r4, #4]!
 80103cc:	428a      	cmp	r2, r1
 80103ce:	bfc8      	it	gt
 80103d0:	4618      	movgt	r0, r3
 80103d2:	f103 0301 	add.w	r3, r3, #1
 80103d6:	bfc8      	it	gt
 80103d8:	4611      	movgt	r1, r2
 80103da:	2b08      	cmp	r3, #8
 80103dc:	d1f4      	bne.n	80103c8 <acc_cal_algorithms_area_index+0xb8>
 80103de:	ab06      	add	r3, sp, #24
 80103e0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80103e4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 80103e8:	ab3e      	add	r3, sp, #248	@ 0xf8
 80103ea:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 80103ee:	f10d 0297 	add.w	r2, sp, #151	@ 0x97
 80103f2:	f10d 00af 	add.w	r0, sp, #175	@ 0xaf
 80103f6:	f851 3b04 	ldr.w	r3, [r1], #4
 80103fa:	42a3      	cmp	r3, r4
 80103fc:	bfac      	ite	ge
 80103fe:	2300      	movge	r3, #0
 8010400:	2301      	movlt	r3, #1
 8010402:	f802 3f01 	strb.w	r3, [r2, #1]!
 8010406:	4290      	cmp	r0, r2
 8010408:	7613      	strb	r3, [r2, #24]
 801040a:	d1f4      	bne.n	80103f6 <acc_cal_algorithms_area_index+0xe6>
 801040c:	2200      	movs	r2, #0
 801040e:	4611      	mov	r1, r2
 8010410:	2301      	movs	r3, #1
 8010412:	b321      	cbz	r1, 801045e <acc_cal_algorithms_area_index+0x14e>
 8010414:	f818 0003 	ldrb.w	r0, [r8, r3]
 8010418:	b1d8      	cbz	r0, 8010452 <acc_cal_algorithms_area_index+0x142>
 801041a:	3201      	adds	r2, #1
 801041c:	3301      	adds	r3, #1
 801041e:	2b30      	cmp	r3, #48	@ 0x30
 8010420:	d1f7      	bne.n	8010412 <acc_cal_algorithms_area_index+0x102>
 8010422:	f1a2 030c 	sub.w	r3, r2, #12
 8010426:	2b08      	cmp	r3, #8
 8010428:	d82e      	bhi.n	8010488 <acc_cal_algorithms_area_index+0x178>
 801042a:	eb01 0252 	add.w	r2, r1, r2, lsr #1
 801042e:	2a17      	cmp	r2, #23
 8010430:	d902      	bls.n	8010438 <acc_cal_algorithms_area_index+0x128>
 8010432:	3a18      	subs	r2, #24
 8010434:	2a17      	cmp	r2, #23
 8010436:	d8fc      	bhi.n	8010432 <acc_cal_algorithms_area_index+0x122>
 8010438:	9b05      	ldr	r3, [sp, #20]
 801043a:	2001      	movs	r0, #1
 801043c:	801a      	strh	r2, [r3, #0]
 801043e:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 8010442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010446:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 801044a:	337e      	adds	r3, #126	@ 0x7e
 801044c:	42ab      	cmp	r3, r5
 801044e:	dbfa      	blt.n	8010446 <acc_cal_algorithms_area_index+0x136>
 8010450:	e79f      	b.n	8010392 <acc_cal_algorithms_area_index+0x82>
 8010452:	2a0b      	cmp	r2, #11
 8010454:	d8e5      	bhi.n	8010422 <acc_cal_algorithms_area_index+0x112>
 8010456:	3301      	adds	r3, #1
 8010458:	2b30      	cmp	r3, #48	@ 0x30
 801045a:	d0f0      	beq.n	801043e <acc_cal_algorithms_area_index+0x12e>
 801045c:	4602      	mov	r2, r0
 801045e:	1e58      	subs	r0, r3, #1
 8010460:	4440      	add	r0, r8
 8010462:	1c59      	adds	r1, r3, #1
 8010464:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8010468:	1e4b      	subs	r3, r1, #1
 801046a:	b12c      	cbz	r4, 8010478 <acc_cal_algorithms_area_index+0x168>
 801046c:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8010470:	b914      	cbnz	r4, 8010478 <acc_cal_algorithms_area_index+0x168>
 8010472:	4619      	mov	r1, r3
 8010474:	2201      	movs	r2, #1
 8010476:	e7d1      	b.n	801041c <acc_cal_algorithms_area_index+0x10c>
 8010478:	2930      	cmp	r1, #48	@ 0x30
 801047a:	d001      	beq.n	8010480 <acc_cal_algorithms_area_index+0x170>
 801047c:	3101      	adds	r1, #1
 801047e:	e7f1      	b.n	8010464 <acc_cal_algorithms_area_index+0x154>
 8010480:	f1a2 030c 	sub.w	r3, r2, #12
 8010484:	2b08      	cmp	r3, #8
 8010486:	d904      	bls.n	8010492 <acc_cal_algorithms_area_index+0x182>
 8010488:	2000      	movs	r0, #0
 801048a:	f50d 7d7f 	add.w	sp, sp, #1020	@ 0x3fc
 801048e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010492:	0852      	lsrs	r2, r2, #1
 8010494:	e7d0      	b.n	8010438 <acc_cal_algorithms_area_index+0x128>
 8010496:	bf00      	nop
 8010498:	0003243f 	.word	0x0003243f
 801049c:	fffcdbc1 	.word	0xfffcdbc1

080104a0 <acc_cal_algorithms_iq_imbalance>:
 80104a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104a4:	ed2d 8b02 	vpush	{d8}
 80104a8:	eddf 5a51 	vldr	s11, [pc, #324]	@ 80105f0 <acc_cal_algorithms_iq_imbalance+0x150>
 80104ac:	b0bd      	sub	sp, #244	@ 0xf4
 80104ae:	4680      	mov	r8, r0
 80104b0:	4689      	mov	r9, r1
 80104b2:	f500 6cd8 	add.w	ip, r0, #1728	@ 0x6c0
 80104b6:	f100 01c0 	add.w	r1, r0, #192	@ 0xc0
 80104ba:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80104be:	a804      	add	r0, sp, #16
 80104c0:	f1a1 04c0 	sub.w	r4, r1, #192	@ 0xc0
 80104c4:	2700      	movs	r7, #0
 80104c6:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
 80104ca:	f9b4 5000 	ldrsh.w	r5, [r4]
 80104ce:	fb06 f606 	mul.w	r6, r6, r6
 80104d2:	3404      	adds	r4, #4
 80104d4:	fb05 6505 	mla	r5, r5, r5, r6
 80104d8:	42a1      	cmp	r1, r4
 80104da:	442f      	add	r7, r5
 80104dc:	d1f3      	bne.n	80104c6 <acc_cal_algorithms_iq_imbalance+0x26>
 80104de:	ee07 7a90 	vmov	s15, r7
 80104e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104e6:	31c0      	adds	r1, #192	@ 0xc0
 80104e8:	eec7 6aa5 	vdiv.f32	s13, s15, s11
 80104ec:	458c      	cmp	ip, r1
 80104ee:	eeb1 7ae6 	vsqrt.f32	s14, s13
 80104f2:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80104f6:	ece0 7a01 	vstmia	r0!, {s15}
 80104fa:	d1e1      	bne.n	80104c0 <acc_cal_algorithms_iq_imbalance+0x20>
 80104fc:	2a00      	cmp	r2, #0
 80104fe:	d070      	beq.n	80105e2 <acc_cal_algorithms_iq_imbalance+0x142>
 8010500:	461c      	mov	r4, r3
 8010502:	eb02 0509 	add.w	r5, r2, r9
 8010506:	ae24      	add	r6, sp, #144	@ 0x90
 8010508:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 801050c:	eeb1 8a00 	vmov.f32	s16, #16	@ 0x40800000  4.0
 8010510:	eb08 0289 	add.w	r2, r8, r9, lsl #2
 8010514:	ab0c      	add	r3, sp, #48	@ 0x30
 8010516:	a904      	add	r1, sp, #16
 8010518:	f9b2 0000 	ldrsh.w	r0, [r2]
 801051c:	ecf1 5a01 	vldmia	r1!, {s11}
 8010520:	ee06 0a10 	vmov	s12, r0
 8010524:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8010528:	ee06 0a90 	vmov	s13, r0
 801052c:	f9b2 0060 	ldrsh.w	r0, [r2, #96]	@ 0x60
 8010530:	ee07 0a10 	vmov	s14, r0
 8010534:	f9b2 0062 	ldrsh.w	r0, [r2, #98]	@ 0x62
 8010538:	ee07 0a90 	vmov	s15, r0
 801053c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010540:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801054c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8010550:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010554:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010558:	ee27 7a25 	vmul.f32	s14, s14, s11
 801055c:	ee26 5a06 	vmul.f32	s10, s12, s12
 8010560:	ee67 5a07 	vmul.f32	s11, s14, s14
 8010564:	ee26 6a26 	vmul.f32	s12, s12, s13
 8010568:	ee27 7a27 	vmul.f32	s14, s14, s15
 801056c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8010570:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010574:	ed83 5a00 	vstr	s10, [r3]
 8010578:	ed83 6a01 	vstr	s12, [r3, #4]
 801057c:	edc3 6a02 	vstr	s13, [r3, #8]
 8010580:	edc3 5a18 	vstr	s11, [r3, #96]	@ 0x60
 8010584:	ed83 7a19 	vstr	s14, [r3, #100]	@ 0x64
 8010588:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
 801058c:	330c      	adds	r3, #12
 801058e:	429e      	cmp	r6, r3
 8010590:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8010594:	d1c0      	bne.n	8010518 <acc_cal_algorithms_iq_imbalance+0x78>
 8010596:	2210      	movs	r2, #16
 8010598:	a901      	add	r1, sp, #4
 801059a:	a80c      	add	r0, sp, #48	@ 0x30
 801059c:	f003 f97e 	bl	801389c <acc_alg_least_square_fit>
 80105a0:	b300      	cbz	r0, 80105e4 <acc_cal_algorithms_iq_imbalance+0x144>
 80105a2:	eddd 7a01 	vldr	s15, [sp, #4]
 80105a6:	ed9d 7a03 	vldr	s14, [sp, #12]
 80105aa:	eddd 0a02 	vldr	s1, [sp, #8]
 80105ae:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80105b2:	4620      	mov	r0, r4
 80105b4:	f109 0901 	add.w	r9, r9, #1
 80105b8:	3402      	adds	r4, #2
 80105ba:	ee67 7a88 	vmul.f32	s15, s15, s16
 80105be:	ee60 6aa0 	vmul.f32	s13, s1, s1
 80105c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105c6:	ee88 7a80 	vdiv.f32	s14, s17, s0
 80105ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80105ce:	ee67 0a20 	vmul.f32	s1, s14, s1
 80105d2:	eeb1 1ae7 	vsqrt.f32	s2, s15
 80105d6:	ee27 1a01 	vmul.f32	s2, s14, s2
 80105da:	f003 fde5 	bl	80141a8 <acc_alg_iq_imb_comp_to_fix_point>
 80105de:	454d      	cmp	r5, r9
 80105e0:	d196      	bne.n	8010510 <acc_cal_algorithms_iq_imbalance+0x70>
 80105e2:	2001      	movs	r0, #1
 80105e4:	b03d      	add	sp, #244	@ 0xf4
 80105e6:	ecbd 8b02 	vpop	{d8}
 80105ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105ee:	bf00      	nop
 80105f0:	42400000 	.word	0x42400000

080105f4 <acc_cal_algorithms_rx_freq_ctrl>:
 80105f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f8:	b087      	sub	sp, #28
 80105fa:	2400      	movs	r4, #0
 80105fc:	4606      	mov	r6, r0
 80105fe:	468b      	mov	fp, r1
 8010600:	9203      	str	r2, [sp, #12]
 8010602:	f100 0902 	add.w	r9, r0, #2
 8010606:	9402      	str	r4, [sp, #8]
 8010608:	4625      	mov	r5, r4
 801060a:	46a0      	mov	r8, r4
 801060c:	46a2      	mov	sl, r4
 801060e:	f10d 0716 	add.w	r7, sp, #22
 8010612:	e006      	b.n	8010622 <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 8010614:	4553      	cmp	r3, sl
 8010616:	d82a      	bhi.n	801066e <acc_cal_algorithms_rx_freq_ctrl+0x7a>
 8010618:	4645      	mov	r5, r8
 801061a:	4698      	mov	r8, r3
 801061c:	3401      	adds	r4, #1
 801061e:	2c08      	cmp	r4, #8
 8010620:	d019      	beq.n	8010656 <acc_cal_algorithms_rx_freq_ctrl+0x62>
 8010622:	9700      	str	r7, [sp, #0]
 8010624:	ab05      	add	r3, sp, #20
 8010626:	465a      	mov	r2, fp
 8010628:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 801062c:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 8010630:	f003 fd96 	bl	8014160 <acc_alg_comp_iq_imb>
 8010634:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8010638:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801063c:	fb02 f202 	mul.w	r2, r2, r2
 8010640:	fb03 2303 	mla	r3, r3, r3, r2
 8010644:	42ab      	cmp	r3, r5
 8010646:	b2a2      	uxth	r2, r4
 8010648:	d9e8      	bls.n	801061c <acc_cal_algorithms_rx_freq_ctrl+0x28>
 801064a:	4543      	cmp	r3, r8
 801064c:	d8e2      	bhi.n	8010614 <acc_cal_algorithms_rx_freq_ctrl+0x20>
 801064e:	3401      	adds	r4, #1
 8010650:	2c08      	cmp	r4, #8
 8010652:	461d      	mov	r5, r3
 8010654:	d1e5      	bne.n	8010622 <acc_cal_algorithms_rx_freq_ctrl+0x2e>
 8010656:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 801065a:	45aa      	cmp	sl, r5
 801065c:	bf85      	ittet	hi
 801065e:	e9dd 2302 	ldrdhi	r2, r3, [sp, #8]
 8010662:	2001      	movhi	r0, #1
 8010664:	2000      	movls	r0, #0
 8010666:	801a      	strhhi	r2, [r3, #0]
 8010668:	b007      	add	sp, #28
 801066a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066e:	4645      	mov	r5, r8
 8010670:	9202      	str	r2, [sp, #8]
 8010672:	46d0      	mov	r8, sl
 8010674:	469a      	mov	sl, r3
 8010676:	e7d1      	b.n	801061c <acc_cal_algorithms_rx_freq_ctrl+0x28>

08010678 <acc_cal_algorithms_wavelet_duration_p1>:
 8010678:	b508      	push	{r3, lr}
 801067a:	f003 fd39 	bl	80140f0 <acc_alg_temp>
 801067e:	f110 0f14 	cmn.w	r0, #20
 8010682:	db06      	blt.n	8010692 <acc_cal_algorithms_wavelet_duration_p1+0x1a>
 8010684:	282c      	cmp	r0, #44	@ 0x2c
 8010686:	dd06      	ble.n	8010696 <acc_cal_algorithms_wavelet_duration_p1+0x1e>
 8010688:	2850      	cmp	r0, #80	@ 0x50
 801068a:	bfb4      	ite	lt
 801068c:	2003      	movlt	r0, #3
 801068e:	2004      	movge	r0, #4
 8010690:	bd08      	pop	{r3, pc}
 8010692:	2001      	movs	r0, #1
 8010694:	bd08      	pop	{r3, pc}
 8010696:	2002      	movs	r0, #2
 8010698:	bd08      	pop	{r3, pc}
 801069a:	bf00      	nop

0801069c <acc_cal_algorithms_phase_unwrap>:
 801069c:	2901      	cmp	r1, #1
 801069e:	d926      	bls.n	80106ee <acc_cal_algorithms_phase_unwrap+0x52>
 80106a0:	b470      	push	{r4, r5, r6}
 80106a2:	1f03      	subs	r3, r0, #4
 80106a4:	4e12      	ldr	r6, [pc, #72]	@ (80106f0 <acc_cal_algorithms_phase_unwrap+0x54>)
 80106a6:	4d13      	ldr	r5, [pc, #76]	@ (80106f4 <acc_cal_algorithms_phase_unwrap+0x58>)
 80106a8:	eb03 0481 	add.w	r4, r3, r1, lsl #2
 80106ac:	2100      	movs	r1, #0
 80106ae:	6843      	ldr	r3, [r0, #4]
 80106b0:	440b      	add	r3, r1
 80106b2:	4602      	mov	r2, r0
 80106b4:	f840 3f04 	str.w	r3, [r0, #4]!
 80106b8:	6812      	ldr	r2, [r2, #0]
 80106ba:	1a9a      	subs	r2, r3, r2
 80106bc:	42b2      	cmp	r2, r6
 80106be:	dd09      	ble.n	80106d4 <acc_cal_algorithms_phase_unwrap+0x38>
 80106c0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80106c4:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 80106c8:	3b7e      	subs	r3, #126	@ 0x7e
 80106ca:	f5a1 21c9 	sub.w	r1, r1, #411648	@ 0x64800
 80106ce:	6003      	str	r3, [r0, #0]
 80106d0:	397e      	subs	r1, #126	@ 0x7e
 80106d2:	1a9a      	subs	r2, r3, r2
 80106d4:	42aa      	cmp	r2, r5
 80106d6:	da06      	bge.n	80106e6 <acc_cal_algorithms_phase_unwrap+0x4a>
 80106d8:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 80106dc:	337e      	adds	r3, #126	@ 0x7e
 80106de:	f501 21c9 	add.w	r1, r1, #411648	@ 0x64800
 80106e2:	6003      	str	r3, [r0, #0]
 80106e4:	317e      	adds	r1, #126	@ 0x7e
 80106e6:	4284      	cmp	r4, r0
 80106e8:	d1e1      	bne.n	80106ae <acc_cal_algorithms_phase_unwrap+0x12>
 80106ea:	bc70      	pop	{r4, r5, r6}
 80106ec:	4770      	bx	lr
 80106ee:	4770      	bx	lr
 80106f0:	0003243f 	.word	0x0003243f
 80106f4:	fffcdbc1 	.word	0xfffcdbc1

080106f8 <acc_cal_algorithms_tx_freq_ctrl>:
 80106f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106fc:	f2ad 6d0c 	subw	sp, sp, #1548	@ 0x60c
 8010700:	4606      	mov	r6, r0
 8010702:	1c8c      	adds	r4, r1, #2
 8010704:	4690      	mov	r8, r2
 8010706:	4699      	mov	r9, r3
 8010708:	ad01      	add	r5, sp, #4
 801070a:	f20d 6704 	addw	r7, sp, #1540	@ 0x604
 801070e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8010712:	f934 0c02 	ldrsh.w	r0, [r4, #-2]
 8010716:	f003 f835 	bl	8013784 <acc_alg_atan2_q16>
 801071a:	f845 0f04 	str.w	r0, [r5, #4]!
 801071e:	42bd      	cmp	r5, r7
 8010720:	f104 0404 	add.w	r4, r4, #4
 8010724:	d1f3      	bne.n	801070e <acc_cal_algorithms_tx_freq_ctrl+0x16>
 8010726:	46ca      	mov	sl, r9
 8010728:	f1a9 0304 	sub.w	r3, r9, #4
 801072c:	f109 001c 	add.w	r0, r9, #28
 8010730:	2100      	movs	r1, #0
 8010732:	f843 1f04 	str.w	r1, [r3, #4]!
 8010736:	4298      	cmp	r0, r3
 8010738:	d1fb      	bne.n	8010732 <acc_cal_algorithms_tx_freq_ctrl+0x3a>
 801073a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801073e:	f04f 0b00 	mov.w	fp, #0
 8010742:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010746:	4f33      	ldr	r7, [pc, #204]	@ (8010814 <acc_cal_algorithms_tx_freq_ctrl+0x11c>)
 8010748:	f8cd b000 	str.w	fp, [sp]
 801074c:	ac19      	add	r4, sp, #100	@ 0x64
 801074e:	00ed      	lsls	r5, r5, #3
 8010750:	9301      	str	r3, [sp, #4]
 8010752:	f640 5994 	movw	r9, #3476	@ 0xd94
 8010756:	2130      	movs	r1, #48	@ 0x30
 8010758:	f1a4 005c 	sub.w	r0, r4, #92	@ 0x5c
 801075c:	f7ff ff9e 	bl	801069c <acc_cal_algorithms_phase_unwrap>
 8010760:	f1a4 0160 	sub.w	r1, r4, #96	@ 0x60
 8010764:	f04f 0c00 	mov.w	ip, #0
 8010768:	f851 3f04 	ldr.w	r3, [r1, #4]!
 801076c:	6e08      	ldr	r0, [r1, #96]	@ 0x60
 801076e:	428c      	cmp	r4, r1
 8010770:	eba3 0000 	sub.w	r0, r3, r0
 8010774:	4484      	add	ip, r0
 8010776:	d1f7      	bne.n	8010768 <acc_cal_algorithms_tx_freq_ctrl+0x70>
 8010778:	f1bc 0f00 	cmp.w	ip, #0
 801077c:	db35      	blt.n	80107ea <acc_cal_algorithms_tx_freq_ctrl+0xf2>
 801077e:	ea4f 119c 	mov.w	r1, ip, lsr #6
 8010782:	fb09 f101 	mul.w	r1, r9, r1
 8010786:	0d49      	lsrs	r1, r1, #21
 8010788:	fb06 f101 	mul.w	r1, r6, r1
 801078c:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8010790:	f8ca 1000 	str.w	r1, [sl]
 8010794:	f1bb 0f00 	cmp.w	fp, #0
 8010798:	d003      	beq.n	80107a2 <acc_cal_algorithms_tx_freq_ctrl+0xaa>
 801079a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801079e:	4288      	cmp	r0, r1
 80107a0:	d930      	bls.n	8010804 <acc_cal_algorithms_tx_freq_ctrl+0x10c>
 80107a2:	f8da 1000 	ldr.w	r1, [sl]
 80107a6:	eba1 0108 	sub.w	r1, r1, r8
 80107aa:	2900      	cmp	r1, #0
 80107ac:	bfb8      	it	lt
 80107ae:	4249      	neglt	r1, r1
 80107b0:	42b9      	cmp	r1, r7
 80107b2:	d204      	bcs.n	80107be <acc_cal_algorithms_tx_freq_ctrl+0xc6>
 80107b4:	2301      	movs	r3, #1
 80107b6:	460f      	mov	r7, r1
 80107b8:	f8cd b004 	str.w	fp, [sp, #4]
 80107bc:	9300      	str	r3, [sp, #0]
 80107be:	f10b 0301 	add.w	r3, fp, #1
 80107c2:	fa1f fb83 	uxth.w	fp, r3
 80107c6:	f1bb 0f08 	cmp.w	fp, #8
 80107ca:	f10a 0a04 	add.w	sl, sl, #4
 80107ce:	f104 04c0 	add.w	r4, r4, #192	@ 0xc0
 80107d2:	d1c0      	bne.n	8010756 <acc_cal_algorithms_tx_freq_ctrl+0x5e>
 80107d4:	9b00      	ldr	r3, [sp, #0]
 80107d6:	b11b      	cbz	r3, 80107e0 <acc_cal_algorithms_tx_freq_ctrl+0xe8>
 80107d8:	f8dd 3630 	ldr.w	r3, [sp, #1584]	@ 0x630
 80107dc:	9a01      	ldr	r2, [sp, #4]
 80107de:	801a      	strh	r2, [r3, #0]
 80107e0:	9800      	ldr	r0, [sp, #0]
 80107e2:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 80107e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ea:	f1cc 0100 	rsb	r1, ip, #0
 80107ee:	0989      	lsrs	r1, r1, #6
 80107f0:	fb09 f101 	mul.w	r1, r9, r1
 80107f4:	0d49      	lsrs	r1, r1, #21
 80107f6:	fb06 f101 	mul.w	r1, r6, r1
 80107fa:	eba5 2111 	sub.w	r1, r5, r1, lsr #8
 80107fe:	f8ca 1000 	str.w	r1, [sl]
 8010802:	e7c7      	b.n	8010794 <acc_cal_algorithms_tx_freq_ctrl+0x9c>
 8010804:	2300      	movs	r3, #0
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	9800      	ldr	r0, [sp, #0]
 801080a:	f20d 6d0c 	addw	sp, sp, #1548	@ 0x60c
 801080e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010812:	bf00      	nop
 8010814:	000f4240 	.word	0x000f4240

08010818 <acc_cal_algorithms_phase_enhancement>:
 8010818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801081c:	b0bc      	sub	sp, #240	@ 0xf0
 801081e:	4606      	mov	r6, r0
 8010820:	460d      	mov	r5, r1
 8010822:	4617      	mov	r7, r2
 8010824:	f100 0902 	add.w	r9, r0, #2
 8010828:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 801082c:	2400      	movs	r4, #0
 801082e:	f640 38b7 	movw	r8, #2999	@ 0xbb7
 8010832:	e005      	b.n	8010840 <acc_cal_algorithms_phase_enhancement+0x28>
 8010834:	f002 ffa6 	bl	8013784 <acc_alg_atan2_q16>
 8010838:	2c30      	cmp	r4, #48	@ 0x30
 801083a:	f84a 0b04 	str.w	r0, [sl], #4
 801083e:	d00f      	beq.n	8010860 <acc_cal_algorithms_phase_enhancement+0x48>
 8010840:	f939 1024 	ldrsh.w	r1, [r9, r4, lsl #2]
 8010844:	f936 0024 	ldrsh.w	r0, [r6, r4, lsl #2]
 8010848:	fb01 f301 	mul.w	r3, r1, r1
 801084c:	fb00 3300 	mla	r3, r0, r0, r3
 8010850:	4543      	cmp	r3, r8
 8010852:	f104 0401 	add.w	r4, r4, #1
 8010856:	dced      	bgt.n	8010834 <acc_cal_algorithms_phase_enhancement+0x1c>
 8010858:	2000      	movs	r0, #0
 801085a:	b03c      	add	sp, #240	@ 0xf0
 801085c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010860:	ac0b      	add	r4, sp, #44	@ 0x2c
 8010862:	f1ad 0602 	sub.w	r6, sp, #2
 8010866:	4621      	mov	r1, r4
 8010868:	4632      	mov	r2, r6
 801086a:	f10d 088c 	add.w	r8, sp, #140	@ 0x8c
 801086e:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8010872:	2b00      	cmp	r3, #0
 8010874:	bfb8      	it	lt
 8010876:	330f      	addlt	r3, #15
 8010878:	3202      	adds	r2, #2
 801087a:	111b      	asrs	r3, r3, #4
 801087c:	4541      	cmp	r1, r8
 801087e:	8013      	strh	r3, [r2, #0]
 8010880:	d1f5      	bne.n	801086e <acc_cal_algorithms_phase_enhancement+0x56>
 8010882:	a80c      	add	r0, sp, #48	@ 0x30
 8010884:	2130      	movs	r1, #48	@ 0x30
 8010886:	f7ff ff09 	bl	801069c <acc_cal_algorithms_phase_unwrap>
 801088a:	2200      	movs	r2, #0
 801088c:	f854 3f04 	ldr.w	r3, [r4, #4]!
 8010890:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8010892:	4544      	cmp	r4, r8
 8010894:	eba3 0301 	sub.w	r3, r3, r1
 8010898:	441a      	add	r2, r3
 801089a:	d1f7      	bne.n	801088c <acc_cal_algorithms_phase_enhancement+0x74>
 801089c:	490d      	ldr	r1, [pc, #52]	@ (80108d4 <acc_cal_algorithms_phase_enhancement+0xbc>)
 801089e:	17d3      	asrs	r3, r2, #31
 80108a0:	fb81 1202 	smull	r1, r2, r1, r2
 80108a4:	ebc3 12a2 	rsb	r2, r3, r2, asr #6
 80108a8:	f502 4399 	add.w	r3, r2, #19584	@ 0x4c80
 80108ac:	3330      	adds	r3, #48	@ 0x30
 80108ae:	f64c 1162 	movw	r1, #51554	@ 0xc962
 80108b2:	428b      	cmp	r3, r1
 80108b4:	d8d0      	bhi.n	8010858 <acc_cal_algorithms_phase_enhancement+0x40>
 80108b6:	3d02      	subs	r5, #2
 80108b8:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80108bc:	f836 3f02 	ldrh.w	r3, [r6, #2]!
 80108c0:	f825 3f02 	strh.w	r3, [r5, #2]!
 80108c4:	42b1      	cmp	r1, r6
 80108c6:	d1f9      	bne.n	80108bc <acc_cal_algorithms_phase_enhancement+0xa4>
 80108c8:	2001      	movs	r0, #1
 80108ca:	803a      	strh	r2, [r7, #0]
 80108cc:	b03c      	add	sp, #240	@ 0xf0
 80108ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108d2:	bf00      	nop
 80108d4:	2aaaaaab 	.word	0x2aaaaaab

080108d8 <acc_cal_algorithms_calc_pulse_params>:
 80108d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108dc:	b085      	sub	sp, #20
 80108de:	f5b3 7fbc 	cmp.w	r3, #376	@ 0x178
 80108e2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80108e6:	9203      	str	r2, [sp, #12]
 80108e8:	d349      	bcc.n	801097e <acc_cal_algorithms_calc_pulse_params+0xa6>
 80108ea:	9b02      	ldr	r3, [sp, #8]
 80108ec:	2b08      	cmp	r3, #8
 80108ee:	d046      	beq.n	801097e <acc_cal_algorithms_calc_pulse_params+0xa6>
 80108f0:	9a01      	ldr	r2, [sp, #4]
 80108f2:	9c03      	ldr	r4, [sp, #12]
 80108f4:	f1a2 0c12 	sub.w	ip, r2, #18
 80108f8:	2000      	movs	r0, #0
 80108fa:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
 80108fe:	f8cd c000 	str.w	ip, [sp]
 8010902:	4680      	mov	r8, r0
 8010904:	4682      	mov	sl, r0
 8010906:	4683      	mov	fp, r0
 8010908:	3a02      	subs	r2, #2
 801090a:	2701      	movs	r7, #1
 801090c:	f240 29ee 	movw	r9, #750	@ 0x2ee
 8010910:	4684      	mov	ip, r0
 8010912:	e014      	b.n	801093e <acc_cal_algorithms_calc_pulse_params+0x66>
 8010914:	2800      	cmp	r0, #0
 8010916:	d136      	bne.n	8010986 <acc_cal_algorithms_calc_pulse_params+0xae>
 8010918:	459b      	cmp	fp, r3
 801091a:	da3a      	bge.n	8010992 <acc_cal_algorithms_calc_pulse_params+0xba>
 801091c:	469b      	mov	fp, r3
 801091e:	f04f 0801 	mov.w	r8, #1
 8010922:	f1cc 0600 	rsb	r6, ip, #0
 8010926:	429e      	cmp	r6, r3
 8010928:	9b00      	ldr	r3, [sp, #0]
 801092a:	bfc8      	it	gt
 801092c:	ebae 0c05 	subgt.w	ip, lr, r5
 8010930:	458a      	cmp	sl, r1
 8010932:	bf38      	it	cc
 8010934:	468a      	movcc	sl, r1
 8010936:	4293      	cmp	r3, r2
 8010938:	f104 0402 	add.w	r4, r4, #2
 801093c:	d01c      	beq.n	8010978 <acc_cal_algorithms_calc_pulse_params+0xa0>
 801093e:	8a55      	ldrh	r5, [r2, #18]
 8010940:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 8010944:	1a6b      	subs	r3, r5, r1
 8010946:	f503 4600 	add.w	r6, r3, #32768	@ 0x8000
 801094a:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 801094e:	bf38      	it	cc
 8010950:	8023      	strhcc	r3, [r4, #0]
 8010952:	468e      	mov	lr, r1
 8010954:	bf2c      	ite	cs
 8010956:	2700      	movcs	r7, #0
 8010958:	8811      	ldrhcc	r1, [r2, #0]
 801095a:	454b      	cmp	r3, r9
 801095c:	dcda      	bgt.n	8010914 <acc_cal_algorithms_calc_pulse_params+0x3c>
 801095e:	4e58      	ldr	r6, [pc, #352]	@ (8010ac0 <acc_cal_algorithms_calc_pulse_params+0x1e8>)
 8010960:	459b      	cmp	fp, r3
 8010962:	bfb8      	it	lt
 8010964:	469b      	movlt	fp, r3
 8010966:	42b3      	cmp	r3, r6
 8010968:	dadb      	bge.n	8010922 <acc_cal_algorithms_calc_pulse_params+0x4a>
 801096a:	f1b8 0f00 	cmp.w	r8, #0
 801096e:	bf0a      	itet	eq
 8010970:	2700      	moveq	r7, #0
 8010972:	4640      	movne	r0, r8
 8010974:	2001      	moveq	r0, #1
 8010976:	e7d4      	b.n	8010922 <acc_cal_algorithms_calc_pulse_params+0x4a>
 8010978:	f8cd c000 	str.w	ip, [sp]
 801097c:	b977      	cbnz	r7, 801099c <acc_cal_algorithms_calc_pulse_params+0xc4>
 801097e:	2000      	movs	r0, #0
 8010980:	b005      	add	sp, #20
 8010982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010986:	459b      	cmp	fp, r3
 8010988:	4680      	mov	r8, r0
 801098a:	da05      	bge.n	8010998 <acc_cal_algorithms_calc_pulse_params+0xc0>
 801098c:	469b      	mov	fp, r3
 801098e:	2700      	movs	r7, #0
 8010990:	e7c7      	b.n	8010922 <acc_cal_algorithms_calc_pulse_params+0x4a>
 8010992:	f04f 0801 	mov.w	r8, #1
 8010996:	e7c4      	b.n	8010922 <acc_cal_algorithms_calc_pulse_params+0x4a>
 8010998:	2700      	movs	r7, #0
 801099a:	e7c2      	b.n	8010922 <acc_cal_algorithms_calc_pulse_params+0x4a>
 801099c:	f1b8 0f00 	cmp.w	r8, #0
 80109a0:	d0ed      	beq.n	801097e <acc_cal_algorithms_calc_pulse_params+0xa6>
 80109a2:	2800      	cmp	r0, #0
 80109a4:	d0eb      	beq.n	801097e <acc_cal_algorithms_calc_pulse_params+0xa6>
 80109a6:	9b02      	ldr	r3, [sp, #8]
 80109a8:	f1b3 0e1c 	subs.w	lr, r3, #28
 80109ac:	d0e7      	beq.n	801097e <acc_cal_algorithms_calc_pulse_params+0xa6>
 80109ae:	9f03      	ldr	r7, [sp, #12]
 80109b0:	f8cd a008 	str.w	sl, [sp, #8]
 80109b4:	f04f 0c00 	mov.w	ip, #0
 80109b8:	9003      	str	r0, [sp, #12]
 80109ba:	3712      	adds	r7, #18
 80109bc:	46e1      	mov	r9, ip
 80109be:	46e0      	mov	r8, ip
 80109c0:	46e2      	mov	sl, ip
 80109c2:	4660      	mov	r0, ip
 80109c4:	f937 3f02 	ldrsh.w	r3, [r7, #2]!
 80109c8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80109cc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80109d0:	463d      	mov	r5, r7
 80109d2:	463c      	mov	r4, r7
 80109d4:	210a      	movs	r1, #10
 80109d6:	f934 6d02 	ldrsh.w	r6, [r4, #-2]!
 80109da:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
 80109de:	fb01 3306 	mla	r3, r1, r6, r3
 80109e2:	fb01 3302 	mla	r3, r1, r2, r3
 80109e6:	3901      	subs	r1, #1
 80109e8:	d1f5      	bne.n	80109d6 <acc_cal_algorithms_calc_pulse_params+0xfe>
 80109ea:	4543      	cmp	r3, r8
 80109ec:	dc64      	bgt.n	8010ab8 <acc_cal_algorithms_calc_pulse_params+0x1e0>
 80109ee:	454b      	cmp	r3, r9
 80109f0:	bfa8      	it	ge
 80109f2:	4643      	movge	r3, r8
 80109f4:	da61      	bge.n	8010aba <acc_cal_algorithms_calc_pulse_params+0x1e2>
 80109f6:	4699      	mov	r9, r3
 80109f8:	46e2      	mov	sl, ip
 80109fa:	f10c 0c01 	add.w	ip, ip, #1
 80109fe:	45f4      	cmp	ip, lr
 8010a00:	d1e0      	bne.n	80109c4 <acc_cal_algorithms_calc_pulse_params+0xec>
 8010a02:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8010a06:	4598      	cmp	r8, r3
 8010a08:	4605      	mov	r5, r0
 8010a0a:	4656      	mov	r6, sl
 8010a0c:	e9dd a002 	ldrd	sl, r0, [sp, #8]
 8010a10:	ddb5      	ble.n	801097e <acc_cal_algorithms_calc_pulse_params+0xa6>
 8010a12:	4b2c      	ldr	r3, [pc, #176]	@ (8010ac4 <acc_cal_algorithms_calc_pulse_params+0x1ec>)
 8010a14:	4599      	cmp	r9, r3
 8010a16:	dab2      	bge.n	801097e <acc_cal_algorithms_calc_pulse_params+0xa6>
 8010a18:	f1bb 0f00 	cmp.w	fp, #0
 8010a1c:	d0af      	beq.n	801097e <acc_cal_algorithms_calc_pulse_params+0xa6>
 8010a1e:	9b00      	ldr	r3, [sp, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d0ac      	beq.n	801097e <acc_cal_algorithms_calc_pulse_params+0xa6>
 8010a24:	9b01      	ldr	r3, [sp, #4]
 8010a26:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8010a28:	881b      	ldrh	r3, [r3, #0]
 8010a2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010a2e:	00db      	lsls	r3, r3, #3
 8010a30:	b144      	cbz	r4, 8010a44 <acc_cal_algorithms_calc_pulse_params+0x16c>
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d204      	bcs.n	8010a40 <acc_cal_algorithms_calc_pulse_params+0x168>
 8010a36:	43d9      	mvns	r1, r3
 8010a38:	4459      	add	r1, fp
 8010a3a:	4411      	add	r1, r2
 8010a3c:	fbb1 f1fb 	udiv	r1, r1, fp
 8010a40:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8010a42:	6021      	str	r1, [r4, #0]
 8010a44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010a46:	2900      	cmp	r1, #0
 8010a48:	d09a      	beq.n	8010980 <acc_cal_algorithms_calc_pulse_params+0xa8>
 8010a4a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010a4c:	2900      	cmp	r1, #0
 8010a4e:	d097      	beq.n	8010980 <acc_cal_algorithms_calc_pulse_params+0xa8>
 8010a50:	4629      	mov	r1, r5
 8010a52:	9c01      	ldr	r4, [sp, #4]
 8010a54:	310e      	adds	r1, #14
 8010a56:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 8010a5a:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
 8010a5e:	ea4f 05c4 	mov.w	r5, r4, lsl #3
 8010a62:	d205      	bcs.n	8010a70 <acc_cal_algorithms_calc_pulse_params+0x198>
 8010a64:	43db      	mvns	r3, r3
 8010a66:	445b      	add	r3, fp
 8010a68:	442b      	add	r3, r5
 8010a6a:	fbb3 f3fb 	udiv	r3, r3, fp
 8010a6e:	1ac9      	subs	r1, r1, r3
 8010a70:	9b01      	ldr	r3, [sp, #4]
 8010a72:	f106 0b0e 	add.w	fp, r6, #14
 8010a76:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
 8010a7a:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
 8010a7e:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 8010a82:	d907      	bls.n	8010a94 <acc_cal_algorithms_calc_pulse_params+0x1bc>
 8010a84:	9d00      	ldr	r5, [sp, #0]
 8010a86:	1e6b      	subs	r3, r5, #1
 8010a88:	4413      	add	r3, r2
 8010a8a:	1b1b      	subs	r3, r3, r4
 8010a8c:	fbb3 f3f5 	udiv	r3, r3, r5
 8010a90:	ebab 0b03 	sub.w	fp, fp, r3
 8010a94:	2900      	cmp	r1, #0
 8010a96:	f6ff af72 	blt.w	801097e <acc_cal_algorithms_calc_pulse_params+0xa6>
 8010a9a:	f1bb 0f00 	cmp.w	fp, #0
 8010a9e:	f6ff af6e 	blt.w	801097e <acc_cal_algorithms_calc_pulse_params+0xa6>
 8010aa2:	4559      	cmp	r1, fp
 8010aa4:	f73f af6b 	bgt.w	801097e <acc_cal_algorithms_calc_pulse_params+0xa6>
 8010aa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010aaa:	ebab 0b01 	sub.w	fp, fp, r1
 8010aae:	f8c3 b000 	str.w	fp, [r3]
 8010ab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ab4:	6019      	str	r1, [r3, #0]
 8010ab6:	e763      	b.n	8010980 <acc_cal_algorithms_calc_pulse_params+0xa8>
 8010ab8:	4660      	mov	r0, ip
 8010aba:	4698      	mov	r8, r3
 8010abc:	e79d      	b.n	80109fa <acc_cal_algorithms_calc_pulse_params+0x122>
 8010abe:	bf00      	nop
 8010ac0:	fffffd12 	.word	0xfffffd12
 8010ac4:	ffff3cb0 	.word	0xffff3cb0

08010ac8 <acc_cal_algorithms_pulseshaper_wavelet>:
 8010ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010acc:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 8010ad0:	ae04      	add	r6, sp, #16
 8010ad2:	af05      	add	r7, sp, #20
 8010ad4:	2400      	movs	r4, #0
 8010ad6:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8010ada:	9600      	str	r6, [sp, #0]
 8010adc:	460d      	mov	r5, r1
 8010ade:	aa08      	add	r2, sp, #32
 8010ae0:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8010ae4:	2190      	movs	r1, #144	@ 0x90
 8010ae6:	6034      	str	r4, [r6, #0]
 8010ae8:	603c      	str	r4, [r7, #0]
 8010aea:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8010aee:	4680      	mov	r8, r0
 8010af0:	f7ff fef2 	bl	80108d8 <acc_cal_algorithms_calc_pulse_params>
 8010af4:	b920      	cbnz	r0, 8010b00 <acc_cal_algorithms_pulseshaper_wavelet+0x38>
 8010af6:	2000      	movs	r0, #0
 8010af8:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 8010afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b00:	ab07      	add	r3, sp, #28
 8010b02:	9301      	str	r3, [sp, #4]
 8010b04:	ab06      	add	r3, sp, #24
 8010b06:	9300      	str	r3, [sp, #0]
 8010b08:	9402      	str	r4, [sp, #8]
 8010b0a:	aa08      	add	r2, sp, #32
 8010b0c:	f508 7090 	add.w	r0, r8, #288	@ 0x120
 8010b10:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8010b14:	21f0      	movs	r1, #240	@ 0xf0
 8010b16:	f7ff fedf 	bl	80108d8 <acc_cal_algorithms_calc_pulse_params>
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	d0eb      	beq.n	8010af6 <acc_cal_algorithms_pulseshaper_wavelet+0x2e>
 8010b1e:	683f      	ldr	r7, [r7, #0]
 8010b20:	9c07      	ldr	r4, [sp, #28]
 8010b22:	4b0b      	ldr	r3, [pc, #44]	@ (8010b50 <acc_cal_algorithms_pulseshaper_wavelet+0x88>)
 8010b24:	490b      	ldr	r1, [pc, #44]	@ (8010b54 <acc_cal_algorithms_pulseshaper_wavelet+0x8c>)
 8010b26:	6832      	ldr	r2, [r6, #0]
 8010b28:	1be4      	subs	r4, r4, r7
 8010b2a:	fb03 f304 	mul.w	r3, r3, r4
 8010b2e:	fb01 f707 	mul.w	r7, r1, r7
 8010b32:	fb01 f202 	mul.w	r2, r1, r2
 8010b36:	0c1b      	lsrs	r3, r3, #16
 8010b38:	ebc3 3357 	rsb	r3, r3, r7, lsr #13
 8010b3c:	fb01 f104 	mul.w	r1, r1, r4
 8010b40:	0b52      	lsrs	r2, r2, #13
 8010b42:	e9c5 3100 	strd	r3, r1, [r5]
 8010b46:	60aa      	str	r2, [r5, #8]
 8010b48:	f50d 7d44 	add.w	sp, sp, #784	@ 0x310
 8010b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b50:	00042aa8 	.word	0x00042aa8
 8010b54:	00010aaa 	.word	0x00010aaa

08010b58 <acc_cal_algorithms_pulseshaper_supply>:
 8010b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b5c:	f5ad 7d47 	sub.w	sp, sp, #796	@ 0x31c
 8010b60:	2600      	movs	r6, #0
 8010b62:	af06      	add	r7, sp, #24
 8010b64:	f10d 0814 	add.w	r8, sp, #20
 8010b68:	4605      	mov	r5, r0
 8010b6a:	460c      	mov	r4, r1
 8010b6c:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8010b70:	3002      	adds	r0, #2
 8010b72:	aa0a      	add	r2, sp, #40	@ 0x28
 8010b74:	f8cd 8000 	str.w	r8, [sp]
 8010b78:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8010b7c:	f240 111f 	movw	r1, #287	@ 0x11f
 8010b80:	f7ff feaa 	bl	80108d8 <acc_cal_algorithms_calc_pulse_params>
 8010b84:	b920      	cbnz	r0, 8010b90 <acc_cal_algorithms_pulseshaper_supply+0x38>
 8010b86:	2000      	movs	r0, #0
 8010b88:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 8010b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b90:	ab08      	add	r3, sp, #32
 8010b92:	f10d 0a1c 	add.w	sl, sp, #28
 8010b96:	f10d 0b10 	add.w	fp, sp, #16
 8010b9a:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010b9e:	f8cd b000 	str.w	fp, [sp]
 8010ba2:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8010ba6:	aa0a      	add	r2, sp, #40	@ 0x28
 8010ba8:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8010bac:	f505 7010 	add.w	r0, r5, #576	@ 0x240
 8010bb0:	f7ff fe92 	bl	80108d8 <acc_cal_algorithms_calc_pulse_params>
 8010bb4:	2800      	cmp	r0, #0
 8010bb6:	d0e6      	beq.n	8010b86 <acc_cal_algorithms_pulseshaper_supply+0x2e>
 8010bb8:	f10d 0924 	add.w	r9, sp, #36	@ 0x24
 8010bbc:	e9cd 6600 	strd	r6, r6, [sp]
 8010bc0:	aa0a      	add	r2, sp, #40	@ 0x28
 8010bc2:	f505 6090 	add.w	r0, r5, #1152	@ 0x480
 8010bc6:	f8cd 9008 	str.w	r9, [sp, #8]
 8010bca:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8010bce:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8010bd2:	f7ff fe81 	bl	80108d8 <acc_cal_algorithms_calc_pulse_params>
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	d0d5      	beq.n	8010b86 <acc_cal_algorithms_pulseshaper_supply+0x2e>
 8010bda:	f8db c000 	ldr.w	ip, [fp]
 8010bde:	f8d8 6000 	ldr.w	r6, [r8]
 8010be2:	f8dd e020 	ldr.w	lr, [sp, #32]
 8010be6:	f8d7 8000 	ldr.w	r8, [r7]
 8010bea:	f8da 2000 	ldr.w	r2, [sl]
 8010bee:	f8d9 9000 	ldr.w	r9, [r9]
 8010bf2:	4f17      	ldr	r7, [pc, #92]	@ (8010c50 <acc_cal_algorithms_pulseshaper_supply+0xf8>)
 8010bf4:	4d17      	ldr	r5, [pc, #92]	@ (8010c54 <acc_cal_algorithms_pulseshaper_supply+0xfc>)
 8010bf6:	4918      	ldr	r1, [pc, #96]	@ (8010c58 <acc_cal_algorithms_pulseshaper_supply+0x100>)
 8010bf8:	4b18      	ldr	r3, [pc, #96]	@ (8010c5c <acc_cal_algorithms_pulseshaper_supply+0x104>)
 8010bfa:	eba9 090e 	sub.w	r9, r9, lr
 8010bfe:	eba6 060c 	sub.w	r6, r6, ip
 8010c02:	eba2 0208 	sub.w	r2, r2, r8
 8010c06:	fb07 f706 	mul.w	r7, r7, r6
 8010c0a:	fb05 f502 	mul.w	r5, r5, r2
 8010c0e:	fb01 f109 	mul.w	r1, r1, r9
 8010c12:	fb03 fc0c 	mul.w	ip, r3, ip
 8010c16:	fb03 f808 	mul.w	r8, r3, r8
 8010c1a:	fb03 fe0e 	mul.w	lr, r3, lr
 8010c1e:	0c3f      	lsrs	r7, r7, #16
 8010c20:	0c2d      	lsrs	r5, r5, #16
 8010c22:	0c09      	lsrs	r1, r1, #16
 8010c24:	fb03 f606 	mul.w	r6, r3, r6
 8010c28:	fb03 f202 	mul.w	r2, r3, r2
 8010c2c:	ebc7 375c 	rsb	r7, r7, ip, lsr #13
 8010c30:	ebc5 3558 	rsb	r5, r5, r8, lsr #13
 8010c34:	fb03 f309 	mul.w	r3, r3, r9
 8010c38:	ebc1 315e 	rsb	r1, r1, lr, lsr #13
 8010c3c:	e9c4 7600 	strd	r7, r6, [r4]
 8010c40:	e9c4 5202 	strd	r5, r2, [r4, #8]
 8010c44:	e9c4 1304 	strd	r1, r3, [r4, #16]
 8010c48:	f50d 7d47 	add.w	sp, sp, #796	@ 0x31c
 8010c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c50:	00021554 	.word	0x00021554
 8010c54:	00074aa6 	.word	0x00074aa6
 8010c58:	000b754e 	.word	0x000b754e
 8010c5c:	00010aaa 	.word	0x00010aaa

08010c60 <acc_a121_cal_session_start_1_pll_cbank_temp_program>:
 8010c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c64:	468a      	mov	sl, r1
 8010c66:	b085      	sub	sp, #20
 8010c68:	4681      	mov	r9, r0
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	4650      	mov	r0, sl
 8010c6e:	461f      	mov	r7, r3
 8010c70:	2500      	movs	r5, #0
 8010c72:	ab03      	add	r3, sp, #12
 8010c74:	aa02      	add	r2, sp, #8
 8010c76:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8010c7a:	f001 f8bb 	bl	8011df4 <acc_sensor_a121_prepare_load_confmem>
 8010c7e:	4648      	mov	r0, r9
 8010c80:	f001 f962 	bl	8011f48 <acc_sensor_protocol_a121_prepare_load>
 8010c84:	b300      	cbz	r0, 8010cc8 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 8010c86:	9b03      	ldr	r3, [sp, #12]
 8010c88:	f640 3b4a 	movw	fp, #2890	@ 0xb4a
 8010c8c:	ebab 0405 	sub.w	r4, fp, r5
 8010c90:	429c      	cmp	r4, r3
 8010c92:	bf2c      	ite	cs
 8010c94:	b29c      	uxthcs	r4, r3
 8010c96:	b2a4      	uxthcc	r4, r4
 8010c98:	9e02      	ldr	r6, [sp, #8]
 8010c9a:	f003 fa59 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010c9e:	ea4f 0855 	mov.w	r8, r5, lsr #1
 8010ca2:	0862      	lsrs	r2, r4, #1
 8010ca4:	4631      	mov	r1, r6
 8010ca6:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 8010caa:	f003 f819 	bl	8013ce0 <acc_confprogram_copy>
 8010cae:	f003 fa53 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010cb2:	887a      	ldrh	r2, [r7, #2]
 8010cb4:	211c      	movs	r1, #28
 8010cb6:	e9cd 1200 	strd	r1, r2, [sp]
 8010cba:	4603      	mov	r3, r0
 8010cbc:	4622      	mov	r2, r4
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	4630      	mov	r0, r6
 8010cc2:	f002 ff43 	bl	8013b4c <acc_confprogram_patch_offset>
 8010cc6:	b918      	cbnz	r0, 8010cd0 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x70>
 8010cc8:	2000      	movs	r0, #0
 8010cca:	b005      	add	sp, #20
 8010ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cd0:	f003 fa42 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010cd4:	88ba      	ldrh	r2, [r7, #4]
 8010cd6:	211a      	movs	r1, #26
 8010cd8:	e9cd 1200 	strd	r1, r2, [sp]
 8010cdc:	4603      	mov	r3, r0
 8010cde:	4622      	mov	r2, r4
 8010ce0:	4629      	mov	r1, r5
 8010ce2:	4630      	mov	r0, r6
 8010ce4:	f002 ff32 	bl	8013b4c <acc_confprogram_patch_offset>
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	d0ed      	beq.n	8010cc8 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 8010cec:	f003 fa34 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010cf0:	88fa      	ldrh	r2, [r7, #6]
 8010cf2:	9201      	str	r2, [sp, #4]
 8010cf4:	221b      	movs	r2, #27
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	9200      	str	r2, [sp, #0]
 8010cfa:	4629      	mov	r1, r5
 8010cfc:	4622      	mov	r2, r4
 8010cfe:	4630      	mov	r0, r6
 8010d00:	f002 ff24 	bl	8013b4c <acc_confprogram_patch_offset>
 8010d04:	2800      	cmp	r0, #0
 8010d06:	d0df      	beq.n	8010cc8 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 8010d08:	f003 fa26 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010d0c:	893a      	ldrh	r2, [r7, #8]
 8010d0e:	9201      	str	r2, [sp, #4]
 8010d10:	2219      	movs	r2, #25
 8010d12:	4603      	mov	r3, r0
 8010d14:	9200      	str	r2, [sp, #0]
 8010d16:	4630      	mov	r0, r6
 8010d18:	4622      	mov	r2, r4
 8010d1a:	4629      	mov	r1, r5
 8010d1c:	f002 ff16 	bl	8013b4c <acc_confprogram_patch_offset>
 8010d20:	4606      	mov	r6, r0
 8010d22:	4623      	mov	r3, r4
 8010d24:	4652      	mov	r2, sl
 8010d26:	4641      	mov	r1, r8
 8010d28:	4648      	mov	r0, r9
 8010d2a:	2e00      	cmp	r6, #0
 8010d2c:	d0cc      	beq.n	8010cc8 <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x68>
 8010d2e:	f001 f879 	bl	8011e24 <acc_sensor_a121_load_confmem>
 8010d32:	9b03      	ldr	r3, [sp, #12]
 8010d34:	441d      	add	r5, r3
 8010d36:	b2ad      	uxth	r5, r5
 8010d38:	f640 3249 	movw	r2, #2889	@ 0xb49
 8010d3c:	4295      	cmp	r5, r2
 8010d3e:	d9a5      	bls.n	8010c8c <acc_a121_cal_session_start_1_pll_cbank_temp_program+0x2c>
 8010d40:	4648      	mov	r0, r9
 8010d42:	f240 115b 	movw	r1, #347	@ 0x15b
 8010d46:	f001 f955 	bl	8011ff4 <acc_sensor_protocol_a121_run_program>
 8010d4a:	b005      	add	sp, #20
 8010d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d50 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program>:
 8010d50:	b570      	push	{r4, r5, r6, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	460d      	mov	r5, r1
 8010d56:	4604      	mov	r4, r0
 8010d58:	f003 f9fa 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010d5c:	9005      	str	r0, [sp, #20]
 8010d5e:	f003 f9fb 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010d62:	4e09      	ldr	r6, [pc, #36]	@ (8010d88 <acc_a121_cal_session_start_2_pll_ibias_vfast2_ldo_program+0x38>)
 8010d64:	9905      	ldr	r1, [sp, #20]
 8010d66:	9501      	str	r5, [sp, #4]
 8010d68:	2225      	movs	r2, #37	@ 0x25
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	9200      	str	r2, [sp, #0]
 8010d6e:	4620      	mov	r0, r4
 8010d70:	9602      	str	r6, [sp, #8]
 8010d72:	2200      	movs	r2, #0
 8010d74:	f002 ff4c 	bl	8013c10 <acc_confprogram_live_patch>
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f240 2132 	movw	r1, #562	@ 0x232
 8010d7e:	b006      	add	sp, #24
 8010d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d84:	f001 b936 	b.w	8011ff4 <acc_sensor_protocol_a121_run_program>
 8010d88:	08011dc1 	.word	0x08011dc1

08010d8c <acc_a121_cal_session_start_3_delay_cbank_program>:
 8010d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d8e:	b087      	sub	sp, #28
 8010d90:	4604      	mov	r4, r0
 8010d92:	460e      	mov	r6, r1
 8010d94:	4615      	mov	r5, r2
 8010d96:	f003 f9db 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010d9a:	9005      	str	r0, [sp, #20]
 8010d9c:	f003 f9dc 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010da0:	4f10      	ldr	r7, [pc, #64]	@ (8010de4 <acc_a121_cal_session_start_3_delay_cbank_program+0x58>)
 8010da2:	9905      	ldr	r1, [sp, #20]
 8010da4:	9601      	str	r6, [sp, #4]
 8010da6:	2226      	movs	r2, #38	@ 0x26
 8010da8:	4603      	mov	r3, r0
 8010daa:	9200      	str	r2, [sp, #0]
 8010dac:	4620      	mov	r0, r4
 8010dae:	2200      	movs	r2, #0
 8010db0:	9702      	str	r7, [sp, #8]
 8010db2:	f002 ff2d 	bl	8013c10 <acc_confprogram_live_patch>
 8010db6:	f003 f9cb 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010dba:	9005      	str	r0, [sp, #20]
 8010dbc:	f003 f9cc 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010dc0:	2224      	movs	r2, #36	@ 0x24
 8010dc2:	9905      	ldr	r1, [sp, #20]
 8010dc4:	9200      	str	r2, [sp, #0]
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	9501      	str	r5, [sp, #4]
 8010dca:	9702      	str	r7, [sp, #8]
 8010dcc:	4620      	mov	r0, r4
 8010dce:	2200      	movs	r2, #0
 8010dd0:	f002 ff1e 	bl	8013c10 <acc_confprogram_live_patch>
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f240 21c5 	movw	r1, #709	@ 0x2c5
 8010dda:	b007      	add	sp, #28
 8010ddc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010de0:	f001 b908 	b.w	8011ff4 <acc_sensor_protocol_a121_run_program>
 8010de4:	08011dc1 	.word	0x08011dc1

08010de8 <acc_a121_cal_session_start_4_bba_vga_program>:
 8010de8:	f44f 7145 	mov.w	r1, #788	@ 0x314
 8010dec:	f001 b902 	b.w	8011ff4 <acc_sensor_protocol_a121_run_program>

08010df0 <acc_a121_cal_session_start_5_area_index_program>:
 8010df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010df2:	b087      	sub	sp, #28
 8010df4:	4604      	mov	r4, r0
 8010df6:	460f      	mov	r7, r1
 8010df8:	4616      	mov	r6, r2
 8010dfa:	f003 f9a9 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010dfe:	9005      	str	r0, [sp, #20]
 8010e00:	f003 f9aa 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010e04:	883a      	ldrh	r2, [r7, #0]
 8010e06:	4d21      	ldr	r5, [pc, #132]	@ (8010e8c <acc_a121_cal_session_start_5_area_index_program+0x9c>)
 8010e08:	9201      	str	r2, [sp, #4]
 8010e0a:	2207      	movs	r2, #7
 8010e0c:	9905      	ldr	r1, [sp, #20]
 8010e0e:	9200      	str	r2, [sp, #0]
 8010e10:	4603      	mov	r3, r0
 8010e12:	2200      	movs	r2, #0
 8010e14:	4620      	mov	r0, r4
 8010e16:	9502      	str	r5, [sp, #8]
 8010e18:	f002 fefa 	bl	8013c10 <acc_confprogram_live_patch>
 8010e1c:	f003 f998 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010e20:	9005      	str	r0, [sp, #20]
 8010e22:	f003 f999 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010e26:	2208      	movs	r2, #8
 8010e28:	9905      	ldr	r1, [sp, #20]
 8010e2a:	9601      	str	r6, [sp, #4]
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	9200      	str	r2, [sp, #0]
 8010e30:	9502      	str	r5, [sp, #8]
 8010e32:	2200      	movs	r2, #0
 8010e34:	4620      	mov	r0, r4
 8010e36:	f002 feeb 	bl	8013c10 <acc_confprogram_live_patch>
 8010e3a:	f003 f989 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010e3e:	9005      	str	r0, [sp, #20]
 8010e40:	f003 f98a 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010e44:	2603      	movs	r6, #3
 8010e46:	2209      	movs	r2, #9
 8010e48:	9905      	ldr	r1, [sp, #20]
 8010e4a:	9502      	str	r5, [sp, #8]
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	e9cd 2600 	strd	r2, r6, [sp]
 8010e52:	4620      	mov	r0, r4
 8010e54:	2200      	movs	r2, #0
 8010e56:	f002 fedb 	bl	8013c10 <acc_confprogram_live_patch>
 8010e5a:	f003 f979 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010e5e:	9005      	str	r0, [sp, #20]
 8010e60:	f003 f97a 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010e64:	2606      	movs	r6, #6
 8010e66:	220a      	movs	r2, #10
 8010e68:	e9cd 2600 	strd	r2, r6, [sp]
 8010e6c:	9905      	ldr	r1, [sp, #20]
 8010e6e:	9502      	str	r5, [sp, #8]
 8010e70:	4603      	mov	r3, r0
 8010e72:	2200      	movs	r2, #0
 8010e74:	4620      	mov	r0, r4
 8010e76:	f002 fecb 	bl	8013c10 <acc_confprogram_live_patch>
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f240 31d5 	movw	r1, #981	@ 0x3d5
 8010e80:	b007      	add	sp, #28
 8010e82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010e86:	f001 b8b5 	b.w	8011ff4 <acc_sensor_protocol_a121_run_program>
 8010e8a:	bf00      	nop
 8010e8c:	08011dc1 	.word	0x08011dc1

08010e90 <acc_a121_cal_session_start_6_tx_freq_program>:
 8010e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e92:	b087      	sub	sp, #28
 8010e94:	460d      	mov	r5, r1
 8010e96:	4604      	mov	r4, r0
 8010e98:	f003 f95a 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010e9c:	9005      	str	r0, [sp, #20]
 8010e9e:	f003 f95b 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010ea2:	882a      	ldrh	r2, [r5, #0]
 8010ea4:	4e41      	ldr	r6, [pc, #260]	@ (8010fac <acc_a121_cal_session_start_6_tx_freq_program+0x11c>)
 8010ea6:	9201      	str	r2, [sp, #4]
 8010ea8:	2221      	movs	r2, #33	@ 0x21
 8010eaa:	9905      	ldr	r1, [sp, #20]
 8010eac:	9200      	str	r2, [sp, #0]
 8010eae:	4603      	mov	r3, r0
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	9602      	str	r6, [sp, #8]
 8010eb6:	f002 feab 	bl	8013c10 <acc_confprogram_live_patch>
 8010eba:	f003 f949 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010ebe:	9005      	str	r0, [sp, #20]
 8010ec0:	f003 f94a 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010ec4:	886f      	ldrh	r7, [r5, #2]
 8010ec6:	9905      	ldr	r1, [sp, #20]
 8010ec8:	9701      	str	r7, [sp, #4]
 8010eca:	2222      	movs	r2, #34	@ 0x22
 8010ecc:	4603      	mov	r3, r0
 8010ece:	9200      	str	r2, [sp, #0]
 8010ed0:	9602      	str	r6, [sp, #8]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	4620      	mov	r0, r4
 8010ed6:	f002 fe9b 	bl	8013c10 <acc_confprogram_live_patch>
 8010eda:	f003 f939 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010ede:	9005      	str	r0, [sp, #20]
 8010ee0:	f003 f93a 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010ee4:	88ef      	ldrh	r7, [r5, #6]
 8010ee6:	9905      	ldr	r1, [sp, #20]
 8010ee8:	9701      	str	r7, [sp, #4]
 8010eea:	2201      	movs	r2, #1
 8010eec:	4603      	mov	r3, r0
 8010eee:	9200      	str	r2, [sp, #0]
 8010ef0:	9602      	str	r6, [sp, #8]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f002 fe8b 	bl	8013c10 <acc_confprogram_live_patch>
 8010efa:	f003 f929 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010efe:	9005      	str	r0, [sp, #20]
 8010f00:	f003 f92a 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010f04:	892f      	ldrh	r7, [r5, #8]
 8010f06:	9905      	ldr	r1, [sp, #20]
 8010f08:	9701      	str	r7, [sp, #4]
 8010f0a:	2202      	movs	r2, #2
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	9200      	str	r2, [sp, #0]
 8010f10:	9602      	str	r6, [sp, #8]
 8010f12:	2200      	movs	r2, #0
 8010f14:	4620      	mov	r0, r4
 8010f16:	f002 fe7b 	bl	8013c10 <acc_confprogram_live_patch>
 8010f1a:	f003 f919 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010f1e:	9005      	str	r0, [sp, #20]
 8010f20:	f003 f91a 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010f24:	89af      	ldrh	r7, [r5, #12]
 8010f26:	9905      	ldr	r1, [sp, #20]
 8010f28:	9701      	str	r7, [sp, #4]
 8010f2a:	2203      	movs	r2, #3
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	9200      	str	r2, [sp, #0]
 8010f30:	9602      	str	r6, [sp, #8]
 8010f32:	2200      	movs	r2, #0
 8010f34:	4620      	mov	r0, r4
 8010f36:	f002 fe6b 	bl	8013c10 <acc_confprogram_live_patch>
 8010f3a:	f003 f909 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010f3e:	9005      	str	r0, [sp, #20]
 8010f40:	f003 f90a 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010f44:	89ef      	ldrh	r7, [r5, #14]
 8010f46:	9905      	ldr	r1, [sp, #20]
 8010f48:	9701      	str	r7, [sp, #4]
 8010f4a:	2204      	movs	r2, #4
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	9200      	str	r2, [sp, #0]
 8010f50:	9602      	str	r6, [sp, #8]
 8010f52:	2200      	movs	r2, #0
 8010f54:	4620      	mov	r0, r4
 8010f56:	f002 fe5b 	bl	8013c10 <acc_confprogram_live_patch>
 8010f5a:	f003 f8f9 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010f5e:	9005      	str	r0, [sp, #20]
 8010f60:	f003 f8fa 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010f64:	8a6f      	ldrh	r7, [r5, #18]
 8010f66:	9905      	ldr	r1, [sp, #20]
 8010f68:	9602      	str	r6, [sp, #8]
 8010f6a:	2205      	movs	r2, #5
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	9200      	str	r2, [sp, #0]
 8010f70:	9701      	str	r7, [sp, #4]
 8010f72:	2200      	movs	r2, #0
 8010f74:	4620      	mov	r0, r4
 8010f76:	f002 fe4b 	bl	8013c10 <acc_confprogram_live_patch>
 8010f7a:	f003 f8e9 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010f7e:	9005      	str	r0, [sp, #20]
 8010f80:	f003 f8ea 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010f84:	2206      	movs	r2, #6
 8010f86:	4603      	mov	r3, r0
 8010f88:	8aa8      	ldrh	r0, [r5, #20]
 8010f8a:	9905      	ldr	r1, [sp, #20]
 8010f8c:	9001      	str	r0, [sp, #4]
 8010f8e:	9200      	str	r2, [sp, #0]
 8010f90:	9602      	str	r6, [sp, #8]
 8010f92:	4620      	mov	r0, r4
 8010f94:	2200      	movs	r2, #0
 8010f96:	f002 fe3b 	bl	8013c10 <acc_confprogram_live_patch>
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f44f 717b 	mov.w	r1, #1004	@ 0x3ec
 8010fa0:	b007      	add	sp, #28
 8010fa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010fa6:	f001 b825 	b.w	8011ff4 <acc_sensor_protocol_a121_run_program>
 8010faa:	bf00      	nop
 8010fac:	08011dc1 	.word	0x08011dc1

08010fb0 <acc_a121_cal_session_start_7_rx_freq_program>:
 8010fb0:	b570      	push	{r4, r5, r6, lr}
 8010fb2:	b086      	sub	sp, #24
 8010fb4:	460d      	mov	r5, r1
 8010fb6:	4604      	mov	r4, r0
 8010fb8:	f003 f8ca 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010fbc:	9005      	str	r0, [sp, #20]
 8010fbe:	f003 f8cb 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010fc2:	4e09      	ldr	r6, [pc, #36]	@ (8010fe8 <acc_a121_cal_session_start_7_rx_freq_program+0x38>)
 8010fc4:	9905      	ldr	r1, [sp, #20]
 8010fc6:	9501      	str	r5, [sp, #4]
 8010fc8:	220c      	movs	r2, #12
 8010fca:	4603      	mov	r3, r0
 8010fcc:	9200      	str	r2, [sp, #0]
 8010fce:	4620      	mov	r0, r4
 8010fd0:	9602      	str	r6, [sp, #8]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f002 fe1c 	bl	8013c10 <acc_confprogram_live_patch>
 8010fd8:	4620      	mov	r0, r4
 8010fda:	f240 4116 	movw	r1, #1046	@ 0x416
 8010fde:	b006      	add	sp, #24
 8010fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fe4:	f001 b806 	b.w	8011ff4 <acc_sensor_protocol_a121_run_program>
 8010fe8:	08011dc1 	.word	0x08011dc1

08010fec <acc_a121_cal_session_start_8_phase_enhancement_program>:
 8010fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fee:	b087      	sub	sp, #28
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	460e      	mov	r6, r1
 8010ff4:	f003 f8ac 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8010ff8:	9005      	str	r0, [sp, #20]
 8010ffa:	f003 f8ad 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 8010ffe:	4d19      	ldr	r5, [pc, #100]	@ (8011064 <acc_a121_cal_session_start_8_phase_enhancement_program+0x78>)
 8011000:	9905      	ldr	r1, [sp, #20]
 8011002:	9601      	str	r6, [sp, #4]
 8011004:	220b      	movs	r2, #11
 8011006:	4603      	mov	r3, r0
 8011008:	9200      	str	r2, [sp, #0]
 801100a:	4620      	mov	r0, r4
 801100c:	2200      	movs	r2, #0
 801100e:	9502      	str	r5, [sp, #8]
 8011010:	f002 fdfe 	bl	8013c10 <acc_confprogram_live_patch>
 8011014:	f003 f89c 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8011018:	9005      	str	r0, [sp, #20]
 801101a:	f003 f89d 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 801101e:	2609      	movs	r6, #9
 8011020:	2200      	movs	r2, #0
 8011022:	e9cd 6200 	strd	r6, r2, [sp]
 8011026:	9905      	ldr	r1, [sp, #20]
 8011028:	9502      	str	r5, [sp, #8]
 801102a:	4603      	mov	r3, r0
 801102c:	4620      	mov	r0, r4
 801102e:	f002 fdef 	bl	8013c10 <acc_confprogram_live_patch>
 8011032:	f003 f88d 	bl	8014150 <acc_image_a121_r1a_cal_session_get>
 8011036:	9005      	str	r0, [sp, #20]
 8011038:	f003 f88e 	bl	8014158 <acc_image_a121_r1a_cal_session_param_table_get>
 801103c:	277e      	movs	r7, #126	@ 0x7e
 801103e:	260a      	movs	r6, #10
 8011040:	9905      	ldr	r1, [sp, #20]
 8011042:	9502      	str	r5, [sp, #8]
 8011044:	4603      	mov	r3, r0
 8011046:	e9cd 6700 	strd	r6, r7, [sp]
 801104a:	2200      	movs	r2, #0
 801104c:	4620      	mov	r0, r4
 801104e:	f002 fddf 	bl	8013c10 <acc_confprogram_live_patch>
 8011052:	4620      	mov	r0, r4
 8011054:	f240 4152 	movw	r1, #1106	@ 0x452
 8011058:	b007      	add	sp, #28
 801105a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801105e:	f000 bfc9 	b.w	8011ff4 <acc_sensor_protocol_a121_run_program>
 8011062:	bf00      	nop
 8011064:	08011dc1 	.word	0x08011dc1

08011068 <acc_a121_cal_session_start_9_pulseshaper_program>:
 8011068:	f240 417b 	movw	r1, #1147	@ 0x47b
 801106c:	f000 bfc2 	b.w	8011ff4 <acc_sensor_protocol_a121_run_program>

08011070 <acc_a121_cal_session_ack_program>:
 8011070:	b530      	push	{r4, r5, lr}
 8011072:	b083      	sub	sp, #12
 8011074:	4604      	mov	r4, r0
 8011076:	aa01      	add	r2, sp, #4
 8011078:	2101      	movs	r1, #1
 801107a:	f001 f885 	bl	8012188 <acc_sensor_protocol_a121_get_event>
 801107e:	4620      	mov	r0, r4
 8011080:	2200      	movs	r2, #0
 8011082:	2101      	movs	r1, #1
 8011084:	f001 f838 	bl	80120f8 <acc_sensor_protocol_a121_ack_event>
 8011088:	a801      	add	r0, sp, #4
 801108a:	f001 f8ef 	bl	801226c <acc_sensor_protocol_a121_is_done>
 801108e:	4604      	mov	r4, r0
 8011090:	b930      	cbnz	r0, 80110a0 <acc_a121_cal_session_ack_program+0x30>
 8011092:	4a05      	ldr	r2, [pc, #20]	@ (80110a8 <acc_a121_cal_session_ack_program+0x38>)
 8011094:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011098:	6915      	ldr	r5, [r2, #16]
 801109a:	4904      	ldr	r1, [pc, #16]	@ (80110ac <acc_a121_cal_session_ack_program+0x3c>)
 801109c:	4a04      	ldr	r2, [pc, #16]	@ (80110b0 <acc_a121_cal_session_ack_program+0x40>)
 801109e:	47a8      	blx	r5
 80110a0:	4620      	mov	r0, r4
 80110a2:	b003      	add	sp, #12
 80110a4:	bd30      	pop	{r4, r5, pc}
 80110a6:	bf00      	nop
 80110a8:	200008cc 	.word	0x200008cc
 80110ac:	0801a9d8 	.word	0x0801a9d8
 80110b0:	0801a990 	.word	0x0801a990

080110b4 <acc_a121_cal_session_get_1_pll_cbank_temp_program_data>:
 80110b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b8:	4688      	mov	r8, r1
 80110ba:	4607      	mov	r7, r0
 80110bc:	2132      	movs	r1, #50	@ 0x32
 80110be:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80110c2:	461e      	mov	r6, r3
 80110c4:	f002 fe66 	bl	8013d94 <acc_sensor_reg_read>
 80110c8:	2312      	movs	r3, #18
 80110ca:	2200      	movs	r2, #0
 80110cc:	4641      	mov	r1, r8
 80110ce:	4638      	mov	r0, r7
 80110d0:	f000 fed2 	bl	8011e78 <acc_sensor_a121_buffer_processed_read>
 80110d4:	8802      	ldrh	r2, [r0, #0]
 80110d6:	8032      	strh	r2, [r6, #0]
 80110d8:	8842      	ldrh	r2, [r0, #2]
 80110da:	802a      	strh	r2, [r5, #0]
 80110dc:	1d03      	adds	r3, r0, #4
 80110de:	6023      	str	r3, [r4, #0]
 80110e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080110e4 <acc_a121_cal_session_get_2_pll_ibias_vfast2_ldo_program_data>:
 80110e4:	b570      	push	{r4, r5, r6, lr}
 80110e6:	4616      	mov	r6, r2
 80110e8:	461c      	mov	r4, r3
 80110ea:	2200      	movs	r2, #0
 80110ec:	2341      	movs	r3, #65	@ 0x41
 80110ee:	9d04      	ldr	r5, [sp, #16]
 80110f0:	f000 fec2 	bl	8011e78 <acc_sensor_a121_buffer_processed_read>
 80110f4:	8c02      	ldrh	r2, [r0, #32]
 80110f6:	6030      	str	r0, [r6, #0]
 80110f8:	f100 0322 	add.w	r3, r0, #34	@ 0x22
 80110fc:	8022      	strh	r2, [r4, #0]
 80110fe:	602b      	str	r3, [r5, #0]
 8011100:	bd70      	pop	{r4, r5, r6, pc}
 8011102:	bf00      	nop

08011104 <acc_a121_cal_session_get_3_delay_cbank_program_data>:
 8011104:	b510      	push	{r4, lr}
 8011106:	2320      	movs	r3, #32
 8011108:	4614      	mov	r4, r2
 801110a:	2200      	movs	r2, #0
 801110c:	f000 feb4 	bl	8011e78 <acc_sensor_a121_buffer_processed_read>
 8011110:	6020      	str	r0, [r4, #0]
 8011112:	bd10      	pop	{r4, pc}

08011114 <acc_a121_cal_session_get_4_bba_vga_program_data>:
 8011114:	b510      	push	{r4, lr}
 8011116:	2350      	movs	r3, #80	@ 0x50
 8011118:	4614      	mov	r4, r2
 801111a:	2200      	movs	r2, #0
 801111c:	f000 feac 	bl	8011e78 <acc_sensor_a121_buffer_processed_read>
 8011120:	6020      	str	r0, [r4, #0]
 8011122:	bd10      	pop	{r4, pc}

08011124 <acc_a121_cal_session_get_5_area_index_program_data>:
 8011124:	b510      	push	{r4, lr}
 8011126:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801112a:	4614      	mov	r4, r2
 801112c:	2200      	movs	r2, #0
 801112e:	f000 fea3 	bl	8011e78 <acc_sensor_a121_buffer_processed_read>
 8011132:	6020      	str	r0, [r4, #0]
 8011134:	bd10      	pop	{r4, pc}
 8011136:	bf00      	nop

08011138 <acc_a121_cal_session_get_6_tx_freq_program_data>:
 8011138:	f7ff bff4 	b.w	8011124 <acc_a121_cal_session_get_5_area_index_program_data>

0801113c <acc_a121_cal_session_get_7_rx_freq_program_data>:
 801113c:	b510      	push	{r4, lr}
 801113e:	2310      	movs	r3, #16
 8011140:	4614      	mov	r4, r2
 8011142:	2200      	movs	r2, #0
 8011144:	f000 fe98 	bl	8011e78 <acc_sensor_a121_buffer_processed_read>
 8011148:	6020      	str	r0, [r4, #0]
 801114a:	bd10      	pop	{r4, pc}

0801114c <acc_a121_cal_session_get_8_phase_enhancement_program_data>:
 801114c:	b510      	push	{r4, lr}
 801114e:	2360      	movs	r3, #96	@ 0x60
 8011150:	4614      	mov	r4, r2
 8011152:	2200      	movs	r2, #0
 8011154:	f000 fe90 	bl	8011e78 <acc_sensor_a121_buffer_processed_read>
 8011158:	6020      	str	r0, [r4, #0]
 801115a:	bd10      	pop	{r4, pc}

0801115c <acc_a121_cal_session_get_9_pulseshaper_program_data>:
 801115c:	b538      	push	{r3, r4, r5, lr}
 801115e:	4615      	mov	r5, r2
 8011160:	461c      	mov	r4, r3
 8011162:	2200      	movs	r2, #0
 8011164:	f44f 639c 	mov.w	r3, #1248	@ 0x4e0
 8011168:	f000 fe86 	bl	8011e78 <acc_sensor_a121_buffer_processed_read>
 801116c:	f500 7340 	add.w	r3, r0, #768	@ 0x300
 8011170:	6028      	str	r0, [r5, #0]
 8011172:	6023      	str	r3, [r4, #0]
 8011174:	bd38      	pop	{r3, r4, r5, pc}
 8011176:	bf00      	nop

08011178 <acc_detector_utils_get_fwhm>:
 8011178:	3801      	subs	r0, #1
 801117a:	b2c0      	uxtb	r0, r0
 801117c:	2804      	cmp	r0, #4
 801117e:	bf9d      	ittte	ls
 8011180:	4b03      	ldrls	r3, [pc, #12]	@ (8011190 <acc_detector_utils_get_fwhm+0x18>)
 8011182:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 8011186:	ed90 0a00 	vldrls	s0, [r0]
 801118a:	ed9f 0a02 	vldrhi	s0, [pc, #8]	@ 8011194 <acc_detector_utils_get_fwhm+0x1c>
 801118e:	4770      	bx	lr
 8011190:	0801aa0c 	.word	0x0801aa0c
 8011194:	00000000 	.word	0x00000000

08011198 <acc_detector_utils_radar_loop_gain_per_hwaas>:
 8011198:	3801      	subs	r0, #1
 801119a:	b2c0      	uxtb	r0, r0
 801119c:	2804      	cmp	r0, #4
 801119e:	bf9d      	ittte	ls
 80111a0:	4b03      	ldrls	r3, [pc, #12]	@ (80111b0 <acc_detector_utils_radar_loop_gain_per_hwaas+0x18>)
 80111a2:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 80111a6:	ed90 0a00 	vldrls	s0, [r0]
 80111aa:	ed9f 0a02 	vldrhi	s0, [pc, #8]	@ 80111b4 <acc_detector_utils_radar_loop_gain_per_hwaas+0x1c>
 80111ae:	4770      	bx	lr
 80111b0:	0801aa20 	.word	0x0801aa20
 80111b4:	00000000 	.word	0x00000000

080111b8 <acc_detector_utils_select_prf>:
 80111b8:	ee07 0a90 	vmov	s15, r0
 80111bc:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8011228 <acc_detector_utils_select_prf+0x70>
 80111c0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 801122c <acc_detector_utils_select_prf+0x74>
 80111c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80111cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80111d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d4:	d501      	bpl.n	80111da <acc_detector_utils_select_prf+0x22>
 80111d6:	2901      	cmp	r1, #1
 80111d8:	d020      	beq.n	801121c <acc_detector_utils_select_prf+0x64>
 80111da:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8011230 <acc_detector_utils_select_prf+0x78>
 80111de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80111e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e6:	d417      	bmi.n	8011218 <acc_detector_utils_select_prf+0x60>
 80111e8:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 80111ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80111f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111f4:	d416      	bmi.n	8011224 <acc_detector_utils_select_prf+0x6c>
 80111f6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8011234 <acc_detector_utils_select_prf+0x7c>
 80111fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80111fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011202:	d40d      	bmi.n	8011220 <acc_detector_utils_select_prf+0x68>
 8011204:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8011238 <acc_detector_utils_select_prf+0x80>
 8011208:	eef4 7ac7 	vcmpe.f32	s15, s14
 801120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011210:	bf4c      	ite	mi
 8011212:	2004      	movmi	r0, #4
 8011214:	2005      	movpl	r0, #5
 8011216:	4770      	bx	lr
 8011218:	2001      	movs	r0, #1
 801121a:	4770      	bx	lr
 801121c:	2000      	movs	r0, #0
 801121e:	4770      	bx	lr
 8011220:	2003      	movs	r0, #3
 8011222:	4770      	bx	lr
 8011224:	2002      	movs	r0, #2
 8011226:	4770      	bx	lr
 8011228:	3b23d70a 	.word	0x3b23d70a
 801122c:	40466666 	.word	0x40466666
 8011230:	40a33333 	.word	0x40a33333
 8011234:	414b3333 	.word	0x414b3333
 8011238:	41940000 	.word	0x41940000

0801123c <acc_detector_utils_min_leakage_free_dist>:
 801123c:	3801      	subs	r0, #1
 801123e:	b2c0      	uxtb	r0, r0
 8011240:	2804      	cmp	r0, #4
 8011242:	bf9d      	ittte	ls
 8011244:	4b03      	ldrls	r3, [pc, #12]	@ (8011254 <acc_detector_utils_min_leakage_free_dist+0x18>)
 8011246:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 801124a:	ed90 0a00 	vldrls	s0, [r0]
 801124e:	ed9f 0a02 	vldrhi	s0, [pc, #8]	@ 8011258 <acc_detector_utils_min_leakage_free_dist+0x1c>
 8011252:	4770      	bx	lr
 8011254:	0801a9f8 	.word	0x0801a9f8
 8011258:	00000000 	.word	0x00000000

0801125c <acc_detector_utils_get_abs_sweep>:
 801125c:	b1ab      	cbz	r3, 801128a <acc_detector_utils_get_abs_sweep+0x2e>
 801125e:	3b01      	subs	r3, #1
 8011260:	b570      	push	{r4, r5, r6, lr}
 8011262:	b29b      	uxth	r3, r3
 8011264:	1d16      	adds	r6, r2, #4
 8011266:	4615      	mov	r5, r2
 8011268:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801126c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8011270:	ed94 0a00 	vldr	s0, [r4]
 8011274:	edd4 0a01 	vldr	s1, [r4, #4]
 8011278:	f006 fe5a 	bl	8017f30 <cabsf>
 801127c:	eca5 0a01 	vstmia	r5!, {s0}
 8011280:	42b5      	cmp	r5, r6
 8011282:	f104 0408 	add.w	r4, r4, #8
 8011286:	d1f3      	bne.n	8011270 <acc_detector_utils_get_abs_sweep+0x14>
 8011288:	bd70      	pop	{r4, r5, r6, pc}
 801128a:	4770      	bx	lr

0801128c <acc_detector_utils_get_complex_angle>:
 801128c:	2a00      	cmp	r2, #0
 801128e:	d04c      	beq.n	801132a <acc_detector_utils_get_complex_angle+0x9e>
 8011290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	3a01      	subs	r2, #1
 8011296:	b292      	uxth	r2, r2
 8011298:	f100 0804 	add.w	r8, r0, #4
 801129c:	ed2d 8b02 	vpush	{d8}
 80112a0:	f8df b08c 	ldr.w	fp, [pc, #140]	@ 8011330 <acc_detector_utils_get_complex_angle+0xa4>
 80112a4:	ed9f 8a21 	vldr	s16, [pc, #132]	@ 801132c <acc_detector_utils_get_complex_angle+0xa0>
 80112a8:	f8df a088 	ldr.w	sl, [pc, #136]	@ 8011334 <acc_detector_utils_get_complex_angle+0xa8>
 80112ac:	4604      	mov	r4, r0
 80112ae:	f04f 0900 	mov.w	r9, #0
 80112b2:	460d      	mov	r5, r1
 80112b4:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 80112b8:	e008      	b.n	80112cc <acc_detector_utils_get_complex_angle+0x40>
 80112ba:	2f00      	cmp	r7, #0
 80112bc:	d125      	bne.n	801130a <acc_detector_utils_get_complex_angle+0x7e>
 80112be:	f8c5 9000 	str.w	r9, [r5]
 80112c2:	3404      	adds	r4, #4
 80112c4:	45a0      	cmp	r8, r4
 80112c6:	f105 0504 	add.w	r5, r5, #4
 80112ca:	d01a      	beq.n	8011302 <acc_detector_utils_get_complex_angle+0x76>
 80112cc:	f9b4 6000 	ldrsh.w	r6, [r4]
 80112d0:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
 80112d4:	2e00      	cmp	r6, #0
 80112d6:	d0f0      	beq.n	80112ba <acc_detector_utils_get_complex_angle+0x2e>
 80112d8:	ee07 6a90 	vmov	s15, r6
 80112dc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80112e0:	ee07 7a90 	vmov	s15, r7
 80112e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112e8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80112ec:	f006 fc54 	bl	8017b98 <atanf>
 80112f0:	2e00      	cmp	r6, #0
 80112f2:	db10      	blt.n	8011316 <acc_detector_utils_get_complex_angle+0x8a>
 80112f4:	3404      	adds	r4, #4
 80112f6:	45a0      	cmp	r8, r4
 80112f8:	f105 0504 	add.w	r5, r5, #4
 80112fc:	ed05 0a01 	vstr	s0, [r5, #-4]
 8011300:	d1e4      	bne.n	80112cc <acc_detector_utils_get_complex_angle+0x40>
 8011302:	ecbd 8b02 	vpop	{d8}
 8011306:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801130a:	bfcc      	ite	gt
 801130c:	f8c5 a000 	strgt.w	sl, [r5]
 8011310:	f8c5 b000 	strle.w	fp, [r5]
 8011314:	e7d5      	b.n	80112c2 <acc_detector_utils_get_complex_angle+0x36>
 8011316:	2f00      	cmp	r7, #0
 8011318:	db02      	blt.n	8011320 <acc_detector_utils_get_complex_angle+0x94>
 801131a:	ee30 0a08 	vadd.f32	s0, s0, s16
 801131e:	e7e9      	b.n	80112f4 <acc_detector_utils_get_complex_angle+0x68>
 8011320:	ee30 0a48 	vsub.f32	s0, s0, s16
 8011324:	ed85 0a00 	vstr	s0, [r5]
 8011328:	e7cb      	b.n	80112c2 <acc_detector_utils_get_complex_angle+0x36>
 801132a:	4770      	bx	lr
 801132c:	40490fdb 	.word	0x40490fdb
 8011330:	bfc90fdb 	.word	0xbfc90fdb
 8011334:	3fc90fdb 	.word	0x3fc90fdb

08011338 <acc_detector_utils_align_size_32bit>:
 8011338:	3003      	adds	r0, #3
 801133a:	f020 0003 	bic.w	r0, r0, #3
 801133e:	4770      	bx	lr

08011340 <acc_rss_integration_register_a121>:
 8011340:	68c3      	ldr	r3, [r0, #12]
 8011342:	b570      	push	{r4, r5, r6, lr}
 8011344:	b1c3      	cbz	r3, 8011378 <acc_rss_integration_register_a121+0x38>
 8011346:	6843      	ldr	r3, [r0, #4]
 8011348:	b1cb      	cbz	r3, 801137e <acc_rss_integration_register_a121+0x3e>
 801134a:	6883      	ldr	r3, [r0, #8]
 801134c:	b1bb      	cbz	r3, 801137e <acc_rss_integration_register_a121+0x3e>
 801134e:	6903      	ldr	r3, [r0, #16]
 8011350:	b1eb      	cbz	r3, 801138e <acc_rss_integration_register_a121+0x4e>
 8011352:	8802      	ldrh	r2, [r0, #0]
 8011354:	2a0f      	cmp	r2, #15
 8011356:	d914      	bls.n	8011382 <acc_rss_integration_register_a121+0x42>
 8011358:	4604      	mov	r4, r0
 801135a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801135c:	4d0d      	ldr	r5, [pc, #52]	@ (8011394 <acc_rss_integration_register_a121+0x54>)
 801135e:	4e0e      	ldr	r6, [pc, #56]	@ (8011398 <acc_rss_integration_register_a121+0x58>)
 8011360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011362:	4b0e      	ldr	r3, [pc, #56]	@ (801139c <acc_rss_integration_register_a121+0x5c>)
 8011364:	4a0e      	ldr	r2, [pc, #56]	@ (80113a0 <acc_rss_integration_register_a121+0x60>)
 8011366:	601a      	str	r2, [r3, #0]
 8011368:	e894 0003 	ldmia.w	r4, {r0, r1}
 801136c:	2302      	movs	r3, #2
 801136e:	e885 0003 	stmia.w	r5, {r0, r1}
 8011372:	7033      	strb	r3, [r6, #0]
 8011374:	2001      	movs	r0, #1
 8011376:	bd70      	pop	{r4, r5, r6, pc}
 8011378:	6943      	ldr	r3, [r0, #20]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d1e3      	bne.n	8011346 <acc_rss_integration_register_a121+0x6>
 801137e:	6903      	ldr	r3, [r0, #16]
 8011380:	b12b      	cbz	r3, 801138e <acc_rss_integration_register_a121+0x4e>
 8011382:	4a08      	ldr	r2, [pc, #32]	@ (80113a4 <acc_rss_integration_register_a121+0x64>)
 8011384:	4908      	ldr	r1, [pc, #32]	@ (80113a8 <acc_rss_integration_register_a121+0x68>)
 8011386:	2000      	movs	r0, #0
 8011388:	4798      	blx	r3
 801138a:	2000      	movs	r0, #0
 801138c:	bd70      	pop	{r4, r5, r6, pc}
 801138e:	4618      	mov	r0, r3
 8011390:	bd70      	pop	{r4, r5, r6, pc}
 8011392:	bf00      	nop
 8011394:	200008cc 	.word	0x200008cc
 8011398:	20000774 	.word	0x20000774
 801139c:	20000778 	.word	0x20000778
 80113a0:	016e3600 	.word	0x016e3600
 80113a4:	0801aa34 	.word	0x0801aa34
 80113a8:	0801aa48 	.word	0x0801aa48

080113ac <acc_rss_integration_get_sensor_reference_frequency>:
 80113ac:	4b01      	ldr	r3, [pc, #4]	@ (80113b4 <acc_rss_integration_get_sensor_reference_frequency+0x8>)
 80113ae:	6818      	ldr	r0, [r3, #0]
 80113b0:	4770      	bx	lr
 80113b2:	bf00      	nop
 80113b4:	20000778 	.word	0x20000778

080113b8 <acc_rss_integration_get_max_spi_transfer_size>:
 80113b8:	4b01      	ldr	r3, [pc, #4]	@ (80113c0 <acc_rss_integration_get_max_spi_transfer_size+0x8>)
 80113ba:	8818      	ldrh	r0, [r3, #0]
 80113bc:	4770      	bx	lr
 80113be:	bf00      	nop
 80113c0:	200008cc 	.word	0x200008cc

080113c4 <acc_rss_integration_sensor_device_transfer>:
 80113c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113c8:	4f10      	ldr	r7, [pc, #64]	@ (801140c <acc_rss_integration_sensor_device_transfer+0x48>)
 80113ca:	f8d7 e014 	ldr.w	lr, [r7, #20]
 80113ce:	f1be 0f00 	cmp.w	lr, #0
 80113d2:	d003      	beq.n	80113dc <acc_rss_integration_sensor_device_transfer+0x18>
 80113d4:	4673      	mov	r3, lr
 80113d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113da:	4718      	bx	r3
 80113dc:	460c      	mov	r4, r1
 80113de:	4606      	mov	r6, r0
 80113e0:	4611      	mov	r1, r2
 80113e2:	4615      	mov	r5, r2
 80113e4:	4620      	mov	r0, r4
 80113e6:	4698      	mov	r8, r3
 80113e8:	f002 fe56 	bl	8014098 <acc_utils_swap16_array>
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	4630      	mov	r0, r6
 80113f0:	006a      	lsls	r2, r5, #1
 80113f2:	4621      	mov	r1, r4
 80113f4:	4798      	blx	r3
 80113f6:	f1b8 0f00 	cmp.w	r8, #0
 80113fa:	d101      	bne.n	8011400 <acc_rss_integration_sensor_device_transfer+0x3c>
 80113fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011400:	4629      	mov	r1, r5
 8011402:	4620      	mov	r0, r4
 8011404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011408:	f002 be46 	b.w	8014098 <acc_utils_swap16_array>
 801140c:	200008cc 	.word	0x200008cc

08011410 <acc_rss_integration_mem_alloc_debug>:
 8011410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011414:	4f0c      	ldr	r7, [pc, #48]	@ (8011448 <acc_rss_integration_mem_alloc_debug+0x38>)
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	4688      	mov	r8, r1
 801141a:	4616      	mov	r6, r2
 801141c:	4605      	mov	r5, r0
 801141e:	4798      	blx	r3
 8011420:	4604      	mov	r4, r0
 8011422:	b150      	cbz	r0, 801143a <acc_rss_integration_mem_alloc_debug+0x2a>
 8011424:	4b09      	ldr	r3, [pc, #36]	@ (801144c <acc_rss_integration_mem_alloc_debug+0x3c>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	b123      	cbz	r3, 8011434 <acc_rss_integration_mem_alloc_debug+0x24>
 801142a:	689f      	ldr	r7, [r3, #8]
 801142c:	4642      	mov	r2, r8
 801142e:	4633      	mov	r3, r6
 8011430:	4629      	mov	r1, r5
 8011432:	47b8      	blx	r7
 8011434:	4620      	mov	r0, r4
 8011436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	4a04      	ldr	r2, [pc, #16]	@ (8011450 <acc_rss_integration_mem_alloc_debug+0x40>)
 801143e:	4905      	ldr	r1, [pc, #20]	@ (8011454 <acc_rss_integration_mem_alloc_debug+0x44>)
 8011440:	4798      	blx	r3
 8011442:	4620      	mov	r0, r4
 8011444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011448:	200008cc 	.word	0x200008cc
 801144c:	20000770 	.word	0x20000770
 8011450:	0801aa58 	.word	0x0801aa58
 8011454:	0801aa48 	.word	0x0801aa48

08011458 <acc_rss_integration_mem_calloc_debug>:
 8011458:	b538      	push	{r3, r4, r5, lr}
 801145a:	b1a8      	cbz	r0, 8011488 <acc_rss_integration_mem_calloc_debug+0x30>
 801145c:	4614      	mov	r4, r2
 801145e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8011462:	fbb2 f2f0 	udiv	r2, r2, r0
 8011466:	428a      	cmp	r2, r1
 8011468:	d90e      	bls.n	8011488 <acc_rss_integration_mem_calloc_debug+0x30>
 801146a:	fb01 f500 	mul.w	r5, r1, r0
 801146e:	461a      	mov	r2, r3
 8011470:	4621      	mov	r1, r4
 8011472:	4628      	mov	r0, r5
 8011474:	f7ff ffcc 	bl	8011410 <acc_rss_integration_mem_alloc_debug>
 8011478:	4604      	mov	r4, r0
 801147a:	b130      	cbz	r0, 801148a <acc_rss_integration_mem_calloc_debug+0x32>
 801147c:	462a      	mov	r2, r5
 801147e:	2100      	movs	r1, #0
 8011480:	f004 fb3e 	bl	8015b00 <memset>
 8011484:	4620      	mov	r0, r4
 8011486:	bd38      	pop	{r3, r4, r5, pc}
 8011488:	2400      	movs	r4, #0
 801148a:	4620      	mov	r0, r4
 801148c:	bd38      	pop	{r3, r4, r5, pc}
 801148e:	bf00      	nop

08011490 <acc_rss_integration_mem_free>:
 8011490:	4b07      	ldr	r3, [pc, #28]	@ (80114b0 <acc_rss_integration_mem_free+0x20>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	b510      	push	{r4, lr}
 8011496:	4604      	mov	r4, r0
 8011498:	b10b      	cbz	r3, 801149e <acc_rss_integration_mem_free+0xe>
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	4798      	blx	r3
 801149e:	b12c      	cbz	r4, 80114ac <acc_rss_integration_mem_free+0x1c>
 80114a0:	4b04      	ldr	r3, [pc, #16]	@ (80114b4 <acc_rss_integration_mem_free+0x24>)
 80114a2:	4620      	mov	r0, r4
 80114a4:	689b      	ldr	r3, [r3, #8]
 80114a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114aa:	4718      	bx	r3
 80114ac:	bd10      	pop	{r4, pc}
 80114ae:	bf00      	nop
 80114b0:	20000770 	.word	0x20000770
 80114b4:	200008cc 	.word	0x200008cc

080114b8 <acc_rss_integration_log_level>:
 80114b8:	4b01      	ldr	r3, [pc, #4]	@ (80114c0 <acc_rss_integration_log_level+0x8>)
 80114ba:	7818      	ldrb	r0, [r3, #0]
 80114bc:	4770      	bx	lr
 80114be:	bf00      	nop
 80114c0:	20000774 	.word	0x20000774

080114c4 <pipeline_a121_produce>:
 80114c4:	6803      	ldr	r3, [r0, #0]
 80114c6:	f8d0 20e8 	ldr.w	r2, [r0, #232]	@ 0xe8
 80114ca:	f8c0 20f0 	str.w	r2, [r0, #240]	@ 0xf0
 80114ce:	685a      	ldr	r2, [r3, #4]
 80114d0:	4618      	mov	r0, r3
 80114d2:	4710      	bx	r2

080114d4 <pipeline_a121_disassemble>:
 80114d4:	b538      	push	{r3, r4, r5, lr}
 80114d6:	6805      	ldr	r5, [r0, #0]
 80114d8:	4604      	mov	r4, r0
 80114da:	b175      	cbz	r5, 80114fa <pipeline_a121_disassemble+0x26>
 80114dc:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 80114e0:	f002 ffc2 	bl	8014468 <acc_element_frame_release>
 80114e4:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 80114e8:	f003 f842 	bl	8014570 <acc_element_frame_aux_release>
 80114ec:	f8d5 0098 	ldr.w	r0, [r5, #152]	@ 0x98
 80114f0:	f7ff ffce 	bl	8011490 <acc_rss_integration_mem_free>
 80114f4:	4628      	mov	r0, r5
 80114f6:	f7ff ffcb 	bl	8011490 <acc_rss_integration_mem_free>
 80114fa:	4620      	mov	r0, r4
 80114fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011500:	f7ff bfc6 	b.w	8011490 <acc_rss_integration_mem_free>

08011504 <acc_pipeline_get_buffer_size>:
 8011504:	b510      	push	{r4, lr}
 8011506:	b08e      	sub	sp, #56	@ 0x38
 8011508:	460c      	mov	r4, r1
 801150a:	4669      	mov	r1, sp
 801150c:	f000 fbda 	bl	8011cc4 <acc_radar_engine_a121_get_metadata>
 8011510:	b110      	cbz	r0, 8011518 <acc_pipeline_get_buffer_size+0x14>
 8011512:	f8bd 3000 	ldrh.w	r3, [sp]
 8011516:	6023      	str	r3, [r4, #0]
 8011518:	b00e      	add	sp, #56	@ 0x38
 801151a:	bd10      	pop	{r4, pc}

0801151c <acc_pipeline_a121_assemble>:
 801151c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011520:	6803      	ldr	r3, [r0, #0]
 8011522:	f893 204e 	ldrb.w	r2, [r3, #78]	@ 0x4e
 8011526:	b09b      	sub	sp, #108	@ 0x6c
 8011528:	4606      	mov	r6, r0
 801152a:	460f      	mov	r7, r1
 801152c:	b122      	cbz	r2, 8011538 <acc_pipeline_a121_assemble+0x1c>
 801152e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011532:	2b00      	cmp	r3, #0
 8011534:	f040 810d 	bne.w	8011752 <acc_pipeline_a121_assemble+0x236>
 8011538:	4aa5      	ldr	r2, [pc, #660]	@ (80117d0 <acc_pipeline_a121_assemble+0x2b4>)
 801153a:	233d      	movs	r3, #61	@ 0x3d
 801153c:	2110      	movs	r1, #16
 801153e:	2001      	movs	r0, #1
 8011540:	f7ff ff8a 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 8011544:	4aa2      	ldr	r2, [pc, #648]	@ (80117d0 <acc_pipeline_a121_assemble+0x2b4>)
 8011546:	4605      	mov	r5, r0
 8011548:	233e      	movs	r3, #62	@ 0x3e
 801154a:	21fc      	movs	r1, #252	@ 0xfc
 801154c:	2001      	movs	r0, #1
 801154e:	f7ff ff83 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 8011552:	4604      	mov	r4, r0
 8011554:	2d00      	cmp	r5, #0
 8011556:	f000 8134 	beq.w	80117c2 <acc_pipeline_a121_assemble+0x2a6>
 801155a:	2c00      	cmp	r4, #0
 801155c:	f000 812f 	beq.w	80117be <acc_pipeline_a121_assemble+0x2a2>
 8011560:	f04f 0800 	mov.w	r8, #0
 8011564:	f8d6 9000 	ldr.w	r9, [r6]
 8011568:	f8c4 8098 	str.w	r8, [r4, #152]	@ 0x98
 801156c:	4648      	mov	r0, r9
 801156e:	602c      	str	r4, [r5, #0]
 8011570:	a90c      	add	r1, sp, #48	@ 0x30
 8011572:	f000 fba7 	bl	8011cc4 <acc_radar_engine_a121_get_metadata>
 8011576:	2800      	cmp	r0, #0
 8011578:	f000 80de 	beq.w	8011738 <acc_pipeline_a121_assemble+0x21c>
 801157c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8011580:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8011584:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 8011588:	f8bd 004a 	ldrh.w	r0, [sp, #74]	@ 0x4a
 801158c:	8723      	strh	r3, [r4, #56]	@ 0x38
 801158e:	0049      	lsls	r1, r1, #1
 8011590:	f8c4 10e8 	str.w	r1, [r4, #232]	@ 0xe8
 8011594:	2100      	movs	r1, #0
 8011596:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
 801159a:	f8a4 109c 	strh.w	r1, [r4, #156]	@ 0x9c
 801159e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80115a2:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 80115a6:	f104 01f4 	add.w	r1, r4, #244	@ 0xf4
 80115aa:	4403      	add	r3, r0
 80115ac:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
 80115b0:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80115b4:	f104 01f6 	add.w	r1, r4, #246	@ 0xf6
 80115b8:	b29b      	uxth	r3, r3
 80115ba:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 80115be:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
 80115c2:	f104 01f7 	add.w	r1, r4, #247	@ 0xf7
 80115c6:	f8a4 309e 	strh.w	r3, [r4, #158]	@ 0x9e
 80115ca:	6260      	str	r0, [r4, #36]	@ 0x24
 80115cc:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
 80115d0:	b13a      	cbz	r2, 80115e2 <acc_pipeline_a121_assemble+0xc6>
 80115d2:	f104 0eec 	add.w	lr, r4, #236	@ 0xec
 80115d6:	f104 01f5 	add.w	r1, r4, #245	@ 0xf5
 80115da:	6250      	str	r0, [r2, #36]	@ 0x24
 80115dc:	f8c2 e018 	str.w	lr, [r2, #24]
 80115e0:	65d1      	str	r1, [r2, #92]	@ 0x5c
 80115e2:	e9c4 0c36 	strd	r0, ip, [r4, #216]	@ 0xd8
 80115e6:	f8a4 30e4 	strh.w	r3, [r4, #228]	@ 0xe4
 80115ea:	2008      	movs	r0, #8
 80115ec:	f002 fbac 	bl	8013d48 <acc_element_sizeof>
 80115f0:	f899 304e 	ldrb.w	r3, [r9, #78]	@ 0x4e
 80115f4:	f3c0 004f 	ubfx	r0, r0, #1, #16
 80115f8:	b183      	cbz	r3, 801161c <acc_pipeline_a121_assemble+0x100>
 80115fa:	f103 3cff 	add.w	ip, r3, #4294967295
 80115fe:	fa5f fc8c 	uxtb.w	ip, ip
 8011602:	eb07 0c4c 	add.w	ip, r7, ip, lsl #1
 8011606:	f10d 0156 	add.w	r1, sp, #86	@ 0x56
 801160a:	1eba      	subs	r2, r7, #2
 801160c:	f831 3b02 	ldrh.w	r3, [r1], #2
 8011610:	fbb3 f3f0 	udiv	r3, r3, r0
 8011614:	f822 3f02 	strh.w	r3, [r2, #2]!
 8011618:	4562      	cmp	r2, ip
 801161a:	d1f7      	bne.n	801160c <acc_pipeline_a121_assemble+0xf0>
 801161c:	f8d6 8000 	ldr.w	r8, [r6]
 8011620:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 8011624:	f8bd 2046 	ldrh.w	r2, [sp, #70]	@ 0x46
 8011628:	f8b8 9048 	ldrh.w	r9, [r8, #72]	@ 0x48
 801162c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801162e:	f89d 1064 	ldrb.w	r1, [sp, #100]	@ 0x64
 8011632:	60b8      	str	r0, [r7, #8]
 8011634:	441a      	add	r2, r3
 8011636:	81fa      	strh	r2, [r7, #14]
 8011638:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 801163c:	7339      	strb	r1, [r7, #12]
 801163e:	823a      	strh	r2, [r7, #16]
 8011640:	f1b9 0f00 	cmp.w	r9, #0
 8011644:	d003      	beq.n	801164e <acc_pipeline_a121_assemble+0x132>
 8011646:	f8bd 204c 	ldrh.w	r2, [sp, #76]	@ 0x4c
 801164a:	fbb2 f9f9 	udiv	r9, r2, r9
 801164e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	@ 0x44
 8011652:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011656:	f8bd 0032 	ldrh.w	r0, [sp, #50]	@ 0x32
 801165a:	f8ad 0000 	strh.w	r0, [sp]
 801165e:	441a      	add	r2, r3
 8011660:	440b      	add	r3, r1
 8011662:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011666:	f8ad 3008 	strh.w	r3, [sp, #8]
 801166a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801166e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8011672:	f8ad 2002 	strh.w	r2, [sp, #2]
 8011676:	f104 073c 	add.w	r7, r4, #60	@ 0x3c
 801167a:	220f      	movs	r2, #15
 801167c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011680:	4638      	mov	r0, r7
 8011682:	2303      	movs	r3, #3
 8011684:	4669      	mov	r1, sp
 8011686:	f8ad 200a 	strh.w	r2, [sp, #10]
 801168a:	f88d 300c 	strb.w	r3, [sp, #12]
 801168e:	f002 ff4d 	bl	801452c <acc_element_frame_aux_init>
 8011692:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8011696:	b370      	cbz	r0, 80116f6 <acc_pipeline_a121_assemble+0x1da>
 8011698:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 801169c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	@ 0x3e
 80116a0:	f8b8 c048 	ldrh.w	ip, [r8, #72]	@ 0x48
 80116a4:	f8ad 901a 	strh.w	r9, [sp, #26]
 80116a8:	2200      	movs	r2, #0
 80116aa:	4419      	add	r1, r3
 80116ac:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 80116b0:	9205      	str	r2, [sp, #20]
 80116b2:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80116b6:	9207      	str	r2, [sp, #28]
 80116b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80116ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80116bc:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 80116c0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80116c4:	f88d 3016 	strb.w	r3, [sp, #22]
 80116c8:	f8ad c018 	strh.w	ip, [sp, #24]
 80116cc:	9204      	str	r2, [sp, #16]
 80116ce:	b17b      	cbz	r3, 80116f0 <acc_pipeline_a121_assemble+0x1d4>
 80116d0:	3b01      	subs	r3, #1
 80116d2:	b2db      	uxtb	r3, r3
 80116d4:	aa14      	add	r2, sp, #80	@ 0x50
 80116d6:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
 80116da:	f10d 034e 	add.w	r3, sp, #78	@ 0x4e
 80116de:	aa07      	add	r2, sp, #28
 80116e0:	f833 1b02 	ldrh.w	r1, [r3], #2
 80116e4:	f822 1b02 	strh.w	r1, [r2], #2
 80116e8:	459c      	cmp	ip, r3
 80116ea:	88d9      	ldrh	r1, [r3, #6]
 80116ec:	80d1      	strh	r1, [r2, #6]
 80116ee:	d1f7      	bne.n	80116e0 <acc_pipeline_a121_assemble+0x1c4>
 80116f0:	a904      	add	r1, sp, #16
 80116f2:	f002 fe41 	bl	8014378 <acc_element_frame_init>
 80116f6:	f104 08a0 	add.w	r8, r4, #160	@ 0xa0
 80116fa:	6871      	ldr	r1, [r6, #4]
 80116fc:	4640      	mov	r0, r8
 80116fe:	f002 ff69 	bl	80145d4 <acc_element_sink_a121_callback_init>
 8011702:	4639      	mov	r1, r7
 8011704:	4620      	mov	r0, r4
 8011706:	f002 fb2b 	bl	8013d60 <acc_element_connect>
 801170a:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 801170e:	2900      	cmp	r1, #0
 8011710:	d059      	beq.n	80117c6 <acc_pipeline_a121_assemble+0x2aa>
 8011712:	4638      	mov	r0, r7
 8011714:	f002 fb24 	bl	8013d60 <acc_element_connect>
 8011718:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 801171c:	4641      	mov	r1, r8
 801171e:	f002 fb1f 	bl	8013d60 <acc_element_connect>
 8011722:	6820      	ldr	r0, [r4, #0]
 8011724:	6883      	ldr	r3, [r0, #8]
 8011726:	4798      	blx	r3
 8011728:	2800      	cmp	r0, #0
 801172a:	d13b      	bne.n	80117a4 <acc_pipeline_a121_assemble+0x288>
 801172c:	4b29      	ldr	r3, [pc, #164]	@ (80117d4 <acc_pipeline_a121_assemble+0x2b8>)
 801172e:	4a2a      	ldr	r2, [pc, #168]	@ (80117d8 <acc_pipeline_a121_assemble+0x2bc>)
 8011730:	691b      	ldr	r3, [r3, #16]
 8011732:	4927      	ldr	r1, [pc, #156]	@ (80117d0 <acc_pipeline_a121_assemble+0x2b4>)
 8011734:	4798      	blx	r3
 8011736:	e004      	b.n	8011742 <acc_pipeline_a121_assemble+0x226>
 8011738:	4b26      	ldr	r3, [pc, #152]	@ (80117d4 <acc_pipeline_a121_assemble+0x2b8>)
 801173a:	4a28      	ldr	r2, [pc, #160]	@ (80117dc <acc_pipeline_a121_assemble+0x2c0>)
 801173c:	691b      	ldr	r3, [r3, #16]
 801173e:	4924      	ldr	r1, [pc, #144]	@ (80117d0 <acc_pipeline_a121_assemble+0x2b4>)
 8011740:	4798      	blx	r3
 8011742:	4628      	mov	r0, r5
 8011744:	f7ff fec6 	bl	80114d4 <pipeline_a121_disassemble>
 8011748:	2500      	movs	r5, #0
 801174a:	4628      	mov	r0, r5
 801174c:	b01b      	add	sp, #108	@ 0x6c
 801174e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011752:	4a1f      	ldr	r2, [pc, #124]	@ (80117d0 <acc_pipeline_a121_assemble+0x2b4>)
 8011754:	233d      	movs	r3, #61	@ 0x3d
 8011756:	2110      	movs	r1, #16
 8011758:	2001      	movs	r0, #1
 801175a:	f7ff fe7d 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 801175e:	4a1c      	ldr	r2, [pc, #112]	@ (80117d0 <acc_pipeline_a121_assemble+0x2b4>)
 8011760:	233e      	movs	r3, #62	@ 0x3e
 8011762:	21fc      	movs	r1, #252	@ 0xfc
 8011764:	4605      	mov	r5, r0
 8011766:	2001      	movs	r0, #1
 8011768:	f7ff fe76 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 801176c:	4a18      	ldr	r2, [pc, #96]	@ (80117d0 <acc_pipeline_a121_assemble+0x2b4>)
 801176e:	4604      	mov	r4, r0
 8011770:	2343      	movs	r3, #67	@ 0x43
 8011772:	2160      	movs	r1, #96	@ 0x60
 8011774:	2001      	movs	r0, #1
 8011776:	f7ff fe6f 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 801177a:	4680      	mov	r8, r0
 801177c:	b125      	cbz	r5, 8011788 <acc_pipeline_a121_assemble+0x26c>
 801177e:	b11c      	cbz	r4, 8011788 <acc_pipeline_a121_assemble+0x26c>
 8011780:	f1b8 0f00 	cmp.w	r8, #0
 8011784:	f47f aeee 	bne.w	8011564 <acc_pipeline_a121_assemble+0x48>
 8011788:	4628      	mov	r0, r5
 801178a:	f7ff fe81 	bl	8011490 <acc_rss_integration_mem_free>
 801178e:	4620      	mov	r0, r4
 8011790:	f7ff fe7e 	bl	8011490 <acc_rss_integration_mem_free>
 8011794:	4640      	mov	r0, r8
 8011796:	f7ff fe7b 	bl	8011490 <acc_rss_integration_mem_free>
 801179a:	2500      	movs	r5, #0
 801179c:	4628      	mov	r0, r5
 801179e:	b01b      	add	sp, #108	@ 0x6c
 80117a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117a4:	6820      	ldr	r0, [r4, #0]
 80117a6:	68c3      	ldr	r3, [r0, #12]
 80117a8:	4798      	blx	r3
 80117aa:	4b0d      	ldr	r3, [pc, #52]	@ (80117e0 <acc_pipeline_a121_assemble+0x2c4>)
 80117ac:	4a0d      	ldr	r2, [pc, #52]	@ (80117e4 <acc_pipeline_a121_assemble+0x2c8>)
 80117ae:	606b      	str	r3, [r5, #4]
 80117b0:	4628      	mov	r0, r5
 80117b2:	2300      	movs	r3, #0
 80117b4:	e9c5 3202 	strd	r3, r2, [r5, #8]
 80117b8:	b01b      	add	sp, #108	@ 0x6c
 80117ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117be:	46a0      	mov	r8, r4
 80117c0:	e7e2      	b.n	8011788 <acc_pipeline_a121_assemble+0x26c>
 80117c2:	46a8      	mov	r8, r5
 80117c4:	e7e0      	b.n	8011788 <acc_pipeline_a121_assemble+0x26c>
 80117c6:	4641      	mov	r1, r8
 80117c8:	4638      	mov	r0, r7
 80117ca:	f002 fac9 	bl	8013d60 <acc_element_connect>
 80117ce:	e7a8      	b.n	8011722 <acc_pipeline_a121_assemble+0x206>
 80117d0:	0801aa8c 	.word	0x0801aa8c
 80117d4:	200008cc 	.word	0x200008cc
 80117d8:	0801aa9c 	.word	0x0801aa9c
 80117dc:	0801aa68 	.word	0x0801aa68
 80117e0:	080114c5 	.word	0x080114c5
 80117e4:	080114d5 	.word	0x080114d5

080117e8 <acc_pipeline_a121_prepare_memory>:
 80117e8:	6803      	ldr	r3, [r0, #0]
 80117ea:	b430      	push	{r4, r5}
 80117ec:	f8b3 0094 	ldrh.w	r0, [r3, #148]	@ 0x94
 80117f0:	8f1c      	ldrh	r4, [r3, #56]	@ 0x38
 80117f2:	f8b3 2096 	ldrh.w	r2, [r3, #150]	@ 0x96
 80117f6:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 80117fa:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 80117fe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8011802:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8011806:	e9c3 0213 	strd	r0, r2, [r3, #76]	@ 0x4c
 801180a:	615c      	str	r4, [r3, #20]
 801180c:	b14d      	cbz	r5, 8011822 <acc_pipeline_a121_prepare_memory+0x3a>
 801180e:	f8b3 009c 	ldrh.w	r0, [r3, #156]	@ 0x9c
 8011812:	f8b3 209e 	ldrh.w	r2, [r3, #158]	@ 0x9e
 8011816:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 801181a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801181e:	e9c5 0204 	strd	r0, r2, [r5, #16]
 8011822:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	@ 0xe4
 8011826:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801182a:	bc30      	pop	{r4, r5}
 801182c:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
 8011830:	4770      	bx	lr
 8011832:	bf00      	nop

08011834 <acc_radar_engine_a121_context_create>:
 8011834:	b508      	push	{r3, lr}
 8011836:	4a07      	ldr	r2, [pc, #28]	@ (8011854 <acc_radar_engine_a121_context_create+0x20>)
 8011838:	2373      	movs	r3, #115	@ 0x73
 801183a:	f44f 71fe 	mov.w	r1, #508	@ 0x1fc
 801183e:	2001      	movs	r0, #1
 8011840:	f7ff fe0a 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 8011844:	b120      	cbz	r0, 8011850 <acc_radar_engine_a121_context_create+0x1c>
 8011846:	2301      	movs	r3, #1
 8011848:	f8a0 31c4 	strh.w	r3, [r0, #452]	@ 0x1c4
 801184c:	f880 31c6 	strb.w	r3, [r0, #454]	@ 0x1c6
 8011850:	bd08      	pop	{r3, pc}
 8011852:	bf00      	nop
 8011854:	0801aabc 	.word	0x0801aabc

08011858 <acc_radar_engine_a121_context_destroy>:
 8011858:	b108      	cbz	r0, 801185e <acc_radar_engine_a121_context_destroy+0x6>
 801185a:	f7ff be19 	b.w	8011490 <acc_rss_integration_mem_free>
 801185e:	4770      	bx	lr

08011860 <acc_radar_engine_a121_run_program>:
 8011860:	f002 bf6a 	b.w	8014738 <acc_cpd_a121_meas_session_run_program>

08011864 <acc_radar_engine_a121_measure>:
 8011864:	b510      	push	{r4, lr}
 8011866:	460c      	mov	r4, r1
 8011868:	2201      	movs	r2, #1
 801186a:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 801186e:	f000 fc43 	bl	80120f8 <acc_sensor_protocol_a121_ack_event>
 8011872:	f894 31c5 	ldrb.w	r3, [r4, #453]	@ 0x1c5
 8011876:	b143      	cbz	r3, 801188a <acc_radar_engine_a121_measure+0x26>
 8011878:	f894 31c6 	ldrb.w	r3, [r4, #454]	@ 0x1c6
 801187c:	2b02      	cmp	r3, #2
 801187e:	bf0c      	ite	eq
 8011880:	2301      	moveq	r3, #1
 8011882:	2302      	movne	r3, #2
 8011884:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 8011888:	bd10      	pop	{r4, pc}
 801188a:	2301      	movs	r3, #1
 801188c:	f884 31c6 	strb.w	r3, [r4, #454]	@ 0x1c6
 8011890:	bd10      	pop	{r4, pc}
 8011892:	bf00      	nop

08011894 <acc_radar_engine_a121_transfer_data>:
 8011894:	b538      	push	{r3, r4, r5, lr}
 8011896:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 801189a:	9c04      	ldr	r4, [sp, #16]
 801189c:	2901      	cmp	r1, #1
 801189e:	bf14      	ite	ne
 80118a0:	f44f 5180 	movne.w	r1, #4096	@ 0x1000
 80118a4:	2100      	moveq	r1, #0
 80118a6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80118aa:	461d      	mov	r5, r3
 80118ac:	f002 ffbc 	bl	8014828 <acc_cpd_a121_meas_session_transfer_data>
 80118b0:	b118      	cbz	r0, 80118ba <acc_radar_engine_a121_transfer_data+0x26>
 80118b2:	1e28      	subs	r0, r5, #0
 80118b4:	bf18      	it	ne
 80118b6:	2001      	movne	r0, #1
 80118b8:	bd38      	pop	{r3, r4, r5, pc}
 80118ba:	4b04      	ldr	r3, [pc, #16]	@ (80118cc <acc_radar_engine_a121_transfer_data+0x38>)
 80118bc:	4a04      	ldr	r2, [pc, #16]	@ (80118d0 <acc_radar_engine_a121_transfer_data+0x3c>)
 80118be:	691b      	ldr	r3, [r3, #16]
 80118c0:	4904      	ldr	r1, [pc, #16]	@ (80118d4 <acc_radar_engine_a121_transfer_data+0x40>)
 80118c2:	4604      	mov	r4, r0
 80118c4:	4798      	blx	r3
 80118c6:	4620      	mov	r0, r4
 80118c8:	bd38      	pop	{r3, r4, r5, pc}
 80118ca:	bf00      	nop
 80118cc:	200008cc 	.word	0x200008cc
 80118d0:	0801aad0 	.word	0x0801aad0
 80118d4:	0801aabc 	.word	0x0801aabc

080118d8 <acc_radar_engine_a121_verify_radar_data_ready>:
 80118d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118dc:	b084      	sub	sp, #16
 80118de:	460d      	mov	r5, r1
 80118e0:	2400      	movs	r4, #0
 80118e2:	f891 11c6 	ldrb.w	r1, [r1, #454]	@ 0x1c6
 80118e6:	9403      	str	r4, [sp, #12]
 80118e8:	4690      	mov	r8, r2
 80118ea:	4607      	mov	r7, r0
 80118ec:	f000 fbe8 	bl	80120c0 <acc_sensor_protocol_a121_is_event_pending>
 80118f0:	b980      	cbnz	r0, 8011914 <acc_radar_engine_a121_verify_radar_data_ready+0x3c>
 80118f2:	4b15      	ldr	r3, [pc, #84]	@ (8011948 <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 80118f4:	4a15      	ldr	r2, [pc, #84]	@ (801194c <acc_radar_engine_a121_verify_radar_data_ready+0x74>)
 80118f6:	691d      	ldr	r5, [r3, #16]
 80118f8:	4915      	ldr	r1, [pc, #84]	@ (8011950 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 80118fa:	463b      	mov	r3, r7
 80118fc:	4604      	mov	r4, r0
 80118fe:	47a8      	blx	r5
 8011900:	ae03      	add	r6, sp, #12
 8011902:	4630      	mov	r0, r6
 8011904:	f000 fcba 	bl	801227c <acc_sensor_protocol_a121_get_frame_delayed_flag>
 8011908:	f888 0000 	strb.w	r0, [r8]
 801190c:	4620      	mov	r0, r4
 801190e:	b004      	add	sp, #16
 8011910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011914:	ae03      	add	r6, sp, #12
 8011916:	f895 11c6 	ldrb.w	r1, [r5, #454]	@ 0x1c6
 801191a:	4632      	mov	r2, r6
 801191c:	4638      	mov	r0, r7
 801191e:	f000 fc33 	bl	8012188 <acc_sensor_protocol_a121_get_event>
 8011922:	4604      	mov	r4, r0
 8011924:	2800      	cmp	r0, #0
 8011926:	d0ec      	beq.n	8011902 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 8011928:	4630      	mov	r0, r6
 801192a:	f000 fc97 	bl	801225c <acc_sensor_protocol_a121_is_handshake>
 801192e:	4604      	mov	r4, r0
 8011930:	2800      	cmp	r0, #0
 8011932:	d1e6      	bne.n	8011902 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 8011934:	4a04      	ldr	r2, [pc, #16]	@ (8011948 <acc_radar_engine_a121_verify_radar_data_ready+0x70>)
 8011936:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801193a:	6915      	ldr	r5, [r2, #16]
 801193c:	4904      	ldr	r1, [pc, #16]	@ (8011950 <acc_radar_engine_a121_verify_radar_data_ready+0x78>)
 801193e:	9300      	str	r3, [sp, #0]
 8011940:	4a04      	ldr	r2, [pc, #16]	@ (8011954 <acc_radar_engine_a121_verify_radar_data_ready+0x7c>)
 8011942:	463b      	mov	r3, r7
 8011944:	47a8      	blx	r5
 8011946:	e7dc      	b.n	8011902 <acc_radar_engine_a121_verify_radar_data_ready+0x2a>
 8011948:	200008cc 	.word	0x200008cc
 801194c:	0801aafc 	.word	0x0801aafc
 8011950:	0801aabc 	.word	0x0801aabc
 8011954:	0801ab1c 	.word	0x0801ab1c

08011958 <acc_radar_engine_a121_update_buffer_header>:
 8011958:	f890 31c4 	ldrb.w	r3, [r0, #452]	@ 0x1c4
 801195c:	8011      	strh	r1, [r2, #0]
 801195e:	b4f0      	push	{r4, r5, r6, r7}
 8011960:	b133      	cbz	r3, 8011970 <acc_radar_engine_a121_update_buffer_header+0x18>
 8011962:	f890 31c6 	ldrb.w	r3, [r0, #454]	@ 0x1c6
 8011966:	f1a3 0301 	sub.w	r3, r3, #1
 801196a:	fab3 f383 	clz	r3, r3
 801196e:	095b      	lsrs	r3, r3, #5
 8011970:	8053      	strh	r3, [r2, #2]
 8011972:	f8b0 31c8 	ldrh.w	r3, [r0, #456]	@ 0x1c8
 8011976:	8093      	strh	r3, [r2, #4]
 8011978:	1d91      	adds	r1, r2, #6
 801197a:	f500 73e5 	add.w	r3, r0, #458	@ 0x1ca
 801197e:	f500 74fd 	add.w	r4, r0, #506	@ 0x1fa
 8011982:	681f      	ldr	r7, [r3, #0]
 8011984:	685e      	ldr	r6, [r3, #4]
 8011986:	689d      	ldr	r5, [r3, #8]
 8011988:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801198c:	f8c1 c00c 	str.w	ip, [r1, #12]
 8011990:	3310      	adds	r3, #16
 8011992:	42a3      	cmp	r3, r4
 8011994:	600f      	str	r7, [r1, #0]
 8011996:	604e      	str	r6, [r1, #4]
 8011998:	608d      	str	r5, [r1, #8]
 801199a:	f101 0110 	add.w	r1, r1, #16
 801199e:	d1f0      	bne.n	8011982 <acc_radar_engine_a121_update_buffer_header+0x2a>
 80119a0:	f8b0 31fa 	ldrh.w	r3, [r0, #506]	@ 0x1fa
 80119a4:	86d3      	strh	r3, [r2, #54]	@ 0x36
 80119a6:	bcf0      	pop	{r4, r5, r6, r7}
 80119a8:	4770      	bx	lr
 80119aa:	bf00      	nop

080119ac <acc_radar_engine_a121_check_asic_id>:
 80119ac:	f000 bc6a 	b.w	8012284 <acc_sensor_protocol_a121_check_asic_id>

080119b0 <acc_radar_engine_a121_is_sensor_running>:
 80119b0:	f000 bb74 	b.w	801209c <acc_sensor_protocol_a121_is_sensor_running>

080119b4 <acc_radar_engine_121_populate_metadata>:
 80119b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119b8:	8804      	ldrh	r4, [r0, #0]
 80119ba:	2a00      	cmp	r2, #0
 80119bc:	bf14      	ite	ne
 80119be:	f44f 5280 	movne.w	r2, #4096	@ 0x1000
 80119c2:	f44f 5200 	moveq.w	r2, #8192	@ 0x2000
 80119c6:	f5b4 6f9c 	cmp.w	r4, #1248	@ 0x4e0
 80119ca:	bf38      	it	cc
 80119cc:	f44f 649c 	movcc.w	r4, #1248	@ 0x4e0
 80119d0:	42a2      	cmp	r2, r4
 80119d2:	4606      	mov	r6, r0
 80119d4:	4688      	mov	r8, r1
 80119d6:	461d      	mov	r5, r3
 80119d8:	d22b      	bcs.n	8011a32 <acc_radar_engine_121_populate_metadata+0x7e>
 80119da:	4b17      	ldr	r3, [pc, #92]	@ (8011a38 <acc_radar_engine_121_populate_metadata+0x84>)
 80119dc:	4a17      	ldr	r2, [pc, #92]	@ (8011a3c <acc_radar_engine_121_populate_metadata+0x88>)
 80119de:	691b      	ldr	r3, [r3, #16]
 80119e0:	4917      	ldr	r1, [pc, #92]	@ (8011a40 <acc_radar_engine_121_populate_metadata+0x8c>)
 80119e2:	2000      	movs	r0, #0
 80119e4:	4798      	blx	r3
 80119e6:	2700      	movs	r7, #0
 80119e8:	4916      	ldr	r1, [pc, #88]	@ (8011a44 <acc_radar_engine_121_populate_metadata+0x90>)
 80119ea:	4a17      	ldr	r2, [pc, #92]	@ (8011a48 <acc_radar_engine_121_populate_metadata+0x94>)
 80119ec:	2300      	movs	r3, #0
 80119ee:	806b      	strh	r3, [r5, #2]
 80119f0:	231c      	movs	r3, #28
 80119f2:	81ab      	strh	r3, [r5, #12]
 80119f4:	e9c5 1201 	strd	r1, r2, [r5, #4]
 80119f8:	f000 f9e0 	bl	8011dbc <acc_sensor_a121_get_max_header_length>
 80119fc:	301c      	adds	r0, #28
 80119fe:	b280      	uxth	r0, r0
 8011a00:	1903      	adds	r3, r0, r4
 8011a02:	462c      	mov	r4, r5
 8011a04:	005b      	lsls	r3, r3, #1
 8011a06:	81e8      	strh	r0, [r5, #14]
 8011a08:	6871      	ldr	r1, [r6, #4]
 8011a0a:	6830      	ldr	r0, [r6, #0]
 8011a0c:	68b2      	ldr	r2, [r6, #8]
 8011a0e:	f824 3b10 	strh.w	r3, [r4], #16
 8011a12:	68f3      	ldr	r3, [r6, #12]
 8011a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011a16:	6930      	ldr	r0, [r6, #16]
 8011a18:	6971      	ldr	r1, [r6, #20]
 8011a1a:	69b2      	ldr	r2, [r6, #24]
 8011a1c:	c407      	stmia	r4!, {r0, r1, r2}
 8011a1e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8011a22:	8bb3      	ldrh	r3, [r6, #28]
 8011a24:	8023      	strh	r3, [r4, #0]
 8011a26:	3530      	adds	r5, #48	@ 0x30
 8011a28:	e885 0003 	stmia.w	r5, {r0, r1}
 8011a2c:	4638      	mov	r0, r7
 8011a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a32:	2701      	movs	r7, #1
 8011a34:	e7d8      	b.n	80119e8 <acc_radar_engine_121_populate_metadata+0x34>
 8011a36:	bf00      	nop
 8011a38:	200008cc 	.word	0x200008cc
 8011a3c:	0801ab48 	.word	0x0801ab48
 8011a40:	0801aabc 	.word	0x0801aabc
 8011a44:	00020001 	.word	0x00020001
 8011a48:	001b0003 	.word	0x001b0003

08011a4c <acc_radar_engine_a121_prepare>:
 8011a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a50:	f5ad 7d0d 	sub.w	sp, sp, #564	@ 0x234
 8011a54:	460c      	mov	r4, r1
 8011a56:	4615      	mov	r5, r2
 8011a58:	2100      	movs	r1, #0
 8011a5a:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 8011a5e:	4606      	mov	r6, r0
 8011a60:	a81b      	add	r0, sp, #108	@ 0x6c
 8011a62:	4699      	mov	r9, r3
 8011a64:	9f95      	ldr	r7, [sp, #596]	@ 0x254
 8011a66:	f10d 080c 	add.w	r8, sp, #12
 8011a6a:	f004 f849 	bl	8015b00 <memset>
 8011a6e:	2238      	movs	r2, #56	@ 0x38
 8011a70:	2100      	movs	r1, #0
 8011a72:	a80d      	add	r0, sp, #52	@ 0x34
 8011a74:	f004 f844 	bl	8015b00 <memset>
 8011a78:	4629      	mov	r1, r5
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	aa1b      	add	r2, sp, #108	@ 0x6c
 8011a7e:	ab05      	add	r3, sp, #20
 8011a80:	f8cd 8000 	str.w	r8, [sp]
 8011a84:	f001 f9da 	bl	8012e3c <acc_translation_a121_translate>
 8011a88:	b930      	cbnz	r0, 8011a98 <acc_radar_engine_a121_prepare+0x4c>
 8011a8a:	f04f 0800 	mov.w	r8, #0
 8011a8e:	4640      	mov	r0, r8
 8011a90:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 8011a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a98:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 8011a9c:	4641      	mov	r1, r8
 8011a9e:	a805      	add	r0, sp, #20
 8011aa0:	ab0d      	add	r3, sp, #52	@ 0x34
 8011aa2:	f7ff ff87 	bl	80119b4 <acc_radar_engine_121_populate_metadata>
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	d0ef      	beq.n	8011a8a <acc_radar_engine_a121_prepare+0x3e>
 8011aaa:	9996      	ldr	r1, [sp, #600]	@ 0x258
 8011aac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011ab0:	800b      	strh	r3, [r1, #0]
 8011ab2:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 8011ab4:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 8011ab8:	800a      	strh	r2, [r1, #0]
 8011aba:	2304      	movs	r3, #4
 8011abc:	aa1b      	add	r2, sp, #108	@ 0x6c
 8011abe:	4631      	mov	r1, r6
 8011ac0:	2014      	movs	r0, #20
 8011ac2:	f002 f94f 	bl	8013d64 <acc_probes_execute_struct>
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	d0df      	beq.n	8011a8a <acc_radar_engine_a121_prepare+0x3e>
 8011aca:	9994      	ldr	r1, [sp, #592]	@ 0x250
 8011acc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011ace:	464a      	mov	r2, r9
 8011ad0:	4630      	mov	r0, r6
 8011ad2:	f002 fdfd 	bl	80146d0 <acc_cpd_a121_meas_session_load_program>
 8011ad6:	4680      	mov	r8, r0
 8011ad8:	b928      	cbnz	r0, 8011ae6 <acc_radar_engine_a121_prepare+0x9a>
 8011ada:	4b27      	ldr	r3, [pc, #156]	@ (8011b78 <acc_radar_engine_a121_prepare+0x12c>)
 8011adc:	4a27      	ldr	r2, [pc, #156]	@ (8011b7c <acc_radar_engine_a121_prepare+0x130>)
 8011ade:	691b      	ldr	r3, [r3, #16]
 8011ae0:	4927      	ldr	r1, [pc, #156]	@ (8011b80 <acc_radar_engine_a121_prepare+0x134>)
 8011ae2:	4798      	blx	r3
 8011ae4:	e7d3      	b.n	8011a8e <acc_radar_engine_a121_prepare+0x42>
 8011ae6:	4b27      	ldr	r3, [pc, #156]	@ (8011b84 <acc_radar_engine_a121_prepare+0x138>)
 8011ae8:	9300      	str	r3, [sp, #0]
 8011aea:	2260      	movs	r2, #96	@ 0x60
 8011aec:	9201      	str	r2, [sp, #4]
 8011aee:	9994      	ldr	r1, [sp, #592]	@ 0x250
 8011af0:	464a      	mov	r2, r9
 8011af2:	4630      	mov	r0, r6
 8011af4:	2300      	movs	r3, #0
 8011af6:	f000 fabb 	bl	8012070 <acc_sensor_protocol_a121_load_lut>
 8011afa:	4680      	mov	r8, r0
 8011afc:	b3a8      	cbz	r0, 8011b6a <acc_radar_engine_a121_prepare+0x11e>
 8011afe:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 8011b02:	a91b      	add	r1, sp, #108	@ 0x6c
 8011b04:	4638      	mov	r0, r7
 8011b06:	f004 f892 	bl	8015c2e <memcpy>
 8011b0a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 8011b0e:	b122      	cbz	r2, 8011b1a <acc_radar_engine_a121_prepare+0xce>
 8011b10:	f894 304e 	ldrb.w	r3, [r4, #78]	@ 0x4e
 8011b14:	1e1a      	subs	r2, r3, #0
 8011b16:	bf18      	it	ne
 8011b18:	2201      	movne	r2, #1
 8011b1a:	2101      	movs	r1, #1
 8011b1c:	462b      	mov	r3, r5
 8011b1e:	f894 004b 	ldrb.w	r0, [r4, #75]	@ 0x4b
 8011b22:	f887 11c6 	strb.w	r1, [r7, #454]	@ 0x1c6
 8011b26:	f833 1b26 	ldrh.w	r1, [r3], #38
 8011b2a:	f8a7 11c8 	strh.w	r1, [r7, #456]	@ 0x1c8
 8011b2e:	f887 01c5 	strb.w	r0, [r7, #453]	@ 0x1c5
 8011b32:	f887 21c4 	strb.w	r2, [r7, #452]	@ 0x1c4
 8011b36:	f507 71e5 	add.w	r1, r7, #458	@ 0x1ca
 8011b3a:	f105 0c56 	add.w	ip, r5, #86	@ 0x56
 8011b3e:	681c      	ldr	r4, [r3, #0]
 8011b40:	6858      	ldr	r0, [r3, #4]
 8011b42:	689a      	ldr	r2, [r3, #8]
 8011b44:	68de      	ldr	r6, [r3, #12]
 8011b46:	60ce      	str	r6, [r1, #12]
 8011b48:	3310      	adds	r3, #16
 8011b4a:	4563      	cmp	r3, ip
 8011b4c:	600c      	str	r4, [r1, #0]
 8011b4e:	6048      	str	r0, [r1, #4]
 8011b50:	608a      	str	r2, [r1, #8]
 8011b52:	f101 0110 	add.w	r1, r1, #16
 8011b56:	d1f2      	bne.n	8011b3e <acc_radar_engine_a121_prepare+0xf2>
 8011b58:	f8b5 3056 	ldrh.w	r3, [r5, #86]	@ 0x56
 8011b5c:	f8a7 31fa 	strh.w	r3, [r7, #506]	@ 0x1fa
 8011b60:	4640      	mov	r0, r8
 8011b62:	f50d 7d0d 	add.w	sp, sp, #564	@ 0x234
 8011b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b6a:	4b03      	ldr	r3, [pc, #12]	@ (8011b78 <acc_radar_engine_a121_prepare+0x12c>)
 8011b6c:	4a06      	ldr	r2, [pc, #24]	@ (8011b88 <acc_radar_engine_a121_prepare+0x13c>)
 8011b6e:	691b      	ldr	r3, [r3, #16]
 8011b70:	4903      	ldr	r1, [pc, #12]	@ (8011b80 <acc_radar_engine_a121_prepare+0x134>)
 8011b72:	4798      	blx	r3
 8011b74:	e78b      	b.n	8011a8e <acc_radar_engine_a121_prepare+0x42>
 8011b76:	bf00      	nop
 8011b78:	200008cc 	.word	0x200008cc
 8011b7c:	0801ab68 	.word	0x0801ab68
 8011b80:	0801aabc 	.word	0x0801aabc
 8011b84:	0801cb78 	.word	0x0801cb78
 8011b88:	0801ab7c 	.word	0x0801ab7c

08011b8c <acc_radar_engine_a121_reconfigure>:
 8011b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b90:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8011b94:	4607      	mov	r7, r0
 8011b96:	9c95      	ldr	r4, [sp, #596]	@ 0x254
 8011b98:	460d      	mov	r5, r1
 8011b9a:	4616      	mov	r6, r2
 8011b9c:	2100      	movs	r1, #0
 8011b9e:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 8011ba2:	a81b      	add	r0, sp, #108	@ 0x6c
 8011ba4:	4699      	mov	r9, r3
 8011ba6:	f003 ffab 	bl	8015b00 <memset>
 8011baa:	a80d      	add	r0, sp, #52	@ 0x34
 8011bac:	2238      	movs	r2, #56	@ 0x38
 8011bae:	2100      	movs	r1, #0
 8011bb0:	f003 ffa6 	bl	8015b00 <memset>
 8011bb4:	f894 a1c5 	ldrb.w	sl, [r4, #453]	@ 0x1c5
 8011bb8:	f1ba 0f00 	cmp.w	sl, #0
 8011bbc:	d00c      	beq.n	8011bd8 <acc_radar_engine_a121_reconfigure+0x4c>
 8011bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8011cb8 <acc_radar_engine_a121_reconfigure+0x12c>)
 8011bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8011cbc <acc_radar_engine_a121_reconfigure+0x130>)
 8011bc2:	691b      	ldr	r3, [r3, #16]
 8011bc4:	493e      	ldr	r1, [pc, #248]	@ (8011cc0 <acc_radar_engine_a121_reconfigure+0x134>)
 8011bc6:	2000      	movs	r0, #0
 8011bc8:	4798      	blx	r3
 8011bca:	f04f 0800 	mov.w	r8, #0
 8011bce:	4640      	mov	r0, r8
 8011bd0:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 8011bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bd8:	f10d 080c 	add.w	r8, sp, #12
 8011bdc:	ab05      	add	r3, sp, #20
 8011bde:	f8cd 8000 	str.w	r8, [sp]
 8011be2:	aa1b      	add	r2, sp, #108	@ 0x6c
 8011be4:	4631      	mov	r1, r6
 8011be6:	4628      	mov	r0, r5
 8011be8:	f001 f928 	bl	8012e3c <acc_translation_a121_translate>
 8011bec:	2800      	cmp	r0, #0
 8011bee:	d0ec      	beq.n	8011bca <acc_radar_engine_a121_reconfigure+0x3e>
 8011bf0:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 8011bf4:	4641      	mov	r1, r8
 8011bf6:	a805      	add	r0, sp, #20
 8011bf8:	ab0d      	add	r3, sp, #52	@ 0x34
 8011bfa:	f7ff fedb 	bl	80119b4 <acc_radar_engine_121_populate_metadata>
 8011bfe:	2800      	cmp	r0, #0
 8011c00:	d0e3      	beq.n	8011bca <acc_radar_engine_a121_reconfigure+0x3e>
 8011c02:	9996      	ldr	r1, [sp, #600]	@ 0x258
 8011c04:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011c08:	800b      	strh	r3, [r1, #0]
 8011c0a:	9997      	ldr	r1, [sp, #604]	@ 0x25c
 8011c0c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 8011c10:	800a      	strh	r2, [r1, #0]
 8011c12:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8011c16:	aa1b      	add	r2, sp, #108	@ 0x6c
 8011c18:	4639      	mov	r1, r7
 8011c1a:	2014      	movs	r0, #20
 8011c1c:	f002 f8a2 	bl	8013d64 <acc_probes_execute_struct>
 8011c20:	4680      	mov	r8, r0
 8011c22:	2800      	cmp	r0, #0
 8011c24:	d0d1      	beq.n	8011bca <acc_radar_engine_a121_reconfigure+0x3e>
 8011c26:	a91b      	add	r1, sp, #108	@ 0x6c
 8011c28:	4620      	mov	r0, r4
 8011c2a:	f002 fd89 	bl	8014740 <acc_cpd_a121_meas_session_is_patch_needed>
 8011c2e:	bbc0      	cbnz	r0, 8011ca2 <acc_radar_engine_a121_reconfigure+0x116>
 8011c30:	a91b      	add	r1, sp, #108	@ 0x6c
 8011c32:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 8011c36:	4620      	mov	r0, r4
 8011c38:	f003 fff9 	bl	8015c2e <memcpy>
 8011c3c:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 8011c40:	bb3b      	cbnz	r3, 8011c92 <acc_radar_engine_a121_reconfigure+0x106>
 8011c42:	2201      	movs	r2, #1
 8011c44:	4633      	mov	r3, r6
 8011c46:	f895 104b 	ldrb.w	r1, [r5, #75]	@ 0x4b
 8011c4a:	f884 21c6 	strb.w	r2, [r4, #454]	@ 0x1c6
 8011c4e:	f833 2b26 	ldrh.w	r2, [r3], #38
 8011c52:	f8a4 21c8 	strh.w	r2, [r4, #456]	@ 0x1c8
 8011c56:	f884 11c5 	strb.w	r1, [r4, #453]	@ 0x1c5
 8011c5a:	f884 a1c4 	strb.w	sl, [r4, #452]	@ 0x1c4
 8011c5e:	f504 71e5 	add.w	r1, r4, #458	@ 0x1ca
 8011c62:	f106 0c56 	add.w	ip, r6, #86	@ 0x56
 8011c66:	681d      	ldr	r5, [r3, #0]
 8011c68:	6858      	ldr	r0, [r3, #4]
 8011c6a:	689a      	ldr	r2, [r3, #8]
 8011c6c:	68df      	ldr	r7, [r3, #12]
 8011c6e:	60cf      	str	r7, [r1, #12]
 8011c70:	3310      	adds	r3, #16
 8011c72:	4563      	cmp	r3, ip
 8011c74:	600d      	str	r5, [r1, #0]
 8011c76:	6048      	str	r0, [r1, #4]
 8011c78:	608a      	str	r2, [r1, #8]
 8011c7a:	f101 0110 	add.w	r1, r1, #16
 8011c7e:	d1f2      	bne.n	8011c66 <acc_radar_engine_a121_reconfigure+0xda>
 8011c80:	f8b6 3056 	ldrh.w	r3, [r6, #86]	@ 0x56
 8011c84:	f8a4 31fa 	strh.w	r3, [r4, #506]	@ 0x1fa
 8011c88:	4640      	mov	r0, r8
 8011c8a:	f50d 7d0c 	add.w	sp, sp, #560	@ 0x230
 8011c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c92:	f895 a04e 	ldrb.w	sl, [r5, #78]	@ 0x4e
 8011c96:	f1ba 0a00 	subs.w	sl, sl, #0
 8011c9a:	bf18      	it	ne
 8011c9c:	f04f 0a01 	movne.w	sl, #1
 8011ca0:	e7cf      	b.n	8011c42 <acc_radar_engine_a121_reconfigure+0xb6>
 8011ca2:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	9994      	ldr	r1, [sp, #592]	@ 0x250
 8011ca8:	464a      	mov	r2, r9
 8011caa:	4638      	mov	r0, r7
 8011cac:	4623      	mov	r3, r4
 8011cae:	f002 fd59 	bl	8014764 <acc_cpd_a121_meas_session_update_program>
 8011cb2:	2800      	cmp	r0, #0
 8011cb4:	d089      	beq.n	8011bca <acc_radar_engine_a121_reconfigure+0x3e>
 8011cb6:	e7bb      	b.n	8011c30 <acc_radar_engine_a121_reconfigure+0xa4>
 8011cb8:	200008cc 	.word	0x200008cc
 8011cbc:	0801ab8c 	.word	0x0801ab8c
 8011cc0:	0801aabc 	.word	0x0801aabc

08011cc4 <acc_radar_engine_a121_get_metadata>:
 8011cc4:	b570      	push	{r4, r5, r6, lr}
 8011cc6:	b0fe      	sub	sp, #504	@ 0x1f8
 8011cc8:	4604      	mov	r4, r0
 8011cca:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 8011cce:	460d      	mov	r5, r1
 8011cd0:	a80d      	add	r0, sp, #52	@ 0x34
 8011cd2:	2100      	movs	r1, #0
 8011cd4:	ae03      	add	r6, sp, #12
 8011cd6:	f003 ff13 	bl	8015b00 <memset>
 8011cda:	aa0d      	add	r2, sp, #52	@ 0x34
 8011cdc:	4620      	mov	r0, r4
 8011cde:	ab05      	add	r3, sp, #20
 8011ce0:	9600      	str	r6, [sp, #0]
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	f001 f8aa 	bl	8012e3c <acc_translation_a121_translate>
 8011ce8:	b908      	cbnz	r0, 8011cee <acc_radar_engine_a121_get_metadata+0x2a>
 8011cea:	b07e      	add	sp, #504	@ 0x1f8
 8011cec:	bd70      	pop	{r4, r5, r6, pc}
 8011cee:	f894 204b 	ldrb.w	r2, [r4, #75]	@ 0x4b
 8011cf2:	462b      	mov	r3, r5
 8011cf4:	4631      	mov	r1, r6
 8011cf6:	a805      	add	r0, sp, #20
 8011cf8:	f7ff fe5c 	bl	80119b4 <acc_radar_engine_121_populate_metadata>
 8011cfc:	b07e      	add	sp, #504	@ 0x1f8
 8011cfe:	bd70      	pop	{r4, r5, r6, pc}

08011d00 <acc_radar_engine_a121_points_to_meter>:
 8011d00:	f000 bb60 	b.w	80123c4 <acc_translation_a121_points_to_meter>

08011d04 <acc_radar_engine_a121_init_interrupts>:
 8011d04:	f000 b906 	b.w	8011f14 <acc_sensor_protocol_a121_init_interrupts>

08011d08 <acc_radar_engine_a121_hibernate_off>:
 8011d08:	f000 baf2 	b.w	80122f0 <acc_sensor_protocol_a121_hibernate_off>

08011d0c <acc_radar_engine_a121_is_hibernate>:
 8011d0c:	f000 bb2a 	b.w	8012364 <acc_sensor_protocol_a121_is_hibernate>

08011d10 <internal_buffer_processed_read.part.0>:
 8011d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d14:	b085      	sub	sp, #20
 8011d16:	469a      	mov	sl, r3
 8011d18:	2600      	movs	r6, #0
 8011d1a:	f89d 4038 	ldrb.w	r4, [sp, #56]	@ 0x38
 8011d1e:	9200      	str	r2, [sp, #0]
 8011d20:	4683      	mov	fp, r0
 8011d22:	4689      	mov	r9, r1
 8011d24:	f7ff fb48 	bl	80113b8 <acc_rss_integration_get_max_spi_transfer_size>
 8011d28:	e9cd 6602 	strd	r6, r6, [sp, #8]
 8011d2c:	f1ba 0f00 	cmp.w	sl, #0
 8011d30:	d03e      	beq.n	8011db0 <internal_buffer_processed_read.part.0+0xa0>
 8011d32:	42b4      	cmp	r4, r6
 8011d34:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8011d38:	bf14      	ite	ne
 8011d3a:	f44f 43e0 	movne.w	r3, #28672	@ 0x7000
 8011d3e:	f44f 4300 	moveq.w	r3, #32768	@ 0x8000
 8011d42:	f1a0 0804 	sub.w	r8, r0, #4
 8011d46:	9301      	str	r3, [sp, #4]
 8011d48:	464d      	mov	r5, r9
 8011d4a:	4657      	mov	r7, sl
 8011d4c:	e025      	b.n	8011d9a <internal_buffer_processed_read.part.0+0x8a>
 8011d4e:	9b00      	ldr	r3, [sp, #0]
 8011d50:	9901      	ldr	r1, [sp, #4]
 8011d52:	8029      	strh	r1, [r5, #0]
 8011d54:	199a      	adds	r2, r3, r6
 8011d56:	f04f 0100 	mov.w	r1, #0
 8011d5a:	1e63      	subs	r3, r4, #1
 8011d5c:	80e9      	strh	r1, [r5, #6]
 8011d5e:	806a      	strh	r2, [r5, #2]
 8011d60:	80ab      	strh	r3, [r5, #4]
 8011d62:	0062      	lsls	r2, r4, #1
 8011d64:	2100      	movs	r1, #0
 8011d66:	f105 0008 	add.w	r0, r5, #8
 8011d6a:	f003 fec9 	bl	8015b00 <memset>
 8011d6e:	4629      	mov	r1, r5
 8011d70:	2301      	movs	r3, #1
 8011d72:	4658      	mov	r0, fp
 8011d74:	1d22      	adds	r2, r4, #4
 8011d76:	f7ff fb25 	bl	80113c4 <acc_rss_integration_sensor_device_transfer>
 8011d7a:	ab02      	add	r3, sp, #8
 8011d7c:	cb03      	ldmia	r3!, {r0, r1}
 8011d7e:	4426      	add	r6, r4
 8011d80:	6069      	str	r1, [r5, #4]
 8011d82:	6028      	str	r0, [r5, #0]
 8011d84:	eb09 0546 	add.w	r5, r9, r6, lsl #1
 8011d88:	f859 0016 	ldr.w	r0, [r9, r6, lsl #1]
 8011d8c:	6869      	ldr	r1, [r5, #4]
 8011d8e:	ab02      	add	r3, sp, #8
 8011d90:	4556      	cmp	r6, sl
 8011d92:	c303      	stmia	r3!, {r0, r1}
 8011d94:	eba7 0704 	sub.w	r7, r7, r4
 8011d98:	d20a      	bcs.n	8011db0 <internal_buffer_processed_read.part.0+0xa0>
 8011d9a:	45b8      	cmp	r8, r7
 8011d9c:	4644      	mov	r4, r8
 8011d9e:	bf28      	it	cs
 8011da0:	463c      	movcs	r4, r7
 8011da2:	45b8      	cmp	r8, r7
 8011da4:	d2d3      	bcs.n	8011d4e <internal_buffer_processed_read.part.0+0x3e>
 8011da6:	e000      	b.n	8011daa <internal_buffer_processed_read.part.0+0x9a>
 8011da8:	3c01      	subs	r4, #1
 8011daa:	07e3      	lsls	r3, r4, #31
 8011dac:	d4fc      	bmi.n	8011da8 <internal_buffer_processed_read.part.0+0x98>
 8011dae:	e7ce      	b.n	8011d4e <internal_buffer_processed_read.part.0+0x3e>
 8011db0:	f109 0008 	add.w	r0, r9, #8
 8011db4:	b005      	add	sp, #20
 8011db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dba:	bf00      	nop

08011dbc <acc_sensor_a121_get_max_header_length>:
 8011dbc:	2004      	movs	r0, #4
 8011dbe:	4770      	bx	lr

08011dc0 <acc_sensor_a121_conf_write_instr>:
 8011dc0:	b570      	push	{r4, r5, r6, lr}
 8011dc2:	2501      	movs	r5, #1
 8011dc4:	b084      	sub	sp, #16
 8011dc6:	f441 43a0 	orr.w	r3, r1, #20480	@ 0x5000
 8011dca:	4604      	mov	r4, r0
 8011dcc:	4616      	mov	r6, r2
 8011dce:	a903      	add	r1, sp, #12
 8011dd0:	462a      	mov	r2, r5
 8011dd2:	a801      	add	r0, sp, #4
 8011dd4:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011dd8:	9601      	str	r6, [sp, #4]
 8011dda:	f8ad 500a 	strh.w	r5, [sp, #10]
 8011dde:	f002 f967 	bl	80140b0 <acc_utils_uint32_to_transfer_buffer>
 8011de2:	4620      	mov	r0, r4
 8011de4:	a902      	add	r1, sp, #8
 8011de6:	2300      	movs	r3, #0
 8011de8:	2204      	movs	r2, #4
 8011dea:	f7ff faeb 	bl	80113c4 <acc_rss_integration_sensor_device_transfer>
 8011dee:	b004      	add	sp, #16
 8011df0:	bd70      	pop	{r4, r5, r6, pc}
 8011df2:	bf00      	nop

08011df4 <acc_sensor_a121_prepare_load_confmem>:
 8011df4:	0849      	lsrs	r1, r1, #1
 8011df6:	b570      	push	{r4, r5, r6, lr}
 8011df8:	6019      	str	r1, [r3, #0]
 8011dfa:	461c      	mov	r4, r3
 8011dfc:	4605      	mov	r5, r0
 8011dfe:	4616      	mov	r6, r2
 8011e00:	f7ff fada 	bl	80113b8 <acc_rss_integration_get_max_spi_transfer_size>
 8011e04:	6821      	ldr	r1, [r4, #0]
 8011e06:	ebb1 0f50 	cmp.w	r1, r0, lsr #1
 8011e0a:	d806      	bhi.n	8011e1a <acc_sensor_a121_prepare_load_confmem+0x26>
 8011e0c:	3902      	subs	r1, #2
 8011e0e:	f021 0101 	bic.w	r1, r1, #1
 8011e12:	3504      	adds	r5, #4
 8011e14:	6035      	str	r5, [r6, #0]
 8011e16:	6021      	str	r1, [r4, #0]
 8011e18:	bd70      	pop	{r4, r5, r6, pc}
 8011e1a:	f7ff facd 	bl	80113b8 <acc_rss_integration_get_max_spi_transfer_size>
 8011e1e:	0841      	lsrs	r1, r0, #1
 8011e20:	e7f4      	b.n	8011e0c <acc_sensor_a121_prepare_load_confmem+0x18>
 8011e22:	bf00      	nop

08011e24 <acc_sensor_a121_load_confmem>:
 8011e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e28:	f103 0802 	add.w	r8, r3, #2
 8011e2c:	461c      	mov	r4, r3
 8011e2e:	4607      	mov	r7, r0
 8011e30:	460e      	mov	r6, r1
 8011e32:	4615      	mov	r5, r2
 8011e34:	f7ff fac0 	bl	80113b8 <acc_rss_integration_get_max_spi_transfer_size>
 8011e38:	ebb0 0f48 	cmp.w	r0, r8, lsl #1
 8011e3c:	d207      	bcs.n	8011e4e <acc_sensor_a121_load_confmem+0x2a>
 8011e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8011e6c <acc_sensor_a121_load_confmem+0x48>)
 8011e40:	4a0b      	ldr	r2, [pc, #44]	@ (8011e70 <acc_sensor_a121_load_confmem+0x4c>)
 8011e42:	691b      	ldr	r3, [r3, #16]
 8011e44:	490b      	ldr	r1, [pc, #44]	@ (8011e74 <acc_sensor_a121_load_confmem+0x50>)
 8011e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e4a:	2000      	movs	r0, #0
 8011e4c:	4718      	bx	r3
 8011e4e:	f446 41a0 	orr.w	r1, r6, #20480	@ 0x5000
 8011e52:	3c01      	subs	r4, #1
 8011e54:	8029      	strh	r1, [r5, #0]
 8011e56:	806c      	strh	r4, [r5, #2]
 8011e58:	f028 4200 	bic.w	r2, r8, #2147483648	@ 0x80000000
 8011e5c:	4629      	mov	r1, r5
 8011e5e:	4638      	mov	r0, r7
 8011e60:	2300      	movs	r3, #0
 8011e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e66:	f7ff baad 	b.w	80113c4 <acc_rss_integration_sensor_device_transfer>
 8011e6a:	bf00      	nop
 8011e6c:	200008cc 	.word	0x200008cc
 8011e70:	0801abf8 	.word	0x0801abf8
 8011e74:	0801abe4 	.word	0x0801abe4

08011e78 <acc_sensor_a121_buffer_processed_read>:
 8011e78:	b510      	push	{r4, lr}
 8011e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011e7e:	b082      	sub	sp, #8
 8011e80:	d805      	bhi.n	8011e8e <acc_sensor_a121_buffer_processed_read+0x16>
 8011e82:	2400      	movs	r4, #0
 8011e84:	9400      	str	r4, [sp, #0]
 8011e86:	f7ff ff43 	bl	8011d10 <internal_buffer_processed_read.part.0>
 8011e8a:	b002      	add	sp, #8
 8011e8c:	bd10      	pop	{r4, pc}
 8011e8e:	4b04      	ldr	r3, [pc, #16]	@ (8011ea0 <acc_sensor_a121_buffer_processed_read+0x28>)
 8011e90:	4a04      	ldr	r2, [pc, #16]	@ (8011ea4 <acc_sensor_a121_buffer_processed_read+0x2c>)
 8011e92:	691b      	ldr	r3, [r3, #16]
 8011e94:	4904      	ldr	r1, [pc, #16]	@ (8011ea8 <acc_sensor_a121_buffer_processed_read+0x30>)
 8011e96:	2000      	movs	r0, #0
 8011e98:	4798      	blx	r3
 8011e9a:	2000      	movs	r0, #0
 8011e9c:	b002      	add	sp, #8
 8011e9e:	bd10      	pop	{r4, pc}
 8011ea0:	200008cc 	.word	0x200008cc
 8011ea4:	0801ac18 	.word	0x0801ac18
 8011ea8:	0801abe4 	.word	0x0801abe4

08011eac <acc_sensor_a121_lut_buffer_write>:
 8011eac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011eb2:	460d      	mov	r5, r1
 8011eb4:	4614      	mov	r4, r2
 8011eb6:	4681      	mov	r9, r0
 8011eb8:	4698      	mov	r8, r3
 8011eba:	f7ff fa7d 	bl	80113b8 <acc_rss_integration_get_max_spi_transfer_size>
 8011ebe:	3c04      	subs	r4, #4
 8011ec0:	1f07      	subs	r7, r0, #4
 8011ec2:	0864      	lsrs	r4, r4, #1
 8011ec4:	087f      	lsrs	r7, r7, #1
 8011ec6:	42a7      	cmp	r7, r4
 8011ec8:	bf28      	it	cs
 8011eca:	4627      	movcs	r7, r4
 8011ecc:	f105 0a04 	add.w	sl, r5, #4
 8011ed0:	2400      	movs	r4, #0
 8011ed2:	1b33      	subs	r3, r6, r4
 8011ed4:	42bb      	cmp	r3, r7
 8011ed6:	bf28      	it	cs
 8011ed8:	463b      	movcs	r3, r7
 8011eda:	1e5a      	subs	r2, r3, #1
 8011edc:	eb08 0104 	add.w	r1, r8, r4
 8011ee0:	469b      	mov	fp, r3
 8011ee2:	806a      	strh	r2, [r5, #2]
 8011ee4:	ea6f 4181 	mvn.w	r1, r1, lsl #18
 8011ee8:	005a      	lsls	r2, r3, #1
 8011eea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011eec:	ea6f 4191 	mvn.w	r1, r1, lsr #18
 8011ef0:	8029      	strh	r1, [r5, #0]
 8011ef2:	4650      	mov	r0, sl
 8011ef4:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8011ef8:	f003 fe99 	bl	8015c2e <memcpy>
 8011efc:	445c      	add	r4, fp
 8011efe:	f10b 0202 	add.w	r2, fp, #2
 8011f02:	2300      	movs	r3, #0
 8011f04:	4629      	mov	r1, r5
 8011f06:	4648      	mov	r0, r9
 8011f08:	f7ff fa5c 	bl	80113c4 <acc_rss_integration_sensor_device_transfer>
 8011f0c:	42a6      	cmp	r6, r4
 8011f0e:	d8e0      	bhi.n	8011ed2 <acc_sensor_a121_lut_buffer_write+0x26>
 8011f10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f14 <acc_sensor_protocol_a121_init_interrupts>:
 8011f14:	b530      	push	{r4, r5, lr}
 8011f16:	b083      	sub	sp, #12
 8011f18:	2500      	movs	r5, #0
 8011f1a:	4629      	mov	r1, r5
 8011f1c:	9500      	str	r5, [sp, #0]
 8011f1e:	237b      	movs	r3, #123	@ 0x7b
 8011f20:	22ff      	movs	r2, #255	@ 0xff
 8011f22:	4604      	mov	r4, r0
 8011f24:	f001 ff5c 	bl	8013de0 <acc_sensor_reg_field_write>
 8011f28:	2101      	movs	r1, #1
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	9100      	str	r1, [sp, #0]
 8011f2e:	238b      	movs	r3, #139	@ 0x8b
 8011f30:	2202      	movs	r2, #2
 8011f32:	f001 ff55 	bl	8013de0 <acc_sensor_reg_field_write>
 8011f36:	9500      	str	r5, [sp, #0]
 8011f38:	4620      	mov	r0, r4
 8011f3a:	238b      	movs	r3, #139	@ 0x8b
 8011f3c:	2280      	movs	r2, #128	@ 0x80
 8011f3e:	2107      	movs	r1, #7
 8011f40:	f001 ff4e 	bl	8013de0 <acc_sensor_reg_field_write>
 8011f44:	b003      	add	sp, #12
 8011f46:	bd30      	pop	{r4, r5, pc}

08011f48 <acc_sensor_protocol_a121_prepare_load>:
 8011f48:	b570      	push	{r4, r5, r6, lr}
 8011f4a:	b082      	sub	sp, #8
 8011f4c:	f10d 0206 	add.w	r2, sp, #6
 8011f50:	2400      	movs	r4, #0
 8011f52:	2137      	movs	r1, #55	@ 0x37
 8011f54:	4605      	mov	r5, r0
 8011f56:	f8ad 4006 	strh.w	r4, [sp, #6]
 8011f5a:	f001 ff1b 	bl	8013d94 <acc_sensor_reg_read>
 8011f5e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011f62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011f66:	b9b3      	cbnz	r3, 8011f96 <acc_sensor_protocol_a121_prepare_load+0x4e>
 8011f68:	f10d 0206 	add.w	r2, sp, #6
 8011f6c:	2400      	movs	r4, #0
 8011f6e:	211c      	movs	r1, #28
 8011f70:	4628      	mov	r0, r5
 8011f72:	f8ad 4006 	strh.w	r4, [sp, #6]
 8011f76:	f001 ff0d 	bl	8013d94 <acc_sensor_reg_read>
 8011f7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011f7e:	051b      	lsls	r3, r3, #20
 8011f80:	d515      	bpl.n	8011fae <acc_sensor_protocol_a121_prepare_load+0x66>
 8011f82:	4b0e      	ldr	r3, [pc, #56]	@ (8011fbc <acc_sensor_protocol_a121_prepare_load+0x74>)
 8011f84:	4a0e      	ldr	r2, [pc, #56]	@ (8011fc0 <acc_sensor_protocol_a121_prepare_load+0x78>)
 8011f86:	691e      	ldr	r6, [r3, #16]
 8011f88:	490e      	ldr	r1, [pc, #56]	@ (8011fc4 <acc_sensor_protocol_a121_prepare_load+0x7c>)
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	462b      	mov	r3, r5
 8011f8e:	47b0      	blx	r6
 8011f90:	4620      	mov	r0, r4
 8011f92:	b002      	add	sp, #8
 8011f94:	bd70      	pop	{r4, r5, r6, pc}
 8011f96:	f7ff fa8f 	bl	80114b8 <acc_rss_integration_log_level>
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	d0e4      	beq.n	8011f68 <acc_sensor_protocol_a121_prepare_load+0x20>
 8011f9e:	4b07      	ldr	r3, [pc, #28]	@ (8011fbc <acc_sensor_protocol_a121_prepare_load+0x74>)
 8011fa0:	4a09      	ldr	r2, [pc, #36]	@ (8011fc8 <acc_sensor_protocol_a121_prepare_load+0x80>)
 8011fa2:	691c      	ldr	r4, [r3, #16]
 8011fa4:	4907      	ldr	r1, [pc, #28]	@ (8011fc4 <acc_sensor_protocol_a121_prepare_load+0x7c>)
 8011fa6:	462b      	mov	r3, r5
 8011fa8:	2001      	movs	r0, #1
 8011faa:	47a0      	blx	r4
 8011fac:	e7dc      	b.n	8011f68 <acc_sensor_protocol_a121_prepare_load+0x20>
 8011fae:	4628      	mov	r0, r5
 8011fb0:	f7ff ffb0 	bl	8011f14 <acc_sensor_protocol_a121_init_interrupts>
 8011fb4:	2001      	movs	r0, #1
 8011fb6:	b002      	add	sp, #8
 8011fb8:	bd70      	pop	{r4, r5, r6, pc}
 8011fba:	bf00      	nop
 8011fbc:	200008cc 	.word	0x200008cc
 8011fc0:	0801ac74 	.word	0x0801ac74
 8011fc4:	0801ac5c 	.word	0x0801ac5c
 8011fc8:	0801ac30 	.word	0x0801ac30

08011fcc <acc_sensor_protocol_a121_is_ready_to_update>:
 8011fcc:	b500      	push	{lr}
 8011fce:	b083      	sub	sp, #12
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	f10d 0206 	add.w	r2, sp, #6
 8011fd6:	2137      	movs	r1, #55	@ 0x37
 8011fd8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011fdc:	f001 feda 	bl	8013d94 <acc_sensor_reg_read>
 8011fe0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8011fe4:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 8011fe8:	3800      	subs	r0, #0
 8011fea:	bf18      	it	ne
 8011fec:	2001      	movne	r0, #1
 8011fee:	b003      	add	sp, #12
 8011ff0:	f85d fb04 	ldr.w	pc, [sp], #4

08011ff4 <acc_sensor_protocol_a121_run_program>:
 8011ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ff6:	b083      	sub	sp, #12
 8011ff8:	f10d 0206 	add.w	r2, sp, #6
 8011ffc:	460e      	mov	r6, r1
 8011ffe:	2400      	movs	r4, #0
 8012000:	211c      	movs	r1, #28
 8012002:	4607      	mov	r7, r0
 8012004:	f8ad 4006 	strh.w	r4, [sp, #6]
 8012008:	f001 fec4 	bl	8013d94 <acc_sensor_reg_read>
 801200c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012010:	f412 6500 	ands.w	r5, r2, #2048	@ 0x800
 8012014:	d10c      	bne.n	8012030 <acc_sensor_protocol_a121_run_program+0x3c>
 8012016:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 801201a:	d313      	bcc.n	8012044 <acc_sensor_protocol_a121_run_program+0x50>
 801201c:	4b10      	ldr	r3, [pc, #64]	@ (8012060 <acc_sensor_protocol_a121_run_program+0x6c>)
 801201e:	4a11      	ldr	r2, [pc, #68]	@ (8012064 <acc_sensor_protocol_a121_run_program+0x70>)
 8012020:	691c      	ldr	r4, [r3, #16]
 8012022:	4911      	ldr	r1, [pc, #68]	@ (8012068 <acc_sensor_protocol_a121_run_program+0x74>)
 8012024:	4628      	mov	r0, r5
 8012026:	4633      	mov	r3, r6
 8012028:	47a0      	blx	r4
 801202a:	4628      	mov	r0, r5
 801202c:	b003      	add	sp, #12
 801202e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012030:	4b0b      	ldr	r3, [pc, #44]	@ (8012060 <acc_sensor_protocol_a121_run_program+0x6c>)
 8012032:	4a0e      	ldr	r2, [pc, #56]	@ (801206c <acc_sensor_protocol_a121_run_program+0x78>)
 8012034:	691d      	ldr	r5, [r3, #16]
 8012036:	490c      	ldr	r1, [pc, #48]	@ (8012068 <acc_sensor_protocol_a121_run_program+0x74>)
 8012038:	4620      	mov	r0, r4
 801203a:	463b      	mov	r3, r7
 801203c:	47a8      	blx	r5
 801203e:	4620      	mov	r0, r4
 8012040:	b003      	add	sp, #12
 8012042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012044:	462a      	mov	r2, r5
 8012046:	4638      	mov	r0, r7
 8012048:	211b      	movs	r1, #27
 801204a:	f001 feb9 	bl	8013dc0 <acc_sensor_reg_write>
 801204e:	4638      	mov	r0, r7
 8012050:	f446 6200 	orr.w	r2, r6, #2048	@ 0x800
 8012054:	211b      	movs	r1, #27
 8012056:	f001 feb3 	bl	8013dc0 <acc_sensor_reg_write>
 801205a:	2001      	movs	r0, #1
 801205c:	b003      	add	sp, #12
 801205e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012060:	200008cc 	.word	0x200008cc
 8012064:	0801acd4 	.word	0x0801acd4
 8012068:	0801ac5c 	.word	0x0801ac5c
 801206c:	0801aca4 	.word	0x0801aca4

08012070 <acc_sensor_protocol_a121_load_lut>:
 8012070:	2b7f      	cmp	r3, #127	@ 0x7f
 8012072:	d809      	bhi.n	8012088 <acc_sensor_protocol_a121_load_lut+0x18>
 8012074:	b530      	push	{r4, r5, lr}
 8012076:	b083      	sub	sp, #12
 8012078:	461c      	mov	r4, r3
 801207a:	9d07      	ldr	r5, [sp, #28]
 801207c:	442c      	add	r4, r5
 801207e:	2c80      	cmp	r4, #128	@ 0x80
 8012080:	d904      	bls.n	801208c <acc_sensor_protocol_a121_load_lut+0x1c>
 8012082:	2000      	movs	r0, #0
 8012084:	b003      	add	sp, #12
 8012086:	bd30      	pop	{r4, r5, pc}
 8012088:	2000      	movs	r0, #0
 801208a:	4770      	bx	lr
 801208c:	9c06      	ldr	r4, [sp, #24]
 801208e:	9501      	str	r5, [sp, #4]
 8012090:	9400      	str	r4, [sp, #0]
 8012092:	f7ff ff0b 	bl	8011eac <acc_sensor_a121_lut_buffer_write>
 8012096:	2001      	movs	r0, #1
 8012098:	b003      	add	sp, #12
 801209a:	bd30      	pop	{r4, r5, pc}

0801209c <acc_sensor_protocol_a121_is_sensor_running>:
 801209c:	b500      	push	{lr}
 801209e:	b083      	sub	sp, #12
 80120a0:	2300      	movs	r3, #0
 80120a2:	f10d 0206 	add.w	r2, sp, #6
 80120a6:	211c      	movs	r1, #28
 80120a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80120ac:	f001 fe72 	bl	8013d94 <acc_sensor_reg_read>
 80120b0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80120b4:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 80120b8:	b003      	add	sp, #12
 80120ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80120be:	bf00      	nop

080120c0 <acc_sensor_protocol_a121_is_event_pending>:
 80120c0:	b510      	push	{r4, lr}
 80120c2:	b082      	sub	sp, #8
 80120c4:	460c      	mov	r4, r1
 80120c6:	2300      	movs	r3, #0
 80120c8:	f10d 0206 	add.w	r2, sp, #6
 80120cc:	2137      	movs	r1, #55	@ 0x37
 80120ce:	f8ad 3006 	strh.w	r3, [sp, #6]
 80120d2:	f001 fe5f 	bl	8013d94 <acc_sensor_reg_read>
 80120d6:	2c01      	cmp	r4, #1
 80120d8:	d00b      	beq.n	80120f2 <acc_sensor_protocol_a121_is_event_pending+0x32>
 80120da:	2c02      	cmp	r4, #2
 80120dc:	bf14      	ite	ne
 80120de:	23c0      	movne	r3, #192	@ 0xc0
 80120e0:	2380      	moveq	r3, #128	@ 0x80
 80120e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80120e6:	4213      	tst	r3, r2
 80120e8:	bf14      	ite	ne
 80120ea:	2001      	movne	r0, #1
 80120ec:	2000      	moveq	r0, #0
 80120ee:	b002      	add	sp, #8
 80120f0:	bd10      	pop	{r4, pc}
 80120f2:	2340      	movs	r3, #64	@ 0x40
 80120f4:	e7f5      	b.n	80120e2 <acc_sensor_protocol_a121_is_event_pending+0x22>
 80120f6:	bf00      	nop

080120f8 <acc_sensor_protocol_a121_ack_event>:
 80120f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120fa:	b083      	sub	sp, #12
 80120fc:	2400      	movs	r4, #0
 80120fe:	2901      	cmp	r1, #1
 8012100:	4607      	mov	r7, r0
 8012102:	4616      	mov	r6, r2
 8012104:	f8ad 4006 	strh.w	r4, [sp, #6]
 8012108:	d019      	beq.n	801213e <acc_sensor_protocol_a121_ack_event+0x46>
 801210a:	2902      	cmp	r1, #2
 801210c:	d009      	beq.n	8012122 <acc_sensor_protocol_a121_ack_event+0x2a>
 801210e:	4b1a      	ldr	r3, [pc, #104]	@ (8012178 <acc_sensor_protocol_a121_ack_event+0x80>)
 8012110:	4a1a      	ldr	r2, [pc, #104]	@ (801217c <acc_sensor_protocol_a121_ack_event+0x84>)
 8012112:	691d      	ldr	r5, [r3, #16]
 8012114:	491a      	ldr	r1, [pc, #104]	@ (8012180 <acc_sensor_protocol_a121_ack_event+0x88>)
 8012116:	4603      	mov	r3, r0
 8012118:	4620      	mov	r0, r4
 801211a:	47a8      	blx	r5
 801211c:	4620      	mov	r0, r4
 801211e:	b003      	add	sp, #12
 8012120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012122:	2146      	movs	r1, #70	@ 0x46
 8012124:	f10d 0206 	add.w	r2, sp, #6
 8012128:	4638      	mov	r0, r7
 801212a:	f001 fe33 	bl	8013d94 <acc_sensor_reg_read>
 801212e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8012132:	2484      	movs	r4, #132	@ 0x84
 8012134:	b175      	cbz	r5, 8012154 <acc_sensor_protocol_a121_ack_event+0x5c>
 8012136:	b9be      	cbnz	r6, 8012168 <acc_sensor_protocol_a121_ack_event+0x70>
 8012138:	2001      	movs	r0, #1
 801213a:	b003      	add	sp, #12
 801213c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801213e:	2145      	movs	r1, #69	@ 0x45
 8012140:	f10d 0206 	add.w	r2, sp, #6
 8012144:	4638      	mov	r0, r7
 8012146:	f001 fe25 	bl	8013d94 <acc_sensor_reg_read>
 801214a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801214e:	2483      	movs	r4, #131	@ 0x83
 8012150:	2d00      	cmp	r5, #0
 8012152:	d1f0      	bne.n	8012136 <acc_sensor_protocol_a121_ack_event+0x3e>
 8012154:	4b08      	ldr	r3, [pc, #32]	@ (8012178 <acc_sensor_protocol_a121_ack_event+0x80>)
 8012156:	4a0b      	ldr	r2, [pc, #44]	@ (8012184 <acc_sensor_protocol_a121_ack_event+0x8c>)
 8012158:	691c      	ldr	r4, [r3, #16]
 801215a:	4909      	ldr	r1, [pc, #36]	@ (8012180 <acc_sensor_protocol_a121_ack_event+0x88>)
 801215c:	4628      	mov	r0, r5
 801215e:	463b      	mov	r3, r7
 8012160:	47a0      	blx	r4
 8012162:	4628      	mov	r0, r5
 8012164:	b003      	add	sp, #12
 8012166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012168:	4638      	mov	r0, r7
 801216a:	4621      	mov	r1, r4
 801216c:	2200      	movs	r2, #0
 801216e:	f001 fe27 	bl	8013dc0 <acc_sensor_reg_write>
 8012172:	4630      	mov	r0, r6
 8012174:	e7d3      	b.n	801211e <acc_sensor_protocol_a121_ack_event+0x26>
 8012176:	bf00      	nop
 8012178:	200008cc 	.word	0x200008cc
 801217c:	0801acf0 	.word	0x0801acf0
 8012180:	0801ac5c 	.word	0x0801ac5c
 8012184:	0801ad0c 	.word	0x0801ad0c

08012188 <acc_sensor_protocol_a121_get_event>:
 8012188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801218a:	b085      	sub	sp, #20
 801218c:	2400      	movs	r4, #0
 801218e:	4615      	mov	r5, r2
 8012190:	f8ad 400e 	strh.w	r4, [sp, #14]
 8012194:	2a00      	cmp	r2, #0
 8012196:	d03d      	beq.n	8012214 <acc_sensor_protocol_a121_get_event+0x8c>
 8012198:	2901      	cmp	r1, #1
 801219a:	4607      	mov	r7, r0
 801219c:	d028      	beq.n	80121f0 <acc_sensor_protocol_a121_get_event+0x68>
 801219e:	2902      	cmp	r1, #2
 80121a0:	d11d      	bne.n	80121de <acc_sensor_protocol_a121_get_event+0x56>
 80121a2:	2132      	movs	r1, #50	@ 0x32
 80121a4:	2401      	movs	r4, #1
 80121a6:	f10d 020e 	add.w	r2, sp, #14
 80121aa:	4638      	mov	r0, r7
 80121ac:	f001 fdf2 	bl	8013d94 <acc_sensor_reg_read>
 80121b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80121b4:	806b      	strh	r3, [r5, #2]
 80121b6:	f003 0607 	and.w	r6, r3, #7
 80121ba:	2e01      	cmp	r6, #1
 80121bc:	802e      	strh	r6, [r5, #0]
 80121be:	d033      	beq.n	8012228 <acc_sensor_protocol_a121_get_event+0xa0>
 80121c0:	f013 0f06 	tst.w	r3, #6
 80121c4:	d117      	bne.n	80121f6 <acc_sensor_protocol_a121_get_event+0x6e>
 80121c6:	b9ce      	cbnz	r6, 80121fc <acc_sensor_protocol_a121_get_event+0x74>
 80121c8:	4a1d      	ldr	r2, [pc, #116]	@ (8012240 <acc_sensor_protocol_a121_get_event+0xb8>)
 80121ca:	9700      	str	r7, [sp, #0]
 80121cc:	6914      	ldr	r4, [r2, #16]
 80121ce:	491d      	ldr	r1, [pc, #116]	@ (8012244 <acc_sensor_protocol_a121_get_event+0xbc>)
 80121d0:	4a1d      	ldr	r2, [pc, #116]	@ (8012248 <acc_sensor_protocol_a121_get_event+0xc0>)
 80121d2:	4630      	mov	r0, r6
 80121d4:	47a0      	blx	r4
 80121d6:	4634      	mov	r4, r6
 80121d8:	4620      	mov	r0, r4
 80121da:	b005      	add	sp, #20
 80121dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121de:	4b18      	ldr	r3, [pc, #96]	@ (8012240 <acc_sensor_protocol_a121_get_event+0xb8>)
 80121e0:	4918      	ldr	r1, [pc, #96]	@ (8012244 <acc_sensor_protocol_a121_get_event+0xbc>)
 80121e2:	691e      	ldr	r6, [r3, #16]
 80121e4:	4a19      	ldr	r2, [pc, #100]	@ (801224c <acc_sensor_protocol_a121_get_event+0xc4>)
 80121e6:	4603      	mov	r3, r0
 80121e8:	4620      	mov	r0, r4
 80121ea:	47b0      	blx	r6
 80121ec:	4621      	mov	r1, r4
 80121ee:	e7da      	b.n	80121a6 <acc_sensor_protocol_a121_get_event+0x1e>
 80121f0:	460c      	mov	r4, r1
 80121f2:	2133      	movs	r1, #51	@ 0x33
 80121f4:	e7d7      	b.n	80121a6 <acc_sensor_protocol_a121_get_event+0x1e>
 80121f6:	3e02      	subs	r6, #2
 80121f8:	2e01      	cmp	r6, #1
 80121fa:	d9ed      	bls.n	80121d8 <acc_sensor_protocol_a121_get_event+0x50>
 80121fc:	4a10      	ldr	r2, [pc, #64]	@ (8012240 <acc_sensor_protocol_a121_get_event+0xb8>)
 80121fe:	9700      	str	r7, [sp, #0]
 8012200:	6914      	ldr	r4, [r2, #16]
 8012202:	4910      	ldr	r1, [pc, #64]	@ (8012244 <acc_sensor_protocol_a121_get_event+0xbc>)
 8012204:	4a12      	ldr	r2, [pc, #72]	@ (8012250 <acc_sensor_protocol_a121_get_event+0xc8>)
 8012206:	2000      	movs	r0, #0
 8012208:	47a0      	blx	r4
 801220a:	2400      	movs	r4, #0
 801220c:	4620      	mov	r0, r4
 801220e:	802c      	strh	r4, [r5, #0]
 8012210:	b005      	add	sp, #20
 8012212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012214:	4b0a      	ldr	r3, [pc, #40]	@ (8012240 <acc_sensor_protocol_a121_get_event+0xb8>)
 8012216:	4a0f      	ldr	r2, [pc, #60]	@ (8012254 <acc_sensor_protocol_a121_get_event+0xcc>)
 8012218:	691b      	ldr	r3, [r3, #16]
 801221a:	490a      	ldr	r1, [pc, #40]	@ (8012244 <acc_sensor_protocol_a121_get_event+0xbc>)
 801221c:	4628      	mov	r0, r5
 801221e:	4798      	blx	r3
 8012220:	462c      	mov	r4, r5
 8012222:	4620      	mov	r0, r4
 8012224:	b005      	add	sp, #20
 8012226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012228:	4a05      	ldr	r2, [pc, #20]	@ (8012240 <acc_sensor_protocol_a121_get_event+0xb8>)
 801222a:	9700      	str	r7, [sp, #0]
 801222c:	6914      	ldr	r4, [r2, #16]
 801222e:	4905      	ldr	r1, [pc, #20]	@ (8012244 <acc_sensor_protocol_a121_get_event+0xbc>)
 8012230:	4a09      	ldr	r2, [pc, #36]	@ (8012258 <acc_sensor_protocol_a121_get_event+0xd0>)
 8012232:	2000      	movs	r0, #0
 8012234:	47a0      	blx	r4
 8012236:	2400      	movs	r4, #0
 8012238:	4620      	mov	r0, r4
 801223a:	b005      	add	sp, #20
 801223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801223e:	bf00      	nop
 8012240:	200008cc 	.word	0x200008cc
 8012244:	0801ac5c 	.word	0x0801ac5c
 8012248:	0801ad54 	.word	0x0801ad54
 801224c:	0801acf0 	.word	0x0801acf0
 8012250:	0801adb8 	.word	0x0801adb8
 8012254:	0801ad40 	.word	0x0801ad40
 8012258:	0801ad84 	.word	0x0801ad84

0801225c <acc_sensor_protocol_a121_is_handshake>:
 801225c:	8800      	ldrh	r0, [r0, #0]
 801225e:	f1a0 0003 	sub.w	r0, r0, #3
 8012262:	fab0 f080 	clz	r0, r0
 8012266:	0940      	lsrs	r0, r0, #5
 8012268:	4770      	bx	lr
 801226a:	bf00      	nop

0801226c <acc_sensor_protocol_a121_is_done>:
 801226c:	8800      	ldrh	r0, [r0, #0]
 801226e:	f1a0 0002 	sub.w	r0, r0, #2
 8012272:	fab0 f080 	clz	r0, r0
 8012276:	0940      	lsrs	r0, r0, #5
 8012278:	4770      	bx	lr
 801227a:	bf00      	nop

0801227c <acc_sensor_protocol_a121_get_frame_delayed_flag>:
 801227c:	8840      	ldrh	r0, [r0, #2]
 801227e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8012282:	4770      	bx	lr

08012284 <acc_sensor_protocol_a121_check_asic_id>:
 8012284:	b570      	push	{r4, r5, r6, lr}
 8012286:	2300      	movs	r3, #0
 8012288:	b082      	sub	sp, #8
 801228a:	f10d 0206 	add.w	r2, sp, #6
 801228e:	460d      	mov	r5, r1
 8012290:	4619      	mov	r1, r3
 8012292:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012296:	4604      	mov	r4, r0
 8012298:	f001 fd7c 	bl	8013d94 <acc_sensor_reg_read>
 801229c:	480f      	ldr	r0, [pc, #60]	@ (80122dc <acc_sensor_protocol_a121_check_asic_id+0x58>)
 801229e:	f001 ff2f 	bl	8014100 <acc_diagnostic_log_set_scope>
 80122a2:	4621      	mov	r1, r4
 80122a4:	480e      	ldr	r0, [pc, #56]	@ (80122e0 <acc_sensor_protocol_a121_check_asic_id+0x5c>)
 80122a6:	f001 ff3b 	bl	8014120 <acc_diagnostic_log_scalar>
 80122aa:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80122ae:	480b      	ldr	r0, [pc, #44]	@ (80122dc <acc_sensor_protocol_a121_check_asic_id+0x58>)
 80122b0:	f001 ff36 	bl	8014120 <acc_diagnostic_log_scalar>
 80122b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80122b8:	f241 2210 	movw	r2, #4624	@ 0x1210
 80122bc:	4293      	cmp	r3, r2
 80122be:	bf0c      	ite	eq
 80122c0:	2401      	moveq	r4, #1
 80122c2:	2400      	movne	r4, #0
 80122c4:	d006      	beq.n	80122d4 <acc_sensor_protocol_a121_check_asic_id+0x50>
 80122c6:	b92d      	cbnz	r5, 80122d4 <acc_sensor_protocol_a121_check_asic_id+0x50>
 80122c8:	4906      	ldr	r1, [pc, #24]	@ (80122e4 <acc_sensor_protocol_a121_check_asic_id+0x60>)
 80122ca:	4a07      	ldr	r2, [pc, #28]	@ (80122e8 <acc_sensor_protocol_a121_check_asic_id+0x64>)
 80122cc:	690e      	ldr	r6, [r1, #16]
 80122ce:	4907      	ldr	r1, [pc, #28]	@ (80122ec <acc_sensor_protocol_a121_check_asic_id+0x68>)
 80122d0:	4628      	mov	r0, r5
 80122d2:	47b0      	blx	r6
 80122d4:	4620      	mov	r0, r4
 80122d6:	b002      	add	sp, #8
 80122d8:	bd70      	pop	{r4, r5, r6, pc}
 80122da:	bf00      	nop
 80122dc:	0801adec 	.word	0x0801adec
 80122e0:	0801a4f0 	.word	0x0801a4f0
 80122e4:	200008cc 	.word	0x200008cc
 80122e8:	0801adf4 	.word	0x0801adf4
 80122ec:	0801ac5c 	.word	0x0801ac5c

080122f0 <acc_sensor_protocol_a121_hibernate_off>:
 80122f0:	b570      	push	{r4, r5, r6, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	2203      	movs	r2, #3
 80122f6:	460e      	mov	r6, r1
 80122f8:	2100      	movs	r1, #0
 80122fa:	460d      	mov	r5, r1
 80122fc:	4604      	mov	r4, r0
 80122fe:	9200      	str	r2, [sp, #0]
 8012300:	f240 1349 	movw	r3, #329	@ 0x149
 8012304:	f001 fd6c 	bl	8013de0 <acc_sensor_reg_field_write>
 8012308:	4620      	mov	r0, r4
 801230a:	f240 1349 	movw	r3, #329	@ 0x149
 801230e:	2204      	movs	r2, #4
 8012310:	2102      	movs	r1, #2
 8012312:	9500      	str	r5, [sp, #0]
 8012314:	f001 fd64 	bl	8013de0 <acc_sensor_reg_field_write>
 8012318:	4620      	mov	r0, r4
 801231a:	f240 1349 	movw	r3, #329	@ 0x149
 801231e:	2210      	movs	r2, #16
 8012320:	2104      	movs	r1, #4
 8012322:	9500      	str	r5, [sp, #0]
 8012324:	f001 fd5c 	bl	8013de0 <acc_sensor_reg_field_write>
 8012328:	4620      	mov	r0, r4
 801232a:	f240 1349 	movw	r3, #329	@ 0x149
 801232e:	2220      	movs	r2, #32
 8012330:	2105      	movs	r1, #5
 8012332:	9500      	str	r5, [sp, #0]
 8012334:	f001 fd54 	bl	8013de0 <acc_sensor_reg_field_write>
 8012338:	9500      	str	r5, [sp, #0]
 801233a:	4620      	mov	r0, r4
 801233c:	f240 1349 	movw	r3, #329	@ 0x149
 8012340:	f44f 527f 	mov.w	r2, #16320	@ 0x3fc0
 8012344:	2106      	movs	r1, #6
 8012346:	f001 fd4b 	bl	8013de0 <acc_sensor_reg_field_write>
 801234a:	b90e      	cbnz	r6, 8012350 <acc_sensor_protocol_a121_hibernate_off+0x60>
 801234c:	b002      	add	sp, #8
 801234e:	bd70      	pop	{r4, r5, r6, pc}
 8012350:	4620      	mov	r0, r4
 8012352:	f64a 42c0 	movw	r2, #44224	@ 0xacc0
 8012356:	2131      	movs	r1, #49	@ 0x31
 8012358:	b002      	add	sp, #8
 801235a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801235e:	f001 bd2f 	b.w	8013dc0 <acc_sensor_reg_write>
 8012362:	bf00      	nop

08012364 <acc_sensor_protocol_a121_is_hibernate>:
 8012364:	b500      	push	{lr}
 8012366:	b083      	sub	sp, #12
 8012368:	2300      	movs	r3, #0
 801236a:	f10d 0206 	add.w	r2, sp, #6
 801236e:	2131      	movs	r1, #49	@ 0x31
 8012370:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012374:	f001 fd0e 	bl	8013d94 <acc_sensor_reg_read>
 8012378:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801237c:	f64a 43c0 	movw	r3, #44224	@ 0xacc0
 8012380:	1ac0      	subs	r0, r0, r3
 8012382:	fab0 f080 	clz	r0, r0
 8012386:	0940      	lsrs	r0, r0, #5
 8012388:	b003      	add	sp, #12
 801238a:	f85d fb04 	ldr.w	pc, [sp], #4
 801238e:	bf00      	nop

08012390 <acc_sensor_protocol_a121_reconfigure>:
 8012390:	b508      	push	{r3, lr}
 8012392:	2201      	movs	r2, #1
 8012394:	2180      	movs	r1, #128	@ 0x80
 8012396:	f001 fd13 	bl	8013dc0 <acc_sensor_reg_write>
 801239a:	2001      	movs	r0, #1
 801239c:	bd08      	pop	{r3, pc}
 801239e:	bf00      	nop

080123a0 <get_pll_freq>:
 80123a0:	b508      	push	{r3, lr}
 80123a2:	ed2d 8b02 	vpush	{d8}
 80123a6:	f7ff f801 	bl	80113ac <acc_rss_integration_get_sensor_reference_frequency>
 80123aa:	ee07 0a90 	vmov	s15, r0
 80123ae:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80123b2:	eeb0 0a48 	vmov.f32	s0, s16
 80123b6:	f001 fe3b 	bl	8014030 <acc_cpd_pll_divisors_ref_divisor>
 80123ba:	ee28 0a00 	vmul.f32	s0, s16, s0
 80123be:	ecbd 8b02 	vpop	{d8}
 80123c2:	bd08      	pop	{r3, pc}

080123c4 <acc_translation_a121_points_to_meter>:
 80123c4:	b508      	push	{r3, lr}
 80123c6:	ed2d 8b02 	vpush	{d8}
 80123ca:	ee08 0a10 	vmov	s16, r0
 80123ce:	f7ff ffe7 	bl	80123a0 <get_pll_freq>
 80123d2:	eef3 7a08 	vmov.f32	s15, #56	@ 0x41c00000  24.0
 80123d6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80123da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80123de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80123e2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80123e6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8012400 <acc_translation_a121_points_to_meter+0x3c>
 80123ea:	ee67 7a88 	vmul.f32	s15, s15, s16
 80123ee:	ecbd 8b02 	vpop	{d8}
 80123f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123f6:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80123fa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80123fe:	bd08      	pop	{r3, pc}
 8012400:	4d8ef3c2 	.word	0x4d8ef3c2

08012404 <acc_translation_a121_profile_to_pulse_params>:
 8012404:	2300      	movs	r3, #0
 8012406:	3801      	subs	r0, #1
 8012408:	b430      	push	{r4, r5}
 801240a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 801240e:	60d3      	str	r3, [r2, #12]
 8012410:	2804      	cmp	r0, #4
 8012412:	d836      	bhi.n	8012482 <acc_translation_a121_profile_to_pulse_params+0x7e>
 8012414:	e8df f000 	tbb	[pc, r0]
 8012418:	2d291b0d 	.word	0x2d291b0d
 801241c:	03          	.byte	0x03
 801241d:	00          	.byte	0x00
 801241e:	4b1c      	ldr	r3, [pc, #112]	@ (8012490 <acc_translation_a121_profile_to_pulse_params+0x8c>)
 8012420:	491c      	ldr	r1, [pc, #112]	@ (8012494 <acc_translation_a121_profile_to_pulse_params+0x90>)
 8012422:	2000      	movs	r0, #0
 8012424:	e9c2 3305 	strd	r3, r3, [r2, #20]
 8012428:	7010      	strb	r0, [r2, #0]
 801242a:	61d1      	str	r1, [r2, #28]
 801242c:	2001      	movs	r0, #1
 801242e:	bc30      	pop	{r4, r5}
 8012430:	4770      	bx	lr
 8012432:	2001      	movs	r0, #1
 8012434:	2400      	movs	r4, #0
 8012436:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801243a:	7014      	strb	r4, [r2, #0]
 801243c:	82d0      	strh	r0, [r2, #22]
 801243e:	8350      	strh	r0, [r2, #26]
 8012440:	61d3      	str	r3, [r2, #28]
 8012442:	b1d1      	cbz	r1, 801247a <acc_translation_a121_profile_to_pulse_params+0x76>
 8012444:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 8012446:	8293      	strh	r3, [r2, #20]
 8012448:	bc30      	pop	{r4, r5}
 801244a:	8313      	strh	r3, [r2, #24]
 801244c:	4770      	bx	lr
 801244e:	4b12      	ldr	r3, [pc, #72]	@ (8012498 <acc_translation_a121_profile_to_pulse_params+0x94>)
 8012450:	4c12      	ldr	r4, [pc, #72]	@ (801249c <acc_translation_a121_profile_to_pulse_params+0x98>)
 8012452:	61d4      	str	r4, [r2, #28]
 8012454:	2001      	movs	r0, #1
 8012456:	2596      	movs	r5, #150	@ 0x96
 8012458:	21fa      	movs	r1, #250	@ 0xfa
 801245a:	60d5      	str	r5, [r2, #12]
 801245c:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8012460:	bc30      	pop	{r4, r5}
 8012462:	e9c2 3305 	strd	r3, r3, [r2, #20]
 8012466:	7010      	strb	r0, [r2, #0]
 8012468:	4770      	bx	lr
 801246a:	4b0d      	ldr	r3, [pc, #52]	@ (80124a0 <acc_translation_a121_profile_to_pulse_params+0x9c>)
 801246c:	490d      	ldr	r1, [pc, #52]	@ (80124a4 <acc_translation_a121_profile_to_pulse_params+0xa0>)
 801246e:	2000      	movs	r0, #0
 8012470:	e7d8      	b.n	8012424 <acc_translation_a121_profile_to_pulse_params+0x20>
 8012472:	4b0d      	ldr	r3, [pc, #52]	@ (80124a8 <acc_translation_a121_profile_to_pulse_params+0xa4>)
 8012474:	490d      	ldr	r1, [pc, #52]	@ (80124ac <acc_translation_a121_profile_to_pulse_params+0xa8>)
 8012476:	2000      	movs	r0, #0
 8012478:	e7d4      	b.n	8012424 <acc_translation_a121_profile_to_pulse_params+0x20>
 801247a:	2302      	movs	r3, #2
 801247c:	8293      	strh	r3, [r2, #20]
 801247e:	8313      	strh	r3, [r2, #24]
 8012480:	e7d5      	b.n	801242e <acc_translation_a121_profile_to_pulse_params+0x2a>
 8012482:	2000      	movs	r0, #0
 8012484:	e9c2 0005 	strd	r0, r0, [r2, #20]
 8012488:	7010      	strb	r0, [r2, #0]
 801248a:	61d0      	str	r0, [r2, #28]
 801248c:	e7cf      	b.n	801242e <acc_translation_a121_profile_to_pulse_params+0x2a>
 801248e:	bf00      	nop
 8012490:	00050008 	.word	0x00050008
 8012494:	0002000b 	.word	0x0002000b
 8012498:	00010008 	.word	0x00010008
 801249c:	00030002 	.word	0x00030002
 80124a0:	00020008 	.word	0x00020008
 80124a4:	00020004 	.word	0x00020004
 80124a8:	00030008 	.word	0x00030008
 80124ac:	00020006 	.word	0x00020006

080124b0 <acc_translation_a121_profile_to_start_point_offset>:
 80124b0:	3801      	subs	r0, #1
 80124b2:	2804      	cmp	r0, #4
 80124b4:	d818      	bhi.n	80124e8 <acc_translation_a121_profile_to_start_point_offset+0x38>
 80124b6:	e8df f000 	tbb	[pc, r0]
 80124ba:	0812      	.short	0x0812
 80124bc:	0d03      	.short	0x0d03
 80124be:	03          	.byte	0x03
 80124bf:	00          	.byte	0x00
 80124c0:	f06f 030c 	mvn.w	r3, #12
 80124c4:	600b      	str	r3, [r1, #0]
 80124c6:	2001      	movs	r0, #1
 80124c8:	4770      	bx	lr
 80124ca:	f06f 0306 	mvn.w	r3, #6
 80124ce:	600b      	str	r3, [r1, #0]
 80124d0:	2001      	movs	r0, #1
 80124d2:	4770      	bx	lr
 80124d4:	f06f 030f 	mvn.w	r3, #15
 80124d8:	600b      	str	r3, [r1, #0]
 80124da:	2001      	movs	r0, #1
 80124dc:	4770      	bx	lr
 80124de:	f06f 030b 	mvn.w	r3, #11
 80124e2:	600b      	str	r3, [r1, #0]
 80124e4:	2001      	movs	r0, #1
 80124e6:	4770      	bx	lr
 80124e8:	2000      	movs	r0, #0
 80124ea:	6008      	str	r0, [r1, #0]
 80124ec:	4770      	bx	lr
 80124ee:	bf00      	nop

080124f0 <acc_translation_a121_set_calibration_params>:
 80124f0:	b530      	push	{r4, r5, lr}
 80124f2:	460c      	mov	r4, r1
 80124f4:	f8b0 2084 	ldrh.w	r2, [r0, #132]	@ 0x84
 80124f8:	f8b0 3086 	ldrh.w	r3, [r0, #134]	@ 0x86
 80124fc:	f8b0 5082 	ldrh.w	r5, [r0, #130]	@ 0x82
 8012500:	f8b0 1088 	ldrh.w	r1, [r0, #136]	@ 0x88
 8012504:	8062      	strh	r2, [r4, #2]
 8012506:	8842      	ldrh	r2, [r0, #2]
 8012508:	80a3      	strh	r3, [r4, #4]
 801250a:	8883      	ldrh	r3, [r0, #4]
 801250c:	8025      	strh	r5, [r4, #0]
 801250e:	b087      	sub	sp, #28
 8012510:	88c5      	ldrh	r5, [r0, #6]
 8012512:	80e1      	strh	r1, [r4, #6]
 8012514:	8941      	ldrh	r1, [r0, #10]
 8012516:	8122      	strh	r2, [r4, #8]
 8012518:	8c02      	ldrh	r2, [r0, #32]
 801251a:	8163      	strh	r3, [r4, #10]
 801251c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 801251e:	8263      	strh	r3, [r4, #18]
 8012520:	81a5      	strh	r5, [r4, #12]
 8012522:	81e1      	strh	r1, [r4, #14]
 8012524:	8222      	strh	r2, [r4, #16]
 8012526:	8900      	ldrh	r0, [r0, #8]
 8012528:	466a      	mov	r2, sp
 801252a:	2160      	movs	r1, #96	@ 0x60
 801252c:	f001 fd88 	bl	8014040 <acc_dll_calculate_area_settings>
 8012530:	f8bd 1000 	ldrh.w	r1, [sp]
 8012534:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012538:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801253c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
 8012540:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8012544:	82a1      	strh	r1, [r4, #20]
 8012546:	82e2      	strh	r2, [r4, #22]
 8012548:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801254c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012550:	8323      	strh	r3, [r4, #24]
 8012552:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8012556:	8365      	strh	r5, [r4, #26]
 8012558:	83a0      	strh	r0, [r4, #28]
 801255a:	83e1      	strh	r1, [r4, #30]
 801255c:	8422      	strh	r2, [r4, #32]
 801255e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8012560:	b007      	add	sp, #28
 8012562:	bd30      	pop	{r4, r5, pc}

08012564 <acc_translation_a121_set_gain_params>:
 8012564:	7a83      	ldrb	r3, [r0, #10]
 8012566:	2b17      	cmp	r3, #23
 8012568:	d80e      	bhi.n	8012588 <acc_translation_a121_set_gain_params+0x24>
 801256a:	2b09      	cmp	r3, #9
 801256c:	d80e      	bhi.n	801258c <acc_translation_a121_set_gain_params+0x28>
 801256e:	f1c3 0309 	rsb	r3, r3, #9
 8012572:	2015      	movs	r0, #21
 8012574:	8053      	strh	r3, [r2, #2]
 8012576:	8010      	strh	r0, [r2, #0]
 8012578:	b199      	cbz	r1, 80125a2 <acc_translation_a121_set_gain_params+0x3e>
 801257a:	8853      	ldrh	r3, [r2, #2]
 801257c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8012580:	2001      	movs	r0, #1
 8012582:	898b      	ldrh	r3, [r1, #12]
 8012584:	8093      	strh	r3, [r2, #4]
 8012586:	4770      	bx	lr
 8012588:	2000      	movs	r0, #0
 801258a:	4770      	bx	lr
 801258c:	2b10      	cmp	r3, #16
 801258e:	bf94      	ite	ls
 8012590:	f1c3 031e 	rsbls	r3, r3, #30
 8012594:	f1c3 0317 	rsbhi	r3, r3, #23
 8012598:	2000      	movs	r0, #0
 801259a:	8013      	strh	r3, [r2, #0]
 801259c:	8050      	strh	r0, [r2, #2]
 801259e:	2900      	cmp	r1, #0
 80125a0:	d1eb      	bne.n	801257a <acc_translation_a121_set_gain_params+0x16>
 80125a2:	8091      	strh	r1, [r2, #4]
 80125a4:	2001      	movs	r0, #1
 80125a6:	4770      	bx	lr

080125a8 <acc_translation_a121_set_pulse_length_params>:
 80125a8:	8a83      	ldrh	r3, [r0, #20]
 80125aa:	2b08      	cmp	r3, #8
 80125ac:	d802      	bhi.n	80125b4 <acc_translation_a121_set_pulse_length_params+0xc>
 80125ae:	8ac2      	ldrh	r2, [r0, #22]
 80125b0:	2a07      	cmp	r2, #7
 80125b2:	d901      	bls.n	80125b8 <acc_translation_a121_set_pulse_length_params+0x10>
 80125b4:	2000      	movs	r0, #0
 80125b6:	4770      	bx	lr
 80125b8:	b470      	push	{r4, r5, r6}
 80125ba:	8b05      	ldrh	r5, [r0, #24]
 80125bc:	2d08      	cmp	r5, #8
 80125be:	d902      	bls.n	80125c6 <acc_translation_a121_set_pulse_length_params+0x1e>
 80125c0:	2000      	movs	r0, #0
 80125c2:	bc70      	pop	{r4, r5, r6}
 80125c4:	4770      	bx	lr
 80125c6:	8b44      	ldrh	r4, [r0, #26]
 80125c8:	2c08      	cmp	r4, #8
 80125ca:	d8f9      	bhi.n	80125c0 <acc_translation_a121_set_pulse_length_params+0x18>
 80125cc:	2001      	movs	r0, #1
 80125ce:	1e66      	subs	r6, r4, #1
 80125d0:	fa00 f202 	lsl.w	r2, r0, r2
 80125d4:	3a01      	subs	r2, #1
 80125d6:	fa00 f404 	lsl.w	r4, r0, r4
 80125da:	fa00 f606 	lsl.w	r6, r0, r6
 80125de:	b292      	uxth	r2, r2
 80125e0:	3c01      	subs	r4, #1
 80125e2:	3e01      	subs	r6, #1
 80125e4:	01a4      	lsls	r4, r4, #6
 80125e6:	0276      	lsls	r6, r6, #9
 80125e8:	800b      	strh	r3, [r1, #0]
 80125ea:	0193      	lsls	r3, r2, #6
 80125ec:	0252      	lsls	r2, r2, #9
 80125ee:	804d      	strh	r5, [r1, #2]
 80125f0:	808b      	strh	r3, [r1, #4]
 80125f2:	810a      	strh	r2, [r1, #8]
 80125f4:	80cc      	strh	r4, [r1, #6]
 80125f6:	814e      	strh	r6, [r1, #10]
 80125f8:	e7e3      	b.n	80125c2 <acc_translation_a121_set_pulse_length_params+0x1a>
 80125fa:	bf00      	nop

080125fc <acc_translation_a121_set_range_params>:
 80125fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012600:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8012604:	f890 704c 	ldrb.w	r7, [r0, #76]	@ 0x4c
 8012608:	888d      	ldrh	r5, [r1, #4]
 801260a:	b08d      	sub	sp, #52	@ 0x34
 801260c:	f1ba 0f18 	cmp.w	sl, #24
 8012610:	9102      	str	r1, [sp, #8]
 8012612:	4691      	mov	r9, r2
 8012614:	461c      	mov	r4, r3
 8012616:	f240 812e 	bls.w	8012876 <acc_translation_a121_set_range_params+0x27a>
 801261a:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 801261e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8012622:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8012626:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 801262a:	f3c3 02cc 	ubfx	r2, r3, #3, #13
 801262e:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8012632:	b29b      	uxth	r3, r3
 8012634:	f640 22aa 	movw	r2, #2730	@ 0xaaa
 8012638:	4293      	cmp	r3, r2
 801263a:	f240 8141 	bls.w	80128c0 <acc_translation_a121_set_range_params+0x2c4>
 801263e:	4bb3      	ldr	r3, [pc, #716]	@ (801290c <acc_translation_a121_set_range_params+0x310>)
 8012640:	4ab3      	ldr	r2, [pc, #716]	@ (8012910 <acc_translation_a121_set_range_params+0x314>)
 8012642:	691b      	ldr	r3, [r3, #16]
 8012644:	49b3      	ldr	r1, [pc, #716]	@ (8012914 <acc_translation_a121_set_range_params+0x318>)
 8012646:	2000      	movs	r0, #0
 8012648:	4606      	mov	r6, r0
 801264a:	9001      	str	r0, [sp, #4]
 801264c:	f04f 0801 	mov.w	r8, #1
 8012650:	4798      	blx	r3
 8012652:	46c3      	mov	fp, r8
 8012654:	9604      	str	r6, [sp, #16]
 8012656:	2f00      	cmp	r7, #0
 8012658:	f040 812f 	bne.w	80128ba <acc_translation_a121_set_range_params+0x2be>
 801265c:	2204      	movs	r2, #4
 801265e:	9b02      	ldr	r3, [sp, #8]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	4499      	add	r9, r3
 8012664:	f509 43c3 	add.w	r3, r9, #24960	@ 0x6180
 8012668:	fb12 f205 	smulbb	r2, r2, r5
 801266c:	3328      	adds	r3, #40	@ 0x28
 801266e:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012672:	3d01      	subs	r5, #1
 8012674:	b292      	uxth	r2, r2
 8012676:	428b      	cmp	r3, r1
 8012678:	9205      	str	r2, [sp, #20]
 801267a:	fb0a 9a05 	mla	sl, sl, r5, r9
 801267e:	d906      	bls.n	801268e <acc_translation_a121_set_range_params+0x92>
 8012680:	4ba2      	ldr	r3, [pc, #648]	@ (801290c <acc_translation_a121_set_range_params+0x310>)
 8012682:	4aa5      	ldr	r2, [pc, #660]	@ (8012918 <acc_translation_a121_set_range_params+0x31c>)
 8012684:	691b      	ldr	r3, [r3, #16]
 8012686:	49a3      	ldr	r1, [pc, #652]	@ (8012914 <acc_translation_a121_set_range_params+0x318>)
 8012688:	2000      	movs	r0, #0
 801268a:	4798      	blx	r3
 801268c:	2700      	movs	r7, #0
 801268e:	f50a 43c3 	add.w	r3, sl, #24960	@ 0x6180
 8012692:	3328      	adds	r3, #40	@ 0x28
 8012694:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012698:	4293      	cmp	r3, r2
 801269a:	d906      	bls.n	80126aa <acc_translation_a121_set_range_params+0xae>
 801269c:	4b9b      	ldr	r3, [pc, #620]	@ (801290c <acc_translation_a121_set_range_params+0x310>)
 801269e:	4a9f      	ldr	r2, [pc, #636]	@ (801291c <acc_translation_a121_set_range_params+0x320>)
 80126a0:	691b      	ldr	r3, [r3, #16]
 80126a2:	499c      	ldr	r1, [pc, #624]	@ (8012914 <acc_translation_a121_set_range_params+0x318>)
 80126a4:	2000      	movs	r0, #0
 80126a6:	4798      	blx	r3
 80126a8:	2700      	movs	r7, #0
 80126aa:	f1b9 0f00 	cmp.w	r9, #0
 80126ae:	f2c0 817c 	blt.w	80129aa <acc_translation_a121_set_range_params+0x3ae>
 80126b2:	4b9b      	ldr	r3, [pc, #620]	@ (8012920 <acc_translation_a121_set_range_params+0x324>)
 80126b4:	ea4f 72e9 	mov.w	r2, r9, asr #31
 80126b8:	fb83 1309 	smull	r1, r3, r3, r9
 80126bc:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
 80126c0:	f1ba 0f00 	cmp.w	sl, #0
 80126c4:	b21b      	sxth	r3, r3
 80126c6:	f2c0 817e 	blt.w	80129c6 <acc_translation_a121_set_range_params+0x3ca>
 80126ca:	4995      	ldr	r1, [pc, #596]	@ (8012920 <acc_translation_a121_set_range_params+0x324>)
 80126cc:	ea4f 7cea 	mov.w	ip, sl, asr #31
 80126d0:	fb81 010a 	smull	r0, r1, r1, sl
 80126d4:	ebcc 01a1 	rsb	r1, ip, r1, asr #2
 80126d8:	b209      	sxth	r1, r1
 80126da:	4891      	ldr	r0, [pc, #580]	@ (8012920 <acc_translation_a121_set_range_params+0x324>)
 80126dc:	fb80 5009 	smull	r5, r0, r0, r9
 80126e0:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
 80126e4:	b29b      	uxth	r3, r3
 80126e6:	1ac9      	subs	r1, r1, r3
 80126e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80126ec:	b288      	uxth	r0, r1
 80126ee:	ebb9 02c2 	subs.w	r2, r9, r2, lsl #3
 80126f2:	b209      	sxth	r1, r1
 80126f4:	fbb0 fbfb 	udiv	fp, r0, fp
 80126f8:	f10b 0b01 	add.w	fp, fp, #1
 80126fc:	9106      	str	r1, [sp, #24]
 80126fe:	fa1f fb8b 	uxth.w	fp, fp
 8012702:	f04f 0118 	mov.w	r1, #24
 8012706:	fbb1 f1f8 	udiv	r1, r1, r8
 801270a:	f100 816e 	bmi.w	80129ea <acc_translation_a121_set_range_params+0x3ee>
 801270e:	b210      	sxth	r0, r2
 8012710:	b292      	uxth	r2, r2
 8012712:	f8df 920c 	ldr.w	r9, [pc, #524]	@ 8012920 <acc_translation_a121_set_range_params+0x324>
 8012716:	fbb2 f5f8 	udiv	r5, r2, r8
 801271a:	fb89 690a 	smull	r6, r9, r9, sl
 801271e:	ebcc 09a9 	rsb	r9, ip, r9, asr #2
 8012722:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8012726:	fb08 2515 	mls	r5, r8, r5, r2
 801272a:	b2ad      	uxth	r5, r5
 801272c:	ebba 09c9 	subs.w	r9, sl, r9, lsl #3
 8012730:	9500      	str	r5, [sp, #0]
 8012732:	f100 8153 	bmi.w	80129dc <acc_translation_a121_set_range_params+0x3e0>
 8012736:	fa0f f589 	sxth.w	r5, r9
 801273a:	950a      	str	r5, [sp, #40]	@ 0x28
 801273c:	fa1f f989 	uxth.w	r9, r9
 8012740:	9d00      	ldr	r5, [sp, #0]
 8012742:	3901      	subs	r1, #1
 8012744:	b289      	uxth	r1, r1
 8012746:	9109      	str	r1, [sp, #36]	@ 0x24
 8012748:	f1bb 0f01 	cmp.w	fp, #1
 801274c:	fb11 5108 	smlabb	r1, r1, r8, r5
 8012750:	b289      	uxth	r1, r1
 8012752:	f000 80f3 	beq.w	801293c <acc_translation_a121_set_range_params+0x340>
 8012756:	9d00      	ldr	r5, [sp, #0]
 8012758:	ebb9 0901 	subs.w	r9, r9, r1
 801275c:	bf18      	it	ne
 801275e:	f04f 0901 	movne.w	r9, #1
 8012762:	4295      	cmp	r5, r2
 8012764:	bf14      	ite	ne
 8012766:	2501      	movne	r5, #1
 8012768:	2500      	moveq	r5, #0
 801276a:	ebab 0505 	sub.w	r5, fp, r5
 801276e:	eba5 0509 	sub.w	r5, r5, r9
 8012772:	fa1f f689 	uxth.w	r6, r9
 8012776:	b2ad      	uxth	r5, r5
 8012778:	9607      	str	r6, [sp, #28]
 801277a:	f040 80e6 	bne.w	801294a <acc_translation_a121_set_range_params+0x34e>
 801277e:	2100      	movs	r1, #0
 8012780:	9108      	str	r1, [sp, #32]
 8012782:	9103      	str	r1, [sp, #12]
 8012784:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012786:	9900      	ldr	r1, [sp, #0]
 8012788:	0092      	lsls	r2, r2, #2
 801278a:	0089      	lsls	r1, r1, #2
 801278c:	87a2      	strh	r2, [r4, #60]	@ 0x3c
 801278e:	87e1      	strh	r1, [r4, #62]	@ 0x3e
 8012790:	2f00      	cmp	r7, #0
 8012792:	f000 80b4 	beq.w	80128fe <acc_translation_a121_set_range_params+0x302>
 8012796:	9a02      	ldr	r2, [sp, #8]
 8012798:	7b92      	ldrb	r2, [r2, #14]
 801279a:	2a05      	cmp	r2, #5
 801279c:	f200 812a 	bhi.w	80129f4 <acc_translation_a121_set_range_params+0x3f8>
 80127a0:	4960      	ldr	r1, [pc, #384]	@ (8012924 <acc_translation_a121_set_range_params+0x328>)
 80127a2:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 80127a6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80127aa:	f1aa 0003 	sub.w	r0, sl, #3
 80127ae:	f1aa 0b4a 	sub.w	fp, sl, #74	@ 0x4a
 80127b2:	3903      	subs	r1, #3
 80127b4:	b289      	uxth	r1, r1
 80127b6:	b280      	uxth	r0, r0
 80127b8:	fa1f fb8b 	uxth.w	fp, fp
 80127bc:	f1aa 0a14 	sub.w	sl, sl, #20
 80127c0:	f1c3 0629 	rsb	r6, r3, #41	@ 0x29
 80127c4:	445e      	add	r6, fp
 80127c6:	9a06      	ldr	r2, [sp, #24]
 80127c8:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80127ca:	b233      	sxth	r3, r6
 80127cc:	1a9a      	subs	r2, r3, r2
 80127ce:	2a29      	cmp	r2, #41	@ 0x29
 80127d0:	86e1      	strh	r1, [r4, #54]	@ 0x36
 80127d2:	b2b6      	uxth	r6, r6
 80127d4:	dc08      	bgt.n	80127e8 <acc_translation_a121_set_range_params+0x1ec>
 80127d6:	494d      	ldr	r1, [pc, #308]	@ (801290c <acc_translation_a121_set_range_params+0x310>)
 80127d8:	4a53      	ldr	r2, [pc, #332]	@ (8012928 <acc_translation_a121_set_range_params+0x32c>)
 80127da:	690f      	ldr	r7, [r1, #16]
 80127dc:	494d      	ldr	r1, [pc, #308]	@ (8012914 <acc_translation_a121_set_range_params+0x318>)
 80127de:	9302      	str	r3, [sp, #8]
 80127e0:	2000      	movs	r0, #0
 80127e2:	47b8      	blx	r7
 80127e4:	9b02      	ldr	r3, [sp, #8]
 80127e6:	2700      	movs	r7, #0
 80127e8:	4553      	cmp	r3, sl
 80127ea:	db06      	blt.n	80127fa <acc_translation_a121_set_range_params+0x1fe>
 80127ec:	4b47      	ldr	r3, [pc, #284]	@ (801290c <acc_translation_a121_set_range_params+0x310>)
 80127ee:	4a4f      	ldr	r2, [pc, #316]	@ (801292c <acc_translation_a121_set_range_params+0x330>)
 80127f0:	691b      	ldr	r3, [r3, #16]
 80127f2:	4948      	ldr	r1, [pc, #288]	@ (8012914 <acc_translation_a121_set_range_params+0x318>)
 80127f4:	2000      	movs	r0, #0
 80127f6:	4798      	blx	r3
 80127f8:	2700      	movs	r7, #0
 80127fa:	9b01      	ldr	r3, [sp, #4]
 80127fc:	f8a4 b038 	strh.w	fp, [r4, #56]	@ 0x38
 8012800:	2b2c      	cmp	r3, #44	@ 0x2c
 8012802:	8766      	strh	r6, [r4, #58]	@ 0x3a
 8012804:	f240 80c4 	bls.w	8012990 <acc_translation_a121_set_range_params+0x394>
 8012808:	2300      	movs	r3, #0
 801280a:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 801280e:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8012812:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8012816:	9b04      	ldr	r3, [sp, #16]
 8012818:	f8a4 304e 	strh.w	r3, [r4, #78]	@ 0x4e
 801281c:	9b08      	ldr	r3, [sp, #32]
 801281e:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8012822:	2d00      	cmp	r5, #0
 8012824:	f000 809a 	beq.w	801295c <acc_translation_a121_set_range_params+0x360>
 8012828:	2301      	movs	r3, #1
 801282a:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 801282e:	9b03      	ldr	r3, [sp, #12]
 8012830:	9a07      	ldr	r2, [sp, #28]
 8012832:	f8a4 204c 	strh.w	r2, [r4, #76]	@ 0x4c
 8012836:	2b00      	cmp	r3, #0
 8012838:	f000 80fc 	beq.w	8012a34 <acc_translation_a121_set_range_params+0x438>
 801283c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801283e:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 8012842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012844:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8012848:	f1b9 0f00 	cmp.w	r9, #0
 801284c:	f000 80ef 	beq.w	8012a2e <acc_translation_a121_set_range_params+0x432>
 8012850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012852:	9a00      	ldr	r2, [sp, #0]
 8012854:	eba3 0902 	sub.w	r9, r3, r2
 8012858:	fb99 f8f8 	sdiv	r8, r9, r8
 801285c:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 8012860:	3d01      	subs	r5, #1
 8012862:	b2ad      	uxth	r5, r5
 8012864:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012866:	9a05      	ldr	r2, [sp, #20]
 8012868:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
 801286c:	4638      	mov	r0, r7
 801286e:	801a      	strh	r2, [r3, #0]
 8012870:	b00d      	add	sp, #52	@ 0x34
 8012872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012876:	f1ba 0f00 	cmp.w	sl, #0
 801287a:	f43f aee0 	beq.w	801263e <acc_translation_a121_set_range_params+0x42>
 801287e:	2318      	movs	r3, #24
 8012880:	fbb3 f3fa 	udiv	r3, r3, sl
 8012884:	fb0a f303 	mul.w	r3, sl, r3
 8012888:	f1c3 0318 	rsb	r3, r3, #24
 801288c:	b29b      	uxth	r3, r3
 801288e:	9304      	str	r3, [sp, #16]
 8012890:	2b00      	cmp	r3, #0
 8012892:	f47f aed4 	bne.w	801263e <acc_translation_a121_set_range_params+0x42>
 8012896:	f10a 33ff 	add.w	r3, sl, #4294967295
 801289a:	009b      	lsls	r3, r3, #2
 801289c:	b29b      	uxth	r3, r3
 801289e:	9301      	str	r3, [sp, #4]
 80128a0:	46d0      	mov	r8, sl
 80128a2:	f04f 0b01 	mov.w	fp, #1
 80128a6:	b9d5      	cbnz	r5, 80128de <acc_translation_a121_set_range_params+0x2e2>
 80128a8:	4b18      	ldr	r3, [pc, #96]	@ (801290c <acc_translation_a121_set_range_params+0x310>)
 80128aa:	4a21      	ldr	r2, [pc, #132]	@ (8012930 <acc_translation_a121_set_range_params+0x334>)
 80128ac:	691b      	ldr	r3, [r3, #16]
 80128ae:	4919      	ldr	r1, [pc, #100]	@ (8012914 <acc_translation_a121_set_range_params+0x318>)
 80128b0:	4628      	mov	r0, r5
 80128b2:	4798      	blx	r3
 80128b4:	2f00      	cmp	r7, #0
 80128b6:	f43f aed1 	beq.w	801265c <acc_translation_a121_set_range_params+0x60>
 80128ba:	2700      	movs	r7, #0
 80128bc:	2202      	movs	r2, #2
 80128be:	e6ce      	b.n	801265e <acc_translation_a121_set_range_params+0x62>
 80128c0:	4b1c      	ldr	r3, [pc, #112]	@ (8012934 <acc_translation_a121_set_range_params+0x338>)
 80128c2:	fba3 3b0a 	umull	r3, fp, r3, sl
 80128c6:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
 80128ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	9304      	str	r3, [sp, #16]
 80128d2:	235c      	movs	r3, #92	@ 0x5c
 80128d4:	9301      	str	r3, [sp, #4]
 80128d6:	f04f 0818 	mov.w	r8, #24
 80128da:	2d00      	cmp	r5, #0
 80128dc:	d0e4      	beq.n	80128a8 <acc_translation_a121_set_range_params+0x2ac>
 80128de:	2f00      	cmp	r7, #0
 80128e0:	f040 80b2 	bne.w	8012a48 <acc_translation_a121_set_range_params+0x44c>
 80128e4:	9b02      	ldr	r3, [sp, #8]
 80128e6:	7b1b      	ldrb	r3, [r3, #12]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f000 80c4 	beq.w	8012a76 <acc_translation_a121_set_range_params+0x47a>
 80128ee:	4b07      	ldr	r3, [pc, #28]	@ (801290c <acc_translation_a121_set_range_params+0x310>)
 80128f0:	4a11      	ldr	r2, [pc, #68]	@ (8012938 <acc_translation_a121_set_range_params+0x33c>)
 80128f2:	691b      	ldr	r3, [r3, #16]
 80128f4:	4907      	ldr	r1, [pc, #28]	@ (8012914 <acc_translation_a121_set_range_params+0x318>)
 80128f6:	4638      	mov	r0, r7
 80128f8:	4798      	blx	r3
 80128fa:	2204      	movs	r2, #4
 80128fc:	e6af      	b.n	801265e <acc_translation_a121_set_range_params+0x62>
 80128fe:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 8012902:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 8012906:	213d      	movs	r1, #61	@ 0x3d
 8012908:	207d      	movs	r0, #125	@ 0x7d
 801290a:	e759      	b.n	80127c0 <acc_translation_a121_set_range_params+0x1c4>
 801290c:	200008cc 	.word	0x200008cc
 8012910:	0801ae14 	.word	0x0801ae14
 8012914:	0801ae28 	.word	0x0801ae28
 8012918:	0801ae88 	.word	0x0801ae88
 801291c:	0801ae9c 	.word	0x0801ae9c
 8012920:	2aaaaaab 	.word	0x2aaaaaab
 8012924:	0801b100 	.word	0x0801b100
 8012928:	0801aed0 	.word	0x0801aed0
 801292c:	0801aef0 	.word	0x0801aef0
 8012930:	0801ae3c 	.word	0x0801ae3c
 8012934:	aaaaaaab 	.word	0xaaaaaaab
 8012938:	0801ae50 	.word	0x0801ae50
 801293c:	4295      	cmp	r5, r2
 801293e:	f000 808e 	beq.w	8012a5e <acc_translation_a121_set_range_params+0x462>
 8012942:	2500      	movs	r5, #0
 8012944:	4649      	mov	r1, r9
 8012946:	9507      	str	r5, [sp, #28]
 8012948:	46a9      	mov	r9, r5
 801294a:	2601      	movs	r6, #1
 801294c:	1a08      	subs	r0, r1, r0
 801294e:	fb90 f0f8 	sdiv	r0, r0, r8
 8012952:	b281      	uxth	r1, r0
 8012954:	9608      	str	r6, [sp, #32]
 8012956:	9603      	str	r6, [sp, #12]
 8012958:	910b      	str	r1, [sp, #44]	@ 0x2c
 801295a:	e714      	b.n	8012786 <acc_translation_a121_set_range_params+0x18a>
 801295c:	9b07      	ldr	r3, [sp, #28]
 801295e:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 8012962:	9b03      	ldr	r3, [sp, #12]
 8012964:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8012968:	2b00      	cmp	r3, #0
 801296a:	d06a      	beq.n	8012a42 <acc_translation_a121_set_range_params+0x446>
 801296c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801296e:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 8012972:	2300      	movs	r3, #0
 8012974:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8012978:	f1b9 0f00 	cmp.w	r9, #0
 801297c:	d05e      	beq.n	8012a3c <acc_translation_a121_set_range_params+0x440>
 801297e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012980:	9a00      	ldr	r2, [sp, #0]
 8012982:	eba3 0902 	sub.w	r9, r3, r2
 8012986:	fb99 f8f8 	sdiv	r8, r9, r8
 801298a:	f8a4 8046 	strh.w	r8, [r4, #70]	@ 0x46
 801298e:	e769      	b.n	8012864 <acc_translation_a121_set_range_params+0x268>
 8012990:	9b01      	ldr	r3, [sp, #4]
 8012992:	2b1e      	cmp	r3, #30
 8012994:	d93e      	bls.n	8012a14 <acc_translation_a121_set_range_params+0x418>
 8012996:	f1a3 021e 	sub.w	r2, r3, #30
 801299a:	230f      	movs	r3, #15
 801299c:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 80129a0:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 80129a4:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 80129a8:	e735      	b.n	8012816 <acc_translation_a121_set_range_params+0x21a>
 80129aa:	4a36      	ldr	r2, [pc, #216]	@ (8012a84 <acc_translation_a121_set_range_params+0x488>)
 80129ac:	ea6f 0309 	mvn.w	r3, r9
 80129b0:	fba2 2303 	umull	r2, r3, r2, r3
 80129b4:	ea6f 1313 	mvn.w	r3, r3, lsr #4
 80129b8:	f1ba 0f00 	cmp.w	sl, #0
 80129bc:	b21b      	sxth	r3, r3
 80129be:	ea4f 72e9 	mov.w	r2, r9, asr #31
 80129c2:	f6bf ae82 	bge.w	80126ca <acc_translation_a121_set_range_params+0xce>
 80129c6:	482f      	ldr	r0, [pc, #188]	@ (8012a84 <acc_translation_a121_set_range_params+0x488>)
 80129c8:	ea6f 010a 	mvn.w	r1, sl
 80129cc:	fba0 0101 	umull	r0, r1, r0, r1
 80129d0:	ea6f 1111 	mvn.w	r1, r1, lsr #4
 80129d4:	b209      	sxth	r1, r1
 80129d6:	ea4f 7cea 	mov.w	ip, sl, asr #31
 80129da:	e67e      	b.n	80126da <acc_translation_a121_set_range_params+0xde>
 80129dc:	f109 0518 	add.w	r5, r9, #24
 80129e0:	fa1f f985 	uxth.w	r9, r5
 80129e4:	b22d      	sxth	r5, r5
 80129e6:	950a      	str	r5, [sp, #40]	@ 0x28
 80129e8:	e6aa      	b.n	8012740 <acc_translation_a121_set_range_params+0x144>
 80129ea:	f102 0018 	add.w	r0, r2, #24
 80129ee:	b282      	uxth	r2, r0
 80129f0:	b200      	sxth	r0, r0
 80129f2:	e68e      	b.n	8012712 <acc_translation_a121_set_range_params+0x116>
 80129f4:	4924      	ldr	r1, [pc, #144]	@ (8012a88 <acc_translation_a121_set_range_params+0x48c>)
 80129f6:	4a25      	ldr	r2, [pc, #148]	@ (8012a8c <acc_translation_a121_set_range_params+0x490>)
 80129f8:	690e      	ldr	r6, [r1, #16]
 80129fa:	4925      	ldr	r1, [pc, #148]	@ (8012a90 <acc_translation_a121_set_range_params+0x494>)
 80129fc:	9302      	str	r3, [sp, #8]
 80129fe:	2000      	movs	r0, #0
 8012a00:	47b0      	blx	r6
 8012a02:	f04f 0b36 	mov.w	fp, #54	@ 0x36
 8012a06:	9b02      	ldr	r3, [sp, #8]
 8012a08:	f04f 0a6c 	mov.w	sl, #108	@ 0x6c
 8012a0c:	213d      	movs	r1, #61	@ 0x3d
 8012a0e:	207d      	movs	r0, #125	@ 0x7d
 8012a10:	2700      	movs	r7, #0
 8012a12:	e6d5      	b.n	80127c0 <acc_translation_a121_set_range_params+0x1c4>
 8012a14:	9b01      	ldr	r3, [sp, #4]
 8012a16:	2b0f      	cmp	r3, #15
 8012a18:	d918      	bls.n	8012a4c <acc_translation_a121_set_range_params+0x450>
 8012a1a:	3b0f      	subs	r3, #15
 8012a1c:	220f      	movs	r2, #15
 8012a1e:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8012a22:	2300      	movs	r3, #0
 8012a24:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 8012a28:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8012a2c:	e6f3      	b.n	8012816 <acc_translation_a121_set_range_params+0x21a>
 8012a2e:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 8012a32:	e715      	b.n	8012860 <acc_translation_a121_set_range_params+0x264>
 8012a34:	9b03      	ldr	r3, [sp, #12]
 8012a36:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
 8012a3a:	e702      	b.n	8012842 <acc_translation_a121_set_range_params+0x246>
 8012a3c:	f8a4 9046 	strh.w	r9, [r4, #70]	@ 0x46
 8012a40:	e710      	b.n	8012864 <acc_translation_a121_set_range_params+0x268>
 8012a42:	f8a4 5042 	strh.w	r5, [r4, #66]	@ 0x42
 8012a46:	e794      	b.n	8012972 <acc_translation_a121_set_range_params+0x376>
 8012a48:	2202      	movs	r2, #2
 8012a4a:	e608      	b.n	801265e <acc_translation_a121_set_range_params+0x62>
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	9a01      	ldr	r2, [sp, #4]
 8012a50:	f8a4 2050 	strh.w	r2, [r4, #80]	@ 0x50
 8012a54:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8012a58:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
 8012a5c:	e6db      	b.n	8012816 <acc_translation_a121_set_range_params+0x21a>
 8012a5e:	4589      	cmp	r9, r1
 8012a60:	bf0c      	ite	eq
 8012a62:	2501      	moveq	r5, #1
 8012a64:	2500      	movne	r5, #0
 8012a66:	d108      	bne.n	8012a7a <acc_translation_a121_set_range_params+0x47e>
 8012a68:	2100      	movs	r1, #0
 8012a6a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8012a6e:	4689      	mov	r9, r1
 8012a70:	9103      	str	r1, [sp, #12]
 8012a72:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012a74:	e687      	b.n	8012786 <acc_translation_a121_set_range_params+0x18a>
 8012a76:	2701      	movs	r7, #1
 8012a78:	e5f0      	b.n	801265c <acc_translation_a121_set_range_params+0x60>
 8012a7a:	2600      	movs	r6, #0
 8012a7c:	4649      	mov	r1, r9
 8012a7e:	9607      	str	r6, [sp, #28]
 8012a80:	46b1      	mov	r9, r6
 8012a82:	e762      	b.n	801294a <acc_translation_a121_set_range_params+0x34e>
 8012a84:	aaaaaaab 	.word	0xaaaaaaab
 8012a88:	200008cc 	.word	0x200008cc
 8012a8c:	0801aec4 	.word	0x0801aec4
 8012a90:	0801ae28 	.word	0x0801ae28

08012a94 <acc_translation_a121_subsweep_translate>:
 8012a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a98:	f890 c04c 	ldrb.w	ip, [r0, #76]	@ 0x4c
 8012a9c:	4607      	mov	r7, r0
 8012a9e:	8908      	ldrh	r0, [r1, #8]
 8012aa0:	460e      	mov	r6, r1
 8012aa2:	f240 35ff 	movw	r5, #1023	@ 0x3ff
 8012aa6:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8012aaa:	b08c      	sub	sp, #48	@ 0x30
 8012aac:	f1bc 0f00 	cmp.w	ip, #0
 8012ab0:	bf08      	it	eq
 8012ab2:	4629      	moveq	r1, r5
 8012ab4:	b108      	cbz	r0, 8012aba <acc_translation_a121_subsweep_translate+0x26>
 8012ab6:	4281      	cmp	r1, r0
 8012ab8:	d20a      	bcs.n	8012ad0 <acc_translation_a121_subsweep_translate+0x3c>
 8012aba:	4b55      	ldr	r3, [pc, #340]	@ (8012c10 <acc_translation_a121_subsweep_translate+0x17c>)
 8012abc:	4a55      	ldr	r2, [pc, #340]	@ (8012c14 <acc_translation_a121_subsweep_translate+0x180>)
 8012abe:	691b      	ldr	r3, [r3, #16]
 8012ac0:	4955      	ldr	r1, [pc, #340]	@ (8012c18 <acc_translation_a121_subsweep_translate+0x184>)
 8012ac2:	2000      	movs	r0, #0
 8012ac4:	4798      	blx	r3
 8012ac6:	2500      	movs	r5, #0
 8012ac8:	4628      	mov	r0, r5
 8012aca:	b00c      	add	sp, #48	@ 0x30
 8012acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad0:	461c      	mov	r4, r3
 8012ad2:	7b73      	ldrb	r3, [r6, #13]
 8012ad4:	4690      	mov	r8, r2
 8012ad6:	b97b      	cbnz	r3, 8012af8 <acc_translation_a121_subsweep_translate+0x64>
 8012ad8:	7bf0      	ldrb	r0, [r6, #15]
 8012ada:	7bb5      	ldrb	r5, [r6, #14]
 8012adc:	2d00      	cmp	r5, #0
 8012ade:	d12d      	bne.n	8012b3c <acc_translation_a121_subsweep_translate+0xa8>
 8012ae0:	2801      	cmp	r0, #1
 8012ae2:	d00f      	beq.n	8012b04 <acc_translation_a121_subsweep_translate+0x70>
 8012ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8012c10 <acc_translation_a121_subsweep_translate+0x17c>)
 8012ae6:	4a4d      	ldr	r2, [pc, #308]	@ (8012c1c <acc_translation_a121_subsweep_translate+0x188>)
 8012ae8:	691b      	ldr	r3, [r3, #16]
 8012aea:	494b      	ldr	r1, [pc, #300]	@ (8012c18 <acc_translation_a121_subsweep_translate+0x184>)
 8012aec:	4628      	mov	r0, r5
 8012aee:	4798      	blx	r3
 8012af0:	4628      	mov	r0, r5
 8012af2:	b00c      	add	sp, #48	@ 0x30
 8012af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012af8:	7bf0      	ldrb	r0, [r6, #15]
 8012afa:	2802      	cmp	r0, #2
 8012afc:	d1ed      	bne.n	8012ada <acc_translation_a121_subsweep_translate+0x46>
 8012afe:	4b44      	ldr	r3, [pc, #272]	@ (8012c10 <acc_translation_a121_subsweep_translate+0x17c>)
 8012b00:	4a47      	ldr	r2, [pc, #284]	@ (8012c20 <acc_translation_a121_subsweep_translate+0x18c>)
 8012b02:	e7dc      	b.n	8012abe <acc_translation_a121_subsweep_translate+0x2a>
 8012b04:	4b47      	ldr	r3, [pc, #284]	@ (8012c24 <acc_translation_a121_subsweep_translate+0x190>)
 8012b06:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012b08:	9200      	str	r2, [sp, #0]
 8012b0a:	4631      	mov	r1, r6
 8012b0c:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8012b10:	4638      	mov	r0, r7
 8012b12:	4623      	mov	r3, r4
 8012b14:	f7ff fd72 	bl	80125fc <acc_translation_a121_set_range_params>
 8012b18:	2800      	cmp	r0, #0
 8012b1a:	d0d4      	beq.n	8012ac6 <acc_translation_a121_subsweep_translate+0x32>
 8012b1c:	4622      	mov	r2, r4
 8012b1e:	4641      	mov	r1, r8
 8012b20:	4630      	mov	r0, r6
 8012b22:	f7ff fd1f 	bl	8012564 <acc_translation_a121_set_gain_params>
 8012b26:	4605      	mov	r5, r0
 8012b28:	b978      	cbnz	r0, 8012b4a <acc_translation_a121_subsweep_translate+0xb6>
 8012b2a:	4b39      	ldr	r3, [pc, #228]	@ (8012c10 <acc_translation_a121_subsweep_translate+0x17c>)
 8012b2c:	4a3e      	ldr	r2, [pc, #248]	@ (8012c28 <acc_translation_a121_subsweep_translate+0x194>)
 8012b2e:	691b      	ldr	r3, [r3, #16]
 8012b30:	4939      	ldr	r1, [pc, #228]	@ (8012c18 <acc_translation_a121_subsweep_translate+0x184>)
 8012b32:	4798      	blx	r3
 8012b34:	4628      	mov	r0, r5
 8012b36:	b00c      	add	sp, #48	@ 0x30
 8012b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b3c:	1e45      	subs	r5, r0, #1
 8012b3e:	b2ed      	uxtb	r5, r5
 8012b40:	2d04      	cmp	r5, #4
 8012b42:	d9df      	bls.n	8012b04 <acc_translation_a121_subsweep_translate+0x70>
 8012b44:	4b32      	ldr	r3, [pc, #200]	@ (8012c10 <acc_translation_a121_subsweep_translate+0x17c>)
 8012b46:	4a39      	ldr	r2, [pc, #228]	@ (8012c2c <acc_translation_a121_subsweep_translate+0x198>)
 8012b48:	e7b9      	b.n	8012abe <acc_translation_a121_subsweep_translate+0x2a>
 8012b4a:	7bf0      	ldrb	r0, [r6, #15]
 8012b4c:	aa04      	add	r2, sp, #16
 8012b4e:	4641      	mov	r1, r8
 8012b50:	f7ff fc58 	bl	8012404 <acc_translation_a121_profile_to_pulse_params>
 8012b54:	4605      	mov	r5, r0
 8012b56:	b970      	cbnz	r0, 8012b76 <acc_translation_a121_subsweep_translate+0xe2>
 8012b58:	4b2d      	ldr	r3, [pc, #180]	@ (8012c10 <acc_translation_a121_subsweep_translate+0x17c>)
 8012b5a:	4a34      	ldr	r2, [pc, #208]	@ (8012c2c <acc_translation_a121_subsweep_translate+0x198>)
 8012b5c:	691b      	ldr	r3, [r3, #16]
 8012b5e:	492e      	ldr	r1, [pc, #184]	@ (8012c18 <acc_translation_a121_subsweep_translate+0x184>)
 8012b60:	4798      	blx	r3
 8012b62:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8012b66:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8012b6a:	8562      	strh	r2, [r4, #42]	@ 0x2a
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	8523      	strh	r3, [r4, #40]	@ 0x28
 8012b70:	b00c      	add	sp, #48	@ 0x30
 8012b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b76:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8012b7a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8012b7e:	8562      	strh	r2, [r4, #42]	@ 0x2a
 8012b80:	8523      	strh	r3, [r4, #40]	@ 0x28
 8012b82:	f104 0108 	add.w	r1, r4, #8
 8012b86:	a804      	add	r0, sp, #16
 8012b88:	f7ff fd0e 	bl	80125a8 <acc_translation_a121_set_pulse_length_params>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	d09a      	beq.n	8012ac6 <acc_translation_a121_subsweep_translate+0x32>
 8012b90:	f104 0214 	add.w	r2, r4, #20
 8012b94:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8012b98:	9203      	str	r2, [sp, #12]
 8012b9a:	4611      	mov	r1, r2
 8012b9c:	a804      	add	r0, sp, #16
 8012b9e:	9308      	str	r3, [sp, #32]
 8012ba0:	f000 fdd0 	bl	8013744 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 8012ba4:	9a03      	ldr	r2, [sp, #12]
 8012ba6:	4605      	mov	r5, r0
 8012ba8:	b940      	cbnz	r0, 8012bbc <acc_translation_a121_subsweep_translate+0x128>
 8012baa:	4b19      	ldr	r3, [pc, #100]	@ (8012c10 <acc_translation_a121_subsweep_translate+0x17c>)
 8012bac:	4a20      	ldr	r2, [pc, #128]	@ (8012c30 <acc_translation_a121_subsweep_translate+0x19c>)
 8012bae:	691b      	ldr	r3, [r3, #16]
 8012bb0:	4919      	ldr	r1, [pc, #100]	@ (8012c18 <acc_translation_a121_subsweep_translate+0x184>)
 8012bb2:	4798      	blx	r3
 8012bb4:	4628      	mov	r0, r5
 8012bb6:	b00c      	add	sp, #48	@ 0x30
 8012bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bbc:	f1b8 0f00 	cmp.w	r8, #0
 8012bc0:	d00f      	beq.n	8012be2 <acc_translation_a121_subsweep_translate+0x14e>
 8012bc2:	f108 015c 	add.w	r1, r8, #92	@ 0x5c
 8012bc6:	a804      	add	r0, sp, #16
 8012bc8:	f000 fcb6 	bl	8013538 <acc_translation_pulseshaper_calc_settings>
 8012bcc:	b948      	cbnz	r0, 8012be2 <acc_translation_a121_subsweep_translate+0x14e>
 8012bce:	4910      	ldr	r1, [pc, #64]	@ (8012c10 <acc_translation_a121_subsweep_translate+0x17c>)
 8012bd0:	4a18      	ldr	r2, [pc, #96]	@ (8012c34 <acc_translation_a121_subsweep_translate+0x1a0>)
 8012bd2:	690c      	ldr	r4, [r1, #16]
 8012bd4:	4910      	ldr	r1, [pc, #64]	@ (8012c18 <acc_translation_a121_subsweep_translate+0x184>)
 8012bd6:	4605      	mov	r5, r0
 8012bd8:	47a0      	blx	r4
 8012bda:	4628      	mov	r0, r5
 8012bdc:	b00c      	add	sp, #48	@ 0x30
 8012bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012be2:	8933      	ldrh	r3, [r6, #8]
 8012be4:	7af2      	ldrb	r2, [r6, #11]
 8012be6:	8622      	strh	r2, [r4, #48]	@ 0x30
 8012be8:	2b01      	cmp	r3, #1
 8012bea:	d00c      	beq.n	8012c06 <acc_translation_a121_subsweep_translate+0x172>
 8012bec:	3b02      	subs	r3, #2
 8012bee:	2201      	movs	r2, #1
 8012bf0:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8012bf2:	85e2      	strh	r2, [r4, #46]	@ 0x2e
 8012bf4:	7b73      	ldrb	r3, [r6, #13]
 8012bf6:	80e3      	strh	r3, [r4, #6]
 8012bf8:	4628      	mov	r0, r5
 8012bfa:	f083 0301 	eor.w	r3, r3, #1
 8012bfe:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012c00:	b00c      	add	sp, #48	@ 0x30
 8012c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c06:	2300      	movs	r3, #0
 8012c08:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8012c0a:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8012c0c:	e7f2      	b.n	8012bf4 <acc_translation_a121_subsweep_translate+0x160>
 8012c0e:	bf00      	nop
 8012c10:	200008cc 	.word	0x200008cc
 8012c14:	0801af08 	.word	0x0801af08
 8012c18:	0801ae28 	.word	0x0801ae28
 8012c1c:	0801af44 	.word	0x0801af44
 8012c20:	0801af18 	.word	0x0801af18
 8012c24:	0801b10c 	.word	0x0801b10c
 8012c28:	0801af6c 	.word	0x0801af6c
 8012c2c:	0801a0f4 	.word	0x0801a0f4
 8012c30:	0801af84 	.word	0x0801af84
 8012c34:	0801afa4 	.word	0x0801afa4

08012c38 <acc_translation_a121_point_to_coarse>:
 8012c38:	2800      	cmp	r0, #0
 8012c3a:	db04      	blt.n	8012c46 <acc_translation_a121_point_to_coarse+0xe>
 8012c3c:	b209      	sxth	r1, r1
 8012c3e:	fb90 f0f1 	sdiv	r0, r0, r1
 8012c42:	b200      	sxth	r0, r0
 8012c44:	4770      	bx	lr
 8012c46:	43c3      	mvns	r3, r0
 8012c48:	b208      	sxth	r0, r1
 8012c4a:	fb93 f0f0 	sdiv	r0, r3, r0
 8012c4e:	43c0      	mvns	r0, r0
 8012c50:	b200      	sxth	r0, r0
 8012c52:	4770      	bx	lr

08012c54 <acc_translation_a121_point_in_coarse>:
 8012c54:	fb90 f3f1 	sdiv	r3, r0, r1
 8012c58:	fb03 0011 	mls	r0, r3, r1, r0
 8012c5c:	0403      	lsls	r3, r0, #16
 8012c5e:	bf48      	it	mi
 8012c60:	1840      	addmi	r0, r0, r1
 8012c62:	b280      	uxth	r0, r0
 8012c64:	4770      	bx	lr
 8012c66:	bf00      	nop

08012c68 <acc_translation_a121_calculate_minimum_sweep_period>:
 8012c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c6c:	f8b1 31ac 	ldrh.w	r3, [r1, #428]	@ 0x1ac
 8012c70:	f8b1 11a4 	ldrh.w	r1, [r1, #420]	@ 0x1a4
 8012c74:	ed2d 8b0a 	vpush	{d8-d12}
 8012c78:	2b01      	cmp	r3, #1
 8012c7a:	b088      	sub	sp, #32
 8012c7c:	4680      	mov	r8, r0
 8012c7e:	4617      	mov	r7, r2
 8012c80:	f000 80b9 	beq.w	8012df6 <acc_translation_a121_calculate_minimum_sweep_period+0x18e>
 8012c84:	ee07 1a90 	vmov	s15, r1
 8012c88:	eddf 9a5f 	vldr	s19, [pc, #380]	@ 8012e08 <acc_translation_a121_calculate_minimum_sweep_period+0x1a0>
 8012c8c:	eef8 aa67 	vcvt.f32.u32	s21, s15
 8012c90:	eeb7 9a08 	vmov.f32	s18, #120	@ 0x3fc00000  1.5
 8012c94:	eef2 ca02 	vmov.f32	s25, #34	@ 0x41100000  9.0
 8012c98:	f7ff fb82 	bl	80123a0 <get_pll_freq>
 8012c9c:	f898 3050 	ldrb.w	r3, [r8, #80]	@ 0x50
 8012ca0:	2b02      	cmp	r3, #2
 8012ca2:	eef0 8a40 	vmov.f32	s17, s0
 8012ca6:	f200 8099 	bhi.w	8012ddc <acc_translation_a121_calculate_minimum_sweep_period+0x174>
 8012caa:	4958      	ldr	r1, [pc, #352]	@ (8012e0c <acc_translation_a121_calculate_minimum_sweep_period+0x1a4>)
 8012cac:	4a58      	ldr	r2, [pc, #352]	@ (8012e10 <acc_translation_a121_calculate_minimum_sweep_period+0x1a8>)
 8012cae:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012cb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012cb6:	edd1 ba00 	vldr	s23, [r1]
 8012cba:	ed93 ca00 	vldr	s24, [r3]
 8012cbe:	f04f 0901 	mov.w	r9, #1
 8012cc2:	f898 304e 	ldrb.w	r3, [r8, #78]	@ 0x4e
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d068      	beq.n	8012d9c <acc_translation_a121_calculate_minimum_sweep_period+0x134>
 8012cca:	2500      	movs	r5, #0
 8012ccc:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 8012e14 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 8012cd0:	4e51      	ldr	r6, [pc, #324]	@ (8012e18 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 8012cd2:	ed9f ba52 	vldr	s22, [pc, #328]	@ 8012e1c <acc_translation_a121_calculate_minimum_sweep_period+0x1b4>
 8012cd6:	ed9f aa52 	vldr	s20, [pc, #328]	@ 8012e20 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 8012cda:	462c      	mov	r4, r5
 8012cdc:	e03d      	b.n	8012d5a <acc_translation_a121_calculate_minimum_sweep_period+0xf2>
 8012cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ce2:	ee07 3a90 	vmov	s15, r3
 8012ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cea:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8012cee:	4444      	add	r4, r8
 8012cf0:	f10a 0302 	add.w	r3, sl, #2
 8012cf4:	8920      	ldrh	r0, [r4, #8]
 8012cf6:	88a1      	ldrh	r1, [r4, #4]
 8012cf8:	f898 204e 	ldrb.w	r2, [r8, #78]	@ 0x4e
 8012cfc:	005b      	lsls	r3, r3, #1
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	fb00 3303 	mla	r3, r0, r3, r3
 8012d04:	3302      	adds	r3, #2
 8012d06:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8012d0a:	005b      	lsls	r3, r3, #1
 8012d0c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8012d10:	b29b      	uxth	r3, r3
 8012d12:	ee87 6a0a 	vdiv.f32	s12, s14, s20
 8012d16:	f10a 0a18 	add.w	sl, sl, #24
 8012d1a:	fa1f fa8a 	uxth.w	sl, sl
 8012d1e:	3501      	adds	r5, #1
 8012d20:	b2ec      	uxtb	r4, r5
 8012d22:	42a2      	cmp	r2, r4
 8012d24:	ee07 3a90 	vmov	s15, r3
 8012d28:	ee07 aa10 	vmov	s14, sl
 8012d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d30:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012d34:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8012d38:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8012d3c:	ee07 1a90 	vmov	s15, r1
 8012d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d48:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8012d4c:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8012d50:	ee77 7a89 	vadd.f32	s15, s15, s18
 8012d54:	ee38 8a27 	vadd.f32	s16, s16, s15
 8012d58:	d922      	bls.n	8012da0 <acc_translation_a121_calculate_minimum_sweep_period+0x138>
 8012d5a:	eb08 1304 	add.w	r3, r8, r4, lsl #4
 8012d5e:	466a      	mov	r2, sp
 8012d60:	2100      	movs	r1, #0
 8012d62:	7bd8      	ldrb	r0, [r3, #15]
 8012d64:	f7ff fb4e 	bl	8012404 <acc_translation_a121_profile_to_pulse_params>
 8012d68:	0124      	lsls	r4, r4, #4
 8012d6a:	4a2e      	ldr	r2, [pc, #184]	@ (8012e24 <acc_translation_a121_calculate_minimum_sweep_period+0x1bc>)
 8012d6c:	492e      	ldr	r1, [pc, #184]	@ (8012e28 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 8012d6e:	4682      	mov	sl, r0
 8012d70:	b910      	cbnz	r0, 8012d78 <acc_translation_a121_calculate_minimum_sweep_period+0x110>
 8012d72:	6933      	ldr	r3, [r6, #16]
 8012d74:	4798      	blx	r3
 8012d76:	46d1      	mov	r9, sl
 8012d78:	eb08 0304 	add.w	r3, r8, r4
 8012d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8012e2c <acc_translation_a121_calculate_minimum_sweep_period+0x1c4>)
 8012d7e:	7b9b      	ldrb	r3, [r3, #14]
 8012d80:	f8bd a01e 	ldrh.w	sl, [sp, #30]
 8012d84:	2b05      	cmp	r3, #5
 8012d86:	d9aa      	bls.n	8012cde <acc_translation_a121_calculate_minimum_sweep_period+0x76>
 8012d88:	6933      	ldr	r3, [r6, #16]
 8012d8a:	4a29      	ldr	r2, [pc, #164]	@ (8012e30 <acc_translation_a121_calculate_minimum_sweep_period+0x1c8>)
 8012d8c:	4926      	ldr	r1, [pc, #152]	@ (8012e28 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 8012d8e:	2000      	movs	r0, #0
 8012d90:	4798      	blx	r3
 8012d92:	f04f 0900 	mov.w	r9, #0
 8012d96:	eef0 7a4b 	vmov.f32	s15, s22
 8012d9a:	e7a6      	b.n	8012cea <acc_translation_a121_calculate_minimum_sweep_period+0x82>
 8012d9c:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 8012e14 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 8012da0:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8012e34 <acc_translation_a121_calculate_minimum_sweep_period+0x1cc>
 8012da4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012e20 <acc_translation_a121_calculate_minimum_sweep_period+0x1b8>
 8012da8:	ee88 6aa7 	vdiv.f32	s12, s17, s15
 8012dac:	4648      	mov	r0, r9
 8012dae:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 8012db2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8012db6:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8012dba:	ee7b ba8c 	vadd.f32	s23, s23, s24
 8012dbe:	eeca 7a87 	vdiv.f32	s15, s21, s14
 8012dc2:	ee77 caac 	vadd.f32	s25, s15, s25
 8012dc6:	ee3c 8a88 	vadd.f32	s16, s25, s16
 8012dca:	ee78 ba2b 	vadd.f32	s23, s16, s23
 8012dce:	edc7 ba00 	vstr	s23, [r7]
 8012dd2:	b008      	add	sp, #32
 8012dd4:	ecbd 8b0a 	vpop	{d8-d12}
 8012dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8012e18 <acc_translation_a121_calculate_minimum_sweep_period+0x1b0>)
 8012dde:	ed9f ca0d 	vldr	s24, [pc, #52]	@ 8012e14 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 8012de2:	4a15      	ldr	r2, [pc, #84]	@ (8012e38 <acc_translation_a121_calculate_minimum_sweep_period+0x1d0>)
 8012de4:	691b      	ldr	r3, [r3, #16]
 8012de6:	4910      	ldr	r1, [pc, #64]	@ (8012e28 <acc_translation_a121_calculate_minimum_sweep_period+0x1c0>)
 8012de8:	2000      	movs	r0, #0
 8012dea:	4798      	blx	r3
 8012dec:	eef0 ba4c 	vmov.f32	s23, s24
 8012df0:	f04f 0900 	mov.w	r9, #0
 8012df4:	e765      	b.n	8012cc2 <acc_translation_a121_calculate_minimum_sweep_period+0x5a>
 8012df6:	ed9f 9a07 	vldr	s18, [pc, #28]	@ 8012e14 <acc_translation_a121_calculate_minimum_sweep_period+0x1ac>
 8012dfa:	eef0 9a49 	vmov.f32	s19, s18
 8012dfe:	eef0 ca49 	vmov.f32	s25, s18
 8012e02:	eef0 aa49 	vmov.f32	s21, s18
 8012e06:	e747      	b.n	8012c98 <acc_translation_a121_calculate_minimum_sweep_period+0x30>
 8012e08:	419d999a 	.word	0x419d999a
 8012e0c:	0801b120 	.word	0x0801b120
 8012e10:	0801b12c 	.word	0x0801b12c
 8012e14:	00000000 	.word	0x00000000
 8012e18:	200008cc 	.word	0x200008cc
 8012e1c:	43000000 	.word	0x43000000
 8012e20:	49742400 	.word	0x49742400
 8012e24:	0801a0f4 	.word	0x0801a0f4
 8012e28:	0801ae28 	.word	0x0801ae28
 8012e2c:	0801b100 	.word	0x0801b100
 8012e30:	0801aec4 	.word	0x0801aec4
 8012e34:	43200000 	.word	0x43200000
 8012e38:	0801afd0 	.word	0x0801afd0

08012e3c <acc_translation_a121_translate>:
 8012e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e40:	ed2d 8b06 	vpush	{d8-d10}
 8012e44:	4605      	mov	r5, r0
 8012e46:	b091      	sub	sp, #68	@ 0x44
 8012e48:	f890 004e 	ldrb.w	r0, [r0, #78]	@ 0x4e
 8012e4c:	f895 404c 	ldrb.w	r4, [r5, #76]	@ 0x4c
 8012e50:	9408      	str	r4, [sp, #32]
 8012e52:	2804      	cmp	r0, #4
 8012e54:	f8b5 4048 	ldrh.w	r4, [r5, #72]	@ 0x48
 8012e58:	9406      	str	r4, [sp, #24]
 8012e5a:	468b      	mov	fp, r1
 8012e5c:	4614      	mov	r4, r2
 8012e5e:	4698      	mov	r8, r3
 8012e60:	f200 8128 	bhi.w	80130b4 <acc_translation_a121_translate+0x278>
 8012e64:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 8012e68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e70:	f100 8169 	bmi.w	8013146 <acc_translation_a121_translate+0x30a>
 8012e74:	f895 3056 	ldrb.w	r3, [r5, #86]	@ 0x56
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	f040 81a5 	bne.w	80131c8 <acc_translation_a121_translate+0x38c>
 8012e7e:	f7fe fa95 	bl	80113ac <acc_rss_integration_get_sensor_reference_frequency>
 8012e82:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 8012e86:	ee07 0a10 	vmov	s14, r0
 8012e8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e92:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 8012e96:	f340 81d4 	ble.w	8013242 <acc_translation_a121_translate+0x406>
 8012e9a:	eec8 8a27 	vdiv.f32	s17, s16, s15
 8012e9e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012ea2:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8012ea6:	f100 81e3 	bmi.w	8013270 <acc_translation_a121_translate+0x434>
 8012eaa:	ee18 0a90 	vmov	r0, s17
 8012eae:	f7ee f819 	bl	8000ee4 <__aeabi_f2ulz>
 8012eb2:	2901      	cmp	r1, #1
 8012eb4:	bf08      	it	eq
 8012eb6:	2800      	cmpeq	r0, #0
 8012eb8:	f080 81da 	bcs.w	8013270 <acc_translation_a121_translate+0x434>
 8012ebc:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	f000 81a9 	beq.w	8013218 <acc_translation_a121_translate+0x3dc>
 8012ec6:	4bc9      	ldr	r3, [pc, #804]	@ (80131ec <acc_translation_a121_translate+0x3b0>)
 8012ec8:	4ac9      	ldr	r2, [pc, #804]	@ (80131f0 <acc_translation_a121_translate+0x3b4>)
 8012eca:	691b      	ldr	r3, [r3, #16]
 8012ecc:	49c9      	ldr	r1, [pc, #804]	@ (80131f4 <acc_translation_a121_translate+0x3b8>)
 8012ece:	2000      	movs	r0, #0
 8012ed0:	4798      	blx	r3
 8012ed2:	9b06      	ldr	r3, [sp, #24]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	f000 810a 	beq.w	80130ee <acc_translation_a121_translate+0x2b2>
 8012eda:	f895 304e 	ldrb.w	r3, [r5, #78]	@ 0x4e
 8012ede:	9304      	str	r3, [sp, #16]
 8012ee0:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	f000 8108 	beq.w	80130fa <acc_translation_a121_translate+0x2be>
 8012eea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012eec:	2300      	movs	r3, #0
 8012eee:	7113      	strb	r3, [r2, #4]
 8012ef0:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 8012ef4:	f1bb 0f00 	cmp.w	fp, #0
 8012ef8:	f000 82da 	beq.w	80134b0 <acc_translation_a121_translate+0x674>
 8012efc:	4658      	mov	r0, fp
 8012efe:	4621      	mov	r1, r4
 8012f00:	f7ff faf6 	bl	80124f0 <acc_translation_a121_set_calibration_params>
 8012f04:	2200      	movs	r2, #0
 8012f06:	2301      	movs	r3, #1
 8012f08:	4617      	mov	r7, r2
 8012f0a:	f8a8 2002 	strh.w	r2, [r8, #2]
 8012f0e:	9202      	str	r2, [sp, #8]
 8012f10:	4610      	mov	r0, r2
 8012f12:	f8a8 300a 	strh.w	r3, [r8, #10]
 8012f16:	f04f 0c02 	mov.w	ip, #2
 8012f1a:	f8b4 11ac 	ldrh.w	r1, [r4, #428]	@ 0x1ac
 8012f1e:	2901      	cmp	r1, #1
 8012f20:	d104      	bne.n	8012f2c <acc_translation_a121_translate+0xf0>
 8012f22:	9902      	ldr	r1, [sp, #8]
 8012f24:	9e06      	ldr	r6, [sp, #24]
 8012f26:	fb06 f101 	mul.w	r1, r6, r1
 8012f2a:	9102      	str	r1, [sp, #8]
 8012f2c:	f8b5 1054 	ldrh.w	r1, [r5, #84]	@ 0x54
 8012f30:	f895 e052 	ldrb.w	lr, [r5, #82]	@ 0x52
 8012f34:	f895 9053 	ldrb.w	r9, [r5, #83]	@ 0x53
 8012f38:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8012f3c:	f8a4 e19e 	strh.w	lr, [r4, #414]	@ 0x19e
 8012f40:	ea4f 0a51 	mov.w	sl, r1, lsr #1
 8012f44:	3903      	subs	r1, #3
 8012f46:	9103      	str	r1, [sp, #12]
 8012f48:	9902      	ldr	r1, [sp, #8]
 8012f4a:	f8a4 71a0 	strh.w	r7, [r4, #416]	@ 0x1a0
 8012f4e:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 8012f52:	4571      	cmp	r1, lr
 8012f54:	bf28      	it	cs
 8012f56:	4671      	movcs	r1, lr
 8012f58:	468e      	mov	lr, r1
 8012f5a:	f1aa 0a03 	sub.w	sl, sl, #3
 8012f5e:	9903      	ldr	r1, [sp, #12]
 8012f60:	f8a4 a1aa 	strh.w	sl, [r4, #426]	@ 0x1aa
 8012f64:	f089 0901 	eor.w	r9, r9, #1
 8012f68:	f8a4 91a6 	strh.w	r9, [r4, #422]	@ 0x1a6
 8012f6c:	f8a4 11a8 	strh.w	r1, [r4, #424]	@ 0x1a8
 8012f70:	f8a4 e1a4 	strh.w	lr, [r4, #420]	@ 0x1a4
 8012f74:	f8a8 200c 	strh.w	r2, [r8, #12]
 8012f78:	f8a8 3004 	strh.w	r3, [r8, #4]
 8012f7c:	f8a8 c006 	strh.w	ip, [r8, #6]
 8012f80:	2e00      	cmp	r6, #0
 8012f82:	f000 811c 	beq.w	80131be <acc_translation_a121_translate+0x382>
 8012f86:	3341      	adds	r3, #65	@ 0x41
 8012f88:	2240      	movs	r2, #64	@ 0x40
 8012f8a:	f8a8 3000 	strh.w	r3, [r8]
 8012f8e:	f8a8 2008 	strh.w	r2, [r8, #8]
 8012f92:	2601      	movs	r6, #1
 8012f94:	f8a4 61c0 	strh.w	r6, [r4, #448]	@ 0x1c0
 8012f98:	f1bb 0f00 	cmp.w	fp, #0
 8012f9c:	d003      	beq.n	8012fa6 <acc_translation_a121_translate+0x16a>
 8012f9e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8012fa2:	f8a4 31c2 	strh.w	r3, [r4, #450]	@ 0x1c2
 8012fa6:	2800      	cmp	r0, #0
 8012fa8:	f040 80e5 	bne.w	8013176 <acc_translation_a121_translate+0x33a>
 8012fac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012fae:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	6013      	str	r3, [r2, #0]
 8012fb6:	9b08      	ldr	r3, [sp, #32]
 8012fb8:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 8012fbc:	9b06      	ldr	r3, [sp, #24]
 8012fbe:	2b01      	cmp	r3, #1
 8012fc0:	f240 80f7 	bls.w	80131b2 <acc_translation_a121_translate+0x376>
 8012fc4:	f8b5 3048 	ldrh.w	r3, [r5, #72]	@ 0x48
 8012fc8:	2201      	movs	r2, #1
 8012fca:	3b02      	subs	r3, #2
 8012fcc:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 8012fd0:	f8a4 21b0 	strh.w	r2, [r4, #432]	@ 0x1b0
 8012fd4:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80131f8 <acc_translation_a121_translate+0x3bc>
 8012fd8:	ed9f 6a88 	vldr	s12, [pc, #544]	@ 80131fc <acc_translation_a121_translate+0x3c0>
 8012fdc:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8012fe0:	ee28 7a07 	vmul.f32	s14, s16, s14
 8012fe4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8012fe8:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8012fec:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8012ff0:	eec8 7a06 	vdiv.f32	s15, s16, s12
 8012ff4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012ff8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012ffc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013000:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013004:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013008:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 801300c:	ee17 2a10 	vmov	r2, s14
 8013010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013014:	ee16 3a90 	vmov	r3, s13
 8013018:	eef5 5a40 	vcmp.f32	s11, #0.0
 801301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013020:	f8a4 21b6 	strh.w	r2, [r4, #438]	@ 0x1b6
 8013024:	ee17 2a90 	vmov	r2, s15
 8013028:	f8a4 31b8 	strh.w	r3, [r4, #440]	@ 0x1b8
 801302c:	bf14      	ite	ne
 801302e:	2301      	movne	r3, #1
 8013030:	2300      	moveq	r3, #0
 8013032:	f8a4 21b4 	strh.w	r2, [r4, #436]	@ 0x1b4
 8013036:	8723      	strh	r3, [r4, #56]	@ 0x38
 8013038:	2800      	cmp	r0, #0
 801303a:	f000 808b 	beq.w	8013154 <acc_translation_a121_translate+0x318>
 801303e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8013042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013046:	d00a      	beq.n	801305e <acc_translation_a121_translate+0x222>
 8013048:	eec8 7a25 	vdiv.f32	s15, s16, s11
 801304c:	ee37 6a86 	vadd.f32	s12, s15, s12
 8013050:	eefc 7ac6 	vcvt.u32.f32	s15, s12
 8013054:	ee17 3a90 	vmov	r3, s15
 8013058:	0c1a      	lsrs	r2, r3, #16
 801305a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 801305c:	8762      	strh	r2, [r4, #58]	@ 0x3a
 801305e:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 8013062:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 8013066:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 801306a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801306c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013074:	bf14      	ite	ne
 8013076:	2301      	movne	r3, #1
 8013078:	2300      	moveq	r3, #0
 801307a:	8662      	strh	r2, [r4, #50]	@ 0x32
 801307c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 801307e:	d006      	beq.n	801308e <acc_translation_a121_translate+0x252>
 8013080:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8013084:	ee17 3a90 	vmov	r3, s15
 8013088:	0c1a      	lsrs	r2, r3, #16
 801308a:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 801308c:	85a2      	strh	r2, [r4, #44]	@ 0x2c
 801308e:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 8013092:	f8a4 31be 	strh.w	r3, [r4, #446]	@ 0x1be
 8013096:	2101      	movs	r1, #1
 8013098:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801309c:	f640 0301 	movw	r3, #2049	@ 0x801
 80130a0:	84a1      	strh	r1, [r4, #36]	@ 0x24
 80130a2:	f8a4 21ba 	strh.w	r2, [r4, #442]	@ 0x1ba
 80130a6:	f8a4 31bc 	strh.w	r3, [r4, #444]	@ 0x1bc
 80130aa:	b011      	add	sp, #68	@ 0x44
 80130ac:	ecbd 8b06 	vpop	{d8-d10}
 80130b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130b4:	4b4d      	ldr	r3, [pc, #308]	@ (80131ec <acc_translation_a121_translate+0x3b0>)
 80130b6:	4a52      	ldr	r2, [pc, #328]	@ (8013200 <acc_translation_a121_translate+0x3c4>)
 80130b8:	691b      	ldr	r3, [r3, #16]
 80130ba:	494e      	ldr	r1, [pc, #312]	@ (80131f4 <acc_translation_a121_translate+0x3b8>)
 80130bc:	2000      	movs	r0, #0
 80130be:	4798      	blx	r3
 80130c0:	f7fe f974 	bl	80113ac <acc_rss_integration_get_sensor_reference_frequency>
 80130c4:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 80130c8:	ee07 0a10 	vmov	s14, r0
 80130cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80130d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130d4:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 80130d8:	dd32      	ble.n	8013140 <acc_translation_a121_translate+0x304>
 80130da:	eec8 8a27 	vdiv.f32	s17, s16, s15
 80130de:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80130e2:	ee78 8aa7 	vadd.f32	s17, s17, s15
 80130e6:	9b06      	ldr	r3, [sp, #24]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	f47f aef6 	bne.w	8012eda <acc_translation_a121_translate+0x9e>
 80130ee:	9304      	str	r3, [sp, #16]
 80130f0:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	f47f aef8 	bne.w	8012eea <acc_translation_a121_translate+0xae>
 80130fa:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 80130fe:	2a02      	cmp	r2, #2
 8013100:	f040 80ef 	bne.w	80132e2 <acc_translation_a121_translate+0x4a6>
 8013104:	f895 204e 	ldrb.w	r2, [r5, #78]	@ 0x4e
 8013108:	2a01      	cmp	r2, #1
 801310a:	d069      	beq.n	80131e0 <acc_translation_a121_translate+0x3a4>
 801310c:	2200      	movs	r2, #0
 801310e:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8013110:	7102      	strb	r2, [r0, #4]
 8013112:	f8a4 21ac 	strh.w	r2, [r4, #428]	@ 0x1ac
 8013116:	2b00      	cmp	r3, #0
 8013118:	f43f aeec 	beq.w	8012ef4 <acc_translation_a121_translate+0xb8>
 801311c:	f895 304f 	ldrb.w	r3, [r5, #79]	@ 0x4f
 8013120:	2b01      	cmp	r3, #1
 8013122:	f000 814f 	beq.w	80133c4 <acc_translation_a121_translate+0x588>
 8013126:	2b02      	cmp	r3, #2
 8013128:	f000 80f3 	beq.w	8013312 <acc_translation_a121_translate+0x4d6>
 801312c:	2b00      	cmp	r3, #0
 801312e:	f000 80dd 	beq.w	80132ec <acc_translation_a121_translate+0x4b0>
 8013132:	4b2e      	ldr	r3, [pc, #184]	@ (80131ec <acc_translation_a121_translate+0x3b0>)
 8013134:	4a33      	ldr	r2, [pc, #204]	@ (8013204 <acc_translation_a121_translate+0x3c8>)
 8013136:	691b      	ldr	r3, [r3, #16]
 8013138:	492e      	ldr	r1, [pc, #184]	@ (80131f4 <acc_translation_a121_translate+0x3b8>)
 801313a:	2000      	movs	r0, #0
 801313c:	4798      	blx	r3
 801313e:	e6d9      	b.n	8012ef4 <acc_translation_a121_translate+0xb8>
 8013140:	eddf 8a33 	vldr	s17, [pc, #204]	@ 8013210 <acc_translation_a121_translate+0x3d4>
 8013144:	e7cf      	b.n	80130e6 <acc_translation_a121_translate+0x2aa>
 8013146:	4b29      	ldr	r3, [pc, #164]	@ (80131ec <acc_translation_a121_translate+0x3b0>)
 8013148:	4a2f      	ldr	r2, [pc, #188]	@ (8013208 <acc_translation_a121_translate+0x3cc>)
 801314a:	691b      	ldr	r3, [r3, #16]
 801314c:	4929      	ldr	r1, [pc, #164]	@ (80131f4 <acc_translation_a121_translate+0x3b8>)
 801314e:	2000      	movs	r0, #0
 8013150:	4798      	blx	r3
 8013152:	e7b5      	b.n	80130c0 <acc_translation_a121_translate+0x284>
 8013154:	edd5 7a11 	vldr	s15, [r5, #68]	@ 0x44
 8013158:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 801315c:	f895 204b 	ldrb.w	r2, [r5, #75]	@ 0x4b
 8013160:	8623      	strh	r3, [r4, #48]	@ 0x30
 8013162:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801316a:	bf14      	ite	ne
 801316c:	2301      	movne	r3, #1
 801316e:	2300      	moveq	r3, #0
 8013170:	8662      	strh	r2, [r4, #50]	@ 0x32
 8013172:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8013174:	e78b      	b.n	801308e <acc_translation_a121_translate+0x252>
 8013176:	f895 304d 	ldrb.w	r3, [r5, #77]	@ 0x4d
 801317a:	2600      	movs	r6, #0
 801317c:	a80b      	add	r0, sp, #44	@ 0x2c
 801317e:	f504 71d1 	add.w	r1, r4, #418	@ 0x1a2
 8013182:	e9cd 630e 	strd	r6, r3, [sp, #56]	@ 0x38
 8013186:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 801318a:	f88d 602c 	strb.w	r6, [sp, #44]	@ 0x2c
 801318e:	f000 fad9 	bl	8013744 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>
 8013192:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013194:	2300      	movs	r3, #0
 8013196:	6013      	str	r3, [r2, #0]
 8013198:	b110      	cbz	r0, 80131a0 <acc_translation_a121_translate+0x364>
 801319a:	9b04      	ldr	r3, [sp, #16]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d16e      	bne.n	801327e <acc_translation_a121_translate+0x442>
 80131a0:	9b08      	ldr	r3, [sp, #32]
 80131a2:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 80131a6:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 80131aa:	9b06      	ldr	r3, [sp, #24]
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	f63f af09 	bhi.w	8012fc4 <acc_translation_a121_translate+0x188>
 80131b2:	2300      	movs	r3, #0
 80131b4:	f8a4 31ae 	strh.w	r3, [r4, #430]	@ 0x1ae
 80131b8:	f8a4 31b0 	strh.w	r3, [r4, #432]	@ 0x1b0
 80131bc:	e70a      	b.n	8012fd4 <acc_translation_a121_translate+0x198>
 80131be:	f8a8 6008 	strh.w	r6, [r8, #8]
 80131c2:	f8a8 c000 	strh.w	ip, [r8]
 80131c6:	e6e5      	b.n	8012f94 <acc_translation_a121_translate+0x158>
 80131c8:	f895 304b 	ldrb.w	r3, [r5, #75]	@ 0x4b
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	f43f ae56 	beq.w	8012e7e <acc_translation_a121_translate+0x42>
 80131d2:	4b06      	ldr	r3, [pc, #24]	@ (80131ec <acc_translation_a121_translate+0x3b0>)
 80131d4:	4a0d      	ldr	r2, [pc, #52]	@ (801320c <acc_translation_a121_translate+0x3d0>)
 80131d6:	691b      	ldr	r3, [r3, #16]
 80131d8:	4906      	ldr	r1, [pc, #24]	@ (80131f4 <acc_translation_a121_translate+0x3b8>)
 80131da:	2000      	movs	r0, #0
 80131dc:	4798      	blx	r3
 80131de:	e76f      	b.n	80130c0 <acc_translation_a121_translate+0x284>
 80131e0:	7be9      	ldrb	r1, [r5, #15]
 80131e2:	3901      	subs	r1, #1
 80131e4:	2901      	cmp	r1, #1
 80131e6:	d892      	bhi.n	801310e <acc_translation_a121_translate+0x2d2>
 80131e8:	e790      	b.n	801310c <acc_translation_a121_translate+0x2d0>
 80131ea:	bf00      	nop
 80131ec:	200008cc 	.word	0x200008cc
 80131f0:	0801b044 	.word	0x0801b044
 80131f4:	0801ae28 	.word	0x0801ae28
 80131f8:	43960000 	.word	0x43960000
 80131fc:	49742400 	.word	0x49742400
 8013200:	08019ea0 	.word	0x08019ea0
 8013204:	0801b0c0 	.word	0x0801b0c0
 8013208:	0801aff0 	.word	0x0801aff0
 801320c:	0801b004 	.word	0x0801b004
 8013210:	00000000 	.word	0x00000000
 8013214:	ed5f 8a02 	vldr	s17, [pc, #-8]	@ 8013210 <acc_translation_a121_translate+0x3d4>
 8013218:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 801321c:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 8013220:	9806      	ldr	r0, [sp, #24]
 8013222:	2800      	cmp	r0, #0
 8013224:	f000 8161 	beq.w	80134ea <acc_translation_a121_translate+0x6ae>
 8013228:	f895 004e 	ldrb.w	r0, [r5, #78]	@ 0x4e
 801322c:	9004      	str	r0, [sp, #16]
 801322e:	4291      	cmp	r1, r2
 8013230:	f240 814b 	bls.w	80134ca <acc_translation_a121_translate+0x68e>
 8013234:	4bb4      	ldr	r3, [pc, #720]	@ (8013508 <acc_translation_a121_translate+0x6cc>)
 8013236:	4ab5      	ldr	r2, [pc, #724]	@ (801350c <acc_translation_a121_translate+0x6d0>)
 8013238:	691b      	ldr	r3, [r3, #16]
 801323a:	49b5      	ldr	r1, [pc, #724]	@ (8013510 <acc_translation_a121_translate+0x6d4>)
 801323c:	2000      	movs	r0, #0
 801323e:	4798      	blx	r3
 8013240:	e756      	b.n	80130f0 <acc_translation_a121_translate+0x2b4>
 8013242:	d413      	bmi.n	801326c <acc_translation_a121_translate+0x430>
 8013244:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 8013248:	2b00      	cmp	r3, #0
 801324a:	d0e3      	beq.n	8013214 <acc_translation_a121_translate+0x3d8>
 801324c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013254:	d107      	bne.n	8013266 <acc_translation_a121_translate+0x42a>
 8013256:	edd5 7a10 	vldr	s15, [r5, #64]	@ 0x40
 801325a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801325e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013262:	f040 811b 	bne.w	801349c <acc_translation_a121_translate+0x660>
 8013266:	eddf 8aab 	vldr	s17, [pc, #684]	@ 8013514 <acc_translation_a121_translate+0x6d8>
 801326a:	e62c      	b.n	8012ec6 <acc_translation_a121_translate+0x8a>
 801326c:	eddf 8aa9 	vldr	s17, [pc, #676]	@ 8013514 <acc_translation_a121_translate+0x6d8>
 8013270:	4ba5      	ldr	r3, [pc, #660]	@ (8013508 <acc_translation_a121_translate+0x6cc>)
 8013272:	4aa9      	ldr	r2, [pc, #676]	@ (8013518 <acc_translation_a121_translate+0x6dc>)
 8013274:	691b      	ldr	r3, [r3, #16]
 8013276:	49a6      	ldr	r1, [pc, #664]	@ (8013510 <acc_translation_a121_translate+0x6d4>)
 8013278:	2000      	movs	r0, #0
 801327a:	4798      	blx	r3
 801327c:	e733      	b.n	80130e6 <acc_translation_a121_translate+0x2aa>
 801327e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013280:	4621      	mov	r1, r4
 8013282:	4628      	mov	r0, r5
 8013284:	f7ff fcf0 	bl	8012c68 <acc_translation_a121_calculate_minimum_sweep_period>
 8013288:	2800      	cmp	r0, #0
 801328a:	d089      	beq.n	80131a0 <acc_translation_a121_translate+0x364>
 801328c:	ed9d 7a0b 	vldr	s14, [sp, #44]	@ 0x2c
 8013290:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 801351c <acc_translation_a121_translate+0x6e0>
 8013294:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 8013520 <acc_translation_a121_translate+0x6e4>
 8013298:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 801329c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801329e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132a2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80132a6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80132aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80132ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80132b2:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 80132b6:	eef4 5ac7 	vcmpe.f32	s11, s14
 80132ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132be:	ed83 7a00 	vstr	s14, [r3]
 80132c2:	f77f ae78 	ble.w	8012fb6 <acc_translation_a121_translate+0x17a>
 80132c6:	4b90      	ldr	r3, [pc, #576]	@ (8013508 <acc_translation_a121_translate+0x6cc>)
 80132c8:	4a96      	ldr	r2, [pc, #600]	@ (8013524 <acc_translation_a121_translate+0x6e8>)
 80132ca:	691f      	ldr	r7, [r3, #16]
 80132cc:	4990      	ldr	r1, [pc, #576]	@ (8013510 <acc_translation_a121_translate+0x6d4>)
 80132ce:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80132d2:	4630      	mov	r0, r6
 80132d4:	ee17 3a90 	vmov	r3, s15
 80132d8:	47b8      	blx	r7
 80132da:	edd5 5a10 	vldr	s11, [r5, #64]	@ 0x40
 80132de:	4630      	mov	r0, r6
 80132e0:	e669      	b.n	8012fb6 <acc_translation_a121_translate+0x17a>
 80132e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80132e4:	7113      	strb	r3, [r2, #4]
 80132e6:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 80132ea:	e603      	b.n	8012ef4 <acc_translation_a121_translate+0xb8>
 80132ec:	2301      	movs	r3, #1
 80132ee:	84e3      	strh	r3, [r4, #38]	@ 0x26
 80132f0:	8523      	strh	r3, [r4, #40]	@ 0x28
 80132f2:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d012      	beq.n	8013320 <acc_translation_a121_translate+0x4e4>
 80132fa:	2b02      	cmp	r3, #2
 80132fc:	f000 80b7 	beq.w	801346e <acc_translation_a121_translate+0x632>
 8013300:	2b00      	cmp	r3, #0
 8013302:	d063      	beq.n	80133cc <acc_translation_a121_translate+0x590>
 8013304:	4b80      	ldr	r3, [pc, #512]	@ (8013508 <acc_translation_a121_translate+0x6cc>)
 8013306:	4a88      	ldr	r2, [pc, #544]	@ (8013528 <acc_translation_a121_translate+0x6ec>)
 8013308:	691b      	ldr	r3, [r3, #16]
 801330a:	4981      	ldr	r1, [pc, #516]	@ (8013510 <acc_translation_a121_translate+0x6d4>)
 801330c:	2000      	movs	r0, #0
 801330e:	4798      	blx	r3
 8013310:	e5f0      	b.n	8012ef4 <acc_translation_a121_translate+0xb8>
 8013312:	2300      	movs	r3, #0
 8013314:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8013316:	8523      	strh	r3, [r4, #40]	@ 0x28
 8013318:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 801331c:	2b01      	cmp	r3, #1
 801331e:	d1ec      	bne.n	80132fa <acc_translation_a121_translate+0x4be>
 8013320:	2200      	movs	r2, #0
 8013322:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8013324:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8013326:	f1bb 0f00 	cmp.w	fp, #0
 801332a:	f040 80e0 	bne.w	80134ee <acc_translation_a121_translate+0x6b2>
 801332e:	2301      	movs	r3, #1
 8013330:	f8a8 b002 	strh.w	fp, [r8, #2]
 8013334:	f8a8 b00c 	strh.w	fp, [r8, #12]
 8013338:	f8a8 300a 	strh.w	r3, [r8, #10]
 801333c:	2600      	movs	r6, #0
 801333e:	f104 033e 	add.w	r3, r4, #62	@ 0x3e
 8013342:	ed9f aa7a 	vldr	s20, [pc, #488]	@ 801352c <acc_translation_a121_translate+0x6f0>
 8013346:	eddf aa7a 	vldr	s21, [pc, #488]	@ 8013530 <acc_translation_a121_translate+0x6f4>
 801334a:	eddf 9a72 	vldr	s19, [pc, #456]	@ 8013514 <acc_translation_a121_translate+0x6d8>
 801334e:	ed9f 9a79 	vldr	s18, [pc, #484]	@ 8013534 <acc_translation_a121_translate+0x6f8>
 8013352:	9607      	str	r6, [sp, #28]
 8013354:	9602      	str	r6, [sp, #8]
 8013356:	f108 090e 	add.w	r9, r8, #14
 801335a:	462f      	mov	r7, r5
 801335c:	f104 0a46 	add.w	sl, r4, #70	@ 0x46
 8013360:	9503      	str	r5, [sp, #12]
 8013362:	9409      	str	r4, [sp, #36]	@ 0x24
 8013364:	9305      	str	r3, [sp, #20]
 8013366:	e9dd 0403 	ldrd	r0, r4, [sp, #12]
 801336a:	fa5f fc86 	uxtb.w	ip, r6
 801336e:	4564      	cmp	r4, ip
 8013370:	4653      	mov	r3, sl
 8013372:	4639      	mov	r1, r7
 8013374:	465a      	mov	r2, fp
 8013376:	f04f 0c00 	mov.w	ip, #0
 801337a:	d82b      	bhi.n	80133d4 <acc_translation_a121_translate+0x598>
 801337c:	9b05      	ldr	r3, [sp, #20]
 801337e:	f8a9 c000 	strh.w	ip, [r9]
 8013382:	f8a9 c008 	strh.w	ip, [r9, #8]
 8013386:	f823 c016 	strh.w	ip, [r3, r6, lsl #1]
 801338a:	3601      	adds	r6, #1
 801338c:	2e04      	cmp	r6, #4
 801338e:	f109 0902 	add.w	r9, r9, #2
 8013392:	f107 0710 	add.w	r7, r7, #16
 8013396:	f10a 0a56 	add.w	sl, sl, #86	@ 0x56
 801339a:	d1e4      	bne.n	8013366 <acc_translation_a121_translate+0x52a>
 801339c:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 80133a0:	9906      	ldr	r1, [sp, #24]
 80133a2:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80133a6:	9d03      	ldr	r5, [sp, #12]
 80133a8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80133aa:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 80133ae:	fb12 f201 	smulbb	r2, r2, r1
 80133b2:	b292      	uxth	r2, r2
 80133b4:	4413      	add	r3, r2
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	f103 0c01 	add.w	ip, r3, #1
 80133bc:	fa1f fc8c 	uxth.w	ip, ip
 80133c0:	2001      	movs	r0, #1
 80133c2:	e5aa      	b.n	8012f1a <acc_translation_a121_translate+0xde>
 80133c4:	2200      	movs	r2, #0
 80133c6:	84e3      	strh	r3, [r4, #38]	@ 0x26
 80133c8:	8522      	strh	r2, [r4, #40]	@ 0x28
 80133ca:	e792      	b.n	80132f2 <acc_translation_a121_translate+0x4b6>
 80133cc:	2301      	movs	r3, #1
 80133ce:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80133d0:	86e3      	strh	r3, [r4, #54]	@ 0x36
 80133d2:	e7a8      	b.n	8013326 <acc_translation_a121_translate+0x4ea>
 80133d4:	9d05      	ldr	r5, [sp, #20]
 80133d6:	f04f 0401 	mov.w	r4, #1
 80133da:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 80133de:	ac0b      	add	r4, sp, #44	@ 0x2c
 80133e0:	9400      	str	r4, [sp, #0]
 80133e2:	f7ff fb57 	bl	8012a94 <acc_translation_a121_subsweep_translate>
 80133e6:	2800      	cmp	r0, #0
 80133e8:	d045      	beq.n	8013476 <acc_translation_a121_translate+0x63a>
 80133ea:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80133ee:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80133f2:	f8a9 3000 	strh.w	r3, [r9]
 80133f6:	f8a9 2008 	strh.w	r2, [r9, #8]
 80133fa:	4413      	add	r3, r2
 80133fc:	7bfa      	ldrb	r2, [r7, #15]
 80133fe:	f8a8 300c 	strh.w	r3, [r8, #12]
 8013402:	2a01      	cmp	r2, #1
 8013404:	f8ba 3028 	ldrh.w	r3, [sl, #40]	@ 0x28
 8013408:	d02e      	beq.n	8013468 <acc_translation_a121_translate+0x62c>
 801340a:	2a02      	cmp	r2, #2
 801340c:	bf0c      	ite	eq
 801340e:	eef0 5a49 	vmoveq.f32	s11, s18
 8013412:	eef0 5a69 	vmovne.f32	s11, s19
 8013416:	3301      	adds	r3, #1
 8013418:	b29b      	uxth	r3, r3
 801341a:	ee07 3a10 	vmov	s14, r3
 801341e:	88bb      	ldrh	r3, [r7, #4]
 8013420:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013424:	ee06 3a10 	vmov	s12, r3
 8013428:	893b      	ldrh	r3, [r7, #8]
 801342a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 801342e:	ee07 3a90 	vmov	s15, r3
 8013432:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013436:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 801343a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801343e:	ee67 7a06 	vmul.f32	s15, s14, s12
 8013442:	9b02      	ldr	r3, [sp, #8]
 8013444:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013448:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801344c:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8013450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013454:	ee17 2a90 	vmov	r2, s15
 8013458:	4413      	add	r3, r2
 801345a:	9302      	str	r3, [sp, #8]
 801345c:	9b07      	ldr	r3, [sp, #28]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d193      	bne.n	801338a <acc_translation_a121_translate+0x54e>
 8013462:	7afb      	ldrb	r3, [r7, #11]
 8013464:	9307      	str	r3, [sp, #28]
 8013466:	e790      	b.n	801338a <acc_translation_a121_translate+0x54e>
 8013468:	eef0 5a6a 	vmov.f32	s11, s21
 801346c:	e7d3      	b.n	8013416 <acc_translation_a121_translate+0x5da>
 801346e:	2300      	movs	r3, #0
 8013470:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8013472:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8013474:	e757      	b.n	8013326 <acc_translation_a121_translate+0x4ea>
 8013476:	f8b8 200c 	ldrh.w	r2, [r8, #12]
 801347a:	9906      	ldr	r1, [sp, #24]
 801347c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8013480:	9d03      	ldr	r5, [sp, #12]
 8013482:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013484:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 8013488:	fb12 f201 	smulbb	r2, r2, r1
 801348c:	b292      	uxth	r2, r2
 801348e:	4413      	add	r3, r2
 8013490:	b29b      	uxth	r3, r3
 8013492:	f103 0c01 	add.w	ip, r3, #1
 8013496:	fa1f fc8c 	uxth.w	ip, ip
 801349a:	e53e      	b.n	8012f1a <acc_translation_a121_translate+0xde>
 801349c:	f895 104f 	ldrb.w	r1, [r5, #79]	@ 0x4f
 80134a0:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 80134a4:	eddf 8a1b 	vldr	s17, [pc, #108]	@ 8013514 <acc_translation_a121_translate+0x6d8>
 80134a8:	4291      	cmp	r1, r2
 80134aa:	f47f ad0c 	bne.w	8012ec6 <acc_translation_a121_translate+0x8a>
 80134ae:	e6b7      	b.n	8013220 <acc_translation_a121_translate+0x3e4>
 80134b0:	2301      	movs	r3, #1
 80134b2:	f8a8 b002 	strh.w	fp, [r8, #2]
 80134b6:	f8a8 300a 	strh.w	r3, [r8, #10]
 80134ba:	465f      	mov	r7, fp
 80134bc:	f04f 0c02 	mov.w	ip, #2
 80134c0:	465a      	mov	r2, fp
 80134c2:	f8cd b008 	str.w	fp, [sp, #8]
 80134c6:	4658      	mov	r0, fp
 80134c8:	e527      	b.n	8012f1a <acc_translation_a121_translate+0xde>
 80134ca:	b933      	cbnz	r3, 80134da <acc_translation_a121_translate+0x69e>
 80134cc:	2a02      	cmp	r2, #2
 80134ce:	d00a      	beq.n	80134e6 <acc_translation_a121_translate+0x6aa>
 80134d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80134d2:	7113      	strb	r3, [r2, #4]
 80134d4:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 80134d8:	e620      	b.n	801311c <acc_translation_a121_translate+0x2e0>
 80134da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80134dc:	2300      	movs	r3, #0
 80134de:	7113      	strb	r3, [r2, #4]
 80134e0:	f8a4 31ac 	strh.w	r3, [r4, #428]	@ 0x1ac
 80134e4:	e61a      	b.n	801311c <acc_translation_a121_translate+0x2e0>
 80134e6:	2301      	movs	r3, #1
 80134e8:	e60c      	b.n	8013104 <acc_translation_a121_translate+0x2c8>
 80134ea:	9004      	str	r0, [sp, #16]
 80134ec:	e69f      	b.n	801322e <acc_translation_a121_translate+0x3f2>
 80134ee:	4621      	mov	r1, r4
 80134f0:	4658      	mov	r0, fp
 80134f2:	f7fe fffd 	bl	80124f0 <acc_translation_a121_set_calibration_params>
 80134f6:	2300      	movs	r3, #0
 80134f8:	2201      	movs	r2, #1
 80134fa:	f8a8 3002 	strh.w	r3, [r8, #2]
 80134fe:	f8a8 300c 	strh.w	r3, [r8, #12]
 8013502:	f8a8 200a 	strh.w	r2, [r8, #10]
 8013506:	e719      	b.n	801333c <acc_translation_a121_translate+0x500>
 8013508:	200008cc 	.word	0x200008cc
 801350c:	0801b070 	.word	0x0801b070
 8013510:	0801ae28 	.word	0x0801ae28
 8013514:	00000000 	.word	0x00000000
 8013518:	0801b030 	.word	0x0801b030
 801351c:	3c23d70a 	.word	0x3c23d70a
 8013520:	49742400 	.word	0x49742400
 8013524:	0801b0e0 	.word	0x0801b0e0
 8013528:	0801afd0 	.word	0x0801afd0
 801352c:	3e124925 	.word	0x3e124925
 8013530:	3e4ccccd 	.word	0x3e4ccccd
 8013534:	3d75c28f 	.word	0x3d75c28f

08013538 <acc_translation_pulseshaper_calc_settings>:
 8013538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801353c:	7804      	ldrb	r4, [r0, #0]
 801353e:	2300      	movs	r3, #0
 8013540:	8093      	strh	r3, [r2, #4]
 8013542:	b374      	cbz	r4, 80135a2 <acc_translation_pulseshaper_calc_settings+0x6a>
 8013544:	6846      	ldr	r6, [r0, #4]
 8013546:	2401      	movs	r4, #1
 8013548:	4637      	mov	r7, r6
 801354a:	8214      	strh	r4, [r2, #16]
 801354c:	b3a6      	cbz	r6, 80135b8 <acc_translation_pulseshaper_calc_settings+0x80>
 801354e:	e9d1 9a03 	ldrd	r9, sl, [r1, #12]
 8013552:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8013556:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 801355a:	461c      	mov	r4, r3
 801355c:	eb09 4513 	add.w	r5, r9, r3, lsr #16
 8013560:	eba5 0508 	sub.w	r5, r5, r8
 8013564:	4575      	cmp	r5, lr
 8013566:	fa1f fc84 	uxth.w	ip, r4
 801356a:	4453      	add	r3, sl
 801356c:	f104 0401 	add.w	r4, r4, #1
 8013570:	da02      	bge.n	8013578 <acc_translation_pulseshaper_calc_settings+0x40>
 8013572:	2c0f      	cmp	r4, #15
 8013574:	d1f2      	bne.n	801355c <acc_translation_pulseshaper_calc_settings+0x24>
 8013576:	46a4      	mov	ip, r4
 8013578:	e9d1 8e07 	ldrd	r8, lr, [r1, #28]
 801357c:	2505      	movs	r5, #5
 801357e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013582:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 8013586:	eb08 4413 	add.w	r4, r8, r3, lsr #16
 801358a:	1ba4      	subs	r4, r4, r6
 801358c:	f105 0c01 	add.w	ip, r5, #1
 8013590:	4473      	add	r3, lr
 8013592:	d563      	bpl.n	801365c <acc_translation_pulseshaper_calc_settings+0x124>
 8013594:	fa1f f58c 	uxth.w	r5, ip
 8013598:	2d14      	cmp	r5, #20
 801359a:	d1f4      	bne.n	8013586 <acc_translation_pulseshaper_calc_settings+0x4e>
 801359c:	2000      	movs	r0, #0
 801359e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135a2:	8214      	strh	r4, [r2, #16]
 80135a4:	80d4      	strh	r4, [r2, #6]
 80135a6:	8054      	strh	r4, [r2, #2]
 80135a8:	8114      	strh	r4, [r2, #8]
 80135aa:	81d4      	strh	r4, [r2, #14]
 80135ac:	8154      	strh	r4, [r2, #10]
 80135ae:	8194      	strh	r4, [r2, #12]
 80135b0:	8254      	strh	r4, [r2, #18]
 80135b2:	2001      	movs	r0, #1
 80135b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135b8:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80135bc:	80d6      	strh	r6, [r2, #6]
 80135be:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 80135c2:	8056      	strh	r6, [r2, #2]
 80135c4:	d343      	bcc.n	801364e <acc_translation_pulseshaper_calc_settings+0x116>
 80135c6:	f8d1 e014 	ldr.w	lr, [r1, #20]
 80135ca:	ebac 050e 	sub.w	r5, ip, lr
 80135ce:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 80135d2:	f340 80b3 	ble.w	801373c <acc_translation_pulseshaper_calc_settings+0x204>
 80135d6:	2400      	movs	r4, #0
 80135d8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80135dc:	4620      	mov	r0, r4
 80135de:	3002      	adds	r0, #2
 80135e0:	fb03 f000 	mul.w	r0, r3, r0
 80135e4:	42a8      	cmp	r0, r5
 80135e6:	f104 0401 	add.w	r4, r4, #1
 80135ea:	dbf7      	blt.n	80135dc <acc_translation_pulseshaper_calc_settings+0xa4>
 80135ec:	2e00      	cmp	r6, #0
 80135ee:	bf14      	ite	ne
 80135f0:	2501      	movne	r5, #1
 80135f2:	2500      	moveq	r5, #0
 80135f4:	f04f 0001 	mov.w	r0, #1
 80135f8:	8115      	strh	r5, [r2, #8]
 80135fa:	81d0      	strh	r0, [r2, #14]
 80135fc:	d14f      	bne.n	801369e <acc_translation_pulseshaper_calc_settings+0x166>
 80135fe:	8156      	strh	r6, [r2, #10]
 8013600:	b344      	cbz	r4, 8013654 <acc_translation_pulseshaper_calc_settings+0x11c>
 8013602:	fb03 c314 	mls	r3, r3, r4, ip
 8013606:	2000      	movs	r0, #0
 8013608:	e9d1 ce00 	ldrd	ip, lr, [r1]
 801360c:	4601      	mov	r1, r0
 801360e:	e001      	b.n	8013614 <acc_translation_pulseshaper_calc_settings+0xdc>
 8013610:	2916      	cmp	r1, #22
 8013612:	d0c3      	beq.n	801359c <acc_translation_pulseshaper_calc_settings+0x64>
 8013614:	eb0c 4510 	add.w	r5, ip, r0, lsr #16
 8013618:	1aed      	subs	r5, r5, r3
 801361a:	b28e      	uxth	r6, r1
 801361c:	4470      	add	r0, lr
 801361e:	f101 0101 	add.w	r1, r1, #1
 8013622:	d4f5      	bmi.n	8013610 <acc_translation_pulseshaper_calc_settings+0xd8>
 8013624:	b15e      	cbz	r6, 801363e <acc_translation_pulseshaper_calc_settings+0x106>
 8013626:	b957      	cbnz	r7, 801363e <acc_translation_pulseshaper_calc_settings+0x106>
 8013628:	1e71      	subs	r1, r6, #1
 801362a:	b289      	uxth	r1, r1
 801362c:	fb0e fe01 	mul.w	lr, lr, r1
 8013630:	eb0c 4c1e 	add.w	ip, ip, lr, lsr #16
 8013634:	eba3 030c 	sub.w	r3, r3, ip
 8013638:	429d      	cmp	r5, r3
 801363a:	bfc8      	it	gt
 801363c:	460e      	movgt	r6, r1
 801363e:	8196      	strh	r6, [r2, #12]
 8013640:	2c00      	cmp	r4, #0
 8013642:	d0b5      	beq.n	80135b0 <acc_translation_pulseshaper_calc_settings+0x78>
 8013644:	1de3      	adds	r3, r4, #7
 8013646:	2401      	movs	r4, #1
 8013648:	409c      	lsls	r4, r3
 801364a:	b2a4      	uxth	r4, r4
 801364c:	e7b0      	b.n	80135b0 <acc_translation_pulseshaper_calc_settings+0x78>
 801364e:	8116      	strh	r6, [r2, #8]
 8013650:	81d6      	strh	r6, [r2, #14]
 8013652:	8156      	strh	r6, [r2, #10]
 8013654:	2400      	movs	r4, #0
 8013656:	4663      	mov	r3, ip
 8013658:	4627      	mov	r7, r4
 801365a:	e7d4      	b.n	8013606 <acc_translation_pulseshaper_calc_settings+0xce>
 801365c:	2d05      	cmp	r5, #5
 801365e:	d00a      	beq.n	8013676 <acc_translation_pulseshaper_calc_settings+0x13e>
 8013660:	1e6b      	subs	r3, r5, #1
 8013662:	b29b      	uxth	r3, r3
 8013664:	fb0e fe03 	mul.w	lr, lr, r3
 8013668:	eb08 4e1e 	add.w	lr, r8, lr, lsr #16
 801366c:	eba6 0e0e 	sub.w	lr, r6, lr
 8013670:	4574      	cmp	r4, lr
 8013672:	bfc8      	it	gt
 8013674:	461d      	movgt	r5, r3
 8013676:	f8d0 c008 	ldr.w	ip, [r0, #8]
 801367a:	8055      	strh	r5, [r2, #2]
 801367c:	f5bc 7f16 	cmp.w	ip, #600	@ 0x258
 8013680:	d349      	bcc.n	8013716 <acc_translation_pulseshaper_calc_settings+0x1de>
 8013682:	f8d1 e014 	ldr.w	lr, [r1, #20]
 8013686:	ebac 050e 	sub.w	r5, ip, lr
 801368a:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 801368e:	dca2      	bgt.n	80135d6 <acc_translation_pulseshaper_calc_settings+0x9e>
 8013690:	1e30      	subs	r0, r6, #0
 8013692:	bf18      	it	ne
 8013694:	2001      	movne	r0, #1
 8013696:	2301      	movs	r3, #1
 8013698:	8110      	strh	r0, [r2, #8]
 801369a:	81d3      	strh	r3, [r2, #14]
 801369c:	2400      	movs	r4, #0
 801369e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80136a2:	fb03 c314 	mls	r3, r3, r4, ip
 80136a6:	2500      	movs	r5, #0
 80136a8:	f8d1 9018 	ldr.w	r9, [r1, #24]
 80136ac:	4628      	mov	r0, r5
 80136ae:	e002      	b.n	80136b6 <acc_translation_pulseshaper_calc_settings+0x17e>
 80136b0:	2816      	cmp	r0, #22
 80136b2:	f43f af73 	beq.w	801359c <acc_translation_pulseshaper_calc_settings+0x64>
 80136b6:	eb0e 4715 	add.w	r7, lr, r5, lsr #16
 80136ba:	1aff      	subs	r7, r7, r3
 80136bc:	fa1f f880 	uxth.w	r8, r0
 80136c0:	444d      	add	r5, r9
 80136c2:	f100 0001 	add.w	r0, r0, #1
 80136c6:	d4f3      	bmi.n	80136b0 <acc_translation_pulseshaper_calc_settings+0x178>
 80136c8:	f1b8 0f00 	cmp.w	r8, #0
 80136cc:	d12a      	bne.n	8013724 <acc_translation_pulseshaper_calc_settings+0x1ec>
 80136ce:	f8a2 800a 	strh.w	r8, [r2, #10]
 80136d2:	b1c4      	cbz	r4, 8013706 <acc_translation_pulseshaper_calc_settings+0x1ce>
 80136d4:	4637      	mov	r7, r6
 80136d6:	2e00      	cmp	r6, #0
 80136d8:	d095      	beq.n	8013606 <acc_translation_pulseshaper_calc_settings+0xce>
 80136da:	e9d1 0503 	ldrd	r0, r5, [r1, #12]
 80136de:	88d6      	ldrh	r6, [r2, #6]
 80136e0:	fb05 f506 	mul.w	r5, r5, r6
 80136e4:	688e      	ldr	r6, [r1, #8]
 80136e6:	eb00 4015 	add.w	r0, r0, r5, lsr #16
 80136ea:	1b80      	subs	r0, r0, r6
 80136ec:	f53f af56 	bmi.w	801359c <acc_translation_pulseshaper_calc_settings+0x64>
 80136f0:	e9d1 5607 	ldrd	r5, r6, [r1, #28]
 80136f4:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 80136f8:	fb06 f60c 	mul.w	r6, r6, ip
 80136fc:	eb05 4516 	add.w	r5, r5, r6, lsr #16
 8013700:	4428      	add	r0, r5
 8013702:	4403      	add	r3, r0
 8013704:	e77f      	b.n	8013606 <acc_translation_pulseshaper_calc_settings+0xce>
 8013706:	4637      	mov	r7, r6
 8013708:	2e00      	cmp	r6, #0
 801370a:	d0a3      	beq.n	8013654 <acc_translation_pulseshaper_calc_settings+0x11c>
 801370c:	fb09 f308 	mul.w	r3, r9, r8
 8013710:	eb0e 4313 	add.w	r3, lr, r3, lsr #16
 8013714:	e7e1      	b.n	80136da <acc_translation_pulseshaper_calc_settings+0x1a2>
 8013716:	2400      	movs	r4, #0
 8013718:	f8d1 e014 	ldr.w	lr, [r1, #20]
 801371c:	8114      	strh	r4, [r2, #8]
 801371e:	81d4      	strh	r4, [r2, #14]
 8013720:	4663      	mov	r3, ip
 8013722:	e7c0      	b.n	80136a6 <acc_translation_pulseshaper_calc_settings+0x16e>
 8013724:	f108 35ff 	add.w	r5, r8, #4294967295
 8013728:	b2ad      	uxth	r5, r5
 801372a:	fb09 f005 	mul.w	r0, r9, r5
 801372e:	eb0e 4010 	add.w	r0, lr, r0, lsr #16
 8013732:	1a18      	subs	r0, r3, r0
 8013734:	4287      	cmp	r7, r0
 8013736:	bfc8      	it	gt
 8013738:	46a8      	movgt	r8, r5
 801373a:	e7c8      	b.n	80136ce <acc_translation_pulseshaper_calc_settings+0x196>
 801373c:	8116      	strh	r6, [r2, #8]
 801373e:	81d4      	strh	r4, [r2, #14]
 8013740:	8156      	strh	r6, [r2, #10]
 8013742:	e787      	b.n	8013654 <acc_translation_pulseshaper_calc_settings+0x11c>

08013744 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl>:
 8013744:	7803      	ldrb	r3, [r0, #0]
 8013746:	b13b      	cbz	r3, 8013758 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 8013748:	6842      	ldr	r2, [r0, #4]
 801374a:	b12a      	cbz	r2, 8013758 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x14>
 801374c:	6902      	ldr	r2, [r0, #16]
 801374e:	2a02      	cmp	r2, #2
 8013750:	d90b      	bls.n	801376a <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x26>
 8013752:	2300      	movs	r3, #0
 8013754:	4618      	mov	r0, r3
 8013756:	4770      	bx	lr
 8013758:	6903      	ldr	r3, [r0, #16]
 801375a:	2b07      	cmp	r3, #7
 801375c:	d8f9      	bhi.n	8013752 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0xe>
 801375e:	4a05      	ldr	r2, [pc, #20]	@ (8013774 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x30>)
 8013760:	5cd3      	ldrb	r3, [r2, r3]
 8013762:	800b      	strh	r3, [r1, #0]
 8013764:	2301      	movs	r3, #1
 8013766:	4618      	mov	r0, r3
 8013768:	4770      	bx	lr
 801376a:	4803      	ldr	r0, [pc, #12]	@ (8013778 <acc_translation_pulseshaper_calc_tx_ps_ref_ctrl+0x34>)
 801376c:	5c82      	ldrb	r2, [r0, r2]
 801376e:	800a      	strh	r2, [r1, #0]
 8013770:	4618      	mov	r0, r3
 8013772:	4770      	bx	lr
 8013774:	0801b138 	.word	0x0801b138
 8013778:	0801b140 	.word	0x0801b140

0801377c <acc_version_get>:
 801377c:	4800      	ldr	r0, [pc, #0]	@ (8013780 <acc_version_get+0x4>)
 801377e:	4770      	bx	lr
 8013780:	08019aa0 	.word	0x08019aa0

08013784 <acc_alg_atan2_q16>:
 8013784:	2800      	cmp	r0, #0
 8013786:	bfb8      	it	lt
 8013788:	4240      	neglt	r0, r0
 801378a:	b4f0      	push	{r4, r5, r6, r7}
 801378c:	bfba      	itte	lt
 801378e:	b200      	sxthlt	r0, r0
 8013790:	2401      	movlt	r4, #1
 8013792:	2400      	movge	r4, #0
 8013794:	2900      	cmp	r1, #0
 8013796:	db3f      	blt.n	8013818 <acc_alg_atan2_q16+0x94>
 8013798:	4288      	cmp	r0, r1
 801379a:	db38      	blt.n	801380e <acc_alg_atan2_q16+0x8a>
 801379c:	2200      	movs	r2, #0
 801379e:	4603      	mov	r3, r0
 80137a0:	b368      	cbz	r0, 80137fe <acc_alg_atan2_q16+0x7a>
 80137a2:	4608      	mov	r0, r1
 80137a4:	2600      	movs	r6, #0
 80137a6:	f643 4528 	movw	r5, #15400	@ 0x3c28
 80137aa:	0400      	lsls	r0, r0, #16
 80137ac:	fbb0 f1f3 	udiv	r1, r0, r3
 80137b0:	42a9      	cmp	r1, r5
 80137b2:	d948      	bls.n	8013846 <acc_alg_atan2_q16+0xc2>
 80137b4:	f246 33d6 	movw	r3, #25558	@ 0x63d6
 80137b8:	4299      	cmp	r1, r3
 80137ba:	d936      	bls.n	801382a <acc_alg_atan2_q16+0xa6>
 80137bc:	f648 0372 	movw	r3, #34930	@ 0x8872
 80137c0:	4299      	cmp	r1, r3
 80137c2:	d942      	bls.n	801384a <acc_alg_atan2_q16+0xc6>
 80137c4:	f64a 4349 	movw	r3, #44105	@ 0xac49
 80137c8:	4299      	cmp	r1, r3
 80137ca:	d940      	bls.n	801384e <acc_alg_atan2_q16+0xca>
 80137cc:	f24d 03a3 	movw	r3, #53411	@ 0xd0a3
 80137d0:	4299      	cmp	r1, r3
 80137d2:	d93e      	bls.n	8013852 <acc_alg_atan2_q16+0xce>
 80137d4:	f24f 734b 	movw	r3, #63307	@ 0xf74b
 80137d8:	4299      	cmp	r1, r3
 80137da:	bf98      	it	ls
 80137dc:	2705      	movls	r7, #5
 80137de:	d925      	bls.n	801382c <acc_alg_atan2_q16+0xa8>
 80137e0:	f24f 754c 	movw	r5, #63308	@ 0xf74c
 80137e4:	f248 2333 	movw	r3, #33331	@ 0x8233
 80137e8:	f24c 40a3 	movw	r0, #50339	@ 0xc4a3
 80137ec:	1b49      	subs	r1, r1, r5
 80137ee:	fb03 f101 	mul.w	r1, r3, r1
 80137f2:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 80137f6:	b116      	cbz	r6, 80137fe <acc_alg_atan2_q16+0x7a>
 80137f8:	f5c0 30c9 	rsb	r0, r0, #102912	@ 0x19200
 80137fc:	301f      	adds	r0, #31
 80137fe:	b114      	cbz	r4, 8013806 <acc_alg_atan2_q16+0x82>
 8013800:	f5c0 3049 	rsb	r0, r0, #205824	@ 0x32400
 8013804:	303f      	adds	r0, #63	@ 0x3f
 8013806:	b102      	cbz	r2, 801380a <acc_alg_atan2_q16+0x86>
 8013808:	4240      	negs	r0, r0
 801380a:	bcf0      	pop	{r4, r5, r6, r7}
 801380c:	4770      	bx	lr
 801380e:	460b      	mov	r3, r1
 8013810:	b9b1      	cbnz	r1, 8013840 <acc_alg_atan2_q16+0xbc>
 8013812:	4811      	ldr	r0, [pc, #68]	@ (8013858 <acc_alg_atan2_q16+0xd4>)
 8013814:	460a      	mov	r2, r1
 8013816:	e7f2      	b.n	80137fe <acc_alg_atan2_q16+0x7a>
 8013818:	4249      	negs	r1, r1
 801381a:	b209      	sxth	r1, r1
 801381c:	4288      	cmp	r0, r1
 801381e:	f04f 0201 	mov.w	r2, #1
 8013822:	dabc      	bge.n	801379e <acc_alg_atan2_q16+0x1a>
 8013824:	460b      	mov	r3, r1
 8013826:	4616      	mov	r6, r2
 8013828:	e7bd      	b.n	80137a6 <acc_alg_atan2_q16+0x22>
 801382a:	2701      	movs	r7, #1
 801382c:	480b      	ldr	r0, [pc, #44]	@ (801385c <acc_alg_atan2_q16+0xd8>)
 801382e:	4b0c      	ldr	r3, [pc, #48]	@ (8013860 <acc_alg_atan2_q16+0xdc>)
 8013830:	f850 5037 	ldr.w	r5, [r0, r7, lsl #3]
 8013834:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8013838:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 801383c:	6840      	ldr	r0, [r0, #4]
 801383e:	e7d5      	b.n	80137ec <acc_alg_atan2_q16+0x68>
 8013840:	2200      	movs	r2, #0
 8013842:	2601      	movs	r6, #1
 8013844:	e7af      	b.n	80137a6 <acc_alg_atan2_q16+0x22>
 8013846:	2700      	movs	r7, #0
 8013848:	e7f0      	b.n	801382c <acc_alg_atan2_q16+0xa8>
 801384a:	2702      	movs	r7, #2
 801384c:	e7ee      	b.n	801382c <acc_alg_atan2_q16+0xa8>
 801384e:	2703      	movs	r7, #3
 8013850:	e7ec      	b.n	801382c <acc_alg_atan2_q16+0xa8>
 8013852:	2704      	movs	r7, #4
 8013854:	e7ea      	b.n	801382c <acc_alg_atan2_q16+0xa8>
 8013856:	bf00      	nop
 8013858:	0001921f 	.word	0x0001921f
 801385c:	0801b144 	.word	0x0801b144
 8013860:	0801b17c 	.word	0x0801b17c

08013864 <acc_alg_basic_util_crc32>:
 8013864:	b1a9      	cbz	r1, 8013892 <acc_alg_basic_util_crc32+0x2e>
 8013866:	b430      	push	{r4, r5}
 8013868:	4a0b      	ldr	r2, [pc, #44]	@ (8013898 <acc_alg_basic_util_crc32+0x34>)
 801386a:	1e44      	subs	r4, r0, #1
 801386c:	1865      	adds	r5, r4, r1
 801386e:	f04f 30ff 	mov.w	r0, #4294967295
 8013872:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013876:	2308      	movs	r3, #8
 8013878:	4048      	eors	r0, r1
 801387a:	07c1      	lsls	r1, r0, #31
 801387c:	bf4c      	ite	mi
 801387e:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
 8013882:	0840      	lsrpl	r0, r0, #1
 8013884:	3b01      	subs	r3, #1
 8013886:	d1f8      	bne.n	801387a <acc_alg_basic_util_crc32+0x16>
 8013888:	42ac      	cmp	r4, r5
 801388a:	d1f2      	bne.n	8013872 <acc_alg_basic_util_crc32+0xe>
 801388c:	43c0      	mvns	r0, r0
 801388e:	bc30      	pop	{r4, r5}
 8013890:	4770      	bx	lr
 8013892:	4608      	mov	r0, r1
 8013894:	4770      	bx	lr
 8013896:	bf00      	nop
 8013898:	edb88320 	.word	0xedb88320

0801389c <acc_alg_least_square_fit>:
 801389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a0:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 80138a4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80138a8:	b08d      	sub	sp, #52	@ 0x34
 80138aa:	2600      	movs	r6, #0
 80138ac:	4683      	mov	fp, r0
 80138ae:	4682      	mov	sl, r0
 80138b0:	4680      	mov	r8, r0
 80138b2:	4667      	mov	r7, ip
 80138b4:	46b1      	mov	r9, r6
 80138b6:	a803      	add	r0, sp, #12
 80138b8:	ea4f 0589 	mov.w	r5, r9, lsl #2
 80138bc:	4686      	mov	lr, r0
 80138be:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8013a1c <acc_alg_least_square_fit+0x180>
 80138c2:	4643      	mov	r3, r8
 80138c4:	b16a      	cbz	r2, 80138e2 <acc_alg_least_square_fit+0x46>
 80138c6:	199c      	adds	r4, r3, r6
 80138c8:	442c      	add	r4, r5
 80138ca:	edd4 7a00 	vldr	s15, [r4]
 80138ce:	461c      	mov	r4, r3
 80138d0:	edd4 6a00 	vldr	s13, [r4]
 80138d4:	330c      	adds	r3, #12
 80138d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80138da:	42bb      	cmp	r3, r7
 80138dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80138e0:	d1f1      	bne.n	80138c6 <acc_alg_least_square_fit+0x2a>
 80138e2:	3504      	adds	r5, #4
 80138e4:	2d0c      	cmp	r5, #12
 80138e6:	ecae 7a01 	vstmia	lr!, {s14}
 80138ea:	d1e8      	bne.n	80138be <acc_alg_least_square_fit+0x22>
 80138ec:	f109 0901 	add.w	r9, r9, #1
 80138f0:	f1b9 0f03 	cmp.w	r9, #3
 80138f4:	f100 0010 	add.w	r0, r0, #16
 80138f8:	f108 0804 	add.w	r8, r8, #4
 80138fc:	f1a6 0604 	sub.w	r6, r6, #4
 8013900:	f107 0704 	add.w	r7, r7, #4
 8013904:	d1d8      	bne.n	80138b8 <acc_alg_least_square_fit+0x1c>
 8013906:	ed9d 6a04 	vldr	s12, [sp, #16]
 801390a:	eddd 5a05 	vldr	s11, [sp, #20]
 801390e:	eddd 6a08 	vldr	s13, [sp, #32]
 8013912:	4668      	mov	r0, sp
 8013914:	f10b 040c 	add.w	r4, fp, #12
 8013918:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8013a1c <acc_alg_least_square_fit+0x180>
 801391c:	4653      	mov	r3, sl
 801391e:	b13a      	cbz	r2, 8013930 <acc_alg_least_square_fit+0x94>
 8013920:	461d      	mov	r5, r3
 8013922:	ed95 7a00 	vldr	s14, [r5]
 8013926:	330c      	adds	r3, #12
 8013928:	4563      	cmp	r3, ip
 801392a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801392e:	d1f7      	bne.n	8013920 <acc_alg_least_square_fit+0x84>
 8013930:	f10a 0a04 	add.w	sl, sl, #4
 8013934:	45a2      	cmp	sl, r4
 8013936:	ece0 7a01 	vstmia	r0!, {s15}
 801393a:	f10c 0c04 	add.w	ip, ip, #4
 801393e:	d1eb      	bne.n	8013918 <acc_alg_least_square_fit+0x7c>
 8013940:	eddd 7a03 	vldr	s15, [sp, #12]
 8013944:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801394c:	d010      	beq.n	8013970 <acc_alg_least_square_fit+0xd4>
 801394e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013952:	ee87 4a27 	vdiv.f32	s8, s14, s15
 8013956:	eddd 7a07 	vldr	s15, [sp, #28]
 801395a:	ee66 4a04 	vmul.f32	s9, s12, s8
 801395e:	ee26 5a24 	vmul.f32	s10, s12, s9
 8013962:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013966:	eef5 7a40 	vcmp.f32	s15, #0.0
 801396a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801396e:	d106      	bne.n	801397e <acc_alg_least_square_fit+0xe2>
 8013970:	2000      	movs	r0, #0
 8013972:	2300      	movs	r3, #0
 8013974:	f8cb 3000 	str.w	r3, [fp]
 8013978:	b00d      	add	sp, #52	@ 0x34
 801397a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801397e:	eec7 2a27 	vdiv.f32	s5, s14, s15
 8013982:	ee65 3a84 	vmul.f32	s7, s11, s8
 8013986:	ee25 7aa4 	vmul.f32	s14, s11, s9
 801398a:	ee66 7a23 	vmul.f32	s15, s12, s7
 801398e:	ed9d 5a0b 	vldr	s10, [sp, #44]	@ 0x2c
 8013992:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8013996:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801399a:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801399e:	ee65 6aa3 	vmul.f32	s13, s11, s7
 80139a2:	ee75 6a66 	vsub.f32	s13, s10, s13
 80139a6:	ee27 5a27 	vmul.f32	s10, s14, s15
 80139aa:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80139ae:	eef5 6a40 	vcmp.f32	s13, #0.0
 80139b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139b6:	d0db      	beq.n	8013970 <acc_alg_least_square_fit+0xd4>
 80139b8:	ed9d 5a00 	vldr	s10, [sp]
 80139bc:	ed9d 3a01 	vldr	s6, [sp, #4]
 80139c0:	ed9d 2a02 	vldr	s4, [sp, #8]
 80139c4:	ee64 4a85 	vmul.f32	s9, s9, s10
 80139c8:	ee63 3a85 	vmul.f32	s7, s7, s10
 80139cc:	ee73 4a64 	vsub.f32	s9, s6, s9
 80139d0:	2001      	movs	r0, #1
 80139d2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80139d6:	2300      	movs	r3, #0
 80139d8:	ee72 7a67 	vsub.f32	s15, s4, s15
 80139dc:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80139e0:	eec3 7aa6 	vdiv.f32	s15, s7, s13
 80139e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139e8:	edc1 7a02 	vstr	s15, [r1, #8]
 80139ec:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80139f0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80139f4:	ee67 7a22 	vmul.f32	s15, s14, s5
 80139f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80139fc:	edc1 7a01 	vstr	s15, [r1, #4]
 8013a00:	ee35 6a46 	vsub.f32	s12, s10, s12
 8013a04:	ee76 5a65 	vsub.f32	s11, s12, s11
 8013a08:	ee25 4a84 	vmul.f32	s8, s11, s8
 8013a0c:	ed81 4a00 	vstr	s8, [r1]
 8013a10:	f8cb 3000 	str.w	r3, [fp]
 8013a14:	b00d      	add	sp, #52	@ 0x34
 8013a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a1a:	bf00      	nop
 8013a1c:	00000000 	.word	0x00000000

08013a20 <acc_confprogram_modify_bin_sensor>:
 8013a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a24:	b085      	sub	sp, #20
 8013a26:	2601      	movs	r6, #1
 8013a28:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8013a2c:	fa06 f503 	lsl.w	r5, r6, r3
 8013a30:	4545      	cmp	r5, r8
 8013a32:	461c      	mov	r4, r3
 8013a34:	460b      	mov	r3, r1
 8013a36:	d80d      	bhi.n	8013a54 <acc_confprogram_modify_bin_sensor+0x34>
 8013a38:	4a14      	ldr	r2, [pc, #80]	@ (8013a8c <acc_confprogram_modify_bin_sensor+0x6c>)
 8013a3a:	f8cd 8000 	str.w	r8, [sp]
 8013a3e:	3d01      	subs	r5, #1
 8013a40:	9501      	str	r5, [sp, #4]
 8013a42:	6914      	ldr	r4, [r2, #16]
 8013a44:	4912      	ldr	r1, [pc, #72]	@ (8013a90 <acc_confprogram_modify_bin_sensor+0x70>)
 8013a46:	4a13      	ldr	r2, [pc, #76]	@ (8013a94 <acc_confprogram_modify_bin_sensor+0x74>)
 8013a48:	2000      	movs	r0, #0
 8013a4a:	47a0      	blx	r4
 8013a4c:	2000      	movs	r0, #0
 8013a4e:	b005      	add	sp, #20
 8013a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a54:	4691      	mov	r9, r2
 8013a56:	4607      	mov	r7, r0
 8013a58:	9103      	str	r1, [sp, #12]
 8013a5a:	f1c4 0420 	rsb	r4, r4, #32
 8013a5e:	f000 f9ed 	bl	8013e3c <acc_sensor_conf_read_instr>
 8013a62:	f04f 31ff 	mov.w	r1, #4294967295
 8013a66:	fa21 f404 	lsr.w	r4, r1, r4
 8013a6a:	9b03      	ldr	r3, [sp, #12]
 8013a6c:	fa04 f409 	lsl.w	r4, r4, r9
 8013a70:	ea20 0404 	bic.w	r4, r0, r4
 8013a74:	fa08 f209 	lsl.w	r2, r8, r9
 8013a78:	4619      	mov	r1, r3
 8013a7a:	4638      	mov	r0, r7
 8013a7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a7e:	4322      	orrs	r2, r4
 8013a80:	4798      	blx	r3
 8013a82:	4630      	mov	r0, r6
 8013a84:	b005      	add	sp, #20
 8013a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a8a:	bf00      	nop
 8013a8c:	200008cc 	.word	0x200008cc
 8013a90:	0801b1d0 	.word	0x0801b1d0
 8013a94:	0801b198 	.word	0x0801b198

08013a98 <acc_confprogram_modify_bin>:
 8013a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a9c:	b085      	sub	sp, #20
 8013a9e:	2401      	movs	r4, #1
 8013aa0:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8013aa4:	fa04 f703 	lsl.w	r7, r4, r3
 8013aa8:	4547      	cmp	r7, r8
 8013aaa:	461e      	mov	r6, r3
 8013aac:	460b      	mov	r3, r1
 8013aae:	d80d      	bhi.n	8013acc <acc_confprogram_modify_bin+0x34>
 8013ab0:	4a17      	ldr	r2, [pc, #92]	@ (8013b10 <acc_confprogram_modify_bin+0x78>)
 8013ab2:	f8cd 8000 	str.w	r8, [sp]
 8013ab6:	3f01      	subs	r7, #1
 8013ab8:	9701      	str	r7, [sp, #4]
 8013aba:	6914      	ldr	r4, [r2, #16]
 8013abc:	4915      	ldr	r1, [pc, #84]	@ (8013b14 <acc_confprogram_modify_bin+0x7c>)
 8013abe:	4a16      	ldr	r2, [pc, #88]	@ (8013b18 <acc_confprogram_modify_bin+0x80>)
 8013ac0:	2000      	movs	r0, #0
 8013ac2:	47a0      	blx	r4
 8013ac4:	2000      	movs	r0, #0
 8013ac6:	b005      	add	sp, #20
 8013ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013acc:	eb00 0541 	add.w	r5, r0, r1, lsl #1
 8013ad0:	4691      	mov	r9, r2
 8013ad2:	4628      	mov	r0, r5
 8013ad4:	4622      	mov	r2, r4
 8013ad6:	a902      	add	r1, sp, #8
 8013ad8:	f000 faf8 	bl	80140cc <acc_utils_transfer_buffer_to_uint32>
 8013adc:	f1c6 0620 	rsb	r6, r6, #32
 8013ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ae4:	fa22 f606 	lsr.w	r6, r2, r6
 8013ae8:	9a02      	ldr	r2, [sp, #8]
 8013aea:	fa06 f609 	lsl.w	r6, r6, r9
 8013aee:	fa08 f809 	lsl.w	r8, r8, r9
 8013af2:	ea22 0206 	bic.w	r2, r2, r6
 8013af6:	ea42 0608 	orr.w	r6, r2, r8
 8013afa:	a803      	add	r0, sp, #12
 8013afc:	4629      	mov	r1, r5
 8013afe:	4622      	mov	r2, r4
 8013b00:	9603      	str	r6, [sp, #12]
 8013b02:	f000 fad5 	bl	80140b0 <acc_utils_uint32_to_transfer_buffer>
 8013b06:	4620      	mov	r0, r4
 8013b08:	b005      	add	sp, #20
 8013b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b0e:	bf00      	nop
 8013b10:	200008cc 	.word	0x200008cc
 8013b14:	0801b1d0 	.word	0x0801b1d0
 8013b18:	0801b1dc 	.word	0x0801b1dc

08013b1c <acc_confprogram_modify_runif>:
 8013b1c:	b570      	push	{r4, r5, r6, lr}
 8013b1e:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8013b22:	b082      	sub	sp, #8
 8013b24:	2201      	movs	r2, #1
 8013b26:	460e      	mov	r6, r1
 8013b28:	4620      	mov	r0, r4
 8013b2a:	4669      	mov	r1, sp
 8013b2c:	461d      	mov	r5, r3
 8013b2e:	f000 facd 	bl	80140cc <acc_utils_transfer_buffer_to_uint32>
 8013b32:	9a00      	ldr	r2, [sp, #0]
 8013b34:	f022 020f 	bic.w	r2, r2, #15
 8013b38:	b105      	cbz	r5, 8013b3c <acc_confprogram_modify_runif+0x20>
 8013b3a:	4332      	orrs	r2, r6
 8013b3c:	9201      	str	r2, [sp, #4]
 8013b3e:	4621      	mov	r1, r4
 8013b40:	2201      	movs	r2, #1
 8013b42:	a801      	add	r0, sp, #4
 8013b44:	f000 fab4 	bl	80140b0 <acc_utils_uint32_to_transfer_buffer>
 8013b48:	b002      	add	sp, #8
 8013b4a:	bd70      	pop	{r4, r5, r6, pc}

08013b4c <acc_confprogram_patch_offset>:
 8013b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b50:	b083      	sub	sp, #12
 8013b52:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
 8013b56:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8013b5a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013b5e:	887b      	ldrh	r3, [r7, #2]
 8013b60:	b303      	cbz	r3, 8013ba4 <acc_confprogram_patch_offset+0x58>
 8013b62:	460d      	mov	r5, r1
 8013b64:	6879      	ldr	r1, [r7, #4]
 8013b66:	4680      	mov	r8, r0
 8013b68:	18ae      	adds	r6, r5, r2
 8013b6a:	2400      	movs	r4, #0
 8013b6c:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8013b70:	0042      	lsls	r2, r0, #1
 8013b72:	b292      	uxth	r2, r2
 8013b74:	42aa      	cmp	r2, r5
 8013b76:	d312      	bcc.n	8013b9e <acc_confprogram_patch_offset+0x52>
 8013b78:	42b2      	cmp	r2, r6
 8013b7a:	da10      	bge.n	8013b9e <acc_confprogram_patch_offset+0x52>
 8013b7c:	f3c0 7301 	ubfx	r3, r0, #28, #2
 8013b80:	2b01      	cmp	r3, #1
 8013b82:	d036      	beq.n	8013bf2 <acc_confprogram_patch_offset+0xa6>
 8013b84:	2b02      	cmp	r3, #2
 8013b86:	d024      	beq.n	8013bd2 <acc_confprogram_patch_offset+0x86>
 8013b88:	b183      	cbz	r3, 8013bac <acc_confprogram_patch_offset+0x60>
 8013b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8013c04 <acc_confprogram_patch_offset+0xb8>)
 8013b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8013c08 <acc_confprogram_patch_offset+0xbc>)
 8013b8e:	691b      	ldr	r3, [r3, #16]
 8013b90:	491e      	ldr	r1, [pc, #120]	@ (8013c0c <acc_confprogram_patch_offset+0xc0>)
 8013b92:	2000      	movs	r0, #0
 8013b94:	4798      	blx	r3
 8013b96:	2000      	movs	r0, #0
 8013b98:	b003      	add	sp, #12
 8013b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b9e:	3401      	adds	r4, #1
 8013ba0:	42a3      	cmp	r3, r4
 8013ba2:	d8e3      	bhi.n	8013b6c <acc_confprogram_patch_offset+0x20>
 8013ba4:	2001      	movs	r0, #1
 8013ba6:	b003      	add	sp, #12
 8013ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013bac:	1b52      	subs	r2, r2, r5
 8013bae:	f3c0 5344 	ubfx	r3, r0, #21, #5
 8013bb2:	b291      	uxth	r1, r2
 8013bb4:	f8cd 9000 	str.w	r9, [sp]
 8013bb8:	f3c0 4204 	ubfx	r2, r0, #16, #5
 8013bbc:	4640      	mov	r0, r8
 8013bbe:	f7ff ff6b 	bl	8013a98 <acc_confprogram_modify_bin>
 8013bc2:	887b      	ldrh	r3, [r7, #2]
 8013bc4:	3401      	adds	r4, #1
 8013bc6:	42a3      	cmp	r3, r4
 8013bc8:	d9e6      	bls.n	8013b98 <acc_confprogram_patch_offset+0x4c>
 8013bca:	2800      	cmp	r0, #0
 8013bcc:	d0e4      	beq.n	8013b98 <acc_confprogram_patch_offset+0x4c>
 8013bce:	6879      	ldr	r1, [r7, #4]
 8013bd0:	e7cc      	b.n	8013b6c <acc_confprogram_patch_offset+0x20>
 8013bd2:	1b52      	subs	r2, r2, r5
 8013bd4:	fab9 f389 	clz	r3, r9
 8013bd8:	b292      	uxth	r2, r2
 8013bda:	f3c0 4103 	ubfx	r1, r0, #16, #4
 8013bde:	095b      	lsrs	r3, r3, #5
 8013be0:	4640      	mov	r0, r8
 8013be2:	f7ff ff9b 	bl	8013b1c <acc_confprogram_modify_runif>
 8013be6:	887b      	ldrh	r3, [r7, #2]
 8013be8:	3401      	adds	r4, #1
 8013bea:	42a3      	cmp	r3, r4
 8013bec:	d8ef      	bhi.n	8013bce <acc_confprogram_patch_offset+0x82>
 8013bee:	2001      	movs	r0, #1
 8013bf0:	e7d9      	b.n	8013ba6 <acc_confprogram_patch_offset+0x5a>
 8013bf2:	1b52      	subs	r2, r2, r5
 8013bf4:	f1b9 0300 	subs.w	r3, r9, #0
 8013bf8:	b292      	uxth	r2, r2
 8013bfa:	f3c0 4103 	ubfx	r1, r0, #16, #4
 8013bfe:	bf18      	it	ne
 8013c00:	2301      	movne	r3, #1
 8013c02:	e7ed      	b.n	8013be0 <acc_confprogram_patch_offset+0x94>
 8013c04:	200008cc 	.word	0x200008cc
 8013c08:	0801b214 	.word	0x0801b214
 8013c0c:	0801b1d0 	.word	0x0801b1d0

08013c10 <acc_confprogram_live_patch>:
 8013c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c14:	b083      	sub	sp, #12
 8013c16:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	@ 0x34
 8013c1a:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 8013c1e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8013c22:	8873      	ldrh	r3, [r6, #2]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d050      	beq.n	8013cca <acc_confprogram_live_patch+0xba>
 8013c28:	4607      	mov	r7, r0
 8013c2a:	468b      	mov	fp, r1
 8013c2c:	4690      	mov	r8, r2
 8013c2e:	2501      	movs	r5, #1
 8013c30:	6873      	ldr	r3, [r6, #4]
 8013c32:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8013c36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013c3a:	f3c0 7401 	ubfx	r4, r0, #28, #2
 8013c3e:	2c01      	cmp	r4, #1
 8013c40:	d00c      	beq.n	8013c5c <acc_confprogram_live_patch+0x4c>
 8013c42:	2c02      	cmp	r4, #2
 8013c44:	d032      	beq.n	8013cac <acc_confprogram_live_patch+0x9c>
 8013c46:	b1ec      	cbz	r4, 8013c84 <acc_confprogram_live_patch+0x74>
 8013c48:	4b22      	ldr	r3, [pc, #136]	@ (8013cd4 <acc_confprogram_live_patch+0xc4>)
 8013c4a:	4a23      	ldr	r2, [pc, #140]	@ (8013cd8 <acc_confprogram_live_patch+0xc8>)
 8013c4c:	691b      	ldr	r3, [r3, #16]
 8013c4e:	4923      	ldr	r1, [pc, #140]	@ (8013cdc <acc_confprogram_live_patch+0xcc>)
 8013c50:	2000      	movs	r0, #0
 8013c52:	4798      	blx	r3
 8013c54:	2000      	movs	r0, #0
 8013c56:	b003      	add	sp, #12
 8013c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c5c:	eb08 0100 	add.w	r1, r8, r0
 8013c60:	b289      	uxth	r1, r1
 8013c62:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 8013c66:	f022 020f 	bic.w	r2, r2, #15
 8013c6a:	f1b9 0f00 	cmp.w	r9, #0
 8013c6e:	d002      	beq.n	8013c76 <acc_confprogram_live_patch+0x66>
 8013c70:	f3c0 4003 	ubfx	r0, r0, #16, #4
 8013c74:	4302      	orrs	r2, r0
 8013c76:	4638      	mov	r0, r7
 8013c78:	47d0      	blx	sl
 8013c7a:	8873      	ldrh	r3, [r6, #2]
 8013c7c:	42ab      	cmp	r3, r5
 8013c7e:	d924      	bls.n	8013cca <acc_confprogram_live_patch+0xba>
 8013c80:	3501      	adds	r5, #1
 8013c82:	e7d5      	b.n	8013c30 <acc_confprogram_live_patch+0x20>
 8013c84:	eb08 0100 	add.w	r1, r8, r0
 8013c88:	f3c0 5344 	ubfx	r3, r0, #21, #5
 8013c8c:	f3c0 4204 	ubfx	r2, r0, #16, #5
 8013c90:	e9cd 9a00 	strd	r9, sl, [sp]
 8013c94:	b289      	uxth	r1, r1
 8013c96:	4638      	mov	r0, r7
 8013c98:	f7ff fec2 	bl	8013a20 <acc_confprogram_modify_bin_sensor>
 8013c9c:	8873      	ldrh	r3, [r6, #2]
 8013c9e:	42ab      	cmp	r3, r5
 8013ca0:	d9d9      	bls.n	8013c56 <acc_confprogram_live_patch+0x46>
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	d1ec      	bne.n	8013c80 <acc_confprogram_live_patch+0x70>
 8013ca6:	b003      	add	sp, #12
 8013ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cac:	eb08 0100 	add.w	r1, r8, r0
 8013cb0:	b289      	uxth	r1, r1
 8013cb2:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
 8013cb6:	f022 020f 	bic.w	r2, r2, #15
 8013cba:	f1b9 0f00 	cmp.w	r9, #0
 8013cbe:	d0d7      	beq.n	8013c70 <acc_confprogram_live_patch+0x60>
 8013cc0:	4638      	mov	r0, r7
 8013cc2:	47d0      	blx	sl
 8013cc4:	8873      	ldrh	r3, [r6, #2]
 8013cc6:	42ab      	cmp	r3, r5
 8013cc8:	d8da      	bhi.n	8013c80 <acc_confprogram_live_patch+0x70>
 8013cca:	2001      	movs	r0, #1
 8013ccc:	b003      	add	sp, #12
 8013cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cd2:	bf00      	nop
 8013cd4:	200008cc 	.word	0x200008cc
 8013cd8:	0801b238 	.word	0x0801b238
 8013cdc:	0801b1d0 	.word	0x0801b1d0

08013ce0 <acc_confprogram_copy>:
 8013ce0:	b152      	cbz	r2, 8013cf8 <acc_confprogram_copy+0x18>
 8013ce2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013ce6:	3804      	subs	r0, #4
 8013ce8:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8013cec:	804b      	strh	r3, [r1, #2]
 8013cee:	0c1b      	lsrs	r3, r3, #16
 8013cf0:	800b      	strh	r3, [r1, #0]
 8013cf2:	3104      	adds	r1, #4
 8013cf4:	4291      	cmp	r1, r2
 8013cf6:	d1f7      	bne.n	8013ce8 <acc_confprogram_copy+0x8>
 8013cf8:	4770      	bx	lr
 8013cfa:	bf00      	nop

08013cfc <acc_confprogram_get_parameter_patch_range>:
 8013cfc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013d00:	b470      	push	{r4, r5, r6}
 8013d02:	884e      	ldrh	r6, [r1, #2]
 8013d04:	b1c6      	cbz	r6, 8013d38 <acc_confprogram_get_parameter_patch_range+0x3c>
 8013d06:	6848      	ldr	r0, [r1, #4]
 8013d08:	2500      	movs	r5, #0
 8013d0a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8013d0e:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8013d12:	f850 1b04 	ldr.w	r1, [r0], #4
 8013d16:	b289      	uxth	r1, r1
 8013d18:	428c      	cmp	r4, r1
 8013d1a:	bf28      	it	cs
 8013d1c:	460c      	movcs	r4, r1
 8013d1e:	428d      	cmp	r5, r1
 8013d20:	bf38      	it	cc
 8013d22:	460d      	movcc	r5, r1
 8013d24:	4286      	cmp	r6, r0
 8013d26:	d1f4      	bne.n	8013d12 <acc_confprogram_get_parameter_patch_range+0x16>
 8013d28:	0064      	lsls	r4, r4, #1
 8013d2a:	006d      	lsls	r5, r5, #1
 8013d2c:	b2a4      	uxth	r4, r4
 8013d2e:	b2ad      	uxth	r5, r5
 8013d30:	8014      	strh	r4, [r2, #0]
 8013d32:	801d      	strh	r5, [r3, #0]
 8013d34:	bc70      	pop	{r4, r5, r6}
 8013d36:	4770      	bx	lr
 8013d38:	4635      	mov	r5, r6
 8013d3a:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 8013d3e:	8014      	strh	r4, [r2, #0]
 8013d40:	801d      	strh	r5, [r3, #0]
 8013d42:	bc70      	pop	{r4, r5, r6}
 8013d44:	4770      	bx	lr
 8013d46:	bf00      	nop

08013d48 <acc_element_sizeof>:
 8013d48:	3801      	subs	r0, #1
 8013d4a:	b2c0      	uxtb	r0, r0
 8013d4c:	2807      	cmp	r0, #7
 8013d4e:	bf9a      	itte	ls
 8013d50:	4b02      	ldrls	r3, [pc, #8]	@ (8013d5c <acc_element_sizeof+0x14>)
 8013d52:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8013d56:	2000      	movhi	r0, #0
 8013d58:	4770      	bx	lr
 8013d5a:	bf00      	nop
 8013d5c:	0801b260 	.word	0x0801b260

08013d60 <acc_element_connect>:
 8013d60:	6001      	str	r1, [r0, #0]
 8013d62:	4770      	bx	lr

08013d64 <acc_probes_execute_struct>:
 8013d64:	b530      	push	{r4, r5, lr}
 8013d66:	4c0a      	ldr	r4, [pc, #40]	@ (8013d90 <acc_probes_execute_struct+0x2c>)
 8013d68:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 8013d6c:	b085      	sub	sp, #20
 8013d6e:	6865      	ldr	r5, [r4, #4]
 8013d70:	f88d 0004 	strb.w	r0, [sp, #4]
 8013d74:	2007      	movs	r0, #7
 8013d76:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8013d7a:	b135      	cbz	r5, 8013d8a <acc_probes_execute_struct+0x26>
 8013d7c:	4611      	mov	r1, r2
 8013d7e:	a801      	add	r0, sp, #4
 8013d80:	461a      	mov	r2, r3
 8013d82:	68e3      	ldr	r3, [r4, #12]
 8013d84:	47a8      	blx	r5
 8013d86:	b005      	add	sp, #20
 8013d88:	bd30      	pop	{r4, r5, pc}
 8013d8a:	2001      	movs	r0, #1
 8013d8c:	b005      	add	sp, #20
 8013d8e:	bd30      	pop	{r4, r5, pc}
 8013d90:	2000002c 	.word	0x2000002c

08013d94 <acc_sensor_reg_read>:
 8013d94:	b530      	push	{r4, r5, lr}
 8013d96:	b083      	sub	sp, #12
 8013d98:	f441 5140 	orr.w	r1, r1, #12288	@ 0x3000
 8013d9c:	4614      	mov	r4, r2
 8013d9e:	2500      	movs	r5, #0
 8013da0:	f8ad 1000 	strh.w	r1, [sp]
 8013da4:	2301      	movs	r3, #1
 8013da6:	2203      	movs	r2, #3
 8013da8:	4669      	mov	r1, sp
 8013daa:	f8ad 5002 	strh.w	r5, [sp, #2]
 8013dae:	f8ad 5004 	strh.w	r5, [sp, #4]
 8013db2:	f7fd fb07 	bl	80113c4 <acc_rss_integration_sensor_device_transfer>
 8013db6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013dba:	8023      	strh	r3, [r4, #0]
 8013dbc:	b003      	add	sp, #12
 8013dbe:	bd30      	pop	{r4, r5, pc}

08013dc0 <acc_sensor_reg_write>:
 8013dc0:	b530      	push	{r4, r5, lr}
 8013dc2:	b083      	sub	sp, #12
 8013dc4:	f441 5480 	orr.w	r4, r1, #4096	@ 0x1000
 8013dc8:	4615      	mov	r5, r2
 8013dca:	2300      	movs	r3, #0
 8013dcc:	2202      	movs	r2, #2
 8013dce:	a901      	add	r1, sp, #4
 8013dd0:	f8ad 4004 	strh.w	r4, [sp, #4]
 8013dd4:	f8ad 5006 	strh.w	r5, [sp, #6]
 8013dd8:	f7fd faf4 	bl	80113c4 <acc_rss_integration_sensor_device_transfer>
 8013ddc:	b003      	add	sp, #12
 8013dde:	bd30      	pop	{r4, r5, pc}

08013de0 <acc_sensor_reg_field_write>:
 8013de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013de4:	b082      	sub	sp, #8
 8013de6:	461d      	mov	r5, r3
 8013de8:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8013dec:	f8bd 4028 	ldrh.w	r4, [sp, #40]	@ 0x28
 8013df0:	f8ad 3000 	strh.w	r3, [sp]
 8013df4:	2700      	movs	r7, #0
 8013df6:	468a      	mov	sl, r1
 8013df8:	4691      	mov	r9, r2
 8013dfa:	4669      	mov	r1, sp
 8013dfc:	2301      	movs	r3, #1
 8013dfe:	2203      	movs	r2, #3
 8013e00:	4680      	mov	r8, r0
 8013e02:	f8ad 7002 	strh.w	r7, [sp, #2]
 8013e06:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013e0a:	f7fd fadb 	bl	80113c4 <acc_rss_integration_sensor_device_transfer>
 8013e0e:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8013e12:	fa04 f10a 	lsl.w	r1, r4, sl
 8013e16:	4071      	eors	r1, r6
 8013e18:	ea01 0409 	and.w	r4, r1, r9
 8013e1c:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
 8013e20:	4640      	mov	r0, r8
 8013e22:	463b      	mov	r3, r7
 8013e24:	4669      	mov	r1, sp
 8013e26:	4074      	eors	r4, r6
 8013e28:	2202      	movs	r2, #2
 8013e2a:	f8ad 5000 	strh.w	r5, [sp]
 8013e2e:	f8ad 4002 	strh.w	r4, [sp, #2]
 8013e32:	f7fd fac7 	bl	80113c4 <acc_rss_integration_sensor_device_transfer>
 8013e36:	b002      	add	sp, #8
 8013e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013e3c <acc_sensor_conf_read_instr>:
 8013e3c:	b530      	push	{r4, r5, lr}
 8013e3e:	b085      	sub	sp, #20
 8013e40:	2401      	movs	r4, #1
 8013e42:	f441 4120 	orr.w	r1, r1, #40960	@ 0xa000
 8013e46:	4623      	mov	r3, r4
 8013e48:	2500      	movs	r5, #0
 8013e4a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013e4e:	2205      	movs	r2, #5
 8013e50:	a901      	add	r1, sp, #4
 8013e52:	f8ad 4006 	strh.w	r4, [sp, #6]
 8013e56:	f8ad 5008 	strh.w	r5, [sp, #8]
 8013e5a:	f8cd 500a 	str.w	r5, [sp, #10]
 8013e5e:	f7fd fab1 	bl	80113c4 <acc_rss_integration_sensor_device_transfer>
 8013e62:	f10d 000a 	add.w	r0, sp, #10
 8013e66:	4622      	mov	r2, r4
 8013e68:	4669      	mov	r1, sp
 8013e6a:	f000 f92f 	bl	80140cc <acc_utils_transfer_buffer_to_uint32>
 8013e6e:	9800      	ldr	r0, [sp, #0]
 8013e70:	b005      	add	sp, #20
 8013e72:	bd30      	pop	{r4, r5, pc}

08013e74 <acc_cpd_pll_divisors_calculate>:
 8013e74:	edd0 7a00 	vldr	s15, [r0]
 8013e78:	ed9f 6a61 	vldr	s12, [pc, #388]	@ 8014000 <acc_cpd_pll_divisors_calculate+0x18c>
 8013e7c:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8014004 <acc_cpd_pll_divisors_calculate+0x190>
 8013e80:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8013e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e86:	4606      	mov	r6, r0
 8013e88:	b083      	sub	sp, #12
 8013e8a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013e8e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013e92:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013e96:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e9e:	ee17 3a10 	vmov	r3, s14
 8013ea2:	b29c      	uxth	r4, r3
 8013ea4:	dc06      	bgt.n	8013eb4 <acc_cpd_pll_divisors_calculate+0x40>
 8013ea6:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8014008 <acc_cpd_pll_divisors_calculate+0x194>
 8013eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb2:	d571      	bpl.n	8013f98 <acc_cpd_pll_divisors_calculate+0x124>
 8013eb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ebc:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 801400c <acc_cpd_pll_divisors_calculate+0x198>
 8013ec0:	bf4c      	ite	mi
 8013ec2:	4b53      	ldrmi	r3, [pc, #332]	@ (8014010 <acc_cpd_pll_divisors_calculate+0x19c>)
 8013ec4:	4b53      	ldrpl	r3, [pc, #332]	@ (8014014 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8013ec6:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 801400c <acc_cpd_pll_divisors_calculate+0x198>
 8013eca:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8014018 <acc_cpd_pll_divisors_calculate+0x1a4>
 8013ece:	4d53      	ldr	r5, [pc, #332]	@ (801401c <acc_cpd_pll_divisors_calculate+0x1a8>)
 8013ed0:	4953      	ldr	r1, [pc, #332]	@ (8014020 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8013ed2:	692f      	ldr	r7, [r5, #16]
 8013ed4:	bf48      	it	mi
 8013ed6:	eef1 7a67 	vnegmi.f32	s15, s15
 8013eda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ede:	2000      	movs	r0, #0
 8013ee0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8013ee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eec:	ee17 2a10 	vmov	r2, s14
 8013ef0:	bf4c      	ite	mi
 8013ef2:	eeb1 7a67 	vnegmi.f32	s14, s15
 8013ef6:	eeb0 7a67 	vmovpl.f32	s14, s15
 8013efa:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013efe:	9200      	str	r2, [sp, #0]
 8013f00:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013f04:	4a47      	ldr	r2, [pc, #284]	@ (8014024 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8013f06:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013f0a:	3c10      	subs	r4, #16
 8013f0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f18:	edcd 7a01 	vstr	s15, [sp, #4]
 8013f1c:	47b8      	blx	r7
 8013f1e:	2cef      	cmp	r4, #239	@ 0xef
 8013f20:	d937      	bls.n	8013f92 <acc_cpd_pll_divisors_calculate+0x11e>
 8013f22:	edd6 7a00 	vldr	s15, [r6]
 8013f26:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 801400c <acc_cpd_pll_divisors_calculate+0x198>
 8013f2a:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 801400c <acc_cpd_pll_divisors_calculate+0x198>
 8013f2e:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8014018 <acc_cpd_pll_divisors_calculate+0x1a4>
 8013f32:	692c      	ldr	r4, [r5, #16]
 8013f34:	493a      	ldr	r1, [pc, #232]	@ (8014020 <acc_cpd_pll_divisors_calculate+0x1ac>)
 8013f36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f3e:	bf48      	it	mi
 8013f40:	eef1 7a67 	vnegmi.f32	s15, s15
 8013f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f48:	bf4c      	ite	mi
 8013f4a:	4b31      	ldrmi	r3, [pc, #196]	@ (8014010 <acc_cpd_pll_divisors_calculate+0x19c>)
 8013f4c:	4b31      	ldrpl	r3, [pc, #196]	@ (8014014 <acc_cpd_pll_divisors_calculate+0x1a0>)
 8013f4e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8013f52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f5a:	ee17 2a10 	vmov	r2, s14
 8013f5e:	bf4c      	ite	mi
 8013f60:	eeb1 7a67 	vnegmi.f32	s14, s15
 8013f64:	eeb0 7a67 	vmovpl.f32	s14, s15
 8013f68:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013f6c:	9200      	str	r2, [sp, #0]
 8013f6e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013f72:	4a2c      	ldr	r2, [pc, #176]	@ (8014024 <acc_cpd_pll_divisors_calculate+0x1b0>)
 8013f74:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013f78:	2000      	movs	r0, #0
 8013f7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f86:	edcd 7a01 	vstr	s15, [sp, #4]
 8013f8a:	47a0      	blx	r4
 8013f8c:	2000      	movs	r0, #0
 8013f8e:	b003      	add	sp, #12
 8013f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f92:	2000      	movs	r0, #0
 8013f94:	b003      	add	sp, #12
 8013f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f98:	f1a4 0310 	sub.w	r3, r4, #16
 8013f9c:	b29b      	uxth	r3, r3
 8013f9e:	2bef      	cmp	r3, #239	@ 0xef
 8013fa0:	d901      	bls.n	8013fa6 <acc_cpd_pll_divisors_calculate+0x132>
 8013fa2:	4d1e      	ldr	r5, [pc, #120]	@ (801401c <acc_cpd_pll_divisors_calculate+0x1a8>)
 8013fa4:	e7bf      	b.n	8013f26 <acc_cpd_pll_divisors_calculate+0xb2>
 8013fa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013faa:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8014028 <acc_cpd_pll_divisors_calculate+0x1b4>
 8013fae:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 801402c <acc_cpd_pll_divisors_calculate+0x1b8>
 8013fb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013fb6:	2c3f      	cmp	r4, #63	@ 0x3f
 8013fb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fc0:	ee17 2a90 	vmov	r2, s15
 8013fc4:	810a      	strh	r2, [r1, #8]
 8013fc6:	d912      	bls.n	8013fee <acc_cpd_pll_divisors_calculate+0x17a>
 8013fc8:	2cbf      	cmp	r4, #191	@ 0xbf
 8013fca:	f04f 0301 	mov.w	r3, #1
 8013fce:	bf98      	it	ls
 8013fd0:	f1a4 0240 	subls.w	r2, r4, #64	@ 0x40
 8013fd4:	804b      	strh	r3, [r1, #2]
 8013fd6:	bf8c      	ite	hi
 8013fd8:	08e2      	lsrhi	r2, r4, #3
 8013fda:	f3c2 02cf 	ubfxls	r2, r2, #3, #16
 8013fde:	f004 0307 	and.w	r3, r4, #7
 8013fe2:	808a      	strh	r2, [r1, #4]
 8013fe4:	80cb      	strh	r3, [r1, #6]
 8013fe6:	2001      	movs	r0, #1
 8013fe8:	800c      	strh	r4, [r1, #0]
 8013fea:	b003      	add	sp, #12
 8013fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fee:	2200      	movs	r2, #0
 8013ff0:	2c2f      	cmp	r4, #47	@ 0x2f
 8013ff2:	bf88      	it	hi
 8013ff4:	4623      	movhi	r3, r4
 8013ff6:	808b      	strh	r3, [r1, #4]
 8013ff8:	804a      	strh	r2, [r1, #2]
 8013ffa:	80ca      	strh	r2, [r1, #6]
 8013ffc:	e7f3      	b.n	8013fe6 <acc_cpd_pll_divisors_calculate+0x172>
 8013ffe:	bf00      	nop
 8014000:	4f1502f9 	.word	0x4f1502f9
 8014004:	4c989680 	.word	0x4c989680
 8014008:	4b989680 	.word	0x4b989680
 801400c:	350637bd 	.word	0x350637bd
 8014010:	0801a1a0 	.word	0x0801a1a0
 8014014:	0801ac70 	.word	0x0801ac70
 8014018:	49742400 	.word	0x49742400
 801401c:	200008cc 	.word	0x200008cc
 8014020:	0801b2ac 	.word	0x0801b2ac
 8014024:	0801b280 	.word	0x0801b280
 8014028:	b55b38e8 	.word	0xb55b38e8
 801402c:	427c0000 	.word	0x427c0000

08014030 <acc_cpd_pll_divisors_ref_divisor>:
 8014030:	eddf 7a02 	vldr	s15, [pc, #8]	@ 801403c <acc_cpd_pll_divisors_ref_divisor+0xc>
 8014034:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8014038:	f004 b816 	b.w	8018068 <roundf>
 801403c:	4f1502f9 	.word	0x4f1502f9

08014040 <acc_dll_calculate_area_settings>:
 8014040:	0080      	lsls	r0, r0, #2
 8014042:	b280      	uxth	r0, r0
 8014044:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 8014048:	b29b      	uxth	r3, r3
 801404a:	428b      	cmp	r3, r1
 801404c:	8010      	strh	r0, [r2, #0]
 801404e:	8053      	strh	r3, [r2, #2]
 8014050:	d20c      	bcs.n	801406c <acc_dll_calculate_area_settings+0x2c>
 8014052:	2301      	movs	r3, #1
 8014054:	2100      	movs	r1, #0
 8014056:	2003      	movs	r0, #3
 8014058:	8093      	strh	r3, [r2, #4]
 801405a:	8153      	strh	r3, [r2, #10]
 801405c:	8193      	strh	r3, [r2, #12]
 801405e:	8213      	strh	r3, [r2, #16]
 8014060:	80d1      	strh	r1, [r2, #6]
 8014062:	8251      	strh	r1, [r2, #18]
 8014064:	8291      	strh	r1, [r2, #20]
 8014066:	8110      	strh	r0, [r2, #8]
 8014068:	81d0      	strh	r0, [r2, #14]
 801406a:	4770      	bx	lr
 801406c:	b430      	push	{r4, r5}
 801406e:	fbb3 f4f1 	udiv	r4, r3, r1
 8014072:	2500      	movs	r5, #0
 8014074:	fb01 3114 	mls	r1, r1, r4, r3
 8014078:	2401      	movs	r4, #1
 801407a:	2303      	movs	r3, #3
 801407c:	8094      	strh	r4, [r2, #4]
 801407e:	80d4      	strh	r4, [r2, #6]
 8014080:	8154      	strh	r4, [r2, #10]
 8014082:	8214      	strh	r4, [r2, #16]
 8014084:	8254      	strh	r4, [r2, #18]
 8014086:	8195      	strh	r5, [r2, #12]
 8014088:	81d5      	strh	r5, [r2, #14]
 801408a:	8295      	strh	r5, [r2, #20]
 801408c:	8050      	strh	r0, [r2, #2]
 801408e:	bc30      	pop	{r4, r5}
 8014090:	8011      	strh	r1, [r2, #0]
 8014092:	8113      	strh	r3, [r2, #8]
 8014094:	4770      	bx	lr
 8014096:	bf00      	nop

08014098 <acc_utils_swap16_array>:
 8014098:	b141      	cbz	r1, 80140ac <acc_utils_swap16_array+0x14>
 801409a:	3802      	subs	r0, #2
 801409c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80140a0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80140a4:	ba5b      	rev16	r3, r3
 80140a6:	4288      	cmp	r0, r1
 80140a8:	8003      	strh	r3, [r0, #0]
 80140aa:	d1f9      	bne.n	80140a0 <acc_utils_swap16_array+0x8>
 80140ac:	4770      	bx	lr
 80140ae:	bf00      	nop

080140b0 <acc_utils_uint32_to_transfer_buffer>:
 80140b0:	b152      	cbz	r2, 80140c8 <acc_utils_uint32_to_transfer_buffer+0x18>
 80140b2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80140b6:	3804      	subs	r0, #4
 80140b8:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80140bc:	804b      	strh	r3, [r1, #2]
 80140be:	0c1b      	lsrs	r3, r3, #16
 80140c0:	800b      	strh	r3, [r1, #0]
 80140c2:	3104      	adds	r1, #4
 80140c4:	4291      	cmp	r1, r2
 80140c6:	d1f7      	bne.n	80140b8 <acc_utils_uint32_to_transfer_buffer+0x8>
 80140c8:	4770      	bx	lr
 80140ca:	bf00      	nop

080140cc <acc_utils_transfer_buffer_to_uint32>:
 80140cc:	b17a      	cbz	r2, 80140ee <acc_utils_transfer_buffer_to_uint32+0x22>
 80140ce:	b410      	push	{r4}
 80140d0:	3904      	subs	r1, #4
 80140d2:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 80140d6:	8802      	ldrh	r2, [r0, #0]
 80140d8:	8843      	ldrh	r3, [r0, #2]
 80140da:	3004      	adds	r0, #4
 80140dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80140e0:	4284      	cmp	r4, r0
 80140e2:	f841 3f04 	str.w	r3, [r1, #4]!
 80140e6:	d1f6      	bne.n	80140d6 <acc_utils_transfer_buffer_to_uint32+0xa>
 80140e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140ec:	4770      	bx	lr
 80140ee:	4770      	bx	lr

080140f0 <acc_alg_temp>:
 80140f0:	f240 13e5 	movw	r3, #485	@ 0x1e5
 80140f4:	fb03 f000 	mul.w	r0, r3, r0
 80140f8:	0c00      	lsrs	r0, r0, #16
 80140fa:	f5a0 7089 	sub.w	r0, r0, #274	@ 0x112
 80140fe:	4770      	bx	lr

08014100 <acc_diagnostic_log_set_scope>:
 8014100:	4b02      	ldr	r3, [pc, #8]	@ (801410c <acc_diagnostic_log_set_scope+0xc>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	b10b      	cbz	r3, 801410a <acc_diagnostic_log_set_scope+0xa>
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	4718      	bx	r3
 801410a:	4770      	bx	lr
 801410c:	2000077c 	.word	0x2000077c

08014110 <acc_diagnostic_log_array>:
 8014110:	4b02      	ldr	r3, [pc, #8]	@ (801411c <acc_diagnostic_log_array+0xc>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	b10b      	cbz	r3, 801411a <acc_diagnostic_log_array+0xa>
 8014116:	68db      	ldr	r3, [r3, #12]
 8014118:	4718      	bx	r3
 801411a:	4770      	bx	lr
 801411c:	2000077c 	.word	0x2000077c

08014120 <acc_diagnostic_log_scalar>:
 8014120:	4b02      	ldr	r3, [pc, #8]	@ (801412c <acc_diagnostic_log_scalar+0xc>)
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	b10b      	cbz	r3, 801412a <acc_diagnostic_log_scalar+0xa>
 8014126:	695b      	ldr	r3, [r3, #20]
 8014128:	4718      	bx	r3
 801412a:	4770      	bx	lr
 801412c:	2000077c 	.word	0x2000077c

08014130 <acc_diagnostic_log_data_u16>:
 8014130:	4b02      	ldr	r3, [pc, #8]	@ (801413c <acc_diagnostic_log_data_u16+0xc>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	b10b      	cbz	r3, 801413a <acc_diagnostic_log_data_u16+0xa>
 8014136:	6a1b      	ldr	r3, [r3, #32]
 8014138:	4718      	bx	r3
 801413a:	4770      	bx	lr
 801413c:	2000077c 	.word	0x2000077c

08014140 <acc_diagnostic_log_data_i16>:
 8014140:	4b02      	ldr	r3, [pc, #8]	@ (801414c <acc_diagnostic_log_data_i16+0xc>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	b10b      	cbz	r3, 801414a <acc_diagnostic_log_data_i16+0xa>
 8014146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014148:	4718      	bx	r3
 801414a:	4770      	bx	lr
 801414c:	2000077c 	.word	0x2000077c

08014150 <acc_image_a121_r1a_cal_session_get>:
 8014150:	4800      	ldr	r0, [pc, #0]	@ (8014154 <acc_image_a121_r1a_cal_session_get+0x4>)
 8014152:	4770      	bx	lr
 8014154:	0801b2c0 	.word	0x0801b2c0

08014158 <acc_image_a121_r1a_cal_session_param_table_get>:
 8014158:	4800      	ldr	r0, [pc, #0]	@ (801415c <acc_image_a121_r1a_cal_session_param_table_get+0x4>)
 801415a:	4770      	bx	lr
 801415c:	0801c954 	.word	0x0801c954

08014160 <acc_alg_comp_iq_imb>:
 8014160:	b430      	push	{r4, r5}
 8014162:	8814      	ldrh	r4, [r2, #0]
 8014164:	9a02      	ldr	r2, [sp, #8]
 8014166:	f004 051f 	and.w	r5, r4, #31
 801416a:	3530      	adds	r5, #48	@ 0x30
 801416c:	fb00 f005 	mul.w	r0, r0, r5
 8014170:	0aa5      	lsrs	r5, r4, #10
 8014172:	3d20      	subs	r5, #32
 8014174:	f3c4 1444 	ubfx	r4, r4, #5, #5
 8014178:	fb01 f505 	mul.w	r5, r1, r5
 801417c:	2800      	cmp	r0, #0
 801417e:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 8014182:	fb01 f104 	mul.w	r1, r1, r4
 8014186:	bfb8      	it	lt
 8014188:	303f      	addlt	r0, #63	@ 0x3f
 801418a:	2d00      	cmp	r5, #0
 801418c:	bfb8      	it	lt
 801418e:	351f      	addlt	r5, #31
 8014190:	2900      	cmp	r1, #0
 8014192:	ea4f 10a0 	mov.w	r0, r0, asr #6
 8014196:	bfb8      	it	lt
 8014198:	313f      	addlt	r1, #63	@ 0x3f
 801419a:	eb00 1065 	add.w	r0, r0, r5, asr #5
 801419e:	1189      	asrs	r1, r1, #6
 80141a0:	8018      	strh	r0, [r3, #0]
 80141a2:	bc30      	pop	{r4, r5}
 80141a4:	8011      	strh	r1, [r2, #0]
 80141a6:	4770      	bx	lr

080141a8 <acc_alg_iq_imb_comp_to_fix_point>:
 80141a8:	eef6 7a08 	vmov.f32	s15, #104	@ 0x3f400000  0.750
 80141ac:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8014288 <acc_alg_iq_imb_comp_to_fix_point+0xe0>
 80141b0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 801428c <acc_alg_iq_imb_comp_to_fix_point+0xe4>
 80141b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80141b8:	ee31 1a67 	vsub.f32	s2, s2, s15
 80141bc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80141c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80141c4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80141c8:	ee70 0a86 	vadd.f32	s1, s1, s12
 80141cc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80141d0:	ee21 1a07 	vmul.f32	s2, s2, s14
 80141d4:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 80141d8:	ee60 0aa6 	vmul.f32	s1, s1, s13
 80141dc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80141e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e4:	ee31 1a27 	vadd.f32	s2, s2, s15
 80141e8:	ee70 0aa7 	vadd.f32	s1, s1, s15
 80141ec:	dc22      	bgt.n	8014234 <acc_alg_iq_imb_comp_to_fix_point+0x8c>
 80141ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80141f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f6:	bf48      	it	mi
 80141f8:	2300      	movmi	r3, #0
 80141fa:	d537      	bpl.n	801426c <acc_alg_iq_imb_comp_to_fix_point+0xc4>
 80141fc:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8014290 <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 8014200:	eef4 0ae7 	vcmpe.f32	s1, s15
 8014204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014208:	dd1d      	ble.n	8014246 <acc_alg_iq_imb_comp_to_fix_point+0x9e>
 801420a:	ea6f 5383 	mvn.w	r3, r3, lsl #22
 801420e:	ea6f 5393 	mvn.w	r3, r3, lsr #22
 8014212:	eef3 7a0f 	vmov.f32	s15, #63	@ 0x41f80000  31.0
 8014216:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801421a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801421e:	dc20      	bgt.n	8014262 <acc_alg_iq_imb_comp_to_fix_point+0xba>
 8014220:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8014224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014228:	bf48      	it	mi
 801422a:	2200      	movmi	r2, #0
 801422c:	d524      	bpl.n	8014278 <acc_alg_iq_imb_comp_to_fix_point+0xd0>
 801422e:	4313      	orrs	r3, r2
 8014230:	8003      	strh	r3, [r0, #0]
 8014232:	4770      	bx	lr
 8014234:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8014290 <acc_alg_iq_imb_comp_to_fix_point+0xe8>
 8014238:	eef4 0ae7 	vcmpe.f32	s1, s15
 801423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014240:	f04f 031f 	mov.w	r3, #31
 8014244:	dce1      	bgt.n	801420a <acc_alg_iq_imb_comp_to_fix_point+0x62>
 8014246:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 801424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801424e:	d4e0      	bmi.n	8014212 <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 8014250:	eefc 0ae0 	vcvt.u32.f32	s1, s1
 8014254:	ee10 2a90 	vmov	r2, s1
 8014258:	b292      	uxth	r2, r2
 801425a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801425e:	b21b      	sxth	r3, r3
 8014260:	e7d7      	b.n	8014212 <acc_alg_iq_imb_comp_to_fix_point+0x6a>
 8014262:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8014266:	4313      	orrs	r3, r2
 8014268:	8003      	strh	r3, [r0, #0]
 801426a:	4770      	bx	lr
 801426c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014270:	ee10 3a10 	vmov	r3, s0
 8014274:	b21b      	sxth	r3, r3
 8014276:	e7c1      	b.n	80141fc <acc_alg_iq_imb_comp_to_fix_point+0x54>
 8014278:	eefc 7ac1 	vcvt.u32.f32	s15, s2
 801427c:	ee17 2a90 	vmov	r2, s15
 8014280:	f342 020a 	sbfx	r2, r2, #0, #11
 8014284:	0152      	lsls	r2, r2, #5
 8014286:	e7d2      	b.n	801422e <acc_alg_iq_imb_comp_to_fix_point+0x86>
 8014288:	42800000 	.word	0x42800000
 801428c:	42000000 	.word	0x42000000
 8014290:	427c0000 	.word	0x427c0000

08014294 <element_frame_reset>:
 8014294:	6800      	ldr	r0, [r0, #0]
 8014296:	68c3      	ldr	r3, [r0, #12]
 8014298:	4718      	bx	r3
 801429a:	bf00      	nop

0801429c <element_frame_callback>:
 801429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801429e:	6995      	ldr	r5, [r2, #24]
 80142a0:	782b      	ldrb	r3, [r5, #0]
 80142a2:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 80142a6:	4614      	mov	r4, r2
 80142a8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80142ac:	460f      	mov	r7, r1
 80142ae:	f8b3 6044 	ldrh.w	r6, [r3, #68]	@ 0x44
 80142b2:	6963      	ldr	r3, [r4, #20]
 80142b4:	4601      	mov	r1, r0
 80142b6:	0072      	lsls	r2, r6, #1
 80142b8:	eb03 004e 	add.w	r0, r3, lr, lsl #1
 80142bc:	f001 fc06 	bl	8015acc <memmove>
 80142c0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80142c2:	8869      	ldrh	r1, [r5, #2]
 80142c4:	7813      	ldrb	r3, [r2, #0]
 80142c6:	440e      	add	r6, r1
 80142c8:	806e      	strh	r6, [r5, #2]
 80142ca:	b903      	cbnz	r3, 80142ce <element_frame_callback+0x32>
 80142cc:	793b      	ldrb	r3, [r7, #4]
 80142ce:	7013      	strb	r3, [r2, #0]
 80142d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142d2:	bf00      	nop

080142d4 <element_frame_event>:
 80142d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142d8:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80142da:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80142de:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80142e2:	2400      	movs	r4, #0
 80142e4:	f8a8 4002 	strh.w	r4, [r8, #2]
 80142e8:	4605      	mov	r5, r0
 80142ea:	701c      	strb	r4, [r3, #0]
 80142ec:	f100 074c 	add.w	r7, r0, #76	@ 0x4c
 80142f0:	f857 6b04 	ldr.w	r6, [r7], #4
 80142f4:	4649      	mov	r1, r9
 80142f6:	4630      	mov	r0, r6
 80142f8:	b136      	cbz	r6, 8014308 <element_frame_event+0x34>
 80142fa:	f000 fb11 	bl	8014920 <acc_pipeline_subsweep_prepare_memory>
 80142fe:	f888 4000 	strb.w	r4, [r8]
 8014302:	4630      	mov	r0, r6
 8014304:	f000 fb24 	bl	8014950 <acc_pipeline_subsweep_produce>
 8014308:	3401      	adds	r4, #1
 801430a:	b2e4      	uxtb	r4, r4
 801430c:	2c04      	cmp	r4, #4
 801430e:	d1ef      	bne.n	80142f0 <element_frame_event+0x1c>
 8014310:	6828      	ldr	r0, [r5, #0]
 8014312:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014316:	6843      	ldr	r3, [r0, #4]
 8014318:	4718      	bx	r3
 801431a:	bf00      	nop

0801431c <element_frame_validate>:
 801431c:	b570      	push	{r4, r5, r6, lr}
 801431e:	4604      	mov	r4, r0
 8014320:	6980      	ldr	r0, [r0, #24]
 8014322:	b178      	cbz	r0, 8014344 <element_frame_validate+0x28>
 8014324:	69e3      	ldr	r3, [r4, #28]
 8014326:	b143      	cbz	r3, 801433a <element_frame_validate+0x1e>
 8014328:	f7fd f8c6 	bl	80114b8 <acc_rss_integration_log_level>
 801432c:	b128      	cbz	r0, 801433a <element_frame_validate+0x1e>
 801432e:	4b0e      	ldr	r3, [pc, #56]	@ (8014368 <element_frame_validate+0x4c>)
 8014330:	4a0e      	ldr	r2, [pc, #56]	@ (801436c <element_frame_validate+0x50>)
 8014332:	691b      	ldr	r3, [r3, #16]
 8014334:	490e      	ldr	r1, [pc, #56]	@ (8014370 <element_frame_validate+0x54>)
 8014336:	2001      	movs	r0, #1
 8014338:	4798      	blx	r3
 801433a:	6820      	ldr	r0, [r4, #0]
 801433c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014340:	6883      	ldr	r3, [r0, #8]
 8014342:	4718      	bx	r3
 8014344:	4d08      	ldr	r5, [pc, #32]	@ (8014368 <element_frame_validate+0x4c>)
 8014346:	4a0b      	ldr	r2, [pc, #44]	@ (8014374 <element_frame_validate+0x58>)
 8014348:	692b      	ldr	r3, [r5, #16]
 801434a:	4909      	ldr	r1, [pc, #36]	@ (8014370 <element_frame_validate+0x54>)
 801434c:	4798      	blx	r3
 801434e:	69e3      	ldr	r3, [r4, #28]
 8014350:	b13b      	cbz	r3, 8014362 <element_frame_validate+0x46>
 8014352:	f7fd f8b1 	bl	80114b8 <acc_rss_integration_log_level>
 8014356:	b120      	cbz	r0, 8014362 <element_frame_validate+0x46>
 8014358:	692b      	ldr	r3, [r5, #16]
 801435a:	4a04      	ldr	r2, [pc, #16]	@ (801436c <element_frame_validate+0x50>)
 801435c:	4904      	ldr	r1, [pc, #16]	@ (8014370 <element_frame_validate+0x54>)
 801435e:	2001      	movs	r0, #1
 8014360:	4798      	blx	r3
 8014362:	2000      	movs	r0, #0
 8014364:	bd70      	pop	{r4, r5, r6, pc}
 8014366:	bf00      	nop
 8014368:	200008cc 	.word	0x200008cc
 801436c:	0801cc64 	.word	0x0801cc64
 8014370:	0801cc54 	.word	0x0801cc54
 8014374:	0801cc38 	.word	0x0801cc38

08014378 <acc_element_frame_init>:
 8014378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801437c:	460d      	mov	r5, r1
 801437e:	4b33      	ldr	r3, [pc, #204]	@ (801444c <acc_element_frame_init+0xd4>)
 8014380:	4a33      	ldr	r2, [pc, #204]	@ (8014450 <acc_element_frame_init+0xd8>)
 8014382:	4934      	ldr	r1, [pc, #208]	@ (8014454 <acc_element_frame_init+0xdc>)
 8014384:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 8014388:	896e      	ldrh	r6, [r5, #10]
 801438a:	6043      	str	r3, [r0, #4]
 801438c:	2300      	movs	r3, #0
 801438e:	e9c0 1202 	strd	r1, r2, [r0, #8]
 8014392:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
 8014396:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
 801439a:	f8a0 c038 	strh.w	ip, [r0, #56]	@ 0x38
 801439e:	8746      	strh	r6, [r0, #58]	@ 0x3a
 80143a0:	79aa      	ldrb	r2, [r5, #6]
 80143a2:	b087      	sub	sp, #28
 80143a4:	2a00      	cmp	r2, #0
 80143a6:	d04c      	beq.n	8014442 <acc_element_frame_init+0xca>
 80143a8:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8014464 <acc_element_frame_init+0xec>
 80143ac:	4607      	mov	r7, r0
 80143ae:	4699      	mov	r9, r3
 80143b0:	461c      	mov	r4, r3
 80143b2:	e007      	b.n	80143c4 <acc_element_frame_init+0x4c>
 80143b4:	79ab      	ldrb	r3, [r5, #6]
 80143b6:	fa5f f489 	uxtb.w	r4, r9
 80143ba:	42a3      	cmp	r3, r4
 80143bc:	d941      	bls.n	8014442 <acc_element_frame_init+0xca>
 80143be:	f8b5 c008 	ldrh.w	ip, [r5, #8]
 80143c2:	896e      	ldrh	r6, [r5, #10]
 80143c4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80143c8:	69e8      	ldr	r0, [r5, #28]
 80143ca:	f8ad 6012 	strh.w	r6, [sp, #18]
 80143ce:	eb05 0144 	add.w	r1, r5, r4, lsl #1
 80143d2:	eb07 0244 	add.w	r2, r7, r4, lsl #1
 80143d6:	898b      	ldrh	r3, [r1, #12]
 80143d8:	8a89      	ldrh	r1, [r1, #20]
 80143da:	f8a2 1044 	strh.w	r1, [r2, #68]	@ 0x44
 80143de:	8793      	strh	r3, [r2, #60]	@ 0x3c
 80143e0:	4473      	add	r3, lr
 80143e2:	eb00 1204 	add.w	r2, r0, r4, lsl #4
 80143e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80143ea:	4668      	mov	r0, sp
 80143ec:	682b      	ldr	r3, [r5, #0]
 80143ee:	9302      	str	r3, [sp, #8]
 80143f0:	f8cd 8000 	str.w	r8, [sp]
 80143f4:	9701      	str	r7, [sp, #4]
 80143f6:	f8ad c010 	strh.w	ip, [sp, #16]
 80143fa:	f8ad 100e 	strh.w	r1, [sp, #14]
 80143fe:	9205      	str	r2, [sp, #20]
 8014400:	f000 fa1a 	bl	8014838 <acc_pipeline_subsweep_assemble>
 8014404:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8014408:	f109 0901 	add.w	r9, r9, #1
 801440c:	4606      	mov	r6, r0
 801440e:	64d8      	str	r0, [r3, #76]	@ 0x4c
 8014410:	2800      	cmp	r0, #0
 8014412:	d1cf      	bne.n	80143b4 <acc_element_frame_init+0x3c>
 8014414:	4b10      	ldr	r3, [pc, #64]	@ (8014458 <acc_element_frame_init+0xe0>)
 8014416:	4a11      	ldr	r2, [pc, #68]	@ (801445c <acc_element_frame_init+0xe4>)
 8014418:	691b      	ldr	r3, [r3, #16]
 801441a:	4911      	ldr	r1, [pc, #68]	@ (8014460 <acc_element_frame_init+0xe8>)
 801441c:	4798      	blx	r3
 801441e:	b164      	cbz	r4, 801443a <acc_element_frame_init+0xc2>
 8014420:	3c01      	subs	r4, #1
 8014422:	b2e4      	uxtb	r4, r4
 8014424:	3413      	adds	r4, #19
 8014426:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801442a:	3748      	adds	r7, #72	@ 0x48
 801442c:	6820      	ldr	r0, [r4, #0]
 801442e:	f000 fa6b 	bl	8014908 <acc_pipeline_subsweep_disassemble>
 8014432:	f844 6904 	str.w	r6, [r4], #-4
 8014436:	42a7      	cmp	r7, r4
 8014438:	d1f8      	bne.n	801442c <acc_element_frame_init+0xb4>
 801443a:	2000      	movs	r0, #0
 801443c:	b007      	add	sp, #28
 801443e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014442:	2001      	movs	r0, #1
 8014444:	b007      	add	sp, #28
 8014446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801444a:	bf00      	nop
 801444c:	080142d5 	.word	0x080142d5
 8014450:	08014295 	.word	0x08014295
 8014454:	0801431d 	.word	0x0801431d
 8014458:	200008cc 	.word	0x200008cc
 801445c:	0801cc74 	.word	0x0801cc74
 8014460:	0801cc54 	.word	0x0801cc54
 8014464:	0801429d 	.word	0x0801429d

08014468 <acc_element_frame_release>:
 8014468:	b178      	cbz	r0, 801448a <acc_element_frame_release+0x22>
 801446a:	b570      	push	{r4, r5, r6, lr}
 801446c:	f100 044c 	add.w	r4, r0, #76	@ 0x4c
 8014470:	f100 055c 	add.w	r5, r0, #92	@ 0x5c
 8014474:	2600      	movs	r6, #0
 8014476:	f854 0b04 	ldr.w	r0, [r4], #4
 801447a:	b118      	cbz	r0, 8014484 <acc_element_frame_release+0x1c>
 801447c:	f000 fa44 	bl	8014908 <acc_pipeline_subsweep_disassemble>
 8014480:	f844 6c04 	str.w	r6, [r4, #-4]
 8014484:	42ac      	cmp	r4, r5
 8014486:	d1f6      	bne.n	8014476 <acc_element_frame_release+0xe>
 8014488:	bd70      	pop	{r4, r5, r6, pc}
 801448a:	4770      	bx	lr

0801448c <element_frame_aux_reset>:
 801448c:	6800      	ldr	r0, [r0, #0]
 801448e:	68c3      	ldr	r3, [r0, #12]
 8014490:	4718      	bx	r3
 8014492:	bf00      	nop

08014494 <element_frame_aux_validate>:
 8014494:	6800      	ldr	r0, [r0, #0]
 8014496:	6883      	ldr	r3, [r0, #8]
 8014498:	4718      	bx	r3
 801449a:	bf00      	nop

0801449c <element_frame_aux_event>:
 801449c:	b570      	push	{r4, r5, r6, lr}
 801449e:	6902      	ldr	r2, [r0, #16]
 80144a0:	f8b0 1042 	ldrh.w	r1, [r0, #66]	@ 0x42
 80144a4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80144a8:	4604      	mov	r4, r0
 80144aa:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 80144ae:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80144b0:	2b03      	cmp	r3, #3
 80144b2:	bf08      	it	eq
 80144b4:	f480 4000 	eoreq.w	r0, r0, #32768	@ 0x8000
 80144b8:	f7ff fe1a 	bl	80140f0 <acc_alg_temp>
 80144bc:	8028      	strh	r0, [r5, #0]
 80144be:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 80144c0:	6923      	ldr	r3, [r4, #16]
 80144c2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80144c6:	b14a      	cbz	r2, 80144dc <element_frame_aux_event+0x40>
 80144c8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 80144cc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80144d0:	2a01      	cmp	r2, #1
 80144d2:	d903      	bls.n	80144dc <element_frame_aux_event+0x40>
 80144d4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80144d6:	2101      	movs	r1, #1
 80144d8:	7011      	strb	r1, [r2, #0]
 80144da:	e002      	b.n	80144e2 <element_frame_aux_event+0x46>
 80144dc:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 80144de:	2100      	movs	r1, #0
 80144e0:	7011      	strb	r1, [r2, #0]
 80144e2:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 80144e4:	8fe0      	ldrh	r0, [r4, #62]	@ 0x3e
 80144e6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80144ea:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80144ee:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80144f0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80144f2:	882d      	ldrh	r5, [r5, #0]
 80144f4:	f1a2 0301 	sub.w	r3, r2, #1
 80144f8:	fab3 f383 	clz	r3, r3
 80144fc:	095b      	lsrs	r3, r3, #5
 80144fe:	700b      	strb	r3, [r1, #0]
 8014500:	f7ff fdf6 	bl	80140f0 <acc_alg_temp>
 8014504:	1a2d      	subs	r5, r5, r0
 8014506:	b22d      	sxth	r5, r5
 8014508:	2d00      	cmp	r5, #0
 801450a:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 801450e:	6820      	ldr	r0, [r4, #0]
 8014510:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014512:	bfb8      	it	lt
 8014514:	426d      	neglt	r5, r5
 8014516:	b22d      	sxth	r5, r5
 8014518:	42ab      	cmp	r3, r5
 801451a:	bfac      	ite	ge
 801451c:	2500      	movge	r5, #0
 801451e:	2501      	movlt	r5, #1
 8014520:	7015      	strb	r5, [r2, #0]
 8014522:	6843      	ldr	r3, [r0, #4]
 8014524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014528:	4718      	bx	r3
 801452a:	bf00      	nop

0801452c <acc_element_frame_aux_init>:
 801452c:	b430      	push	{r4, r5}
 801452e:	880b      	ldrh	r3, [r1, #0]
 8014530:	4d0c      	ldr	r5, [pc, #48]	@ (8014564 <acc_element_frame_aux_init+0x38>)
 8014532:	4c0d      	ldr	r4, [pc, #52]	@ (8014568 <acc_element_frame_aux_init+0x3c>)
 8014534:	4a0d      	ldr	r2, [pc, #52]	@ (801456c <acc_element_frame_aux_init+0x40>)
 8014536:	6045      	str	r5, [r0, #4]
 8014538:	884d      	ldrh	r5, [r1, #2]
 801453a:	6084      	str	r4, [r0, #8]
 801453c:	888c      	ldrh	r4, [r1, #4]
 801453e:	60c2      	str	r2, [r0, #12]
 8014540:	88ca      	ldrh	r2, [r1, #6]
 8014542:	8743      	strh	r3, [r0, #58]	@ 0x3a
 8014544:	890b      	ldrh	r3, [r1, #8]
 8014546:	f8a0 3042 	strh.w	r3, [r0, #66]	@ 0x42
 801454a:	8785      	strh	r5, [r0, #60]	@ 0x3c
 801454c:	87c4      	strh	r4, [r0, #62]	@ 0x3e
 801454e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8014552:	7b0b      	ldrb	r3, [r1, #12]
 8014554:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014558:	894b      	ldrh	r3, [r1, #10]
 801455a:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
 801455e:	bc30      	pop	{r4, r5}
 8014560:	2001      	movs	r0, #1
 8014562:	4770      	bx	lr
 8014564:	0801449d 	.word	0x0801449d
 8014568:	08014495 	.word	0x08014495
 801456c:	0801448d 	.word	0x0801448d

08014570 <acc_element_frame_aux_release>:
 8014570:	4770      	bx	lr
 8014572:	bf00      	nop

08014574 <sink_a121_callback_consume>:
 8014574:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	@ 0x3c
 8014578:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801457a:	6900      	ldr	r0, [r0, #16]
 801457c:	4718      	bx	r3
 801457e:	bf00      	nop

08014580 <sink_a121_callback_reset>:
 8014580:	4770      	bx	lr
 8014582:	bf00      	nop

08014584 <sink_a121_callback_validate>:
 8014584:	6983      	ldr	r3, [r0, #24]
 8014586:	b510      	push	{r4, lr}
 8014588:	4604      	mov	r4, r0
 801458a:	b1bb      	cbz	r3, 80145bc <sink_a121_callback_validate+0x38>
 801458c:	f7fc ff94 	bl	80114b8 <acc_rss_integration_log_level>
 8014590:	b948      	cbnz	r0, 80145a6 <sink_a121_callback_validate+0x22>
 8014592:	6963      	ldr	r3, [r4, #20]
 8014594:	b183      	cbz	r3, 80145b8 <sink_a121_callback_validate+0x34>
 8014596:	4b0b      	ldr	r3, [pc, #44]	@ (80145c4 <sink_a121_callback_validate+0x40>)
 8014598:	4a0b      	ldr	r2, [pc, #44]	@ (80145c8 <sink_a121_callback_validate+0x44>)
 801459a:	691b      	ldr	r3, [r3, #16]
 801459c:	490b      	ldr	r1, [pc, #44]	@ (80145cc <sink_a121_callback_validate+0x48>)
 801459e:	2000      	movs	r0, #0
 80145a0:	4798      	blx	r3
 80145a2:	2000      	movs	r0, #0
 80145a4:	bd10      	pop	{r4, pc}
 80145a6:	4b07      	ldr	r3, [pc, #28]	@ (80145c4 <sink_a121_callback_validate+0x40>)
 80145a8:	4a09      	ldr	r2, [pc, #36]	@ (80145d0 <sink_a121_callback_validate+0x4c>)
 80145aa:	691b      	ldr	r3, [r3, #16]
 80145ac:	4907      	ldr	r1, [pc, #28]	@ (80145cc <sink_a121_callback_validate+0x48>)
 80145ae:	2001      	movs	r0, #1
 80145b0:	4798      	blx	r3
 80145b2:	6963      	ldr	r3, [r4, #20]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d1ee      	bne.n	8014596 <sink_a121_callback_validate+0x12>
 80145b8:	2001      	movs	r0, #1
 80145ba:	bd10      	pop	{r4, pc}
 80145bc:	69c3      	ldr	r3, [r0, #28]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d1e4      	bne.n	801458c <sink_a121_callback_validate+0x8>
 80145c2:	e7e6      	b.n	8014592 <sink_a121_callback_validate+0xe>
 80145c4:	200008cc 	.word	0x200008cc
 80145c8:	0801ccd0 	.word	0x0801ccd0
 80145cc:	0801ccb4 	.word	0x0801ccb4
 80145d0:	0801cc98 	.word	0x0801cc98

080145d4 <acc_element_sink_a121_callback_init>:
 80145d4:	b410      	push	{r4}
 80145d6:	4a05      	ldr	r2, [pc, #20]	@ (80145ec <acc_element_sink_a121_callback_init+0x18>)
 80145d8:	4c05      	ldr	r4, [pc, #20]	@ (80145f0 <acc_element_sink_a121_callback_init+0x1c>)
 80145da:	4b06      	ldr	r3, [pc, #24]	@ (80145f4 <acc_element_sink_a121_callback_init+0x20>)
 80145dc:	6401      	str	r1, [r0, #64]	@ 0x40
 80145de:	e9c0 4201 	strd	r4, r2, [r0, #4]
 80145e2:	60c3      	str	r3, [r0, #12]
 80145e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80145e8:	4770      	bx	lr
 80145ea:	bf00      	nop
 80145ec:	08014585 	.word	0x08014585
 80145f0:	08014575 	.word	0x08014575
 80145f4:	08014581 	.word	0x08014581

080145f8 <patch_program_parameters>:
 80145f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145fc:	f5c2 661d 	rsb	r6, r2, #2512	@ 0x9d0
 8014600:	469a      	mov	sl, r3
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	360e      	adds	r6, #14
 8014606:	42b3      	cmp	r3, r6
 8014608:	b083      	sub	sp, #12
 801460a:	bf94      	ite	ls
 801460c:	b29e      	uxthls	r6, r3
 801460e:	b2b6      	uxthhi	r6, r6
 8014610:	4690      	mov	r8, r2
 8014612:	4605      	mov	r5, r0
 8014614:	4689      	mov	r9, r1
 8014616:	f000 f9a7 	bl	8014968 <acc_image_a121_r1a_meas_session_get>
 801461a:	ea4f 0358 	mov.w	r3, r8, lsr #1
 801461e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014622:	0872      	lsrs	r2, r6, #1
 8014624:	4649      	mov	r1, r9
 8014626:	f7ff fb5b 	bl	8013ce0 <acc_confprogram_copy>
 801462a:	f000 f9a5 	bl	8014978 <acc_cpd_a121_meas_session_parameters_patch_table_get>
 801462e:	4607      	mov	r7, r0
 8014630:	3d02      	subs	r5, #2
 8014632:	1e44      	subs	r4, r0, #1
 8014634:	37e1      	adds	r7, #225	@ 0xe1
 8014636:	f814 bf01 	ldrb.w	fp, [r4, #1]!
 801463a:	f000 f999 	bl	8014970 <acc_image_a121_r1a_meas_session_param_table_get>
 801463e:	f835 2f02 	ldrh.w	r2, [r5, #2]!
 8014642:	4603      	mov	r3, r0
 8014644:	e9cd b200 	strd	fp, r2, [sp]
 8014648:	4641      	mov	r1, r8
 801464a:	4632      	mov	r2, r6
 801464c:	4648      	mov	r0, r9
 801464e:	f7ff fa7d 	bl	8013b4c <acc_confprogram_patch_offset>
 8014652:	42bc      	cmp	r4, r7
 8014654:	d001      	beq.n	801465a <patch_program_parameters+0x62>
 8014656:	2800      	cmp	r0, #0
 8014658:	d1ed      	bne.n	8014636 <patch_program_parameters+0x3e>
 801465a:	f8ca 6000 	str.w	r6, [sl]
 801465e:	b003      	add	sp, #12
 8014660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014664 <get_parameter_patch_range.constprop.0>:
 8014664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014668:	b085      	sub	sp, #20
 801466a:	4606      	mov	r6, r0
 801466c:	460d      	mov	r5, r1
 801466e:	4693      	mov	fp, r2
 8014670:	469a      	mov	sl, r3
 8014672:	f000 f981 	bl	8014978 <acc_cpd_a121_meas_session_parameters_patch_table_get>
 8014676:	3e02      	subs	r6, #2
 8014678:	4604      	mov	r4, r0
 801467a:	3d02      	subs	r5, #2
 801467c:	f100 09e2 	add.w	r9, r0, #226	@ 0xe2
 8014680:	2700      	movs	r7, #0
 8014682:	f640 18de 	movw	r8, #2526	@ 0x9de
 8014686:	f836 2f02 	ldrh.w	r2, [r6, #2]!
 801468a:	f835 3f02 	ldrh.w	r3, [r5, #2]!
 801468e:	429a      	cmp	r2, r3
 8014690:	d013      	beq.n	80146ba <get_parameter_patch_range.constprop.0+0x56>
 8014692:	7821      	ldrb	r1, [r4, #0]
 8014694:	9101      	str	r1, [sp, #4]
 8014696:	f000 f96b 	bl	8014970 <acc_image_a121_r1a_meas_session_param_table_get>
 801469a:	f10d 030e 	add.w	r3, sp, #14
 801469e:	aa03      	add	r2, sp, #12
 80146a0:	9901      	ldr	r1, [sp, #4]
 80146a2:	f7ff fb2b 	bl	8013cfc <acc_confprogram_get_parameter_patch_range>
 80146a6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80146aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80146ae:	4590      	cmp	r8, r2
 80146b0:	bf28      	it	cs
 80146b2:	4690      	movcs	r8, r2
 80146b4:	429f      	cmp	r7, r3
 80146b6:	bf38      	it	cc
 80146b8:	461f      	movcc	r7, r3
 80146ba:	3401      	adds	r4, #1
 80146bc:	454c      	cmp	r4, r9
 80146be:	d1e2      	bne.n	8014686 <get_parameter_patch_range.constprop.0+0x22>
 80146c0:	f8ab 8000 	strh.w	r8, [fp]
 80146c4:	f8aa 7000 	strh.w	r7, [sl]
 80146c8:	b005      	add	sp, #20
 80146ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146ce:	bf00      	nop

080146d0 <acc_cpd_a121_meas_session_load_program>:
 80146d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146d4:	4688      	mov	r8, r1
 80146d6:	b084      	sub	sp, #16
 80146d8:	4607      	mov	r7, r0
 80146da:	4611      	mov	r1, r2
 80146dc:	4640      	mov	r0, r8
 80146de:	4699      	mov	r9, r3
 80146e0:	2400      	movs	r4, #0
 80146e2:	ab02      	add	r3, sp, #8
 80146e4:	aa01      	add	r2, sp, #4
 80146e6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80146ea:	f7fd fb83 	bl	8011df4 <acc_sensor_a121_prepare_load_confmem>
 80146ee:	4638      	mov	r0, r7
 80146f0:	f7fd fc2a 	bl	8011f48 <acc_sensor_protocol_a121_prepare_load>
 80146f4:	b1d8      	cbz	r0, 801472e <acc_cpd_a121_meas_session_load_program+0x5e>
 80146f6:	9d02      	ldr	r5, [sp, #8]
 80146f8:	f640 1add 	movw	sl, #2525	@ 0x9dd
 80146fc:	e000      	b.n	8014700 <acc_cpd_a121_meas_session_load_program+0x30>
 80146fe:	b1b6      	cbz	r6, 801472e <acc_cpd_a121_meas_session_load_program+0x5e>
 8014700:	4622      	mov	r2, r4
 8014702:	9901      	ldr	r1, [sp, #4]
 8014704:	9503      	str	r5, [sp, #12]
 8014706:	ab03      	add	r3, sp, #12
 8014708:	4648      	mov	r0, r9
 801470a:	f7ff ff75 	bl	80145f8 <patch_program_parameters>
 801470e:	0861      	lsrs	r1, r4, #1
 8014710:	4606      	mov	r6, r0
 8014712:	9b03      	ldr	r3, [sp, #12]
 8014714:	4638      	mov	r0, r7
 8014716:	4642      	mov	r2, r8
 8014718:	f7fd fb84 	bl	8011e24 <acc_sensor_a121_load_confmem>
 801471c:	9d02      	ldr	r5, [sp, #8]
 801471e:	442c      	add	r4, r5
 8014720:	b2a4      	uxth	r4, r4
 8014722:	4554      	cmp	r4, sl
 8014724:	4630      	mov	r0, r6
 8014726:	d9ea      	bls.n	80146fe <acc_cpd_a121_meas_session_load_program+0x2e>
 8014728:	b004      	add	sp, #16
 801472a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801472e:	2000      	movs	r0, #0
 8014730:	b004      	add	sp, #16
 8014732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014736:	bf00      	nop

08014738 <acc_cpd_a121_meas_session_run_program>:
 8014738:	2115      	movs	r1, #21
 801473a:	f7fd bc5b 	b.w	8011ff4 <acc_sensor_protocol_a121_run_program>
 801473e:	bf00      	nop

08014740 <acc_cpd_a121_meas_session_is_patch_needed>:
 8014740:	b500      	push	{lr}
 8014742:	b083      	sub	sp, #12
 8014744:	f10d 0306 	add.w	r3, sp, #6
 8014748:	aa01      	add	r2, sp, #4
 801474a:	f7ff ff8b 	bl	8014664 <get_parameter_patch_range.constprop.0>
 801474e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014752:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014756:	4298      	cmp	r0, r3
 8014758:	bf34      	ite	cc
 801475a:	2000      	movcc	r0, #0
 801475c:	2001      	movcs	r0, #1
 801475e:	b003      	add	sp, #12
 8014760:	f85d fb04 	ldr.w	pc, [sp], #4

08014764 <acc_cpd_a121_meas_session_update_program>:
 8014764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014768:	b085      	sub	sp, #20
 801476a:	468a      	mov	sl, r1
 801476c:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 8014770:	4693      	mov	fp, r2
 8014772:	461c      	mov	r4, r3
 8014774:	4607      	mov	r7, r0
 8014776:	f7fd fc29 	bl	8011fcc <acc_sensor_protocol_a121_is_ready_to_update>
 801477a:	b198      	cbz	r0, 80147a4 <acc_cpd_a121_meas_session_update_program+0x40>
 801477c:	4620      	mov	r0, r4
 801477e:	ab03      	add	r3, sp, #12
 8014780:	aa02      	add	r2, sp, #8
 8014782:	4649      	mov	r1, r9
 8014784:	f7ff ff6e 	bl	8014664 <get_parameter_patch_range.constprop.0>
 8014788:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 801478c:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 8014790:	4544      	cmp	r4, r8
 8014792:	d91c      	bls.n	80147ce <acc_cpd_a121_meas_session_update_program+0x6a>
 8014794:	2501      	movs	r5, #1
 8014796:	4638      	mov	r0, r7
 8014798:	f7fd fdfa 	bl	8012390 <acc_sensor_protocol_a121_reconfigure>
 801479c:	4628      	mov	r0, r5
 801479e:	b005      	add	sp, #20
 80147a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147a4:	4638      	mov	r0, r7
 80147a6:	f7fd fddd 	bl	8012364 <acc_sensor_protocol_a121_is_hibernate>
 80147aa:	4605      	mov	r5, r0
 80147ac:	2800      	cmp	r0, #0
 80147ae:	d1e5      	bne.n	801477c <acc_cpd_a121_meas_session_update_program+0x18>
 80147b0:	f7fc fe82 	bl	80114b8 <acc_rss_integration_log_level>
 80147b4:	2800      	cmp	r0, #0
 80147b6:	d0f1      	beq.n	801479c <acc_cpd_a121_meas_session_update_program+0x38>
 80147b8:	4b18      	ldr	r3, [pc, #96]	@ (801481c <acc_cpd_a121_meas_session_update_program+0xb8>)
 80147ba:	4a19      	ldr	r2, [pc, #100]	@ (8014820 <acc_cpd_a121_meas_session_update_program+0xbc>)
 80147bc:	691c      	ldr	r4, [r3, #16]
 80147be:	4919      	ldr	r1, [pc, #100]	@ (8014824 <acc_cpd_a121_meas_session_update_program+0xc0>)
 80147c0:	463b      	mov	r3, r7
 80147c2:	2001      	movs	r0, #1
 80147c4:	47a0      	blx	r4
 80147c6:	4628      	mov	r0, r5
 80147c8:	b005      	add	sp, #20
 80147ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ce:	ab02      	add	r3, sp, #8
 80147d0:	f108 0602 	add.w	r6, r8, #2
 80147d4:	4659      	mov	r1, fp
 80147d6:	aa01      	add	r2, sp, #4
 80147d8:	4650      	mov	r0, sl
 80147da:	f7fd fb0b 	bl	8011df4 <acc_sensor_a121_prepare_load_confmem>
 80147de:	1b36      	subs	r6, r6, r4
 80147e0:	9b02      	ldr	r3, [sp, #8]
 80147e2:	b2b6      	uxth	r6, r6
 80147e4:	429e      	cmp	r6, r3
 80147e6:	bf28      	it	cs
 80147e8:	461e      	movcs	r6, r3
 80147ea:	9602      	str	r6, [sp, #8]
 80147ec:	e004      	b.n	80147f8 <acc_cpd_a121_meas_session_update_program+0x94>
 80147ee:	9e02      	ldr	r6, [sp, #8]
 80147f0:	4434      	add	r4, r6
 80147f2:	b2a4      	uxth	r4, r4
 80147f4:	4544      	cmp	r4, r8
 80147f6:	d8ce      	bhi.n	8014796 <acc_cpd_a121_meas_session_update_program+0x32>
 80147f8:	9901      	ldr	r1, [sp, #4]
 80147fa:	9603      	str	r6, [sp, #12]
 80147fc:	ab03      	add	r3, sp, #12
 80147fe:	4622      	mov	r2, r4
 8014800:	4648      	mov	r0, r9
 8014802:	f7ff fef9 	bl	80145f8 <patch_program_parameters>
 8014806:	4605      	mov	r5, r0
 8014808:	2800      	cmp	r0, #0
 801480a:	d0f0      	beq.n	80147ee <acc_cpd_a121_meas_session_update_program+0x8a>
 801480c:	9b03      	ldr	r3, [sp, #12]
 801480e:	4652      	mov	r2, sl
 8014810:	0861      	lsrs	r1, r4, #1
 8014812:	4638      	mov	r0, r7
 8014814:	f7fd fb06 	bl	8011e24 <acc_sensor_a121_load_confmem>
 8014818:	e7e9      	b.n	80147ee <acc_cpd_a121_meas_session_update_program+0x8a>
 801481a:	bf00      	nop
 801481c:	200008cc 	.word	0x200008cc
 8014820:	0801ccf8 	.word	0x0801ccf8
 8014824:	0801cd1c 	.word	0x0801cd1c

08014828 <acc_cpd_a121_meas_session_transfer_data>:
 8014828:	b410      	push	{r4}
 801482a:	460c      	mov	r4, r1
 801482c:	4611      	mov	r1, r2
 801482e:	4622      	mov	r2, r4
 8014830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014834:	f7fd bb20 	b.w	8011e78 <acc_sensor_a121_buffer_processed_read>

08014838 <acc_pipeline_subsweep_assemble>:
 8014838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801483a:	4a30      	ldr	r2, [pc, #192]	@ (80148fc <acc_pipeline_subsweep_assemble+0xc4>)
 801483c:	b085      	sub	sp, #20
 801483e:	4605      	mov	r5, r0
 8014840:	2333      	movs	r3, #51	@ 0x33
 8014842:	21e8      	movs	r1, #232	@ 0xe8
 8014844:	2001      	movs	r0, #1
 8014846:	f7fc fe07 	bl	8011458 <acc_rss_integration_mem_calloc_debug>
 801484a:	4604      	mov	r4, r0
 801484c:	2800      	cmp	r0, #0
 801484e:	d042      	beq.n	80148d6 <acc_pipeline_subsweep_assemble+0x9e>
 8014850:	89ab      	ldrh	r3, [r5, #12]
 8014852:	68a9      	ldr	r1, [r5, #8]
 8014854:	8a2e      	ldrh	r6, [r5, #16]
 8014856:	8a6a      	ldrh	r2, [r5, #18]
 8014858:	f8ad 3004 	strh.w	r3, [sp, #4]
 801485c:	f100 073c 	add.w	r7, r0, #60	@ 0x3c
 8014860:	696b      	ldr	r3, [r5, #20]
 8014862:	9100      	str	r1, [sp, #0]
 8014864:	f8ad 6006 	strh.w	r6, [sp, #6]
 8014868:	4669      	mov	r1, sp
 801486a:	f104 0694 	add.w	r6, r4, #148	@ 0x94
 801486e:	4638      	mov	r0, r7
 8014870:	f8ad 2008 	strh.w	r2, [sp, #8]
 8014874:	9303      	str	r3, [sp, #12]
 8014876:	f000 f975 	bl	8014b64 <acc_element_phase_enhancement_init>
 801487a:	6829      	ldr	r1, [r5, #0]
 801487c:	4630      	mov	r0, r6
 801487e:	f7ff fea9 	bl	80145d4 <acc_element_sink_a121_callback_init>
 8014882:	89eb      	ldrh	r3, [r5, #14]
 8014884:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 8014888:	6868      	ldr	r0, [r5, #4]
 801488a:	f8c4 00d0 	str.w	r0, [r4, #208]	@ 0xd0
 801488e:	005b      	lsls	r3, r3, #1
 8014890:	2200      	movs	r2, #0
 8014892:	f104 05e0 	add.w	r5, r4, #224	@ 0xe0
 8014896:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 801489a:	f104 03e4 	add.w	r3, r4, #228	@ 0xe4
 801489e:	f8a4 c092 	strh.w	ip, [r4, #146]	@ 0x92
 80148a2:	f8a4 c0d8 	strh.w	ip, [r4, #216]	@ 0xd8
 80148a6:	8722      	strh	r2, [r4, #56]	@ 0x38
 80148a8:	f8a4 2090 	strh.w	r2, [r4, #144]	@ 0x90
 80148ac:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 80148b0:	4639      	mov	r1, r7
 80148b2:	6265      	str	r5, [r4, #36]	@ 0x24
 80148b4:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 80148b8:	4620      	mov	r0, r4
 80148ba:	f7ff fa51 	bl	8013d60 <acc_element_connect>
 80148be:	4631      	mov	r1, r6
 80148c0:	4638      	mov	r0, r7
 80148c2:	f7ff fa4d 	bl	8013d60 <acc_element_connect>
 80148c6:	6820      	ldr	r0, [r4, #0]
 80148c8:	6883      	ldr	r3, [r0, #8]
 80148ca:	4798      	blx	r3
 80148cc:	4605      	mov	r5, r0
 80148ce:	b128      	cbz	r0, 80148dc <acc_pipeline_subsweep_assemble+0xa4>
 80148d0:	6820      	ldr	r0, [r4, #0]
 80148d2:	68c3      	ldr	r3, [r0, #12]
 80148d4:	4798      	blx	r3
 80148d6:	4620      	mov	r0, r4
 80148d8:	b005      	add	sp, #20
 80148da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148dc:	4b08      	ldr	r3, [pc, #32]	@ (8014900 <acc_pipeline_subsweep_assemble+0xc8>)
 80148de:	4a09      	ldr	r2, [pc, #36]	@ (8014904 <acc_pipeline_subsweep_assemble+0xcc>)
 80148e0:	691b      	ldr	r3, [r3, #16]
 80148e2:	4906      	ldr	r1, [pc, #24]	@ (80148fc <acc_pipeline_subsweep_assemble+0xc4>)
 80148e4:	4798      	blx	r3
 80148e6:	4638      	mov	r0, r7
 80148e8:	f000 f96e 	bl	8014bc8 <acc_element_phase_enhancement_release>
 80148ec:	4620      	mov	r0, r4
 80148ee:	f7fc fdcf 	bl	8011490 <acc_rss_integration_mem_free>
 80148f2:	462c      	mov	r4, r5
 80148f4:	4620      	mov	r0, r4
 80148f6:	b005      	add	sp, #20
 80148f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148fa:	bf00      	nop
 80148fc:	0801cd34 	.word	0x0801cd34
 8014900:	200008cc 	.word	0x200008cc
 8014904:	0801aa9c 	.word	0x0801aa9c

08014908 <acc_pipeline_subsweep_disassemble>:
 8014908:	b148      	cbz	r0, 801491e <acc_pipeline_subsweep_disassemble+0x16>
 801490a:	b510      	push	{r4, lr}
 801490c:	4604      	mov	r4, r0
 801490e:	303c      	adds	r0, #60	@ 0x3c
 8014910:	f000 f95a 	bl	8014bc8 <acc_element_phase_enhancement_release>
 8014914:	4620      	mov	r0, r4
 8014916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801491a:	f7fc bdb9 	b.w	8011490 <acc_rss_integration_mem_free>
 801491e:	4770      	bx	lr

08014920 <acc_pipeline_subsweep_prepare_memory>:
 8014920:	b430      	push	{r4, r5}
 8014922:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 8014926:	f8b0 50d8 	ldrh.w	r5, [r0, #216]	@ 0xd8
 801492a:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801492c:	f8b0 3092 	ldrh.w	r3, [r0, #146]	@ 0x92
 8014930:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 8014934:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8014938:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801493c:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8014940:	6144      	str	r4, [r0, #20]
 8014942:	e9c0 2313 	strd	r2, r3, [r0, #76]	@ 0x4c
 8014946:	bc30      	pop	{r4, r5}
 8014948:	f8c0 10a4 	str.w	r1, [r0, #164]	@ 0xa4
 801494c:	4770      	bx	lr
 801494e:	bf00      	nop

08014950 <acc_pipeline_subsweep_produce>:
 8014950:	6803      	ldr	r3, [r0, #0]
 8014952:	f8d0 20dc 	ldr.w	r2, [r0, #220]	@ 0xdc
 8014956:	f8c0 20e0 	str.w	r2, [r0, #224]	@ 0xe0
 801495a:	2100      	movs	r1, #0
 801495c:	f880 10e4 	strb.w	r1, [r0, #228]	@ 0xe4
 8014960:	685a      	ldr	r2, [r3, #4]
 8014962:	4618      	mov	r0, r3
 8014964:	4710      	bx	r2
 8014966:	bf00      	nop

08014968 <acc_image_a121_r1a_meas_session_get>:
 8014968:	4800      	ldr	r0, [pc, #0]	@ (801496c <acc_image_a121_r1a_meas_session_get+0x4>)
 801496a:	4770      	bx	lr
 801496c:	0801cd48 	.word	0x0801cd48

08014970 <acc_image_a121_r1a_meas_session_param_table_get>:
 8014970:	4800      	ldr	r0, [pc, #0]	@ (8014974 <acc_image_a121_r1a_meas_session_param_table_get+0x4>)
 8014972:	4770      	bx	lr
 8014974:	0801e104 	.word	0x0801e104

08014978 <acc_cpd_a121_meas_session_parameters_patch_table_get>:
 8014978:	4800      	ldr	r0, [pc, #0]	@ (801497c <acc_cpd_a121_meas_session_parameters_patch_table_get+0x4>)
 801497a:	4770      	bx	lr
 801497c:	0801eeac 	.word	0x0801eeac

08014980 <element_phase_enhancement_reset>:
 8014980:	6800      	ldr	r0, [r0, #0]
 8014982:	68c3      	ldr	r3, [r0, #12]
 8014984:	4718      	bx	r3
 8014986:	bf00      	nop

08014988 <element_phase_enhancement_validate>:
 8014988:	6800      	ldr	r0, [r0, #0]
 801498a:	6883      	ldr	r3, [r0, #8]
 801498c:	4718      	bx	r3
 801498e:	bf00      	nop

08014990 <element_phase_enhancement_event>:
 8014990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014994:	ed2d 8b04 	vpush	{d8-d9}
 8014998:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801499c:	b089      	sub	sp, #36	@ 0x24
 801499e:	4683      	mov	fp, r0
 80149a0:	9303      	str	r3, [sp, #12]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	f000 80d1 	beq.w	8014b4a <element_phase_enhancement_event+0x1ba>
 80149a8:	8fc2      	ldrh	r2, [r0, #62]	@ 0x3e
 80149aa:	6904      	ldr	r4, [r0, #16]
 80149ac:	8f81      	ldrh	r1, [r0, #60]	@ 0x3c
 80149ae:	f8b0 304c 	ldrh.w	r3, [r0, #76]	@ 0x4c
 80149b2:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 80149b4:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 80149b8:	9006      	str	r0, [sp, #24]
 80149ba:	0052      	lsls	r2, r2, #1
 80149bc:	9201      	str	r2, [sp, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	f000 80c3 	beq.w	8014b4a <element_phase_enhancement_event+0x1ba>
 80149c4:	2300      	movs	r3, #0
 80149c6:	010a      	lsls	r2, r1, #4
 80149c8:	eddf 8a64 	vldr	s17, [pc, #400]	@ 8014b5c <element_phase_enhancement_event+0x1cc>
 80149cc:	9302      	str	r3, [sp, #8]
 80149ce:	9207      	str	r2, [sp, #28]
 80149d0:	469a      	mov	sl, r3
 80149d2:	e9db 3211 	ldrd	r3, r2, [fp, #68]	@ 0x44
 80149d6:	f8bb 604e 	ldrh.w	r6, [fp, #78]	@ 0x4e
 80149da:	4413      	add	r3, r2
 80149dc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80149e0:	fb02 3606 	mla	r6, r2, r6, r3
 80149e4:	2118      	movs	r1, #24
 80149e6:	4630      	mov	r0, r6
 80149e8:	f7fe f934 	bl	8012c54 <acc_translation_a121_point_in_coarse>
 80149ec:	2118      	movs	r1, #24
 80149ee:	4605      	mov	r5, r0
 80149f0:	4630      	mov	r0, r6
 80149f2:	f7fe f921 	bl	8012c38 <acc_translation_a121_point_to_coarse>
 80149f6:	9b07      	ldr	r3, [sp, #28]
 80149f8:	0400      	lsls	r0, r0, #16
 80149fa:	fb80 0103 	smull	r0, r1, r0, r3
 80149fe:	2800      	cmp	r0, #0
 8014a00:	f171 0300 	sbcs.w	r3, r1, #0
 8014a04:	da04      	bge.n	8014a10 <element_phase_enhancement_event+0x80>
 8014a06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014a0a:	18c0      	adds	r0, r0, r3
 8014a0c:	f141 0100 	adc.w	r1, r1, #0
 8014a10:	9b06      	ldr	r3, [sp, #24]
 8014a12:	441d      	add	r5, r3
 8014a14:	0c03      	lsrs	r3, r0, #16
 8014a16:	f934 2015 	ldrsh.w	r2, [r4, r5, lsl #1]
 8014a1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8014a1e:	eba3 1302 	sub.w	r3, r3, r2, lsl #4
 8014a22:	ee07 3a90 	vmov	s15, r3
 8014a26:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8014a2a:	ee29 9a28 	vmul.f32	s18, s18, s17
 8014a2e:	eeb0 0a49 	vmov.f32	s0, s18
 8014a32:	f003 f985 	bl	8017d40 <cosf>
 8014a36:	eeb0 8a40 	vmov.f32	s16, s0
 8014a3a:	eeb0 0a49 	vmov.f32	s0, s18
 8014a3e:	f003 f9cb 	bl	8017dd8 <sinf>
 8014a42:	f8bb 9040 	ldrh.w	r9, [fp, #64]	@ 0x40
 8014a46:	f1b9 0f00 	cmp.w	r9, #0
 8014a4a:	d073      	beq.n	8014b34 <element_phase_enhancement_event+0x1a4>
 8014a4c:	f8db 3050 	ldr.w	r3, [fp, #80]	@ 0x50
 8014a50:	f8bb 2042 	ldrh.w	r2, [fp, #66]	@ 0x42
 8014a54:	f8cd b014 	str.w	fp, [sp, #20]
 8014a58:	2000      	movs	r0, #0
 8014a5a:	f893 8000 	ldrb.w	r8, [r3]
 8014a5e:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8014b60 <element_phase_enhancement_event+0x1d0>
 8014a62:	9304      	str	r3, [sp, #16]
 8014a64:	4605      	mov	r5, r0
 8014a66:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8014a6a:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 8014a6e:	4693      	mov	fp, r2
 8014a70:	e009      	b.n	8014a86 <element_phase_enhancement_event+0xf6>
 8014a72:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014a76:	52e2      	strh	r2, [r4, r3]
 8014a78:	3501      	adds	r5, #1
 8014a7a:	fa1f fe85 	uxth.w	lr, r5
 8014a7e:	45f1      	cmp	r9, lr
 8014a80:	4458      	add	r0, fp
 8014a82:	8071      	strh	r1, [r6, #2]
 8014a84:	d952      	bls.n	8014b2c <element_phase_enhancement_event+0x19c>
 8014a86:	9a01      	ldr	r2, [sp, #4]
 8014a88:	eb0a 0350 	add.w	r3, sl, r0, lsr #1
 8014a8c:	b29b      	uxth	r3, r3
 8014a8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014a92:	18e6      	adds	r6, r4, r3
 8014a94:	5ee2      	ldrsh	r2, [r4, r3]
 8014a96:	ee07 2a90 	vmov	s15, r2
 8014a9a:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8014a9e:	ee06 2a90 	vmov	s13, r2
 8014aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014aa6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014aaa:	ee27 7a88 	vmul.f32	s14, s15, s16
 8014aae:	ee66 5a80 	vmul.f32	s11, s13, s0
 8014ab2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014ab6:	ee66 6a88 	vmul.f32	s13, s13, s16
 8014aba:	ee37 7a65 	vsub.f32	s14, s14, s11
 8014abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014ac2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014ace:	bf4c      	ite	mi
 8014ad0:	ee37 7a46 	vsubmi.f32	s14, s14, s12
 8014ad4:	ee37 7a06 	vaddpl.f32	s14, s14, s12
 8014ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014adc:	bf4c      	ite	mi
 8014ade:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
 8014ae2:	ee77 7a86 	vaddpl.f32	s15, s15, s12
 8014ae6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014aee:	ee17 ea10 	vmov	lr, s14
 8014af2:	ee17 1a90 	vmov	r1, s15
 8014af6:	ee17 2a10 	vmov	r2, s14
 8014afa:	45e6      	cmp	lr, ip
 8014afc:	bfb8      	it	lt
 8014afe:	4662      	movlt	r2, ip
 8014b00:	4561      	cmp	r1, ip
 8014b02:	bfb8      	it	lt
 8014b04:	4661      	movlt	r1, ip
 8014b06:	42ba      	cmp	r2, r7
 8014b08:	bfa8      	it	ge
 8014b0a:	463a      	movge	r2, r7
 8014b0c:	42b9      	cmp	r1, r7
 8014b0e:	bfa8      	it	ge
 8014b10:	4639      	movge	r1, r7
 8014b12:	f1b8 0f00 	cmp.w	r8, #0
 8014b16:	d1ae      	bne.n	8014a76 <element_phase_enhancement_event+0xe6>
 8014b18:	4596      	cmp	lr, r2
 8014b1a:	d1aa      	bne.n	8014a72 <element_phase_enhancement_event+0xe2>
 8014b1c:	ee17 ea90 	vmov	lr, s15
 8014b20:	ebbe 0801 	subs.w	r8, lr, r1
 8014b24:	bf18      	it	ne
 8014b26:	f04f 0801 	movne.w	r8, #1
 8014b2a:	e7a4      	b.n	8014a76 <element_phase_enhancement_event+0xe6>
 8014b2c:	e9dd 3b04 	ldrd	r3, fp, [sp, #16]
 8014b30:	f883 8000 	strb.w	r8, [r3]
 8014b34:	9b02      	ldr	r3, [sp, #8]
 8014b36:	3301      	adds	r3, #1
 8014b38:	461a      	mov	r2, r3
 8014b3a:	9302      	str	r3, [sp, #8]
 8014b3c:	f8bb 304c 	ldrh.w	r3, [fp, #76]	@ 0x4c
 8014b40:	fa1f fa82 	uxth.w	sl, r2
 8014b44:	4553      	cmp	r3, sl
 8014b46:	f63f af44 	bhi.w	80149d2 <element_phase_enhancement_event+0x42>
 8014b4a:	f8db 0000 	ldr.w	r0, [fp]
 8014b4e:	6843      	ldr	r3, [r0, #4]
 8014b50:	b009      	add	sp, #36	@ 0x24
 8014b52:	ecbd 8b04 	vpop	{d8-d9}
 8014b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b5a:	4718      	bx	r3
 8014b5c:	37800000 	.word	0x37800000
 8014b60:	ffff8000 	.word	0xffff8000

08014b64 <acc_element_phase_enhancement_init>:
 8014b64:	b570      	push	{r4, r5, r6, lr}
 8014b66:	4604      	mov	r4, r0
 8014b68:	460d      	mov	r5, r1
 8014b6a:	4814      	ldr	r0, [pc, #80]	@ (8014bbc <acc_element_phase_enhancement_init+0x58>)
 8014b6c:	4914      	ldr	r1, [pc, #80]	@ (8014bc0 <acc_element_phase_enhancement_init+0x5c>)
 8014b6e:	68eb      	ldr	r3, [r5, #12]
 8014b70:	4a14      	ldr	r2, [pc, #80]	@ (8014bc4 <acc_element_phase_enhancement_init+0x60>)
 8014b72:	60e2      	str	r2, [r4, #12]
 8014b74:	e9c4 0101 	strd	r0, r1, [r4, #4]
 8014b78:	b082      	sub	sp, #8
 8014b7a:	a901      	add	r1, sp, #4
 8014b7c:	7bd8      	ldrb	r0, [r3, #15]
 8014b7e:	f7fd fc97 	bl	80124b0 <acc_translation_a121_profile_to_start_point_offset>
 8014b82:	68eb      	ldr	r3, [r5, #12]
 8014b84:	882a      	ldrh	r2, [r5, #0]
 8014b86:	8869      	ldrh	r1, [r5, #2]
 8014b88:	8762      	strh	r2, [r4, #58]	@ 0x3a
 8014b8a:	88aa      	ldrh	r2, [r5, #4]
 8014b8c:	88ee      	ldrh	r6, [r5, #6]
 8014b8e:	87a1      	strh	r1, [r4, #60]	@ 0x3c
 8014b90:	8929      	ldrh	r1, [r5, #8]
 8014b92:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 8014b94:	7b1a      	ldrb	r2, [r3, #12]
 8014b96:	681d      	ldr	r5, [r3, #0]
 8014b98:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
 8014b9c:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 8014ba0:	9901      	ldr	r1, [sp, #4]
 8014ba2:	88da      	ldrh	r2, [r3, #6]
 8014ba4:	889b      	ldrh	r3, [r3, #4]
 8014ba6:	f8a4 6040 	strh.w	r6, [r4, #64]	@ 0x40
 8014baa:	e9c4 5111 	strd	r5, r1, [r4, #68]	@ 0x44
 8014bae:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
 8014bb2:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
 8014bb6:	b002      	add	sp, #8
 8014bb8:	bd70      	pop	{r4, r5, r6, pc}
 8014bba:	bf00      	nop
 8014bbc:	08014991 	.word	0x08014991
 8014bc0:	08014989 	.word	0x08014989
 8014bc4:	08014981 	.word	0x08014981

08014bc8 <acc_element_phase_enhancement_release>:
 8014bc8:	4770      	bx	lr
 8014bca:	bf00      	nop

08014bcc <_calloc_r>:
 8014bcc:	b570      	push	{r4, r5, r6, lr}
 8014bce:	fba1 5402 	umull	r5, r4, r1, r2
 8014bd2:	b93c      	cbnz	r4, 8014be4 <_calloc_r+0x18>
 8014bd4:	4629      	mov	r1, r5
 8014bd6:	f000 f83f 	bl	8014c58 <_malloc_r>
 8014bda:	4606      	mov	r6, r0
 8014bdc:	b928      	cbnz	r0, 8014bea <_calloc_r+0x1e>
 8014bde:	2600      	movs	r6, #0
 8014be0:	4630      	mov	r0, r6
 8014be2:	bd70      	pop	{r4, r5, r6, pc}
 8014be4:	220c      	movs	r2, #12
 8014be6:	6002      	str	r2, [r0, #0]
 8014be8:	e7f9      	b.n	8014bde <_calloc_r+0x12>
 8014bea:	462a      	mov	r2, r5
 8014bec:	4621      	mov	r1, r4
 8014bee:	f000 ff87 	bl	8015b00 <memset>
 8014bf2:	e7f5      	b.n	8014be0 <_calloc_r+0x14>

08014bf4 <malloc>:
 8014bf4:	4b02      	ldr	r3, [pc, #8]	@ (8014c00 <malloc+0xc>)
 8014bf6:	4601      	mov	r1, r0
 8014bf8:	6818      	ldr	r0, [r3, #0]
 8014bfa:	f000 b82d 	b.w	8014c58 <_malloc_r>
 8014bfe:	bf00      	nop
 8014c00:	200001b8 	.word	0x200001b8

08014c04 <free>:
 8014c04:	4b02      	ldr	r3, [pc, #8]	@ (8014c10 <free+0xc>)
 8014c06:	4601      	mov	r1, r0
 8014c08:	6818      	ldr	r0, [r3, #0]
 8014c0a:	f001 be6d 	b.w	80168e8 <_free_r>
 8014c0e:	bf00      	nop
 8014c10:	200001b8 	.word	0x200001b8

08014c14 <sbrk_aligned>:
 8014c14:	b570      	push	{r4, r5, r6, lr}
 8014c16:	4e0f      	ldr	r6, [pc, #60]	@ (8014c54 <sbrk_aligned+0x40>)
 8014c18:	460c      	mov	r4, r1
 8014c1a:	6831      	ldr	r1, [r6, #0]
 8014c1c:	4605      	mov	r5, r0
 8014c1e:	b911      	cbnz	r1, 8014c26 <sbrk_aligned+0x12>
 8014c20:	f000 ffae 	bl	8015b80 <_sbrk_r>
 8014c24:	6030      	str	r0, [r6, #0]
 8014c26:	4621      	mov	r1, r4
 8014c28:	4628      	mov	r0, r5
 8014c2a:	f000 ffa9 	bl	8015b80 <_sbrk_r>
 8014c2e:	1c43      	adds	r3, r0, #1
 8014c30:	d103      	bne.n	8014c3a <sbrk_aligned+0x26>
 8014c32:	f04f 34ff 	mov.w	r4, #4294967295
 8014c36:	4620      	mov	r0, r4
 8014c38:	bd70      	pop	{r4, r5, r6, pc}
 8014c3a:	1cc4      	adds	r4, r0, #3
 8014c3c:	f024 0403 	bic.w	r4, r4, #3
 8014c40:	42a0      	cmp	r0, r4
 8014c42:	d0f8      	beq.n	8014c36 <sbrk_aligned+0x22>
 8014c44:	1a21      	subs	r1, r4, r0
 8014c46:	4628      	mov	r0, r5
 8014c48:	f000 ff9a 	bl	8015b80 <_sbrk_r>
 8014c4c:	3001      	adds	r0, #1
 8014c4e:	d1f2      	bne.n	8014c36 <sbrk_aligned+0x22>
 8014c50:	e7ef      	b.n	8014c32 <sbrk_aligned+0x1e>
 8014c52:	bf00      	nop
 8014c54:	20000780 	.word	0x20000780

08014c58 <_malloc_r>:
 8014c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c5c:	1ccd      	adds	r5, r1, #3
 8014c5e:	f025 0503 	bic.w	r5, r5, #3
 8014c62:	3508      	adds	r5, #8
 8014c64:	2d0c      	cmp	r5, #12
 8014c66:	bf38      	it	cc
 8014c68:	250c      	movcc	r5, #12
 8014c6a:	2d00      	cmp	r5, #0
 8014c6c:	4606      	mov	r6, r0
 8014c6e:	db01      	blt.n	8014c74 <_malloc_r+0x1c>
 8014c70:	42a9      	cmp	r1, r5
 8014c72:	d904      	bls.n	8014c7e <_malloc_r+0x26>
 8014c74:	230c      	movs	r3, #12
 8014c76:	6033      	str	r3, [r6, #0]
 8014c78:	2000      	movs	r0, #0
 8014c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014d54 <_malloc_r+0xfc>
 8014c82:	f000 f869 	bl	8014d58 <__malloc_lock>
 8014c86:	f8d8 3000 	ldr.w	r3, [r8]
 8014c8a:	461c      	mov	r4, r3
 8014c8c:	bb44      	cbnz	r4, 8014ce0 <_malloc_r+0x88>
 8014c8e:	4629      	mov	r1, r5
 8014c90:	4630      	mov	r0, r6
 8014c92:	f7ff ffbf 	bl	8014c14 <sbrk_aligned>
 8014c96:	1c43      	adds	r3, r0, #1
 8014c98:	4604      	mov	r4, r0
 8014c9a:	d158      	bne.n	8014d4e <_malloc_r+0xf6>
 8014c9c:	f8d8 4000 	ldr.w	r4, [r8]
 8014ca0:	4627      	mov	r7, r4
 8014ca2:	2f00      	cmp	r7, #0
 8014ca4:	d143      	bne.n	8014d2e <_malloc_r+0xd6>
 8014ca6:	2c00      	cmp	r4, #0
 8014ca8:	d04b      	beq.n	8014d42 <_malloc_r+0xea>
 8014caa:	6823      	ldr	r3, [r4, #0]
 8014cac:	4639      	mov	r1, r7
 8014cae:	4630      	mov	r0, r6
 8014cb0:	eb04 0903 	add.w	r9, r4, r3
 8014cb4:	f000 ff64 	bl	8015b80 <_sbrk_r>
 8014cb8:	4581      	cmp	r9, r0
 8014cba:	d142      	bne.n	8014d42 <_malloc_r+0xea>
 8014cbc:	6821      	ldr	r1, [r4, #0]
 8014cbe:	1a6d      	subs	r5, r5, r1
 8014cc0:	4629      	mov	r1, r5
 8014cc2:	4630      	mov	r0, r6
 8014cc4:	f7ff ffa6 	bl	8014c14 <sbrk_aligned>
 8014cc8:	3001      	adds	r0, #1
 8014cca:	d03a      	beq.n	8014d42 <_malloc_r+0xea>
 8014ccc:	6823      	ldr	r3, [r4, #0]
 8014cce:	442b      	add	r3, r5
 8014cd0:	6023      	str	r3, [r4, #0]
 8014cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8014cd6:	685a      	ldr	r2, [r3, #4]
 8014cd8:	bb62      	cbnz	r2, 8014d34 <_malloc_r+0xdc>
 8014cda:	f8c8 7000 	str.w	r7, [r8]
 8014cde:	e00f      	b.n	8014d00 <_malloc_r+0xa8>
 8014ce0:	6822      	ldr	r2, [r4, #0]
 8014ce2:	1b52      	subs	r2, r2, r5
 8014ce4:	d420      	bmi.n	8014d28 <_malloc_r+0xd0>
 8014ce6:	2a0b      	cmp	r2, #11
 8014ce8:	d917      	bls.n	8014d1a <_malloc_r+0xc2>
 8014cea:	1961      	adds	r1, r4, r5
 8014cec:	42a3      	cmp	r3, r4
 8014cee:	6025      	str	r5, [r4, #0]
 8014cf0:	bf18      	it	ne
 8014cf2:	6059      	strne	r1, [r3, #4]
 8014cf4:	6863      	ldr	r3, [r4, #4]
 8014cf6:	bf08      	it	eq
 8014cf8:	f8c8 1000 	streq.w	r1, [r8]
 8014cfc:	5162      	str	r2, [r4, r5]
 8014cfe:	604b      	str	r3, [r1, #4]
 8014d00:	4630      	mov	r0, r6
 8014d02:	f000 f82f 	bl	8014d64 <__malloc_unlock>
 8014d06:	f104 000b 	add.w	r0, r4, #11
 8014d0a:	1d23      	adds	r3, r4, #4
 8014d0c:	f020 0007 	bic.w	r0, r0, #7
 8014d10:	1ac2      	subs	r2, r0, r3
 8014d12:	bf1c      	itt	ne
 8014d14:	1a1b      	subne	r3, r3, r0
 8014d16:	50a3      	strne	r3, [r4, r2]
 8014d18:	e7af      	b.n	8014c7a <_malloc_r+0x22>
 8014d1a:	6862      	ldr	r2, [r4, #4]
 8014d1c:	42a3      	cmp	r3, r4
 8014d1e:	bf0c      	ite	eq
 8014d20:	f8c8 2000 	streq.w	r2, [r8]
 8014d24:	605a      	strne	r2, [r3, #4]
 8014d26:	e7eb      	b.n	8014d00 <_malloc_r+0xa8>
 8014d28:	4623      	mov	r3, r4
 8014d2a:	6864      	ldr	r4, [r4, #4]
 8014d2c:	e7ae      	b.n	8014c8c <_malloc_r+0x34>
 8014d2e:	463c      	mov	r4, r7
 8014d30:	687f      	ldr	r7, [r7, #4]
 8014d32:	e7b6      	b.n	8014ca2 <_malloc_r+0x4a>
 8014d34:	461a      	mov	r2, r3
 8014d36:	685b      	ldr	r3, [r3, #4]
 8014d38:	42a3      	cmp	r3, r4
 8014d3a:	d1fb      	bne.n	8014d34 <_malloc_r+0xdc>
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	6053      	str	r3, [r2, #4]
 8014d40:	e7de      	b.n	8014d00 <_malloc_r+0xa8>
 8014d42:	230c      	movs	r3, #12
 8014d44:	6033      	str	r3, [r6, #0]
 8014d46:	4630      	mov	r0, r6
 8014d48:	f000 f80c 	bl	8014d64 <__malloc_unlock>
 8014d4c:	e794      	b.n	8014c78 <_malloc_r+0x20>
 8014d4e:	6005      	str	r5, [r0, #0]
 8014d50:	e7d6      	b.n	8014d00 <_malloc_r+0xa8>
 8014d52:	bf00      	nop
 8014d54:	20000784 	.word	0x20000784

08014d58 <__malloc_lock>:
 8014d58:	4801      	ldr	r0, [pc, #4]	@ (8014d60 <__malloc_lock+0x8>)
 8014d5a:	f000 bf5e 	b.w	8015c1a <__retarget_lock_acquire_recursive>
 8014d5e:	bf00      	nop
 8014d60:	200008c8 	.word	0x200008c8

08014d64 <__malloc_unlock>:
 8014d64:	4801      	ldr	r0, [pc, #4]	@ (8014d6c <__malloc_unlock+0x8>)
 8014d66:	f000 bf59 	b.w	8015c1c <__retarget_lock_release_recursive>
 8014d6a:	bf00      	nop
 8014d6c:	200008c8 	.word	0x200008c8

08014d70 <__cvt>:
 8014d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d74:	ec57 6b10 	vmov	r6, r7, d0
 8014d78:	2f00      	cmp	r7, #0
 8014d7a:	460c      	mov	r4, r1
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	463b      	mov	r3, r7
 8014d80:	bfbb      	ittet	lt
 8014d82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8014d86:	461f      	movlt	r7, r3
 8014d88:	2300      	movge	r3, #0
 8014d8a:	232d      	movlt	r3, #45	@ 0x2d
 8014d8c:	700b      	strb	r3, [r1, #0]
 8014d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014d90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8014d94:	4691      	mov	r9, r2
 8014d96:	f023 0820 	bic.w	r8, r3, #32
 8014d9a:	bfbc      	itt	lt
 8014d9c:	4632      	movlt	r2, r6
 8014d9e:	4616      	movlt	r6, r2
 8014da0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014da4:	d005      	beq.n	8014db2 <__cvt+0x42>
 8014da6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8014daa:	d100      	bne.n	8014dae <__cvt+0x3e>
 8014dac:	3401      	adds	r4, #1
 8014dae:	2102      	movs	r1, #2
 8014db0:	e000      	b.n	8014db4 <__cvt+0x44>
 8014db2:	2103      	movs	r1, #3
 8014db4:	ab03      	add	r3, sp, #12
 8014db6:	9301      	str	r3, [sp, #4]
 8014db8:	ab02      	add	r3, sp, #8
 8014dba:	9300      	str	r3, [sp, #0]
 8014dbc:	ec47 6b10 	vmov	d0, r6, r7
 8014dc0:	4653      	mov	r3, sl
 8014dc2:	4622      	mov	r2, r4
 8014dc4:	f000 ffcc 	bl	8015d60 <_dtoa_r>
 8014dc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8014dcc:	4605      	mov	r5, r0
 8014dce:	d119      	bne.n	8014e04 <__cvt+0x94>
 8014dd0:	f019 0f01 	tst.w	r9, #1
 8014dd4:	d00e      	beq.n	8014df4 <__cvt+0x84>
 8014dd6:	eb00 0904 	add.w	r9, r0, r4
 8014dda:	2200      	movs	r2, #0
 8014ddc:	2300      	movs	r3, #0
 8014dde:	4630      	mov	r0, r6
 8014de0:	4639      	mov	r1, r7
 8014de2:	f7eb fe71 	bl	8000ac8 <__aeabi_dcmpeq>
 8014de6:	b108      	cbz	r0, 8014dec <__cvt+0x7c>
 8014de8:	f8cd 900c 	str.w	r9, [sp, #12]
 8014dec:	2230      	movs	r2, #48	@ 0x30
 8014dee:	9b03      	ldr	r3, [sp, #12]
 8014df0:	454b      	cmp	r3, r9
 8014df2:	d31e      	bcc.n	8014e32 <__cvt+0xc2>
 8014df4:	9b03      	ldr	r3, [sp, #12]
 8014df6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014df8:	1b5b      	subs	r3, r3, r5
 8014dfa:	4628      	mov	r0, r5
 8014dfc:	6013      	str	r3, [r2, #0]
 8014dfe:	b004      	add	sp, #16
 8014e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014e08:	eb00 0904 	add.w	r9, r0, r4
 8014e0c:	d1e5      	bne.n	8014dda <__cvt+0x6a>
 8014e0e:	7803      	ldrb	r3, [r0, #0]
 8014e10:	2b30      	cmp	r3, #48	@ 0x30
 8014e12:	d10a      	bne.n	8014e2a <__cvt+0xba>
 8014e14:	2200      	movs	r2, #0
 8014e16:	2300      	movs	r3, #0
 8014e18:	4630      	mov	r0, r6
 8014e1a:	4639      	mov	r1, r7
 8014e1c:	f7eb fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 8014e20:	b918      	cbnz	r0, 8014e2a <__cvt+0xba>
 8014e22:	f1c4 0401 	rsb	r4, r4, #1
 8014e26:	f8ca 4000 	str.w	r4, [sl]
 8014e2a:	f8da 3000 	ldr.w	r3, [sl]
 8014e2e:	4499      	add	r9, r3
 8014e30:	e7d3      	b.n	8014dda <__cvt+0x6a>
 8014e32:	1c59      	adds	r1, r3, #1
 8014e34:	9103      	str	r1, [sp, #12]
 8014e36:	701a      	strb	r2, [r3, #0]
 8014e38:	e7d9      	b.n	8014dee <__cvt+0x7e>

08014e3a <__exponent>:
 8014e3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e3c:	2900      	cmp	r1, #0
 8014e3e:	bfba      	itte	lt
 8014e40:	4249      	neglt	r1, r1
 8014e42:	232d      	movlt	r3, #45	@ 0x2d
 8014e44:	232b      	movge	r3, #43	@ 0x2b
 8014e46:	2909      	cmp	r1, #9
 8014e48:	7002      	strb	r2, [r0, #0]
 8014e4a:	7043      	strb	r3, [r0, #1]
 8014e4c:	dd29      	ble.n	8014ea2 <__exponent+0x68>
 8014e4e:	f10d 0307 	add.w	r3, sp, #7
 8014e52:	461d      	mov	r5, r3
 8014e54:	270a      	movs	r7, #10
 8014e56:	461a      	mov	r2, r3
 8014e58:	fbb1 f6f7 	udiv	r6, r1, r7
 8014e5c:	fb07 1416 	mls	r4, r7, r6, r1
 8014e60:	3430      	adds	r4, #48	@ 0x30
 8014e62:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014e66:	460c      	mov	r4, r1
 8014e68:	2c63      	cmp	r4, #99	@ 0x63
 8014e6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8014e6e:	4631      	mov	r1, r6
 8014e70:	dcf1      	bgt.n	8014e56 <__exponent+0x1c>
 8014e72:	3130      	adds	r1, #48	@ 0x30
 8014e74:	1e94      	subs	r4, r2, #2
 8014e76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014e7a:	1c41      	adds	r1, r0, #1
 8014e7c:	4623      	mov	r3, r4
 8014e7e:	42ab      	cmp	r3, r5
 8014e80:	d30a      	bcc.n	8014e98 <__exponent+0x5e>
 8014e82:	f10d 0309 	add.w	r3, sp, #9
 8014e86:	1a9b      	subs	r3, r3, r2
 8014e88:	42ac      	cmp	r4, r5
 8014e8a:	bf88      	it	hi
 8014e8c:	2300      	movhi	r3, #0
 8014e8e:	3302      	adds	r3, #2
 8014e90:	4403      	add	r3, r0
 8014e92:	1a18      	subs	r0, r3, r0
 8014e94:	b003      	add	sp, #12
 8014e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e98:	f813 6b01 	ldrb.w	r6, [r3], #1
 8014e9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014ea0:	e7ed      	b.n	8014e7e <__exponent+0x44>
 8014ea2:	2330      	movs	r3, #48	@ 0x30
 8014ea4:	3130      	adds	r1, #48	@ 0x30
 8014ea6:	7083      	strb	r3, [r0, #2]
 8014ea8:	70c1      	strb	r1, [r0, #3]
 8014eaa:	1d03      	adds	r3, r0, #4
 8014eac:	e7f1      	b.n	8014e92 <__exponent+0x58>
	...

08014eb0 <_printf_float>:
 8014eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eb4:	b08d      	sub	sp, #52	@ 0x34
 8014eb6:	460c      	mov	r4, r1
 8014eb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8014ebc:	4616      	mov	r6, r2
 8014ebe:	461f      	mov	r7, r3
 8014ec0:	4605      	mov	r5, r0
 8014ec2:	f000 fe25 	bl	8015b10 <_localeconv_r>
 8014ec6:	6803      	ldr	r3, [r0, #0]
 8014ec8:	9304      	str	r3, [sp, #16]
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f7eb f9d0 	bl	8000270 <strlen>
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8014ed8:	9005      	str	r0, [sp, #20]
 8014eda:	3307      	adds	r3, #7
 8014edc:	f023 0307 	bic.w	r3, r3, #7
 8014ee0:	f103 0208 	add.w	r2, r3, #8
 8014ee4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014ee8:	f8d4 b000 	ldr.w	fp, [r4]
 8014eec:	f8c8 2000 	str.w	r2, [r8]
 8014ef0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014ef4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014ef8:	9307      	str	r3, [sp, #28]
 8014efa:	f8cd 8018 	str.w	r8, [sp, #24]
 8014efe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8014f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014f06:	4b9c      	ldr	r3, [pc, #624]	@ (8015178 <_printf_float+0x2c8>)
 8014f08:	f04f 32ff 	mov.w	r2, #4294967295
 8014f0c:	f7eb fe0e 	bl	8000b2c <__aeabi_dcmpun>
 8014f10:	bb70      	cbnz	r0, 8014f70 <_printf_float+0xc0>
 8014f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014f16:	4b98      	ldr	r3, [pc, #608]	@ (8015178 <_printf_float+0x2c8>)
 8014f18:	f04f 32ff 	mov.w	r2, #4294967295
 8014f1c:	f7eb fde8 	bl	8000af0 <__aeabi_dcmple>
 8014f20:	bb30      	cbnz	r0, 8014f70 <_printf_float+0xc0>
 8014f22:	2200      	movs	r2, #0
 8014f24:	2300      	movs	r3, #0
 8014f26:	4640      	mov	r0, r8
 8014f28:	4649      	mov	r1, r9
 8014f2a:	f7eb fdd7 	bl	8000adc <__aeabi_dcmplt>
 8014f2e:	b110      	cbz	r0, 8014f36 <_printf_float+0x86>
 8014f30:	232d      	movs	r3, #45	@ 0x2d
 8014f32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014f36:	4a91      	ldr	r2, [pc, #580]	@ (801517c <_printf_float+0x2cc>)
 8014f38:	4b91      	ldr	r3, [pc, #580]	@ (8015180 <_printf_float+0x2d0>)
 8014f3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8014f3e:	bf94      	ite	ls
 8014f40:	4690      	movls	r8, r2
 8014f42:	4698      	movhi	r8, r3
 8014f44:	2303      	movs	r3, #3
 8014f46:	6123      	str	r3, [r4, #16]
 8014f48:	f02b 0304 	bic.w	r3, fp, #4
 8014f4c:	6023      	str	r3, [r4, #0]
 8014f4e:	f04f 0900 	mov.w	r9, #0
 8014f52:	9700      	str	r7, [sp, #0]
 8014f54:	4633      	mov	r3, r6
 8014f56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014f58:	4621      	mov	r1, r4
 8014f5a:	4628      	mov	r0, r5
 8014f5c:	f000 f9d2 	bl	8015304 <_printf_common>
 8014f60:	3001      	adds	r0, #1
 8014f62:	f040 808d 	bne.w	8015080 <_printf_float+0x1d0>
 8014f66:	f04f 30ff 	mov.w	r0, #4294967295
 8014f6a:	b00d      	add	sp, #52	@ 0x34
 8014f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f70:	4642      	mov	r2, r8
 8014f72:	464b      	mov	r3, r9
 8014f74:	4640      	mov	r0, r8
 8014f76:	4649      	mov	r1, r9
 8014f78:	f7eb fdd8 	bl	8000b2c <__aeabi_dcmpun>
 8014f7c:	b140      	cbz	r0, 8014f90 <_printf_float+0xe0>
 8014f7e:	464b      	mov	r3, r9
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	bfbc      	itt	lt
 8014f84:	232d      	movlt	r3, #45	@ 0x2d
 8014f86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8015184 <_printf_float+0x2d4>)
 8014f8c:	4b7e      	ldr	r3, [pc, #504]	@ (8015188 <_printf_float+0x2d8>)
 8014f8e:	e7d4      	b.n	8014f3a <_printf_float+0x8a>
 8014f90:	6863      	ldr	r3, [r4, #4]
 8014f92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014f96:	9206      	str	r2, [sp, #24]
 8014f98:	1c5a      	adds	r2, r3, #1
 8014f9a:	d13b      	bne.n	8015014 <_printf_float+0x164>
 8014f9c:	2306      	movs	r3, #6
 8014f9e:	6063      	str	r3, [r4, #4]
 8014fa0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	6022      	str	r2, [r4, #0]
 8014fa8:	9303      	str	r3, [sp, #12]
 8014faa:	ab0a      	add	r3, sp, #40	@ 0x28
 8014fac:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014fb0:	ab09      	add	r3, sp, #36	@ 0x24
 8014fb2:	9300      	str	r3, [sp, #0]
 8014fb4:	6861      	ldr	r1, [r4, #4]
 8014fb6:	ec49 8b10 	vmov	d0, r8, r9
 8014fba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	f7ff fed6 	bl	8014d70 <__cvt>
 8014fc4:	9b06      	ldr	r3, [sp, #24]
 8014fc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014fc8:	2b47      	cmp	r3, #71	@ 0x47
 8014fca:	4680      	mov	r8, r0
 8014fcc:	d129      	bne.n	8015022 <_printf_float+0x172>
 8014fce:	1cc8      	adds	r0, r1, #3
 8014fd0:	db02      	blt.n	8014fd8 <_printf_float+0x128>
 8014fd2:	6863      	ldr	r3, [r4, #4]
 8014fd4:	4299      	cmp	r1, r3
 8014fd6:	dd41      	ble.n	801505c <_printf_float+0x1ac>
 8014fd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8014fdc:	fa5f fa8a 	uxtb.w	sl, sl
 8014fe0:	3901      	subs	r1, #1
 8014fe2:	4652      	mov	r2, sl
 8014fe4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014fe8:	9109      	str	r1, [sp, #36]	@ 0x24
 8014fea:	f7ff ff26 	bl	8014e3a <__exponent>
 8014fee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014ff0:	1813      	adds	r3, r2, r0
 8014ff2:	2a01      	cmp	r2, #1
 8014ff4:	4681      	mov	r9, r0
 8014ff6:	6123      	str	r3, [r4, #16]
 8014ff8:	dc02      	bgt.n	8015000 <_printf_float+0x150>
 8014ffa:	6822      	ldr	r2, [r4, #0]
 8014ffc:	07d2      	lsls	r2, r2, #31
 8014ffe:	d501      	bpl.n	8015004 <_printf_float+0x154>
 8015000:	3301      	adds	r3, #1
 8015002:	6123      	str	r3, [r4, #16]
 8015004:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8015008:	2b00      	cmp	r3, #0
 801500a:	d0a2      	beq.n	8014f52 <_printf_float+0xa2>
 801500c:	232d      	movs	r3, #45	@ 0x2d
 801500e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015012:	e79e      	b.n	8014f52 <_printf_float+0xa2>
 8015014:	9a06      	ldr	r2, [sp, #24]
 8015016:	2a47      	cmp	r2, #71	@ 0x47
 8015018:	d1c2      	bne.n	8014fa0 <_printf_float+0xf0>
 801501a:	2b00      	cmp	r3, #0
 801501c:	d1c0      	bne.n	8014fa0 <_printf_float+0xf0>
 801501e:	2301      	movs	r3, #1
 8015020:	e7bd      	b.n	8014f9e <_printf_float+0xee>
 8015022:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8015026:	d9db      	bls.n	8014fe0 <_printf_float+0x130>
 8015028:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801502c:	d118      	bne.n	8015060 <_printf_float+0x1b0>
 801502e:	2900      	cmp	r1, #0
 8015030:	6863      	ldr	r3, [r4, #4]
 8015032:	dd0b      	ble.n	801504c <_printf_float+0x19c>
 8015034:	6121      	str	r1, [r4, #16]
 8015036:	b913      	cbnz	r3, 801503e <_printf_float+0x18e>
 8015038:	6822      	ldr	r2, [r4, #0]
 801503a:	07d0      	lsls	r0, r2, #31
 801503c:	d502      	bpl.n	8015044 <_printf_float+0x194>
 801503e:	3301      	adds	r3, #1
 8015040:	440b      	add	r3, r1
 8015042:	6123      	str	r3, [r4, #16]
 8015044:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015046:	f04f 0900 	mov.w	r9, #0
 801504a:	e7db      	b.n	8015004 <_printf_float+0x154>
 801504c:	b913      	cbnz	r3, 8015054 <_printf_float+0x1a4>
 801504e:	6822      	ldr	r2, [r4, #0]
 8015050:	07d2      	lsls	r2, r2, #31
 8015052:	d501      	bpl.n	8015058 <_printf_float+0x1a8>
 8015054:	3302      	adds	r3, #2
 8015056:	e7f4      	b.n	8015042 <_printf_float+0x192>
 8015058:	2301      	movs	r3, #1
 801505a:	e7f2      	b.n	8015042 <_printf_float+0x192>
 801505c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8015060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015062:	4299      	cmp	r1, r3
 8015064:	db05      	blt.n	8015072 <_printf_float+0x1c2>
 8015066:	6823      	ldr	r3, [r4, #0]
 8015068:	6121      	str	r1, [r4, #16]
 801506a:	07d8      	lsls	r0, r3, #31
 801506c:	d5ea      	bpl.n	8015044 <_printf_float+0x194>
 801506e:	1c4b      	adds	r3, r1, #1
 8015070:	e7e7      	b.n	8015042 <_printf_float+0x192>
 8015072:	2900      	cmp	r1, #0
 8015074:	bfd4      	ite	le
 8015076:	f1c1 0202 	rsble	r2, r1, #2
 801507a:	2201      	movgt	r2, #1
 801507c:	4413      	add	r3, r2
 801507e:	e7e0      	b.n	8015042 <_printf_float+0x192>
 8015080:	6823      	ldr	r3, [r4, #0]
 8015082:	055a      	lsls	r2, r3, #21
 8015084:	d407      	bmi.n	8015096 <_printf_float+0x1e6>
 8015086:	6923      	ldr	r3, [r4, #16]
 8015088:	4642      	mov	r2, r8
 801508a:	4631      	mov	r1, r6
 801508c:	4628      	mov	r0, r5
 801508e:	47b8      	blx	r7
 8015090:	3001      	adds	r0, #1
 8015092:	d12b      	bne.n	80150ec <_printf_float+0x23c>
 8015094:	e767      	b.n	8014f66 <_printf_float+0xb6>
 8015096:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801509a:	f240 80dd 	bls.w	8015258 <_printf_float+0x3a8>
 801509e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80150a2:	2200      	movs	r2, #0
 80150a4:	2300      	movs	r3, #0
 80150a6:	f7eb fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80150aa:	2800      	cmp	r0, #0
 80150ac:	d033      	beq.n	8015116 <_printf_float+0x266>
 80150ae:	4a37      	ldr	r2, [pc, #220]	@ (801518c <_printf_float+0x2dc>)
 80150b0:	2301      	movs	r3, #1
 80150b2:	4631      	mov	r1, r6
 80150b4:	4628      	mov	r0, r5
 80150b6:	47b8      	blx	r7
 80150b8:	3001      	adds	r0, #1
 80150ba:	f43f af54 	beq.w	8014f66 <_printf_float+0xb6>
 80150be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80150c2:	4543      	cmp	r3, r8
 80150c4:	db02      	blt.n	80150cc <_printf_float+0x21c>
 80150c6:	6823      	ldr	r3, [r4, #0]
 80150c8:	07d8      	lsls	r0, r3, #31
 80150ca:	d50f      	bpl.n	80150ec <_printf_float+0x23c>
 80150cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150d0:	4631      	mov	r1, r6
 80150d2:	4628      	mov	r0, r5
 80150d4:	47b8      	blx	r7
 80150d6:	3001      	adds	r0, #1
 80150d8:	f43f af45 	beq.w	8014f66 <_printf_float+0xb6>
 80150dc:	f04f 0900 	mov.w	r9, #0
 80150e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80150e4:	f104 0a1a 	add.w	sl, r4, #26
 80150e8:	45c8      	cmp	r8, r9
 80150ea:	dc09      	bgt.n	8015100 <_printf_float+0x250>
 80150ec:	6823      	ldr	r3, [r4, #0]
 80150ee:	079b      	lsls	r3, r3, #30
 80150f0:	f100 8103 	bmi.w	80152fa <_printf_float+0x44a>
 80150f4:	68e0      	ldr	r0, [r4, #12]
 80150f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80150f8:	4298      	cmp	r0, r3
 80150fa:	bfb8      	it	lt
 80150fc:	4618      	movlt	r0, r3
 80150fe:	e734      	b.n	8014f6a <_printf_float+0xba>
 8015100:	2301      	movs	r3, #1
 8015102:	4652      	mov	r2, sl
 8015104:	4631      	mov	r1, r6
 8015106:	4628      	mov	r0, r5
 8015108:	47b8      	blx	r7
 801510a:	3001      	adds	r0, #1
 801510c:	f43f af2b 	beq.w	8014f66 <_printf_float+0xb6>
 8015110:	f109 0901 	add.w	r9, r9, #1
 8015114:	e7e8      	b.n	80150e8 <_printf_float+0x238>
 8015116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015118:	2b00      	cmp	r3, #0
 801511a:	dc39      	bgt.n	8015190 <_printf_float+0x2e0>
 801511c:	4a1b      	ldr	r2, [pc, #108]	@ (801518c <_printf_float+0x2dc>)
 801511e:	2301      	movs	r3, #1
 8015120:	4631      	mov	r1, r6
 8015122:	4628      	mov	r0, r5
 8015124:	47b8      	blx	r7
 8015126:	3001      	adds	r0, #1
 8015128:	f43f af1d 	beq.w	8014f66 <_printf_float+0xb6>
 801512c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8015130:	ea59 0303 	orrs.w	r3, r9, r3
 8015134:	d102      	bne.n	801513c <_printf_float+0x28c>
 8015136:	6823      	ldr	r3, [r4, #0]
 8015138:	07d9      	lsls	r1, r3, #31
 801513a:	d5d7      	bpl.n	80150ec <_printf_float+0x23c>
 801513c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015140:	4631      	mov	r1, r6
 8015142:	4628      	mov	r0, r5
 8015144:	47b8      	blx	r7
 8015146:	3001      	adds	r0, #1
 8015148:	f43f af0d 	beq.w	8014f66 <_printf_float+0xb6>
 801514c:	f04f 0a00 	mov.w	sl, #0
 8015150:	f104 0b1a 	add.w	fp, r4, #26
 8015154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015156:	425b      	negs	r3, r3
 8015158:	4553      	cmp	r3, sl
 801515a:	dc01      	bgt.n	8015160 <_printf_float+0x2b0>
 801515c:	464b      	mov	r3, r9
 801515e:	e793      	b.n	8015088 <_printf_float+0x1d8>
 8015160:	2301      	movs	r3, #1
 8015162:	465a      	mov	r2, fp
 8015164:	4631      	mov	r1, r6
 8015166:	4628      	mov	r0, r5
 8015168:	47b8      	blx	r7
 801516a:	3001      	adds	r0, #1
 801516c:	f43f aefb 	beq.w	8014f66 <_printf_float+0xb6>
 8015170:	f10a 0a01 	add.w	sl, sl, #1
 8015174:	e7ee      	b.n	8015154 <_printf_float+0x2a4>
 8015176:	bf00      	nop
 8015178:	7fefffff 	.word	0x7fefffff
 801517c:	0801f08f 	.word	0x0801f08f
 8015180:	0801f093 	.word	0x0801f093
 8015184:	0801f097 	.word	0x0801f097
 8015188:	0801f09b 	.word	0x0801f09b
 801518c:	0801f09f 	.word	0x0801f09f
 8015190:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015192:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015196:	4553      	cmp	r3, sl
 8015198:	bfa8      	it	ge
 801519a:	4653      	movge	r3, sl
 801519c:	2b00      	cmp	r3, #0
 801519e:	4699      	mov	r9, r3
 80151a0:	dc36      	bgt.n	8015210 <_printf_float+0x360>
 80151a2:	f04f 0b00 	mov.w	fp, #0
 80151a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80151aa:	f104 021a 	add.w	r2, r4, #26
 80151ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80151b0:	9306      	str	r3, [sp, #24]
 80151b2:	eba3 0309 	sub.w	r3, r3, r9
 80151b6:	455b      	cmp	r3, fp
 80151b8:	dc31      	bgt.n	801521e <_printf_float+0x36e>
 80151ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80151bc:	459a      	cmp	sl, r3
 80151be:	dc3a      	bgt.n	8015236 <_printf_float+0x386>
 80151c0:	6823      	ldr	r3, [r4, #0]
 80151c2:	07da      	lsls	r2, r3, #31
 80151c4:	d437      	bmi.n	8015236 <_printf_float+0x386>
 80151c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80151c8:	ebaa 0903 	sub.w	r9, sl, r3
 80151cc:	9b06      	ldr	r3, [sp, #24]
 80151ce:	ebaa 0303 	sub.w	r3, sl, r3
 80151d2:	4599      	cmp	r9, r3
 80151d4:	bfa8      	it	ge
 80151d6:	4699      	movge	r9, r3
 80151d8:	f1b9 0f00 	cmp.w	r9, #0
 80151dc:	dc33      	bgt.n	8015246 <_printf_float+0x396>
 80151de:	f04f 0800 	mov.w	r8, #0
 80151e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80151e6:	f104 0b1a 	add.w	fp, r4, #26
 80151ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80151ec:	ebaa 0303 	sub.w	r3, sl, r3
 80151f0:	eba3 0309 	sub.w	r3, r3, r9
 80151f4:	4543      	cmp	r3, r8
 80151f6:	f77f af79 	ble.w	80150ec <_printf_float+0x23c>
 80151fa:	2301      	movs	r3, #1
 80151fc:	465a      	mov	r2, fp
 80151fe:	4631      	mov	r1, r6
 8015200:	4628      	mov	r0, r5
 8015202:	47b8      	blx	r7
 8015204:	3001      	adds	r0, #1
 8015206:	f43f aeae 	beq.w	8014f66 <_printf_float+0xb6>
 801520a:	f108 0801 	add.w	r8, r8, #1
 801520e:	e7ec      	b.n	80151ea <_printf_float+0x33a>
 8015210:	4642      	mov	r2, r8
 8015212:	4631      	mov	r1, r6
 8015214:	4628      	mov	r0, r5
 8015216:	47b8      	blx	r7
 8015218:	3001      	adds	r0, #1
 801521a:	d1c2      	bne.n	80151a2 <_printf_float+0x2f2>
 801521c:	e6a3      	b.n	8014f66 <_printf_float+0xb6>
 801521e:	2301      	movs	r3, #1
 8015220:	4631      	mov	r1, r6
 8015222:	4628      	mov	r0, r5
 8015224:	9206      	str	r2, [sp, #24]
 8015226:	47b8      	blx	r7
 8015228:	3001      	adds	r0, #1
 801522a:	f43f ae9c 	beq.w	8014f66 <_printf_float+0xb6>
 801522e:	9a06      	ldr	r2, [sp, #24]
 8015230:	f10b 0b01 	add.w	fp, fp, #1
 8015234:	e7bb      	b.n	80151ae <_printf_float+0x2fe>
 8015236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801523a:	4631      	mov	r1, r6
 801523c:	4628      	mov	r0, r5
 801523e:	47b8      	blx	r7
 8015240:	3001      	adds	r0, #1
 8015242:	d1c0      	bne.n	80151c6 <_printf_float+0x316>
 8015244:	e68f      	b.n	8014f66 <_printf_float+0xb6>
 8015246:	9a06      	ldr	r2, [sp, #24]
 8015248:	464b      	mov	r3, r9
 801524a:	4442      	add	r2, r8
 801524c:	4631      	mov	r1, r6
 801524e:	4628      	mov	r0, r5
 8015250:	47b8      	blx	r7
 8015252:	3001      	adds	r0, #1
 8015254:	d1c3      	bne.n	80151de <_printf_float+0x32e>
 8015256:	e686      	b.n	8014f66 <_printf_float+0xb6>
 8015258:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801525c:	f1ba 0f01 	cmp.w	sl, #1
 8015260:	dc01      	bgt.n	8015266 <_printf_float+0x3b6>
 8015262:	07db      	lsls	r3, r3, #31
 8015264:	d536      	bpl.n	80152d4 <_printf_float+0x424>
 8015266:	2301      	movs	r3, #1
 8015268:	4642      	mov	r2, r8
 801526a:	4631      	mov	r1, r6
 801526c:	4628      	mov	r0, r5
 801526e:	47b8      	blx	r7
 8015270:	3001      	adds	r0, #1
 8015272:	f43f ae78 	beq.w	8014f66 <_printf_float+0xb6>
 8015276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801527a:	4631      	mov	r1, r6
 801527c:	4628      	mov	r0, r5
 801527e:	47b8      	blx	r7
 8015280:	3001      	adds	r0, #1
 8015282:	f43f ae70 	beq.w	8014f66 <_printf_float+0xb6>
 8015286:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801528a:	2200      	movs	r2, #0
 801528c:	2300      	movs	r3, #0
 801528e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015292:	f7eb fc19 	bl	8000ac8 <__aeabi_dcmpeq>
 8015296:	b9c0      	cbnz	r0, 80152ca <_printf_float+0x41a>
 8015298:	4653      	mov	r3, sl
 801529a:	f108 0201 	add.w	r2, r8, #1
 801529e:	4631      	mov	r1, r6
 80152a0:	4628      	mov	r0, r5
 80152a2:	47b8      	blx	r7
 80152a4:	3001      	adds	r0, #1
 80152a6:	d10c      	bne.n	80152c2 <_printf_float+0x412>
 80152a8:	e65d      	b.n	8014f66 <_printf_float+0xb6>
 80152aa:	2301      	movs	r3, #1
 80152ac:	465a      	mov	r2, fp
 80152ae:	4631      	mov	r1, r6
 80152b0:	4628      	mov	r0, r5
 80152b2:	47b8      	blx	r7
 80152b4:	3001      	adds	r0, #1
 80152b6:	f43f ae56 	beq.w	8014f66 <_printf_float+0xb6>
 80152ba:	f108 0801 	add.w	r8, r8, #1
 80152be:	45d0      	cmp	r8, sl
 80152c0:	dbf3      	blt.n	80152aa <_printf_float+0x3fa>
 80152c2:	464b      	mov	r3, r9
 80152c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80152c8:	e6df      	b.n	801508a <_printf_float+0x1da>
 80152ca:	f04f 0800 	mov.w	r8, #0
 80152ce:	f104 0b1a 	add.w	fp, r4, #26
 80152d2:	e7f4      	b.n	80152be <_printf_float+0x40e>
 80152d4:	2301      	movs	r3, #1
 80152d6:	4642      	mov	r2, r8
 80152d8:	e7e1      	b.n	801529e <_printf_float+0x3ee>
 80152da:	2301      	movs	r3, #1
 80152dc:	464a      	mov	r2, r9
 80152de:	4631      	mov	r1, r6
 80152e0:	4628      	mov	r0, r5
 80152e2:	47b8      	blx	r7
 80152e4:	3001      	adds	r0, #1
 80152e6:	f43f ae3e 	beq.w	8014f66 <_printf_float+0xb6>
 80152ea:	f108 0801 	add.w	r8, r8, #1
 80152ee:	68e3      	ldr	r3, [r4, #12]
 80152f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80152f2:	1a5b      	subs	r3, r3, r1
 80152f4:	4543      	cmp	r3, r8
 80152f6:	dcf0      	bgt.n	80152da <_printf_float+0x42a>
 80152f8:	e6fc      	b.n	80150f4 <_printf_float+0x244>
 80152fa:	f04f 0800 	mov.w	r8, #0
 80152fe:	f104 0919 	add.w	r9, r4, #25
 8015302:	e7f4      	b.n	80152ee <_printf_float+0x43e>

08015304 <_printf_common>:
 8015304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015308:	4616      	mov	r6, r2
 801530a:	4698      	mov	r8, r3
 801530c:	688a      	ldr	r2, [r1, #8]
 801530e:	690b      	ldr	r3, [r1, #16]
 8015310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015314:	4293      	cmp	r3, r2
 8015316:	bfb8      	it	lt
 8015318:	4613      	movlt	r3, r2
 801531a:	6033      	str	r3, [r6, #0]
 801531c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015320:	4607      	mov	r7, r0
 8015322:	460c      	mov	r4, r1
 8015324:	b10a      	cbz	r2, 801532a <_printf_common+0x26>
 8015326:	3301      	adds	r3, #1
 8015328:	6033      	str	r3, [r6, #0]
 801532a:	6823      	ldr	r3, [r4, #0]
 801532c:	0699      	lsls	r1, r3, #26
 801532e:	bf42      	ittt	mi
 8015330:	6833      	ldrmi	r3, [r6, #0]
 8015332:	3302      	addmi	r3, #2
 8015334:	6033      	strmi	r3, [r6, #0]
 8015336:	6825      	ldr	r5, [r4, #0]
 8015338:	f015 0506 	ands.w	r5, r5, #6
 801533c:	d106      	bne.n	801534c <_printf_common+0x48>
 801533e:	f104 0a19 	add.w	sl, r4, #25
 8015342:	68e3      	ldr	r3, [r4, #12]
 8015344:	6832      	ldr	r2, [r6, #0]
 8015346:	1a9b      	subs	r3, r3, r2
 8015348:	42ab      	cmp	r3, r5
 801534a:	dc26      	bgt.n	801539a <_printf_common+0x96>
 801534c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015350:	6822      	ldr	r2, [r4, #0]
 8015352:	3b00      	subs	r3, #0
 8015354:	bf18      	it	ne
 8015356:	2301      	movne	r3, #1
 8015358:	0692      	lsls	r2, r2, #26
 801535a:	d42b      	bmi.n	80153b4 <_printf_common+0xb0>
 801535c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015360:	4641      	mov	r1, r8
 8015362:	4638      	mov	r0, r7
 8015364:	47c8      	blx	r9
 8015366:	3001      	adds	r0, #1
 8015368:	d01e      	beq.n	80153a8 <_printf_common+0xa4>
 801536a:	6823      	ldr	r3, [r4, #0]
 801536c:	6922      	ldr	r2, [r4, #16]
 801536e:	f003 0306 	and.w	r3, r3, #6
 8015372:	2b04      	cmp	r3, #4
 8015374:	bf02      	ittt	eq
 8015376:	68e5      	ldreq	r5, [r4, #12]
 8015378:	6833      	ldreq	r3, [r6, #0]
 801537a:	1aed      	subeq	r5, r5, r3
 801537c:	68a3      	ldr	r3, [r4, #8]
 801537e:	bf0c      	ite	eq
 8015380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015384:	2500      	movne	r5, #0
 8015386:	4293      	cmp	r3, r2
 8015388:	bfc4      	itt	gt
 801538a:	1a9b      	subgt	r3, r3, r2
 801538c:	18ed      	addgt	r5, r5, r3
 801538e:	2600      	movs	r6, #0
 8015390:	341a      	adds	r4, #26
 8015392:	42b5      	cmp	r5, r6
 8015394:	d11a      	bne.n	80153cc <_printf_common+0xc8>
 8015396:	2000      	movs	r0, #0
 8015398:	e008      	b.n	80153ac <_printf_common+0xa8>
 801539a:	2301      	movs	r3, #1
 801539c:	4652      	mov	r2, sl
 801539e:	4641      	mov	r1, r8
 80153a0:	4638      	mov	r0, r7
 80153a2:	47c8      	blx	r9
 80153a4:	3001      	adds	r0, #1
 80153a6:	d103      	bne.n	80153b0 <_printf_common+0xac>
 80153a8:	f04f 30ff 	mov.w	r0, #4294967295
 80153ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153b0:	3501      	adds	r5, #1
 80153b2:	e7c6      	b.n	8015342 <_printf_common+0x3e>
 80153b4:	18e1      	adds	r1, r4, r3
 80153b6:	1c5a      	adds	r2, r3, #1
 80153b8:	2030      	movs	r0, #48	@ 0x30
 80153ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80153be:	4422      	add	r2, r4
 80153c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80153c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80153c8:	3302      	adds	r3, #2
 80153ca:	e7c7      	b.n	801535c <_printf_common+0x58>
 80153cc:	2301      	movs	r3, #1
 80153ce:	4622      	mov	r2, r4
 80153d0:	4641      	mov	r1, r8
 80153d2:	4638      	mov	r0, r7
 80153d4:	47c8      	blx	r9
 80153d6:	3001      	adds	r0, #1
 80153d8:	d0e6      	beq.n	80153a8 <_printf_common+0xa4>
 80153da:	3601      	adds	r6, #1
 80153dc:	e7d9      	b.n	8015392 <_printf_common+0x8e>
	...

080153e0 <_printf_i>:
 80153e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80153e4:	7e0f      	ldrb	r7, [r1, #24]
 80153e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80153e8:	2f78      	cmp	r7, #120	@ 0x78
 80153ea:	4691      	mov	r9, r2
 80153ec:	4680      	mov	r8, r0
 80153ee:	460c      	mov	r4, r1
 80153f0:	469a      	mov	sl, r3
 80153f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80153f6:	d807      	bhi.n	8015408 <_printf_i+0x28>
 80153f8:	2f62      	cmp	r7, #98	@ 0x62
 80153fa:	d80a      	bhi.n	8015412 <_printf_i+0x32>
 80153fc:	2f00      	cmp	r7, #0
 80153fe:	f000 80d2 	beq.w	80155a6 <_printf_i+0x1c6>
 8015402:	2f58      	cmp	r7, #88	@ 0x58
 8015404:	f000 80b9 	beq.w	801557a <_printf_i+0x19a>
 8015408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801540c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015410:	e03a      	b.n	8015488 <_printf_i+0xa8>
 8015412:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015416:	2b15      	cmp	r3, #21
 8015418:	d8f6      	bhi.n	8015408 <_printf_i+0x28>
 801541a:	a101      	add	r1, pc, #4	@ (adr r1, 8015420 <_printf_i+0x40>)
 801541c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015420:	08015479 	.word	0x08015479
 8015424:	0801548d 	.word	0x0801548d
 8015428:	08015409 	.word	0x08015409
 801542c:	08015409 	.word	0x08015409
 8015430:	08015409 	.word	0x08015409
 8015434:	08015409 	.word	0x08015409
 8015438:	0801548d 	.word	0x0801548d
 801543c:	08015409 	.word	0x08015409
 8015440:	08015409 	.word	0x08015409
 8015444:	08015409 	.word	0x08015409
 8015448:	08015409 	.word	0x08015409
 801544c:	0801558d 	.word	0x0801558d
 8015450:	080154b7 	.word	0x080154b7
 8015454:	08015547 	.word	0x08015547
 8015458:	08015409 	.word	0x08015409
 801545c:	08015409 	.word	0x08015409
 8015460:	080155af 	.word	0x080155af
 8015464:	08015409 	.word	0x08015409
 8015468:	080154b7 	.word	0x080154b7
 801546c:	08015409 	.word	0x08015409
 8015470:	08015409 	.word	0x08015409
 8015474:	0801554f 	.word	0x0801554f
 8015478:	6833      	ldr	r3, [r6, #0]
 801547a:	1d1a      	adds	r2, r3, #4
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	6032      	str	r2, [r6, #0]
 8015480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015484:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015488:	2301      	movs	r3, #1
 801548a:	e09d      	b.n	80155c8 <_printf_i+0x1e8>
 801548c:	6833      	ldr	r3, [r6, #0]
 801548e:	6820      	ldr	r0, [r4, #0]
 8015490:	1d19      	adds	r1, r3, #4
 8015492:	6031      	str	r1, [r6, #0]
 8015494:	0606      	lsls	r6, r0, #24
 8015496:	d501      	bpl.n	801549c <_printf_i+0xbc>
 8015498:	681d      	ldr	r5, [r3, #0]
 801549a:	e003      	b.n	80154a4 <_printf_i+0xc4>
 801549c:	0645      	lsls	r5, r0, #25
 801549e:	d5fb      	bpl.n	8015498 <_printf_i+0xb8>
 80154a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80154a4:	2d00      	cmp	r5, #0
 80154a6:	da03      	bge.n	80154b0 <_printf_i+0xd0>
 80154a8:	232d      	movs	r3, #45	@ 0x2d
 80154aa:	426d      	negs	r5, r5
 80154ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80154b0:	4859      	ldr	r0, [pc, #356]	@ (8015618 <_printf_i+0x238>)
 80154b2:	230a      	movs	r3, #10
 80154b4:	e011      	b.n	80154da <_printf_i+0xfa>
 80154b6:	6821      	ldr	r1, [r4, #0]
 80154b8:	6833      	ldr	r3, [r6, #0]
 80154ba:	0608      	lsls	r0, r1, #24
 80154bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80154c0:	d402      	bmi.n	80154c8 <_printf_i+0xe8>
 80154c2:	0649      	lsls	r1, r1, #25
 80154c4:	bf48      	it	mi
 80154c6:	b2ad      	uxthmi	r5, r5
 80154c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80154ca:	4853      	ldr	r0, [pc, #332]	@ (8015618 <_printf_i+0x238>)
 80154cc:	6033      	str	r3, [r6, #0]
 80154ce:	bf14      	ite	ne
 80154d0:	230a      	movne	r3, #10
 80154d2:	2308      	moveq	r3, #8
 80154d4:	2100      	movs	r1, #0
 80154d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80154da:	6866      	ldr	r6, [r4, #4]
 80154dc:	60a6      	str	r6, [r4, #8]
 80154de:	2e00      	cmp	r6, #0
 80154e0:	bfa2      	ittt	ge
 80154e2:	6821      	ldrge	r1, [r4, #0]
 80154e4:	f021 0104 	bicge.w	r1, r1, #4
 80154e8:	6021      	strge	r1, [r4, #0]
 80154ea:	b90d      	cbnz	r5, 80154f0 <_printf_i+0x110>
 80154ec:	2e00      	cmp	r6, #0
 80154ee:	d04b      	beq.n	8015588 <_printf_i+0x1a8>
 80154f0:	4616      	mov	r6, r2
 80154f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80154f6:	fb03 5711 	mls	r7, r3, r1, r5
 80154fa:	5dc7      	ldrb	r7, [r0, r7]
 80154fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015500:	462f      	mov	r7, r5
 8015502:	42bb      	cmp	r3, r7
 8015504:	460d      	mov	r5, r1
 8015506:	d9f4      	bls.n	80154f2 <_printf_i+0x112>
 8015508:	2b08      	cmp	r3, #8
 801550a:	d10b      	bne.n	8015524 <_printf_i+0x144>
 801550c:	6823      	ldr	r3, [r4, #0]
 801550e:	07df      	lsls	r7, r3, #31
 8015510:	d508      	bpl.n	8015524 <_printf_i+0x144>
 8015512:	6923      	ldr	r3, [r4, #16]
 8015514:	6861      	ldr	r1, [r4, #4]
 8015516:	4299      	cmp	r1, r3
 8015518:	bfde      	ittt	le
 801551a:	2330      	movle	r3, #48	@ 0x30
 801551c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015520:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015524:	1b92      	subs	r2, r2, r6
 8015526:	6122      	str	r2, [r4, #16]
 8015528:	f8cd a000 	str.w	sl, [sp]
 801552c:	464b      	mov	r3, r9
 801552e:	aa03      	add	r2, sp, #12
 8015530:	4621      	mov	r1, r4
 8015532:	4640      	mov	r0, r8
 8015534:	f7ff fee6 	bl	8015304 <_printf_common>
 8015538:	3001      	adds	r0, #1
 801553a:	d14a      	bne.n	80155d2 <_printf_i+0x1f2>
 801553c:	f04f 30ff 	mov.w	r0, #4294967295
 8015540:	b004      	add	sp, #16
 8015542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015546:	6823      	ldr	r3, [r4, #0]
 8015548:	f043 0320 	orr.w	r3, r3, #32
 801554c:	6023      	str	r3, [r4, #0]
 801554e:	4833      	ldr	r0, [pc, #204]	@ (801561c <_printf_i+0x23c>)
 8015550:	2778      	movs	r7, #120	@ 0x78
 8015552:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015556:	6823      	ldr	r3, [r4, #0]
 8015558:	6831      	ldr	r1, [r6, #0]
 801555a:	061f      	lsls	r7, r3, #24
 801555c:	f851 5b04 	ldr.w	r5, [r1], #4
 8015560:	d402      	bmi.n	8015568 <_printf_i+0x188>
 8015562:	065f      	lsls	r7, r3, #25
 8015564:	bf48      	it	mi
 8015566:	b2ad      	uxthmi	r5, r5
 8015568:	6031      	str	r1, [r6, #0]
 801556a:	07d9      	lsls	r1, r3, #31
 801556c:	bf44      	itt	mi
 801556e:	f043 0320 	orrmi.w	r3, r3, #32
 8015572:	6023      	strmi	r3, [r4, #0]
 8015574:	b11d      	cbz	r5, 801557e <_printf_i+0x19e>
 8015576:	2310      	movs	r3, #16
 8015578:	e7ac      	b.n	80154d4 <_printf_i+0xf4>
 801557a:	4827      	ldr	r0, [pc, #156]	@ (8015618 <_printf_i+0x238>)
 801557c:	e7e9      	b.n	8015552 <_printf_i+0x172>
 801557e:	6823      	ldr	r3, [r4, #0]
 8015580:	f023 0320 	bic.w	r3, r3, #32
 8015584:	6023      	str	r3, [r4, #0]
 8015586:	e7f6      	b.n	8015576 <_printf_i+0x196>
 8015588:	4616      	mov	r6, r2
 801558a:	e7bd      	b.n	8015508 <_printf_i+0x128>
 801558c:	6833      	ldr	r3, [r6, #0]
 801558e:	6825      	ldr	r5, [r4, #0]
 8015590:	6961      	ldr	r1, [r4, #20]
 8015592:	1d18      	adds	r0, r3, #4
 8015594:	6030      	str	r0, [r6, #0]
 8015596:	062e      	lsls	r6, r5, #24
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	d501      	bpl.n	80155a0 <_printf_i+0x1c0>
 801559c:	6019      	str	r1, [r3, #0]
 801559e:	e002      	b.n	80155a6 <_printf_i+0x1c6>
 80155a0:	0668      	lsls	r0, r5, #25
 80155a2:	d5fb      	bpl.n	801559c <_printf_i+0x1bc>
 80155a4:	8019      	strh	r1, [r3, #0]
 80155a6:	2300      	movs	r3, #0
 80155a8:	6123      	str	r3, [r4, #16]
 80155aa:	4616      	mov	r6, r2
 80155ac:	e7bc      	b.n	8015528 <_printf_i+0x148>
 80155ae:	6833      	ldr	r3, [r6, #0]
 80155b0:	1d1a      	adds	r2, r3, #4
 80155b2:	6032      	str	r2, [r6, #0]
 80155b4:	681e      	ldr	r6, [r3, #0]
 80155b6:	6862      	ldr	r2, [r4, #4]
 80155b8:	2100      	movs	r1, #0
 80155ba:	4630      	mov	r0, r6
 80155bc:	f7ea fe08 	bl	80001d0 <memchr>
 80155c0:	b108      	cbz	r0, 80155c6 <_printf_i+0x1e6>
 80155c2:	1b80      	subs	r0, r0, r6
 80155c4:	6060      	str	r0, [r4, #4]
 80155c6:	6863      	ldr	r3, [r4, #4]
 80155c8:	6123      	str	r3, [r4, #16]
 80155ca:	2300      	movs	r3, #0
 80155cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80155d0:	e7aa      	b.n	8015528 <_printf_i+0x148>
 80155d2:	6923      	ldr	r3, [r4, #16]
 80155d4:	4632      	mov	r2, r6
 80155d6:	4649      	mov	r1, r9
 80155d8:	4640      	mov	r0, r8
 80155da:	47d0      	blx	sl
 80155dc:	3001      	adds	r0, #1
 80155de:	d0ad      	beq.n	801553c <_printf_i+0x15c>
 80155e0:	6823      	ldr	r3, [r4, #0]
 80155e2:	079b      	lsls	r3, r3, #30
 80155e4:	d413      	bmi.n	801560e <_printf_i+0x22e>
 80155e6:	68e0      	ldr	r0, [r4, #12]
 80155e8:	9b03      	ldr	r3, [sp, #12]
 80155ea:	4298      	cmp	r0, r3
 80155ec:	bfb8      	it	lt
 80155ee:	4618      	movlt	r0, r3
 80155f0:	e7a6      	b.n	8015540 <_printf_i+0x160>
 80155f2:	2301      	movs	r3, #1
 80155f4:	4632      	mov	r2, r6
 80155f6:	4649      	mov	r1, r9
 80155f8:	4640      	mov	r0, r8
 80155fa:	47d0      	blx	sl
 80155fc:	3001      	adds	r0, #1
 80155fe:	d09d      	beq.n	801553c <_printf_i+0x15c>
 8015600:	3501      	adds	r5, #1
 8015602:	68e3      	ldr	r3, [r4, #12]
 8015604:	9903      	ldr	r1, [sp, #12]
 8015606:	1a5b      	subs	r3, r3, r1
 8015608:	42ab      	cmp	r3, r5
 801560a:	dcf2      	bgt.n	80155f2 <_printf_i+0x212>
 801560c:	e7eb      	b.n	80155e6 <_printf_i+0x206>
 801560e:	2500      	movs	r5, #0
 8015610:	f104 0619 	add.w	r6, r4, #25
 8015614:	e7f5      	b.n	8015602 <_printf_i+0x222>
 8015616:	bf00      	nop
 8015618:	0801f0a1 	.word	0x0801f0a1
 801561c:	0801f0b2 	.word	0x0801f0b2

08015620 <std>:
 8015620:	2300      	movs	r3, #0
 8015622:	b510      	push	{r4, lr}
 8015624:	4604      	mov	r4, r0
 8015626:	e9c0 3300 	strd	r3, r3, [r0]
 801562a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801562e:	6083      	str	r3, [r0, #8]
 8015630:	8181      	strh	r1, [r0, #12]
 8015632:	6643      	str	r3, [r0, #100]	@ 0x64
 8015634:	81c2      	strh	r2, [r0, #14]
 8015636:	6183      	str	r3, [r0, #24]
 8015638:	4619      	mov	r1, r3
 801563a:	2208      	movs	r2, #8
 801563c:	305c      	adds	r0, #92	@ 0x5c
 801563e:	f000 fa5f 	bl	8015b00 <memset>
 8015642:	4b0d      	ldr	r3, [pc, #52]	@ (8015678 <std+0x58>)
 8015644:	6263      	str	r3, [r4, #36]	@ 0x24
 8015646:	4b0d      	ldr	r3, [pc, #52]	@ (801567c <std+0x5c>)
 8015648:	62a3      	str	r3, [r4, #40]	@ 0x28
 801564a:	4b0d      	ldr	r3, [pc, #52]	@ (8015680 <std+0x60>)
 801564c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801564e:	4b0d      	ldr	r3, [pc, #52]	@ (8015684 <std+0x64>)
 8015650:	6323      	str	r3, [r4, #48]	@ 0x30
 8015652:	4b0d      	ldr	r3, [pc, #52]	@ (8015688 <std+0x68>)
 8015654:	6224      	str	r4, [r4, #32]
 8015656:	429c      	cmp	r4, r3
 8015658:	d006      	beq.n	8015668 <std+0x48>
 801565a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801565e:	4294      	cmp	r4, r2
 8015660:	d002      	beq.n	8015668 <std+0x48>
 8015662:	33d0      	adds	r3, #208	@ 0xd0
 8015664:	429c      	cmp	r4, r3
 8015666:	d105      	bne.n	8015674 <std+0x54>
 8015668:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801566c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015670:	f000 bad2 	b.w	8015c18 <__retarget_lock_init_recursive>
 8015674:	bd10      	pop	{r4, pc}
 8015676:	bf00      	nop
 8015678:	08015895 	.word	0x08015895
 801567c:	080158b7 	.word	0x080158b7
 8015680:	080158ef 	.word	0x080158ef
 8015684:	08015913 	.word	0x08015913
 8015688:	20000788 	.word	0x20000788

0801568c <stdio_exit_handler>:
 801568c:	4a02      	ldr	r2, [pc, #8]	@ (8015698 <stdio_exit_handler+0xc>)
 801568e:	4903      	ldr	r1, [pc, #12]	@ (801569c <stdio_exit_handler+0x10>)
 8015690:	4803      	ldr	r0, [pc, #12]	@ (80156a0 <stdio_exit_handler+0x14>)
 8015692:	f000 b869 	b.w	8015768 <_fwalk_sglue>
 8015696:	bf00      	nop
 8015698:	200001ac 	.word	0x200001ac
 801569c:	080176bd 	.word	0x080176bd
 80156a0:	200001bc 	.word	0x200001bc

080156a4 <cleanup_stdio>:
 80156a4:	6841      	ldr	r1, [r0, #4]
 80156a6:	4b0c      	ldr	r3, [pc, #48]	@ (80156d8 <cleanup_stdio+0x34>)
 80156a8:	4299      	cmp	r1, r3
 80156aa:	b510      	push	{r4, lr}
 80156ac:	4604      	mov	r4, r0
 80156ae:	d001      	beq.n	80156b4 <cleanup_stdio+0x10>
 80156b0:	f002 f804 	bl	80176bc <_fflush_r>
 80156b4:	68a1      	ldr	r1, [r4, #8]
 80156b6:	4b09      	ldr	r3, [pc, #36]	@ (80156dc <cleanup_stdio+0x38>)
 80156b8:	4299      	cmp	r1, r3
 80156ba:	d002      	beq.n	80156c2 <cleanup_stdio+0x1e>
 80156bc:	4620      	mov	r0, r4
 80156be:	f001 fffd 	bl	80176bc <_fflush_r>
 80156c2:	68e1      	ldr	r1, [r4, #12]
 80156c4:	4b06      	ldr	r3, [pc, #24]	@ (80156e0 <cleanup_stdio+0x3c>)
 80156c6:	4299      	cmp	r1, r3
 80156c8:	d004      	beq.n	80156d4 <cleanup_stdio+0x30>
 80156ca:	4620      	mov	r0, r4
 80156cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156d0:	f001 bff4 	b.w	80176bc <_fflush_r>
 80156d4:	bd10      	pop	{r4, pc}
 80156d6:	bf00      	nop
 80156d8:	20000788 	.word	0x20000788
 80156dc:	200007f0 	.word	0x200007f0
 80156e0:	20000858 	.word	0x20000858

080156e4 <global_stdio_init.part.0>:
 80156e4:	b510      	push	{r4, lr}
 80156e6:	4b0b      	ldr	r3, [pc, #44]	@ (8015714 <global_stdio_init.part.0+0x30>)
 80156e8:	4c0b      	ldr	r4, [pc, #44]	@ (8015718 <global_stdio_init.part.0+0x34>)
 80156ea:	4a0c      	ldr	r2, [pc, #48]	@ (801571c <global_stdio_init.part.0+0x38>)
 80156ec:	601a      	str	r2, [r3, #0]
 80156ee:	4620      	mov	r0, r4
 80156f0:	2200      	movs	r2, #0
 80156f2:	2104      	movs	r1, #4
 80156f4:	f7ff ff94 	bl	8015620 <std>
 80156f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80156fc:	2201      	movs	r2, #1
 80156fe:	2109      	movs	r1, #9
 8015700:	f7ff ff8e 	bl	8015620 <std>
 8015704:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015708:	2202      	movs	r2, #2
 801570a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801570e:	2112      	movs	r1, #18
 8015710:	f7ff bf86 	b.w	8015620 <std>
 8015714:	200008c0 	.word	0x200008c0
 8015718:	20000788 	.word	0x20000788
 801571c:	0801568d 	.word	0x0801568d

08015720 <__sfp_lock_acquire>:
 8015720:	4801      	ldr	r0, [pc, #4]	@ (8015728 <__sfp_lock_acquire+0x8>)
 8015722:	f000 ba7a 	b.w	8015c1a <__retarget_lock_acquire_recursive>
 8015726:	bf00      	nop
 8015728:	200008c9 	.word	0x200008c9

0801572c <__sfp_lock_release>:
 801572c:	4801      	ldr	r0, [pc, #4]	@ (8015734 <__sfp_lock_release+0x8>)
 801572e:	f000 ba75 	b.w	8015c1c <__retarget_lock_release_recursive>
 8015732:	bf00      	nop
 8015734:	200008c9 	.word	0x200008c9

08015738 <__sinit>:
 8015738:	b510      	push	{r4, lr}
 801573a:	4604      	mov	r4, r0
 801573c:	f7ff fff0 	bl	8015720 <__sfp_lock_acquire>
 8015740:	6a23      	ldr	r3, [r4, #32]
 8015742:	b11b      	cbz	r3, 801574c <__sinit+0x14>
 8015744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015748:	f7ff bff0 	b.w	801572c <__sfp_lock_release>
 801574c:	4b04      	ldr	r3, [pc, #16]	@ (8015760 <__sinit+0x28>)
 801574e:	6223      	str	r3, [r4, #32]
 8015750:	4b04      	ldr	r3, [pc, #16]	@ (8015764 <__sinit+0x2c>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d1f5      	bne.n	8015744 <__sinit+0xc>
 8015758:	f7ff ffc4 	bl	80156e4 <global_stdio_init.part.0>
 801575c:	e7f2      	b.n	8015744 <__sinit+0xc>
 801575e:	bf00      	nop
 8015760:	080156a5 	.word	0x080156a5
 8015764:	200008c0 	.word	0x200008c0

08015768 <_fwalk_sglue>:
 8015768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801576c:	4607      	mov	r7, r0
 801576e:	4688      	mov	r8, r1
 8015770:	4614      	mov	r4, r2
 8015772:	2600      	movs	r6, #0
 8015774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015778:	f1b9 0901 	subs.w	r9, r9, #1
 801577c:	d505      	bpl.n	801578a <_fwalk_sglue+0x22>
 801577e:	6824      	ldr	r4, [r4, #0]
 8015780:	2c00      	cmp	r4, #0
 8015782:	d1f7      	bne.n	8015774 <_fwalk_sglue+0xc>
 8015784:	4630      	mov	r0, r6
 8015786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801578a:	89ab      	ldrh	r3, [r5, #12]
 801578c:	2b01      	cmp	r3, #1
 801578e:	d907      	bls.n	80157a0 <_fwalk_sglue+0x38>
 8015790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015794:	3301      	adds	r3, #1
 8015796:	d003      	beq.n	80157a0 <_fwalk_sglue+0x38>
 8015798:	4629      	mov	r1, r5
 801579a:	4638      	mov	r0, r7
 801579c:	47c0      	blx	r8
 801579e:	4306      	orrs	r6, r0
 80157a0:	3568      	adds	r5, #104	@ 0x68
 80157a2:	e7e9      	b.n	8015778 <_fwalk_sglue+0x10>

080157a4 <iprintf>:
 80157a4:	b40f      	push	{r0, r1, r2, r3}
 80157a6:	b507      	push	{r0, r1, r2, lr}
 80157a8:	4906      	ldr	r1, [pc, #24]	@ (80157c4 <iprintf+0x20>)
 80157aa:	ab04      	add	r3, sp, #16
 80157ac:	6808      	ldr	r0, [r1, #0]
 80157ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80157b2:	6881      	ldr	r1, [r0, #8]
 80157b4:	9301      	str	r3, [sp, #4]
 80157b6:	f001 fde5 	bl	8017384 <_vfiprintf_r>
 80157ba:	b003      	add	sp, #12
 80157bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80157c0:	b004      	add	sp, #16
 80157c2:	4770      	bx	lr
 80157c4:	200001b8 	.word	0x200001b8

080157c8 <putchar>:
 80157c8:	4b02      	ldr	r3, [pc, #8]	@ (80157d4 <putchar+0xc>)
 80157ca:	4601      	mov	r1, r0
 80157cc:	6818      	ldr	r0, [r3, #0]
 80157ce:	6882      	ldr	r2, [r0, #8]
 80157d0:	f001 bffe 	b.w	80177d0 <_putc_r>
 80157d4:	200001b8 	.word	0x200001b8

080157d8 <_puts_r>:
 80157d8:	6a03      	ldr	r3, [r0, #32]
 80157da:	b570      	push	{r4, r5, r6, lr}
 80157dc:	6884      	ldr	r4, [r0, #8]
 80157de:	4605      	mov	r5, r0
 80157e0:	460e      	mov	r6, r1
 80157e2:	b90b      	cbnz	r3, 80157e8 <_puts_r+0x10>
 80157e4:	f7ff ffa8 	bl	8015738 <__sinit>
 80157e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80157ea:	07db      	lsls	r3, r3, #31
 80157ec:	d405      	bmi.n	80157fa <_puts_r+0x22>
 80157ee:	89a3      	ldrh	r3, [r4, #12]
 80157f0:	0598      	lsls	r0, r3, #22
 80157f2:	d402      	bmi.n	80157fa <_puts_r+0x22>
 80157f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80157f6:	f000 fa10 	bl	8015c1a <__retarget_lock_acquire_recursive>
 80157fa:	89a3      	ldrh	r3, [r4, #12]
 80157fc:	0719      	lsls	r1, r3, #28
 80157fe:	d502      	bpl.n	8015806 <_puts_r+0x2e>
 8015800:	6923      	ldr	r3, [r4, #16]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d135      	bne.n	8015872 <_puts_r+0x9a>
 8015806:	4621      	mov	r1, r4
 8015808:	4628      	mov	r0, r5
 801580a:	f000 f909 	bl	8015a20 <__swsetup_r>
 801580e:	b380      	cbz	r0, 8015872 <_puts_r+0x9a>
 8015810:	f04f 35ff 	mov.w	r5, #4294967295
 8015814:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015816:	07da      	lsls	r2, r3, #31
 8015818:	d405      	bmi.n	8015826 <_puts_r+0x4e>
 801581a:	89a3      	ldrh	r3, [r4, #12]
 801581c:	059b      	lsls	r3, r3, #22
 801581e:	d402      	bmi.n	8015826 <_puts_r+0x4e>
 8015820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015822:	f000 f9fb 	bl	8015c1c <__retarget_lock_release_recursive>
 8015826:	4628      	mov	r0, r5
 8015828:	bd70      	pop	{r4, r5, r6, pc}
 801582a:	2b00      	cmp	r3, #0
 801582c:	da04      	bge.n	8015838 <_puts_r+0x60>
 801582e:	69a2      	ldr	r2, [r4, #24]
 8015830:	429a      	cmp	r2, r3
 8015832:	dc17      	bgt.n	8015864 <_puts_r+0x8c>
 8015834:	290a      	cmp	r1, #10
 8015836:	d015      	beq.n	8015864 <_puts_r+0x8c>
 8015838:	6823      	ldr	r3, [r4, #0]
 801583a:	1c5a      	adds	r2, r3, #1
 801583c:	6022      	str	r2, [r4, #0]
 801583e:	7019      	strb	r1, [r3, #0]
 8015840:	68a3      	ldr	r3, [r4, #8]
 8015842:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015846:	3b01      	subs	r3, #1
 8015848:	60a3      	str	r3, [r4, #8]
 801584a:	2900      	cmp	r1, #0
 801584c:	d1ed      	bne.n	801582a <_puts_r+0x52>
 801584e:	2b00      	cmp	r3, #0
 8015850:	da11      	bge.n	8015876 <_puts_r+0x9e>
 8015852:	4622      	mov	r2, r4
 8015854:	210a      	movs	r1, #10
 8015856:	4628      	mov	r0, r5
 8015858:	f000 f8a4 	bl	80159a4 <__swbuf_r>
 801585c:	3001      	adds	r0, #1
 801585e:	d0d7      	beq.n	8015810 <_puts_r+0x38>
 8015860:	250a      	movs	r5, #10
 8015862:	e7d7      	b.n	8015814 <_puts_r+0x3c>
 8015864:	4622      	mov	r2, r4
 8015866:	4628      	mov	r0, r5
 8015868:	f000 f89c 	bl	80159a4 <__swbuf_r>
 801586c:	3001      	adds	r0, #1
 801586e:	d1e7      	bne.n	8015840 <_puts_r+0x68>
 8015870:	e7ce      	b.n	8015810 <_puts_r+0x38>
 8015872:	3e01      	subs	r6, #1
 8015874:	e7e4      	b.n	8015840 <_puts_r+0x68>
 8015876:	6823      	ldr	r3, [r4, #0]
 8015878:	1c5a      	adds	r2, r3, #1
 801587a:	6022      	str	r2, [r4, #0]
 801587c:	220a      	movs	r2, #10
 801587e:	701a      	strb	r2, [r3, #0]
 8015880:	e7ee      	b.n	8015860 <_puts_r+0x88>
	...

08015884 <puts>:
 8015884:	4b02      	ldr	r3, [pc, #8]	@ (8015890 <puts+0xc>)
 8015886:	4601      	mov	r1, r0
 8015888:	6818      	ldr	r0, [r3, #0]
 801588a:	f7ff bfa5 	b.w	80157d8 <_puts_r>
 801588e:	bf00      	nop
 8015890:	200001b8 	.word	0x200001b8

08015894 <__sread>:
 8015894:	b510      	push	{r4, lr}
 8015896:	460c      	mov	r4, r1
 8015898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801589c:	f000 f95e 	bl	8015b5c <_read_r>
 80158a0:	2800      	cmp	r0, #0
 80158a2:	bfab      	itete	ge
 80158a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80158a6:	89a3      	ldrhlt	r3, [r4, #12]
 80158a8:	181b      	addge	r3, r3, r0
 80158aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80158ae:	bfac      	ite	ge
 80158b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80158b2:	81a3      	strhlt	r3, [r4, #12]
 80158b4:	bd10      	pop	{r4, pc}

080158b6 <__swrite>:
 80158b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158ba:	461f      	mov	r7, r3
 80158bc:	898b      	ldrh	r3, [r1, #12]
 80158be:	05db      	lsls	r3, r3, #23
 80158c0:	4605      	mov	r5, r0
 80158c2:	460c      	mov	r4, r1
 80158c4:	4616      	mov	r6, r2
 80158c6:	d505      	bpl.n	80158d4 <__swrite+0x1e>
 80158c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158cc:	2302      	movs	r3, #2
 80158ce:	2200      	movs	r2, #0
 80158d0:	f000 f932 	bl	8015b38 <_lseek_r>
 80158d4:	89a3      	ldrh	r3, [r4, #12]
 80158d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80158da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80158de:	81a3      	strh	r3, [r4, #12]
 80158e0:	4632      	mov	r2, r6
 80158e2:	463b      	mov	r3, r7
 80158e4:	4628      	mov	r0, r5
 80158e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158ea:	f000 b959 	b.w	8015ba0 <_write_r>

080158ee <__sseek>:
 80158ee:	b510      	push	{r4, lr}
 80158f0:	460c      	mov	r4, r1
 80158f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158f6:	f000 f91f 	bl	8015b38 <_lseek_r>
 80158fa:	1c43      	adds	r3, r0, #1
 80158fc:	89a3      	ldrh	r3, [r4, #12]
 80158fe:	bf15      	itete	ne
 8015900:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015902:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015906:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801590a:	81a3      	strheq	r3, [r4, #12]
 801590c:	bf18      	it	ne
 801590e:	81a3      	strhne	r3, [r4, #12]
 8015910:	bd10      	pop	{r4, pc}

08015912 <__sclose>:
 8015912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015916:	f000 b8ff 	b.w	8015b18 <_close_r>
	...

0801591c <viprintf>:
 801591c:	460b      	mov	r3, r1
 801591e:	4903      	ldr	r1, [pc, #12]	@ (801592c <viprintf+0x10>)
 8015920:	4602      	mov	r2, r0
 8015922:	6808      	ldr	r0, [r1, #0]
 8015924:	6881      	ldr	r1, [r0, #8]
 8015926:	f001 bd2d 	b.w	8017384 <_vfiprintf_r>
 801592a:	bf00      	nop
 801592c:	200001b8 	.word	0x200001b8

08015930 <_vsniprintf_r>:
 8015930:	b530      	push	{r4, r5, lr}
 8015932:	4614      	mov	r4, r2
 8015934:	2c00      	cmp	r4, #0
 8015936:	b09b      	sub	sp, #108	@ 0x6c
 8015938:	4605      	mov	r5, r0
 801593a:	461a      	mov	r2, r3
 801593c:	da05      	bge.n	801594a <_vsniprintf_r+0x1a>
 801593e:	238b      	movs	r3, #139	@ 0x8b
 8015940:	6003      	str	r3, [r0, #0]
 8015942:	f04f 30ff 	mov.w	r0, #4294967295
 8015946:	b01b      	add	sp, #108	@ 0x6c
 8015948:	bd30      	pop	{r4, r5, pc}
 801594a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801594e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015952:	bf14      	ite	ne
 8015954:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015958:	4623      	moveq	r3, r4
 801595a:	9302      	str	r3, [sp, #8]
 801595c:	9305      	str	r3, [sp, #20]
 801595e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015962:	9100      	str	r1, [sp, #0]
 8015964:	9104      	str	r1, [sp, #16]
 8015966:	f8ad 300e 	strh.w	r3, [sp, #14]
 801596a:	4669      	mov	r1, sp
 801596c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801596e:	f001 fbe3 	bl	8017138 <_svfiprintf_r>
 8015972:	1c43      	adds	r3, r0, #1
 8015974:	bfbc      	itt	lt
 8015976:	238b      	movlt	r3, #139	@ 0x8b
 8015978:	602b      	strlt	r3, [r5, #0]
 801597a:	2c00      	cmp	r4, #0
 801597c:	d0e3      	beq.n	8015946 <_vsniprintf_r+0x16>
 801597e:	9b00      	ldr	r3, [sp, #0]
 8015980:	2200      	movs	r2, #0
 8015982:	701a      	strb	r2, [r3, #0]
 8015984:	e7df      	b.n	8015946 <_vsniprintf_r+0x16>
	...

08015988 <vsniprintf>:
 8015988:	b507      	push	{r0, r1, r2, lr}
 801598a:	9300      	str	r3, [sp, #0]
 801598c:	4613      	mov	r3, r2
 801598e:	460a      	mov	r2, r1
 8015990:	4601      	mov	r1, r0
 8015992:	4803      	ldr	r0, [pc, #12]	@ (80159a0 <vsniprintf+0x18>)
 8015994:	6800      	ldr	r0, [r0, #0]
 8015996:	f7ff ffcb 	bl	8015930 <_vsniprintf_r>
 801599a:	b003      	add	sp, #12
 801599c:	f85d fb04 	ldr.w	pc, [sp], #4
 80159a0:	200001b8 	.word	0x200001b8

080159a4 <__swbuf_r>:
 80159a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159a6:	460e      	mov	r6, r1
 80159a8:	4614      	mov	r4, r2
 80159aa:	4605      	mov	r5, r0
 80159ac:	b118      	cbz	r0, 80159b6 <__swbuf_r+0x12>
 80159ae:	6a03      	ldr	r3, [r0, #32]
 80159b0:	b90b      	cbnz	r3, 80159b6 <__swbuf_r+0x12>
 80159b2:	f7ff fec1 	bl	8015738 <__sinit>
 80159b6:	69a3      	ldr	r3, [r4, #24]
 80159b8:	60a3      	str	r3, [r4, #8]
 80159ba:	89a3      	ldrh	r3, [r4, #12]
 80159bc:	071a      	lsls	r2, r3, #28
 80159be:	d501      	bpl.n	80159c4 <__swbuf_r+0x20>
 80159c0:	6923      	ldr	r3, [r4, #16]
 80159c2:	b943      	cbnz	r3, 80159d6 <__swbuf_r+0x32>
 80159c4:	4621      	mov	r1, r4
 80159c6:	4628      	mov	r0, r5
 80159c8:	f000 f82a 	bl	8015a20 <__swsetup_r>
 80159cc:	b118      	cbz	r0, 80159d6 <__swbuf_r+0x32>
 80159ce:	f04f 37ff 	mov.w	r7, #4294967295
 80159d2:	4638      	mov	r0, r7
 80159d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159d6:	6823      	ldr	r3, [r4, #0]
 80159d8:	6922      	ldr	r2, [r4, #16]
 80159da:	1a98      	subs	r0, r3, r2
 80159dc:	6963      	ldr	r3, [r4, #20]
 80159de:	b2f6      	uxtb	r6, r6
 80159e0:	4283      	cmp	r3, r0
 80159e2:	4637      	mov	r7, r6
 80159e4:	dc05      	bgt.n	80159f2 <__swbuf_r+0x4e>
 80159e6:	4621      	mov	r1, r4
 80159e8:	4628      	mov	r0, r5
 80159ea:	f001 fe67 	bl	80176bc <_fflush_r>
 80159ee:	2800      	cmp	r0, #0
 80159f0:	d1ed      	bne.n	80159ce <__swbuf_r+0x2a>
 80159f2:	68a3      	ldr	r3, [r4, #8]
 80159f4:	3b01      	subs	r3, #1
 80159f6:	60a3      	str	r3, [r4, #8]
 80159f8:	6823      	ldr	r3, [r4, #0]
 80159fa:	1c5a      	adds	r2, r3, #1
 80159fc:	6022      	str	r2, [r4, #0]
 80159fe:	701e      	strb	r6, [r3, #0]
 8015a00:	6962      	ldr	r2, [r4, #20]
 8015a02:	1c43      	adds	r3, r0, #1
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d004      	beq.n	8015a12 <__swbuf_r+0x6e>
 8015a08:	89a3      	ldrh	r3, [r4, #12]
 8015a0a:	07db      	lsls	r3, r3, #31
 8015a0c:	d5e1      	bpl.n	80159d2 <__swbuf_r+0x2e>
 8015a0e:	2e0a      	cmp	r6, #10
 8015a10:	d1df      	bne.n	80159d2 <__swbuf_r+0x2e>
 8015a12:	4621      	mov	r1, r4
 8015a14:	4628      	mov	r0, r5
 8015a16:	f001 fe51 	bl	80176bc <_fflush_r>
 8015a1a:	2800      	cmp	r0, #0
 8015a1c:	d0d9      	beq.n	80159d2 <__swbuf_r+0x2e>
 8015a1e:	e7d6      	b.n	80159ce <__swbuf_r+0x2a>

08015a20 <__swsetup_r>:
 8015a20:	b538      	push	{r3, r4, r5, lr}
 8015a22:	4b29      	ldr	r3, [pc, #164]	@ (8015ac8 <__swsetup_r+0xa8>)
 8015a24:	4605      	mov	r5, r0
 8015a26:	6818      	ldr	r0, [r3, #0]
 8015a28:	460c      	mov	r4, r1
 8015a2a:	b118      	cbz	r0, 8015a34 <__swsetup_r+0x14>
 8015a2c:	6a03      	ldr	r3, [r0, #32]
 8015a2e:	b90b      	cbnz	r3, 8015a34 <__swsetup_r+0x14>
 8015a30:	f7ff fe82 	bl	8015738 <__sinit>
 8015a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a38:	0719      	lsls	r1, r3, #28
 8015a3a:	d422      	bmi.n	8015a82 <__swsetup_r+0x62>
 8015a3c:	06da      	lsls	r2, r3, #27
 8015a3e:	d407      	bmi.n	8015a50 <__swsetup_r+0x30>
 8015a40:	2209      	movs	r2, #9
 8015a42:	602a      	str	r2, [r5, #0]
 8015a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015a48:	81a3      	strh	r3, [r4, #12]
 8015a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a4e:	e033      	b.n	8015ab8 <__swsetup_r+0x98>
 8015a50:	0758      	lsls	r0, r3, #29
 8015a52:	d512      	bpl.n	8015a7a <__swsetup_r+0x5a>
 8015a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015a56:	b141      	cbz	r1, 8015a6a <__swsetup_r+0x4a>
 8015a58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015a5c:	4299      	cmp	r1, r3
 8015a5e:	d002      	beq.n	8015a66 <__swsetup_r+0x46>
 8015a60:	4628      	mov	r0, r5
 8015a62:	f000 ff41 	bl	80168e8 <_free_r>
 8015a66:	2300      	movs	r3, #0
 8015a68:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a6a:	89a3      	ldrh	r3, [r4, #12]
 8015a6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015a70:	81a3      	strh	r3, [r4, #12]
 8015a72:	2300      	movs	r3, #0
 8015a74:	6063      	str	r3, [r4, #4]
 8015a76:	6923      	ldr	r3, [r4, #16]
 8015a78:	6023      	str	r3, [r4, #0]
 8015a7a:	89a3      	ldrh	r3, [r4, #12]
 8015a7c:	f043 0308 	orr.w	r3, r3, #8
 8015a80:	81a3      	strh	r3, [r4, #12]
 8015a82:	6923      	ldr	r3, [r4, #16]
 8015a84:	b94b      	cbnz	r3, 8015a9a <__swsetup_r+0x7a>
 8015a86:	89a3      	ldrh	r3, [r4, #12]
 8015a88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015a90:	d003      	beq.n	8015a9a <__swsetup_r+0x7a>
 8015a92:	4621      	mov	r1, r4
 8015a94:	4628      	mov	r0, r5
 8015a96:	f001 fe5f 	bl	8017758 <__smakebuf_r>
 8015a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a9e:	f013 0201 	ands.w	r2, r3, #1
 8015aa2:	d00a      	beq.n	8015aba <__swsetup_r+0x9a>
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	60a2      	str	r2, [r4, #8]
 8015aa8:	6962      	ldr	r2, [r4, #20]
 8015aaa:	4252      	negs	r2, r2
 8015aac:	61a2      	str	r2, [r4, #24]
 8015aae:	6922      	ldr	r2, [r4, #16]
 8015ab0:	b942      	cbnz	r2, 8015ac4 <__swsetup_r+0xa4>
 8015ab2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015ab6:	d1c5      	bne.n	8015a44 <__swsetup_r+0x24>
 8015ab8:	bd38      	pop	{r3, r4, r5, pc}
 8015aba:	0799      	lsls	r1, r3, #30
 8015abc:	bf58      	it	pl
 8015abe:	6962      	ldrpl	r2, [r4, #20]
 8015ac0:	60a2      	str	r2, [r4, #8]
 8015ac2:	e7f4      	b.n	8015aae <__swsetup_r+0x8e>
 8015ac4:	2000      	movs	r0, #0
 8015ac6:	e7f7      	b.n	8015ab8 <__swsetup_r+0x98>
 8015ac8:	200001b8 	.word	0x200001b8

08015acc <memmove>:
 8015acc:	4288      	cmp	r0, r1
 8015ace:	b510      	push	{r4, lr}
 8015ad0:	eb01 0402 	add.w	r4, r1, r2
 8015ad4:	d902      	bls.n	8015adc <memmove+0x10>
 8015ad6:	4284      	cmp	r4, r0
 8015ad8:	4623      	mov	r3, r4
 8015ada:	d807      	bhi.n	8015aec <memmove+0x20>
 8015adc:	1e43      	subs	r3, r0, #1
 8015ade:	42a1      	cmp	r1, r4
 8015ae0:	d008      	beq.n	8015af4 <memmove+0x28>
 8015ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015aea:	e7f8      	b.n	8015ade <memmove+0x12>
 8015aec:	4402      	add	r2, r0
 8015aee:	4601      	mov	r1, r0
 8015af0:	428a      	cmp	r2, r1
 8015af2:	d100      	bne.n	8015af6 <memmove+0x2a>
 8015af4:	bd10      	pop	{r4, pc}
 8015af6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015afa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015afe:	e7f7      	b.n	8015af0 <memmove+0x24>

08015b00 <memset>:
 8015b00:	4402      	add	r2, r0
 8015b02:	4603      	mov	r3, r0
 8015b04:	4293      	cmp	r3, r2
 8015b06:	d100      	bne.n	8015b0a <memset+0xa>
 8015b08:	4770      	bx	lr
 8015b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8015b0e:	e7f9      	b.n	8015b04 <memset+0x4>

08015b10 <_localeconv_r>:
 8015b10:	4800      	ldr	r0, [pc, #0]	@ (8015b14 <_localeconv_r+0x4>)
 8015b12:	4770      	bx	lr
 8015b14:	200002f8 	.word	0x200002f8

08015b18 <_close_r>:
 8015b18:	b538      	push	{r3, r4, r5, lr}
 8015b1a:	4d06      	ldr	r5, [pc, #24]	@ (8015b34 <_close_r+0x1c>)
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	4604      	mov	r4, r0
 8015b20:	4608      	mov	r0, r1
 8015b22:	602b      	str	r3, [r5, #0]
 8015b24:	f7f4 fed6 	bl	800a8d4 <_close>
 8015b28:	1c43      	adds	r3, r0, #1
 8015b2a:	d102      	bne.n	8015b32 <_close_r+0x1a>
 8015b2c:	682b      	ldr	r3, [r5, #0]
 8015b2e:	b103      	cbz	r3, 8015b32 <_close_r+0x1a>
 8015b30:	6023      	str	r3, [r4, #0]
 8015b32:	bd38      	pop	{r3, r4, r5, pc}
 8015b34:	200008c4 	.word	0x200008c4

08015b38 <_lseek_r>:
 8015b38:	b538      	push	{r3, r4, r5, lr}
 8015b3a:	4d07      	ldr	r5, [pc, #28]	@ (8015b58 <_lseek_r+0x20>)
 8015b3c:	4604      	mov	r4, r0
 8015b3e:	4608      	mov	r0, r1
 8015b40:	4611      	mov	r1, r2
 8015b42:	2200      	movs	r2, #0
 8015b44:	602a      	str	r2, [r5, #0]
 8015b46:	461a      	mov	r2, r3
 8015b48:	f7f4 fee3 	bl	800a912 <_lseek>
 8015b4c:	1c43      	adds	r3, r0, #1
 8015b4e:	d102      	bne.n	8015b56 <_lseek_r+0x1e>
 8015b50:	682b      	ldr	r3, [r5, #0]
 8015b52:	b103      	cbz	r3, 8015b56 <_lseek_r+0x1e>
 8015b54:	6023      	str	r3, [r4, #0]
 8015b56:	bd38      	pop	{r3, r4, r5, pc}
 8015b58:	200008c4 	.word	0x200008c4

08015b5c <_read_r>:
 8015b5c:	b538      	push	{r3, r4, r5, lr}
 8015b5e:	4d07      	ldr	r5, [pc, #28]	@ (8015b7c <_read_r+0x20>)
 8015b60:	4604      	mov	r4, r0
 8015b62:	4608      	mov	r0, r1
 8015b64:	4611      	mov	r1, r2
 8015b66:	2200      	movs	r2, #0
 8015b68:	602a      	str	r2, [r5, #0]
 8015b6a:	461a      	mov	r2, r3
 8015b6c:	f7f4 feee 	bl	800a94c <_read>
 8015b70:	1c43      	adds	r3, r0, #1
 8015b72:	d102      	bne.n	8015b7a <_read_r+0x1e>
 8015b74:	682b      	ldr	r3, [r5, #0]
 8015b76:	b103      	cbz	r3, 8015b7a <_read_r+0x1e>
 8015b78:	6023      	str	r3, [r4, #0]
 8015b7a:	bd38      	pop	{r3, r4, r5, pc}
 8015b7c:	200008c4 	.word	0x200008c4

08015b80 <_sbrk_r>:
 8015b80:	b538      	push	{r3, r4, r5, lr}
 8015b82:	4d06      	ldr	r5, [pc, #24]	@ (8015b9c <_sbrk_r+0x1c>)
 8015b84:	2300      	movs	r3, #0
 8015b86:	4604      	mov	r4, r0
 8015b88:	4608      	mov	r0, r1
 8015b8a:	602b      	str	r3, [r5, #0]
 8015b8c:	f7f4 ff02 	bl	800a994 <_sbrk>
 8015b90:	1c43      	adds	r3, r0, #1
 8015b92:	d102      	bne.n	8015b9a <_sbrk_r+0x1a>
 8015b94:	682b      	ldr	r3, [r5, #0]
 8015b96:	b103      	cbz	r3, 8015b9a <_sbrk_r+0x1a>
 8015b98:	6023      	str	r3, [r4, #0]
 8015b9a:	bd38      	pop	{r3, r4, r5, pc}
 8015b9c:	200008c4 	.word	0x200008c4

08015ba0 <_write_r>:
 8015ba0:	b538      	push	{r3, r4, r5, lr}
 8015ba2:	4d07      	ldr	r5, [pc, #28]	@ (8015bc0 <_write_r+0x20>)
 8015ba4:	4604      	mov	r4, r0
 8015ba6:	4608      	mov	r0, r1
 8015ba8:	4611      	mov	r1, r2
 8015baa:	2200      	movs	r2, #0
 8015bac:	602a      	str	r2, [r5, #0]
 8015bae:	461a      	mov	r2, r3
 8015bb0:	f7f4 feda 	bl	800a968 <_write>
 8015bb4:	1c43      	adds	r3, r0, #1
 8015bb6:	d102      	bne.n	8015bbe <_write_r+0x1e>
 8015bb8:	682b      	ldr	r3, [r5, #0]
 8015bba:	b103      	cbz	r3, 8015bbe <_write_r+0x1e>
 8015bbc:	6023      	str	r3, [r4, #0]
 8015bbe:	bd38      	pop	{r3, r4, r5, pc}
 8015bc0:	200008c4 	.word	0x200008c4

08015bc4 <__errno>:
 8015bc4:	4b01      	ldr	r3, [pc, #4]	@ (8015bcc <__errno+0x8>)
 8015bc6:	6818      	ldr	r0, [r3, #0]
 8015bc8:	4770      	bx	lr
 8015bca:	bf00      	nop
 8015bcc:	200001b8 	.word	0x200001b8

08015bd0 <__libc_init_array>:
 8015bd0:	b570      	push	{r4, r5, r6, lr}
 8015bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8015c08 <__libc_init_array+0x38>)
 8015bd4:	4c0d      	ldr	r4, [pc, #52]	@ (8015c0c <__libc_init_array+0x3c>)
 8015bd6:	1b64      	subs	r4, r4, r5
 8015bd8:	10a4      	asrs	r4, r4, #2
 8015bda:	2600      	movs	r6, #0
 8015bdc:	42a6      	cmp	r6, r4
 8015bde:	d109      	bne.n	8015bf4 <__libc_init_array+0x24>
 8015be0:	4d0b      	ldr	r5, [pc, #44]	@ (8015c10 <__libc_init_array+0x40>)
 8015be2:	4c0c      	ldr	r4, [pc, #48]	@ (8015c14 <__libc_init_array+0x44>)
 8015be4:	f003 fcd2 	bl	801958c <_init>
 8015be8:	1b64      	subs	r4, r4, r5
 8015bea:	10a4      	asrs	r4, r4, #2
 8015bec:	2600      	movs	r6, #0
 8015bee:	42a6      	cmp	r6, r4
 8015bf0:	d105      	bne.n	8015bfe <__libc_init_array+0x2e>
 8015bf2:	bd70      	pop	{r4, r5, r6, pc}
 8015bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8015bf8:	4798      	blx	r3
 8015bfa:	3601      	adds	r6, #1
 8015bfc:	e7ee      	b.n	8015bdc <__libc_init_array+0xc>
 8015bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c02:	4798      	blx	r3
 8015c04:	3601      	adds	r6, #1
 8015c06:	e7f2      	b.n	8015bee <__libc_init_array+0x1e>
 8015c08:	0801f728 	.word	0x0801f728
 8015c0c:	0801f728 	.word	0x0801f728
 8015c10:	0801f728 	.word	0x0801f728
 8015c14:	0801f72c 	.word	0x0801f72c

08015c18 <__retarget_lock_init_recursive>:
 8015c18:	4770      	bx	lr

08015c1a <__retarget_lock_acquire_recursive>:
 8015c1a:	4770      	bx	lr

08015c1c <__retarget_lock_release_recursive>:
 8015c1c:	4770      	bx	lr

08015c1e <strcpy>:
 8015c1e:	4603      	mov	r3, r0
 8015c20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c24:	f803 2b01 	strb.w	r2, [r3], #1
 8015c28:	2a00      	cmp	r2, #0
 8015c2a:	d1f9      	bne.n	8015c20 <strcpy+0x2>
 8015c2c:	4770      	bx	lr

08015c2e <memcpy>:
 8015c2e:	440a      	add	r2, r1
 8015c30:	4291      	cmp	r1, r2
 8015c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8015c36:	d100      	bne.n	8015c3a <memcpy+0xc>
 8015c38:	4770      	bx	lr
 8015c3a:	b510      	push	{r4, lr}
 8015c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015c44:	4291      	cmp	r1, r2
 8015c46:	d1f9      	bne.n	8015c3c <memcpy+0xe>
 8015c48:	bd10      	pop	{r4, pc}

08015c4a <quorem>:
 8015c4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c4e:	6903      	ldr	r3, [r0, #16]
 8015c50:	690c      	ldr	r4, [r1, #16]
 8015c52:	42a3      	cmp	r3, r4
 8015c54:	4607      	mov	r7, r0
 8015c56:	db7e      	blt.n	8015d56 <quorem+0x10c>
 8015c58:	3c01      	subs	r4, #1
 8015c5a:	f101 0814 	add.w	r8, r1, #20
 8015c5e:	00a3      	lsls	r3, r4, #2
 8015c60:	f100 0514 	add.w	r5, r0, #20
 8015c64:	9300      	str	r3, [sp, #0]
 8015c66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015c6a:	9301      	str	r3, [sp, #4]
 8015c6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015c70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015c74:	3301      	adds	r3, #1
 8015c76:	429a      	cmp	r2, r3
 8015c78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015c7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8015c80:	d32e      	bcc.n	8015ce0 <quorem+0x96>
 8015c82:	f04f 0a00 	mov.w	sl, #0
 8015c86:	46c4      	mov	ip, r8
 8015c88:	46ae      	mov	lr, r5
 8015c8a:	46d3      	mov	fp, sl
 8015c8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015c90:	b298      	uxth	r0, r3
 8015c92:	fb06 a000 	mla	r0, r6, r0, sl
 8015c96:	0c02      	lsrs	r2, r0, #16
 8015c98:	0c1b      	lsrs	r3, r3, #16
 8015c9a:	fb06 2303 	mla	r3, r6, r3, r2
 8015c9e:	f8de 2000 	ldr.w	r2, [lr]
 8015ca2:	b280      	uxth	r0, r0
 8015ca4:	b292      	uxth	r2, r2
 8015ca6:	1a12      	subs	r2, r2, r0
 8015ca8:	445a      	add	r2, fp
 8015caa:	f8de 0000 	ldr.w	r0, [lr]
 8015cae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015cb2:	b29b      	uxth	r3, r3
 8015cb4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8015cb8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8015cbc:	b292      	uxth	r2, r2
 8015cbe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8015cc2:	45e1      	cmp	r9, ip
 8015cc4:	f84e 2b04 	str.w	r2, [lr], #4
 8015cc8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8015ccc:	d2de      	bcs.n	8015c8c <quorem+0x42>
 8015cce:	9b00      	ldr	r3, [sp, #0]
 8015cd0:	58eb      	ldr	r3, [r5, r3]
 8015cd2:	b92b      	cbnz	r3, 8015ce0 <quorem+0x96>
 8015cd4:	9b01      	ldr	r3, [sp, #4]
 8015cd6:	3b04      	subs	r3, #4
 8015cd8:	429d      	cmp	r5, r3
 8015cda:	461a      	mov	r2, r3
 8015cdc:	d32f      	bcc.n	8015d3e <quorem+0xf4>
 8015cde:	613c      	str	r4, [r7, #16]
 8015ce0:	4638      	mov	r0, r7
 8015ce2:	f001 f8c5 	bl	8016e70 <__mcmp>
 8015ce6:	2800      	cmp	r0, #0
 8015ce8:	db25      	blt.n	8015d36 <quorem+0xec>
 8015cea:	4629      	mov	r1, r5
 8015cec:	2000      	movs	r0, #0
 8015cee:	f858 2b04 	ldr.w	r2, [r8], #4
 8015cf2:	f8d1 c000 	ldr.w	ip, [r1]
 8015cf6:	fa1f fe82 	uxth.w	lr, r2
 8015cfa:	fa1f f38c 	uxth.w	r3, ip
 8015cfe:	eba3 030e 	sub.w	r3, r3, lr
 8015d02:	4403      	add	r3, r0
 8015d04:	0c12      	lsrs	r2, r2, #16
 8015d06:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8015d0a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015d14:	45c1      	cmp	r9, r8
 8015d16:	f841 3b04 	str.w	r3, [r1], #4
 8015d1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015d1e:	d2e6      	bcs.n	8015cee <quorem+0xa4>
 8015d20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015d24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015d28:	b922      	cbnz	r2, 8015d34 <quorem+0xea>
 8015d2a:	3b04      	subs	r3, #4
 8015d2c:	429d      	cmp	r5, r3
 8015d2e:	461a      	mov	r2, r3
 8015d30:	d30b      	bcc.n	8015d4a <quorem+0x100>
 8015d32:	613c      	str	r4, [r7, #16]
 8015d34:	3601      	adds	r6, #1
 8015d36:	4630      	mov	r0, r6
 8015d38:	b003      	add	sp, #12
 8015d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d3e:	6812      	ldr	r2, [r2, #0]
 8015d40:	3b04      	subs	r3, #4
 8015d42:	2a00      	cmp	r2, #0
 8015d44:	d1cb      	bne.n	8015cde <quorem+0x94>
 8015d46:	3c01      	subs	r4, #1
 8015d48:	e7c6      	b.n	8015cd8 <quorem+0x8e>
 8015d4a:	6812      	ldr	r2, [r2, #0]
 8015d4c:	3b04      	subs	r3, #4
 8015d4e:	2a00      	cmp	r2, #0
 8015d50:	d1ef      	bne.n	8015d32 <quorem+0xe8>
 8015d52:	3c01      	subs	r4, #1
 8015d54:	e7ea      	b.n	8015d2c <quorem+0xe2>
 8015d56:	2000      	movs	r0, #0
 8015d58:	e7ee      	b.n	8015d38 <quorem+0xee>
 8015d5a:	0000      	movs	r0, r0
 8015d5c:	0000      	movs	r0, r0
	...

08015d60 <_dtoa_r>:
 8015d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d64:	69c7      	ldr	r7, [r0, #28]
 8015d66:	b099      	sub	sp, #100	@ 0x64
 8015d68:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015d6c:	ec55 4b10 	vmov	r4, r5, d0
 8015d70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8015d72:	9109      	str	r1, [sp, #36]	@ 0x24
 8015d74:	4683      	mov	fp, r0
 8015d76:	920e      	str	r2, [sp, #56]	@ 0x38
 8015d78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015d7a:	b97f      	cbnz	r7, 8015d9c <_dtoa_r+0x3c>
 8015d7c:	2010      	movs	r0, #16
 8015d7e:	f7fe ff39 	bl	8014bf4 <malloc>
 8015d82:	4602      	mov	r2, r0
 8015d84:	f8cb 001c 	str.w	r0, [fp, #28]
 8015d88:	b920      	cbnz	r0, 8015d94 <_dtoa_r+0x34>
 8015d8a:	4ba7      	ldr	r3, [pc, #668]	@ (8016028 <_dtoa_r+0x2c8>)
 8015d8c:	21ef      	movs	r1, #239	@ 0xef
 8015d8e:	48a7      	ldr	r0, [pc, #668]	@ (801602c <_dtoa_r+0x2cc>)
 8015d90:	f001 fd74 	bl	801787c <__assert_func>
 8015d94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8015d98:	6007      	str	r7, [r0, #0]
 8015d9a:	60c7      	str	r7, [r0, #12]
 8015d9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015da0:	6819      	ldr	r1, [r3, #0]
 8015da2:	b159      	cbz	r1, 8015dbc <_dtoa_r+0x5c>
 8015da4:	685a      	ldr	r2, [r3, #4]
 8015da6:	604a      	str	r2, [r1, #4]
 8015da8:	2301      	movs	r3, #1
 8015daa:	4093      	lsls	r3, r2
 8015dac:	608b      	str	r3, [r1, #8]
 8015dae:	4658      	mov	r0, fp
 8015db0:	f000 fe24 	bl	80169fc <_Bfree>
 8015db4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015db8:	2200      	movs	r2, #0
 8015dba:	601a      	str	r2, [r3, #0]
 8015dbc:	1e2b      	subs	r3, r5, #0
 8015dbe:	bfb9      	ittee	lt
 8015dc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8015dc4:	9303      	strlt	r3, [sp, #12]
 8015dc6:	2300      	movge	r3, #0
 8015dc8:	6033      	strge	r3, [r6, #0]
 8015dca:	9f03      	ldr	r7, [sp, #12]
 8015dcc:	4b98      	ldr	r3, [pc, #608]	@ (8016030 <_dtoa_r+0x2d0>)
 8015dce:	bfbc      	itt	lt
 8015dd0:	2201      	movlt	r2, #1
 8015dd2:	6032      	strlt	r2, [r6, #0]
 8015dd4:	43bb      	bics	r3, r7
 8015dd6:	d112      	bne.n	8015dfe <_dtoa_r+0x9e>
 8015dd8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015dda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8015dde:	6013      	str	r3, [r2, #0]
 8015de0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015de4:	4323      	orrs	r3, r4
 8015de6:	f000 854d 	beq.w	8016884 <_dtoa_r+0xb24>
 8015dea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015dec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8016044 <_dtoa_r+0x2e4>
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	f000 854f 	beq.w	8016894 <_dtoa_r+0xb34>
 8015df6:	f10a 0303 	add.w	r3, sl, #3
 8015dfa:	f000 bd49 	b.w	8016890 <_dtoa_r+0xb30>
 8015dfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015e02:	2200      	movs	r2, #0
 8015e04:	ec51 0b17 	vmov	r0, r1, d7
 8015e08:	2300      	movs	r3, #0
 8015e0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8015e0e:	f7ea fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8015e12:	4680      	mov	r8, r0
 8015e14:	b158      	cbz	r0, 8015e2e <_dtoa_r+0xce>
 8015e16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015e18:	2301      	movs	r3, #1
 8015e1a:	6013      	str	r3, [r2, #0]
 8015e1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015e1e:	b113      	cbz	r3, 8015e26 <_dtoa_r+0xc6>
 8015e20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015e22:	4b84      	ldr	r3, [pc, #528]	@ (8016034 <_dtoa_r+0x2d4>)
 8015e24:	6013      	str	r3, [r2, #0]
 8015e26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8016048 <_dtoa_r+0x2e8>
 8015e2a:	f000 bd33 	b.w	8016894 <_dtoa_r+0xb34>
 8015e2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015e32:	aa16      	add	r2, sp, #88	@ 0x58
 8015e34:	a917      	add	r1, sp, #92	@ 0x5c
 8015e36:	4658      	mov	r0, fp
 8015e38:	f001 f8ca 	bl	8016fd0 <__d2b>
 8015e3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8015e40:	4681      	mov	r9, r0
 8015e42:	2e00      	cmp	r6, #0
 8015e44:	d077      	beq.n	8015f36 <_dtoa_r+0x1d6>
 8015e46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015e48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8015e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015e54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015e58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015e5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015e60:	4619      	mov	r1, r3
 8015e62:	2200      	movs	r2, #0
 8015e64:	4b74      	ldr	r3, [pc, #464]	@ (8016038 <_dtoa_r+0x2d8>)
 8015e66:	f7ea fa0f 	bl	8000288 <__aeabi_dsub>
 8015e6a:	a369      	add	r3, pc, #420	@ (adr r3, 8016010 <_dtoa_r+0x2b0>)
 8015e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e70:	f7ea fbc2 	bl	80005f8 <__aeabi_dmul>
 8015e74:	a368      	add	r3, pc, #416	@ (adr r3, 8016018 <_dtoa_r+0x2b8>)
 8015e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e7a:	f7ea fa07 	bl	800028c <__adddf3>
 8015e7e:	4604      	mov	r4, r0
 8015e80:	4630      	mov	r0, r6
 8015e82:	460d      	mov	r5, r1
 8015e84:	f7ea fb4e 	bl	8000524 <__aeabi_i2d>
 8015e88:	a365      	add	r3, pc, #404	@ (adr r3, 8016020 <_dtoa_r+0x2c0>)
 8015e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e8e:	f7ea fbb3 	bl	80005f8 <__aeabi_dmul>
 8015e92:	4602      	mov	r2, r0
 8015e94:	460b      	mov	r3, r1
 8015e96:	4620      	mov	r0, r4
 8015e98:	4629      	mov	r1, r5
 8015e9a:	f7ea f9f7 	bl	800028c <__adddf3>
 8015e9e:	4604      	mov	r4, r0
 8015ea0:	460d      	mov	r5, r1
 8015ea2:	f7ea fe59 	bl	8000b58 <__aeabi_d2iz>
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	4607      	mov	r7, r0
 8015eaa:	2300      	movs	r3, #0
 8015eac:	4620      	mov	r0, r4
 8015eae:	4629      	mov	r1, r5
 8015eb0:	f7ea fe14 	bl	8000adc <__aeabi_dcmplt>
 8015eb4:	b140      	cbz	r0, 8015ec8 <_dtoa_r+0x168>
 8015eb6:	4638      	mov	r0, r7
 8015eb8:	f7ea fb34 	bl	8000524 <__aeabi_i2d>
 8015ebc:	4622      	mov	r2, r4
 8015ebe:	462b      	mov	r3, r5
 8015ec0:	f7ea fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 8015ec4:	b900      	cbnz	r0, 8015ec8 <_dtoa_r+0x168>
 8015ec6:	3f01      	subs	r7, #1
 8015ec8:	2f16      	cmp	r7, #22
 8015eca:	d851      	bhi.n	8015f70 <_dtoa_r+0x210>
 8015ecc:	4b5b      	ldr	r3, [pc, #364]	@ (801603c <_dtoa_r+0x2dc>)
 8015ece:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ed6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015eda:	f7ea fdff 	bl	8000adc <__aeabi_dcmplt>
 8015ede:	2800      	cmp	r0, #0
 8015ee0:	d048      	beq.n	8015f74 <_dtoa_r+0x214>
 8015ee2:	3f01      	subs	r7, #1
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	9312      	str	r3, [sp, #72]	@ 0x48
 8015ee8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015eea:	1b9b      	subs	r3, r3, r6
 8015eec:	1e5a      	subs	r2, r3, #1
 8015eee:	bf44      	itt	mi
 8015ef0:	f1c3 0801 	rsbmi	r8, r3, #1
 8015ef4:	2300      	movmi	r3, #0
 8015ef6:	9208      	str	r2, [sp, #32]
 8015ef8:	bf54      	ite	pl
 8015efa:	f04f 0800 	movpl.w	r8, #0
 8015efe:	9308      	strmi	r3, [sp, #32]
 8015f00:	2f00      	cmp	r7, #0
 8015f02:	db39      	blt.n	8015f78 <_dtoa_r+0x218>
 8015f04:	9b08      	ldr	r3, [sp, #32]
 8015f06:	970f      	str	r7, [sp, #60]	@ 0x3c
 8015f08:	443b      	add	r3, r7
 8015f0a:	9308      	str	r3, [sp, #32]
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f12:	2b09      	cmp	r3, #9
 8015f14:	d864      	bhi.n	8015fe0 <_dtoa_r+0x280>
 8015f16:	2b05      	cmp	r3, #5
 8015f18:	bfc4      	itt	gt
 8015f1a:	3b04      	subgt	r3, #4
 8015f1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8015f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f20:	f1a3 0302 	sub.w	r3, r3, #2
 8015f24:	bfcc      	ite	gt
 8015f26:	2400      	movgt	r4, #0
 8015f28:	2401      	movle	r4, #1
 8015f2a:	2b03      	cmp	r3, #3
 8015f2c:	d863      	bhi.n	8015ff6 <_dtoa_r+0x296>
 8015f2e:	e8df f003 	tbb	[pc, r3]
 8015f32:	372a      	.short	0x372a
 8015f34:	5535      	.short	0x5535
 8015f36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8015f3a:	441e      	add	r6, r3
 8015f3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015f40:	2b20      	cmp	r3, #32
 8015f42:	bfc1      	itttt	gt
 8015f44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015f48:	409f      	lslgt	r7, r3
 8015f4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015f4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015f52:	bfd6      	itet	le
 8015f54:	f1c3 0320 	rsble	r3, r3, #32
 8015f58:	ea47 0003 	orrgt.w	r0, r7, r3
 8015f5c:	fa04 f003 	lslle.w	r0, r4, r3
 8015f60:	f7ea fad0 	bl	8000504 <__aeabi_ui2d>
 8015f64:	2201      	movs	r2, #1
 8015f66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015f6a:	3e01      	subs	r6, #1
 8015f6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8015f6e:	e777      	b.n	8015e60 <_dtoa_r+0x100>
 8015f70:	2301      	movs	r3, #1
 8015f72:	e7b8      	b.n	8015ee6 <_dtoa_r+0x186>
 8015f74:	9012      	str	r0, [sp, #72]	@ 0x48
 8015f76:	e7b7      	b.n	8015ee8 <_dtoa_r+0x188>
 8015f78:	427b      	negs	r3, r7
 8015f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	eba8 0807 	sub.w	r8, r8, r7
 8015f82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015f84:	e7c4      	b.n	8015f10 <_dtoa_r+0x1b0>
 8015f86:	2300      	movs	r3, #0
 8015f88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	dc35      	bgt.n	8015ffc <_dtoa_r+0x29c>
 8015f90:	2301      	movs	r3, #1
 8015f92:	9300      	str	r3, [sp, #0]
 8015f94:	9307      	str	r3, [sp, #28]
 8015f96:	461a      	mov	r2, r3
 8015f98:	920e      	str	r2, [sp, #56]	@ 0x38
 8015f9a:	e00b      	b.n	8015fb4 <_dtoa_r+0x254>
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	e7f3      	b.n	8015f88 <_dtoa_r+0x228>
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015fa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015fa6:	18fb      	adds	r3, r7, r3
 8015fa8:	9300      	str	r3, [sp, #0]
 8015faa:	3301      	adds	r3, #1
 8015fac:	2b01      	cmp	r3, #1
 8015fae:	9307      	str	r3, [sp, #28]
 8015fb0:	bfb8      	it	lt
 8015fb2:	2301      	movlt	r3, #1
 8015fb4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015fb8:	2100      	movs	r1, #0
 8015fba:	2204      	movs	r2, #4
 8015fbc:	f102 0514 	add.w	r5, r2, #20
 8015fc0:	429d      	cmp	r5, r3
 8015fc2:	d91f      	bls.n	8016004 <_dtoa_r+0x2a4>
 8015fc4:	6041      	str	r1, [r0, #4]
 8015fc6:	4658      	mov	r0, fp
 8015fc8:	f000 fcd8 	bl	801697c <_Balloc>
 8015fcc:	4682      	mov	sl, r0
 8015fce:	2800      	cmp	r0, #0
 8015fd0:	d13c      	bne.n	801604c <_dtoa_r+0x2ec>
 8015fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8016040 <_dtoa_r+0x2e0>)
 8015fd4:	4602      	mov	r2, r0
 8015fd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8015fda:	e6d8      	b.n	8015d8e <_dtoa_r+0x2e>
 8015fdc:	2301      	movs	r3, #1
 8015fde:	e7e0      	b.n	8015fa2 <_dtoa_r+0x242>
 8015fe0:	2401      	movs	r4, #1
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8015fe6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8015fec:	9300      	str	r3, [sp, #0]
 8015fee:	9307      	str	r3, [sp, #28]
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	2312      	movs	r3, #18
 8015ff4:	e7d0      	b.n	8015f98 <_dtoa_r+0x238>
 8015ff6:	2301      	movs	r3, #1
 8015ff8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015ffa:	e7f5      	b.n	8015fe8 <_dtoa_r+0x288>
 8015ffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ffe:	9300      	str	r3, [sp, #0]
 8016000:	9307      	str	r3, [sp, #28]
 8016002:	e7d7      	b.n	8015fb4 <_dtoa_r+0x254>
 8016004:	3101      	adds	r1, #1
 8016006:	0052      	lsls	r2, r2, #1
 8016008:	e7d8      	b.n	8015fbc <_dtoa_r+0x25c>
 801600a:	bf00      	nop
 801600c:	f3af 8000 	nop.w
 8016010:	636f4361 	.word	0x636f4361
 8016014:	3fd287a7 	.word	0x3fd287a7
 8016018:	8b60c8b3 	.word	0x8b60c8b3
 801601c:	3fc68a28 	.word	0x3fc68a28
 8016020:	509f79fb 	.word	0x509f79fb
 8016024:	3fd34413 	.word	0x3fd34413
 8016028:	0801f0d0 	.word	0x0801f0d0
 801602c:	0801f0e7 	.word	0x0801f0e7
 8016030:	7ff00000 	.word	0x7ff00000
 8016034:	0801f0a0 	.word	0x0801f0a0
 8016038:	3ff80000 	.word	0x3ff80000
 801603c:	0801f1e0 	.word	0x0801f1e0
 8016040:	0801f13f 	.word	0x0801f13f
 8016044:	0801f0cc 	.word	0x0801f0cc
 8016048:	0801f09f 	.word	0x0801f09f
 801604c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8016050:	6018      	str	r0, [r3, #0]
 8016052:	9b07      	ldr	r3, [sp, #28]
 8016054:	2b0e      	cmp	r3, #14
 8016056:	f200 80a4 	bhi.w	80161a2 <_dtoa_r+0x442>
 801605a:	2c00      	cmp	r4, #0
 801605c:	f000 80a1 	beq.w	80161a2 <_dtoa_r+0x442>
 8016060:	2f00      	cmp	r7, #0
 8016062:	dd33      	ble.n	80160cc <_dtoa_r+0x36c>
 8016064:	4bad      	ldr	r3, [pc, #692]	@ (801631c <_dtoa_r+0x5bc>)
 8016066:	f007 020f 	and.w	r2, r7, #15
 801606a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801606e:	ed93 7b00 	vldr	d7, [r3]
 8016072:	05f8      	lsls	r0, r7, #23
 8016074:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016078:	ea4f 1427 	mov.w	r4, r7, asr #4
 801607c:	d516      	bpl.n	80160ac <_dtoa_r+0x34c>
 801607e:	4ba8      	ldr	r3, [pc, #672]	@ (8016320 <_dtoa_r+0x5c0>)
 8016080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016088:	f7ea fbe0 	bl	800084c <__aeabi_ddiv>
 801608c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016090:	f004 040f 	and.w	r4, r4, #15
 8016094:	2603      	movs	r6, #3
 8016096:	4da2      	ldr	r5, [pc, #648]	@ (8016320 <_dtoa_r+0x5c0>)
 8016098:	b954      	cbnz	r4, 80160b0 <_dtoa_r+0x350>
 801609a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801609e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80160a2:	f7ea fbd3 	bl	800084c <__aeabi_ddiv>
 80160a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80160aa:	e028      	b.n	80160fe <_dtoa_r+0x39e>
 80160ac:	2602      	movs	r6, #2
 80160ae:	e7f2      	b.n	8016096 <_dtoa_r+0x336>
 80160b0:	07e1      	lsls	r1, r4, #31
 80160b2:	d508      	bpl.n	80160c6 <_dtoa_r+0x366>
 80160b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80160b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80160bc:	f7ea fa9c 	bl	80005f8 <__aeabi_dmul>
 80160c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80160c4:	3601      	adds	r6, #1
 80160c6:	1064      	asrs	r4, r4, #1
 80160c8:	3508      	adds	r5, #8
 80160ca:	e7e5      	b.n	8016098 <_dtoa_r+0x338>
 80160cc:	f000 80d2 	beq.w	8016274 <_dtoa_r+0x514>
 80160d0:	427c      	negs	r4, r7
 80160d2:	4b92      	ldr	r3, [pc, #584]	@ (801631c <_dtoa_r+0x5bc>)
 80160d4:	4d92      	ldr	r5, [pc, #584]	@ (8016320 <_dtoa_r+0x5c0>)
 80160d6:	f004 020f 	and.w	r2, r4, #15
 80160da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80160de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80160e6:	f7ea fa87 	bl	80005f8 <__aeabi_dmul>
 80160ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80160ee:	1124      	asrs	r4, r4, #4
 80160f0:	2300      	movs	r3, #0
 80160f2:	2602      	movs	r6, #2
 80160f4:	2c00      	cmp	r4, #0
 80160f6:	f040 80b2 	bne.w	801625e <_dtoa_r+0x4fe>
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d1d3      	bne.n	80160a6 <_dtoa_r+0x346>
 80160fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016100:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016104:	2b00      	cmp	r3, #0
 8016106:	f000 80b7 	beq.w	8016278 <_dtoa_r+0x518>
 801610a:	4b86      	ldr	r3, [pc, #536]	@ (8016324 <_dtoa_r+0x5c4>)
 801610c:	2200      	movs	r2, #0
 801610e:	4620      	mov	r0, r4
 8016110:	4629      	mov	r1, r5
 8016112:	f7ea fce3 	bl	8000adc <__aeabi_dcmplt>
 8016116:	2800      	cmp	r0, #0
 8016118:	f000 80ae 	beq.w	8016278 <_dtoa_r+0x518>
 801611c:	9b07      	ldr	r3, [sp, #28]
 801611e:	2b00      	cmp	r3, #0
 8016120:	f000 80aa 	beq.w	8016278 <_dtoa_r+0x518>
 8016124:	9b00      	ldr	r3, [sp, #0]
 8016126:	2b00      	cmp	r3, #0
 8016128:	dd37      	ble.n	801619a <_dtoa_r+0x43a>
 801612a:	1e7b      	subs	r3, r7, #1
 801612c:	9304      	str	r3, [sp, #16]
 801612e:	4620      	mov	r0, r4
 8016130:	4b7d      	ldr	r3, [pc, #500]	@ (8016328 <_dtoa_r+0x5c8>)
 8016132:	2200      	movs	r2, #0
 8016134:	4629      	mov	r1, r5
 8016136:	f7ea fa5f 	bl	80005f8 <__aeabi_dmul>
 801613a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801613e:	9c00      	ldr	r4, [sp, #0]
 8016140:	3601      	adds	r6, #1
 8016142:	4630      	mov	r0, r6
 8016144:	f7ea f9ee 	bl	8000524 <__aeabi_i2d>
 8016148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801614c:	f7ea fa54 	bl	80005f8 <__aeabi_dmul>
 8016150:	4b76      	ldr	r3, [pc, #472]	@ (801632c <_dtoa_r+0x5cc>)
 8016152:	2200      	movs	r2, #0
 8016154:	f7ea f89a 	bl	800028c <__adddf3>
 8016158:	4605      	mov	r5, r0
 801615a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801615e:	2c00      	cmp	r4, #0
 8016160:	f040 808d 	bne.w	801627e <_dtoa_r+0x51e>
 8016164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016168:	4b71      	ldr	r3, [pc, #452]	@ (8016330 <_dtoa_r+0x5d0>)
 801616a:	2200      	movs	r2, #0
 801616c:	f7ea f88c 	bl	8000288 <__aeabi_dsub>
 8016170:	4602      	mov	r2, r0
 8016172:	460b      	mov	r3, r1
 8016174:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016178:	462a      	mov	r2, r5
 801617a:	4633      	mov	r3, r6
 801617c:	f7ea fccc 	bl	8000b18 <__aeabi_dcmpgt>
 8016180:	2800      	cmp	r0, #0
 8016182:	f040 828b 	bne.w	801669c <_dtoa_r+0x93c>
 8016186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801618a:	462a      	mov	r2, r5
 801618c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8016190:	f7ea fca4 	bl	8000adc <__aeabi_dcmplt>
 8016194:	2800      	cmp	r0, #0
 8016196:	f040 8128 	bne.w	80163ea <_dtoa_r+0x68a>
 801619a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801619e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80161a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	f2c0 815a 	blt.w	801645e <_dtoa_r+0x6fe>
 80161aa:	2f0e      	cmp	r7, #14
 80161ac:	f300 8157 	bgt.w	801645e <_dtoa_r+0x6fe>
 80161b0:	4b5a      	ldr	r3, [pc, #360]	@ (801631c <_dtoa_r+0x5bc>)
 80161b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80161b6:	ed93 7b00 	vldr	d7, [r3]
 80161ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80161bc:	2b00      	cmp	r3, #0
 80161be:	ed8d 7b00 	vstr	d7, [sp]
 80161c2:	da03      	bge.n	80161cc <_dtoa_r+0x46c>
 80161c4:	9b07      	ldr	r3, [sp, #28]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	f340 8101 	ble.w	80163ce <_dtoa_r+0x66e>
 80161cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80161d0:	4656      	mov	r6, sl
 80161d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161d6:	4620      	mov	r0, r4
 80161d8:	4629      	mov	r1, r5
 80161da:	f7ea fb37 	bl	800084c <__aeabi_ddiv>
 80161de:	f7ea fcbb 	bl	8000b58 <__aeabi_d2iz>
 80161e2:	4680      	mov	r8, r0
 80161e4:	f7ea f99e 	bl	8000524 <__aeabi_i2d>
 80161e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161ec:	f7ea fa04 	bl	80005f8 <__aeabi_dmul>
 80161f0:	4602      	mov	r2, r0
 80161f2:	460b      	mov	r3, r1
 80161f4:	4620      	mov	r0, r4
 80161f6:	4629      	mov	r1, r5
 80161f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80161fc:	f7ea f844 	bl	8000288 <__aeabi_dsub>
 8016200:	f806 4b01 	strb.w	r4, [r6], #1
 8016204:	9d07      	ldr	r5, [sp, #28]
 8016206:	eba6 040a 	sub.w	r4, r6, sl
 801620a:	42a5      	cmp	r5, r4
 801620c:	4602      	mov	r2, r0
 801620e:	460b      	mov	r3, r1
 8016210:	f040 8117 	bne.w	8016442 <_dtoa_r+0x6e2>
 8016214:	f7ea f83a 	bl	800028c <__adddf3>
 8016218:	e9dd 2300 	ldrd	r2, r3, [sp]
 801621c:	4604      	mov	r4, r0
 801621e:	460d      	mov	r5, r1
 8016220:	f7ea fc7a 	bl	8000b18 <__aeabi_dcmpgt>
 8016224:	2800      	cmp	r0, #0
 8016226:	f040 80f9 	bne.w	801641c <_dtoa_r+0x6bc>
 801622a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801622e:	4620      	mov	r0, r4
 8016230:	4629      	mov	r1, r5
 8016232:	f7ea fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 8016236:	b118      	cbz	r0, 8016240 <_dtoa_r+0x4e0>
 8016238:	f018 0f01 	tst.w	r8, #1
 801623c:	f040 80ee 	bne.w	801641c <_dtoa_r+0x6bc>
 8016240:	4649      	mov	r1, r9
 8016242:	4658      	mov	r0, fp
 8016244:	f000 fbda 	bl	80169fc <_Bfree>
 8016248:	2300      	movs	r3, #0
 801624a:	7033      	strb	r3, [r6, #0]
 801624c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801624e:	3701      	adds	r7, #1
 8016250:	601f      	str	r7, [r3, #0]
 8016252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016254:	2b00      	cmp	r3, #0
 8016256:	f000 831d 	beq.w	8016894 <_dtoa_r+0xb34>
 801625a:	601e      	str	r6, [r3, #0]
 801625c:	e31a      	b.n	8016894 <_dtoa_r+0xb34>
 801625e:	07e2      	lsls	r2, r4, #31
 8016260:	d505      	bpl.n	801626e <_dtoa_r+0x50e>
 8016262:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016266:	f7ea f9c7 	bl	80005f8 <__aeabi_dmul>
 801626a:	3601      	adds	r6, #1
 801626c:	2301      	movs	r3, #1
 801626e:	1064      	asrs	r4, r4, #1
 8016270:	3508      	adds	r5, #8
 8016272:	e73f      	b.n	80160f4 <_dtoa_r+0x394>
 8016274:	2602      	movs	r6, #2
 8016276:	e742      	b.n	80160fe <_dtoa_r+0x39e>
 8016278:	9c07      	ldr	r4, [sp, #28]
 801627a:	9704      	str	r7, [sp, #16]
 801627c:	e761      	b.n	8016142 <_dtoa_r+0x3e2>
 801627e:	4b27      	ldr	r3, [pc, #156]	@ (801631c <_dtoa_r+0x5bc>)
 8016280:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016282:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016286:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801628a:	4454      	add	r4, sl
 801628c:	2900      	cmp	r1, #0
 801628e:	d053      	beq.n	8016338 <_dtoa_r+0x5d8>
 8016290:	4928      	ldr	r1, [pc, #160]	@ (8016334 <_dtoa_r+0x5d4>)
 8016292:	2000      	movs	r0, #0
 8016294:	f7ea fada 	bl	800084c <__aeabi_ddiv>
 8016298:	4633      	mov	r3, r6
 801629a:	462a      	mov	r2, r5
 801629c:	f7e9 fff4 	bl	8000288 <__aeabi_dsub>
 80162a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80162a4:	4656      	mov	r6, sl
 80162a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80162aa:	f7ea fc55 	bl	8000b58 <__aeabi_d2iz>
 80162ae:	4605      	mov	r5, r0
 80162b0:	f7ea f938 	bl	8000524 <__aeabi_i2d>
 80162b4:	4602      	mov	r2, r0
 80162b6:	460b      	mov	r3, r1
 80162b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80162bc:	f7e9 ffe4 	bl	8000288 <__aeabi_dsub>
 80162c0:	3530      	adds	r5, #48	@ 0x30
 80162c2:	4602      	mov	r2, r0
 80162c4:	460b      	mov	r3, r1
 80162c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80162ca:	f806 5b01 	strb.w	r5, [r6], #1
 80162ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80162d2:	f7ea fc03 	bl	8000adc <__aeabi_dcmplt>
 80162d6:	2800      	cmp	r0, #0
 80162d8:	d171      	bne.n	80163be <_dtoa_r+0x65e>
 80162da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80162de:	4911      	ldr	r1, [pc, #68]	@ (8016324 <_dtoa_r+0x5c4>)
 80162e0:	2000      	movs	r0, #0
 80162e2:	f7e9 ffd1 	bl	8000288 <__aeabi_dsub>
 80162e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80162ea:	f7ea fbf7 	bl	8000adc <__aeabi_dcmplt>
 80162ee:	2800      	cmp	r0, #0
 80162f0:	f040 8095 	bne.w	801641e <_dtoa_r+0x6be>
 80162f4:	42a6      	cmp	r6, r4
 80162f6:	f43f af50 	beq.w	801619a <_dtoa_r+0x43a>
 80162fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80162fe:	4b0a      	ldr	r3, [pc, #40]	@ (8016328 <_dtoa_r+0x5c8>)
 8016300:	2200      	movs	r2, #0
 8016302:	f7ea f979 	bl	80005f8 <__aeabi_dmul>
 8016306:	4b08      	ldr	r3, [pc, #32]	@ (8016328 <_dtoa_r+0x5c8>)
 8016308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801630c:	2200      	movs	r2, #0
 801630e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016312:	f7ea f971 	bl	80005f8 <__aeabi_dmul>
 8016316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801631a:	e7c4      	b.n	80162a6 <_dtoa_r+0x546>
 801631c:	0801f1e0 	.word	0x0801f1e0
 8016320:	0801f1b8 	.word	0x0801f1b8
 8016324:	3ff00000 	.word	0x3ff00000
 8016328:	40240000 	.word	0x40240000
 801632c:	401c0000 	.word	0x401c0000
 8016330:	40140000 	.word	0x40140000
 8016334:	3fe00000 	.word	0x3fe00000
 8016338:	4631      	mov	r1, r6
 801633a:	4628      	mov	r0, r5
 801633c:	f7ea f95c 	bl	80005f8 <__aeabi_dmul>
 8016340:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8016344:	9415      	str	r4, [sp, #84]	@ 0x54
 8016346:	4656      	mov	r6, sl
 8016348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801634c:	f7ea fc04 	bl	8000b58 <__aeabi_d2iz>
 8016350:	4605      	mov	r5, r0
 8016352:	f7ea f8e7 	bl	8000524 <__aeabi_i2d>
 8016356:	4602      	mov	r2, r0
 8016358:	460b      	mov	r3, r1
 801635a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801635e:	f7e9 ff93 	bl	8000288 <__aeabi_dsub>
 8016362:	3530      	adds	r5, #48	@ 0x30
 8016364:	f806 5b01 	strb.w	r5, [r6], #1
 8016368:	4602      	mov	r2, r0
 801636a:	460b      	mov	r3, r1
 801636c:	42a6      	cmp	r6, r4
 801636e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016372:	f04f 0200 	mov.w	r2, #0
 8016376:	d124      	bne.n	80163c2 <_dtoa_r+0x662>
 8016378:	4bac      	ldr	r3, [pc, #688]	@ (801662c <_dtoa_r+0x8cc>)
 801637a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801637e:	f7e9 ff85 	bl	800028c <__adddf3>
 8016382:	4602      	mov	r2, r0
 8016384:	460b      	mov	r3, r1
 8016386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801638a:	f7ea fbc5 	bl	8000b18 <__aeabi_dcmpgt>
 801638e:	2800      	cmp	r0, #0
 8016390:	d145      	bne.n	801641e <_dtoa_r+0x6be>
 8016392:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8016396:	49a5      	ldr	r1, [pc, #660]	@ (801662c <_dtoa_r+0x8cc>)
 8016398:	2000      	movs	r0, #0
 801639a:	f7e9 ff75 	bl	8000288 <__aeabi_dsub>
 801639e:	4602      	mov	r2, r0
 80163a0:	460b      	mov	r3, r1
 80163a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80163a6:	f7ea fb99 	bl	8000adc <__aeabi_dcmplt>
 80163aa:	2800      	cmp	r0, #0
 80163ac:	f43f aef5 	beq.w	801619a <_dtoa_r+0x43a>
 80163b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80163b2:	1e73      	subs	r3, r6, #1
 80163b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80163b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80163ba:	2b30      	cmp	r3, #48	@ 0x30
 80163bc:	d0f8      	beq.n	80163b0 <_dtoa_r+0x650>
 80163be:	9f04      	ldr	r7, [sp, #16]
 80163c0:	e73e      	b.n	8016240 <_dtoa_r+0x4e0>
 80163c2:	4b9b      	ldr	r3, [pc, #620]	@ (8016630 <_dtoa_r+0x8d0>)
 80163c4:	f7ea f918 	bl	80005f8 <__aeabi_dmul>
 80163c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80163cc:	e7bc      	b.n	8016348 <_dtoa_r+0x5e8>
 80163ce:	d10c      	bne.n	80163ea <_dtoa_r+0x68a>
 80163d0:	4b98      	ldr	r3, [pc, #608]	@ (8016634 <_dtoa_r+0x8d4>)
 80163d2:	2200      	movs	r2, #0
 80163d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80163d8:	f7ea f90e 	bl	80005f8 <__aeabi_dmul>
 80163dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80163e0:	f7ea fb90 	bl	8000b04 <__aeabi_dcmpge>
 80163e4:	2800      	cmp	r0, #0
 80163e6:	f000 8157 	beq.w	8016698 <_dtoa_r+0x938>
 80163ea:	2400      	movs	r4, #0
 80163ec:	4625      	mov	r5, r4
 80163ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163f0:	43db      	mvns	r3, r3
 80163f2:	9304      	str	r3, [sp, #16]
 80163f4:	4656      	mov	r6, sl
 80163f6:	2700      	movs	r7, #0
 80163f8:	4621      	mov	r1, r4
 80163fa:	4658      	mov	r0, fp
 80163fc:	f000 fafe 	bl	80169fc <_Bfree>
 8016400:	2d00      	cmp	r5, #0
 8016402:	d0dc      	beq.n	80163be <_dtoa_r+0x65e>
 8016404:	b12f      	cbz	r7, 8016412 <_dtoa_r+0x6b2>
 8016406:	42af      	cmp	r7, r5
 8016408:	d003      	beq.n	8016412 <_dtoa_r+0x6b2>
 801640a:	4639      	mov	r1, r7
 801640c:	4658      	mov	r0, fp
 801640e:	f000 faf5 	bl	80169fc <_Bfree>
 8016412:	4629      	mov	r1, r5
 8016414:	4658      	mov	r0, fp
 8016416:	f000 faf1 	bl	80169fc <_Bfree>
 801641a:	e7d0      	b.n	80163be <_dtoa_r+0x65e>
 801641c:	9704      	str	r7, [sp, #16]
 801641e:	4633      	mov	r3, r6
 8016420:	461e      	mov	r6, r3
 8016422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016426:	2a39      	cmp	r2, #57	@ 0x39
 8016428:	d107      	bne.n	801643a <_dtoa_r+0x6da>
 801642a:	459a      	cmp	sl, r3
 801642c:	d1f8      	bne.n	8016420 <_dtoa_r+0x6c0>
 801642e:	9a04      	ldr	r2, [sp, #16]
 8016430:	3201      	adds	r2, #1
 8016432:	9204      	str	r2, [sp, #16]
 8016434:	2230      	movs	r2, #48	@ 0x30
 8016436:	f88a 2000 	strb.w	r2, [sl]
 801643a:	781a      	ldrb	r2, [r3, #0]
 801643c:	3201      	adds	r2, #1
 801643e:	701a      	strb	r2, [r3, #0]
 8016440:	e7bd      	b.n	80163be <_dtoa_r+0x65e>
 8016442:	4b7b      	ldr	r3, [pc, #492]	@ (8016630 <_dtoa_r+0x8d0>)
 8016444:	2200      	movs	r2, #0
 8016446:	f7ea f8d7 	bl	80005f8 <__aeabi_dmul>
 801644a:	2200      	movs	r2, #0
 801644c:	2300      	movs	r3, #0
 801644e:	4604      	mov	r4, r0
 8016450:	460d      	mov	r5, r1
 8016452:	f7ea fb39 	bl	8000ac8 <__aeabi_dcmpeq>
 8016456:	2800      	cmp	r0, #0
 8016458:	f43f aebb 	beq.w	80161d2 <_dtoa_r+0x472>
 801645c:	e6f0      	b.n	8016240 <_dtoa_r+0x4e0>
 801645e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016460:	2a00      	cmp	r2, #0
 8016462:	f000 80db 	beq.w	801661c <_dtoa_r+0x8bc>
 8016466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016468:	2a01      	cmp	r2, #1
 801646a:	f300 80bf 	bgt.w	80165ec <_dtoa_r+0x88c>
 801646e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016470:	2a00      	cmp	r2, #0
 8016472:	f000 80b7 	beq.w	80165e4 <_dtoa_r+0x884>
 8016476:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801647a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801647c:	4646      	mov	r6, r8
 801647e:	9a08      	ldr	r2, [sp, #32]
 8016480:	2101      	movs	r1, #1
 8016482:	441a      	add	r2, r3
 8016484:	4658      	mov	r0, fp
 8016486:	4498      	add	r8, r3
 8016488:	9208      	str	r2, [sp, #32]
 801648a:	f000 fb6b 	bl	8016b64 <__i2b>
 801648e:	4605      	mov	r5, r0
 8016490:	b15e      	cbz	r6, 80164aa <_dtoa_r+0x74a>
 8016492:	9b08      	ldr	r3, [sp, #32]
 8016494:	2b00      	cmp	r3, #0
 8016496:	dd08      	ble.n	80164aa <_dtoa_r+0x74a>
 8016498:	42b3      	cmp	r3, r6
 801649a:	9a08      	ldr	r2, [sp, #32]
 801649c:	bfa8      	it	ge
 801649e:	4633      	movge	r3, r6
 80164a0:	eba8 0803 	sub.w	r8, r8, r3
 80164a4:	1af6      	subs	r6, r6, r3
 80164a6:	1ad3      	subs	r3, r2, r3
 80164a8:	9308      	str	r3, [sp, #32]
 80164aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80164ac:	b1f3      	cbz	r3, 80164ec <_dtoa_r+0x78c>
 80164ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	f000 80b7 	beq.w	8016624 <_dtoa_r+0x8c4>
 80164b6:	b18c      	cbz	r4, 80164dc <_dtoa_r+0x77c>
 80164b8:	4629      	mov	r1, r5
 80164ba:	4622      	mov	r2, r4
 80164bc:	4658      	mov	r0, fp
 80164be:	f000 fc11 	bl	8016ce4 <__pow5mult>
 80164c2:	464a      	mov	r2, r9
 80164c4:	4601      	mov	r1, r0
 80164c6:	4605      	mov	r5, r0
 80164c8:	4658      	mov	r0, fp
 80164ca:	f000 fb61 	bl	8016b90 <__multiply>
 80164ce:	4649      	mov	r1, r9
 80164d0:	9004      	str	r0, [sp, #16]
 80164d2:	4658      	mov	r0, fp
 80164d4:	f000 fa92 	bl	80169fc <_Bfree>
 80164d8:	9b04      	ldr	r3, [sp, #16]
 80164da:	4699      	mov	r9, r3
 80164dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80164de:	1b1a      	subs	r2, r3, r4
 80164e0:	d004      	beq.n	80164ec <_dtoa_r+0x78c>
 80164e2:	4649      	mov	r1, r9
 80164e4:	4658      	mov	r0, fp
 80164e6:	f000 fbfd 	bl	8016ce4 <__pow5mult>
 80164ea:	4681      	mov	r9, r0
 80164ec:	2101      	movs	r1, #1
 80164ee:	4658      	mov	r0, fp
 80164f0:	f000 fb38 	bl	8016b64 <__i2b>
 80164f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80164f6:	4604      	mov	r4, r0
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	f000 81cf 	beq.w	801689c <_dtoa_r+0xb3c>
 80164fe:	461a      	mov	r2, r3
 8016500:	4601      	mov	r1, r0
 8016502:	4658      	mov	r0, fp
 8016504:	f000 fbee 	bl	8016ce4 <__pow5mult>
 8016508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801650a:	2b01      	cmp	r3, #1
 801650c:	4604      	mov	r4, r0
 801650e:	f300 8095 	bgt.w	801663c <_dtoa_r+0x8dc>
 8016512:	9b02      	ldr	r3, [sp, #8]
 8016514:	2b00      	cmp	r3, #0
 8016516:	f040 8087 	bne.w	8016628 <_dtoa_r+0x8c8>
 801651a:	9b03      	ldr	r3, [sp, #12]
 801651c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016520:	2b00      	cmp	r3, #0
 8016522:	f040 8089 	bne.w	8016638 <_dtoa_r+0x8d8>
 8016526:	9b03      	ldr	r3, [sp, #12]
 8016528:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801652c:	0d1b      	lsrs	r3, r3, #20
 801652e:	051b      	lsls	r3, r3, #20
 8016530:	b12b      	cbz	r3, 801653e <_dtoa_r+0x7de>
 8016532:	9b08      	ldr	r3, [sp, #32]
 8016534:	3301      	adds	r3, #1
 8016536:	9308      	str	r3, [sp, #32]
 8016538:	f108 0801 	add.w	r8, r8, #1
 801653c:	2301      	movs	r3, #1
 801653e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016542:	2b00      	cmp	r3, #0
 8016544:	f000 81b0 	beq.w	80168a8 <_dtoa_r+0xb48>
 8016548:	6923      	ldr	r3, [r4, #16]
 801654a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801654e:	6918      	ldr	r0, [r3, #16]
 8016550:	f000 fabc 	bl	8016acc <__hi0bits>
 8016554:	f1c0 0020 	rsb	r0, r0, #32
 8016558:	9b08      	ldr	r3, [sp, #32]
 801655a:	4418      	add	r0, r3
 801655c:	f010 001f 	ands.w	r0, r0, #31
 8016560:	d077      	beq.n	8016652 <_dtoa_r+0x8f2>
 8016562:	f1c0 0320 	rsb	r3, r0, #32
 8016566:	2b04      	cmp	r3, #4
 8016568:	dd6b      	ble.n	8016642 <_dtoa_r+0x8e2>
 801656a:	9b08      	ldr	r3, [sp, #32]
 801656c:	f1c0 001c 	rsb	r0, r0, #28
 8016570:	4403      	add	r3, r0
 8016572:	4480      	add	r8, r0
 8016574:	4406      	add	r6, r0
 8016576:	9308      	str	r3, [sp, #32]
 8016578:	f1b8 0f00 	cmp.w	r8, #0
 801657c:	dd05      	ble.n	801658a <_dtoa_r+0x82a>
 801657e:	4649      	mov	r1, r9
 8016580:	4642      	mov	r2, r8
 8016582:	4658      	mov	r0, fp
 8016584:	f000 fc08 	bl	8016d98 <__lshift>
 8016588:	4681      	mov	r9, r0
 801658a:	9b08      	ldr	r3, [sp, #32]
 801658c:	2b00      	cmp	r3, #0
 801658e:	dd05      	ble.n	801659c <_dtoa_r+0x83c>
 8016590:	4621      	mov	r1, r4
 8016592:	461a      	mov	r2, r3
 8016594:	4658      	mov	r0, fp
 8016596:	f000 fbff 	bl	8016d98 <__lshift>
 801659a:	4604      	mov	r4, r0
 801659c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d059      	beq.n	8016656 <_dtoa_r+0x8f6>
 80165a2:	4621      	mov	r1, r4
 80165a4:	4648      	mov	r0, r9
 80165a6:	f000 fc63 	bl	8016e70 <__mcmp>
 80165aa:	2800      	cmp	r0, #0
 80165ac:	da53      	bge.n	8016656 <_dtoa_r+0x8f6>
 80165ae:	1e7b      	subs	r3, r7, #1
 80165b0:	9304      	str	r3, [sp, #16]
 80165b2:	4649      	mov	r1, r9
 80165b4:	2300      	movs	r3, #0
 80165b6:	220a      	movs	r2, #10
 80165b8:	4658      	mov	r0, fp
 80165ba:	f000 fa41 	bl	8016a40 <__multadd>
 80165be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80165c0:	4681      	mov	r9, r0
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	f000 8172 	beq.w	80168ac <_dtoa_r+0xb4c>
 80165c8:	2300      	movs	r3, #0
 80165ca:	4629      	mov	r1, r5
 80165cc:	220a      	movs	r2, #10
 80165ce:	4658      	mov	r0, fp
 80165d0:	f000 fa36 	bl	8016a40 <__multadd>
 80165d4:	9b00      	ldr	r3, [sp, #0]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	4605      	mov	r5, r0
 80165da:	dc67      	bgt.n	80166ac <_dtoa_r+0x94c>
 80165dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80165de:	2b02      	cmp	r3, #2
 80165e0:	dc41      	bgt.n	8016666 <_dtoa_r+0x906>
 80165e2:	e063      	b.n	80166ac <_dtoa_r+0x94c>
 80165e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80165e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80165ea:	e746      	b.n	801647a <_dtoa_r+0x71a>
 80165ec:	9b07      	ldr	r3, [sp, #28]
 80165ee:	1e5c      	subs	r4, r3, #1
 80165f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80165f2:	42a3      	cmp	r3, r4
 80165f4:	bfbf      	itttt	lt
 80165f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80165f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80165fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80165fc:	1ae3      	sublt	r3, r4, r3
 80165fe:	bfb4      	ite	lt
 8016600:	18d2      	addlt	r2, r2, r3
 8016602:	1b1c      	subge	r4, r3, r4
 8016604:	9b07      	ldr	r3, [sp, #28]
 8016606:	bfbc      	itt	lt
 8016608:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801660a:	2400      	movlt	r4, #0
 801660c:	2b00      	cmp	r3, #0
 801660e:	bfb5      	itete	lt
 8016610:	eba8 0603 	sublt.w	r6, r8, r3
 8016614:	9b07      	ldrge	r3, [sp, #28]
 8016616:	2300      	movlt	r3, #0
 8016618:	4646      	movge	r6, r8
 801661a:	e730      	b.n	801647e <_dtoa_r+0x71e>
 801661c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801661e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8016620:	4646      	mov	r6, r8
 8016622:	e735      	b.n	8016490 <_dtoa_r+0x730>
 8016624:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016626:	e75c      	b.n	80164e2 <_dtoa_r+0x782>
 8016628:	2300      	movs	r3, #0
 801662a:	e788      	b.n	801653e <_dtoa_r+0x7de>
 801662c:	3fe00000 	.word	0x3fe00000
 8016630:	40240000 	.word	0x40240000
 8016634:	40140000 	.word	0x40140000
 8016638:	9b02      	ldr	r3, [sp, #8]
 801663a:	e780      	b.n	801653e <_dtoa_r+0x7de>
 801663c:	2300      	movs	r3, #0
 801663e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016640:	e782      	b.n	8016548 <_dtoa_r+0x7e8>
 8016642:	d099      	beq.n	8016578 <_dtoa_r+0x818>
 8016644:	9a08      	ldr	r2, [sp, #32]
 8016646:	331c      	adds	r3, #28
 8016648:	441a      	add	r2, r3
 801664a:	4498      	add	r8, r3
 801664c:	441e      	add	r6, r3
 801664e:	9208      	str	r2, [sp, #32]
 8016650:	e792      	b.n	8016578 <_dtoa_r+0x818>
 8016652:	4603      	mov	r3, r0
 8016654:	e7f6      	b.n	8016644 <_dtoa_r+0x8e4>
 8016656:	9b07      	ldr	r3, [sp, #28]
 8016658:	9704      	str	r7, [sp, #16]
 801665a:	2b00      	cmp	r3, #0
 801665c:	dc20      	bgt.n	80166a0 <_dtoa_r+0x940>
 801665e:	9300      	str	r3, [sp, #0]
 8016660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016662:	2b02      	cmp	r3, #2
 8016664:	dd1e      	ble.n	80166a4 <_dtoa_r+0x944>
 8016666:	9b00      	ldr	r3, [sp, #0]
 8016668:	2b00      	cmp	r3, #0
 801666a:	f47f aec0 	bne.w	80163ee <_dtoa_r+0x68e>
 801666e:	4621      	mov	r1, r4
 8016670:	2205      	movs	r2, #5
 8016672:	4658      	mov	r0, fp
 8016674:	f000 f9e4 	bl	8016a40 <__multadd>
 8016678:	4601      	mov	r1, r0
 801667a:	4604      	mov	r4, r0
 801667c:	4648      	mov	r0, r9
 801667e:	f000 fbf7 	bl	8016e70 <__mcmp>
 8016682:	2800      	cmp	r0, #0
 8016684:	f77f aeb3 	ble.w	80163ee <_dtoa_r+0x68e>
 8016688:	4656      	mov	r6, sl
 801668a:	2331      	movs	r3, #49	@ 0x31
 801668c:	f806 3b01 	strb.w	r3, [r6], #1
 8016690:	9b04      	ldr	r3, [sp, #16]
 8016692:	3301      	adds	r3, #1
 8016694:	9304      	str	r3, [sp, #16]
 8016696:	e6ae      	b.n	80163f6 <_dtoa_r+0x696>
 8016698:	9c07      	ldr	r4, [sp, #28]
 801669a:	9704      	str	r7, [sp, #16]
 801669c:	4625      	mov	r5, r4
 801669e:	e7f3      	b.n	8016688 <_dtoa_r+0x928>
 80166a0:	9b07      	ldr	r3, [sp, #28]
 80166a2:	9300      	str	r3, [sp, #0]
 80166a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	f000 8104 	beq.w	80168b4 <_dtoa_r+0xb54>
 80166ac:	2e00      	cmp	r6, #0
 80166ae:	dd05      	ble.n	80166bc <_dtoa_r+0x95c>
 80166b0:	4629      	mov	r1, r5
 80166b2:	4632      	mov	r2, r6
 80166b4:	4658      	mov	r0, fp
 80166b6:	f000 fb6f 	bl	8016d98 <__lshift>
 80166ba:	4605      	mov	r5, r0
 80166bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d05a      	beq.n	8016778 <_dtoa_r+0xa18>
 80166c2:	6869      	ldr	r1, [r5, #4]
 80166c4:	4658      	mov	r0, fp
 80166c6:	f000 f959 	bl	801697c <_Balloc>
 80166ca:	4606      	mov	r6, r0
 80166cc:	b928      	cbnz	r0, 80166da <_dtoa_r+0x97a>
 80166ce:	4b84      	ldr	r3, [pc, #528]	@ (80168e0 <_dtoa_r+0xb80>)
 80166d0:	4602      	mov	r2, r0
 80166d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80166d6:	f7ff bb5a 	b.w	8015d8e <_dtoa_r+0x2e>
 80166da:	692a      	ldr	r2, [r5, #16]
 80166dc:	3202      	adds	r2, #2
 80166de:	0092      	lsls	r2, r2, #2
 80166e0:	f105 010c 	add.w	r1, r5, #12
 80166e4:	300c      	adds	r0, #12
 80166e6:	f7ff faa2 	bl	8015c2e <memcpy>
 80166ea:	2201      	movs	r2, #1
 80166ec:	4631      	mov	r1, r6
 80166ee:	4658      	mov	r0, fp
 80166f0:	f000 fb52 	bl	8016d98 <__lshift>
 80166f4:	f10a 0301 	add.w	r3, sl, #1
 80166f8:	9307      	str	r3, [sp, #28]
 80166fa:	9b00      	ldr	r3, [sp, #0]
 80166fc:	4453      	add	r3, sl
 80166fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016700:	9b02      	ldr	r3, [sp, #8]
 8016702:	f003 0301 	and.w	r3, r3, #1
 8016706:	462f      	mov	r7, r5
 8016708:	930a      	str	r3, [sp, #40]	@ 0x28
 801670a:	4605      	mov	r5, r0
 801670c:	9b07      	ldr	r3, [sp, #28]
 801670e:	4621      	mov	r1, r4
 8016710:	3b01      	subs	r3, #1
 8016712:	4648      	mov	r0, r9
 8016714:	9300      	str	r3, [sp, #0]
 8016716:	f7ff fa98 	bl	8015c4a <quorem>
 801671a:	4639      	mov	r1, r7
 801671c:	9002      	str	r0, [sp, #8]
 801671e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8016722:	4648      	mov	r0, r9
 8016724:	f000 fba4 	bl	8016e70 <__mcmp>
 8016728:	462a      	mov	r2, r5
 801672a:	9008      	str	r0, [sp, #32]
 801672c:	4621      	mov	r1, r4
 801672e:	4658      	mov	r0, fp
 8016730:	f000 fbba 	bl	8016ea8 <__mdiff>
 8016734:	68c2      	ldr	r2, [r0, #12]
 8016736:	4606      	mov	r6, r0
 8016738:	bb02      	cbnz	r2, 801677c <_dtoa_r+0xa1c>
 801673a:	4601      	mov	r1, r0
 801673c:	4648      	mov	r0, r9
 801673e:	f000 fb97 	bl	8016e70 <__mcmp>
 8016742:	4602      	mov	r2, r0
 8016744:	4631      	mov	r1, r6
 8016746:	4658      	mov	r0, fp
 8016748:	920e      	str	r2, [sp, #56]	@ 0x38
 801674a:	f000 f957 	bl	80169fc <_Bfree>
 801674e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016750:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016752:	9e07      	ldr	r6, [sp, #28]
 8016754:	ea43 0102 	orr.w	r1, r3, r2
 8016758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801675a:	4319      	orrs	r1, r3
 801675c:	d110      	bne.n	8016780 <_dtoa_r+0xa20>
 801675e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8016762:	d029      	beq.n	80167b8 <_dtoa_r+0xa58>
 8016764:	9b08      	ldr	r3, [sp, #32]
 8016766:	2b00      	cmp	r3, #0
 8016768:	dd02      	ble.n	8016770 <_dtoa_r+0xa10>
 801676a:	9b02      	ldr	r3, [sp, #8]
 801676c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8016770:	9b00      	ldr	r3, [sp, #0]
 8016772:	f883 8000 	strb.w	r8, [r3]
 8016776:	e63f      	b.n	80163f8 <_dtoa_r+0x698>
 8016778:	4628      	mov	r0, r5
 801677a:	e7bb      	b.n	80166f4 <_dtoa_r+0x994>
 801677c:	2201      	movs	r2, #1
 801677e:	e7e1      	b.n	8016744 <_dtoa_r+0x9e4>
 8016780:	9b08      	ldr	r3, [sp, #32]
 8016782:	2b00      	cmp	r3, #0
 8016784:	db04      	blt.n	8016790 <_dtoa_r+0xa30>
 8016786:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016788:	430b      	orrs	r3, r1
 801678a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801678c:	430b      	orrs	r3, r1
 801678e:	d120      	bne.n	80167d2 <_dtoa_r+0xa72>
 8016790:	2a00      	cmp	r2, #0
 8016792:	dded      	ble.n	8016770 <_dtoa_r+0xa10>
 8016794:	4649      	mov	r1, r9
 8016796:	2201      	movs	r2, #1
 8016798:	4658      	mov	r0, fp
 801679a:	f000 fafd 	bl	8016d98 <__lshift>
 801679e:	4621      	mov	r1, r4
 80167a0:	4681      	mov	r9, r0
 80167a2:	f000 fb65 	bl	8016e70 <__mcmp>
 80167a6:	2800      	cmp	r0, #0
 80167a8:	dc03      	bgt.n	80167b2 <_dtoa_r+0xa52>
 80167aa:	d1e1      	bne.n	8016770 <_dtoa_r+0xa10>
 80167ac:	f018 0f01 	tst.w	r8, #1
 80167b0:	d0de      	beq.n	8016770 <_dtoa_r+0xa10>
 80167b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80167b6:	d1d8      	bne.n	801676a <_dtoa_r+0xa0a>
 80167b8:	9a00      	ldr	r2, [sp, #0]
 80167ba:	2339      	movs	r3, #57	@ 0x39
 80167bc:	7013      	strb	r3, [r2, #0]
 80167be:	4633      	mov	r3, r6
 80167c0:	461e      	mov	r6, r3
 80167c2:	3b01      	subs	r3, #1
 80167c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80167c8:	2a39      	cmp	r2, #57	@ 0x39
 80167ca:	d052      	beq.n	8016872 <_dtoa_r+0xb12>
 80167cc:	3201      	adds	r2, #1
 80167ce:	701a      	strb	r2, [r3, #0]
 80167d0:	e612      	b.n	80163f8 <_dtoa_r+0x698>
 80167d2:	2a00      	cmp	r2, #0
 80167d4:	dd07      	ble.n	80167e6 <_dtoa_r+0xa86>
 80167d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80167da:	d0ed      	beq.n	80167b8 <_dtoa_r+0xa58>
 80167dc:	9a00      	ldr	r2, [sp, #0]
 80167de:	f108 0301 	add.w	r3, r8, #1
 80167e2:	7013      	strb	r3, [r2, #0]
 80167e4:	e608      	b.n	80163f8 <_dtoa_r+0x698>
 80167e6:	9b07      	ldr	r3, [sp, #28]
 80167e8:	9a07      	ldr	r2, [sp, #28]
 80167ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80167ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80167f0:	4293      	cmp	r3, r2
 80167f2:	d028      	beq.n	8016846 <_dtoa_r+0xae6>
 80167f4:	4649      	mov	r1, r9
 80167f6:	2300      	movs	r3, #0
 80167f8:	220a      	movs	r2, #10
 80167fa:	4658      	mov	r0, fp
 80167fc:	f000 f920 	bl	8016a40 <__multadd>
 8016800:	42af      	cmp	r7, r5
 8016802:	4681      	mov	r9, r0
 8016804:	f04f 0300 	mov.w	r3, #0
 8016808:	f04f 020a 	mov.w	r2, #10
 801680c:	4639      	mov	r1, r7
 801680e:	4658      	mov	r0, fp
 8016810:	d107      	bne.n	8016822 <_dtoa_r+0xac2>
 8016812:	f000 f915 	bl	8016a40 <__multadd>
 8016816:	4607      	mov	r7, r0
 8016818:	4605      	mov	r5, r0
 801681a:	9b07      	ldr	r3, [sp, #28]
 801681c:	3301      	adds	r3, #1
 801681e:	9307      	str	r3, [sp, #28]
 8016820:	e774      	b.n	801670c <_dtoa_r+0x9ac>
 8016822:	f000 f90d 	bl	8016a40 <__multadd>
 8016826:	4629      	mov	r1, r5
 8016828:	4607      	mov	r7, r0
 801682a:	2300      	movs	r3, #0
 801682c:	220a      	movs	r2, #10
 801682e:	4658      	mov	r0, fp
 8016830:	f000 f906 	bl	8016a40 <__multadd>
 8016834:	4605      	mov	r5, r0
 8016836:	e7f0      	b.n	801681a <_dtoa_r+0xaba>
 8016838:	9b00      	ldr	r3, [sp, #0]
 801683a:	2b00      	cmp	r3, #0
 801683c:	bfcc      	ite	gt
 801683e:	461e      	movgt	r6, r3
 8016840:	2601      	movle	r6, #1
 8016842:	4456      	add	r6, sl
 8016844:	2700      	movs	r7, #0
 8016846:	4649      	mov	r1, r9
 8016848:	2201      	movs	r2, #1
 801684a:	4658      	mov	r0, fp
 801684c:	f000 faa4 	bl	8016d98 <__lshift>
 8016850:	4621      	mov	r1, r4
 8016852:	4681      	mov	r9, r0
 8016854:	f000 fb0c 	bl	8016e70 <__mcmp>
 8016858:	2800      	cmp	r0, #0
 801685a:	dcb0      	bgt.n	80167be <_dtoa_r+0xa5e>
 801685c:	d102      	bne.n	8016864 <_dtoa_r+0xb04>
 801685e:	f018 0f01 	tst.w	r8, #1
 8016862:	d1ac      	bne.n	80167be <_dtoa_r+0xa5e>
 8016864:	4633      	mov	r3, r6
 8016866:	461e      	mov	r6, r3
 8016868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801686c:	2a30      	cmp	r2, #48	@ 0x30
 801686e:	d0fa      	beq.n	8016866 <_dtoa_r+0xb06>
 8016870:	e5c2      	b.n	80163f8 <_dtoa_r+0x698>
 8016872:	459a      	cmp	sl, r3
 8016874:	d1a4      	bne.n	80167c0 <_dtoa_r+0xa60>
 8016876:	9b04      	ldr	r3, [sp, #16]
 8016878:	3301      	adds	r3, #1
 801687a:	9304      	str	r3, [sp, #16]
 801687c:	2331      	movs	r3, #49	@ 0x31
 801687e:	f88a 3000 	strb.w	r3, [sl]
 8016882:	e5b9      	b.n	80163f8 <_dtoa_r+0x698>
 8016884:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016886:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80168e4 <_dtoa_r+0xb84>
 801688a:	b11b      	cbz	r3, 8016894 <_dtoa_r+0xb34>
 801688c:	f10a 0308 	add.w	r3, sl, #8
 8016890:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016892:	6013      	str	r3, [r2, #0]
 8016894:	4650      	mov	r0, sl
 8016896:	b019      	add	sp, #100	@ 0x64
 8016898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801689c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801689e:	2b01      	cmp	r3, #1
 80168a0:	f77f ae37 	ble.w	8016512 <_dtoa_r+0x7b2>
 80168a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80168a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80168a8:	2001      	movs	r0, #1
 80168aa:	e655      	b.n	8016558 <_dtoa_r+0x7f8>
 80168ac:	9b00      	ldr	r3, [sp, #0]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	f77f aed6 	ble.w	8016660 <_dtoa_r+0x900>
 80168b4:	4656      	mov	r6, sl
 80168b6:	4621      	mov	r1, r4
 80168b8:	4648      	mov	r0, r9
 80168ba:	f7ff f9c6 	bl	8015c4a <quorem>
 80168be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80168c2:	f806 8b01 	strb.w	r8, [r6], #1
 80168c6:	9b00      	ldr	r3, [sp, #0]
 80168c8:	eba6 020a 	sub.w	r2, r6, sl
 80168cc:	4293      	cmp	r3, r2
 80168ce:	ddb3      	ble.n	8016838 <_dtoa_r+0xad8>
 80168d0:	4649      	mov	r1, r9
 80168d2:	2300      	movs	r3, #0
 80168d4:	220a      	movs	r2, #10
 80168d6:	4658      	mov	r0, fp
 80168d8:	f000 f8b2 	bl	8016a40 <__multadd>
 80168dc:	4681      	mov	r9, r0
 80168de:	e7ea      	b.n	80168b6 <_dtoa_r+0xb56>
 80168e0:	0801f13f 	.word	0x0801f13f
 80168e4:	0801f0c3 	.word	0x0801f0c3

080168e8 <_free_r>:
 80168e8:	b538      	push	{r3, r4, r5, lr}
 80168ea:	4605      	mov	r5, r0
 80168ec:	2900      	cmp	r1, #0
 80168ee:	d041      	beq.n	8016974 <_free_r+0x8c>
 80168f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168f4:	1f0c      	subs	r4, r1, #4
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	bfb8      	it	lt
 80168fa:	18e4      	addlt	r4, r4, r3
 80168fc:	f7fe fa2c 	bl	8014d58 <__malloc_lock>
 8016900:	4a1d      	ldr	r2, [pc, #116]	@ (8016978 <_free_r+0x90>)
 8016902:	6813      	ldr	r3, [r2, #0]
 8016904:	b933      	cbnz	r3, 8016914 <_free_r+0x2c>
 8016906:	6063      	str	r3, [r4, #4]
 8016908:	6014      	str	r4, [r2, #0]
 801690a:	4628      	mov	r0, r5
 801690c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016910:	f7fe ba28 	b.w	8014d64 <__malloc_unlock>
 8016914:	42a3      	cmp	r3, r4
 8016916:	d908      	bls.n	801692a <_free_r+0x42>
 8016918:	6820      	ldr	r0, [r4, #0]
 801691a:	1821      	adds	r1, r4, r0
 801691c:	428b      	cmp	r3, r1
 801691e:	bf01      	itttt	eq
 8016920:	6819      	ldreq	r1, [r3, #0]
 8016922:	685b      	ldreq	r3, [r3, #4]
 8016924:	1809      	addeq	r1, r1, r0
 8016926:	6021      	streq	r1, [r4, #0]
 8016928:	e7ed      	b.n	8016906 <_free_r+0x1e>
 801692a:	461a      	mov	r2, r3
 801692c:	685b      	ldr	r3, [r3, #4]
 801692e:	b10b      	cbz	r3, 8016934 <_free_r+0x4c>
 8016930:	42a3      	cmp	r3, r4
 8016932:	d9fa      	bls.n	801692a <_free_r+0x42>
 8016934:	6811      	ldr	r1, [r2, #0]
 8016936:	1850      	adds	r0, r2, r1
 8016938:	42a0      	cmp	r0, r4
 801693a:	d10b      	bne.n	8016954 <_free_r+0x6c>
 801693c:	6820      	ldr	r0, [r4, #0]
 801693e:	4401      	add	r1, r0
 8016940:	1850      	adds	r0, r2, r1
 8016942:	4283      	cmp	r3, r0
 8016944:	6011      	str	r1, [r2, #0]
 8016946:	d1e0      	bne.n	801690a <_free_r+0x22>
 8016948:	6818      	ldr	r0, [r3, #0]
 801694a:	685b      	ldr	r3, [r3, #4]
 801694c:	6053      	str	r3, [r2, #4]
 801694e:	4408      	add	r0, r1
 8016950:	6010      	str	r0, [r2, #0]
 8016952:	e7da      	b.n	801690a <_free_r+0x22>
 8016954:	d902      	bls.n	801695c <_free_r+0x74>
 8016956:	230c      	movs	r3, #12
 8016958:	602b      	str	r3, [r5, #0]
 801695a:	e7d6      	b.n	801690a <_free_r+0x22>
 801695c:	6820      	ldr	r0, [r4, #0]
 801695e:	1821      	adds	r1, r4, r0
 8016960:	428b      	cmp	r3, r1
 8016962:	bf04      	itt	eq
 8016964:	6819      	ldreq	r1, [r3, #0]
 8016966:	685b      	ldreq	r3, [r3, #4]
 8016968:	6063      	str	r3, [r4, #4]
 801696a:	bf04      	itt	eq
 801696c:	1809      	addeq	r1, r1, r0
 801696e:	6021      	streq	r1, [r4, #0]
 8016970:	6054      	str	r4, [r2, #4]
 8016972:	e7ca      	b.n	801690a <_free_r+0x22>
 8016974:	bd38      	pop	{r3, r4, r5, pc}
 8016976:	bf00      	nop
 8016978:	20000784 	.word	0x20000784

0801697c <_Balloc>:
 801697c:	b570      	push	{r4, r5, r6, lr}
 801697e:	69c6      	ldr	r6, [r0, #28]
 8016980:	4604      	mov	r4, r0
 8016982:	460d      	mov	r5, r1
 8016984:	b976      	cbnz	r6, 80169a4 <_Balloc+0x28>
 8016986:	2010      	movs	r0, #16
 8016988:	f7fe f934 	bl	8014bf4 <malloc>
 801698c:	4602      	mov	r2, r0
 801698e:	61e0      	str	r0, [r4, #28]
 8016990:	b920      	cbnz	r0, 801699c <_Balloc+0x20>
 8016992:	4b18      	ldr	r3, [pc, #96]	@ (80169f4 <_Balloc+0x78>)
 8016994:	4818      	ldr	r0, [pc, #96]	@ (80169f8 <_Balloc+0x7c>)
 8016996:	216b      	movs	r1, #107	@ 0x6b
 8016998:	f000 ff70 	bl	801787c <__assert_func>
 801699c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80169a0:	6006      	str	r6, [r0, #0]
 80169a2:	60c6      	str	r6, [r0, #12]
 80169a4:	69e6      	ldr	r6, [r4, #28]
 80169a6:	68f3      	ldr	r3, [r6, #12]
 80169a8:	b183      	cbz	r3, 80169cc <_Balloc+0x50>
 80169aa:	69e3      	ldr	r3, [r4, #28]
 80169ac:	68db      	ldr	r3, [r3, #12]
 80169ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80169b2:	b9b8      	cbnz	r0, 80169e4 <_Balloc+0x68>
 80169b4:	2101      	movs	r1, #1
 80169b6:	fa01 f605 	lsl.w	r6, r1, r5
 80169ba:	1d72      	adds	r2, r6, #5
 80169bc:	0092      	lsls	r2, r2, #2
 80169be:	4620      	mov	r0, r4
 80169c0:	f7fe f904 	bl	8014bcc <_calloc_r>
 80169c4:	b160      	cbz	r0, 80169e0 <_Balloc+0x64>
 80169c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80169ca:	e00e      	b.n	80169ea <_Balloc+0x6e>
 80169cc:	2221      	movs	r2, #33	@ 0x21
 80169ce:	2104      	movs	r1, #4
 80169d0:	4620      	mov	r0, r4
 80169d2:	f7fe f8fb 	bl	8014bcc <_calloc_r>
 80169d6:	69e3      	ldr	r3, [r4, #28]
 80169d8:	60f0      	str	r0, [r6, #12]
 80169da:	68db      	ldr	r3, [r3, #12]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d1e4      	bne.n	80169aa <_Balloc+0x2e>
 80169e0:	2000      	movs	r0, #0
 80169e2:	bd70      	pop	{r4, r5, r6, pc}
 80169e4:	6802      	ldr	r2, [r0, #0]
 80169e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80169ea:	2300      	movs	r3, #0
 80169ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80169f0:	e7f7      	b.n	80169e2 <_Balloc+0x66>
 80169f2:	bf00      	nop
 80169f4:	0801f0d0 	.word	0x0801f0d0
 80169f8:	0801f150 	.word	0x0801f150

080169fc <_Bfree>:
 80169fc:	b570      	push	{r4, r5, r6, lr}
 80169fe:	69c6      	ldr	r6, [r0, #28]
 8016a00:	4605      	mov	r5, r0
 8016a02:	460c      	mov	r4, r1
 8016a04:	b976      	cbnz	r6, 8016a24 <_Bfree+0x28>
 8016a06:	2010      	movs	r0, #16
 8016a08:	f7fe f8f4 	bl	8014bf4 <malloc>
 8016a0c:	4602      	mov	r2, r0
 8016a0e:	61e8      	str	r0, [r5, #28]
 8016a10:	b920      	cbnz	r0, 8016a1c <_Bfree+0x20>
 8016a12:	4b09      	ldr	r3, [pc, #36]	@ (8016a38 <_Bfree+0x3c>)
 8016a14:	4809      	ldr	r0, [pc, #36]	@ (8016a3c <_Bfree+0x40>)
 8016a16:	218f      	movs	r1, #143	@ 0x8f
 8016a18:	f000 ff30 	bl	801787c <__assert_func>
 8016a1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016a20:	6006      	str	r6, [r0, #0]
 8016a22:	60c6      	str	r6, [r0, #12]
 8016a24:	b13c      	cbz	r4, 8016a36 <_Bfree+0x3a>
 8016a26:	69eb      	ldr	r3, [r5, #28]
 8016a28:	6862      	ldr	r2, [r4, #4]
 8016a2a:	68db      	ldr	r3, [r3, #12]
 8016a2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016a30:	6021      	str	r1, [r4, #0]
 8016a32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016a36:	bd70      	pop	{r4, r5, r6, pc}
 8016a38:	0801f0d0 	.word	0x0801f0d0
 8016a3c:	0801f150 	.word	0x0801f150

08016a40 <__multadd>:
 8016a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a44:	690d      	ldr	r5, [r1, #16]
 8016a46:	4607      	mov	r7, r0
 8016a48:	460c      	mov	r4, r1
 8016a4a:	461e      	mov	r6, r3
 8016a4c:	f101 0c14 	add.w	ip, r1, #20
 8016a50:	2000      	movs	r0, #0
 8016a52:	f8dc 3000 	ldr.w	r3, [ip]
 8016a56:	b299      	uxth	r1, r3
 8016a58:	fb02 6101 	mla	r1, r2, r1, r6
 8016a5c:	0c1e      	lsrs	r6, r3, #16
 8016a5e:	0c0b      	lsrs	r3, r1, #16
 8016a60:	fb02 3306 	mla	r3, r2, r6, r3
 8016a64:	b289      	uxth	r1, r1
 8016a66:	3001      	adds	r0, #1
 8016a68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016a6c:	4285      	cmp	r5, r0
 8016a6e:	f84c 1b04 	str.w	r1, [ip], #4
 8016a72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016a76:	dcec      	bgt.n	8016a52 <__multadd+0x12>
 8016a78:	b30e      	cbz	r6, 8016abe <__multadd+0x7e>
 8016a7a:	68a3      	ldr	r3, [r4, #8]
 8016a7c:	42ab      	cmp	r3, r5
 8016a7e:	dc19      	bgt.n	8016ab4 <__multadd+0x74>
 8016a80:	6861      	ldr	r1, [r4, #4]
 8016a82:	4638      	mov	r0, r7
 8016a84:	3101      	adds	r1, #1
 8016a86:	f7ff ff79 	bl	801697c <_Balloc>
 8016a8a:	4680      	mov	r8, r0
 8016a8c:	b928      	cbnz	r0, 8016a9a <__multadd+0x5a>
 8016a8e:	4602      	mov	r2, r0
 8016a90:	4b0c      	ldr	r3, [pc, #48]	@ (8016ac4 <__multadd+0x84>)
 8016a92:	480d      	ldr	r0, [pc, #52]	@ (8016ac8 <__multadd+0x88>)
 8016a94:	21ba      	movs	r1, #186	@ 0xba
 8016a96:	f000 fef1 	bl	801787c <__assert_func>
 8016a9a:	6922      	ldr	r2, [r4, #16]
 8016a9c:	3202      	adds	r2, #2
 8016a9e:	f104 010c 	add.w	r1, r4, #12
 8016aa2:	0092      	lsls	r2, r2, #2
 8016aa4:	300c      	adds	r0, #12
 8016aa6:	f7ff f8c2 	bl	8015c2e <memcpy>
 8016aaa:	4621      	mov	r1, r4
 8016aac:	4638      	mov	r0, r7
 8016aae:	f7ff ffa5 	bl	80169fc <_Bfree>
 8016ab2:	4644      	mov	r4, r8
 8016ab4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016ab8:	3501      	adds	r5, #1
 8016aba:	615e      	str	r6, [r3, #20]
 8016abc:	6125      	str	r5, [r4, #16]
 8016abe:	4620      	mov	r0, r4
 8016ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ac4:	0801f13f 	.word	0x0801f13f
 8016ac8:	0801f150 	.word	0x0801f150

08016acc <__hi0bits>:
 8016acc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	bf36      	itet	cc
 8016ad4:	0403      	lslcc	r3, r0, #16
 8016ad6:	2000      	movcs	r0, #0
 8016ad8:	2010      	movcc	r0, #16
 8016ada:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016ade:	bf3c      	itt	cc
 8016ae0:	021b      	lslcc	r3, r3, #8
 8016ae2:	3008      	addcc	r0, #8
 8016ae4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016ae8:	bf3c      	itt	cc
 8016aea:	011b      	lslcc	r3, r3, #4
 8016aec:	3004      	addcc	r0, #4
 8016aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016af2:	bf3c      	itt	cc
 8016af4:	009b      	lslcc	r3, r3, #2
 8016af6:	3002      	addcc	r0, #2
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	db05      	blt.n	8016b08 <__hi0bits+0x3c>
 8016afc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016b00:	f100 0001 	add.w	r0, r0, #1
 8016b04:	bf08      	it	eq
 8016b06:	2020      	moveq	r0, #32
 8016b08:	4770      	bx	lr

08016b0a <__lo0bits>:
 8016b0a:	6803      	ldr	r3, [r0, #0]
 8016b0c:	4602      	mov	r2, r0
 8016b0e:	f013 0007 	ands.w	r0, r3, #7
 8016b12:	d00b      	beq.n	8016b2c <__lo0bits+0x22>
 8016b14:	07d9      	lsls	r1, r3, #31
 8016b16:	d421      	bmi.n	8016b5c <__lo0bits+0x52>
 8016b18:	0798      	lsls	r0, r3, #30
 8016b1a:	bf49      	itett	mi
 8016b1c:	085b      	lsrmi	r3, r3, #1
 8016b1e:	089b      	lsrpl	r3, r3, #2
 8016b20:	2001      	movmi	r0, #1
 8016b22:	6013      	strmi	r3, [r2, #0]
 8016b24:	bf5c      	itt	pl
 8016b26:	6013      	strpl	r3, [r2, #0]
 8016b28:	2002      	movpl	r0, #2
 8016b2a:	4770      	bx	lr
 8016b2c:	b299      	uxth	r1, r3
 8016b2e:	b909      	cbnz	r1, 8016b34 <__lo0bits+0x2a>
 8016b30:	0c1b      	lsrs	r3, r3, #16
 8016b32:	2010      	movs	r0, #16
 8016b34:	b2d9      	uxtb	r1, r3
 8016b36:	b909      	cbnz	r1, 8016b3c <__lo0bits+0x32>
 8016b38:	3008      	adds	r0, #8
 8016b3a:	0a1b      	lsrs	r3, r3, #8
 8016b3c:	0719      	lsls	r1, r3, #28
 8016b3e:	bf04      	itt	eq
 8016b40:	091b      	lsreq	r3, r3, #4
 8016b42:	3004      	addeq	r0, #4
 8016b44:	0799      	lsls	r1, r3, #30
 8016b46:	bf04      	itt	eq
 8016b48:	089b      	lsreq	r3, r3, #2
 8016b4a:	3002      	addeq	r0, #2
 8016b4c:	07d9      	lsls	r1, r3, #31
 8016b4e:	d403      	bmi.n	8016b58 <__lo0bits+0x4e>
 8016b50:	085b      	lsrs	r3, r3, #1
 8016b52:	f100 0001 	add.w	r0, r0, #1
 8016b56:	d003      	beq.n	8016b60 <__lo0bits+0x56>
 8016b58:	6013      	str	r3, [r2, #0]
 8016b5a:	4770      	bx	lr
 8016b5c:	2000      	movs	r0, #0
 8016b5e:	4770      	bx	lr
 8016b60:	2020      	movs	r0, #32
 8016b62:	4770      	bx	lr

08016b64 <__i2b>:
 8016b64:	b510      	push	{r4, lr}
 8016b66:	460c      	mov	r4, r1
 8016b68:	2101      	movs	r1, #1
 8016b6a:	f7ff ff07 	bl	801697c <_Balloc>
 8016b6e:	4602      	mov	r2, r0
 8016b70:	b928      	cbnz	r0, 8016b7e <__i2b+0x1a>
 8016b72:	4b05      	ldr	r3, [pc, #20]	@ (8016b88 <__i2b+0x24>)
 8016b74:	4805      	ldr	r0, [pc, #20]	@ (8016b8c <__i2b+0x28>)
 8016b76:	f240 1145 	movw	r1, #325	@ 0x145
 8016b7a:	f000 fe7f 	bl	801787c <__assert_func>
 8016b7e:	2301      	movs	r3, #1
 8016b80:	6144      	str	r4, [r0, #20]
 8016b82:	6103      	str	r3, [r0, #16]
 8016b84:	bd10      	pop	{r4, pc}
 8016b86:	bf00      	nop
 8016b88:	0801f13f 	.word	0x0801f13f
 8016b8c:	0801f150 	.word	0x0801f150

08016b90 <__multiply>:
 8016b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b94:	4614      	mov	r4, r2
 8016b96:	690a      	ldr	r2, [r1, #16]
 8016b98:	6923      	ldr	r3, [r4, #16]
 8016b9a:	429a      	cmp	r2, r3
 8016b9c:	bfa8      	it	ge
 8016b9e:	4623      	movge	r3, r4
 8016ba0:	460f      	mov	r7, r1
 8016ba2:	bfa4      	itt	ge
 8016ba4:	460c      	movge	r4, r1
 8016ba6:	461f      	movge	r7, r3
 8016ba8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8016bac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016bb0:	68a3      	ldr	r3, [r4, #8]
 8016bb2:	6861      	ldr	r1, [r4, #4]
 8016bb4:	eb0a 0609 	add.w	r6, sl, r9
 8016bb8:	42b3      	cmp	r3, r6
 8016bba:	b085      	sub	sp, #20
 8016bbc:	bfb8      	it	lt
 8016bbe:	3101      	addlt	r1, #1
 8016bc0:	f7ff fedc 	bl	801697c <_Balloc>
 8016bc4:	b930      	cbnz	r0, 8016bd4 <__multiply+0x44>
 8016bc6:	4602      	mov	r2, r0
 8016bc8:	4b44      	ldr	r3, [pc, #272]	@ (8016cdc <__multiply+0x14c>)
 8016bca:	4845      	ldr	r0, [pc, #276]	@ (8016ce0 <__multiply+0x150>)
 8016bcc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016bd0:	f000 fe54 	bl	801787c <__assert_func>
 8016bd4:	f100 0514 	add.w	r5, r0, #20
 8016bd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016bdc:	462b      	mov	r3, r5
 8016bde:	2200      	movs	r2, #0
 8016be0:	4543      	cmp	r3, r8
 8016be2:	d321      	bcc.n	8016c28 <__multiply+0x98>
 8016be4:	f107 0114 	add.w	r1, r7, #20
 8016be8:	f104 0214 	add.w	r2, r4, #20
 8016bec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8016bf0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8016bf4:	9302      	str	r3, [sp, #8]
 8016bf6:	1b13      	subs	r3, r2, r4
 8016bf8:	3b15      	subs	r3, #21
 8016bfa:	f023 0303 	bic.w	r3, r3, #3
 8016bfe:	3304      	adds	r3, #4
 8016c00:	f104 0715 	add.w	r7, r4, #21
 8016c04:	42ba      	cmp	r2, r7
 8016c06:	bf38      	it	cc
 8016c08:	2304      	movcc	r3, #4
 8016c0a:	9301      	str	r3, [sp, #4]
 8016c0c:	9b02      	ldr	r3, [sp, #8]
 8016c0e:	9103      	str	r1, [sp, #12]
 8016c10:	428b      	cmp	r3, r1
 8016c12:	d80c      	bhi.n	8016c2e <__multiply+0x9e>
 8016c14:	2e00      	cmp	r6, #0
 8016c16:	dd03      	ble.n	8016c20 <__multiply+0x90>
 8016c18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d05b      	beq.n	8016cd8 <__multiply+0x148>
 8016c20:	6106      	str	r6, [r0, #16]
 8016c22:	b005      	add	sp, #20
 8016c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c28:	f843 2b04 	str.w	r2, [r3], #4
 8016c2c:	e7d8      	b.n	8016be0 <__multiply+0x50>
 8016c2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8016c32:	f1ba 0f00 	cmp.w	sl, #0
 8016c36:	d024      	beq.n	8016c82 <__multiply+0xf2>
 8016c38:	f104 0e14 	add.w	lr, r4, #20
 8016c3c:	46a9      	mov	r9, r5
 8016c3e:	f04f 0c00 	mov.w	ip, #0
 8016c42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016c46:	f8d9 3000 	ldr.w	r3, [r9]
 8016c4a:	fa1f fb87 	uxth.w	fp, r7
 8016c4e:	b29b      	uxth	r3, r3
 8016c50:	fb0a 330b 	mla	r3, sl, fp, r3
 8016c54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8016c58:	f8d9 7000 	ldr.w	r7, [r9]
 8016c5c:	4463      	add	r3, ip
 8016c5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016c62:	fb0a c70b 	mla	r7, sl, fp, ip
 8016c66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8016c6a:	b29b      	uxth	r3, r3
 8016c6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016c70:	4572      	cmp	r2, lr
 8016c72:	f849 3b04 	str.w	r3, [r9], #4
 8016c76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8016c7a:	d8e2      	bhi.n	8016c42 <__multiply+0xb2>
 8016c7c:	9b01      	ldr	r3, [sp, #4]
 8016c7e:	f845 c003 	str.w	ip, [r5, r3]
 8016c82:	9b03      	ldr	r3, [sp, #12]
 8016c84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016c88:	3104      	adds	r1, #4
 8016c8a:	f1b9 0f00 	cmp.w	r9, #0
 8016c8e:	d021      	beq.n	8016cd4 <__multiply+0x144>
 8016c90:	682b      	ldr	r3, [r5, #0]
 8016c92:	f104 0c14 	add.w	ip, r4, #20
 8016c96:	46ae      	mov	lr, r5
 8016c98:	f04f 0a00 	mov.w	sl, #0
 8016c9c:	f8bc b000 	ldrh.w	fp, [ip]
 8016ca0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8016ca4:	fb09 770b 	mla	r7, r9, fp, r7
 8016ca8:	4457      	add	r7, sl
 8016caa:	b29b      	uxth	r3, r3
 8016cac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8016cb0:	f84e 3b04 	str.w	r3, [lr], #4
 8016cb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8016cb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016cbc:	f8be 3000 	ldrh.w	r3, [lr]
 8016cc0:	fb09 330a 	mla	r3, r9, sl, r3
 8016cc4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8016cc8:	4562      	cmp	r2, ip
 8016cca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016cce:	d8e5      	bhi.n	8016c9c <__multiply+0x10c>
 8016cd0:	9f01      	ldr	r7, [sp, #4]
 8016cd2:	51eb      	str	r3, [r5, r7]
 8016cd4:	3504      	adds	r5, #4
 8016cd6:	e799      	b.n	8016c0c <__multiply+0x7c>
 8016cd8:	3e01      	subs	r6, #1
 8016cda:	e79b      	b.n	8016c14 <__multiply+0x84>
 8016cdc:	0801f13f 	.word	0x0801f13f
 8016ce0:	0801f150 	.word	0x0801f150

08016ce4 <__pow5mult>:
 8016ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ce8:	4615      	mov	r5, r2
 8016cea:	f012 0203 	ands.w	r2, r2, #3
 8016cee:	4607      	mov	r7, r0
 8016cf0:	460e      	mov	r6, r1
 8016cf2:	d007      	beq.n	8016d04 <__pow5mult+0x20>
 8016cf4:	4c25      	ldr	r4, [pc, #148]	@ (8016d8c <__pow5mult+0xa8>)
 8016cf6:	3a01      	subs	r2, #1
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016cfe:	f7ff fe9f 	bl	8016a40 <__multadd>
 8016d02:	4606      	mov	r6, r0
 8016d04:	10ad      	asrs	r5, r5, #2
 8016d06:	d03d      	beq.n	8016d84 <__pow5mult+0xa0>
 8016d08:	69fc      	ldr	r4, [r7, #28]
 8016d0a:	b97c      	cbnz	r4, 8016d2c <__pow5mult+0x48>
 8016d0c:	2010      	movs	r0, #16
 8016d0e:	f7fd ff71 	bl	8014bf4 <malloc>
 8016d12:	4602      	mov	r2, r0
 8016d14:	61f8      	str	r0, [r7, #28]
 8016d16:	b928      	cbnz	r0, 8016d24 <__pow5mult+0x40>
 8016d18:	4b1d      	ldr	r3, [pc, #116]	@ (8016d90 <__pow5mult+0xac>)
 8016d1a:	481e      	ldr	r0, [pc, #120]	@ (8016d94 <__pow5mult+0xb0>)
 8016d1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016d20:	f000 fdac 	bl	801787c <__assert_func>
 8016d24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016d28:	6004      	str	r4, [r0, #0]
 8016d2a:	60c4      	str	r4, [r0, #12]
 8016d2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016d30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016d34:	b94c      	cbnz	r4, 8016d4a <__pow5mult+0x66>
 8016d36:	f240 2171 	movw	r1, #625	@ 0x271
 8016d3a:	4638      	mov	r0, r7
 8016d3c:	f7ff ff12 	bl	8016b64 <__i2b>
 8016d40:	2300      	movs	r3, #0
 8016d42:	f8c8 0008 	str.w	r0, [r8, #8]
 8016d46:	4604      	mov	r4, r0
 8016d48:	6003      	str	r3, [r0, #0]
 8016d4a:	f04f 0900 	mov.w	r9, #0
 8016d4e:	07eb      	lsls	r3, r5, #31
 8016d50:	d50a      	bpl.n	8016d68 <__pow5mult+0x84>
 8016d52:	4631      	mov	r1, r6
 8016d54:	4622      	mov	r2, r4
 8016d56:	4638      	mov	r0, r7
 8016d58:	f7ff ff1a 	bl	8016b90 <__multiply>
 8016d5c:	4631      	mov	r1, r6
 8016d5e:	4680      	mov	r8, r0
 8016d60:	4638      	mov	r0, r7
 8016d62:	f7ff fe4b 	bl	80169fc <_Bfree>
 8016d66:	4646      	mov	r6, r8
 8016d68:	106d      	asrs	r5, r5, #1
 8016d6a:	d00b      	beq.n	8016d84 <__pow5mult+0xa0>
 8016d6c:	6820      	ldr	r0, [r4, #0]
 8016d6e:	b938      	cbnz	r0, 8016d80 <__pow5mult+0x9c>
 8016d70:	4622      	mov	r2, r4
 8016d72:	4621      	mov	r1, r4
 8016d74:	4638      	mov	r0, r7
 8016d76:	f7ff ff0b 	bl	8016b90 <__multiply>
 8016d7a:	6020      	str	r0, [r4, #0]
 8016d7c:	f8c0 9000 	str.w	r9, [r0]
 8016d80:	4604      	mov	r4, r0
 8016d82:	e7e4      	b.n	8016d4e <__pow5mult+0x6a>
 8016d84:	4630      	mov	r0, r6
 8016d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d8a:	bf00      	nop
 8016d8c:	0801f1ac 	.word	0x0801f1ac
 8016d90:	0801f0d0 	.word	0x0801f0d0
 8016d94:	0801f150 	.word	0x0801f150

08016d98 <__lshift>:
 8016d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d9c:	460c      	mov	r4, r1
 8016d9e:	6849      	ldr	r1, [r1, #4]
 8016da0:	6923      	ldr	r3, [r4, #16]
 8016da2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016da6:	68a3      	ldr	r3, [r4, #8]
 8016da8:	4607      	mov	r7, r0
 8016daa:	4691      	mov	r9, r2
 8016dac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016db0:	f108 0601 	add.w	r6, r8, #1
 8016db4:	42b3      	cmp	r3, r6
 8016db6:	db0b      	blt.n	8016dd0 <__lshift+0x38>
 8016db8:	4638      	mov	r0, r7
 8016dba:	f7ff fddf 	bl	801697c <_Balloc>
 8016dbe:	4605      	mov	r5, r0
 8016dc0:	b948      	cbnz	r0, 8016dd6 <__lshift+0x3e>
 8016dc2:	4602      	mov	r2, r0
 8016dc4:	4b28      	ldr	r3, [pc, #160]	@ (8016e68 <__lshift+0xd0>)
 8016dc6:	4829      	ldr	r0, [pc, #164]	@ (8016e6c <__lshift+0xd4>)
 8016dc8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016dcc:	f000 fd56 	bl	801787c <__assert_func>
 8016dd0:	3101      	adds	r1, #1
 8016dd2:	005b      	lsls	r3, r3, #1
 8016dd4:	e7ee      	b.n	8016db4 <__lshift+0x1c>
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	f100 0114 	add.w	r1, r0, #20
 8016ddc:	f100 0210 	add.w	r2, r0, #16
 8016de0:	4618      	mov	r0, r3
 8016de2:	4553      	cmp	r3, sl
 8016de4:	db33      	blt.n	8016e4e <__lshift+0xb6>
 8016de6:	6920      	ldr	r0, [r4, #16]
 8016de8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016dec:	f104 0314 	add.w	r3, r4, #20
 8016df0:	f019 091f 	ands.w	r9, r9, #31
 8016df4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016df8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016dfc:	d02b      	beq.n	8016e56 <__lshift+0xbe>
 8016dfe:	f1c9 0e20 	rsb	lr, r9, #32
 8016e02:	468a      	mov	sl, r1
 8016e04:	2200      	movs	r2, #0
 8016e06:	6818      	ldr	r0, [r3, #0]
 8016e08:	fa00 f009 	lsl.w	r0, r0, r9
 8016e0c:	4310      	orrs	r0, r2
 8016e0e:	f84a 0b04 	str.w	r0, [sl], #4
 8016e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e16:	459c      	cmp	ip, r3
 8016e18:	fa22 f20e 	lsr.w	r2, r2, lr
 8016e1c:	d8f3      	bhi.n	8016e06 <__lshift+0x6e>
 8016e1e:	ebac 0304 	sub.w	r3, ip, r4
 8016e22:	3b15      	subs	r3, #21
 8016e24:	f023 0303 	bic.w	r3, r3, #3
 8016e28:	3304      	adds	r3, #4
 8016e2a:	f104 0015 	add.w	r0, r4, #21
 8016e2e:	4584      	cmp	ip, r0
 8016e30:	bf38      	it	cc
 8016e32:	2304      	movcc	r3, #4
 8016e34:	50ca      	str	r2, [r1, r3]
 8016e36:	b10a      	cbz	r2, 8016e3c <__lshift+0xa4>
 8016e38:	f108 0602 	add.w	r6, r8, #2
 8016e3c:	3e01      	subs	r6, #1
 8016e3e:	4638      	mov	r0, r7
 8016e40:	612e      	str	r6, [r5, #16]
 8016e42:	4621      	mov	r1, r4
 8016e44:	f7ff fdda 	bl	80169fc <_Bfree>
 8016e48:	4628      	mov	r0, r5
 8016e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016e52:	3301      	adds	r3, #1
 8016e54:	e7c5      	b.n	8016de2 <__lshift+0x4a>
 8016e56:	3904      	subs	r1, #4
 8016e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016e60:	459c      	cmp	ip, r3
 8016e62:	d8f9      	bhi.n	8016e58 <__lshift+0xc0>
 8016e64:	e7ea      	b.n	8016e3c <__lshift+0xa4>
 8016e66:	bf00      	nop
 8016e68:	0801f13f 	.word	0x0801f13f
 8016e6c:	0801f150 	.word	0x0801f150

08016e70 <__mcmp>:
 8016e70:	690a      	ldr	r2, [r1, #16]
 8016e72:	4603      	mov	r3, r0
 8016e74:	6900      	ldr	r0, [r0, #16]
 8016e76:	1a80      	subs	r0, r0, r2
 8016e78:	b530      	push	{r4, r5, lr}
 8016e7a:	d10e      	bne.n	8016e9a <__mcmp+0x2a>
 8016e7c:	3314      	adds	r3, #20
 8016e7e:	3114      	adds	r1, #20
 8016e80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016e84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016e88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016e8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016e90:	4295      	cmp	r5, r2
 8016e92:	d003      	beq.n	8016e9c <__mcmp+0x2c>
 8016e94:	d205      	bcs.n	8016ea2 <__mcmp+0x32>
 8016e96:	f04f 30ff 	mov.w	r0, #4294967295
 8016e9a:	bd30      	pop	{r4, r5, pc}
 8016e9c:	42a3      	cmp	r3, r4
 8016e9e:	d3f3      	bcc.n	8016e88 <__mcmp+0x18>
 8016ea0:	e7fb      	b.n	8016e9a <__mcmp+0x2a>
 8016ea2:	2001      	movs	r0, #1
 8016ea4:	e7f9      	b.n	8016e9a <__mcmp+0x2a>
	...

08016ea8 <__mdiff>:
 8016ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eac:	4689      	mov	r9, r1
 8016eae:	4606      	mov	r6, r0
 8016eb0:	4611      	mov	r1, r2
 8016eb2:	4648      	mov	r0, r9
 8016eb4:	4614      	mov	r4, r2
 8016eb6:	f7ff ffdb 	bl	8016e70 <__mcmp>
 8016eba:	1e05      	subs	r5, r0, #0
 8016ebc:	d112      	bne.n	8016ee4 <__mdiff+0x3c>
 8016ebe:	4629      	mov	r1, r5
 8016ec0:	4630      	mov	r0, r6
 8016ec2:	f7ff fd5b 	bl	801697c <_Balloc>
 8016ec6:	4602      	mov	r2, r0
 8016ec8:	b928      	cbnz	r0, 8016ed6 <__mdiff+0x2e>
 8016eca:	4b3f      	ldr	r3, [pc, #252]	@ (8016fc8 <__mdiff+0x120>)
 8016ecc:	f240 2137 	movw	r1, #567	@ 0x237
 8016ed0:	483e      	ldr	r0, [pc, #248]	@ (8016fcc <__mdiff+0x124>)
 8016ed2:	f000 fcd3 	bl	801787c <__assert_func>
 8016ed6:	2301      	movs	r3, #1
 8016ed8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016edc:	4610      	mov	r0, r2
 8016ede:	b003      	add	sp, #12
 8016ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ee4:	bfbc      	itt	lt
 8016ee6:	464b      	movlt	r3, r9
 8016ee8:	46a1      	movlt	r9, r4
 8016eea:	4630      	mov	r0, r6
 8016eec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016ef0:	bfba      	itte	lt
 8016ef2:	461c      	movlt	r4, r3
 8016ef4:	2501      	movlt	r5, #1
 8016ef6:	2500      	movge	r5, #0
 8016ef8:	f7ff fd40 	bl	801697c <_Balloc>
 8016efc:	4602      	mov	r2, r0
 8016efe:	b918      	cbnz	r0, 8016f08 <__mdiff+0x60>
 8016f00:	4b31      	ldr	r3, [pc, #196]	@ (8016fc8 <__mdiff+0x120>)
 8016f02:	f240 2145 	movw	r1, #581	@ 0x245
 8016f06:	e7e3      	b.n	8016ed0 <__mdiff+0x28>
 8016f08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016f0c:	6926      	ldr	r6, [r4, #16]
 8016f0e:	60c5      	str	r5, [r0, #12]
 8016f10:	f109 0310 	add.w	r3, r9, #16
 8016f14:	f109 0514 	add.w	r5, r9, #20
 8016f18:	f104 0e14 	add.w	lr, r4, #20
 8016f1c:	f100 0b14 	add.w	fp, r0, #20
 8016f20:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016f24:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016f28:	9301      	str	r3, [sp, #4]
 8016f2a:	46d9      	mov	r9, fp
 8016f2c:	f04f 0c00 	mov.w	ip, #0
 8016f30:	9b01      	ldr	r3, [sp, #4]
 8016f32:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016f36:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016f3a:	9301      	str	r3, [sp, #4]
 8016f3c:	fa1f f38a 	uxth.w	r3, sl
 8016f40:	4619      	mov	r1, r3
 8016f42:	b283      	uxth	r3, r0
 8016f44:	1acb      	subs	r3, r1, r3
 8016f46:	0c00      	lsrs	r0, r0, #16
 8016f48:	4463      	add	r3, ip
 8016f4a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016f4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016f52:	b29b      	uxth	r3, r3
 8016f54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016f58:	4576      	cmp	r6, lr
 8016f5a:	f849 3b04 	str.w	r3, [r9], #4
 8016f5e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016f62:	d8e5      	bhi.n	8016f30 <__mdiff+0x88>
 8016f64:	1b33      	subs	r3, r6, r4
 8016f66:	3b15      	subs	r3, #21
 8016f68:	f023 0303 	bic.w	r3, r3, #3
 8016f6c:	3415      	adds	r4, #21
 8016f6e:	3304      	adds	r3, #4
 8016f70:	42a6      	cmp	r6, r4
 8016f72:	bf38      	it	cc
 8016f74:	2304      	movcc	r3, #4
 8016f76:	441d      	add	r5, r3
 8016f78:	445b      	add	r3, fp
 8016f7a:	461e      	mov	r6, r3
 8016f7c:	462c      	mov	r4, r5
 8016f7e:	4544      	cmp	r4, r8
 8016f80:	d30e      	bcc.n	8016fa0 <__mdiff+0xf8>
 8016f82:	f108 0103 	add.w	r1, r8, #3
 8016f86:	1b49      	subs	r1, r1, r5
 8016f88:	f021 0103 	bic.w	r1, r1, #3
 8016f8c:	3d03      	subs	r5, #3
 8016f8e:	45a8      	cmp	r8, r5
 8016f90:	bf38      	it	cc
 8016f92:	2100      	movcc	r1, #0
 8016f94:	440b      	add	r3, r1
 8016f96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016f9a:	b191      	cbz	r1, 8016fc2 <__mdiff+0x11a>
 8016f9c:	6117      	str	r7, [r2, #16]
 8016f9e:	e79d      	b.n	8016edc <__mdiff+0x34>
 8016fa0:	f854 1b04 	ldr.w	r1, [r4], #4
 8016fa4:	46e6      	mov	lr, ip
 8016fa6:	0c08      	lsrs	r0, r1, #16
 8016fa8:	fa1c fc81 	uxtah	ip, ip, r1
 8016fac:	4471      	add	r1, lr
 8016fae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016fb2:	b289      	uxth	r1, r1
 8016fb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016fb8:	f846 1b04 	str.w	r1, [r6], #4
 8016fbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016fc0:	e7dd      	b.n	8016f7e <__mdiff+0xd6>
 8016fc2:	3f01      	subs	r7, #1
 8016fc4:	e7e7      	b.n	8016f96 <__mdiff+0xee>
 8016fc6:	bf00      	nop
 8016fc8:	0801f13f 	.word	0x0801f13f
 8016fcc:	0801f150 	.word	0x0801f150

08016fd0 <__d2b>:
 8016fd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016fd4:	460f      	mov	r7, r1
 8016fd6:	2101      	movs	r1, #1
 8016fd8:	ec59 8b10 	vmov	r8, r9, d0
 8016fdc:	4616      	mov	r6, r2
 8016fde:	f7ff fccd 	bl	801697c <_Balloc>
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	b930      	cbnz	r0, 8016ff4 <__d2b+0x24>
 8016fe6:	4602      	mov	r2, r0
 8016fe8:	4b23      	ldr	r3, [pc, #140]	@ (8017078 <__d2b+0xa8>)
 8016fea:	4824      	ldr	r0, [pc, #144]	@ (801707c <__d2b+0xac>)
 8016fec:	f240 310f 	movw	r1, #783	@ 0x30f
 8016ff0:	f000 fc44 	bl	801787c <__assert_func>
 8016ff4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016ff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016ffc:	b10d      	cbz	r5, 8017002 <__d2b+0x32>
 8016ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017002:	9301      	str	r3, [sp, #4]
 8017004:	f1b8 0300 	subs.w	r3, r8, #0
 8017008:	d023      	beq.n	8017052 <__d2b+0x82>
 801700a:	4668      	mov	r0, sp
 801700c:	9300      	str	r3, [sp, #0]
 801700e:	f7ff fd7c 	bl	8016b0a <__lo0bits>
 8017012:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017016:	b1d0      	cbz	r0, 801704e <__d2b+0x7e>
 8017018:	f1c0 0320 	rsb	r3, r0, #32
 801701c:	fa02 f303 	lsl.w	r3, r2, r3
 8017020:	430b      	orrs	r3, r1
 8017022:	40c2      	lsrs	r2, r0
 8017024:	6163      	str	r3, [r4, #20]
 8017026:	9201      	str	r2, [sp, #4]
 8017028:	9b01      	ldr	r3, [sp, #4]
 801702a:	61a3      	str	r3, [r4, #24]
 801702c:	2b00      	cmp	r3, #0
 801702e:	bf0c      	ite	eq
 8017030:	2201      	moveq	r2, #1
 8017032:	2202      	movne	r2, #2
 8017034:	6122      	str	r2, [r4, #16]
 8017036:	b1a5      	cbz	r5, 8017062 <__d2b+0x92>
 8017038:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801703c:	4405      	add	r5, r0
 801703e:	603d      	str	r5, [r7, #0]
 8017040:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017044:	6030      	str	r0, [r6, #0]
 8017046:	4620      	mov	r0, r4
 8017048:	b003      	add	sp, #12
 801704a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801704e:	6161      	str	r1, [r4, #20]
 8017050:	e7ea      	b.n	8017028 <__d2b+0x58>
 8017052:	a801      	add	r0, sp, #4
 8017054:	f7ff fd59 	bl	8016b0a <__lo0bits>
 8017058:	9b01      	ldr	r3, [sp, #4]
 801705a:	6163      	str	r3, [r4, #20]
 801705c:	3020      	adds	r0, #32
 801705e:	2201      	movs	r2, #1
 8017060:	e7e8      	b.n	8017034 <__d2b+0x64>
 8017062:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017066:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801706a:	6038      	str	r0, [r7, #0]
 801706c:	6918      	ldr	r0, [r3, #16]
 801706e:	f7ff fd2d 	bl	8016acc <__hi0bits>
 8017072:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017076:	e7e5      	b.n	8017044 <__d2b+0x74>
 8017078:	0801f13f 	.word	0x0801f13f
 801707c:	0801f150 	.word	0x0801f150

08017080 <__ssputs_r>:
 8017080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017084:	688e      	ldr	r6, [r1, #8]
 8017086:	461f      	mov	r7, r3
 8017088:	42be      	cmp	r6, r7
 801708a:	680b      	ldr	r3, [r1, #0]
 801708c:	4682      	mov	sl, r0
 801708e:	460c      	mov	r4, r1
 8017090:	4690      	mov	r8, r2
 8017092:	d82d      	bhi.n	80170f0 <__ssputs_r+0x70>
 8017094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017098:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801709c:	d026      	beq.n	80170ec <__ssputs_r+0x6c>
 801709e:	6965      	ldr	r5, [r4, #20]
 80170a0:	6909      	ldr	r1, [r1, #16]
 80170a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80170a6:	eba3 0901 	sub.w	r9, r3, r1
 80170aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80170ae:	1c7b      	adds	r3, r7, #1
 80170b0:	444b      	add	r3, r9
 80170b2:	106d      	asrs	r5, r5, #1
 80170b4:	429d      	cmp	r5, r3
 80170b6:	bf38      	it	cc
 80170b8:	461d      	movcc	r5, r3
 80170ba:	0553      	lsls	r3, r2, #21
 80170bc:	d527      	bpl.n	801710e <__ssputs_r+0x8e>
 80170be:	4629      	mov	r1, r5
 80170c0:	f7fd fdca 	bl	8014c58 <_malloc_r>
 80170c4:	4606      	mov	r6, r0
 80170c6:	b360      	cbz	r0, 8017122 <__ssputs_r+0xa2>
 80170c8:	6921      	ldr	r1, [r4, #16]
 80170ca:	464a      	mov	r2, r9
 80170cc:	f7fe fdaf 	bl	8015c2e <memcpy>
 80170d0:	89a3      	ldrh	r3, [r4, #12]
 80170d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80170d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80170da:	81a3      	strh	r3, [r4, #12]
 80170dc:	6126      	str	r6, [r4, #16]
 80170de:	6165      	str	r5, [r4, #20]
 80170e0:	444e      	add	r6, r9
 80170e2:	eba5 0509 	sub.w	r5, r5, r9
 80170e6:	6026      	str	r6, [r4, #0]
 80170e8:	60a5      	str	r5, [r4, #8]
 80170ea:	463e      	mov	r6, r7
 80170ec:	42be      	cmp	r6, r7
 80170ee:	d900      	bls.n	80170f2 <__ssputs_r+0x72>
 80170f0:	463e      	mov	r6, r7
 80170f2:	6820      	ldr	r0, [r4, #0]
 80170f4:	4632      	mov	r2, r6
 80170f6:	4641      	mov	r1, r8
 80170f8:	f7fe fce8 	bl	8015acc <memmove>
 80170fc:	68a3      	ldr	r3, [r4, #8]
 80170fe:	1b9b      	subs	r3, r3, r6
 8017100:	60a3      	str	r3, [r4, #8]
 8017102:	6823      	ldr	r3, [r4, #0]
 8017104:	4433      	add	r3, r6
 8017106:	6023      	str	r3, [r4, #0]
 8017108:	2000      	movs	r0, #0
 801710a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801710e:	462a      	mov	r2, r5
 8017110:	f000 fbe4 	bl	80178dc <_realloc_r>
 8017114:	4606      	mov	r6, r0
 8017116:	2800      	cmp	r0, #0
 8017118:	d1e0      	bne.n	80170dc <__ssputs_r+0x5c>
 801711a:	6921      	ldr	r1, [r4, #16]
 801711c:	4650      	mov	r0, sl
 801711e:	f7ff fbe3 	bl	80168e8 <_free_r>
 8017122:	230c      	movs	r3, #12
 8017124:	f8ca 3000 	str.w	r3, [sl]
 8017128:	89a3      	ldrh	r3, [r4, #12]
 801712a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801712e:	81a3      	strh	r3, [r4, #12]
 8017130:	f04f 30ff 	mov.w	r0, #4294967295
 8017134:	e7e9      	b.n	801710a <__ssputs_r+0x8a>
	...

08017138 <_svfiprintf_r>:
 8017138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801713c:	4698      	mov	r8, r3
 801713e:	898b      	ldrh	r3, [r1, #12]
 8017140:	061b      	lsls	r3, r3, #24
 8017142:	b09d      	sub	sp, #116	@ 0x74
 8017144:	4607      	mov	r7, r0
 8017146:	460d      	mov	r5, r1
 8017148:	4614      	mov	r4, r2
 801714a:	d510      	bpl.n	801716e <_svfiprintf_r+0x36>
 801714c:	690b      	ldr	r3, [r1, #16]
 801714e:	b973      	cbnz	r3, 801716e <_svfiprintf_r+0x36>
 8017150:	2140      	movs	r1, #64	@ 0x40
 8017152:	f7fd fd81 	bl	8014c58 <_malloc_r>
 8017156:	6028      	str	r0, [r5, #0]
 8017158:	6128      	str	r0, [r5, #16]
 801715a:	b930      	cbnz	r0, 801716a <_svfiprintf_r+0x32>
 801715c:	230c      	movs	r3, #12
 801715e:	603b      	str	r3, [r7, #0]
 8017160:	f04f 30ff 	mov.w	r0, #4294967295
 8017164:	b01d      	add	sp, #116	@ 0x74
 8017166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801716a:	2340      	movs	r3, #64	@ 0x40
 801716c:	616b      	str	r3, [r5, #20]
 801716e:	2300      	movs	r3, #0
 8017170:	9309      	str	r3, [sp, #36]	@ 0x24
 8017172:	2320      	movs	r3, #32
 8017174:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017178:	f8cd 800c 	str.w	r8, [sp, #12]
 801717c:	2330      	movs	r3, #48	@ 0x30
 801717e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801731c <_svfiprintf_r+0x1e4>
 8017182:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017186:	f04f 0901 	mov.w	r9, #1
 801718a:	4623      	mov	r3, r4
 801718c:	469a      	mov	sl, r3
 801718e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017192:	b10a      	cbz	r2, 8017198 <_svfiprintf_r+0x60>
 8017194:	2a25      	cmp	r2, #37	@ 0x25
 8017196:	d1f9      	bne.n	801718c <_svfiprintf_r+0x54>
 8017198:	ebba 0b04 	subs.w	fp, sl, r4
 801719c:	d00b      	beq.n	80171b6 <_svfiprintf_r+0x7e>
 801719e:	465b      	mov	r3, fp
 80171a0:	4622      	mov	r2, r4
 80171a2:	4629      	mov	r1, r5
 80171a4:	4638      	mov	r0, r7
 80171a6:	f7ff ff6b 	bl	8017080 <__ssputs_r>
 80171aa:	3001      	adds	r0, #1
 80171ac:	f000 80a7 	beq.w	80172fe <_svfiprintf_r+0x1c6>
 80171b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171b2:	445a      	add	r2, fp
 80171b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80171b6:	f89a 3000 	ldrb.w	r3, [sl]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	f000 809f 	beq.w	80172fe <_svfiprintf_r+0x1c6>
 80171c0:	2300      	movs	r3, #0
 80171c2:	f04f 32ff 	mov.w	r2, #4294967295
 80171c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171ca:	f10a 0a01 	add.w	sl, sl, #1
 80171ce:	9304      	str	r3, [sp, #16]
 80171d0:	9307      	str	r3, [sp, #28]
 80171d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80171d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80171d8:	4654      	mov	r4, sl
 80171da:	2205      	movs	r2, #5
 80171dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171e0:	484e      	ldr	r0, [pc, #312]	@ (801731c <_svfiprintf_r+0x1e4>)
 80171e2:	f7e8 fff5 	bl	80001d0 <memchr>
 80171e6:	9a04      	ldr	r2, [sp, #16]
 80171e8:	b9d8      	cbnz	r0, 8017222 <_svfiprintf_r+0xea>
 80171ea:	06d0      	lsls	r0, r2, #27
 80171ec:	bf44      	itt	mi
 80171ee:	2320      	movmi	r3, #32
 80171f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80171f4:	0711      	lsls	r1, r2, #28
 80171f6:	bf44      	itt	mi
 80171f8:	232b      	movmi	r3, #43	@ 0x2b
 80171fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80171fe:	f89a 3000 	ldrb.w	r3, [sl]
 8017202:	2b2a      	cmp	r3, #42	@ 0x2a
 8017204:	d015      	beq.n	8017232 <_svfiprintf_r+0xfa>
 8017206:	9a07      	ldr	r2, [sp, #28]
 8017208:	4654      	mov	r4, sl
 801720a:	2000      	movs	r0, #0
 801720c:	f04f 0c0a 	mov.w	ip, #10
 8017210:	4621      	mov	r1, r4
 8017212:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017216:	3b30      	subs	r3, #48	@ 0x30
 8017218:	2b09      	cmp	r3, #9
 801721a:	d94b      	bls.n	80172b4 <_svfiprintf_r+0x17c>
 801721c:	b1b0      	cbz	r0, 801724c <_svfiprintf_r+0x114>
 801721e:	9207      	str	r2, [sp, #28]
 8017220:	e014      	b.n	801724c <_svfiprintf_r+0x114>
 8017222:	eba0 0308 	sub.w	r3, r0, r8
 8017226:	fa09 f303 	lsl.w	r3, r9, r3
 801722a:	4313      	orrs	r3, r2
 801722c:	9304      	str	r3, [sp, #16]
 801722e:	46a2      	mov	sl, r4
 8017230:	e7d2      	b.n	80171d8 <_svfiprintf_r+0xa0>
 8017232:	9b03      	ldr	r3, [sp, #12]
 8017234:	1d19      	adds	r1, r3, #4
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	9103      	str	r1, [sp, #12]
 801723a:	2b00      	cmp	r3, #0
 801723c:	bfbb      	ittet	lt
 801723e:	425b      	neglt	r3, r3
 8017240:	f042 0202 	orrlt.w	r2, r2, #2
 8017244:	9307      	strge	r3, [sp, #28]
 8017246:	9307      	strlt	r3, [sp, #28]
 8017248:	bfb8      	it	lt
 801724a:	9204      	strlt	r2, [sp, #16]
 801724c:	7823      	ldrb	r3, [r4, #0]
 801724e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017250:	d10a      	bne.n	8017268 <_svfiprintf_r+0x130>
 8017252:	7863      	ldrb	r3, [r4, #1]
 8017254:	2b2a      	cmp	r3, #42	@ 0x2a
 8017256:	d132      	bne.n	80172be <_svfiprintf_r+0x186>
 8017258:	9b03      	ldr	r3, [sp, #12]
 801725a:	1d1a      	adds	r2, r3, #4
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	9203      	str	r2, [sp, #12]
 8017260:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017264:	3402      	adds	r4, #2
 8017266:	9305      	str	r3, [sp, #20]
 8017268:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801732c <_svfiprintf_r+0x1f4>
 801726c:	7821      	ldrb	r1, [r4, #0]
 801726e:	2203      	movs	r2, #3
 8017270:	4650      	mov	r0, sl
 8017272:	f7e8 ffad 	bl	80001d0 <memchr>
 8017276:	b138      	cbz	r0, 8017288 <_svfiprintf_r+0x150>
 8017278:	9b04      	ldr	r3, [sp, #16]
 801727a:	eba0 000a 	sub.w	r0, r0, sl
 801727e:	2240      	movs	r2, #64	@ 0x40
 8017280:	4082      	lsls	r2, r0
 8017282:	4313      	orrs	r3, r2
 8017284:	3401      	adds	r4, #1
 8017286:	9304      	str	r3, [sp, #16]
 8017288:	f814 1b01 	ldrb.w	r1, [r4], #1
 801728c:	4824      	ldr	r0, [pc, #144]	@ (8017320 <_svfiprintf_r+0x1e8>)
 801728e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017292:	2206      	movs	r2, #6
 8017294:	f7e8 ff9c 	bl	80001d0 <memchr>
 8017298:	2800      	cmp	r0, #0
 801729a:	d036      	beq.n	801730a <_svfiprintf_r+0x1d2>
 801729c:	4b21      	ldr	r3, [pc, #132]	@ (8017324 <_svfiprintf_r+0x1ec>)
 801729e:	bb1b      	cbnz	r3, 80172e8 <_svfiprintf_r+0x1b0>
 80172a0:	9b03      	ldr	r3, [sp, #12]
 80172a2:	3307      	adds	r3, #7
 80172a4:	f023 0307 	bic.w	r3, r3, #7
 80172a8:	3308      	adds	r3, #8
 80172aa:	9303      	str	r3, [sp, #12]
 80172ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172ae:	4433      	add	r3, r6
 80172b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80172b2:	e76a      	b.n	801718a <_svfiprintf_r+0x52>
 80172b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80172b8:	460c      	mov	r4, r1
 80172ba:	2001      	movs	r0, #1
 80172bc:	e7a8      	b.n	8017210 <_svfiprintf_r+0xd8>
 80172be:	2300      	movs	r3, #0
 80172c0:	3401      	adds	r4, #1
 80172c2:	9305      	str	r3, [sp, #20]
 80172c4:	4619      	mov	r1, r3
 80172c6:	f04f 0c0a 	mov.w	ip, #10
 80172ca:	4620      	mov	r0, r4
 80172cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172d0:	3a30      	subs	r2, #48	@ 0x30
 80172d2:	2a09      	cmp	r2, #9
 80172d4:	d903      	bls.n	80172de <_svfiprintf_r+0x1a6>
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d0c6      	beq.n	8017268 <_svfiprintf_r+0x130>
 80172da:	9105      	str	r1, [sp, #20]
 80172dc:	e7c4      	b.n	8017268 <_svfiprintf_r+0x130>
 80172de:	fb0c 2101 	mla	r1, ip, r1, r2
 80172e2:	4604      	mov	r4, r0
 80172e4:	2301      	movs	r3, #1
 80172e6:	e7f0      	b.n	80172ca <_svfiprintf_r+0x192>
 80172e8:	ab03      	add	r3, sp, #12
 80172ea:	9300      	str	r3, [sp, #0]
 80172ec:	462a      	mov	r2, r5
 80172ee:	4b0e      	ldr	r3, [pc, #56]	@ (8017328 <_svfiprintf_r+0x1f0>)
 80172f0:	a904      	add	r1, sp, #16
 80172f2:	4638      	mov	r0, r7
 80172f4:	f7fd fddc 	bl	8014eb0 <_printf_float>
 80172f8:	1c42      	adds	r2, r0, #1
 80172fa:	4606      	mov	r6, r0
 80172fc:	d1d6      	bne.n	80172ac <_svfiprintf_r+0x174>
 80172fe:	89ab      	ldrh	r3, [r5, #12]
 8017300:	065b      	lsls	r3, r3, #25
 8017302:	f53f af2d 	bmi.w	8017160 <_svfiprintf_r+0x28>
 8017306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017308:	e72c      	b.n	8017164 <_svfiprintf_r+0x2c>
 801730a:	ab03      	add	r3, sp, #12
 801730c:	9300      	str	r3, [sp, #0]
 801730e:	462a      	mov	r2, r5
 8017310:	4b05      	ldr	r3, [pc, #20]	@ (8017328 <_svfiprintf_r+0x1f0>)
 8017312:	a904      	add	r1, sp, #16
 8017314:	4638      	mov	r0, r7
 8017316:	f7fe f863 	bl	80153e0 <_printf_i>
 801731a:	e7ed      	b.n	80172f8 <_svfiprintf_r+0x1c0>
 801731c:	0801f2a8 	.word	0x0801f2a8
 8017320:	0801f2b2 	.word	0x0801f2b2
 8017324:	08014eb1 	.word	0x08014eb1
 8017328:	08017081 	.word	0x08017081
 801732c:	0801f2ae 	.word	0x0801f2ae

08017330 <__sfputc_r>:
 8017330:	6893      	ldr	r3, [r2, #8]
 8017332:	3b01      	subs	r3, #1
 8017334:	2b00      	cmp	r3, #0
 8017336:	b410      	push	{r4}
 8017338:	6093      	str	r3, [r2, #8]
 801733a:	da08      	bge.n	801734e <__sfputc_r+0x1e>
 801733c:	6994      	ldr	r4, [r2, #24]
 801733e:	42a3      	cmp	r3, r4
 8017340:	db01      	blt.n	8017346 <__sfputc_r+0x16>
 8017342:	290a      	cmp	r1, #10
 8017344:	d103      	bne.n	801734e <__sfputc_r+0x1e>
 8017346:	f85d 4b04 	ldr.w	r4, [sp], #4
 801734a:	f7fe bb2b 	b.w	80159a4 <__swbuf_r>
 801734e:	6813      	ldr	r3, [r2, #0]
 8017350:	1c58      	adds	r0, r3, #1
 8017352:	6010      	str	r0, [r2, #0]
 8017354:	7019      	strb	r1, [r3, #0]
 8017356:	4608      	mov	r0, r1
 8017358:	f85d 4b04 	ldr.w	r4, [sp], #4
 801735c:	4770      	bx	lr

0801735e <__sfputs_r>:
 801735e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017360:	4606      	mov	r6, r0
 8017362:	460f      	mov	r7, r1
 8017364:	4614      	mov	r4, r2
 8017366:	18d5      	adds	r5, r2, r3
 8017368:	42ac      	cmp	r4, r5
 801736a:	d101      	bne.n	8017370 <__sfputs_r+0x12>
 801736c:	2000      	movs	r0, #0
 801736e:	e007      	b.n	8017380 <__sfputs_r+0x22>
 8017370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017374:	463a      	mov	r2, r7
 8017376:	4630      	mov	r0, r6
 8017378:	f7ff ffda 	bl	8017330 <__sfputc_r>
 801737c:	1c43      	adds	r3, r0, #1
 801737e:	d1f3      	bne.n	8017368 <__sfputs_r+0xa>
 8017380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017384 <_vfiprintf_r>:
 8017384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017388:	460d      	mov	r5, r1
 801738a:	b09d      	sub	sp, #116	@ 0x74
 801738c:	4614      	mov	r4, r2
 801738e:	4698      	mov	r8, r3
 8017390:	4606      	mov	r6, r0
 8017392:	b118      	cbz	r0, 801739c <_vfiprintf_r+0x18>
 8017394:	6a03      	ldr	r3, [r0, #32]
 8017396:	b90b      	cbnz	r3, 801739c <_vfiprintf_r+0x18>
 8017398:	f7fe f9ce 	bl	8015738 <__sinit>
 801739c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801739e:	07d9      	lsls	r1, r3, #31
 80173a0:	d405      	bmi.n	80173ae <_vfiprintf_r+0x2a>
 80173a2:	89ab      	ldrh	r3, [r5, #12]
 80173a4:	059a      	lsls	r2, r3, #22
 80173a6:	d402      	bmi.n	80173ae <_vfiprintf_r+0x2a>
 80173a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80173aa:	f7fe fc36 	bl	8015c1a <__retarget_lock_acquire_recursive>
 80173ae:	89ab      	ldrh	r3, [r5, #12]
 80173b0:	071b      	lsls	r3, r3, #28
 80173b2:	d501      	bpl.n	80173b8 <_vfiprintf_r+0x34>
 80173b4:	692b      	ldr	r3, [r5, #16]
 80173b6:	b99b      	cbnz	r3, 80173e0 <_vfiprintf_r+0x5c>
 80173b8:	4629      	mov	r1, r5
 80173ba:	4630      	mov	r0, r6
 80173bc:	f7fe fb30 	bl	8015a20 <__swsetup_r>
 80173c0:	b170      	cbz	r0, 80173e0 <_vfiprintf_r+0x5c>
 80173c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80173c4:	07dc      	lsls	r4, r3, #31
 80173c6:	d504      	bpl.n	80173d2 <_vfiprintf_r+0x4e>
 80173c8:	f04f 30ff 	mov.w	r0, #4294967295
 80173cc:	b01d      	add	sp, #116	@ 0x74
 80173ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173d2:	89ab      	ldrh	r3, [r5, #12]
 80173d4:	0598      	lsls	r0, r3, #22
 80173d6:	d4f7      	bmi.n	80173c8 <_vfiprintf_r+0x44>
 80173d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80173da:	f7fe fc1f 	bl	8015c1c <__retarget_lock_release_recursive>
 80173de:	e7f3      	b.n	80173c8 <_vfiprintf_r+0x44>
 80173e0:	2300      	movs	r3, #0
 80173e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80173e4:	2320      	movs	r3, #32
 80173e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80173ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80173ee:	2330      	movs	r3, #48	@ 0x30
 80173f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80175a0 <_vfiprintf_r+0x21c>
 80173f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80173f8:	f04f 0901 	mov.w	r9, #1
 80173fc:	4623      	mov	r3, r4
 80173fe:	469a      	mov	sl, r3
 8017400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017404:	b10a      	cbz	r2, 801740a <_vfiprintf_r+0x86>
 8017406:	2a25      	cmp	r2, #37	@ 0x25
 8017408:	d1f9      	bne.n	80173fe <_vfiprintf_r+0x7a>
 801740a:	ebba 0b04 	subs.w	fp, sl, r4
 801740e:	d00b      	beq.n	8017428 <_vfiprintf_r+0xa4>
 8017410:	465b      	mov	r3, fp
 8017412:	4622      	mov	r2, r4
 8017414:	4629      	mov	r1, r5
 8017416:	4630      	mov	r0, r6
 8017418:	f7ff ffa1 	bl	801735e <__sfputs_r>
 801741c:	3001      	adds	r0, #1
 801741e:	f000 80a7 	beq.w	8017570 <_vfiprintf_r+0x1ec>
 8017422:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017424:	445a      	add	r2, fp
 8017426:	9209      	str	r2, [sp, #36]	@ 0x24
 8017428:	f89a 3000 	ldrb.w	r3, [sl]
 801742c:	2b00      	cmp	r3, #0
 801742e:	f000 809f 	beq.w	8017570 <_vfiprintf_r+0x1ec>
 8017432:	2300      	movs	r3, #0
 8017434:	f04f 32ff 	mov.w	r2, #4294967295
 8017438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801743c:	f10a 0a01 	add.w	sl, sl, #1
 8017440:	9304      	str	r3, [sp, #16]
 8017442:	9307      	str	r3, [sp, #28]
 8017444:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017448:	931a      	str	r3, [sp, #104]	@ 0x68
 801744a:	4654      	mov	r4, sl
 801744c:	2205      	movs	r2, #5
 801744e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017452:	4853      	ldr	r0, [pc, #332]	@ (80175a0 <_vfiprintf_r+0x21c>)
 8017454:	f7e8 febc 	bl	80001d0 <memchr>
 8017458:	9a04      	ldr	r2, [sp, #16]
 801745a:	b9d8      	cbnz	r0, 8017494 <_vfiprintf_r+0x110>
 801745c:	06d1      	lsls	r1, r2, #27
 801745e:	bf44      	itt	mi
 8017460:	2320      	movmi	r3, #32
 8017462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017466:	0713      	lsls	r3, r2, #28
 8017468:	bf44      	itt	mi
 801746a:	232b      	movmi	r3, #43	@ 0x2b
 801746c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017470:	f89a 3000 	ldrb.w	r3, [sl]
 8017474:	2b2a      	cmp	r3, #42	@ 0x2a
 8017476:	d015      	beq.n	80174a4 <_vfiprintf_r+0x120>
 8017478:	9a07      	ldr	r2, [sp, #28]
 801747a:	4654      	mov	r4, sl
 801747c:	2000      	movs	r0, #0
 801747e:	f04f 0c0a 	mov.w	ip, #10
 8017482:	4621      	mov	r1, r4
 8017484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017488:	3b30      	subs	r3, #48	@ 0x30
 801748a:	2b09      	cmp	r3, #9
 801748c:	d94b      	bls.n	8017526 <_vfiprintf_r+0x1a2>
 801748e:	b1b0      	cbz	r0, 80174be <_vfiprintf_r+0x13a>
 8017490:	9207      	str	r2, [sp, #28]
 8017492:	e014      	b.n	80174be <_vfiprintf_r+0x13a>
 8017494:	eba0 0308 	sub.w	r3, r0, r8
 8017498:	fa09 f303 	lsl.w	r3, r9, r3
 801749c:	4313      	orrs	r3, r2
 801749e:	9304      	str	r3, [sp, #16]
 80174a0:	46a2      	mov	sl, r4
 80174a2:	e7d2      	b.n	801744a <_vfiprintf_r+0xc6>
 80174a4:	9b03      	ldr	r3, [sp, #12]
 80174a6:	1d19      	adds	r1, r3, #4
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	9103      	str	r1, [sp, #12]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	bfbb      	ittet	lt
 80174b0:	425b      	neglt	r3, r3
 80174b2:	f042 0202 	orrlt.w	r2, r2, #2
 80174b6:	9307      	strge	r3, [sp, #28]
 80174b8:	9307      	strlt	r3, [sp, #28]
 80174ba:	bfb8      	it	lt
 80174bc:	9204      	strlt	r2, [sp, #16]
 80174be:	7823      	ldrb	r3, [r4, #0]
 80174c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80174c2:	d10a      	bne.n	80174da <_vfiprintf_r+0x156>
 80174c4:	7863      	ldrb	r3, [r4, #1]
 80174c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80174c8:	d132      	bne.n	8017530 <_vfiprintf_r+0x1ac>
 80174ca:	9b03      	ldr	r3, [sp, #12]
 80174cc:	1d1a      	adds	r2, r3, #4
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	9203      	str	r2, [sp, #12]
 80174d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80174d6:	3402      	adds	r4, #2
 80174d8:	9305      	str	r3, [sp, #20]
 80174da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80175b0 <_vfiprintf_r+0x22c>
 80174de:	7821      	ldrb	r1, [r4, #0]
 80174e0:	2203      	movs	r2, #3
 80174e2:	4650      	mov	r0, sl
 80174e4:	f7e8 fe74 	bl	80001d0 <memchr>
 80174e8:	b138      	cbz	r0, 80174fa <_vfiprintf_r+0x176>
 80174ea:	9b04      	ldr	r3, [sp, #16]
 80174ec:	eba0 000a 	sub.w	r0, r0, sl
 80174f0:	2240      	movs	r2, #64	@ 0x40
 80174f2:	4082      	lsls	r2, r0
 80174f4:	4313      	orrs	r3, r2
 80174f6:	3401      	adds	r4, #1
 80174f8:	9304      	str	r3, [sp, #16]
 80174fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174fe:	4829      	ldr	r0, [pc, #164]	@ (80175a4 <_vfiprintf_r+0x220>)
 8017500:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017504:	2206      	movs	r2, #6
 8017506:	f7e8 fe63 	bl	80001d0 <memchr>
 801750a:	2800      	cmp	r0, #0
 801750c:	d03f      	beq.n	801758e <_vfiprintf_r+0x20a>
 801750e:	4b26      	ldr	r3, [pc, #152]	@ (80175a8 <_vfiprintf_r+0x224>)
 8017510:	bb1b      	cbnz	r3, 801755a <_vfiprintf_r+0x1d6>
 8017512:	9b03      	ldr	r3, [sp, #12]
 8017514:	3307      	adds	r3, #7
 8017516:	f023 0307 	bic.w	r3, r3, #7
 801751a:	3308      	adds	r3, #8
 801751c:	9303      	str	r3, [sp, #12]
 801751e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017520:	443b      	add	r3, r7
 8017522:	9309      	str	r3, [sp, #36]	@ 0x24
 8017524:	e76a      	b.n	80173fc <_vfiprintf_r+0x78>
 8017526:	fb0c 3202 	mla	r2, ip, r2, r3
 801752a:	460c      	mov	r4, r1
 801752c:	2001      	movs	r0, #1
 801752e:	e7a8      	b.n	8017482 <_vfiprintf_r+0xfe>
 8017530:	2300      	movs	r3, #0
 8017532:	3401      	adds	r4, #1
 8017534:	9305      	str	r3, [sp, #20]
 8017536:	4619      	mov	r1, r3
 8017538:	f04f 0c0a 	mov.w	ip, #10
 801753c:	4620      	mov	r0, r4
 801753e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017542:	3a30      	subs	r2, #48	@ 0x30
 8017544:	2a09      	cmp	r2, #9
 8017546:	d903      	bls.n	8017550 <_vfiprintf_r+0x1cc>
 8017548:	2b00      	cmp	r3, #0
 801754a:	d0c6      	beq.n	80174da <_vfiprintf_r+0x156>
 801754c:	9105      	str	r1, [sp, #20]
 801754e:	e7c4      	b.n	80174da <_vfiprintf_r+0x156>
 8017550:	fb0c 2101 	mla	r1, ip, r1, r2
 8017554:	4604      	mov	r4, r0
 8017556:	2301      	movs	r3, #1
 8017558:	e7f0      	b.n	801753c <_vfiprintf_r+0x1b8>
 801755a:	ab03      	add	r3, sp, #12
 801755c:	9300      	str	r3, [sp, #0]
 801755e:	462a      	mov	r2, r5
 8017560:	4b12      	ldr	r3, [pc, #72]	@ (80175ac <_vfiprintf_r+0x228>)
 8017562:	a904      	add	r1, sp, #16
 8017564:	4630      	mov	r0, r6
 8017566:	f7fd fca3 	bl	8014eb0 <_printf_float>
 801756a:	4607      	mov	r7, r0
 801756c:	1c78      	adds	r0, r7, #1
 801756e:	d1d6      	bne.n	801751e <_vfiprintf_r+0x19a>
 8017570:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017572:	07d9      	lsls	r1, r3, #31
 8017574:	d405      	bmi.n	8017582 <_vfiprintf_r+0x1fe>
 8017576:	89ab      	ldrh	r3, [r5, #12]
 8017578:	059a      	lsls	r2, r3, #22
 801757a:	d402      	bmi.n	8017582 <_vfiprintf_r+0x1fe>
 801757c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801757e:	f7fe fb4d 	bl	8015c1c <__retarget_lock_release_recursive>
 8017582:	89ab      	ldrh	r3, [r5, #12]
 8017584:	065b      	lsls	r3, r3, #25
 8017586:	f53f af1f 	bmi.w	80173c8 <_vfiprintf_r+0x44>
 801758a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801758c:	e71e      	b.n	80173cc <_vfiprintf_r+0x48>
 801758e:	ab03      	add	r3, sp, #12
 8017590:	9300      	str	r3, [sp, #0]
 8017592:	462a      	mov	r2, r5
 8017594:	4b05      	ldr	r3, [pc, #20]	@ (80175ac <_vfiprintf_r+0x228>)
 8017596:	a904      	add	r1, sp, #16
 8017598:	4630      	mov	r0, r6
 801759a:	f7fd ff21 	bl	80153e0 <_printf_i>
 801759e:	e7e4      	b.n	801756a <_vfiprintf_r+0x1e6>
 80175a0:	0801f2a8 	.word	0x0801f2a8
 80175a4:	0801f2b2 	.word	0x0801f2b2
 80175a8:	08014eb1 	.word	0x08014eb1
 80175ac:	0801735f 	.word	0x0801735f
 80175b0:	0801f2ae 	.word	0x0801f2ae

080175b4 <__sflush_r>:
 80175b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80175b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175bc:	0716      	lsls	r6, r2, #28
 80175be:	4605      	mov	r5, r0
 80175c0:	460c      	mov	r4, r1
 80175c2:	d454      	bmi.n	801766e <__sflush_r+0xba>
 80175c4:	684b      	ldr	r3, [r1, #4]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	dc02      	bgt.n	80175d0 <__sflush_r+0x1c>
 80175ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	dd48      	ble.n	8017662 <__sflush_r+0xae>
 80175d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80175d2:	2e00      	cmp	r6, #0
 80175d4:	d045      	beq.n	8017662 <__sflush_r+0xae>
 80175d6:	2300      	movs	r3, #0
 80175d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80175dc:	682f      	ldr	r7, [r5, #0]
 80175de:	6a21      	ldr	r1, [r4, #32]
 80175e0:	602b      	str	r3, [r5, #0]
 80175e2:	d030      	beq.n	8017646 <__sflush_r+0x92>
 80175e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80175e6:	89a3      	ldrh	r3, [r4, #12]
 80175e8:	0759      	lsls	r1, r3, #29
 80175ea:	d505      	bpl.n	80175f8 <__sflush_r+0x44>
 80175ec:	6863      	ldr	r3, [r4, #4]
 80175ee:	1ad2      	subs	r2, r2, r3
 80175f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80175f2:	b10b      	cbz	r3, 80175f8 <__sflush_r+0x44>
 80175f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80175f6:	1ad2      	subs	r2, r2, r3
 80175f8:	2300      	movs	r3, #0
 80175fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80175fc:	6a21      	ldr	r1, [r4, #32]
 80175fe:	4628      	mov	r0, r5
 8017600:	47b0      	blx	r6
 8017602:	1c43      	adds	r3, r0, #1
 8017604:	89a3      	ldrh	r3, [r4, #12]
 8017606:	d106      	bne.n	8017616 <__sflush_r+0x62>
 8017608:	6829      	ldr	r1, [r5, #0]
 801760a:	291d      	cmp	r1, #29
 801760c:	d82b      	bhi.n	8017666 <__sflush_r+0xb2>
 801760e:	4a2a      	ldr	r2, [pc, #168]	@ (80176b8 <__sflush_r+0x104>)
 8017610:	410a      	asrs	r2, r1
 8017612:	07d6      	lsls	r6, r2, #31
 8017614:	d427      	bmi.n	8017666 <__sflush_r+0xb2>
 8017616:	2200      	movs	r2, #0
 8017618:	6062      	str	r2, [r4, #4]
 801761a:	04d9      	lsls	r1, r3, #19
 801761c:	6922      	ldr	r2, [r4, #16]
 801761e:	6022      	str	r2, [r4, #0]
 8017620:	d504      	bpl.n	801762c <__sflush_r+0x78>
 8017622:	1c42      	adds	r2, r0, #1
 8017624:	d101      	bne.n	801762a <__sflush_r+0x76>
 8017626:	682b      	ldr	r3, [r5, #0]
 8017628:	b903      	cbnz	r3, 801762c <__sflush_r+0x78>
 801762a:	6560      	str	r0, [r4, #84]	@ 0x54
 801762c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801762e:	602f      	str	r7, [r5, #0]
 8017630:	b1b9      	cbz	r1, 8017662 <__sflush_r+0xae>
 8017632:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017636:	4299      	cmp	r1, r3
 8017638:	d002      	beq.n	8017640 <__sflush_r+0x8c>
 801763a:	4628      	mov	r0, r5
 801763c:	f7ff f954 	bl	80168e8 <_free_r>
 8017640:	2300      	movs	r3, #0
 8017642:	6363      	str	r3, [r4, #52]	@ 0x34
 8017644:	e00d      	b.n	8017662 <__sflush_r+0xae>
 8017646:	2301      	movs	r3, #1
 8017648:	4628      	mov	r0, r5
 801764a:	47b0      	blx	r6
 801764c:	4602      	mov	r2, r0
 801764e:	1c50      	adds	r0, r2, #1
 8017650:	d1c9      	bne.n	80175e6 <__sflush_r+0x32>
 8017652:	682b      	ldr	r3, [r5, #0]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d0c6      	beq.n	80175e6 <__sflush_r+0x32>
 8017658:	2b1d      	cmp	r3, #29
 801765a:	d001      	beq.n	8017660 <__sflush_r+0xac>
 801765c:	2b16      	cmp	r3, #22
 801765e:	d11e      	bne.n	801769e <__sflush_r+0xea>
 8017660:	602f      	str	r7, [r5, #0]
 8017662:	2000      	movs	r0, #0
 8017664:	e022      	b.n	80176ac <__sflush_r+0xf8>
 8017666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801766a:	b21b      	sxth	r3, r3
 801766c:	e01b      	b.n	80176a6 <__sflush_r+0xf2>
 801766e:	690f      	ldr	r7, [r1, #16]
 8017670:	2f00      	cmp	r7, #0
 8017672:	d0f6      	beq.n	8017662 <__sflush_r+0xae>
 8017674:	0793      	lsls	r3, r2, #30
 8017676:	680e      	ldr	r6, [r1, #0]
 8017678:	bf08      	it	eq
 801767a:	694b      	ldreq	r3, [r1, #20]
 801767c:	600f      	str	r7, [r1, #0]
 801767e:	bf18      	it	ne
 8017680:	2300      	movne	r3, #0
 8017682:	eba6 0807 	sub.w	r8, r6, r7
 8017686:	608b      	str	r3, [r1, #8]
 8017688:	f1b8 0f00 	cmp.w	r8, #0
 801768c:	dde9      	ble.n	8017662 <__sflush_r+0xae>
 801768e:	6a21      	ldr	r1, [r4, #32]
 8017690:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017692:	4643      	mov	r3, r8
 8017694:	463a      	mov	r2, r7
 8017696:	4628      	mov	r0, r5
 8017698:	47b0      	blx	r6
 801769a:	2800      	cmp	r0, #0
 801769c:	dc08      	bgt.n	80176b0 <__sflush_r+0xfc>
 801769e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176a6:	81a3      	strh	r3, [r4, #12]
 80176a8:	f04f 30ff 	mov.w	r0, #4294967295
 80176ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176b0:	4407      	add	r7, r0
 80176b2:	eba8 0800 	sub.w	r8, r8, r0
 80176b6:	e7e7      	b.n	8017688 <__sflush_r+0xd4>
 80176b8:	dfbffffe 	.word	0xdfbffffe

080176bc <_fflush_r>:
 80176bc:	b538      	push	{r3, r4, r5, lr}
 80176be:	690b      	ldr	r3, [r1, #16]
 80176c0:	4605      	mov	r5, r0
 80176c2:	460c      	mov	r4, r1
 80176c4:	b913      	cbnz	r3, 80176cc <_fflush_r+0x10>
 80176c6:	2500      	movs	r5, #0
 80176c8:	4628      	mov	r0, r5
 80176ca:	bd38      	pop	{r3, r4, r5, pc}
 80176cc:	b118      	cbz	r0, 80176d6 <_fflush_r+0x1a>
 80176ce:	6a03      	ldr	r3, [r0, #32]
 80176d0:	b90b      	cbnz	r3, 80176d6 <_fflush_r+0x1a>
 80176d2:	f7fe f831 	bl	8015738 <__sinit>
 80176d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d0f3      	beq.n	80176c6 <_fflush_r+0xa>
 80176de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80176e0:	07d0      	lsls	r0, r2, #31
 80176e2:	d404      	bmi.n	80176ee <_fflush_r+0x32>
 80176e4:	0599      	lsls	r1, r3, #22
 80176e6:	d402      	bmi.n	80176ee <_fflush_r+0x32>
 80176e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80176ea:	f7fe fa96 	bl	8015c1a <__retarget_lock_acquire_recursive>
 80176ee:	4628      	mov	r0, r5
 80176f0:	4621      	mov	r1, r4
 80176f2:	f7ff ff5f 	bl	80175b4 <__sflush_r>
 80176f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80176f8:	07da      	lsls	r2, r3, #31
 80176fa:	4605      	mov	r5, r0
 80176fc:	d4e4      	bmi.n	80176c8 <_fflush_r+0xc>
 80176fe:	89a3      	ldrh	r3, [r4, #12]
 8017700:	059b      	lsls	r3, r3, #22
 8017702:	d4e1      	bmi.n	80176c8 <_fflush_r+0xc>
 8017704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017706:	f7fe fa89 	bl	8015c1c <__retarget_lock_release_recursive>
 801770a:	e7dd      	b.n	80176c8 <_fflush_r+0xc>

0801770c <__swhatbuf_r>:
 801770c:	b570      	push	{r4, r5, r6, lr}
 801770e:	460c      	mov	r4, r1
 8017710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017714:	2900      	cmp	r1, #0
 8017716:	b096      	sub	sp, #88	@ 0x58
 8017718:	4615      	mov	r5, r2
 801771a:	461e      	mov	r6, r3
 801771c:	da0d      	bge.n	801773a <__swhatbuf_r+0x2e>
 801771e:	89a3      	ldrh	r3, [r4, #12]
 8017720:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017724:	f04f 0100 	mov.w	r1, #0
 8017728:	bf14      	ite	ne
 801772a:	2340      	movne	r3, #64	@ 0x40
 801772c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017730:	2000      	movs	r0, #0
 8017732:	6031      	str	r1, [r6, #0]
 8017734:	602b      	str	r3, [r5, #0]
 8017736:	b016      	add	sp, #88	@ 0x58
 8017738:	bd70      	pop	{r4, r5, r6, pc}
 801773a:	466a      	mov	r2, sp
 801773c:	f000 f87c 	bl	8017838 <_fstat_r>
 8017740:	2800      	cmp	r0, #0
 8017742:	dbec      	blt.n	801771e <__swhatbuf_r+0x12>
 8017744:	9901      	ldr	r1, [sp, #4]
 8017746:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801774a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801774e:	4259      	negs	r1, r3
 8017750:	4159      	adcs	r1, r3
 8017752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017756:	e7eb      	b.n	8017730 <__swhatbuf_r+0x24>

08017758 <__smakebuf_r>:
 8017758:	898b      	ldrh	r3, [r1, #12]
 801775a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801775c:	079d      	lsls	r5, r3, #30
 801775e:	4606      	mov	r6, r0
 8017760:	460c      	mov	r4, r1
 8017762:	d507      	bpl.n	8017774 <__smakebuf_r+0x1c>
 8017764:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017768:	6023      	str	r3, [r4, #0]
 801776a:	6123      	str	r3, [r4, #16]
 801776c:	2301      	movs	r3, #1
 801776e:	6163      	str	r3, [r4, #20]
 8017770:	b003      	add	sp, #12
 8017772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017774:	ab01      	add	r3, sp, #4
 8017776:	466a      	mov	r2, sp
 8017778:	f7ff ffc8 	bl	801770c <__swhatbuf_r>
 801777c:	9f00      	ldr	r7, [sp, #0]
 801777e:	4605      	mov	r5, r0
 8017780:	4639      	mov	r1, r7
 8017782:	4630      	mov	r0, r6
 8017784:	f7fd fa68 	bl	8014c58 <_malloc_r>
 8017788:	b948      	cbnz	r0, 801779e <__smakebuf_r+0x46>
 801778a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801778e:	059a      	lsls	r2, r3, #22
 8017790:	d4ee      	bmi.n	8017770 <__smakebuf_r+0x18>
 8017792:	f023 0303 	bic.w	r3, r3, #3
 8017796:	f043 0302 	orr.w	r3, r3, #2
 801779a:	81a3      	strh	r3, [r4, #12]
 801779c:	e7e2      	b.n	8017764 <__smakebuf_r+0xc>
 801779e:	89a3      	ldrh	r3, [r4, #12]
 80177a0:	6020      	str	r0, [r4, #0]
 80177a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80177a6:	81a3      	strh	r3, [r4, #12]
 80177a8:	9b01      	ldr	r3, [sp, #4]
 80177aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80177ae:	b15b      	cbz	r3, 80177c8 <__smakebuf_r+0x70>
 80177b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80177b4:	4630      	mov	r0, r6
 80177b6:	f000 f851 	bl	801785c <_isatty_r>
 80177ba:	b128      	cbz	r0, 80177c8 <__smakebuf_r+0x70>
 80177bc:	89a3      	ldrh	r3, [r4, #12]
 80177be:	f023 0303 	bic.w	r3, r3, #3
 80177c2:	f043 0301 	orr.w	r3, r3, #1
 80177c6:	81a3      	strh	r3, [r4, #12]
 80177c8:	89a3      	ldrh	r3, [r4, #12]
 80177ca:	431d      	orrs	r5, r3
 80177cc:	81a5      	strh	r5, [r4, #12]
 80177ce:	e7cf      	b.n	8017770 <__smakebuf_r+0x18>

080177d0 <_putc_r>:
 80177d0:	b570      	push	{r4, r5, r6, lr}
 80177d2:	460d      	mov	r5, r1
 80177d4:	4614      	mov	r4, r2
 80177d6:	4606      	mov	r6, r0
 80177d8:	b118      	cbz	r0, 80177e2 <_putc_r+0x12>
 80177da:	6a03      	ldr	r3, [r0, #32]
 80177dc:	b90b      	cbnz	r3, 80177e2 <_putc_r+0x12>
 80177de:	f7fd ffab 	bl	8015738 <__sinit>
 80177e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80177e4:	07d8      	lsls	r0, r3, #31
 80177e6:	d405      	bmi.n	80177f4 <_putc_r+0x24>
 80177e8:	89a3      	ldrh	r3, [r4, #12]
 80177ea:	0599      	lsls	r1, r3, #22
 80177ec:	d402      	bmi.n	80177f4 <_putc_r+0x24>
 80177ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177f0:	f7fe fa13 	bl	8015c1a <__retarget_lock_acquire_recursive>
 80177f4:	68a3      	ldr	r3, [r4, #8]
 80177f6:	3b01      	subs	r3, #1
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	60a3      	str	r3, [r4, #8]
 80177fc:	da05      	bge.n	801780a <_putc_r+0x3a>
 80177fe:	69a2      	ldr	r2, [r4, #24]
 8017800:	4293      	cmp	r3, r2
 8017802:	db12      	blt.n	801782a <_putc_r+0x5a>
 8017804:	b2eb      	uxtb	r3, r5
 8017806:	2b0a      	cmp	r3, #10
 8017808:	d00f      	beq.n	801782a <_putc_r+0x5a>
 801780a:	6823      	ldr	r3, [r4, #0]
 801780c:	1c5a      	adds	r2, r3, #1
 801780e:	6022      	str	r2, [r4, #0]
 8017810:	701d      	strb	r5, [r3, #0]
 8017812:	b2ed      	uxtb	r5, r5
 8017814:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017816:	07da      	lsls	r2, r3, #31
 8017818:	d405      	bmi.n	8017826 <_putc_r+0x56>
 801781a:	89a3      	ldrh	r3, [r4, #12]
 801781c:	059b      	lsls	r3, r3, #22
 801781e:	d402      	bmi.n	8017826 <_putc_r+0x56>
 8017820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017822:	f7fe f9fb 	bl	8015c1c <__retarget_lock_release_recursive>
 8017826:	4628      	mov	r0, r5
 8017828:	bd70      	pop	{r4, r5, r6, pc}
 801782a:	4629      	mov	r1, r5
 801782c:	4622      	mov	r2, r4
 801782e:	4630      	mov	r0, r6
 8017830:	f7fe f8b8 	bl	80159a4 <__swbuf_r>
 8017834:	4605      	mov	r5, r0
 8017836:	e7ed      	b.n	8017814 <_putc_r+0x44>

08017838 <_fstat_r>:
 8017838:	b538      	push	{r3, r4, r5, lr}
 801783a:	4d07      	ldr	r5, [pc, #28]	@ (8017858 <_fstat_r+0x20>)
 801783c:	2300      	movs	r3, #0
 801783e:	4604      	mov	r4, r0
 8017840:	4608      	mov	r0, r1
 8017842:	4611      	mov	r1, r2
 8017844:	602b      	str	r3, [r5, #0]
 8017846:	f7f3 f835 	bl	800a8b4 <_fstat>
 801784a:	1c43      	adds	r3, r0, #1
 801784c:	d102      	bne.n	8017854 <_fstat_r+0x1c>
 801784e:	682b      	ldr	r3, [r5, #0]
 8017850:	b103      	cbz	r3, 8017854 <_fstat_r+0x1c>
 8017852:	6023      	str	r3, [r4, #0]
 8017854:	bd38      	pop	{r3, r4, r5, pc}
 8017856:	bf00      	nop
 8017858:	200008c4 	.word	0x200008c4

0801785c <_isatty_r>:
 801785c:	b538      	push	{r3, r4, r5, lr}
 801785e:	4d06      	ldr	r5, [pc, #24]	@ (8017878 <_isatty_r+0x1c>)
 8017860:	2300      	movs	r3, #0
 8017862:	4604      	mov	r4, r0
 8017864:	4608      	mov	r0, r1
 8017866:	602b      	str	r3, [r5, #0]
 8017868:	f7f3 f848 	bl	800a8fc <_isatty>
 801786c:	1c43      	adds	r3, r0, #1
 801786e:	d102      	bne.n	8017876 <_isatty_r+0x1a>
 8017870:	682b      	ldr	r3, [r5, #0]
 8017872:	b103      	cbz	r3, 8017876 <_isatty_r+0x1a>
 8017874:	6023      	str	r3, [r4, #0]
 8017876:	bd38      	pop	{r3, r4, r5, pc}
 8017878:	200008c4 	.word	0x200008c4

0801787c <__assert_func>:
 801787c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801787e:	4614      	mov	r4, r2
 8017880:	461a      	mov	r2, r3
 8017882:	4b09      	ldr	r3, [pc, #36]	@ (80178a8 <__assert_func+0x2c>)
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	4605      	mov	r5, r0
 8017888:	68d8      	ldr	r0, [r3, #12]
 801788a:	b954      	cbnz	r4, 80178a2 <__assert_func+0x26>
 801788c:	4b07      	ldr	r3, [pc, #28]	@ (80178ac <__assert_func+0x30>)
 801788e:	461c      	mov	r4, r3
 8017890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017894:	9100      	str	r1, [sp, #0]
 8017896:	462b      	mov	r3, r5
 8017898:	4905      	ldr	r1, [pc, #20]	@ (80178b0 <__assert_func+0x34>)
 801789a:	f000 f85b 	bl	8017954 <fiprintf>
 801789e:	f000 f86b 	bl	8017978 <abort>
 80178a2:	4b04      	ldr	r3, [pc, #16]	@ (80178b4 <__assert_func+0x38>)
 80178a4:	e7f4      	b.n	8017890 <__assert_func+0x14>
 80178a6:	bf00      	nop
 80178a8:	200001b8 	.word	0x200001b8
 80178ac:	0801f2fe 	.word	0x0801f2fe
 80178b0:	0801f2d0 	.word	0x0801f2d0
 80178b4:	0801f2c3 	.word	0x0801f2c3

080178b8 <__ascii_mbtowc>:
 80178b8:	b082      	sub	sp, #8
 80178ba:	b901      	cbnz	r1, 80178be <__ascii_mbtowc+0x6>
 80178bc:	a901      	add	r1, sp, #4
 80178be:	b142      	cbz	r2, 80178d2 <__ascii_mbtowc+0x1a>
 80178c0:	b14b      	cbz	r3, 80178d6 <__ascii_mbtowc+0x1e>
 80178c2:	7813      	ldrb	r3, [r2, #0]
 80178c4:	600b      	str	r3, [r1, #0]
 80178c6:	7812      	ldrb	r2, [r2, #0]
 80178c8:	1e10      	subs	r0, r2, #0
 80178ca:	bf18      	it	ne
 80178cc:	2001      	movne	r0, #1
 80178ce:	b002      	add	sp, #8
 80178d0:	4770      	bx	lr
 80178d2:	4610      	mov	r0, r2
 80178d4:	e7fb      	b.n	80178ce <__ascii_mbtowc+0x16>
 80178d6:	f06f 0001 	mvn.w	r0, #1
 80178da:	e7f8      	b.n	80178ce <__ascii_mbtowc+0x16>

080178dc <_realloc_r>:
 80178dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178e0:	4680      	mov	r8, r0
 80178e2:	4615      	mov	r5, r2
 80178e4:	460c      	mov	r4, r1
 80178e6:	b921      	cbnz	r1, 80178f2 <_realloc_r+0x16>
 80178e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178ec:	4611      	mov	r1, r2
 80178ee:	f7fd b9b3 	b.w	8014c58 <_malloc_r>
 80178f2:	b92a      	cbnz	r2, 8017900 <_realloc_r+0x24>
 80178f4:	f7fe fff8 	bl	80168e8 <_free_r>
 80178f8:	2400      	movs	r4, #0
 80178fa:	4620      	mov	r0, r4
 80178fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017900:	f000 f841 	bl	8017986 <_malloc_usable_size_r>
 8017904:	4285      	cmp	r5, r0
 8017906:	4606      	mov	r6, r0
 8017908:	d802      	bhi.n	8017910 <_realloc_r+0x34>
 801790a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801790e:	d8f4      	bhi.n	80178fa <_realloc_r+0x1e>
 8017910:	4629      	mov	r1, r5
 8017912:	4640      	mov	r0, r8
 8017914:	f7fd f9a0 	bl	8014c58 <_malloc_r>
 8017918:	4607      	mov	r7, r0
 801791a:	2800      	cmp	r0, #0
 801791c:	d0ec      	beq.n	80178f8 <_realloc_r+0x1c>
 801791e:	42b5      	cmp	r5, r6
 8017920:	462a      	mov	r2, r5
 8017922:	4621      	mov	r1, r4
 8017924:	bf28      	it	cs
 8017926:	4632      	movcs	r2, r6
 8017928:	f7fe f981 	bl	8015c2e <memcpy>
 801792c:	4621      	mov	r1, r4
 801792e:	4640      	mov	r0, r8
 8017930:	f7fe ffda 	bl	80168e8 <_free_r>
 8017934:	463c      	mov	r4, r7
 8017936:	e7e0      	b.n	80178fa <_realloc_r+0x1e>

08017938 <__ascii_wctomb>:
 8017938:	4603      	mov	r3, r0
 801793a:	4608      	mov	r0, r1
 801793c:	b141      	cbz	r1, 8017950 <__ascii_wctomb+0x18>
 801793e:	2aff      	cmp	r2, #255	@ 0xff
 8017940:	d904      	bls.n	801794c <__ascii_wctomb+0x14>
 8017942:	228a      	movs	r2, #138	@ 0x8a
 8017944:	601a      	str	r2, [r3, #0]
 8017946:	f04f 30ff 	mov.w	r0, #4294967295
 801794a:	4770      	bx	lr
 801794c:	700a      	strb	r2, [r1, #0]
 801794e:	2001      	movs	r0, #1
 8017950:	4770      	bx	lr
	...

08017954 <fiprintf>:
 8017954:	b40e      	push	{r1, r2, r3}
 8017956:	b503      	push	{r0, r1, lr}
 8017958:	4601      	mov	r1, r0
 801795a:	ab03      	add	r3, sp, #12
 801795c:	4805      	ldr	r0, [pc, #20]	@ (8017974 <fiprintf+0x20>)
 801795e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017962:	6800      	ldr	r0, [r0, #0]
 8017964:	9301      	str	r3, [sp, #4]
 8017966:	f7ff fd0d 	bl	8017384 <_vfiprintf_r>
 801796a:	b002      	add	sp, #8
 801796c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017970:	b003      	add	sp, #12
 8017972:	4770      	bx	lr
 8017974:	200001b8 	.word	0x200001b8

08017978 <abort>:
 8017978:	b508      	push	{r3, lr}
 801797a:	2006      	movs	r0, #6
 801797c:	f000 f834 	bl	80179e8 <raise>
 8017980:	2001      	movs	r0, #1
 8017982:	f001 fe01 	bl	8019588 <_exit>

08017986 <_malloc_usable_size_r>:
 8017986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801798a:	1f18      	subs	r0, r3, #4
 801798c:	2b00      	cmp	r3, #0
 801798e:	bfbc      	itt	lt
 8017990:	580b      	ldrlt	r3, [r1, r0]
 8017992:	18c0      	addlt	r0, r0, r3
 8017994:	4770      	bx	lr

08017996 <_raise_r>:
 8017996:	291f      	cmp	r1, #31
 8017998:	b538      	push	{r3, r4, r5, lr}
 801799a:	4605      	mov	r5, r0
 801799c:	460c      	mov	r4, r1
 801799e:	d904      	bls.n	80179aa <_raise_r+0x14>
 80179a0:	2316      	movs	r3, #22
 80179a2:	6003      	str	r3, [r0, #0]
 80179a4:	f04f 30ff 	mov.w	r0, #4294967295
 80179a8:	bd38      	pop	{r3, r4, r5, pc}
 80179aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80179ac:	b112      	cbz	r2, 80179b4 <_raise_r+0x1e>
 80179ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80179b2:	b94b      	cbnz	r3, 80179c8 <_raise_r+0x32>
 80179b4:	4628      	mov	r0, r5
 80179b6:	f000 f831 	bl	8017a1c <_getpid_r>
 80179ba:	4622      	mov	r2, r4
 80179bc:	4601      	mov	r1, r0
 80179be:	4628      	mov	r0, r5
 80179c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179c4:	f000 b818 	b.w	80179f8 <_kill_r>
 80179c8:	2b01      	cmp	r3, #1
 80179ca:	d00a      	beq.n	80179e2 <_raise_r+0x4c>
 80179cc:	1c59      	adds	r1, r3, #1
 80179ce:	d103      	bne.n	80179d8 <_raise_r+0x42>
 80179d0:	2316      	movs	r3, #22
 80179d2:	6003      	str	r3, [r0, #0]
 80179d4:	2001      	movs	r0, #1
 80179d6:	e7e7      	b.n	80179a8 <_raise_r+0x12>
 80179d8:	2100      	movs	r1, #0
 80179da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80179de:	4620      	mov	r0, r4
 80179e0:	4798      	blx	r3
 80179e2:	2000      	movs	r0, #0
 80179e4:	e7e0      	b.n	80179a8 <_raise_r+0x12>
	...

080179e8 <raise>:
 80179e8:	4b02      	ldr	r3, [pc, #8]	@ (80179f4 <raise+0xc>)
 80179ea:	4601      	mov	r1, r0
 80179ec:	6818      	ldr	r0, [r3, #0]
 80179ee:	f7ff bfd2 	b.w	8017996 <_raise_r>
 80179f2:	bf00      	nop
 80179f4:	200001b8 	.word	0x200001b8

080179f8 <_kill_r>:
 80179f8:	b538      	push	{r3, r4, r5, lr}
 80179fa:	4d07      	ldr	r5, [pc, #28]	@ (8017a18 <_kill_r+0x20>)
 80179fc:	2300      	movs	r3, #0
 80179fe:	4604      	mov	r4, r0
 8017a00:	4608      	mov	r0, r1
 8017a02:	4611      	mov	r1, r2
 8017a04:	602b      	str	r3, [r5, #0]
 8017a06:	f7f2 ff91 	bl	800a92c <_kill>
 8017a0a:	1c43      	adds	r3, r0, #1
 8017a0c:	d102      	bne.n	8017a14 <_kill_r+0x1c>
 8017a0e:	682b      	ldr	r3, [r5, #0]
 8017a10:	b103      	cbz	r3, 8017a14 <_kill_r+0x1c>
 8017a12:	6023      	str	r3, [r4, #0]
 8017a14:	bd38      	pop	{r3, r4, r5, pc}
 8017a16:	bf00      	nop
 8017a18:	200008c4 	.word	0x200008c4

08017a1c <_getpid_r>:
 8017a1c:	f7f2 bf66 	b.w	800a8ec <_getpid>

08017a20 <expf>:
 8017a20:	b508      	push	{r3, lr}
 8017a22:	ed2d 8b02 	vpush	{d8}
 8017a26:	eef0 8a40 	vmov.f32	s17, s0
 8017a2a:	f000 fbe1 	bl	80181f0 <__ieee754_expf>
 8017a2e:	eeb0 8a40 	vmov.f32	s16, s0
 8017a32:	eeb0 0a68 	vmov.f32	s0, s17
 8017a36:	f000 fa15 	bl	8017e64 <finitef>
 8017a3a:	b160      	cbz	r0, 8017a56 <expf+0x36>
 8017a3c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8017a7c <expf+0x5c>
 8017a40:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a48:	dd0a      	ble.n	8017a60 <expf+0x40>
 8017a4a:	f7fe f8bb 	bl	8015bc4 <__errno>
 8017a4e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8017a80 <expf+0x60>
 8017a52:	2322      	movs	r3, #34	@ 0x22
 8017a54:	6003      	str	r3, [r0, #0]
 8017a56:	eeb0 0a48 	vmov.f32	s0, s16
 8017a5a:	ecbd 8b02 	vpop	{d8}
 8017a5e:	bd08      	pop	{r3, pc}
 8017a60:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8017a84 <expf+0x64>
 8017a64:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a6c:	d5f3      	bpl.n	8017a56 <expf+0x36>
 8017a6e:	f7fe f8a9 	bl	8015bc4 <__errno>
 8017a72:	2322      	movs	r3, #34	@ 0x22
 8017a74:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8017a88 <expf+0x68>
 8017a78:	6003      	str	r3, [r0, #0]
 8017a7a:	e7ec      	b.n	8017a56 <expf+0x36>
 8017a7c:	42b17217 	.word	0x42b17217
 8017a80:	7f800000 	.word	0x7f800000
 8017a84:	c2cff1b5 	.word	0xc2cff1b5
 8017a88:	00000000 	.word	0x00000000

08017a8c <log10f>:
 8017a8c:	b508      	push	{r3, lr}
 8017a8e:	ed2d 8b02 	vpush	{d8}
 8017a92:	eeb0 8a40 	vmov.f32	s16, s0
 8017a96:	f000 fc79 	bl	801838c <__ieee754_log10f>
 8017a9a:	eeb4 8a48 	vcmp.f32	s16, s16
 8017a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aa2:	d60f      	bvs.n	8017ac4 <log10f+0x38>
 8017aa4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aac:	d80a      	bhi.n	8017ac4 <log10f+0x38>
 8017aae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ab6:	d108      	bne.n	8017aca <log10f+0x3e>
 8017ab8:	f7fe f884 	bl	8015bc4 <__errno>
 8017abc:	2322      	movs	r3, #34	@ 0x22
 8017abe:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8017ae0 <log10f+0x54>
 8017ac2:	6003      	str	r3, [r0, #0]
 8017ac4:	ecbd 8b02 	vpop	{d8}
 8017ac8:	bd08      	pop	{r3, pc}
 8017aca:	f7fe f87b 	bl	8015bc4 <__errno>
 8017ace:	ecbd 8b02 	vpop	{d8}
 8017ad2:	2321      	movs	r3, #33	@ 0x21
 8017ad4:	6003      	str	r3, [r0, #0]
 8017ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017ada:	4802      	ldr	r0, [pc, #8]	@ (8017ae4 <log10f+0x58>)
 8017adc:	f000 b9cc 	b.w	8017e78 <nanf>
 8017ae0:	ff800000 	.word	0xff800000
 8017ae4:	0801f2fe 	.word	0x0801f2fe

08017ae8 <powf>:
 8017ae8:	b508      	push	{r3, lr}
 8017aea:	ed2d 8b04 	vpush	{d8-d9}
 8017aee:	eeb0 8a60 	vmov.f32	s16, s1
 8017af2:	eeb0 9a40 	vmov.f32	s18, s0
 8017af6:	f000 fca1 	bl	801843c <__ieee754_powf>
 8017afa:	eeb4 8a48 	vcmp.f32	s16, s16
 8017afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b02:	eef0 8a40 	vmov.f32	s17, s0
 8017b06:	d63e      	bvs.n	8017b86 <powf+0x9e>
 8017b08:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b10:	d112      	bne.n	8017b38 <powf+0x50>
 8017b12:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b1a:	d039      	beq.n	8017b90 <powf+0xa8>
 8017b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8017b20:	f000 f9a0 	bl	8017e64 <finitef>
 8017b24:	b378      	cbz	r0, 8017b86 <powf+0x9e>
 8017b26:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b2e:	d52a      	bpl.n	8017b86 <powf+0x9e>
 8017b30:	f7fe f848 	bl	8015bc4 <__errno>
 8017b34:	2322      	movs	r3, #34	@ 0x22
 8017b36:	e014      	b.n	8017b62 <powf+0x7a>
 8017b38:	f000 f994 	bl	8017e64 <finitef>
 8017b3c:	b998      	cbnz	r0, 8017b66 <powf+0x7e>
 8017b3e:	eeb0 0a49 	vmov.f32	s0, s18
 8017b42:	f000 f98f 	bl	8017e64 <finitef>
 8017b46:	b170      	cbz	r0, 8017b66 <powf+0x7e>
 8017b48:	eeb0 0a48 	vmov.f32	s0, s16
 8017b4c:	f000 f98a 	bl	8017e64 <finitef>
 8017b50:	b148      	cbz	r0, 8017b66 <powf+0x7e>
 8017b52:	eef4 8a68 	vcmp.f32	s17, s17
 8017b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b5a:	d7e9      	bvc.n	8017b30 <powf+0x48>
 8017b5c:	f7fe f832 	bl	8015bc4 <__errno>
 8017b60:	2321      	movs	r3, #33	@ 0x21
 8017b62:	6003      	str	r3, [r0, #0]
 8017b64:	e00f      	b.n	8017b86 <powf+0x9e>
 8017b66:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b6e:	d10a      	bne.n	8017b86 <powf+0x9e>
 8017b70:	eeb0 0a49 	vmov.f32	s0, s18
 8017b74:	f000 f976 	bl	8017e64 <finitef>
 8017b78:	b128      	cbz	r0, 8017b86 <powf+0x9e>
 8017b7a:	eeb0 0a48 	vmov.f32	s0, s16
 8017b7e:	f000 f971 	bl	8017e64 <finitef>
 8017b82:	2800      	cmp	r0, #0
 8017b84:	d1d4      	bne.n	8017b30 <powf+0x48>
 8017b86:	eeb0 0a68 	vmov.f32	s0, s17
 8017b8a:	ecbd 8b04 	vpop	{d8-d9}
 8017b8e:	bd08      	pop	{r3, pc}
 8017b90:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8017b94:	e7f7      	b.n	8017b86 <powf+0x9e>
	...

08017b98 <atanf>:
 8017b98:	b538      	push	{r3, r4, r5, lr}
 8017b9a:	ee10 5a10 	vmov	r5, s0
 8017b9e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8017ba2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8017ba6:	eef0 7a40 	vmov.f32	s15, s0
 8017baa:	d310      	bcc.n	8017bce <atanf+0x36>
 8017bac:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8017bb0:	d904      	bls.n	8017bbc <atanf+0x24>
 8017bb2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8017bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8017bba:	bd38      	pop	{r3, r4, r5, pc}
 8017bbc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8017cf4 <atanf+0x15c>
 8017bc0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8017cf8 <atanf+0x160>
 8017bc4:	2d00      	cmp	r5, #0
 8017bc6:	bfc8      	it	gt
 8017bc8:	eef0 7a47 	vmovgt.f32	s15, s14
 8017bcc:	e7f3      	b.n	8017bb6 <atanf+0x1e>
 8017bce:	4b4b      	ldr	r3, [pc, #300]	@ (8017cfc <atanf+0x164>)
 8017bd0:	429c      	cmp	r4, r3
 8017bd2:	d810      	bhi.n	8017bf6 <atanf+0x5e>
 8017bd4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8017bd8:	d20a      	bcs.n	8017bf0 <atanf+0x58>
 8017bda:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8017d00 <atanf+0x168>
 8017bde:	ee30 7a07 	vadd.f32	s14, s0, s14
 8017be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017be6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bee:	dce2      	bgt.n	8017bb6 <atanf+0x1e>
 8017bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8017bf4:	e013      	b.n	8017c1e <atanf+0x86>
 8017bf6:	f000 f8e7 	bl	8017dc8 <fabsf>
 8017bfa:	4b42      	ldr	r3, [pc, #264]	@ (8017d04 <atanf+0x16c>)
 8017bfc:	429c      	cmp	r4, r3
 8017bfe:	d84f      	bhi.n	8017ca0 <atanf+0x108>
 8017c00:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8017c04:	429c      	cmp	r4, r3
 8017c06:	d841      	bhi.n	8017c8c <atanf+0xf4>
 8017c08:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8017c0c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017c10:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017c14:	2300      	movs	r3, #0
 8017c16:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017c1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017c1e:	1c5a      	adds	r2, r3, #1
 8017c20:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8017c24:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8017d08 <atanf+0x170>
 8017c28:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8017d0c <atanf+0x174>
 8017c2c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8017d10 <atanf+0x178>
 8017c30:	ee66 6a06 	vmul.f32	s13, s12, s12
 8017c34:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017c38:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8017d14 <atanf+0x17c>
 8017c3c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017c40:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8017d18 <atanf+0x180>
 8017c44:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017c48:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8017d1c <atanf+0x184>
 8017c4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017c50:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8017d20 <atanf+0x188>
 8017c54:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017c58:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8017d24 <atanf+0x18c>
 8017c5c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017c60:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8017d28 <atanf+0x190>
 8017c64:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017c68:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8017d2c <atanf+0x194>
 8017c6c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8017c70:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8017d30 <atanf+0x198>
 8017c74:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017c78:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017c7c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017c80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017c84:	d121      	bne.n	8017cca <atanf+0x132>
 8017c86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017c8a:	e794      	b.n	8017bb6 <atanf+0x1e>
 8017c8c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017c90:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017c94:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017c98:	2301      	movs	r3, #1
 8017c9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017c9e:	e7be      	b.n	8017c1e <atanf+0x86>
 8017ca0:	4b24      	ldr	r3, [pc, #144]	@ (8017d34 <atanf+0x19c>)
 8017ca2:	429c      	cmp	r4, r3
 8017ca4:	d80b      	bhi.n	8017cbe <atanf+0x126>
 8017ca6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8017caa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017cae:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017cb2:	2302      	movs	r3, #2
 8017cb4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017cbc:	e7af      	b.n	8017c1e <atanf+0x86>
 8017cbe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017cc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017cc6:	2303      	movs	r3, #3
 8017cc8:	e7a9      	b.n	8017c1e <atanf+0x86>
 8017cca:	4a1b      	ldr	r2, [pc, #108]	@ (8017d38 <atanf+0x1a0>)
 8017ccc:	491b      	ldr	r1, [pc, #108]	@ (8017d3c <atanf+0x1a4>)
 8017cce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017cd2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017cd6:	edd3 6a00 	vldr	s13, [r3]
 8017cda:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017cde:	2d00      	cmp	r5, #0
 8017ce0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017ce4:	edd2 7a00 	vldr	s15, [r2]
 8017ce8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017cec:	bfb8      	it	lt
 8017cee:	eef1 7a67 	vneglt.f32	s15, s15
 8017cf2:	e760      	b.n	8017bb6 <atanf+0x1e>
 8017cf4:	bfc90fdb 	.word	0xbfc90fdb
 8017cf8:	3fc90fdb 	.word	0x3fc90fdb
 8017cfc:	3edfffff 	.word	0x3edfffff
 8017d00:	7149f2ca 	.word	0x7149f2ca
 8017d04:	3f97ffff 	.word	0x3f97ffff
 8017d08:	3c8569d7 	.word	0x3c8569d7
 8017d0c:	3d4bda59 	.word	0x3d4bda59
 8017d10:	bd6ef16b 	.word	0xbd6ef16b
 8017d14:	3d886b35 	.word	0x3d886b35
 8017d18:	3dba2e6e 	.word	0x3dba2e6e
 8017d1c:	3e124925 	.word	0x3e124925
 8017d20:	3eaaaaab 	.word	0x3eaaaaab
 8017d24:	bd15a221 	.word	0xbd15a221
 8017d28:	bd9d8795 	.word	0xbd9d8795
 8017d2c:	bde38e38 	.word	0xbde38e38
 8017d30:	be4ccccd 	.word	0xbe4ccccd
 8017d34:	401bffff 	.word	0x401bffff
 8017d38:	0801f310 	.word	0x0801f310
 8017d3c:	0801f300 	.word	0x0801f300

08017d40 <cosf>:
 8017d40:	ee10 3a10 	vmov	r3, s0
 8017d44:	b507      	push	{r0, r1, r2, lr}
 8017d46:	4a1e      	ldr	r2, [pc, #120]	@ (8017dc0 <cosf+0x80>)
 8017d48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017d4c:	4293      	cmp	r3, r2
 8017d4e:	d806      	bhi.n	8017d5e <cosf+0x1e>
 8017d50:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8017dc4 <cosf+0x84>
 8017d54:	b003      	add	sp, #12
 8017d56:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d5a:	f000 b9a9 	b.w	80180b0 <__kernel_cosf>
 8017d5e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017d62:	d304      	bcc.n	8017d6e <cosf+0x2e>
 8017d64:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017d68:	b003      	add	sp, #12
 8017d6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8017d6e:	4668      	mov	r0, sp
 8017d70:	f000 fe34 	bl	80189dc <__ieee754_rem_pio2f>
 8017d74:	f000 0003 	and.w	r0, r0, #3
 8017d78:	2801      	cmp	r0, #1
 8017d7a:	d009      	beq.n	8017d90 <cosf+0x50>
 8017d7c:	2802      	cmp	r0, #2
 8017d7e:	d010      	beq.n	8017da2 <cosf+0x62>
 8017d80:	b9b0      	cbnz	r0, 8017db0 <cosf+0x70>
 8017d82:	eddd 0a01 	vldr	s1, [sp, #4]
 8017d86:	ed9d 0a00 	vldr	s0, [sp]
 8017d8a:	f000 f991 	bl	80180b0 <__kernel_cosf>
 8017d8e:	e7eb      	b.n	8017d68 <cosf+0x28>
 8017d90:	eddd 0a01 	vldr	s1, [sp, #4]
 8017d94:	ed9d 0a00 	vldr	s0, [sp]
 8017d98:	f000 f9e2 	bl	8018160 <__kernel_sinf>
 8017d9c:	eeb1 0a40 	vneg.f32	s0, s0
 8017da0:	e7e2      	b.n	8017d68 <cosf+0x28>
 8017da2:	eddd 0a01 	vldr	s1, [sp, #4]
 8017da6:	ed9d 0a00 	vldr	s0, [sp]
 8017daa:	f000 f981 	bl	80180b0 <__kernel_cosf>
 8017dae:	e7f5      	b.n	8017d9c <cosf+0x5c>
 8017db0:	eddd 0a01 	vldr	s1, [sp, #4]
 8017db4:	ed9d 0a00 	vldr	s0, [sp]
 8017db8:	2001      	movs	r0, #1
 8017dba:	f000 f9d1 	bl	8018160 <__kernel_sinf>
 8017dbe:	e7d3      	b.n	8017d68 <cosf+0x28>
 8017dc0:	3f490fd8 	.word	0x3f490fd8
 8017dc4:	00000000 	.word	0x00000000

08017dc8 <fabsf>:
 8017dc8:	ee10 3a10 	vmov	r3, s0
 8017dcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017dd0:	ee00 3a10 	vmov	s0, r3
 8017dd4:	4770      	bx	lr
	...

08017dd8 <sinf>:
 8017dd8:	ee10 3a10 	vmov	r3, s0
 8017ddc:	b507      	push	{r0, r1, r2, lr}
 8017dde:	4a1f      	ldr	r2, [pc, #124]	@ (8017e5c <sinf+0x84>)
 8017de0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017de4:	4293      	cmp	r3, r2
 8017de6:	d807      	bhi.n	8017df8 <sinf+0x20>
 8017de8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8017e60 <sinf+0x88>
 8017dec:	2000      	movs	r0, #0
 8017dee:	b003      	add	sp, #12
 8017df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017df4:	f000 b9b4 	b.w	8018160 <__kernel_sinf>
 8017df8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017dfc:	d304      	bcc.n	8017e08 <sinf+0x30>
 8017dfe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017e02:	b003      	add	sp, #12
 8017e04:	f85d fb04 	ldr.w	pc, [sp], #4
 8017e08:	4668      	mov	r0, sp
 8017e0a:	f000 fde7 	bl	80189dc <__ieee754_rem_pio2f>
 8017e0e:	f000 0003 	and.w	r0, r0, #3
 8017e12:	2801      	cmp	r0, #1
 8017e14:	d00a      	beq.n	8017e2c <sinf+0x54>
 8017e16:	2802      	cmp	r0, #2
 8017e18:	d00f      	beq.n	8017e3a <sinf+0x62>
 8017e1a:	b9c0      	cbnz	r0, 8017e4e <sinf+0x76>
 8017e1c:	eddd 0a01 	vldr	s1, [sp, #4]
 8017e20:	ed9d 0a00 	vldr	s0, [sp]
 8017e24:	2001      	movs	r0, #1
 8017e26:	f000 f99b 	bl	8018160 <__kernel_sinf>
 8017e2a:	e7ea      	b.n	8017e02 <sinf+0x2a>
 8017e2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8017e30:	ed9d 0a00 	vldr	s0, [sp]
 8017e34:	f000 f93c 	bl	80180b0 <__kernel_cosf>
 8017e38:	e7e3      	b.n	8017e02 <sinf+0x2a>
 8017e3a:	eddd 0a01 	vldr	s1, [sp, #4]
 8017e3e:	ed9d 0a00 	vldr	s0, [sp]
 8017e42:	2001      	movs	r0, #1
 8017e44:	f000 f98c 	bl	8018160 <__kernel_sinf>
 8017e48:	eeb1 0a40 	vneg.f32	s0, s0
 8017e4c:	e7d9      	b.n	8017e02 <sinf+0x2a>
 8017e4e:	eddd 0a01 	vldr	s1, [sp, #4]
 8017e52:	ed9d 0a00 	vldr	s0, [sp]
 8017e56:	f000 f92b 	bl	80180b0 <__kernel_cosf>
 8017e5a:	e7f5      	b.n	8017e48 <sinf+0x70>
 8017e5c:	3f490fd8 	.word	0x3f490fd8
 8017e60:	00000000 	.word	0x00000000

08017e64 <finitef>:
 8017e64:	ee10 3a10 	vmov	r3, s0
 8017e68:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8017e6c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8017e70:	bfac      	ite	ge
 8017e72:	2000      	movge	r0, #0
 8017e74:	2001      	movlt	r0, #1
 8017e76:	4770      	bx	lr

08017e78 <nanf>:
 8017e78:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8017e80 <nanf+0x8>
 8017e7c:	4770      	bx	lr
 8017e7e:	bf00      	nop
 8017e80:	7fc00000 	.word	0x7fc00000

08017e84 <fmaxf>:
 8017e84:	b508      	push	{r3, lr}
 8017e86:	ed2d 8b02 	vpush	{d8}
 8017e8a:	eeb0 8a40 	vmov.f32	s16, s0
 8017e8e:	eef0 8a60 	vmov.f32	s17, s1
 8017e92:	f000 f831 	bl	8017ef8 <__fpclassifyf>
 8017e96:	b930      	cbnz	r0, 8017ea6 <fmaxf+0x22>
 8017e98:	eeb0 8a68 	vmov.f32	s16, s17
 8017e9c:	eeb0 0a48 	vmov.f32	s0, s16
 8017ea0:	ecbd 8b02 	vpop	{d8}
 8017ea4:	bd08      	pop	{r3, pc}
 8017ea6:	eeb0 0a68 	vmov.f32	s0, s17
 8017eaa:	f000 f825 	bl	8017ef8 <__fpclassifyf>
 8017eae:	2800      	cmp	r0, #0
 8017eb0:	d0f4      	beq.n	8017e9c <fmaxf+0x18>
 8017eb2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eba:	dded      	ble.n	8017e98 <fmaxf+0x14>
 8017ebc:	e7ee      	b.n	8017e9c <fmaxf+0x18>

08017ebe <fminf>:
 8017ebe:	b508      	push	{r3, lr}
 8017ec0:	ed2d 8b02 	vpush	{d8}
 8017ec4:	eeb0 8a40 	vmov.f32	s16, s0
 8017ec8:	eef0 8a60 	vmov.f32	s17, s1
 8017ecc:	f000 f814 	bl	8017ef8 <__fpclassifyf>
 8017ed0:	b930      	cbnz	r0, 8017ee0 <fminf+0x22>
 8017ed2:	eeb0 8a68 	vmov.f32	s16, s17
 8017ed6:	eeb0 0a48 	vmov.f32	s0, s16
 8017eda:	ecbd 8b02 	vpop	{d8}
 8017ede:	bd08      	pop	{r3, pc}
 8017ee0:	eeb0 0a68 	vmov.f32	s0, s17
 8017ee4:	f000 f808 	bl	8017ef8 <__fpclassifyf>
 8017ee8:	2800      	cmp	r0, #0
 8017eea:	d0f4      	beq.n	8017ed6 <fminf+0x18>
 8017eec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ef4:	d5ed      	bpl.n	8017ed2 <fminf+0x14>
 8017ef6:	e7ee      	b.n	8017ed6 <fminf+0x18>

08017ef8 <__fpclassifyf>:
 8017ef8:	ee10 3a10 	vmov	r3, s0
 8017efc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8017f00:	d00d      	beq.n	8017f1e <__fpclassifyf+0x26>
 8017f02:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8017f06:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8017f0a:	d30a      	bcc.n	8017f22 <__fpclassifyf+0x2a>
 8017f0c:	4b07      	ldr	r3, [pc, #28]	@ (8017f2c <__fpclassifyf+0x34>)
 8017f0e:	1e42      	subs	r2, r0, #1
 8017f10:	429a      	cmp	r2, r3
 8017f12:	d908      	bls.n	8017f26 <__fpclassifyf+0x2e>
 8017f14:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8017f18:	4258      	negs	r0, r3
 8017f1a:	4158      	adcs	r0, r3
 8017f1c:	4770      	bx	lr
 8017f1e:	2002      	movs	r0, #2
 8017f20:	4770      	bx	lr
 8017f22:	2004      	movs	r0, #4
 8017f24:	4770      	bx	lr
 8017f26:	2003      	movs	r0, #3
 8017f28:	4770      	bx	lr
 8017f2a:	bf00      	nop
 8017f2c:	007ffffe 	.word	0x007ffffe

08017f30 <cabsf>:
 8017f30:	b508      	push	{r3, lr}
 8017f32:	ed2d 8b04 	vpush	{d8-d9}
 8017f36:	eeb0 9a40 	vmov.f32	s18, s0
 8017f3a:	eef0 8a60 	vmov.f32	s17, s1
 8017f3e:	f000 f815 	bl	8017f6c <crealf>
 8017f42:	eef0 0a68 	vmov.f32	s1, s17
 8017f46:	eeb0 8a40 	vmov.f32	s16, s0
 8017f4a:	eeb0 0a49 	vmov.f32	s0, s18
 8017f4e:	f000 f80a 	bl	8017f66 <cimagf>
 8017f52:	eef0 0a40 	vmov.f32	s1, s0
 8017f56:	eeb0 0a48 	vmov.f32	s0, s16
 8017f5a:	ecbd 8b04 	vpop	{d8-d9}
 8017f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017f62:	f000 be6b 	b.w	8018c3c <hypotf>

08017f66 <cimagf>:
 8017f66:	eeb0 0a60 	vmov.f32	s0, s1
 8017f6a:	4770      	bx	lr

08017f6c <crealf>:
 8017f6c:	4770      	bx	lr
	...

08017f70 <cexpf>:
 8017f70:	b508      	push	{r3, lr}
 8017f72:	ed2d 8b04 	vpush	{d8-d9}
 8017f76:	eeb0 9a40 	vmov.f32	s18, s0
 8017f7a:	eef0 8a60 	vmov.f32	s17, s1
 8017f7e:	f7ff fff5 	bl	8017f6c <crealf>
 8017f82:	eef0 0a68 	vmov.f32	s1, s17
 8017f86:	eeb0 8a40 	vmov.f32	s16, s0
 8017f8a:	eeb0 0a49 	vmov.f32	s0, s18
 8017f8e:	f7ff ffea 	bl	8017f66 <cimagf>
 8017f92:	eeb0 9a40 	vmov.f32	s18, s0
 8017f96:	eeb0 0a48 	vmov.f32	s0, s16
 8017f9a:	f7ff fd41 	bl	8017a20 <expf>
 8017f9e:	eef0 8a40 	vmov.f32	s17, s0
 8017fa2:	eeb0 0a49 	vmov.f32	s0, s18
 8017fa6:	f7ff ff17 	bl	8017dd8 <sinf>
 8017faa:	ee20 8a28 	vmul.f32	s16, s0, s17
 8017fae:	eeb0 0a49 	vmov.f32	s0, s18
 8017fb2:	f7ff fec5 	bl	8017d40 <cosf>
 8017fb6:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8017fd4 <cexpf+0x64>
 8017fba:	ee68 7a27 	vmul.f32	s15, s16, s15
 8017fbe:	eeb0 7a40 	vmov.f32	s14, s0
 8017fc2:	eee7 7a28 	vfma.f32	s15, s14, s17
 8017fc6:	eef0 0a48 	vmov.f32	s1, s16
 8017fca:	ecbd 8b04 	vpop	{d8-d9}
 8017fce:	eeb0 0a67 	vmov.f32	s0, s15
 8017fd2:	bd08      	pop	{r3, pc}
 8017fd4:	00000000 	.word	0x00000000

08017fd8 <__ieee754_sqrtf>:
 8017fd8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017fdc:	4770      	bx	lr
	...

08017fe0 <floorf>:
 8017fe0:	ee10 3a10 	vmov	r3, s0
 8017fe4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017fe8:	3a7f      	subs	r2, #127	@ 0x7f
 8017fea:	2a16      	cmp	r2, #22
 8017fec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8017ff0:	dc2b      	bgt.n	801804a <floorf+0x6a>
 8017ff2:	2a00      	cmp	r2, #0
 8017ff4:	da12      	bge.n	801801c <floorf+0x3c>
 8017ff6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801805c <floorf+0x7c>
 8017ffa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017ffe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018006:	dd06      	ble.n	8018016 <floorf+0x36>
 8018008:	2b00      	cmp	r3, #0
 801800a:	da24      	bge.n	8018056 <floorf+0x76>
 801800c:	2900      	cmp	r1, #0
 801800e:	4b14      	ldr	r3, [pc, #80]	@ (8018060 <floorf+0x80>)
 8018010:	bf08      	it	eq
 8018012:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8018016:	ee00 3a10 	vmov	s0, r3
 801801a:	4770      	bx	lr
 801801c:	4911      	ldr	r1, [pc, #68]	@ (8018064 <floorf+0x84>)
 801801e:	4111      	asrs	r1, r2
 8018020:	420b      	tst	r3, r1
 8018022:	d0fa      	beq.n	801801a <floorf+0x3a>
 8018024:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801805c <floorf+0x7c>
 8018028:	ee30 0a27 	vadd.f32	s0, s0, s15
 801802c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018034:	ddef      	ble.n	8018016 <floorf+0x36>
 8018036:	2b00      	cmp	r3, #0
 8018038:	bfbe      	ittt	lt
 801803a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801803e:	fa40 f202 	asrlt.w	r2, r0, r2
 8018042:	189b      	addlt	r3, r3, r2
 8018044:	ea23 0301 	bic.w	r3, r3, r1
 8018048:	e7e5      	b.n	8018016 <floorf+0x36>
 801804a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801804e:	d3e4      	bcc.n	801801a <floorf+0x3a>
 8018050:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018054:	4770      	bx	lr
 8018056:	2300      	movs	r3, #0
 8018058:	e7dd      	b.n	8018016 <floorf+0x36>
 801805a:	bf00      	nop
 801805c:	7149f2ca 	.word	0x7149f2ca
 8018060:	bf800000 	.word	0xbf800000
 8018064:	007fffff 	.word	0x007fffff

08018068 <roundf>:
 8018068:	ee10 0a10 	vmov	r0, s0
 801806c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8018070:	3a7f      	subs	r2, #127	@ 0x7f
 8018072:	2a16      	cmp	r2, #22
 8018074:	dc15      	bgt.n	80180a2 <roundf+0x3a>
 8018076:	2a00      	cmp	r2, #0
 8018078:	da08      	bge.n	801808c <roundf+0x24>
 801807a:	3201      	adds	r2, #1
 801807c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8018080:	d101      	bne.n	8018086 <roundf+0x1e>
 8018082:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8018086:	ee00 3a10 	vmov	s0, r3
 801808a:	4770      	bx	lr
 801808c:	4907      	ldr	r1, [pc, #28]	@ (80180ac <roundf+0x44>)
 801808e:	4111      	asrs	r1, r2
 8018090:	4201      	tst	r1, r0
 8018092:	d0fa      	beq.n	801808a <roundf+0x22>
 8018094:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8018098:	4113      	asrs	r3, r2
 801809a:	4403      	add	r3, r0
 801809c:	ea23 0301 	bic.w	r3, r3, r1
 80180a0:	e7f1      	b.n	8018086 <roundf+0x1e>
 80180a2:	2a80      	cmp	r2, #128	@ 0x80
 80180a4:	d1f1      	bne.n	801808a <roundf+0x22>
 80180a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80180aa:	4770      	bx	lr
 80180ac:	007fffff 	.word	0x007fffff

080180b0 <__kernel_cosf>:
 80180b0:	ee10 3a10 	vmov	r3, s0
 80180b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80180b8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80180bc:	eef0 6a40 	vmov.f32	s13, s0
 80180c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80180c4:	d204      	bcs.n	80180d0 <__kernel_cosf+0x20>
 80180c6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80180ca:	ee17 2a90 	vmov	r2, s15
 80180ce:	b342      	cbz	r2, 8018122 <__kernel_cosf+0x72>
 80180d0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80180d4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8018140 <__kernel_cosf+0x90>
 80180d8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8018144 <__kernel_cosf+0x94>
 80180dc:	4a1a      	ldr	r2, [pc, #104]	@ (8018148 <__kernel_cosf+0x98>)
 80180de:	eea7 6a27 	vfma.f32	s12, s14, s15
 80180e2:	4293      	cmp	r3, r2
 80180e4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801814c <__kernel_cosf+0x9c>
 80180e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80180ec:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8018150 <__kernel_cosf+0xa0>
 80180f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80180f4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8018154 <__kernel_cosf+0xa4>
 80180f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80180fc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8018158 <__kernel_cosf+0xa8>
 8018100:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018104:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8018108:	ee26 6a07 	vmul.f32	s12, s12, s14
 801810c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018110:	eee7 0a06 	vfma.f32	s1, s14, s12
 8018114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018118:	d804      	bhi.n	8018124 <__kernel_cosf+0x74>
 801811a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801811e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018122:	4770      	bx	lr
 8018124:	4a0d      	ldr	r2, [pc, #52]	@ (801815c <__kernel_cosf+0xac>)
 8018126:	4293      	cmp	r3, r2
 8018128:	bf9a      	itte	ls
 801812a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801812e:	ee07 3a10 	vmovls	s14, r3
 8018132:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8018136:	ee30 0a47 	vsub.f32	s0, s0, s14
 801813a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801813e:	e7ec      	b.n	801811a <__kernel_cosf+0x6a>
 8018140:	ad47d74e 	.word	0xad47d74e
 8018144:	310f74f6 	.word	0x310f74f6
 8018148:	3e999999 	.word	0x3e999999
 801814c:	b493f27c 	.word	0xb493f27c
 8018150:	37d00d01 	.word	0x37d00d01
 8018154:	bab60b61 	.word	0xbab60b61
 8018158:	3d2aaaab 	.word	0x3d2aaaab
 801815c:	3f480000 	.word	0x3f480000

08018160 <__kernel_sinf>:
 8018160:	ee10 3a10 	vmov	r3, s0
 8018164:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018168:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801816c:	d204      	bcs.n	8018178 <__kernel_sinf+0x18>
 801816e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018172:	ee17 3a90 	vmov	r3, s15
 8018176:	b35b      	cbz	r3, 80181d0 <__kernel_sinf+0x70>
 8018178:	ee20 7a00 	vmul.f32	s14, s0, s0
 801817c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80181d4 <__kernel_sinf+0x74>
 8018180:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80181d8 <__kernel_sinf+0x78>
 8018184:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018188:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80181dc <__kernel_sinf+0x7c>
 801818c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018190:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80181e0 <__kernel_sinf+0x80>
 8018194:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018198:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80181e4 <__kernel_sinf+0x84>
 801819c:	ee60 6a07 	vmul.f32	s13, s0, s14
 80181a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80181a4:	b930      	cbnz	r0, 80181b4 <__kernel_sinf+0x54>
 80181a6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80181e8 <__kernel_sinf+0x88>
 80181aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80181ae:	eea6 0a26 	vfma.f32	s0, s12, s13
 80181b2:	4770      	bx	lr
 80181b4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80181b8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80181bc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80181c0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80181c4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80181ec <__kernel_sinf+0x8c>
 80181c8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80181cc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80181d0:	4770      	bx	lr
 80181d2:	bf00      	nop
 80181d4:	2f2ec9d3 	.word	0x2f2ec9d3
 80181d8:	b2d72f34 	.word	0xb2d72f34
 80181dc:	3638ef1b 	.word	0x3638ef1b
 80181e0:	b9500d01 	.word	0xb9500d01
 80181e4:	3c088889 	.word	0x3c088889
 80181e8:	be2aaaab 	.word	0xbe2aaaab
 80181ec:	3e2aaaab 	.word	0x3e2aaaab

080181f0 <__ieee754_expf>:
 80181f0:	ee10 2a10 	vmov	r2, s0
 80181f4:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 80181f8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80181fc:	d902      	bls.n	8018204 <__ieee754_expf+0x14>
 80181fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018202:	4770      	bx	lr
 8018204:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8018208:	d106      	bne.n	8018218 <__ieee754_expf+0x28>
 801820a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8018344 <__ieee754_expf+0x154>
 801820e:	2900      	cmp	r1, #0
 8018210:	bf18      	it	ne
 8018212:	eeb0 0a67 	vmovne.f32	s0, s15
 8018216:	4770      	bx	lr
 8018218:	484b      	ldr	r0, [pc, #300]	@ (8018348 <__ieee754_expf+0x158>)
 801821a:	4282      	cmp	r2, r0
 801821c:	dd02      	ble.n	8018224 <__ieee754_expf+0x34>
 801821e:	2000      	movs	r0, #0
 8018220:	f000 bdb8 	b.w	8018d94 <__math_oflowf>
 8018224:	2a00      	cmp	r2, #0
 8018226:	da05      	bge.n	8018234 <__ieee754_expf+0x44>
 8018228:	4a48      	ldr	r2, [pc, #288]	@ (801834c <__ieee754_expf+0x15c>)
 801822a:	4293      	cmp	r3, r2
 801822c:	d902      	bls.n	8018234 <__ieee754_expf+0x44>
 801822e:	2000      	movs	r0, #0
 8018230:	f000 bdaa 	b.w	8018d88 <__math_uflowf>
 8018234:	4a46      	ldr	r2, [pc, #280]	@ (8018350 <__ieee754_expf+0x160>)
 8018236:	4293      	cmp	r3, r2
 8018238:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801823c:	d952      	bls.n	80182e4 <__ieee754_expf+0xf4>
 801823e:	4a45      	ldr	r2, [pc, #276]	@ (8018354 <__ieee754_expf+0x164>)
 8018240:	4293      	cmp	r3, r2
 8018242:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8018246:	d834      	bhi.n	80182b2 <__ieee754_expf+0xc2>
 8018248:	4b43      	ldr	r3, [pc, #268]	@ (8018358 <__ieee754_expf+0x168>)
 801824a:	4413      	add	r3, r2
 801824c:	ed93 7a00 	vldr	s14, [r3]
 8018250:	4b42      	ldr	r3, [pc, #264]	@ (801835c <__ieee754_expf+0x16c>)
 8018252:	4413      	add	r3, r2
 8018254:	ee30 7a47 	vsub.f32	s14, s0, s14
 8018258:	f1c1 0201 	rsb	r2, r1, #1
 801825c:	edd3 7a00 	vldr	s15, [r3]
 8018260:	1a52      	subs	r2, r2, r1
 8018262:	ee37 0a67 	vsub.f32	s0, s14, s15
 8018266:	ee20 6a00 	vmul.f32	s12, s0, s0
 801826a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8018360 <__ieee754_expf+0x170>
 801826e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8018364 <__ieee754_expf+0x174>
 8018272:	eee6 6a05 	vfma.f32	s13, s12, s10
 8018276:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8018368 <__ieee754_expf+0x178>
 801827a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801827e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801836c <__ieee754_expf+0x17c>
 8018282:	eee5 6a06 	vfma.f32	s13, s10, s12
 8018286:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8018370 <__ieee754_expf+0x180>
 801828a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801828e:	eef0 6a40 	vmov.f32	s13, s0
 8018292:	eee5 6a46 	vfms.f32	s13, s10, s12
 8018296:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801829a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801829e:	bb92      	cbnz	r2, 8018306 <__ieee754_expf+0x116>
 80182a0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80182a4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80182a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80182ac:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80182b0:	4770      	bx	lr
 80182b2:	4b30      	ldr	r3, [pc, #192]	@ (8018374 <__ieee754_expf+0x184>)
 80182b4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8018378 <__ieee754_expf+0x188>
 80182b8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801837c <__ieee754_expf+0x18c>
 80182bc:	4413      	add	r3, r2
 80182be:	edd3 7a00 	vldr	s15, [r3]
 80182c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80182c6:	eeb0 7a40 	vmov.f32	s14, s0
 80182ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80182ce:	ee17 2a90 	vmov	r2, s15
 80182d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80182d6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80182da:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8018380 <__ieee754_expf+0x190>
 80182de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80182e2:	e7be      	b.n	8018262 <__ieee754_expf+0x72>
 80182e4:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 80182e8:	d20b      	bcs.n	8018302 <__ieee754_expf+0x112>
 80182ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8018384 <__ieee754_expf+0x194>
 80182ee:	ee70 6a26 	vadd.f32	s13, s0, s13
 80182f2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80182f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182fa:	dd02      	ble.n	8018302 <__ieee754_expf+0x112>
 80182fc:	ee30 0a25 	vadd.f32	s0, s0, s11
 8018300:	4770      	bx	lr
 8018302:	2200      	movs	r2, #0
 8018304:	e7af      	b.n	8018266 <__ieee754_expf+0x76>
 8018306:	ee36 6a66 	vsub.f32	s12, s12, s13
 801830a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801830e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8018312:	bfb8      	it	lt
 8018314:	3264      	addlt	r2, #100	@ 0x64
 8018316:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801831a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801831e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8018322:	ee17 3a90 	vmov	r3, s15
 8018326:	bfab      	itete	ge
 8018328:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801832c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8018330:	ee00 3a10 	vmovge	s0, r3
 8018334:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8018388 <__ieee754_expf+0x198>
 8018338:	bfbc      	itt	lt
 801833a:	ee00 3a10 	vmovlt	s0, r3
 801833e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8018342:	4770      	bx	lr
 8018344:	00000000 	.word	0x00000000
 8018348:	42b17217 	.word	0x42b17217
 801834c:	42cff1b5 	.word	0x42cff1b5
 8018350:	3eb17218 	.word	0x3eb17218
 8018354:	3f851591 	.word	0x3f851591
 8018358:	0801f328 	.word	0x0801f328
 801835c:	0801f320 	.word	0x0801f320
 8018360:	3331bb4c 	.word	0x3331bb4c
 8018364:	b5ddea0e 	.word	0xb5ddea0e
 8018368:	388ab355 	.word	0x388ab355
 801836c:	bb360b61 	.word	0xbb360b61
 8018370:	3e2aaaab 	.word	0x3e2aaaab
 8018374:	0801f330 	.word	0x0801f330
 8018378:	3fb8aa3b 	.word	0x3fb8aa3b
 801837c:	3f317180 	.word	0x3f317180
 8018380:	3717f7d1 	.word	0x3717f7d1
 8018384:	7149f2ca 	.word	0x7149f2ca
 8018388:	0d800000 	.word	0x0d800000

0801838c <__ieee754_log10f>:
 801838c:	b508      	push	{r3, lr}
 801838e:	ee10 3a10 	vmov	r3, s0
 8018392:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8018396:	ed2d 8b02 	vpush	{d8}
 801839a:	d108      	bne.n	80183ae <__ieee754_log10f+0x22>
 801839c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8018424 <__ieee754_log10f+0x98>
 80183a0:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8018428 <__ieee754_log10f+0x9c>
 80183a4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80183a8:	ecbd 8b02 	vpop	{d8}
 80183ac:	bd08      	pop	{r3, pc}
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	461a      	mov	r2, r3
 80183b2:	da02      	bge.n	80183ba <__ieee754_log10f+0x2e>
 80183b4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80183b8:	e7f2      	b.n	80183a0 <__ieee754_log10f+0x14>
 80183ba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80183be:	db02      	blt.n	80183c6 <__ieee754_log10f+0x3a>
 80183c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80183c4:	e7f0      	b.n	80183a8 <__ieee754_log10f+0x1c>
 80183c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80183ca:	bfbf      	itttt	lt
 80183cc:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 801842c <__ieee754_log10f+0xa0>
 80183d0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80183d4:	f06f 0118 	mvnlt.w	r1, #24
 80183d8:	ee17 2a90 	vmovlt	r2, s15
 80183dc:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80183e0:	bfa8      	it	ge
 80183e2:	2100      	movge	r1, #0
 80183e4:	3b7f      	subs	r3, #127	@ 0x7f
 80183e6:	440b      	add	r3, r1
 80183e8:	0fd9      	lsrs	r1, r3, #31
 80183ea:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80183ee:	ee07 3a90 	vmov	s15, r3
 80183f2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80183f6:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 80183fa:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80183fe:	ee00 3a10 	vmov	s0, r3
 8018402:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018406:	f000 ffcd 	bl	80193a4 <__ieee754_logf>
 801840a:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8018430 <__ieee754_log10f+0xa4>
 801840e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018412:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8018434 <__ieee754_log10f+0xa8>
 8018416:	eea8 0a27 	vfma.f32	s0, s16, s15
 801841a:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8018438 <__ieee754_log10f+0xac>
 801841e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8018422:	e7c1      	b.n	80183a8 <__ieee754_log10f+0x1c>
 8018424:	cc000000 	.word	0xcc000000
 8018428:	00000000 	.word	0x00000000
 801842c:	4c000000 	.word	0x4c000000
 8018430:	3ede5bd9 	.word	0x3ede5bd9
 8018434:	355427db 	.word	0x355427db
 8018438:	3e9a2080 	.word	0x3e9a2080

0801843c <__ieee754_powf>:
 801843c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018440:	ee10 4a90 	vmov	r4, s1
 8018444:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8018448:	ed2d 8b02 	vpush	{d8}
 801844c:	ee10 6a10 	vmov	r6, s0
 8018450:	eeb0 8a40 	vmov.f32	s16, s0
 8018454:	eef0 8a60 	vmov.f32	s17, s1
 8018458:	d10c      	bne.n	8018474 <__ieee754_powf+0x38>
 801845a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801845e:	0076      	lsls	r6, r6, #1
 8018460:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8018464:	f240 829c 	bls.w	80189a0 <__ieee754_powf+0x564>
 8018468:	ee38 0a28 	vadd.f32	s0, s16, s17
 801846c:	ecbd 8b02 	vpop	{d8}
 8018470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018474:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8018478:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801847c:	d802      	bhi.n	8018484 <__ieee754_powf+0x48>
 801847e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018482:	d908      	bls.n	8018496 <__ieee754_powf+0x5a>
 8018484:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8018488:	d1ee      	bne.n	8018468 <__ieee754_powf+0x2c>
 801848a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801848e:	0064      	lsls	r4, r4, #1
 8018490:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8018494:	e7e6      	b.n	8018464 <__ieee754_powf+0x28>
 8018496:	2e00      	cmp	r6, #0
 8018498:	da1e      	bge.n	80184d8 <__ieee754_powf+0x9c>
 801849a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801849e:	d22b      	bcs.n	80184f8 <__ieee754_powf+0xbc>
 80184a0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80184a4:	d332      	bcc.n	801850c <__ieee754_powf+0xd0>
 80184a6:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80184aa:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80184ae:	fa49 f503 	asr.w	r5, r9, r3
 80184b2:	fa05 f303 	lsl.w	r3, r5, r3
 80184b6:	454b      	cmp	r3, r9
 80184b8:	d126      	bne.n	8018508 <__ieee754_powf+0xcc>
 80184ba:	f005 0501 	and.w	r5, r5, #1
 80184be:	f1c5 0502 	rsb	r5, r5, #2
 80184c2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80184c6:	d122      	bne.n	801850e <__ieee754_powf+0xd2>
 80184c8:	2c00      	cmp	r4, #0
 80184ca:	f280 826f 	bge.w	80189ac <__ieee754_powf+0x570>
 80184ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80184d2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80184d6:	e7c9      	b.n	801846c <__ieee754_powf+0x30>
 80184d8:	2500      	movs	r5, #0
 80184da:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80184de:	d1f0      	bne.n	80184c2 <__ieee754_powf+0x86>
 80184e0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80184e4:	f000 825c 	beq.w	80189a0 <__ieee754_powf+0x564>
 80184e8:	d908      	bls.n	80184fc <__ieee754_powf+0xc0>
 80184ea:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 801884c <__ieee754_powf+0x410>
 80184ee:	2c00      	cmp	r4, #0
 80184f0:	bfa8      	it	ge
 80184f2:	eeb0 0a68 	vmovge.f32	s0, s17
 80184f6:	e7b9      	b.n	801846c <__ieee754_powf+0x30>
 80184f8:	2502      	movs	r5, #2
 80184fa:	e7ee      	b.n	80184da <__ieee754_powf+0x9e>
 80184fc:	2c00      	cmp	r4, #0
 80184fe:	f280 8252 	bge.w	80189a6 <__ieee754_powf+0x56a>
 8018502:	eeb1 0a68 	vneg.f32	s0, s17
 8018506:	e7b1      	b.n	801846c <__ieee754_powf+0x30>
 8018508:	2500      	movs	r5, #0
 801850a:	e7da      	b.n	80184c2 <__ieee754_powf+0x86>
 801850c:	2500      	movs	r5, #0
 801850e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018512:	d102      	bne.n	801851a <__ieee754_powf+0xde>
 8018514:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018518:	e7a8      	b.n	801846c <__ieee754_powf+0x30>
 801851a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801851e:	d109      	bne.n	8018534 <__ieee754_powf+0xf8>
 8018520:	2e00      	cmp	r6, #0
 8018522:	db07      	blt.n	8018534 <__ieee754_powf+0xf8>
 8018524:	eeb0 0a48 	vmov.f32	s0, s16
 8018528:	ecbd 8b02 	vpop	{d8}
 801852c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018530:	f7ff bd52 	b.w	8017fd8 <__ieee754_sqrtf>
 8018534:	eeb0 0a48 	vmov.f32	s0, s16
 8018538:	f7ff fc46 	bl	8017dc8 <fabsf>
 801853c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8018540:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8018544:	4647      	mov	r7, r8
 8018546:	d002      	beq.n	801854e <__ieee754_powf+0x112>
 8018548:	f1b8 0f00 	cmp.w	r8, #0
 801854c:	d117      	bne.n	801857e <__ieee754_powf+0x142>
 801854e:	2c00      	cmp	r4, #0
 8018550:	bfbc      	itt	lt
 8018552:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8018556:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801855a:	2e00      	cmp	r6, #0
 801855c:	da86      	bge.n	801846c <__ieee754_powf+0x30>
 801855e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8018562:	ea58 0805 	orrs.w	r8, r8, r5
 8018566:	d104      	bne.n	8018572 <__ieee754_powf+0x136>
 8018568:	ee70 7a40 	vsub.f32	s15, s0, s0
 801856c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018570:	e77c      	b.n	801846c <__ieee754_powf+0x30>
 8018572:	2d01      	cmp	r5, #1
 8018574:	f47f af7a 	bne.w	801846c <__ieee754_powf+0x30>
 8018578:	eeb1 0a40 	vneg.f32	s0, s0
 801857c:	e776      	b.n	801846c <__ieee754_powf+0x30>
 801857e:	0ff0      	lsrs	r0, r6, #31
 8018580:	3801      	subs	r0, #1
 8018582:	ea55 0300 	orrs.w	r3, r5, r0
 8018586:	d104      	bne.n	8018592 <__ieee754_powf+0x156>
 8018588:	ee38 8a48 	vsub.f32	s16, s16, s16
 801858c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018590:	e76c      	b.n	801846c <__ieee754_powf+0x30>
 8018592:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8018596:	d973      	bls.n	8018680 <__ieee754_powf+0x244>
 8018598:	4bad      	ldr	r3, [pc, #692]	@ (8018850 <__ieee754_powf+0x414>)
 801859a:	4598      	cmp	r8, r3
 801859c:	d808      	bhi.n	80185b0 <__ieee754_powf+0x174>
 801859e:	2c00      	cmp	r4, #0
 80185a0:	da0b      	bge.n	80185ba <__ieee754_powf+0x17e>
 80185a2:	2000      	movs	r0, #0
 80185a4:	ecbd 8b02 	vpop	{d8}
 80185a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185ac:	f000 bbf2 	b.w	8018d94 <__math_oflowf>
 80185b0:	4ba8      	ldr	r3, [pc, #672]	@ (8018854 <__ieee754_powf+0x418>)
 80185b2:	4598      	cmp	r8, r3
 80185b4:	d908      	bls.n	80185c8 <__ieee754_powf+0x18c>
 80185b6:	2c00      	cmp	r4, #0
 80185b8:	dcf3      	bgt.n	80185a2 <__ieee754_powf+0x166>
 80185ba:	2000      	movs	r0, #0
 80185bc:	ecbd 8b02 	vpop	{d8}
 80185c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185c4:	f000 bbe0 	b.w	8018d88 <__math_uflowf>
 80185c8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80185cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80185d0:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8018858 <__ieee754_powf+0x41c>
 80185d4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80185d8:	eee0 6a67 	vfms.f32	s13, s0, s15
 80185dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80185e0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80185e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80185e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80185ec:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 801885c <__ieee754_powf+0x420>
 80185f0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80185f4:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8018860 <__ieee754_powf+0x424>
 80185f8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80185fc:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8018864 <__ieee754_powf+0x428>
 8018600:	eef0 6a67 	vmov.f32	s13, s15
 8018604:	eee0 6a07 	vfma.f32	s13, s0, s14
 8018608:	ee16 3a90 	vmov	r3, s13
 801860c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8018610:	f023 030f 	bic.w	r3, r3, #15
 8018614:	ee06 3a90 	vmov	s13, r3
 8018618:	eee0 6a47 	vfms.f32	s13, s0, s14
 801861c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018620:	3d01      	subs	r5, #1
 8018622:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8018626:	4305      	orrs	r5, r0
 8018628:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801862c:	f024 040f 	bic.w	r4, r4, #15
 8018630:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8018634:	bf18      	it	ne
 8018636:	eeb0 8a47 	vmovne.f32	s16, s14
 801863a:	ee07 4a10 	vmov	s14, r4
 801863e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018642:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8018646:	ee07 3a90 	vmov	s15, r3
 801864a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801864e:	ee07 4a10 	vmov	s14, r4
 8018652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018656:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801865a:	ee17 1a10 	vmov	r1, s14
 801865e:	2900      	cmp	r1, #0
 8018660:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018664:	f340 80dd 	ble.w	8018822 <__ieee754_powf+0x3e6>
 8018668:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 801866c:	f240 80ca 	bls.w	8018804 <__ieee754_powf+0x3c8>
 8018670:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018678:	bf4c      	ite	mi
 801867a:	2001      	movmi	r0, #1
 801867c:	2000      	movpl	r0, #0
 801867e:	e791      	b.n	80185a4 <__ieee754_powf+0x168>
 8018680:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8018684:	bf01      	itttt	eq
 8018686:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8018868 <__ieee754_powf+0x42c>
 801868a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801868e:	f06f 0317 	mvneq.w	r3, #23
 8018692:	ee17 7a90 	vmoveq	r7, s15
 8018696:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801869a:	bf18      	it	ne
 801869c:	2300      	movne	r3, #0
 801869e:	3a7f      	subs	r2, #127	@ 0x7f
 80186a0:	441a      	add	r2, r3
 80186a2:	4b72      	ldr	r3, [pc, #456]	@ (801886c <__ieee754_powf+0x430>)
 80186a4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80186a8:	429f      	cmp	r7, r3
 80186aa:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80186ae:	dd06      	ble.n	80186be <__ieee754_powf+0x282>
 80186b0:	4b6f      	ldr	r3, [pc, #444]	@ (8018870 <__ieee754_powf+0x434>)
 80186b2:	429f      	cmp	r7, r3
 80186b4:	f340 80a4 	ble.w	8018800 <__ieee754_powf+0x3c4>
 80186b8:	3201      	adds	r2, #1
 80186ba:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80186be:	2600      	movs	r6, #0
 80186c0:	4b6c      	ldr	r3, [pc, #432]	@ (8018874 <__ieee754_powf+0x438>)
 80186c2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80186c6:	ee07 1a10 	vmov	s14, r1
 80186ca:	edd3 5a00 	vldr	s11, [r3]
 80186ce:	4b6a      	ldr	r3, [pc, #424]	@ (8018878 <__ieee754_powf+0x43c>)
 80186d0:	ee75 7a87 	vadd.f32	s15, s11, s14
 80186d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80186d8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80186dc:	1049      	asrs	r1, r1, #1
 80186de:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80186e2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80186e6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80186ea:	ee37 6a65 	vsub.f32	s12, s14, s11
 80186ee:	ee07 1a90 	vmov	s15, r1
 80186f2:	ee26 5a24 	vmul.f32	s10, s12, s9
 80186f6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80186fa:	ee15 7a10 	vmov	r7, s10
 80186fe:	401f      	ands	r7, r3
 8018700:	ee06 7a90 	vmov	s13, r7
 8018704:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8018708:	ee37 7a65 	vsub.f32	s14, s14, s11
 801870c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8018710:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8018714:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801887c <__ieee754_powf+0x440>
 8018718:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8018880 <__ieee754_powf+0x444>
 801871c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8018720:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8018884 <__ieee754_powf+0x448>
 8018724:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018728:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8018858 <__ieee754_powf+0x41c>
 801872c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018730:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8018888 <__ieee754_powf+0x44c>
 8018734:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018738:	eddf 5a54 	vldr	s11, [pc, #336]	@ 801888c <__ieee754_powf+0x450>
 801873c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018740:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018744:	ee35 7a26 	vadd.f32	s14, s10, s13
 8018748:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801874c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018750:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8018754:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8018758:	eef0 5a67 	vmov.f32	s11, s15
 801875c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8018760:	ee75 5a87 	vadd.f32	s11, s11, s14
 8018764:	ee15 1a90 	vmov	r1, s11
 8018768:	4019      	ands	r1, r3
 801876a:	ee05 1a90 	vmov	s11, r1
 801876e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8018772:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8018776:	ee77 7a67 	vsub.f32	s15, s14, s15
 801877a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801877e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018782:	eeb0 6a67 	vmov.f32	s12, s15
 8018786:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801878a:	ee16 1a10 	vmov	r1, s12
 801878e:	4019      	ands	r1, r3
 8018790:	ee06 1a10 	vmov	s12, r1
 8018794:	eeb0 7a46 	vmov.f32	s14, s12
 8018798:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801879c:	493c      	ldr	r1, [pc, #240]	@ (8018890 <__ieee754_powf+0x454>)
 801879e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80187a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80187a6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8018894 <__ieee754_powf+0x458>
 80187aa:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8018898 <__ieee754_powf+0x45c>
 80187ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80187b2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801889c <__ieee754_powf+0x460>
 80187b6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80187ba:	ed91 7a00 	vldr	s14, [r1]
 80187be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80187c2:	ee07 2a10 	vmov	s14, r2
 80187c6:	eef0 6a67 	vmov.f32	s13, s15
 80187ca:	4a35      	ldr	r2, [pc, #212]	@ (80188a0 <__ieee754_powf+0x464>)
 80187cc:	eee6 6a25 	vfma.f32	s13, s12, s11
 80187d0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80187d4:	ed92 5a00 	vldr	s10, [r2]
 80187d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80187dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80187e0:	ee76 6a87 	vadd.f32	s13, s13, s14
 80187e4:	ee16 2a90 	vmov	r2, s13
 80187e8:	4013      	ands	r3, r2
 80187ea:	ee06 3a90 	vmov	s13, r3
 80187ee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80187f2:	ee37 7a45 	vsub.f32	s14, s14, s10
 80187f6:	eea6 7a65 	vfms.f32	s14, s12, s11
 80187fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80187fe:	e70f      	b.n	8018620 <__ieee754_powf+0x1e4>
 8018800:	2601      	movs	r6, #1
 8018802:	e75d      	b.n	80186c0 <__ieee754_powf+0x284>
 8018804:	d152      	bne.n	80188ac <__ieee754_powf+0x470>
 8018806:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80188a4 <__ieee754_powf+0x468>
 801880a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801880e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8018812:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801881a:	f73f af29 	bgt.w	8018670 <__ieee754_powf+0x234>
 801881e:	2386      	movs	r3, #134	@ 0x86
 8018820:	e048      	b.n	80188b4 <__ieee754_powf+0x478>
 8018822:	4a21      	ldr	r2, [pc, #132]	@ (80188a8 <__ieee754_powf+0x46c>)
 8018824:	4293      	cmp	r3, r2
 8018826:	d907      	bls.n	8018838 <__ieee754_powf+0x3fc>
 8018828:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801882c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018830:	bf4c      	ite	mi
 8018832:	2001      	movmi	r0, #1
 8018834:	2000      	movpl	r0, #0
 8018836:	e6c1      	b.n	80185bc <__ieee754_powf+0x180>
 8018838:	d138      	bne.n	80188ac <__ieee754_powf+0x470>
 801883a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801883e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8018842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018846:	dbea      	blt.n	801881e <__ieee754_powf+0x3e2>
 8018848:	e7ee      	b.n	8018828 <__ieee754_powf+0x3ec>
 801884a:	bf00      	nop
 801884c:	00000000 	.word	0x00000000
 8018850:	3f7ffff3 	.word	0x3f7ffff3
 8018854:	3f800007 	.word	0x3f800007
 8018858:	3eaaaaab 	.word	0x3eaaaaab
 801885c:	3fb8aa3b 	.word	0x3fb8aa3b
 8018860:	36eca570 	.word	0x36eca570
 8018864:	3fb8aa00 	.word	0x3fb8aa00
 8018868:	4b800000 	.word	0x4b800000
 801886c:	001cc471 	.word	0x001cc471
 8018870:	005db3d6 	.word	0x005db3d6
 8018874:	0801f348 	.word	0x0801f348
 8018878:	fffff000 	.word	0xfffff000
 801887c:	3e6c3255 	.word	0x3e6c3255
 8018880:	3e53f142 	.word	0x3e53f142
 8018884:	3e8ba305 	.word	0x3e8ba305
 8018888:	3edb6db7 	.word	0x3edb6db7
 801888c:	3f19999a 	.word	0x3f19999a
 8018890:	0801f338 	.word	0x0801f338
 8018894:	3f76384f 	.word	0x3f76384f
 8018898:	3f763800 	.word	0x3f763800
 801889c:	369dc3a0 	.word	0x369dc3a0
 80188a0:	0801f340 	.word	0x0801f340
 80188a4:	3338aa3c 	.word	0x3338aa3c
 80188a8:	43160000 	.word	0x43160000
 80188ac:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80188b0:	d971      	bls.n	8018996 <__ieee754_powf+0x55a>
 80188b2:	15db      	asrs	r3, r3, #23
 80188b4:	3b7e      	subs	r3, #126	@ 0x7e
 80188b6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80188ba:	4118      	asrs	r0, r3
 80188bc:	4408      	add	r0, r1
 80188be:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80188c2:	4a3c      	ldr	r2, [pc, #240]	@ (80189b4 <__ieee754_powf+0x578>)
 80188c4:	3b7f      	subs	r3, #127	@ 0x7f
 80188c6:	411a      	asrs	r2, r3
 80188c8:	4002      	ands	r2, r0
 80188ca:	ee07 2a10 	vmov	s14, r2
 80188ce:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80188d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80188d6:	f1c3 0317 	rsb	r3, r3, #23
 80188da:	4118      	asrs	r0, r3
 80188dc:	2900      	cmp	r1, #0
 80188de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80188e2:	bfb8      	it	lt
 80188e4:	4240      	neglt	r0, r0
 80188e6:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80188ea:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80189b8 <__ieee754_powf+0x57c>
 80188ee:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80189bc <__ieee754_powf+0x580>
 80188f2:	ee17 3a10 	vmov	r3, s14
 80188f6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80188fa:	f023 030f 	bic.w	r3, r3, #15
 80188fe:	ee07 3a10 	vmov	s14, r3
 8018902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018906:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801890a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801890e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80189c0 <__ieee754_powf+0x584>
 8018912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018916:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801891a:	eef0 6a67 	vmov.f32	s13, s15
 801891e:	eee7 6a06 	vfma.f32	s13, s14, s12
 8018922:	eef0 5a66 	vmov.f32	s11, s13
 8018926:	eee7 5a46 	vfms.f32	s11, s14, s12
 801892a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801892e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8018932:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80189c4 <__ieee754_powf+0x588>
 8018936:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80189c8 <__ieee754_powf+0x58c>
 801893a:	eea7 6a25 	vfma.f32	s12, s14, s11
 801893e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80189cc <__ieee754_powf+0x590>
 8018942:	eee6 5a07 	vfma.f32	s11, s12, s14
 8018946:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80189d0 <__ieee754_powf+0x594>
 801894a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801894e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80189d4 <__ieee754_powf+0x598>
 8018952:	eee6 5a07 	vfma.f32	s11, s12, s14
 8018956:	eeb0 6a66 	vmov.f32	s12, s13
 801895a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801895e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8018962:	ee66 5a86 	vmul.f32	s11, s13, s12
 8018966:	ee36 6a47 	vsub.f32	s12, s12, s14
 801896a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801896e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8018972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018976:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801897a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801897e:	ee10 3a10 	vmov	r3, s0
 8018982:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8018986:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801898a:	da06      	bge.n	801899a <__ieee754_powf+0x55e>
 801898c:	f000 f97c 	bl	8018c88 <scalbnf>
 8018990:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018994:	e56a      	b.n	801846c <__ieee754_powf+0x30>
 8018996:	2000      	movs	r0, #0
 8018998:	e7a5      	b.n	80188e6 <__ieee754_powf+0x4aa>
 801899a:	ee00 3a10 	vmov	s0, r3
 801899e:	e7f7      	b.n	8018990 <__ieee754_powf+0x554>
 80189a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80189a4:	e562      	b.n	801846c <__ieee754_powf+0x30>
 80189a6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80189d8 <__ieee754_powf+0x59c>
 80189aa:	e55f      	b.n	801846c <__ieee754_powf+0x30>
 80189ac:	eeb0 0a48 	vmov.f32	s0, s16
 80189b0:	e55c      	b.n	801846c <__ieee754_powf+0x30>
 80189b2:	bf00      	nop
 80189b4:	ff800000 	.word	0xff800000
 80189b8:	3f317218 	.word	0x3f317218
 80189bc:	3f317200 	.word	0x3f317200
 80189c0:	35bfbe8c 	.word	0x35bfbe8c
 80189c4:	b5ddea0e 	.word	0xb5ddea0e
 80189c8:	3331bb4c 	.word	0x3331bb4c
 80189cc:	388ab355 	.word	0x388ab355
 80189d0:	bb360b61 	.word	0xbb360b61
 80189d4:	3e2aaaab 	.word	0x3e2aaaab
 80189d8:	00000000 	.word	0x00000000

080189dc <__ieee754_rem_pio2f>:
 80189dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189de:	ee10 6a10 	vmov	r6, s0
 80189e2:	4b88      	ldr	r3, [pc, #544]	@ (8018c04 <__ieee754_rem_pio2f+0x228>)
 80189e4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80189e8:	429d      	cmp	r5, r3
 80189ea:	b087      	sub	sp, #28
 80189ec:	4604      	mov	r4, r0
 80189ee:	d805      	bhi.n	80189fc <__ieee754_rem_pio2f+0x20>
 80189f0:	2300      	movs	r3, #0
 80189f2:	ed80 0a00 	vstr	s0, [r0]
 80189f6:	6043      	str	r3, [r0, #4]
 80189f8:	2000      	movs	r0, #0
 80189fa:	e022      	b.n	8018a42 <__ieee754_rem_pio2f+0x66>
 80189fc:	4b82      	ldr	r3, [pc, #520]	@ (8018c08 <__ieee754_rem_pio2f+0x22c>)
 80189fe:	429d      	cmp	r5, r3
 8018a00:	d83a      	bhi.n	8018a78 <__ieee754_rem_pio2f+0x9c>
 8018a02:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8018a06:	2e00      	cmp	r6, #0
 8018a08:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8018c0c <__ieee754_rem_pio2f+0x230>
 8018a0c:	4a80      	ldr	r2, [pc, #512]	@ (8018c10 <__ieee754_rem_pio2f+0x234>)
 8018a0e:	f023 030f 	bic.w	r3, r3, #15
 8018a12:	dd18      	ble.n	8018a46 <__ieee754_rem_pio2f+0x6a>
 8018a14:	4293      	cmp	r3, r2
 8018a16:	ee70 7a47 	vsub.f32	s15, s0, s14
 8018a1a:	bf09      	itett	eq
 8018a1c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8018c14 <__ieee754_rem_pio2f+0x238>
 8018a20:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8018c18 <__ieee754_rem_pio2f+0x23c>
 8018a24:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8018c1c <__ieee754_rem_pio2f+0x240>
 8018a28:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8018a2c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8018a30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a34:	ed80 7a00 	vstr	s14, [r0]
 8018a38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018a3c:	edc0 7a01 	vstr	s15, [r0, #4]
 8018a40:	2001      	movs	r0, #1
 8018a42:	b007      	add	sp, #28
 8018a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a46:	4293      	cmp	r3, r2
 8018a48:	ee70 7a07 	vadd.f32	s15, s0, s14
 8018a4c:	bf09      	itett	eq
 8018a4e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8018c14 <__ieee754_rem_pio2f+0x238>
 8018a52:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8018c18 <__ieee754_rem_pio2f+0x23c>
 8018a56:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8018c1c <__ieee754_rem_pio2f+0x240>
 8018a5a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8018a5e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a66:	ed80 7a00 	vstr	s14, [r0]
 8018a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018a6e:	edc0 7a01 	vstr	s15, [r0, #4]
 8018a72:	f04f 30ff 	mov.w	r0, #4294967295
 8018a76:	e7e4      	b.n	8018a42 <__ieee754_rem_pio2f+0x66>
 8018a78:	4b69      	ldr	r3, [pc, #420]	@ (8018c20 <__ieee754_rem_pio2f+0x244>)
 8018a7a:	429d      	cmp	r5, r3
 8018a7c:	d873      	bhi.n	8018b66 <__ieee754_rem_pio2f+0x18a>
 8018a7e:	f7ff f9a3 	bl	8017dc8 <fabsf>
 8018a82:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8018c24 <__ieee754_rem_pio2f+0x248>
 8018a86:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018a8a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018a8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018a96:	ee17 0a90 	vmov	r0, s15
 8018a9a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018c0c <__ieee754_rem_pio2f+0x230>
 8018a9e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8018aa2:	281f      	cmp	r0, #31
 8018aa4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018c18 <__ieee754_rem_pio2f+0x23c>
 8018aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018aac:	eeb1 6a47 	vneg.f32	s12, s14
 8018ab0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018ab4:	ee16 1a90 	vmov	r1, s13
 8018ab8:	dc09      	bgt.n	8018ace <__ieee754_rem_pio2f+0xf2>
 8018aba:	4a5b      	ldr	r2, [pc, #364]	@ (8018c28 <__ieee754_rem_pio2f+0x24c>)
 8018abc:	1e47      	subs	r7, r0, #1
 8018abe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8018ac2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8018ac6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8018aca:	4293      	cmp	r3, r2
 8018acc:	d107      	bne.n	8018ade <__ieee754_rem_pio2f+0x102>
 8018ace:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8018ad2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8018ad6:	2a08      	cmp	r2, #8
 8018ad8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8018adc:	dc14      	bgt.n	8018b08 <__ieee754_rem_pio2f+0x12c>
 8018ade:	6021      	str	r1, [r4, #0]
 8018ae0:	ed94 7a00 	vldr	s14, [r4]
 8018ae4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018ae8:	2e00      	cmp	r6, #0
 8018aea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018aee:	ed84 0a01 	vstr	s0, [r4, #4]
 8018af2:	daa6      	bge.n	8018a42 <__ieee754_rem_pio2f+0x66>
 8018af4:	eeb1 7a47 	vneg.f32	s14, s14
 8018af8:	eeb1 0a40 	vneg.f32	s0, s0
 8018afc:	ed84 7a00 	vstr	s14, [r4]
 8018b00:	ed84 0a01 	vstr	s0, [r4, #4]
 8018b04:	4240      	negs	r0, r0
 8018b06:	e79c      	b.n	8018a42 <__ieee754_rem_pio2f+0x66>
 8018b08:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8018c14 <__ieee754_rem_pio2f+0x238>
 8018b0c:	eef0 6a40 	vmov.f32	s13, s0
 8018b10:	eee6 6a25 	vfma.f32	s13, s12, s11
 8018b14:	ee70 7a66 	vsub.f32	s15, s0, s13
 8018b18:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018b1c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8018c1c <__ieee754_rem_pio2f+0x240>
 8018b20:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8018b24:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8018b28:	ee15 2a90 	vmov	r2, s11
 8018b2c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8018b30:	1a5b      	subs	r3, r3, r1
 8018b32:	2b19      	cmp	r3, #25
 8018b34:	dc04      	bgt.n	8018b40 <__ieee754_rem_pio2f+0x164>
 8018b36:	edc4 5a00 	vstr	s11, [r4]
 8018b3a:	eeb0 0a66 	vmov.f32	s0, s13
 8018b3e:	e7cf      	b.n	8018ae0 <__ieee754_rem_pio2f+0x104>
 8018b40:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8018c2c <__ieee754_rem_pio2f+0x250>
 8018b44:	eeb0 0a66 	vmov.f32	s0, s13
 8018b48:	eea6 0a25 	vfma.f32	s0, s12, s11
 8018b4c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8018b50:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8018c30 <__ieee754_rem_pio2f+0x254>
 8018b54:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018b58:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8018b5c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018b60:	ed84 7a00 	vstr	s14, [r4]
 8018b64:	e7bc      	b.n	8018ae0 <__ieee754_rem_pio2f+0x104>
 8018b66:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8018b6a:	d306      	bcc.n	8018b7a <__ieee754_rem_pio2f+0x19e>
 8018b6c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018b70:	edc0 7a01 	vstr	s15, [r0, #4]
 8018b74:	edc0 7a00 	vstr	s15, [r0]
 8018b78:	e73e      	b.n	80189f8 <__ieee754_rem_pio2f+0x1c>
 8018b7a:	15ea      	asrs	r2, r5, #23
 8018b7c:	3a86      	subs	r2, #134	@ 0x86
 8018b7e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8018b82:	ee07 3a90 	vmov	s15, r3
 8018b86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018b8a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8018c34 <__ieee754_rem_pio2f+0x258>
 8018b8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018b92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018b96:	ed8d 7a03 	vstr	s14, [sp, #12]
 8018b9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018b9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018ba2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018ba6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018baa:	ed8d 7a04 	vstr	s14, [sp, #16]
 8018bae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018bb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bba:	edcd 7a05 	vstr	s15, [sp, #20]
 8018bbe:	d11e      	bne.n	8018bfe <__ieee754_rem_pio2f+0x222>
 8018bc0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bc8:	bf0c      	ite	eq
 8018bca:	2301      	moveq	r3, #1
 8018bcc:	2302      	movne	r3, #2
 8018bce:	491a      	ldr	r1, [pc, #104]	@ (8018c38 <__ieee754_rem_pio2f+0x25c>)
 8018bd0:	9101      	str	r1, [sp, #4]
 8018bd2:	2102      	movs	r1, #2
 8018bd4:	9100      	str	r1, [sp, #0]
 8018bd6:	a803      	add	r0, sp, #12
 8018bd8:	4621      	mov	r1, r4
 8018bda:	f000 f8e1 	bl	8018da0 <__kernel_rem_pio2f>
 8018bde:	2e00      	cmp	r6, #0
 8018be0:	f6bf af2f 	bge.w	8018a42 <__ieee754_rem_pio2f+0x66>
 8018be4:	edd4 7a00 	vldr	s15, [r4]
 8018be8:	eef1 7a67 	vneg.f32	s15, s15
 8018bec:	edc4 7a00 	vstr	s15, [r4]
 8018bf0:	edd4 7a01 	vldr	s15, [r4, #4]
 8018bf4:	eef1 7a67 	vneg.f32	s15, s15
 8018bf8:	edc4 7a01 	vstr	s15, [r4, #4]
 8018bfc:	e782      	b.n	8018b04 <__ieee754_rem_pio2f+0x128>
 8018bfe:	2303      	movs	r3, #3
 8018c00:	e7e5      	b.n	8018bce <__ieee754_rem_pio2f+0x1f2>
 8018c02:	bf00      	nop
 8018c04:	3f490fd8 	.word	0x3f490fd8
 8018c08:	4016cbe3 	.word	0x4016cbe3
 8018c0c:	3fc90f80 	.word	0x3fc90f80
 8018c10:	3fc90fd0 	.word	0x3fc90fd0
 8018c14:	37354400 	.word	0x37354400
 8018c18:	37354443 	.word	0x37354443
 8018c1c:	2e85a308 	.word	0x2e85a308
 8018c20:	43490f80 	.word	0x43490f80
 8018c24:	3f22f984 	.word	0x3f22f984
 8018c28:	0801f350 	.word	0x0801f350
 8018c2c:	2e85a300 	.word	0x2e85a300
 8018c30:	248d3132 	.word	0x248d3132
 8018c34:	43800000 	.word	0x43800000
 8018c38:	0801f3d0 	.word	0x0801f3d0

08018c3c <hypotf>:
 8018c3c:	b508      	push	{r3, lr}
 8018c3e:	ed2d 8b04 	vpush	{d8-d9}
 8018c42:	eeb0 9a40 	vmov.f32	s18, s0
 8018c46:	eef0 8a60 	vmov.f32	s17, s1
 8018c4a:	f000 fb1b 	bl	8019284 <__ieee754_hypotf>
 8018c4e:	eeb0 8a40 	vmov.f32	s16, s0
 8018c52:	f7ff f907 	bl	8017e64 <finitef>
 8018c56:	b978      	cbnz	r0, 8018c78 <hypotf+0x3c>
 8018c58:	eeb0 0a49 	vmov.f32	s0, s18
 8018c5c:	f7ff f902 	bl	8017e64 <finitef>
 8018c60:	b150      	cbz	r0, 8018c78 <hypotf+0x3c>
 8018c62:	eeb0 0a68 	vmov.f32	s0, s17
 8018c66:	f7ff f8fd 	bl	8017e64 <finitef>
 8018c6a:	b128      	cbz	r0, 8018c78 <hypotf+0x3c>
 8018c6c:	f7fc ffaa 	bl	8015bc4 <__errno>
 8018c70:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8018c84 <hypotf+0x48>
 8018c74:	2322      	movs	r3, #34	@ 0x22
 8018c76:	6003      	str	r3, [r0, #0]
 8018c78:	eeb0 0a48 	vmov.f32	s0, s16
 8018c7c:	ecbd 8b04 	vpop	{d8-d9}
 8018c80:	bd08      	pop	{r3, pc}
 8018c82:	bf00      	nop
 8018c84:	7f800000 	.word	0x7f800000

08018c88 <scalbnf>:
 8018c88:	ee10 3a10 	vmov	r3, s0
 8018c8c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8018c90:	d02b      	beq.n	8018cea <scalbnf+0x62>
 8018c92:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8018c96:	d302      	bcc.n	8018c9e <scalbnf+0x16>
 8018c98:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018c9c:	4770      	bx	lr
 8018c9e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8018ca2:	d123      	bne.n	8018cec <scalbnf+0x64>
 8018ca4:	4b24      	ldr	r3, [pc, #144]	@ (8018d38 <scalbnf+0xb0>)
 8018ca6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8018d3c <scalbnf+0xb4>
 8018caa:	4298      	cmp	r0, r3
 8018cac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018cb0:	db17      	blt.n	8018ce2 <scalbnf+0x5a>
 8018cb2:	ee10 3a10 	vmov	r3, s0
 8018cb6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018cba:	3a19      	subs	r2, #25
 8018cbc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8018cc0:	4288      	cmp	r0, r1
 8018cc2:	dd15      	ble.n	8018cf0 <scalbnf+0x68>
 8018cc4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8018d40 <scalbnf+0xb8>
 8018cc8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8018d44 <scalbnf+0xbc>
 8018ccc:	ee10 3a10 	vmov	r3, s0
 8018cd0:	eeb0 7a67 	vmov.f32	s14, s15
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	bfb8      	it	lt
 8018cd8:	eef0 7a66 	vmovlt.f32	s15, s13
 8018cdc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018ce0:	4770      	bx	lr
 8018ce2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018d48 <scalbnf+0xc0>
 8018ce6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018cea:	4770      	bx	lr
 8018cec:	0dd2      	lsrs	r2, r2, #23
 8018cee:	e7e5      	b.n	8018cbc <scalbnf+0x34>
 8018cf0:	4410      	add	r0, r2
 8018cf2:	28fe      	cmp	r0, #254	@ 0xfe
 8018cf4:	dce6      	bgt.n	8018cc4 <scalbnf+0x3c>
 8018cf6:	2800      	cmp	r0, #0
 8018cf8:	dd06      	ble.n	8018d08 <scalbnf+0x80>
 8018cfa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018cfe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018d02:	ee00 3a10 	vmov	s0, r3
 8018d06:	4770      	bx	lr
 8018d08:	f110 0f16 	cmn.w	r0, #22
 8018d0c:	da09      	bge.n	8018d22 <scalbnf+0x9a>
 8018d0e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8018d48 <scalbnf+0xc0>
 8018d12:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8018d4c <scalbnf+0xc4>
 8018d16:	ee10 3a10 	vmov	r3, s0
 8018d1a:	eeb0 7a67 	vmov.f32	s14, s15
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	e7d9      	b.n	8018cd6 <scalbnf+0x4e>
 8018d22:	3019      	adds	r0, #25
 8018d24:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018d28:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018d2c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8018d50 <scalbnf+0xc8>
 8018d30:	ee07 3a90 	vmov	s15, r3
 8018d34:	e7d7      	b.n	8018ce6 <scalbnf+0x5e>
 8018d36:	bf00      	nop
 8018d38:	ffff3cb0 	.word	0xffff3cb0
 8018d3c:	4c000000 	.word	0x4c000000
 8018d40:	7149f2ca 	.word	0x7149f2ca
 8018d44:	f149f2ca 	.word	0xf149f2ca
 8018d48:	0da24260 	.word	0x0da24260
 8018d4c:	8da24260 	.word	0x8da24260
 8018d50:	33000000 	.word	0x33000000

08018d54 <with_errnof>:
 8018d54:	b510      	push	{r4, lr}
 8018d56:	ed2d 8b02 	vpush	{d8}
 8018d5a:	eeb0 8a40 	vmov.f32	s16, s0
 8018d5e:	4604      	mov	r4, r0
 8018d60:	f7fc ff30 	bl	8015bc4 <__errno>
 8018d64:	eeb0 0a48 	vmov.f32	s0, s16
 8018d68:	ecbd 8b02 	vpop	{d8}
 8018d6c:	6004      	str	r4, [r0, #0]
 8018d6e:	bd10      	pop	{r4, pc}

08018d70 <xflowf>:
 8018d70:	b130      	cbz	r0, 8018d80 <xflowf+0x10>
 8018d72:	eef1 7a40 	vneg.f32	s15, s0
 8018d76:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018d7a:	2022      	movs	r0, #34	@ 0x22
 8018d7c:	f7ff bfea 	b.w	8018d54 <with_errnof>
 8018d80:	eef0 7a40 	vmov.f32	s15, s0
 8018d84:	e7f7      	b.n	8018d76 <xflowf+0x6>
	...

08018d88 <__math_uflowf>:
 8018d88:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018d90 <__math_uflowf+0x8>
 8018d8c:	f7ff bff0 	b.w	8018d70 <xflowf>
 8018d90:	10000000 	.word	0x10000000

08018d94 <__math_oflowf>:
 8018d94:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018d9c <__math_oflowf+0x8>
 8018d98:	f7ff bfea 	b.w	8018d70 <xflowf>
 8018d9c:	70000000 	.word	0x70000000

08018da0 <__kernel_rem_pio2f>:
 8018da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018da4:	ed2d 8b04 	vpush	{d8-d9}
 8018da8:	b0d9      	sub	sp, #356	@ 0x164
 8018daa:	4690      	mov	r8, r2
 8018dac:	9001      	str	r0, [sp, #4]
 8018dae:	4ab9      	ldr	r2, [pc, #740]	@ (8019094 <__kernel_rem_pio2f+0x2f4>)
 8018db0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8018db2:	f118 0f04 	cmn.w	r8, #4
 8018db6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8018dba:	460f      	mov	r7, r1
 8018dbc:	f103 3bff 	add.w	fp, r3, #4294967295
 8018dc0:	db27      	blt.n	8018e12 <__kernel_rem_pio2f+0x72>
 8018dc2:	f1b8 0203 	subs.w	r2, r8, #3
 8018dc6:	bf48      	it	mi
 8018dc8:	f108 0204 	addmi.w	r2, r8, #4
 8018dcc:	10d2      	asrs	r2, r2, #3
 8018dce:	1c55      	adds	r5, r2, #1
 8018dd0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8018dd2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80190a4 <__kernel_rem_pio2f+0x304>
 8018dd6:	00e8      	lsls	r0, r5, #3
 8018dd8:	eba2 060b 	sub.w	r6, r2, fp
 8018ddc:	9002      	str	r0, [sp, #8]
 8018dde:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8018de2:	eb0a 0c0b 	add.w	ip, sl, fp
 8018de6:	ac1c      	add	r4, sp, #112	@ 0x70
 8018de8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8018dec:	2000      	movs	r0, #0
 8018dee:	4560      	cmp	r0, ip
 8018df0:	dd11      	ble.n	8018e16 <__kernel_rem_pio2f+0x76>
 8018df2:	a91c      	add	r1, sp, #112	@ 0x70
 8018df4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8018df8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8018dfc:	f04f 0c00 	mov.w	ip, #0
 8018e00:	45d4      	cmp	ip, sl
 8018e02:	dc27      	bgt.n	8018e54 <__kernel_rem_pio2f+0xb4>
 8018e04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018e08:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80190a4 <__kernel_rem_pio2f+0x304>
 8018e0c:	4606      	mov	r6, r0
 8018e0e:	2400      	movs	r4, #0
 8018e10:	e016      	b.n	8018e40 <__kernel_rem_pio2f+0xa0>
 8018e12:	2200      	movs	r2, #0
 8018e14:	e7db      	b.n	8018dce <__kernel_rem_pio2f+0x2e>
 8018e16:	42c6      	cmn	r6, r0
 8018e18:	bf5d      	ittte	pl
 8018e1a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8018e1e:	ee07 1a90 	vmovpl	s15, r1
 8018e22:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8018e26:	eef0 7a47 	vmovmi.f32	s15, s14
 8018e2a:	ece4 7a01 	vstmia	r4!, {s15}
 8018e2e:	3001      	adds	r0, #1
 8018e30:	e7dd      	b.n	8018dee <__kernel_rem_pio2f+0x4e>
 8018e32:	ecfe 6a01 	vldmia	lr!, {s13}
 8018e36:	ed96 7a00 	vldr	s14, [r6]
 8018e3a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018e3e:	3401      	adds	r4, #1
 8018e40:	455c      	cmp	r4, fp
 8018e42:	f1a6 0604 	sub.w	r6, r6, #4
 8018e46:	ddf4      	ble.n	8018e32 <__kernel_rem_pio2f+0x92>
 8018e48:	ece9 7a01 	vstmia	r9!, {s15}
 8018e4c:	f10c 0c01 	add.w	ip, ip, #1
 8018e50:	3004      	adds	r0, #4
 8018e52:	e7d5      	b.n	8018e00 <__kernel_rem_pio2f+0x60>
 8018e54:	a908      	add	r1, sp, #32
 8018e56:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018e5a:	9104      	str	r1, [sp, #16]
 8018e5c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8018e5e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80190a0 <__kernel_rem_pio2f+0x300>
 8018e62:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801909c <__kernel_rem_pio2f+0x2fc>
 8018e66:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8018e6a:	9203      	str	r2, [sp, #12]
 8018e6c:	4654      	mov	r4, sl
 8018e6e:	00a2      	lsls	r2, r4, #2
 8018e70:	9205      	str	r2, [sp, #20]
 8018e72:	aa58      	add	r2, sp, #352	@ 0x160
 8018e74:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8018e78:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8018e7c:	a944      	add	r1, sp, #272	@ 0x110
 8018e7e:	aa08      	add	r2, sp, #32
 8018e80:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8018e84:	4694      	mov	ip, r2
 8018e86:	4626      	mov	r6, r4
 8018e88:	2e00      	cmp	r6, #0
 8018e8a:	f1a0 0004 	sub.w	r0, r0, #4
 8018e8e:	dc4c      	bgt.n	8018f2a <__kernel_rem_pio2f+0x18a>
 8018e90:	4628      	mov	r0, r5
 8018e92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018e96:	f7ff fef7 	bl	8018c88 <scalbnf>
 8018e9a:	eeb0 8a40 	vmov.f32	s16, s0
 8018e9e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8018ea2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8018ea6:	f7ff f89b 	bl	8017fe0 <floorf>
 8018eaa:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8018eae:	eea0 8a67 	vfms.f32	s16, s0, s15
 8018eb2:	2d00      	cmp	r5, #0
 8018eb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018eb8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8018ebc:	ee17 9a90 	vmov	r9, s15
 8018ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ec4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8018ec8:	dd41      	ble.n	8018f4e <__kernel_rem_pio2f+0x1ae>
 8018eca:	f104 3cff 	add.w	ip, r4, #4294967295
 8018ece:	a908      	add	r1, sp, #32
 8018ed0:	f1c5 0e08 	rsb	lr, r5, #8
 8018ed4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8018ed8:	fa46 f00e 	asr.w	r0, r6, lr
 8018edc:	4481      	add	r9, r0
 8018ede:	fa00 f00e 	lsl.w	r0, r0, lr
 8018ee2:	1a36      	subs	r6, r6, r0
 8018ee4:	f1c5 0007 	rsb	r0, r5, #7
 8018ee8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8018eec:	4106      	asrs	r6, r0
 8018eee:	2e00      	cmp	r6, #0
 8018ef0:	dd3c      	ble.n	8018f6c <__kernel_rem_pio2f+0x1cc>
 8018ef2:	f04f 0e00 	mov.w	lr, #0
 8018ef6:	f109 0901 	add.w	r9, r9, #1
 8018efa:	4670      	mov	r0, lr
 8018efc:	4574      	cmp	r4, lr
 8018efe:	dc68      	bgt.n	8018fd2 <__kernel_rem_pio2f+0x232>
 8018f00:	2d00      	cmp	r5, #0
 8018f02:	dd03      	ble.n	8018f0c <__kernel_rem_pio2f+0x16c>
 8018f04:	2d01      	cmp	r5, #1
 8018f06:	d074      	beq.n	8018ff2 <__kernel_rem_pio2f+0x252>
 8018f08:	2d02      	cmp	r5, #2
 8018f0a:	d07d      	beq.n	8019008 <__kernel_rem_pio2f+0x268>
 8018f0c:	2e02      	cmp	r6, #2
 8018f0e:	d12d      	bne.n	8018f6c <__kernel_rem_pio2f+0x1cc>
 8018f10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018f14:	ee30 8a48 	vsub.f32	s16, s0, s16
 8018f18:	b340      	cbz	r0, 8018f6c <__kernel_rem_pio2f+0x1cc>
 8018f1a:	4628      	mov	r0, r5
 8018f1c:	9306      	str	r3, [sp, #24]
 8018f1e:	f7ff feb3 	bl	8018c88 <scalbnf>
 8018f22:	9b06      	ldr	r3, [sp, #24]
 8018f24:	ee38 8a40 	vsub.f32	s16, s16, s0
 8018f28:	e020      	b.n	8018f6c <__kernel_rem_pio2f+0x1cc>
 8018f2a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8018f2e:	3e01      	subs	r6, #1
 8018f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f38:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8018f3c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018f40:	ecac 0a01 	vstmia	ip!, {s0}
 8018f44:	ed90 0a00 	vldr	s0, [r0]
 8018f48:	ee37 0a80 	vadd.f32	s0, s15, s0
 8018f4c:	e79c      	b.n	8018e88 <__kernel_rem_pio2f+0xe8>
 8018f4e:	d105      	bne.n	8018f5c <__kernel_rem_pio2f+0x1bc>
 8018f50:	1e60      	subs	r0, r4, #1
 8018f52:	a908      	add	r1, sp, #32
 8018f54:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8018f58:	11f6      	asrs	r6, r6, #7
 8018f5a:	e7c8      	b.n	8018eee <__kernel_rem_pio2f+0x14e>
 8018f5c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018f60:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f68:	da31      	bge.n	8018fce <__kernel_rem_pio2f+0x22e>
 8018f6a:	2600      	movs	r6, #0
 8018f6c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f74:	f040 8098 	bne.w	80190a8 <__kernel_rem_pio2f+0x308>
 8018f78:	1e60      	subs	r0, r4, #1
 8018f7a:	2200      	movs	r2, #0
 8018f7c:	4550      	cmp	r0, sl
 8018f7e:	da4b      	bge.n	8019018 <__kernel_rem_pio2f+0x278>
 8018f80:	2a00      	cmp	r2, #0
 8018f82:	d065      	beq.n	8019050 <__kernel_rem_pio2f+0x2b0>
 8018f84:	3c01      	subs	r4, #1
 8018f86:	ab08      	add	r3, sp, #32
 8018f88:	3d08      	subs	r5, #8
 8018f8a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d0f8      	beq.n	8018f84 <__kernel_rem_pio2f+0x1e4>
 8018f92:	4628      	mov	r0, r5
 8018f94:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018f98:	f7ff fe76 	bl	8018c88 <scalbnf>
 8018f9c:	1c63      	adds	r3, r4, #1
 8018f9e:	aa44      	add	r2, sp, #272	@ 0x110
 8018fa0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80190a0 <__kernel_rem_pio2f+0x300>
 8018fa4:	0099      	lsls	r1, r3, #2
 8018fa6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8018faa:	4623      	mov	r3, r4
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	f280 80a9 	bge.w	8019104 <__kernel_rem_pio2f+0x364>
 8018fb2:	4623      	mov	r3, r4
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	f2c0 80c7 	blt.w	8019148 <__kernel_rem_pio2f+0x3a8>
 8018fba:	aa44      	add	r2, sp, #272	@ 0x110
 8018fbc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8018fc0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8019098 <__kernel_rem_pio2f+0x2f8>
 8018fc4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80190a4 <__kernel_rem_pio2f+0x304>
 8018fc8:	2000      	movs	r0, #0
 8018fca:	1ae2      	subs	r2, r4, r3
 8018fcc:	e0b1      	b.n	8019132 <__kernel_rem_pio2f+0x392>
 8018fce:	2602      	movs	r6, #2
 8018fd0:	e78f      	b.n	8018ef2 <__kernel_rem_pio2f+0x152>
 8018fd2:	f852 1b04 	ldr.w	r1, [r2], #4
 8018fd6:	b948      	cbnz	r0, 8018fec <__kernel_rem_pio2f+0x24c>
 8018fd8:	b121      	cbz	r1, 8018fe4 <__kernel_rem_pio2f+0x244>
 8018fda:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8018fde:	f842 1c04 	str.w	r1, [r2, #-4]
 8018fe2:	2101      	movs	r1, #1
 8018fe4:	f10e 0e01 	add.w	lr, lr, #1
 8018fe8:	4608      	mov	r0, r1
 8018fea:	e787      	b.n	8018efc <__kernel_rem_pio2f+0x15c>
 8018fec:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8018ff0:	e7f5      	b.n	8018fde <__kernel_rem_pio2f+0x23e>
 8018ff2:	f104 3cff 	add.w	ip, r4, #4294967295
 8018ff6:	aa08      	add	r2, sp, #32
 8018ff8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8018ffc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019000:	a908      	add	r1, sp, #32
 8019002:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019006:	e781      	b.n	8018f0c <__kernel_rem_pio2f+0x16c>
 8019008:	f104 3cff 	add.w	ip, r4, #4294967295
 801900c:	aa08      	add	r2, sp, #32
 801900e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019012:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019016:	e7f3      	b.n	8019000 <__kernel_rem_pio2f+0x260>
 8019018:	a908      	add	r1, sp, #32
 801901a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801901e:	3801      	subs	r0, #1
 8019020:	430a      	orrs	r2, r1
 8019022:	e7ab      	b.n	8018f7c <__kernel_rem_pio2f+0x1dc>
 8019024:	3201      	adds	r2, #1
 8019026:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801902a:	2e00      	cmp	r6, #0
 801902c:	d0fa      	beq.n	8019024 <__kernel_rem_pio2f+0x284>
 801902e:	9905      	ldr	r1, [sp, #20]
 8019030:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8019034:	eb0d 0001 	add.w	r0, sp, r1
 8019038:	18e6      	adds	r6, r4, r3
 801903a:	a91c      	add	r1, sp, #112	@ 0x70
 801903c:	f104 0c01 	add.w	ip, r4, #1
 8019040:	384c      	subs	r0, #76	@ 0x4c
 8019042:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8019046:	4422      	add	r2, r4
 8019048:	4562      	cmp	r2, ip
 801904a:	da04      	bge.n	8019056 <__kernel_rem_pio2f+0x2b6>
 801904c:	4614      	mov	r4, r2
 801904e:	e70e      	b.n	8018e6e <__kernel_rem_pio2f+0xce>
 8019050:	9804      	ldr	r0, [sp, #16]
 8019052:	2201      	movs	r2, #1
 8019054:	e7e7      	b.n	8019026 <__kernel_rem_pio2f+0x286>
 8019056:	9903      	ldr	r1, [sp, #12]
 8019058:	f8dd e004 	ldr.w	lr, [sp, #4]
 801905c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8019060:	9105      	str	r1, [sp, #20]
 8019062:	ee07 1a90 	vmov	s15, r1
 8019066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801906a:	2400      	movs	r4, #0
 801906c:	ece6 7a01 	vstmia	r6!, {s15}
 8019070:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80190a4 <__kernel_rem_pio2f+0x304>
 8019074:	46b1      	mov	r9, r6
 8019076:	455c      	cmp	r4, fp
 8019078:	dd04      	ble.n	8019084 <__kernel_rem_pio2f+0x2e4>
 801907a:	ece0 7a01 	vstmia	r0!, {s15}
 801907e:	f10c 0c01 	add.w	ip, ip, #1
 8019082:	e7e1      	b.n	8019048 <__kernel_rem_pio2f+0x2a8>
 8019084:	ecfe 6a01 	vldmia	lr!, {s13}
 8019088:	ed39 7a01 	vldmdb	r9!, {s14}
 801908c:	3401      	adds	r4, #1
 801908e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019092:	e7f0      	b.n	8019076 <__kernel_rem_pio2f+0x2d6>
 8019094:	0801f714 	.word	0x0801f714
 8019098:	0801f6e8 	.word	0x0801f6e8
 801909c:	43800000 	.word	0x43800000
 80190a0:	3b800000 	.word	0x3b800000
 80190a4:	00000000 	.word	0x00000000
 80190a8:	9b02      	ldr	r3, [sp, #8]
 80190aa:	eeb0 0a48 	vmov.f32	s0, s16
 80190ae:	eba3 0008 	sub.w	r0, r3, r8
 80190b2:	f7ff fde9 	bl	8018c88 <scalbnf>
 80190b6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801909c <__kernel_rem_pio2f+0x2fc>
 80190ba:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80190be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190c2:	db19      	blt.n	80190f8 <__kernel_rem_pio2f+0x358>
 80190c4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80190a0 <__kernel_rem_pio2f+0x300>
 80190c8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80190cc:	aa08      	add	r2, sp, #32
 80190ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80190d2:	3508      	adds	r5, #8
 80190d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80190d8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80190dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80190e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80190e4:	ee10 3a10 	vmov	r3, s0
 80190e8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80190ec:	ee17 3a90 	vmov	r3, s15
 80190f0:	3401      	adds	r4, #1
 80190f2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80190f6:	e74c      	b.n	8018f92 <__kernel_rem_pio2f+0x1f2>
 80190f8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80190fc:	aa08      	add	r2, sp, #32
 80190fe:	ee10 3a10 	vmov	r3, s0
 8019102:	e7f6      	b.n	80190f2 <__kernel_rem_pio2f+0x352>
 8019104:	a808      	add	r0, sp, #32
 8019106:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801910a:	9001      	str	r0, [sp, #4]
 801910c:	ee07 0a90 	vmov	s15, r0
 8019110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019114:	3b01      	subs	r3, #1
 8019116:	ee67 7a80 	vmul.f32	s15, s15, s0
 801911a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801911e:	ed62 7a01 	vstmdb	r2!, {s15}
 8019122:	e743      	b.n	8018fac <__kernel_rem_pio2f+0x20c>
 8019124:	ecfc 6a01 	vldmia	ip!, {s13}
 8019128:	ecb5 7a01 	vldmia	r5!, {s14}
 801912c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019130:	3001      	adds	r0, #1
 8019132:	4550      	cmp	r0, sl
 8019134:	dc01      	bgt.n	801913a <__kernel_rem_pio2f+0x39a>
 8019136:	4282      	cmp	r2, r0
 8019138:	daf4      	bge.n	8019124 <__kernel_rem_pio2f+0x384>
 801913a:	a858      	add	r0, sp, #352	@ 0x160
 801913c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8019140:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8019144:	3b01      	subs	r3, #1
 8019146:	e735      	b.n	8018fb4 <__kernel_rem_pio2f+0x214>
 8019148:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801914a:	2b02      	cmp	r3, #2
 801914c:	dc09      	bgt.n	8019162 <__kernel_rem_pio2f+0x3c2>
 801914e:	2b00      	cmp	r3, #0
 8019150:	dc2b      	bgt.n	80191aa <__kernel_rem_pio2f+0x40a>
 8019152:	d044      	beq.n	80191de <__kernel_rem_pio2f+0x43e>
 8019154:	f009 0007 	and.w	r0, r9, #7
 8019158:	b059      	add	sp, #356	@ 0x164
 801915a:	ecbd 8b04 	vpop	{d8-d9}
 801915e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019162:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019164:	2b03      	cmp	r3, #3
 8019166:	d1f5      	bne.n	8019154 <__kernel_rem_pio2f+0x3b4>
 8019168:	aa30      	add	r2, sp, #192	@ 0xc0
 801916a:	1f0b      	subs	r3, r1, #4
 801916c:	4413      	add	r3, r2
 801916e:	461a      	mov	r2, r3
 8019170:	4620      	mov	r0, r4
 8019172:	2800      	cmp	r0, #0
 8019174:	f1a2 0204 	sub.w	r2, r2, #4
 8019178:	dc52      	bgt.n	8019220 <__kernel_rem_pio2f+0x480>
 801917a:	4622      	mov	r2, r4
 801917c:	2a01      	cmp	r2, #1
 801917e:	f1a3 0304 	sub.w	r3, r3, #4
 8019182:	dc5d      	bgt.n	8019240 <__kernel_rem_pio2f+0x4a0>
 8019184:	ab30      	add	r3, sp, #192	@ 0xc0
 8019186:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80190a4 <__kernel_rem_pio2f+0x304>
 801918a:	440b      	add	r3, r1
 801918c:	2c01      	cmp	r4, #1
 801918e:	dc67      	bgt.n	8019260 <__kernel_rem_pio2f+0x4c0>
 8019190:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019194:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8019198:	2e00      	cmp	r6, #0
 801919a:	d167      	bne.n	801926c <__kernel_rem_pio2f+0x4cc>
 801919c:	edc7 6a00 	vstr	s13, [r7]
 80191a0:	ed87 7a01 	vstr	s14, [r7, #4]
 80191a4:	edc7 7a02 	vstr	s15, [r7, #8]
 80191a8:	e7d4      	b.n	8019154 <__kernel_rem_pio2f+0x3b4>
 80191aa:	ab30      	add	r3, sp, #192	@ 0xc0
 80191ac:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80190a4 <__kernel_rem_pio2f+0x304>
 80191b0:	440b      	add	r3, r1
 80191b2:	4622      	mov	r2, r4
 80191b4:	2a00      	cmp	r2, #0
 80191b6:	da24      	bge.n	8019202 <__kernel_rem_pio2f+0x462>
 80191b8:	b34e      	cbz	r6, 801920e <__kernel_rem_pio2f+0x46e>
 80191ba:	eef1 7a47 	vneg.f32	s15, s14
 80191be:	edc7 7a00 	vstr	s15, [r7]
 80191c2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80191c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80191ca:	aa31      	add	r2, sp, #196	@ 0xc4
 80191cc:	2301      	movs	r3, #1
 80191ce:	429c      	cmp	r4, r3
 80191d0:	da20      	bge.n	8019214 <__kernel_rem_pio2f+0x474>
 80191d2:	b10e      	cbz	r6, 80191d8 <__kernel_rem_pio2f+0x438>
 80191d4:	eef1 7a67 	vneg.f32	s15, s15
 80191d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80191dc:	e7ba      	b.n	8019154 <__kernel_rem_pio2f+0x3b4>
 80191de:	ab30      	add	r3, sp, #192	@ 0xc0
 80191e0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80190a4 <__kernel_rem_pio2f+0x304>
 80191e4:	440b      	add	r3, r1
 80191e6:	2c00      	cmp	r4, #0
 80191e8:	da05      	bge.n	80191f6 <__kernel_rem_pio2f+0x456>
 80191ea:	b10e      	cbz	r6, 80191f0 <__kernel_rem_pio2f+0x450>
 80191ec:	eef1 7a67 	vneg.f32	s15, s15
 80191f0:	edc7 7a00 	vstr	s15, [r7]
 80191f4:	e7ae      	b.n	8019154 <__kernel_rem_pio2f+0x3b4>
 80191f6:	ed33 7a01 	vldmdb	r3!, {s14}
 80191fa:	3c01      	subs	r4, #1
 80191fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019200:	e7f1      	b.n	80191e6 <__kernel_rem_pio2f+0x446>
 8019202:	ed73 7a01 	vldmdb	r3!, {s15}
 8019206:	3a01      	subs	r2, #1
 8019208:	ee37 7a27 	vadd.f32	s14, s14, s15
 801920c:	e7d2      	b.n	80191b4 <__kernel_rem_pio2f+0x414>
 801920e:	eef0 7a47 	vmov.f32	s15, s14
 8019212:	e7d4      	b.n	80191be <__kernel_rem_pio2f+0x41e>
 8019214:	ecb2 7a01 	vldmia	r2!, {s14}
 8019218:	3301      	adds	r3, #1
 801921a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801921e:	e7d6      	b.n	80191ce <__kernel_rem_pio2f+0x42e>
 8019220:	edd2 7a00 	vldr	s15, [r2]
 8019224:	edd2 6a01 	vldr	s13, [r2, #4]
 8019228:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801922c:	3801      	subs	r0, #1
 801922e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019232:	ed82 7a00 	vstr	s14, [r2]
 8019236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801923a:	edc2 7a01 	vstr	s15, [r2, #4]
 801923e:	e798      	b.n	8019172 <__kernel_rem_pio2f+0x3d2>
 8019240:	edd3 7a00 	vldr	s15, [r3]
 8019244:	edd3 6a01 	vldr	s13, [r3, #4]
 8019248:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801924c:	3a01      	subs	r2, #1
 801924e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019252:	ed83 7a00 	vstr	s14, [r3]
 8019256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801925a:	edc3 7a01 	vstr	s15, [r3, #4]
 801925e:	e78d      	b.n	801917c <__kernel_rem_pio2f+0x3dc>
 8019260:	ed33 7a01 	vldmdb	r3!, {s14}
 8019264:	3c01      	subs	r4, #1
 8019266:	ee77 7a87 	vadd.f32	s15, s15, s14
 801926a:	e78f      	b.n	801918c <__kernel_rem_pio2f+0x3ec>
 801926c:	eef1 6a66 	vneg.f32	s13, s13
 8019270:	eeb1 7a47 	vneg.f32	s14, s14
 8019274:	edc7 6a00 	vstr	s13, [r7]
 8019278:	ed87 7a01 	vstr	s14, [r7, #4]
 801927c:	eef1 7a67 	vneg.f32	s15, s15
 8019280:	e790      	b.n	80191a4 <__kernel_rem_pio2f+0x404>
 8019282:	bf00      	nop

08019284 <__ieee754_hypotf>:
 8019284:	ee10 3a10 	vmov	r3, s0
 8019288:	ee10 2a90 	vmov	r2, s1
 801928c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019290:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8019294:	4293      	cmp	r3, r2
 8019296:	bfbe      	ittt	lt
 8019298:	4619      	movlt	r1, r3
 801929a:	4613      	movlt	r3, r2
 801929c:	460a      	movlt	r2, r1
 801929e:	1a99      	subs	r1, r3, r2
 80192a0:	f1b1 6f70 	cmp.w	r1, #251658240	@ 0xf000000
 80192a4:	b510      	push	{r4, lr}
 80192a6:	ee00 3a10 	vmov	s0, r3
 80192aa:	ee06 2a90 	vmov	s13, r2
 80192ae:	dd02      	ble.n	80192b6 <__ieee754_hypotf+0x32>
 80192b0:	ee30 0a26 	vadd.f32	s0, s0, s13
 80192b4:	bd10      	pop	{r4, pc}
 80192b6:	f1b3 4fb1 	cmp.w	r3, #1484783616	@ 0x58800000
 80192ba:	dd48      	ble.n	801934e <__ieee754_hypotf+0xca>
 80192bc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80192c0:	db0c      	blt.n	80192dc <__ieee754_hypotf+0x58>
 80192c2:	bf14      	ite	ne
 80192c4:	ee30 0a26 	vaddne.f32	s0, s0, s13
 80192c8:	ed9f 0a33 	vldreq	s0, [pc, #204]	@ 8019398 <__ieee754_hypotf+0x114>
 80192cc:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8019398 <__ieee754_hypotf+0x114>
 80192d0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80192d4:	bf08      	it	eq
 80192d6:	eeb0 0a67 	vmoveq.f32	s0, s15
 80192da:	e7eb      	b.n	80192b4 <__ieee754_hypotf+0x30>
 80192dc:	f103 435e 	add.w	r3, r3, #3724541952	@ 0xde000000
 80192e0:	f102 425e 	add.w	r2, r2, #3724541952	@ 0xde000000
 80192e4:	ee00 3a10 	vmov	s0, r3
 80192e8:	ee06 2a90 	vmov	s13, r2
 80192ec:	2444      	movs	r4, #68	@ 0x44
 80192ee:	f1b2 5f1a 	cmp.w	r2, #645922816	@ 0x26800000
 80192f2:	da0b      	bge.n	801930c <__ieee754_hypotf+0x88>
 80192f4:	2a00      	cmp	r2, #0
 80192f6:	d0dd      	beq.n	80192b4 <__ieee754_hypotf+0x30>
 80192f8:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 80192fc:	da29      	bge.n	8019352 <__ieee754_hypotf+0xce>
 80192fe:	eddf 7a27 	vldr	s15, [pc, #156]	@ 801939c <__ieee754_hypotf+0x118>
 8019302:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8019306:	ee20 0a27 	vmul.f32	s0, s0, s15
 801930a:	3c7e      	subs	r4, #126	@ 0x7e
 801930c:	ee30 6a66 	vsub.f32	s12, s0, s13
 8019310:	4923      	ldr	r1, [pc, #140]	@ (80193a0 <__ieee754_hypotf+0x11c>)
 8019312:	eef4 6ac6 	vcmpe.f32	s13, s12
 8019316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801931a:	d524      	bpl.n	8019366 <__ieee754_hypotf+0xe2>
 801931c:	400b      	ands	r3, r1
 801931e:	ee07 3a90 	vmov	s15, r3
 8019322:	ee30 7a27 	vadd.f32	s14, s0, s15
 8019326:	ee30 0a67 	vsub.f32	s0, s0, s15
 801932a:	ee27 0a00 	vmul.f32	s0, s14, s0
 801932e:	eea6 0aa6 	vfma.f32	s0, s13, s13
 8019332:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8019336:	f7fe fe4f 	bl	8017fd8 <__ieee754_sqrtf>
 801933a:	2c00      	cmp	r4, #0
 801933c:	d0ba      	beq.n	80192b4 <__ieee754_hypotf+0x30>
 801933e:	05e4      	lsls	r4, r4, #23
 8019340:	f104 547e 	add.w	r4, r4, #1065353216	@ 0x3f800000
 8019344:	ee07 4a90 	vmov	s15, r4
 8019348:	ee20 0a27 	vmul.f32	s0, s0, s15
 801934c:	e7b2      	b.n	80192b4 <__ieee754_hypotf+0x30>
 801934e:	2400      	movs	r4, #0
 8019350:	e7cd      	b.n	80192ee <__ieee754_hypotf+0x6a>
 8019352:	f103 5308 	add.w	r3, r3, #570425344	@ 0x22000000
 8019356:	f102 5208 	add.w	r2, r2, #570425344	@ 0x22000000
 801935a:	ee00 3a10 	vmov	s0, r3
 801935e:	ee06 2a90 	vmov	s13, r2
 8019362:	3c44      	subs	r4, #68	@ 0x44
 8019364:	e7d2      	b.n	801930c <__ieee754_hypotf+0x88>
 8019366:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 801936a:	400b      	ands	r3, r1
 801936c:	ee07 3a90 	vmov	s15, r3
 8019370:	eef0 4a00 	vmov.f32	s9, #0	@ 0x40000000  2.0
 8019374:	eeb0 5a67 	vmov.f32	s10, s15
 8019378:	ee90 5a24 	vfnms.f32	s10, s0, s9
 801937c:	400a      	ands	r2, r1
 801937e:	ee07 2a10 	vmov	s14, r2
 8019382:	ee26 0a85 	vmul.f32	s0, s13, s10
 8019386:	ee76 5ac7 	vsub.f32	s11, s13, s14
 801938a:	eea5 0aa7 	vfma.f32	s0, s11, s15
 801938e:	eea6 0a06 	vfma.f32	s0, s12, s12
 8019392:	eea7 0a27 	vfma.f32	s0, s14, s15
 8019396:	e7ce      	b.n	8019336 <__ieee754_hypotf+0xb2>
 8019398:	7f800000 	.word	0x7f800000
 801939c:	7e800000 	.word	0x7e800000
 80193a0:	fffff000 	.word	0xfffff000

080193a4 <__ieee754_logf>:
 80193a4:	ee10 3a10 	vmov	r3, s0
 80193a8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80193ac:	d106      	bne.n	80193bc <__ieee754_logf+0x18>
 80193ae:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8019548 <__ieee754_logf+0x1a4>
 80193b2:	eddf 7a66 	vldr	s15, [pc, #408]	@ 801954c <__ieee754_logf+0x1a8>
 80193b6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80193ba:	4770      	bx	lr
 80193bc:	2b00      	cmp	r3, #0
 80193be:	461a      	mov	r2, r3
 80193c0:	da02      	bge.n	80193c8 <__ieee754_logf+0x24>
 80193c2:	ee30 7a40 	vsub.f32	s14, s0, s0
 80193c6:	e7f4      	b.n	80193b2 <__ieee754_logf+0xe>
 80193c8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80193cc:	db02      	blt.n	80193d4 <__ieee754_logf+0x30>
 80193ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 80193d2:	4770      	bx	lr
 80193d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80193d8:	bfb8      	it	lt
 80193da:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8019550 <__ieee754_logf+0x1ac>
 80193de:	485d      	ldr	r0, [pc, #372]	@ (8019554 <__ieee754_logf+0x1b0>)
 80193e0:	bfbe      	ittt	lt
 80193e2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80193e6:	f06f 0118 	mvnlt.w	r1, #24
 80193ea:	ee17 2a90 	vmovlt	r2, s15
 80193ee:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80193f2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80193f6:	4410      	add	r0, r2
 80193f8:	bfa8      	it	ge
 80193fa:	2100      	movge	r1, #0
 80193fc:	3b7f      	subs	r3, #127	@ 0x7f
 80193fe:	440b      	add	r3, r1
 8019400:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8019404:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8019408:	4311      	orrs	r1, r2
 801940a:	ee00 1a10 	vmov	s0, r1
 801940e:	4952      	ldr	r1, [pc, #328]	@ (8019558 <__ieee754_logf+0x1b4>)
 8019410:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8019414:	f102 000f 	add.w	r0, r2, #15
 8019418:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801941c:	4001      	ands	r1, r0
 801941e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019422:	bb89      	cbnz	r1, 8019488 <__ieee754_logf+0xe4>
 8019424:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801942c:	d10f      	bne.n	801944e <__ieee754_logf+0xaa>
 801942e:	2b00      	cmp	r3, #0
 8019430:	f000 8087 	beq.w	8019542 <__ieee754_logf+0x19e>
 8019434:	ee07 3a90 	vmov	s15, r3
 8019438:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 801955c <__ieee754_logf+0x1b8>
 801943c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8019560 <__ieee754_logf+0x1bc>
 8019440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019444:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019448:	eea7 0a87 	vfma.f32	s0, s15, s14
 801944c:	4770      	bx	lr
 801944e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8019564 <__ieee754_logf+0x1c0>
 8019452:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019456:	eee0 7a66 	vfms.f32	s15, s0, s13
 801945a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801945e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019462:	b913      	cbnz	r3, 801946a <__ieee754_logf+0xc6>
 8019464:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019468:	4770      	bx	lr
 801946a:	ee07 3a90 	vmov	s15, r3
 801946e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801955c <__ieee754_logf+0x1b8>
 8019472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019476:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801947a:	ee37 0a40 	vsub.f32	s0, s14, s0
 801947e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8019560 <__ieee754_logf+0x1bc>
 8019482:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8019486:	4770      	bx	lr
 8019488:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801948c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8019490:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8019568 <__ieee754_logf+0x1c4>
 8019494:	eddf 4a35 	vldr	s9, [pc, #212]	@ 801956c <__ieee754_logf+0x1c8>
 8019498:	4935      	ldr	r1, [pc, #212]	@ (8019570 <__ieee754_logf+0x1cc>)
 801949a:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801949e:	4411      	add	r1, r2
 80194a0:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80194a4:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80194a8:	430a      	orrs	r2, r1
 80194aa:	2a00      	cmp	r2, #0
 80194ac:	ee07 3a90 	vmov	s15, r3
 80194b0:	ee26 5a06 	vmul.f32	s10, s12, s12
 80194b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80194b8:	ee25 7a05 	vmul.f32	s14, s10, s10
 80194bc:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8019574 <__ieee754_logf+0x1d0>
 80194c0:	eee7 7a25 	vfma.f32	s15, s14, s11
 80194c4:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8019578 <__ieee754_logf+0x1d4>
 80194c8:	eee7 5a87 	vfma.f32	s11, s15, s14
 80194cc:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 801957c <__ieee754_logf+0x1d8>
 80194d0:	eee7 7a24 	vfma.f32	s15, s14, s9
 80194d4:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8019580 <__ieee754_logf+0x1dc>
 80194d8:	eee7 4a87 	vfma.f32	s9, s15, s14
 80194dc:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8019584 <__ieee754_logf+0x1e0>
 80194e0:	eee4 7a87 	vfma.f32	s15, s9, s14
 80194e4:	ee67 7a85 	vmul.f32	s15, s15, s10
 80194e8:	eee5 7a87 	vfma.f32	s15, s11, s14
 80194ec:	dd1a      	ble.n	8019524 <__ieee754_logf+0x180>
 80194ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80194f2:	ee20 7a07 	vmul.f32	s14, s0, s14
 80194f6:	ee27 7a00 	vmul.f32	s14, s14, s0
 80194fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80194fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019502:	b913      	cbnz	r3, 801950a <__ieee754_logf+0x166>
 8019504:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019508:	e7ac      	b.n	8019464 <__ieee754_logf+0xc0>
 801950a:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 801955c <__ieee754_logf+0x1b8>
 801950e:	eee6 7a86 	vfma.f32	s15, s13, s12
 8019512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019516:	ee37 0a40 	vsub.f32	s0, s14, s0
 801951a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8019560 <__ieee754_logf+0x1bc>
 801951e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8019522:	4770      	bx	lr
 8019524:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019528:	ee67 7a86 	vmul.f32	s15, s15, s12
 801952c:	b913      	cbnz	r3, 8019534 <__ieee754_logf+0x190>
 801952e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019532:	4770      	bx	lr
 8019534:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 801955c <__ieee754_logf+0x1b8>
 8019538:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801953c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019540:	e7eb      	b.n	801951a <__ieee754_logf+0x176>
 8019542:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 801954c <__ieee754_logf+0x1a8>
 8019546:	4770      	bx	lr
 8019548:	cc000000 	.word	0xcc000000
 801954c:	00000000 	.word	0x00000000
 8019550:	4c000000 	.word	0x4c000000
 8019554:	004afb20 	.word	0x004afb20
 8019558:	007ffff0 	.word	0x007ffff0
 801955c:	3717f7d1 	.word	0x3717f7d1
 8019560:	3f317180 	.word	0x3f317180
 8019564:	3eaaaaab 	.word	0x3eaaaaab
 8019568:	3e1cd04f 	.word	0x3e1cd04f
 801956c:	3e178897 	.word	0x3e178897
 8019570:	ffcf5c30 	.word	0xffcf5c30
 8019574:	3e638e29 	.word	0x3e638e29
 8019578:	3ecccccd 	.word	0x3ecccccd
 801957c:	3e3a3325 	.word	0x3e3a3325
 8019580:	3e924925 	.word	0x3e924925
 8019584:	3f2aaaab 	.word	0x3f2aaaab

08019588 <_exit>:
 8019588:	e7fe      	b.n	8019588 <_exit>
	...

0801958c <_init>:
 801958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801958e:	bf00      	nop
 8019590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019592:	bc08      	pop	{r3}
 8019594:	469e      	mov	lr, r3
 8019596:	4770      	bx	lr

08019598 <_fini>:
 8019598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801959a:	bf00      	nop
 801959c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801959e:	bc08      	pop	{r3}
 80195a0:	469e      	mov	lr, r3
 80195a2:	4770      	bx	lr
